const WEBXR_B64 = 'KGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICBmdW5jdGlvbiBsb2cobXNnLCBtb2R1bGUsIG9iail7CiAgICAgICAgY29uc29sZS5sb2coYFtWUiBWaWRlbyBJbmplY3RvciR7bW9kdWxlID8gJyAvICcgOiAnJ30ke21vZHVsZSA/IG1vZHVsZSA6ICcnfV0gJHttc2d9YCwgb2JqID8gb2JqIDogJyAnKTsKICAgIH0KCiAgICB2YXIgc3R5bGVzID0gIiN2ci1vdmVybGF5LW1vZGFsIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgei1pbmRleDogOTk4O1xuICAgIHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDAuOTUpO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuI3ZyLWNhbnZhcy1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG4jdnItc3RhcnQtYnV0dG9uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogOTk5O1xuICAgIHRvcDogMjBweDtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgIHBhZGRpbmc6IDEycHggMjRweDtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwY2M4ODtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG4jdnItY2xvc2UtYnV0dG9uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAyMHB4O1xuICAgIHJpZ2h0OiAyMHB4O1xuICAgIHotaW5kZXg6IDk5OTtcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNjYzMzMzM7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuY2FudmFzLndlYmdsIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogYmxvY2s7XG59IjsKCiAgICAvKioKICAgICAqIEBsaWNlbnNlCiAgICAgKiBDb3B5cmlnaHQgMjAxMC0yMDI1IFRocmVlLmpzIEF1dGhvcnMKICAgICAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQKICAgICAqLwogICAgY29uc3QgUkVWSVNJT04gPSAnMTc4JzsKCiAgICAvKioKICAgICAqIERpc2FibGVzIGZhY2UgY3VsbGluZy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEN1bGxGYWNlTm9uZSA9IDA7CgogICAgLyoqCiAgICAgKiBDdWxscyBiYWNrIGZhY2VzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3VsbEZhY2VCYWNrID0gMTsKCiAgICAvKioKICAgICAqIEN1bGxzIGZyb250IGZhY2VzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3VsbEZhY2VGcm9udCA9IDI7CgogICAgLyoqCiAgICAgKiBGaWx0ZXJzIHNoYWRvdyBtYXBzIHVzaW5nIHRoZSBQZXJjZW50YWdlLUNsb3NlciBGaWx0ZXJpbmcgKFBDRikgYWxnb3JpdGhtLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUENGU2hhZG93TWFwID0gMTsKCiAgICAvKioKICAgICAqIEZpbHRlcnMgc2hhZG93IG1hcHMgdXNpbmcgdGhlIFBlcmNlbnRhZ2UtQ2xvc2VyIEZpbHRlcmluZyAoUENGKSBhbGdvcml0aG0gd2l0aAogICAgICogYmV0dGVyIHNvZnQgc2hhZG93cyBlc3BlY2lhbGx5IHdoZW4gdXNpbmcgbG93LXJlc29sdXRpb24gc2hhZG93IG1hcHMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBQQ0ZTb2Z0U2hhZG93TWFwID0gMjsKCiAgICAvKioKICAgICAqIEZpbHRlcnMgc2hhZG93IG1hcHMgdXNpbmcgdGhlIFZhcmlhbmNlIFNoYWRvdyBNYXAgKFZTTSkgYWxnb3JpdGhtLgogICAgICogV2hlbiB1c2luZyBWU01TaGFkb3dNYXAgYWxsIHNoYWRvdyByZWNlaXZlcnMgd2lsbCBhbHNvIGNhc3Qgc2hhZG93cy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFZTTVNoYWRvd01hcCA9IDM7CgogICAgLyoqCiAgICAgKiBPbmx5IGZyb250IGZhY2VzIGFyZSByZW5kZXJlZC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEZyb250U2lkZSA9IDA7CgogICAgLyoqCiAgICAgKiBPbmx5IGJhY2sgZmFjZXMgYXJlIHJlbmRlcmVkLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQmFja1NpZGUgPSAxOwoKICAgIC8qKgogICAgICogQm90aCBmcm9udCBhbmQgYmFjayBmYWNlcyBhcmUgcmVuZGVyZWQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBEb3VibGVTaWRlID0gMjsKCiAgICAvKioKICAgICAqIE5vIGJsZW5kaW5nIGlzIHBlcmZvcm1lZCB3aGljaCBlZmZlY3RpdmVseSBkaXNhYmxlcwogICAgICogYWxwaGEgdHJhbnNwYXJlbmN5LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTm9CbGVuZGluZyA9IDA7CgogICAgLyoqCiAgICAgKiBUaGUgZGVmYXVsdCBibGVuZGluZy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IE5vcm1hbEJsZW5kaW5nID0gMTsKCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgYWRkaXRpdmUgYmxlbmRpbmcuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBBZGRpdGl2ZUJsZW5kaW5nID0gMjsKCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgc3VidHJhY3RpdmUgYmxlbmRpbmcuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTdWJ0cmFjdGl2ZUJsZW5kaW5nID0gMzsKCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgbXVsdGlwbHkgYmxlbmRpbmcuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBNdWx0aXBseUJsZW5kaW5nID0gNDsKCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgY3VzdG9tIGJsZW5kaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3VzdG9tQmxlbmRpbmcgPSA1OwoKICAgIC8qKgogICAgICogQSBgc291cmNlICsgZGVzdGluYXRpb25gIGJsZW5kaW5nIGVxdWF0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQWRkRXF1YXRpb24gPSAxMDA7CgogICAgLyoqCiAgICAgKiBBIGBzb3VyY2UgLSBkZXN0aW5hdGlvbmAgYmxlbmRpbmcgZXF1YXRpb24uCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTdWJ0cmFjdEVxdWF0aW9uID0gMTAxOwoKICAgIC8qKgogICAgICogQSBgZGVzdGluYXRpb24gLSBzb3VyY2VgIGJsZW5kaW5nIGVxdWF0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7CgogICAgLyoqCiAgICAgKiBBIGJsZW5kIGVxdWF0aW9uIHRoYXQgdXNlcyB0aGUgbWluaW11bSBvZiBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTWluRXF1YXRpb24gPSAxMDM7CgogICAgLyoqCiAgICAgKiBBIGJsZW5kIGVxdWF0aW9uIHRoYXQgdXNlcyB0aGUgbWF4aW11bSBvZiBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTWF4RXF1YXRpb24gPSAxMDQ7CgogICAgLyoqCiAgICAgKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgYDBgLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgWmVyb0ZhY3RvciA9IDIwMDsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBgMWAuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBPbmVGYWN0b3IgPSAyMDE7CgogICAgLyoqCiAgICAgKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgdGhlIHNvdXJjZSBjb2xvcnMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTcmNDb2xvckZhY3RvciA9IDIwMjsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBgMWAgbWludXMgZWFjaCBzb3VyY2UgY29sb3IuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzOwoKICAgIC8qKgogICAgICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IHRoZSBzb3VyY2UgYWxwaGEgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTcmNBbHBoYUZhY3RvciA9IDIwNDsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSAxIG1pbnVzIHRoZSBzb3VyY2UgYWxwaGEgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1OwoKICAgIC8qKgogICAgICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IHRoZSBkZXN0aW5hdGlvbiBhbHBoYSB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IERzdEFscGhhRmFjdG9yID0gMjA2OwoKICAgIC8qKgogICAgICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IGAxYCBtaW51cyB0aGUgZGVzdGluYXRpb24gYWxwaGEgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBPbmVNaW51c0RzdEFscGhhRmFjdG9yID0gMjA3OwoKICAgIC8qKgogICAgICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IHRoZSBkZXN0aW5hdGlvbiBjb2xvci4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IERzdENvbG9yRmFjdG9yID0gMjA4OwoKICAgIC8qKgogICAgICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IGAxYCBtaW51cyBlYWNoIGRlc3RpbmF0aW9uIGNvbG9yLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgdGhlIFJHQiBjb2xvcnMgYnkgdGhlIHNtYWxsZXIgb2YgZWl0aGVyIHRoZSBzb3VyY2UgYWxwaGEKICAgICAqIHZhbHVlIG9yIHRoZSB2YWx1ZSBvZiBgMWAgbWludXMgdGhlIGRlc3RpbmF0aW9uIGFscGhhIHZhbHVlLiBUaGUgYWxwaGEKICAgICAqIHZhbHVlIGlzIG11bHRpcGxpZWQgYnkgYDFgLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciA9IDIxMDsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBhIGNvbnN0YW50IGNvbG9yLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ29uc3RhbnRDb2xvckZhY3RvciA9IDIxMTsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBgMWAgbWludXMgYSBjb25zdGFudCBjb2xvci4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IE9uZU1pbnVzQ29uc3RhbnRDb2xvckZhY3RvciA9IDIxMjsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBhIGNvbnN0YW50IGFscGhhIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ29uc3RhbnRBbHBoYUZhY3RvciA9IDIxMzsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSAxIG1pbnVzIGEgY29uc3RhbnQgYWxwaGEgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IgPSAyMTQ7CgogICAgLyoqCiAgICAgKiBOZXZlciBwYXNzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTmV2ZXJEZXB0aCA9IDA7CgogICAgLyoqCiAgICAgKiBBbHdheXMgcGFzcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEFsd2F5c0RlcHRoID0gMTsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGVzc0RlcHRoID0gMjsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGVzc0VxdWFsRGVwdGggPSAzOwoKICAgIC8qKgogICAgICogUGFzcyBpZiB0aGUgaW5jb21pbmcgdmFsdWUgZXF1YWxzIHRoZSBkZXB0aCBidWZmZXIgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBFcXVhbERlcHRoID0gNDsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgR3JlYXRlckVxdWFsRGVwdGggPSA1OwoKICAgIC8qKgogICAgICogUGFzcyBpZiB0aGUgaW5jb21pbmcgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBkZXB0aCBidWZmZXIgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBHcmVhdGVyRGVwdGggPSA2OwoKICAgIC8qKgogICAgICogUGFzcyBpZiB0aGUgaW5jb21pbmcgdmFsdWUgaXMgbm90IGVxdWFsIHRvIHRoZSBkZXB0aCBidWZmZXIgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBOb3RFcXVhbERlcHRoID0gNzsKCiAgICAvKioKICAgICAqIE11bHRpcGxpZXMgdGhlIGVudmlyb25tZW50IG1hcCBjb2xvciB3aXRoIHRoZSBzdXJmYWNlIGNvbG9yLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTXVsdGlwbHlPcGVyYXRpb24gPSAwOwoKICAgIC8qKgogICAgICogVXNlcyByZWZsZWN0aXZpdHkgdG8gYmxlbmQgYmV0d2VlbiB0aGUgdHdvIGNvbG9ycy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IE1peE9wZXJhdGlvbiA9IDE7CgogICAgLyoqCiAgICAgKiBBZGRzIHRoZSB0d28gY29sb3JzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQWRkT3BlcmF0aW9uID0gMjsKCiAgICAvKioKICAgICAqIE5vIHRvbmUgbWFwcGluZyBpcyBhcHBsaWVkLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTm9Ub25lTWFwcGluZyA9IDA7CgogICAgLyoqCiAgICAgKiBMaW5lYXIgdG9uZSBtYXBwaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGluZWFyVG9uZU1hcHBpbmcgPSAxOwoKICAgIC8qKgogICAgICogUmVpbmhhcmQgdG9uZSBtYXBwaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUmVpbmhhcmRUb25lTWFwcGluZyA9IDI7CgogICAgLyoqCiAgICAgKiBDaW5lb24gdG9uZSBtYXBwaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ2luZW9uVG9uZU1hcHBpbmcgPSAzOwoKICAgIC8qKgogICAgICogQUNFUyBGaWxtaWMgdG9uZSBtYXBwaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNDsKCiAgICAvKioKICAgICAqIEN1c3RvbSB0b25lIG1hcHBpbmcuCiAgICAgKgogICAgICogRXhwZWN0cyBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiBieSBtb2RpZnlpbmcgc2hhZGVyIGNvZGUgb2YgdGhlIG1hdGVyaWFsJ3MgZnJhZ21lbnQgc2hhZGVyLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3VzdG9tVG9uZU1hcHBpbmcgPSA1OwoKICAgIC8qKgogICAgICogQWdYIHRvbmUgbWFwcGluZy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEFnWFRvbmVNYXBwaW5nID0gNjsKCiAgICAvKioKICAgICAqIE5ldXRyYWwgdG9uZSBtYXBwaW5nLgogICAgICoKICAgICAqIEltcGxlbWVudGF0aW9uIGJhc2VkIG9uIHRoZSBLaHJvbm9zIDNEIENvbW1lcmNlIEdyb3VwIHN0YW5kYXJkIHRvbmUgbWFwcGluZy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IE5ldXRyYWxUb25lTWFwcGluZyA9IDc7CgogICAgLyoqCiAgICAgKiBNYXBzIHRleHR1cmVzIHVzaW5nIHRoZSBnZW9tZXRyeSdzIFVWIGNvb3JkaW5hdGVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVVZNYXBwaW5nID0gMzAwOwoKICAgIC8qKgogICAgICogUmVmbGVjdGlvbiBtYXBwaW5nIGZvciBjdWJlIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxOwoKICAgIC8qKgogICAgICogUmVmcmFjdGlvbiBtYXBwaW5nIGZvciBjdWJlIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyOwoKICAgIC8qKgogICAgICogUmVmbGVjdGlvbiBtYXBwaW5nIGZvciBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZXMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMzsKCiAgICAvKioKICAgICAqIFJlZnJhY3Rpb24gbWFwcGluZyBmb3IgZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDQ7CgogICAgLyoqCiAgICAgKiBSZWZsZWN0aW9uIG1hcHBpbmcgZm9yIFBNUkVNIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDY7CgogICAgLyoqCiAgICAgKiBUaGUgdGV4dHVyZSB3aWxsIHNpbXBseSByZXBlYXQgdG8gaW5maW5pdHkuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSZXBlYXRXcmFwcGluZyA9IDEwMDA7CgogICAgLyoqCiAgICAgKiBUaGUgbGFzdCBwaXhlbCBvZiB0aGUgdGV4dHVyZSBzdHJldGNoZXMgdG8gdGhlIGVkZ2Ugb2YgdGhlIG1lc2guCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBDbGFtcFRvRWRnZVdyYXBwaW5nID0gMTAwMTsKCiAgICAvKioKICAgICAqIFRoZSB0ZXh0dXJlIHdpbGwgcmVwZWF0cyB0byBpbmZpbml0eSwgbWlycm9yaW5nIG9uIGVhY2ggcmVwZWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdGV4dHVyZSBlbGVtZW50IHRoYXQgaXMgbmVhcmVzdCAoaW4gTWFuaGF0dGFuIGRpc3RhbmNlKQogICAgICogdG8gdGhlIHNwZWNpZmllZCB0ZXh0dXJlIGNvb3JkaW5hdGVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTmVhcmVzdEZpbHRlciA9IDEwMDM7CgogICAgLyoqCiAgICAgKiBDaG9vc2VzIHRoZSBtaXBtYXAgdGhhdCBtb3N0IGNsb3NlbHkgbWF0Y2hlcyB0aGUgc2l6ZSBvZiB0aGUgcGl4ZWwgYmVpbmcgdGV4dHVyZWQKICAgICAqIGFuZCB1c2VzIHRoZSBgTmVhcmVzdEZpbHRlcmAgY3JpdGVyaW9uICh0aGUgdGV4ZWwgbmVhcmVzdCB0byB0aGUgY2VudGVyIG9mIHRoZSBwaXhlbCkKICAgICAqIHRvIHByb2R1Y2UgYSB0ZXh0dXJlIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0OwoKICAgIC8qKgogICAgICogQ2hvb3NlcyB0aGUgdHdvIG1pcG1hcHMgdGhhdCBtb3N0IGNsb3NlbHkgbWF0Y2ggdGhlIHNpemUgb2YgdGhlIHBpeGVsIGJlaW5nIHRleHR1cmVkIGFuZAogICAgICogdXNlcyB0aGUgYE5lYXJlc3RGaWx0ZXJgIGNyaXRlcmlvbiB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZSBmcm9tIGVhY2ggbWlwbWFwLgogICAgICogVGhlIGZpbmFsIHRleHR1cmUgdmFsdWUgaXMgYSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRob3NlIHR3byB2YWx1ZXMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyID0gMTAwNTsKCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHdlaWdodGVkIGF2ZXJhZ2Ugb2YgdGhlIGZvdXIgdGV4dHVyZSBlbGVtZW50cyB0aGF0IGFyZSBjbG9zZXN0IHRvIHRoZSBzcGVjaWZpZWQKICAgICAqIHRleHR1cmUgY29vcmRpbmF0ZXMsIGFuZCBjYW4gaW5jbHVkZSBpdGVtcyB3cmFwcGVkIG9yIHJlcGVhdGVkIGZyb20gb3RoZXIgcGFydHMgb2YgYSB0ZXh0dXJlLAogICAgICogZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZXMgb2YgYHdyYXBTYCBhbmQgYHdyYXBUYCwgYW5kIG9uIHRoZSBleGFjdCBtYXBwaW5nLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGluZWFyRmlsdGVyID0gMTAwNjsKCiAgICAvKioKICAgICAqIENob29zZXMgdGhlIG1pcG1hcCB0aGF0IG1vc3QgY2xvc2VseSBtYXRjaGVzIHRoZSBzaXplIG9mIHRoZSBwaXhlbCBiZWluZyB0ZXh0dXJlZCBhbmQgdXNlcwogICAgICogdGhlIGBMaW5lYXJGaWx0ZXJgIGNyaXRlcmlvbiAoYSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRoZSBmb3VyIHRleGVscyB0aGF0IGFyZSBjbG9zZXN0IHRvIHRoZQogICAgICogY2VudGVyIG9mIHRoZSBwaXhlbCkgdG8gcHJvZHVjZSBhIHRleHR1cmUgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNzsKCiAgICAvKioKICAgICAqIENob29zZXMgdGhlIHR3byBtaXBtYXBzIHRoYXQgbW9zdCBjbG9zZWx5IG1hdGNoIHRoZSBzaXplIG9mIHRoZSBwaXhlbCBiZWluZyB0ZXh0dXJlZCBhbmQgdXNlcwogICAgICogdGhlIGBMaW5lYXJGaWx0ZXJgIGNyaXRlcmlvbiB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZSBmcm9tIGVhY2ggbWlwbWFwLiBUaGUgZmluYWwgdGV4dHVyZSB2YWx1ZQogICAgICogaXMgYSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRob3NlIHR3byB2YWx1ZXMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA4OwoKICAgIC8qKgogICAgICogQW4gdW5zaWduZWQgYnl0ZSBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7CgogICAgLyoqCiAgICAgKiBBIGJ5dGUgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEJ5dGVUeXBlID0gMTAxMDsKCiAgICAvKioKICAgICAqIEEgc2hvcnQgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFNob3J0VHlwZSA9IDEwMTE7CgogICAgLyoqCiAgICAgKiBBbiB1bnNpZ25lZCBzaG9ydCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyOwoKICAgIC8qKgogICAgICogQW4gaW50IGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBJbnRUeXBlID0gMTAxMzsKCiAgICAvKioKICAgICAqIEFuIHVuc2lnbmVkIGludCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVW5zaWduZWRJbnRUeXBlID0gMTAxNDsKCiAgICAvKioKICAgICAqIEEgZmxvYXQgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEZsb2F0VHlwZSA9IDEwMTU7CgogICAgLyoqCiAgICAgKiBBIGhhbGYgZmxvYXQgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEhhbGZGbG9hdFR5cGUgPSAxMDE2OwoKICAgIC8qKgogICAgICogQW4gdW5zaWduZWQgc2hvcnQgNF80XzRfNCAocGFja2VkKSBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNzsKCiAgICAvKioKICAgICAqIEFuIHVuc2lnbmVkIHNob3J0IDVfNV81XzEgKHBhY2tlZCkgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7CgogICAgLyoqCiAgICAgKiBBbiB1bnNpZ25lZCBpbnQgMjRfOCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVW5zaWduZWRJbnQyNDhUeXBlID0gMTAyMDsKCiAgICAvKioKICAgICAqIEFuIHVuc2lnbmVkIGludCA1XzlfOV85IChwYWNrZWQpIGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBVbnNpZ25lZEludDU5OTlUeXBlID0gMzU5MDI7CgogICAgLyoqCiAgICAgKiBEaXNjYXJkcyB0aGUgcmVkLCBncmVlbiBhbmQgYmx1ZSBjb21wb25lbnRzIGFuZCByZWFkcyBqdXN0IHRoZSBhbHBoYSBjb21wb25lbnQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBBbHBoYUZvcm1hdCA9IDEwMjE7CgogICAgLyoqCiAgICAgKiBEaXNjYXJkcyB0aGUgYWxwaGEgY29tcG9uZW50IGFuZCByZWFkcyB0aGUgcmVkLCBncmVlbiBhbmQgYmx1ZSBjb21wb25lbnQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JGb3JtYXQgPSAxMDIyOwoKICAgIC8qKgogICAgICogUmVhZHMgdGhlIHJlZCwgZ3JlZW4sIGJsdWUgYW5kIGFscGhhIGNvbXBvbmVudHMuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBRm9ybWF0ID0gMTAyMzsKCiAgICAvKioKICAgICAqIFJlYWRzIGVhY2ggZWxlbWVudCBhcyBhIHNpbmdsZSBkZXB0aCB2YWx1ZSwgY29udmVydHMgaXQgdG8gZmxvYXRpbmcgcG9pbnQsIGFuZCBjbGFtcHMgdG8gdGhlIHJhbmdlIGBbMCwxXWAuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBEZXB0aEZvcm1hdCA9IDEwMjY7CgogICAgLyoqCiAgICAgKiBSZWFkcyBlYWNoIGVsZW1lbnQgaXMgYSBwYWlyIG9mIGRlcHRoIGFuZCBzdGVuY2lsIHZhbHVlcy4gVGhlIGRlcHRoIGNvbXBvbmVudCBvZiB0aGUgcGFpciBpcyBpbnRlcnByZXRlZCBhcwogICAgICogaW4gYERlcHRoRm9ybWF0YC4gVGhlIHN0ZW5jaWwgY29tcG9uZW50IGlzIGludGVycHJldGVkIGJhc2VkIG9uIHRoZSBkZXB0aCArIHN0ZW5jaWwgaW50ZXJuYWwgZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNzsKCiAgICAvKioKICAgICAqIERpc2NhcmRzIHRoZSBncmVlbiwgYmx1ZSBhbmQgYWxwaGEgY29tcG9uZW50cyBhbmQgcmVhZHMganVzdCB0aGUgcmVkIGNvbXBvbmVudC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJlZEZvcm1hdCA9IDEwMjg7CgogICAgLyoqCiAgICAgKiBEaXNjYXJkcyB0aGUgZ3JlZW4sIGJsdWUgYW5kIGFscGhhIGNvbXBvbmVudHMgYW5kIHJlYWRzIGp1c3QgdGhlIHJlZCBjb21wb25lbnQuIFRoZSB0ZXhlbHMgYXJlIHJlYWQgYXMgaW50ZWdlcnMgaW5zdGVhZCBvZiBmbG9hdGluZyBwb2ludC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJlZEludGVnZXJGb3JtYXQgPSAxMDI5OwoKICAgIC8qKgogICAgICogRGlzY2FyZHMgdGhlIGFscGhhLCBhbmQgYmx1ZSBjb21wb25lbnRzIGFuZCByZWFkcyB0aGUgcmVkLCBhbmQgZ3JlZW4gY29tcG9uZW50cy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHRm9ybWF0ID0gMTAzMDsKCiAgICAvKioKICAgICAqIERpc2NhcmRzIHRoZSBhbHBoYSwgYW5kIGJsdWUgY29tcG9uZW50cyBhbmQgcmVhZHMgdGhlIHJlZCwgYW5kIGdyZWVuIGNvbXBvbmVudHMuIFRoZSB0ZXhlbHMgYXJlIHJlYWQgYXMgaW50ZWdlcnMgaW5zdGVhZCBvZiBmbG9hdGluZyBwb2ludC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHSW50ZWdlckZvcm1hdCA9IDEwMzE7CgogICAgLyoqCiAgICAgKiBSZWFkcyB0aGUgcmVkLCBncmVlbiwgYmx1ZSBhbmQgYWxwaGEgY29tcG9uZW50cy4gVGhlIHRleGVscyBhcmUgcmVhZCBhcyBpbnRlZ2VycyBpbnN0ZWFkIG9mIGZsb2F0aW5nIHBvaW50LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQUludGVnZXJGb3JtYXQgPSAxMDMzOwoKICAgIC8qKgogICAgICogQSBEWFQxLWNvbXByZXNzZWQgaW1hZ2UgaW4gYW4gUkdCIGltYWdlIGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQl9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3NzY7CgogICAgLyoqCiAgICAgKiBBIERYVDEtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0IgaW1hZ2UgZm9ybWF0IHdpdGggYSBzaW1wbGUgb24vb2ZmIGFscGhhIHZhbHVlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7CgogICAgLyoqCiAgICAgKiBBIERYVDMtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0JBIGltYWdlIGZvcm1hdC4gQ29tcGFyZWQgdG8gYSAzMi1iaXQgUkdCQSB0ZXh0dXJlLCBpdCBvZmZlcnMgNDoxIGNvbXByZXNzaW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7CgogICAgLyoqCiAgICAgKiBBIERYVDUtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0JBIGltYWdlIGZvcm1hdC4gSXQgYWxzbyBwcm92aWRlcyBhIDQ6MSBjb21wcmVzc2lvbiwgYnV0IGRpZmZlcnMgdG8gdGhlIERYVDMKICAgICAqIGNvbXByZXNzaW9uIGluIGhvdyB0aGUgYWxwaGEgY29tcHJlc3Npb24gaXMgZG9uZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5OwoKICAgIC8qKgogICAgICogUFZSVEMgUkdCIGNvbXByZXNzaW9uIGluIDQtYml0IG1vZGUuIE9uZSBibG9jayBmb3IgZWFjaCA0w5c0IHBpeGVscy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDA7CgogICAgLyoqCiAgICAgKiBQVlJUQyBSR0IgY29tcHJlc3Npb24gaW4gMi1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDjDlzQgcGl4ZWxzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTsKCiAgICAvKioKICAgICAqIFBWUlRDIFJHQkEgY29tcHJlc3Npb24gaW4gNC1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDTDlzQgcGl4ZWxzLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDI7CgogICAgLyoqCiAgICAgKiBQVlJUQyBSR0JBIGNvbXByZXNzaW9uIGluIDItYml0IG1vZGUuIE9uZSBibG9jayBmb3IgZWFjaCA4w5c0IHBpeGVscy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzOwoKICAgIC8qKgogICAgICogRVRDMSBSR0IgZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7CgogICAgLyoqCiAgICAgKiBFVEMyIFJHQiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JfRVRDMl9Gb3JtYXQgPSAzNzQ5MjsKCiAgICAvKioKICAgICAqIEVUQzIgUkdCQSBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCA9IDM3NDk2OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDR4NCBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDV4NCBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDV4NSBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfNXg1X0Zvcm1hdCA9IDM3ODEwOwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDZ4NSBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExOwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDZ4NiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyOwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDh4NSBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfOHg1X0Zvcm1hdCA9IDM3ODEzOwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDh4NiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDh4OCBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDEweDUgZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7CgogICAgLyoqCiAgICAgKiBBU1RDIFJHQkEgMTB4NiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgPSAzNzgxNzsKCiAgICAvKioKICAgICAqIEFTVEMgUkdCQSAxMHg4IGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4OwoKICAgIC8qKgogICAgICogQVNUQyBSR0JBIDEweDEwIGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTsKCiAgICAvKioKICAgICAqIEFTVEMgUkdCQSAxMngxMCBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7CgogICAgLyoqCiAgICAgKiBBU1RDIFJHQkEgMTJ4MTIgZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxOwoKICAgIC8qKgogICAgICogQlBUQyBSR0JBIGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFJHQkFfQlBUQ19Gb3JtYXQgPSAzNjQ5MjsKCiAgICAvKioKICAgICAqIEJQVEMgU2lnbmVkIFJHQiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JfQlBUQ19TSUdORURfRm9ybWF0ID0gMzY0OTQ7CgogICAgLyoqCiAgICAgKiBCUFRDIFVuc2lnbmVkIFJHQiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgPSAzNjQ5NTsKCiAgICAvKioKICAgICAqIFJHVEMxIFJlZCBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSRURfUkdUQzFfRm9ybWF0ID0gMzYyODM7CgogICAgLyoqCiAgICAgKiBSR1RDMSBTaWduZWQgUmVkIGZvcm1hdC4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ID0gMzYyODQ7CgogICAgLyoqCiAgICAgKiBSR1RDMiBSZWQgR3JlZW4gZm9ybWF0LgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCA9IDM2Mjg1OwoKICAgIC8qKgogICAgICogUkdUQzIgU2lnbmVkIFJlZCBHcmVlbiBmb3JtYXQuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCA9IDM2Mjg2OwoKICAgIC8qKgogICAgICogQmFzaWMgZGVwdGggcGFja2luZy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDsKCiAgICAvKioKICAgICAqIEEgZGVwdGggdmFsdWUgaXMgcGFja2VkIGludG8gMzIgYml0IFJHQkEuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTsKCiAgICAvKioKICAgICAqIE5vcm1hbCBpbmZvcm1hdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgdW5kZXJseWluZyBzdXJmYWNlLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDsKCiAgICAvKioKICAgICAqIE5vcm1hbCBpbmZvcm1hdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgb2JqZWN0IG9yaWVudGF0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgT2JqZWN0U3BhY2VOb3JtYWxNYXAgPSAxOwoKICAgIC8vIENvbG9yIHNwYWNlIHN0cmluZyBpZGVudGlmaWVycywgbWF0Y2hpbmcgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA0IGFuZCBXZWJHUFUgbmFtZXMgd2hlcmUgYXZhaWxhYmxlLgoKICAgIC8qKgogICAgICogTm8gY29sb3Igc3BhY2UuCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBOb0NvbG9yU3BhY2UgPSAnJzsKCiAgICAvKioKICAgICAqIHNSR0IgY29sb3Igc3BhY2UuCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTUkdCQ29sb3JTcGFjZSA9ICdzcmdiJzsKCiAgICAvKioKICAgICAqIHNSR0ItbGluZWFyIGNvbG9yIHNwYWNlLgogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGluZWFyU1JHQkNvbG9yU3BhY2UgPSAnc3JnYi1saW5lYXInOwoKICAgIC8qKgogICAgICogTGluZWFyIHRyYW5zZmVyIGZ1bmN0aW9uLgogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgTGluZWFyVHJhbnNmZXIgPSAnbGluZWFyJzsKCiAgICAvKioKICAgICAqIHNSR0IgdHJhbnNmZXIgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBTUkdCVHJhbnNmZXIgPSAnc3JnYic7CgogICAgLyoqCiAgICAgKiBLZWVwcyB0aGUgY3VycmVudCB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEtlZXBTdGVuY2lsT3AgPSA3NjgwOwoKICAgIC8qKgogICAgICogV2lsbCBhbHdheXMgcmV0dXJuIHRydWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTsKCiAgICAvKioKICAgICAqIE5ldmVyIHBhc3MuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBOZXZlckNvbXBhcmUgPSA1MTI7CgogICAgLyoqCiAgICAgKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHRleHR1cmUgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBMZXNzQ29tcGFyZSA9IDUxMzsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGVxdWFscyB0aGUgdGV4dHVyZSB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEVxdWFsQ29tcGFyZSA9IDUxNDsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdGV4dHVyZSB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IExlc3NFcXVhbENvbXBhcmUgPSA1MTU7CgogICAgLyoqCiAgICAgKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRleHR1cmUgdmFsdWUuCiAgICAgKgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBjb25zdGFudAogICAgICovCiAgICBjb25zdCBHcmVhdGVyQ29tcGFyZSA9IDUxNjsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIG5vdCBlcXVhbCB0byB0aGUgdGV4dHVyZSB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IE5vdEVxdWFsQ29tcGFyZSA9IDUxNzsKCiAgICAvKioKICAgICAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdGV4dHVyZSB2YWx1ZS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEdyZWF0ZXJFcXVhbENvbXBhcmUgPSA1MTg7CgogICAgLyoqCiAgICAgKiBBbHdheXMgcGFzcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IEFsd2F5c0NvbXBhcmUgPSA1MTk7CgogICAgLyoqCiAgICAgKiBUaGUgY29udGVudHMgYXJlIGludGVuZGVkIHRvIGJlIHNwZWNpZmllZCBvbmNlIGJ5IHRoZSBhcHBsaWNhdGlvbiwgYW5kIHVzZWQgbWFueQogICAgICogdGltZXMgYXMgdGhlIHNvdXJjZSBmb3IgZHJhd2luZyBhbmQgaW1hZ2Ugc3BlY2lmaWNhdGlvbiBjb21tYW5kcy4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0OwoKICAgIC8qKgogICAgICogR0xTTCAzIHNoYWRlciBjb2RlLgogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgR0xTTDMgPSAnMzAwIGVzJzsKCiAgICAvKioKICAgICAqIFdlYkdMIGNvb3JkaW5hdGUgc3lzdGVtLgogICAgICoKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAY29uc3RhbnQKICAgICAqLwogICAgY29uc3QgV2ViR0xDb29yZGluYXRlU3lzdGVtID0gMjAwMDsKCiAgICAvKioKICAgICAqIFdlYkdQVSBjb29yZGluYXRlIHN5c3RlbS4KICAgICAqCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICogQGNvbnN0YW50CiAgICAgKi8KICAgIGNvbnN0IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gPSAyMDAxOwoKICAgIC8qKgogICAgICogVGhpcyB0eXBlIHJlcHJlc2VudHMgbW91c2UgYnV0dG9ucyBhbmQgaW50ZXJhY3Rpb24gdHlwZXMgaW4gY29udGV4dCBvZiBjb250cm9scy4KICAgICAqCiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBDb25zdGFudHNNb3VzZQogICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE1JRERMRSAtIFRoZSBsZWZ0IG1vdXNlIGJ1dHRvbi4KICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMRUZUIC0gVGhlIG1pZGRsZSBtb3VzZSBidXR0b24uCiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gUklHSFQgLSBUaGUgcmlnaHQgbW91c2UgYnV0dG9uLgogICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFJPVEFURSAtIEEgcm90YXRlIGludGVyYWN0aW9uLgogICAgICogQHByb3BlcnR5IHtudW1iZXJ9IERPTExZIC0gQSBkb2xseSBpbnRlcmFjdGlvbi4KICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQQU4gLSBBIHBhbiBpbnRlcmFjdGlvbi4KICAgICAqKi8KCiAgICAvKioKICAgICAqIFRoaXMgdHlwZSByZXByZXNlbnRzIHRvdWNoIGludGVyYWN0aW9uIHR5cGVzIGluIGNvbnRleHQgb2YgY29udHJvbHMuCiAgICAgKgogICAgICogQHR5cGVkZWYge09iamVjdH0gQ29uc3RhbnRzVG91Y2gKICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBST1RBVEUgLSBBIHJvdGF0ZSBpbnRlcmFjdGlvbi4KICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQQU4gLSBBIHBhbiBpbnRlcmFjdGlvbi4KICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBET0xMWV9QQU4gLSBUaGUgZG9sbHktcGFuIGludGVyYWN0aW9uLgogICAgICogQHByb3BlcnR5IHtudW1iZXJ9IERPTExZX1JPVEFURSAtIEEgZG9sbHktcm90YXRlIGludGVyYWN0aW9uLgogICAgICoqLwoKICAgIC8qKgogICAgICogVGhpcyB0eXBlIHJlcHJlc2VudHMgdGhlIGRpZmZlcmVudCB0aW1lc3RhbXAgcXVlcnkgdHlwZXMuCiAgICAgKgogICAgICogQHR5cGVkZWYge09iamVjdH0gQ29uc3RhbnRzVGltZXN0YW1wUXVlcnkKICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDT01QVVRFIC0gQSBgY29tcHV0ZWAgdGltZXN0YW1wIHF1ZXJ5LgogICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFJFTkRFUiAtIEEgYHJlbmRlcmAgdGltZXN0YW1wIHF1ZXJ5LgogICAgICoqLwoKICAgIC8qKgogICAgICogUmVwcmVzZW50cyB0aGUgZGlmZmVyZW50IGludGVycG9sYXRpb24gc2FtcGxpbmcgdHlwZXMuCiAgICAgKgogICAgICogQHR5cGVkZWYge09iamVjdH0gQ29uc3RhbnRzSW50ZXJwb2xhdGlvblNhbXBsaW5nVHlwZQogICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBFUlNQRUNUSVZFIC0gUGVyc3BlY3RpdmUtY29ycmVjdCBpbnRlcnBvbGF0aW9uLgogICAgICogQHByb3BlcnR5IHtzdHJpbmd9IExJTkVBUiAtIExpbmVhciBpbnRlcnBvbGF0aW9uLgogICAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZMQVQgLSBGbGF0IGludGVycG9sYXRpb24uCiAgICAgKi8KCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgdGhlIGRpZmZlcmVudCBpbnRlcnBvbGF0aW9uIHNhbXBsaW5nIG1vZGVzLgogICAgICoKICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IENvbnN0YW50c0ludGVycG9sYXRpb25TYW1wbGluZ01vZGUKICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBOT1JNQUwgLSBOb3JtYWwgc2FtcGxpbmcgbW9kZS4KICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDRU5UUk9JRCAtIENlbnRyb2lkIHNhbXBsaW5nIG1vZGUuCiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gU0FNUExFIC0gU2FtcGxlLXNwZWNpZmljIHNhbXBsaW5nIG1vZGUuCiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gRkxBVF9GSVJTVCAtIEZsYXQgaW50ZXJwb2xhdGlvbiB1c2luZyB0aGUgZmlyc3QgdmVydGV4LgogICAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZMQVRfRUlUSEVSIC0gRmxhdCBpbnRlcnBvbGF0aW9uIHVzaW5nIGVpdGhlciB2ZXJ0ZXguCiAgICAgKi8KCiAgICAvKioKICAgICAqIFRoaXMgbW9kdWxlcyBhbGxvd3MgdG8gZGlzcGF0Y2ggZXZlbnQgb2JqZWN0cyBvbiBjdXN0b20gSmF2YVNjcmlwdCBvYmplY3RzLgogICAgICoKICAgICAqIE1haW4gcmVwb3NpdG9yeTogW2V2ZW50ZGlzcGF0Y2hlci5qc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi9ldmVudGRpc3BhdGNoZXIuanMvfQogICAgICoKICAgICAqIENvZGUgRXhhbXBsZToKICAgICAqIGBgYGpzCiAgICAgKiBjbGFzcyBDYXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIgewogICAgICogCXN0YXJ0KCkgewogICAgICoJCXRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc3RhcnQnLCBtZXNzYWdlOiAndnJvb20gdnJvb20hJyB9ICk7CiAgICAgKgl9CiAgICAgKn07CiAgICAgKgogICAgICogLy8gVXNpbmcgZXZlbnRzIHdpdGggdGhlIGN1c3RvbSBvYmplY3QKICAgICAqIGNvbnN0IGNhciA9IG5ldyBDYXIoKTsKICAgICAqIGNhci5hZGRFdmVudExpc3RlbmVyKCAnc3RhcnQnLCBmdW5jdGlvbiAoIGV2ZW50ICkgewogICAgICogCWFsZXJ0KCBldmVudC5tZXNzYWdlICk7CiAgICAgKiB9ICk7CiAgICAgKgogICAgICogY2FyLnN0YXJ0KCk7CiAgICAgKiBgYGAKICAgICAqLwogICAgY2xhc3MgRXZlbnREaXNwYXRjaGVyIHsKCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGdpdmVuIGV2ZW50IHR5cGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGxpc3RlbiB0by4KICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGZpcmVkLgogICAgCSAqLwogICAgCWFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyICkgewoKICAgIAkJaWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHRoaXMuX2xpc3RlbmVycyA9IHt9OwoKICAgIAkJY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzOwoKICAgIAkJaWYgKCBsaXN0ZW5lcnNbIHR5cGUgXSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWxpc3RlbmVyc1sgdHlwZSBdID0gW107CgogICAgCQl9CgogICAgCQlpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0xICkgewoKICAgIAkJCWxpc3RlbmVyc1sgdHlwZSBdLnB1c2goIGxpc3RlbmVyICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGV2ZW50IGxpc3RlbmVyIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBnaXZlbiBldmVudCB0eXBlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBldmVudC4KICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byBjaGVjay4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBldmVudCBsaXN0ZW5lciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZ2l2ZW4gZXZlbnQgdHlwZS4KICAgIAkgKi8KICAgIAloYXNFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHsKCiAgICAJCWNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyczsKCiAgICAJCWlmICggbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7CgogICAgCQlyZXR1cm4gbGlzdGVuZXJzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApICE9PSAtMTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZW1vdmVzIHRoZSBnaXZlbiBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSBnaXZlbiBldmVudCB0eXBlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBldmVudC4KICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byByZW1vdmUuCiAgICAJICovCiAgICAJcmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7CgogICAgCQljb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgogICAgCQlpZiAoIGxpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOwoKICAgIAkJY29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdOwoKICAgIAkJaWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY29uc3QgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YoIGxpc3RlbmVyICk7CgogICAgCQkJaWYgKCBpbmRleCAhPT0gLTEgKSB7CgogICAgCQkJCWxpc3RlbmVyQXJyYXkuc3BsaWNlKCBpbmRleCwgMSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IG9iamVjdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCB0aGF0IGdldHMgZmlyZWQuCiAgICAJICovCiAgICAJZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7CgogICAgCQljb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgogICAgCQlpZiAoIGxpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOwoKICAgIAkJY29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdOwoKICAgIAkJaWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJZXZlbnQudGFyZ2V0ID0gdGhpczsKCiAgICAJCQkvLyBNYWtlIGEgY29weSwgaW4gY2FzZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hpbGUgaXRlcmF0aW5nLgogICAgCQkJY29uc3QgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7CgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJYXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApOwoKICAgIAkJCX0KCiAgICAJCQlldmVudC50YXJnZXQgPSBudWxsOwoKICAgIAkJfQoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF9sdXQgPSBbICcwMCcsICcwMScsICcwMicsICcwMycsICcwNCcsICcwNScsICcwNicsICcwNycsICcwOCcsICcwOScsICcwYScsICcwYicsICcwYycsICcwZCcsICcwZScsICcwZicsICcxMCcsICcxMScsICcxMicsICcxMycsICcxNCcsICcxNScsICcxNicsICcxNycsICcxOCcsICcxOScsICcxYScsICcxYicsICcxYycsICcxZCcsICcxZScsICcxZicsICcyMCcsICcyMScsICcyMicsICcyMycsICcyNCcsICcyNScsICcyNicsICcyNycsICcyOCcsICcyOScsICcyYScsICcyYicsICcyYycsICcyZCcsICcyZScsICcyZicsICczMCcsICczMScsICczMicsICczMycsICczNCcsICczNScsICczNicsICczNycsICczOCcsICczOScsICczYScsICczYicsICczYycsICczZCcsICczZScsICczZicsICc0MCcsICc0MScsICc0MicsICc0MycsICc0NCcsICc0NScsICc0NicsICc0NycsICc0OCcsICc0OScsICc0YScsICc0YicsICc0YycsICc0ZCcsICc0ZScsICc0ZicsICc1MCcsICc1MScsICc1MicsICc1MycsICc1NCcsICc1NScsICc1NicsICc1NycsICc1OCcsICc1OScsICc1YScsICc1YicsICc1YycsICc1ZCcsICc1ZScsICc1ZicsICc2MCcsICc2MScsICc2MicsICc2MycsICc2NCcsICc2NScsICc2NicsICc2NycsICc2OCcsICc2OScsICc2YScsICc2YicsICc2YycsICc2ZCcsICc2ZScsICc2ZicsICc3MCcsICc3MScsICc3MicsICc3MycsICc3NCcsICc3NScsICc3NicsICc3NycsICc3OCcsICc3OScsICc3YScsICc3YicsICc3YycsICc3ZCcsICc3ZScsICc3ZicsICc4MCcsICc4MScsICc4MicsICc4MycsICc4NCcsICc4NScsICc4NicsICc4NycsICc4OCcsICc4OScsICc4YScsICc4YicsICc4YycsICc4ZCcsICc4ZScsICc4ZicsICc5MCcsICc5MScsICc5MicsICc5MycsICc5NCcsICc5NScsICc5NicsICc5NycsICc5OCcsICc5OScsICc5YScsICc5YicsICc5YycsICc5ZCcsICc5ZScsICc5ZicsICdhMCcsICdhMScsICdhMicsICdhMycsICdhNCcsICdhNScsICdhNicsICdhNycsICdhOCcsICdhOScsICdhYScsICdhYicsICdhYycsICdhZCcsICdhZScsICdhZicsICdiMCcsICdiMScsICdiMicsICdiMycsICdiNCcsICdiNScsICdiNicsICdiNycsICdiOCcsICdiOScsICdiYScsICdiYicsICdiYycsICdiZCcsICdiZScsICdiZicsICdjMCcsICdjMScsICdjMicsICdjMycsICdjNCcsICdjNScsICdjNicsICdjNycsICdjOCcsICdjOScsICdjYScsICdjYicsICdjYycsICdjZCcsICdjZScsICdjZicsICdkMCcsICdkMScsICdkMicsICdkMycsICdkNCcsICdkNScsICdkNicsICdkNycsICdkOCcsICdkOScsICdkYScsICdkYicsICdkYycsICdkZCcsICdkZScsICdkZicsICdlMCcsICdlMScsICdlMicsICdlMycsICdlNCcsICdlNScsICdlNicsICdlNycsICdlOCcsICdlOScsICdlYScsICdlYicsICdlYycsICdlZCcsICdlZScsICdlZicsICdmMCcsICdmMScsICdmMicsICdmMycsICdmNCcsICdmNScsICdmNicsICdmNycsICdmOCcsICdmOScsICdmYScsICdmYicsICdmYycsICdmZCcsICdmZScsICdmZicgXTsKCgogICAgY29uc3QgREVHMlJBRCA9IE1hdGguUEkgLyAxODA7CiAgICBjb25zdCBSQUQyREVHID0gMTgwIC8gTWF0aC5QSTsKCiAgICAvKioKICAgICAqIEdlbmVyYXRlIGEgW1VVSURde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaXZlcnNhbGx5X3VuaXF1ZV9pZGVudGlmaWVyfQogICAgICogKHVuaXZlcnNhbGx5IHVuaXF1ZSBpZGVudGlmaWVyKS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVUlELgogICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7CgogICAgCS8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdC8yMTk2MzEzNiMyMTk2MzEzNgoKICAgIAljb25zdCBkMCA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDsKICAgIAljb25zdCBkMSA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDsKICAgIAljb25zdCBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDsKICAgIAljb25zdCBkMyA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDsKICAgIAljb25zdCB1dWlkID0gX2x1dFsgZDAgJiAweGZmIF0gKyBfbHV0WyBkMCA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMCA+PiAyNCAmIDB4ZmYgXSArICctJyArCiAgICAJCQlfbHV0WyBkMSAmIDB4ZmYgXSArIF9sdXRbIGQxID4+IDggJiAweGZmIF0gKyAnLScgKyBfbHV0WyBkMSA+PiAxNiAmIDB4MGYgfCAweDQwIF0gKyBfbHV0WyBkMSA+PiAyNCAmIDB4ZmYgXSArICctJyArCiAgICAJCQlfbHV0WyBkMiAmIDB4M2YgfCAweDgwIF0gKyBfbHV0WyBkMiA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDIgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMiA+PiAyNCAmIDB4ZmYgXSArCiAgICAJCQlfbHV0WyBkMyAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDggJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDI0ICYgMHhmZiBdOwoKICAgIAkvLyAudG9Mb3dlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuCiAgICAJcmV0dXJuIHV1aWQudG9Mb3dlckNhc2UoKTsKCiAgICB9CgogICAgLyoqCiAgICAgKiBDbGFtcHMgdGhlIGdpdmVuIHZhbHVlIGJldHdlZW4gbWluIGFuZCBtYXguCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNsYW1wLgogICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW4gdmFsdWUuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heCB2YWx1ZS4KICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsYW1wZWQgdmFsdWUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgbWluLCBtYXggKSB7CgogICAgCXJldHVybiBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCB2YWx1ZSApICk7CgogICAgfQoKICAgIC8qKgogICAgICogQ29tcHV0ZXMgdGhlIEV1Y2xpZGVhbiBtb2R1bG8gb2YgdGhlIGdpdmVuIHBhcmFtZXRlcnMgdGhhdAogICAgICogaXMgYCggKCBuICUgbSApICsgbSApICUgbWAuCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IG4gLSBUaGUgZmlyc3QgcGFyYW1ldGVyLgogICAgICogQHBhcmFtIHtudW1iZXJ9IG0gLSBUaGUgc2Vjb25kIHBhcmFtZXRlci4KICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIEV1Y2xpZGVhbiBtb2R1bG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGV1Y2xpZGVhbk1vZHVsbyggbiwgbSApIHsKCiAgICAJLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxvX29wZXJhdGlvbgoKICAgIAlyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtOwoKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSB2YWx1ZSBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgZnJvbSB0d28ga25vd24gcG9pbnRzIGJhc2VkIG9uIHRoZSBnaXZlbiBpbnRlcnZhbCAtCiAgICAgKiBgdCA9IDBgIHdpbGwgcmV0dXJuIGB4YCBhbmQgYHQgPSAxYCB3aWxsIHJldHVybiBgeWAuCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgc3RhcnQgcG9pbnQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGVuZCBwb2ludC4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxlcnAoIHgsIHksIHQgKSB7CgogICAgCXJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7CgogICAgfQoKICAgIC8qKgogICAgICogRGVub3JtYWxpemVzIHRoZSBnaXZlbiB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHR5cGVkIGFycmF5LgogICAgICoKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBkZW5vcm1hbGl6ZS4KICAgICAqIEBwYXJhbSB7VHlwZWRBcnJheX0gYXJyYXkgLSBUaGUgdHlwZWQgYXJyYXkgdGhhdCBkZWZpbmVzIHRoZSBkYXRhIHR5cGUgb2YgdGhlIHZhbHVlLgogICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZGVub3JtYWxpemUgKGZsb2F0KSB2YWx1ZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC4KICAgICAqLwogICAgZnVuY3Rpb24gZGVub3JtYWxpemUoIHZhbHVlLCBhcnJheSApIHsKCiAgICAJc3dpdGNoICggYXJyYXkuY29uc3RydWN0b3IgKSB7CgogICAgCQljYXNlIEZsb2F0MzJBcnJheToKCiAgICAJCQlyZXR1cm4gdmFsdWU7CgogICAgCQljYXNlIFVpbnQzMkFycmF5OgoKICAgIAkJCXJldHVybiB2YWx1ZSAvIDQyOTQ5NjcyOTUuMDsKCiAgICAJCWNhc2UgVWludDE2QXJyYXk6CgogICAgCQkJcmV0dXJuIHZhbHVlIC8gNjU1MzUuMDsKCiAgICAJCWNhc2UgVWludDhBcnJheToKCiAgICAJCQlyZXR1cm4gdmFsdWUgLyAyNTUuMDsKCiAgICAJCWNhc2UgSW50MzJBcnJheToKCiAgICAJCQlyZXR1cm4gTWF0aC5tYXgoIHZhbHVlIC8gMjE0NzQ4MzY0Ny4wLCAtMSApOwoKICAgIAkJY2FzZSBJbnQxNkFycmF5OgoKICAgIAkJCXJldHVybiBNYXRoLm1heCggdmFsdWUgLyAzMjc2Ny4wLCAtMSApOwoKICAgIAkJY2FzZSBJbnQ4QXJyYXk6CgogICAgCQkJcmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDEyNy4wLCAtMSApOwoKICAgIAkJZGVmYXVsdDoKCiAgICAJCQl0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNvbXBvbmVudCB0eXBlLicgKTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHZhbHVlIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gdHlwZWQgYXJyYXkuCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGZsb2F0IHZhbHVlIGluIHRoZSByYW5nZSBgWzAsMV1gIHRvIG5vcm1hbGl6ZS4KICAgICAqIEBwYXJhbSB7VHlwZWRBcnJheX0gYXJyYXkgLSBUaGUgdHlwZWQgYXJyYXkgdGhhdCBkZWZpbmVzIHRoZSBkYXRhIHR5cGUgb2YgdGhlIHZhbHVlLgogICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbm9ybWFsaXplIHZhbHVlLgogICAgICovCiAgICBmdW5jdGlvbiBub3JtYWxpemUkMyggdmFsdWUsIGFycmF5ICkgewoKICAgIAlzd2l0Y2ggKCBhcnJheS5jb25zdHJ1Y3RvciApIHsKCiAgICAJCWNhc2UgRmxvYXQzMkFycmF5OgoKICAgIAkJCXJldHVybiB2YWx1ZTsKCiAgICAJCWNhc2UgVWludDMyQXJyYXk6CgogICAgCQkJcmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogNDI5NDk2NzI5NS4wICk7CgogICAgCQljYXNlIFVpbnQxNkFycmF5OgoKICAgIAkJCXJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDY1NTM1LjAgKTsKCiAgICAJCWNhc2UgVWludDhBcnJheToKCiAgICAJCQlyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAyNTUuMCApOwoKICAgIAkJY2FzZSBJbnQzMkFycmF5OgoKICAgIAkJCXJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDIxNDc0ODM2NDcuMCApOwoKICAgIAkJY2FzZSBJbnQxNkFycmF5OgoKICAgIAkJCXJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDMyNzY3LjAgKTsKCiAgICAJCWNhc2UgSW50OEFycmF5OgoKICAgIAkJCXJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDEyNy4wICk7CgogICAgCQlkZWZhdWx0OgoKICAgIAkJCXRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY29tcG9uZW50IHR5cGUuJyApOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgMkQgdmVjdG9yLiBBIDJEIHZlY3RvciBpcyBhbiBvcmRlcmVkIHBhaXIgb2YgbnVtYmVycwogICAgICogKGxhYmVsZWQgeCBhbmQgeSksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBhIG51bWJlciBvZiB0aGluZ3MsIHN1Y2ggYXM6CiAgICAgKgogICAgICogLSBBIHBvaW50IGluIDJEIHNwYWNlIChpLmUuIGEgcG9zaXRpb24gb24gYSBwbGFuZSkuCiAgICAgKiAtIEEgZGlyZWN0aW9uIGFuZCBsZW5ndGggYWNyb3NzIGEgcGxhbmUuIEluIHRocmVlLmpzIHRoZSBsZW5ndGggd2lsbAogICAgICogYWx3YXlzIGJlIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2Uoc3RyYWlnaHQtbGluZSBkaXN0YW5jZSkgZnJvbSBgKDAsIDApYCB0byBgKHgsIHkpYAogICAgICogYW5kIHRoZSBkaXJlY3Rpb24gaXMgYWxzbyBtZWFzdXJlZCBmcm9tIGAoMCwgMClgIHRvd2FyZHMgYCh4LCB5KWAuCiAgICAgKiAtIEFueSBhcmJpdHJhcnkgb3JkZXJlZCBwYWlyIG9mIG51bWJlcnMuCiAgICAgKgogICAgICogVGhlcmUgYXJlIG90aGVyIHRoaW5ncyBhIDJEIHZlY3RvciBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQsIHN1Y2ggYXMKICAgICAqIG1vbWVudHVtIHZlY3RvcnMsIGNvbXBsZXggbnVtYmVycyBhbmQgc28gb24sIGhvd2V2ZXIgdGhlc2UgYXJlIHRoZSBtb3N0CiAgICAgKiBjb21tb24gdXNlcyBpbiB0aHJlZS5qcy4KICAgICAqCiAgICAgKiBJdGVyYXRpbmcgdGhyb3VnaCBhIHZlY3RvciBpbnN0YW5jZSB3aWxsIHlpZWxkIGl0cyBjb21wb25lbnRzIGAoeCwgeSlgIGluCiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBvcmRlci4KICAgICAqIGBgYGpzCiAgICAgKiBjb25zdCBhID0gbmV3IFRIUkVFLlZlY3RvcjIoIDAsIDEgKTsKICAgICAqCiAgICAgKiAvL25vIGFyZ3VtZW50czsgd2lsbCBiZSBpbml0aWFsaXNlZCB0byAoMCwgMCkKICAgICAqIGNvbnN0IGIgPSBuZXcgVEhSRUUuVmVjdG9yMiggKTsKICAgICAqCiAgICAgKiBjb25zdCBkID0gYS5kaXN0YW5jZVRvKCBiICk7CiAgICAgKiBgYGAKICAgICAqLwogICAgY2xhc3MgVmVjdG9yMiB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgMkQgdmVjdG9yLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gVGhlIHkgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQlWZWN0b3IyLnByb3RvdHlwZS5pc1ZlY3RvcjIgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB4IHZhbHVlIG9mIHRoaXMgdmVjdG9yLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKi8KICAgIAkJdGhpcy54ID0geDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgeSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICovCiAgICAJCXRoaXMueSA9IHk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWxpYXMgZm9yIHtAbGluayBWZWN0b3IyI3h9LgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKi8KICAgIAlnZXQgd2lkdGgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy54OwoKICAgIAl9CgogICAgCXNldCB3aWR0aCggdmFsdWUgKSB7CgogICAgCQl0aGlzLnggPSB2YWx1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBbGlhcyBmb3Ige0BsaW5rIFZlY3RvcjIjeX0uCiAgICAJICoKICAgIAkgKiBAdHlwZSB7bnVtYmVyfQogICAgCSAqLwogICAgCWdldCBoZWlnaHQoKSB7CgogICAgCQlyZXR1cm4gdGhpcy55OwoKICAgIAl9CgogICAgCXNldCBoZWlnaHQoIHZhbHVlICkgewoKICAgIAkJdGhpcy55ID0gdmFsdWU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBvZiB0aGUgeCBjb21wb25lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgb2YgdGhlIHkgY29tcG9uZW50LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldCggeCwgeSApIHsKCiAgICAJCXRoaXMueCA9IHg7CiAgICAJCXRoaXMueSA9IHk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyB0byB0aGUgc2FtZSB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciBhbGwgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0U2NhbGFyKCBzY2FsYXIgKSB7CgogICAgCQl0aGlzLnggPSBzY2FsYXI7CiAgICAJCXRoaXMueSA9IHNjYWxhcjsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvcidzIHggY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZQogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldFgoIHggKSB7CgogICAgCQl0aGlzLnggPSB4OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yJ3MgeSBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0WSggeSApIHsKCiAgICAJCXRoaXMueSA9IHk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBbGxvd3MgdG8gc2V0IGEgdmVjdG9yIGNvbXBvbmVudCB3aXRoIGFuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbXBvbmVudCBpbmRleC4gYDBgIGVxdWFscyB0byB4LCBgMWAgZXF1YWxzIHRvIHkuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHsKCiAgICAJCXN3aXRjaCAoIGluZGV4ICkgewoKICAgIAkJCWNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrOwogICAgCQkJY2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7CiAgICAJCQlkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHZlY3RvciBjb21wb25lbnQgd2hpY2ggbWF0Y2hlcyB0aGUgZ2l2ZW4gaW5kZXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY29tcG9uZW50IGluZGV4LiBgMGAgZXF1YWxzIHRvIHgsIGAxYCBlcXVhbHMgdG8geS4KICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IEEgdmVjdG9yIGNvbXBvbmVudCB2YWx1ZS4KICAgIAkgKi8KICAgIAlnZXRDb21wb25lbnQoIGluZGV4ICkgewoKICAgIAkJc3dpdGNoICggaW5kZXggKSB7CgogICAgCQkJY2FzZSAwOiByZXR1cm4gdGhpcy54OwogICAgCQkJY2FzZSAxOiByZXR1cm4gdGhpcy55OwogICAgCQkJZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgbmV3IHZlY3RvciB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNsb25lKCkgewoKICAgIAkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljb3B5KCB2ICkgewoKICAgIAkJdGhpcy54ID0gdi54OwogICAgCQl0aGlzLnkgPSB2Lnk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gYWRkLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFkZCggdiApIHsKCiAgICAJCXRoaXMueCArPSB2Lng7CiAgICAJCXRoaXMueSArPSB2Lnk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgdG8gYWxsIGNvbXBvbmVudHMgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhciB0byBhZGQuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkU2NhbGFyKCBzICkgewoKICAgIAkJdGhpcy54ICs9IHM7CiAgICAJCXRoaXMueSArPSBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkVmVjdG9ycyggYSwgYiApIHsKCiAgICAJCXRoaXMueCA9IGEueCArIGIueDsKICAgIAkJdGhpcy55ID0gYS55ICsgYi55OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHNjYWxlZCBieSB0aGUgZ2l2ZW4gZmFjdG9yIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIGZhY3RvciB0aGF0IHNjYWxlcyBgdmAuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkU2NhbGVkVmVjdG9yKCB2LCBzICkgewoKICAgIAkJdGhpcy54ICs9IHYueCAqIHM7CiAgICAJCXRoaXMueSArPSB2LnkgKiBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU3VidHJhY3RzIHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBzdWJ0cmFjdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzdWIoIHYgKSB7CgogICAgCQl0aGlzLnggLT0gdi54OwogICAgCQl0aGlzLnkgLT0gdi55OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU3VidHJhY3RzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgZnJvbSBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgc2NhbGFyIHRvIHN1YnRyYWN0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXN1YlNjYWxhciggcyApIHsKCiAgICAJCXRoaXMueCAtPSBzOwogICAgCQl0aGlzLnkgLT0gczsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc3ViVmVjdG9ycyggYSwgYiApIHsKCiAgICAJCXRoaXMueCA9IGEueCAtIGIueDsKICAgIAkJdGhpcy55ID0gYS55IC0gYi55OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gdmVjdG9yIHdpdGggdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gbXVsdGlwbHkuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbXVsdGlwbHkoIHYgKSB7CgogICAgCQl0aGlzLnggKj0gdi54OwogICAgCQl0aGlzLnkgKj0gdi55OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIHdpdGggYWxsIGNvbXBvbmVudHMgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7CgogICAgCQl0aGlzLnggKj0gc2NhbGFyOwogICAgCQl0aGlzLnkgKj0gc2NhbGFyOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIGluc3RhbmNlIGJ5IHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGRpdmlkZS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlkaXZpZGUoIHYgKSB7CgogICAgCQl0aGlzLnggLz0gdi54OwogICAgCQl0aGlzLnkgLz0gdi55OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gc2NhbGFyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWRpdmlkZVNjYWxhciggc2NhbGFyICkgewoKICAgIAkJcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yICh3aXRoIGFuIGltcGxpY2l0IDEgYXMgdGhlIDNyZCBjb21wb25lbnQpIGJ5CiAgICAJICogdGhlIGdpdmVuIDN4MyBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbWF0cml4IHRvIGFwcGx5LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFwcGx5TWF0cml4MyggbSApIHsKCiAgICAJCWNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnk7CiAgICAJCWNvbnN0IGUgPSBtLmVsZW1lbnRzOwoKICAgIAkJdGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07CiAgICAJCXRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyB4IG9yIHkgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBnaXZlbiB2ZWN0b3IncyB4IG9yIHkKICAgIAkgKiB2YWx1ZSwgcmVwbGFjZSB0aGF0IHZhbHVlIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbWluIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAltaW4oIHYgKSB7CgogICAgCQl0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTsKICAgIAkJdGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHggb3IgeQogICAgCSAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtYXggdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW1heCggdiApIHsKCiAgICAJCXRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgeCBvciB5IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZlY3RvcidzIHggb3IgeQogICAgCSAqIHZhbHVlLCBpdCBpcyByZXBsYWNlZCBieSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIG1pbiB2ZWN0b3IncyB4IG9yIHkgdmFsdWUsCiAgICAJICogaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1pbiAtIFRoZSBtaW5pbXVtIHggYW5kIHkgdmFsdWVzLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gbWF4IC0gVGhlIG1heGltdW0geCBhbmQgeSB2YWx1ZXMgaW4gdGhlIGRlc2lyZWQgcmFuZ2UuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2xhbXAoIG1pbiwgbWF4ICkgewoKICAgIAkJLy8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2UKCiAgICAJCXRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pbi54LCBtYXgueCApOwogICAgCQl0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW4ueSwgbWF4LnkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgeCBvciB5IHZhbHVlcyBhcmUgZ3JlYXRlciB0aGFuIHRoZSBtYXggdmFsdWUsIHRoZXkgYXJlCiAgICAJICogcmVwbGFjZWQgYnkgdGhlIG1heCB2YWx1ZS4KICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZXMgYXJlIGxlc3MgdGhhbiB0aGUgbWluIHZhbHVlLCB0aGV5IGFyZQogICAgCSAqIHJlcGxhY2VkIGJ5IHRoZSBtaW4gdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbWluVmFsIC0gVGhlIG1pbmltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBtYXhWYWwgLSBUaGUgbWF4aW11bSB2YWx1ZSB0aGUgY29tcG9uZW50cyB3aWxsIGJlIGNsYW1wZWQgdG8uCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkgewoKICAgIAkJdGhpcy54ID0gY2xhbXAoIHRoaXMueCwgbWluVmFsLCBtYXhWYWwgKTsKICAgIAkJdGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluVmFsLCBtYXhWYWwgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCBpdCBpcyByZXBsYWNlZCBieQogICAgCSAqIHRoZSBtYXggdmFsdWUuCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyBsZW5ndGggaXMgbGVzcyB0aGFuIHRoZSBtaW4gdmFsdWUsIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZQogICAgCSAqIG1pbiB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSBUaGUgbWluaW11bSB2YWx1ZSB0aGUgdmVjdG9yIGxlbmd0aCB3aWxsIGJlIGNsYW1wZWQgdG8uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIFRoZSBtYXhpbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljbGFtcExlbmd0aCggbWluLCBtYXggKSB7CgogICAgCQljb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpOwoKICAgIAkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBjbGFtcCggbGVuZ3RoLCBtaW4sIG1heCApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgZG93biB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJZmxvb3IoKSB7CgogICAgCQl0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTsKICAgIAkJdGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB1cCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2VpbCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7CiAgICAJCXRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyb3VuZCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGFyZSByb3VuZGVkIHRvd2FyZHMgemVybyAodXAgaWYgbmVnYXRpdmUsCiAgICAJICogZG93biBpZiBwb3NpdGl2ZSkgdG8gYW4gaW50ZWdlciB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXJvdW5kVG9aZXJvKCkgewoKICAgIAkJdGhpcy54ID0gTWF0aC50cnVuYyggdGhpcy54ICk7CiAgICAJCXRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSW52ZXJ0cyB0aGlzIHZlY3RvciAtIGkuZS4gc2V0cyB4ID0gLXggYW5kIHkgPSAteS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW5lZ2F0ZSgpIHsKCiAgICAJCXRoaXMueCA9IC0gdGhpcy54OwogICAgCQl0aGlzLnkgPSAtIHRoaXMueTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBkb3QgcHJvZHVjdCB3aXRoLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHJlc3VsdCBvZiB0aGUgZG90IHByb2R1Y3QuCiAgICAJICovCiAgICAJZG90KCB2ICkgewoKICAgIAkJcmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDYWxjdWxhdGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBjcm9zcyBwcm9kdWN0IHdpdGguCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVzdWx0IG9mIHRoZSBjcm9zcyBwcm9kdWN0LgogICAgCSAqLwogICAgCWNyb3NzKCB2ICkgewoKICAgIAkJcmV0dXJuIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgc3F1YXJlIG9mIHRoZSBFdWNsaWRlYW4gbGVuZ3RoIChzdHJhaWdodC1saW5lIGxlbmd0aCkgZnJvbQogICAgCSAqICgwLCAwKSB0byAoeCwgeSkuIElmIHlvdSBhcmUgY29tcGFyaW5nIHRoZSBsZW5ndGhzIG9mIHZlY3RvcnMsIHlvdSBzaG91bGQKICAgIAkgKiBjb21wYXJlIHRoZSBsZW5ndGggc3F1YXJlZCBpbnN0ZWFkIGFzIGl0IGlzIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IHRvIGNhbGN1bGF0ZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbGVuZ3RoU3EoKSB7CgogICAgCQlyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSAgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIGZyb20gKDAsIDApIHRvICh4LCB5KS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlsZW5ndGgoKSB7CgogICAgCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgTWFuaGF0dGFuIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAltYW5oYXR0YW5MZW5ndGgoKSB7CgogICAgCQlyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbnZlcnRzIHRoaXMgdmVjdG9yIHRvIGEgdW5pdCB2ZWN0b3IgLSB0aGF0IGlzLCBzZXRzIGl0IGVxdWFsIHRvIGEgdmVjdG9yCiAgICAJICogd2l0aCB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhpcyBvbmUsIGJ1dCB3aXRoIGEgdmVjdG9yIGxlbmd0aCBvZiBgMWAuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlub3JtYWxpemUoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9mIHRoaXMgdmVjdG9yIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzLgogICAgCSAqCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKi8KICAgIAlhbmdsZSgpIHsKCiAgICAJCWNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMiggLSB0aGlzLnksIC0gdGhpcy54ICkgKyBNYXRoLlBJOwoKICAgIAkJcmV0dXJuIGFuZ2xlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSBpbiByYWRpYW5zLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBhbmdsZSB3aXRoLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICovCiAgICAJYW5nbGVUbyggdiApIHsKCiAgICAJCWNvbnN0IGRlbm9taW5hdG9yID0gTWF0aC5zcXJ0KCB0aGlzLmxlbmd0aFNxKCkgKiB2Lmxlbmd0aFNxKCkgKTsKCiAgICAJCWlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gTWF0aC5QSSAvIDI7CgogICAgCQljb25zdCB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjsKCiAgICAJCS8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zCgogICAgCQlyZXR1cm4gTWF0aC5hY29zKCBjbGFtcCggdGhldGEsIC0xLCAxICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlLgogICAgCSAqLwogICAgCWRpc3RhbmNlVG8oIHYgKSB7CgogICAgCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKiBJZiB5b3UgYXJlIGp1c3QgY29tcGFyaW5nIHRoZSBkaXN0YW5jZSB3aXRoIGFub3RoZXIgZGlzdGFuY2UsIHlvdSBzaG91bGQgY29tcGFyZQogICAgCSAqIHRoZSBkaXN0YW5jZSBzcXVhcmVkIGluc3RlYWQgYXMgaXQgaXMgc2xpZ2h0bHkgbW9yZSBlZmZpY2llbnQgdG8gY2FsY3VsYXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBzcXVhcmVkIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgZGlzdGFuY2UuCiAgICAJICovCiAgICAJZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7CgogICAgCQljb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7CiAgICAJCXJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgTWFuaGF0dGFuIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgdG8uCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgTWFuaGF0dGFuIGRpc3RhbmNlLgogICAgCSAqLwogICAgCW1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKSB7CgogICAgCQlyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyB2ZWN0b3IgdG8gYSB2ZWN0b3Igd2l0aCB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhpcyBvbmUsIGJ1dAogICAgCSAqIHdpdGggdGhlIHNwZWNpZmllZCBsZW5ndGguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gVGhlIG5ldyBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0TGVuZ3RoKCBsZW5ndGggKSB7CgogICAgCQlyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSwgd2hlcmUKICAgIAkgKiBhbHBoYSBpcyB0aGUgcGVyY2VudCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSAtIGFscGhhID0gMCB3aWxsIGJlIHRoaXMKICAgIAkgKiB2ZWN0b3IsIGFuZCBhbHBoYSA9IDEgd2lsbCBiZSB0aGUgZ2l2ZW4gb25lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBpbnRlcnBvbGF0ZSB0b3dhcmRzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciwgdHlwaWNhbGx5IGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbGVycCggdiwgYWxwaGEgKSB7CgogICAgCQl0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhOwogICAgCQl0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvcnMsIHdoZXJlIGFscGhhIGlzIHRoZSBwZXJjZW50CiAgICAJICogZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgLSBhbHBoYSA9IDAgd2lsbCBiZSBmaXJzdCB2ZWN0b3IsIGFuZCBhbHBoYSA9IDEgd2lsbAogICAgCSAqIGJlIHRoZSBzZWNvbmQgb25lLiBUaGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2MSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB2MiAtIFRoZSBzZWNvbmQgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciwgdHlwaWNhbGx5IGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7CgogICAgCQl0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7CiAgICAJCXRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgdmVjdG9yIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gdGVzdCBmb3IgZXF1YWxpdHkuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHZlY3RvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICovCiAgICAJZXF1YWxzKCB2ICkgewoKICAgIAkJcmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyB2ZWN0b3IncyB4IHZhbHVlIHRvIGJlIGBhcnJheVsgb2Zmc2V0IF1gIGFuZCB5CiAgICAJICogdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAxIF1gLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkgewoKICAgIAkJdGhpcy54ID0gYXJyYXlbIG9mZnNldCBdOwogICAgCQl0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogV3JpdGVzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsCiAgICAJICogdGhlIG1ldGhvZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSB2ZWN0b3IgY29tcG9uZW50cy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICovCiAgICAJdG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDsKICAgIAkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTsKCiAgICAJCXJldHVybiBhcnJheTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyB2ZWN0b3IgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7CgogICAgCQl0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKICAgIAkJdGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSb3RhdGVzIHRoaXMgdmVjdG9yIGFyb3VuZCB0aGUgZ2l2ZW4gY2VudGVyIGJ5IHRoZSBnaXZlbiBhbmdsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gY2VudGVyIC0gVGhlIHBvaW50IGFyb3VuZCB3aGljaCB0byByb3RhdGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIHRvIHJvdGF0ZSwgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyb3RhdGVBcm91bmQoIGNlbnRlciwgYW5nbGUgKSB7CgogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTsKCiAgICAJCWNvbnN0IHggPSB0aGlzLnggLSBjZW50ZXIueDsKICAgIAkJY29uc3QgeSA9IHRoaXMueSAtIGNlbnRlci55OwoKICAgIAkJdGhpcy54ID0geCAqIGMgLSB5ICogcyArIGNlbnRlci54OwogICAgCQl0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIGVhY2ggY29tcG9uZW50IG9mIHRoaXMgdmVjdG9yIHRvIGEgcHNldWRvLXJhbmRvbSB2YWx1ZSBiZXR3ZWVuIGAwYCBhbmQKICAgIAkgKiBgMWAsIGV4Y2x1ZGluZyBgMWAuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyYW5kb20oKSB7CgogICAgCQl0aGlzLnggPSBNYXRoLnJhbmRvbSgpOwogICAgCQl0aGlzLnkgPSBNYXRoLnJhbmRvbSgpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJKlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7CgogICAgCQl5aWVsZCB0aGlzLng7CiAgICAJCXlpZWxkIHRoaXMueTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBRdWF0ZXJuaW9uLiBRdWF0ZXJuaW9ucyBhcmUgdXNlZCBpbiB0aHJlZS5qcyB0byByZXByZXNlbnQgcm90YXRpb25zLgogICAgICoKICAgICAqIEl0ZXJhdGluZyB0aHJvdWdoIGEgdmVjdG9yIGluc3RhbmNlIHdpbGwgeWllbGQgaXRzIGNvbXBvbmVudHMgYCh4LCB5LCB6LCB3KWAgaW4KICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIG9yZGVyLgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aHJlZS5qcyBleHBlY3RzIFF1YXRlcm5pb25zIHRvIGJlIG5vcm1hbGl6ZWQuCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7CiAgICAgKiBxdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICksIE1hdGguUEkgLyAyICk7CiAgICAgKgogICAgICogY29uc3QgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoIDEsIDAsIDAgKTsKICAgICAqIHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTsKICAgICAqIGBgYAogICAgICovCiAgICBjbGFzcyBRdWF0ZXJuaW9uIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBxdWF0ZXJuaW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3PTFdIC0gVGhlIHcgdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzUXVhdGVybmlvbiA9IHRydWU7CgogICAgCQl0aGlzLl94ID0geDsKICAgIAkJdGhpcy5feSA9IHk7CiAgICAJCXRoaXMuX3ogPSB6OwogICAgCQl0aGlzLl93ID0gdzsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJbnRlcnBvbGF0ZXMgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMgdmlhIFNMRVJQLiBUaGlzIGltcGxlbWVudGF0aW9uIGFzc3VtZXMgdGhlCiAgICAJICogcXVhdGVybmlvbiBkYXRhIGFyZSBtYW5hZ2VkICBpbiBmbGF0IGFycmF5cy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZHN0IC0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkc3RPZmZzZXQgLSBBbiBvZmZzZXQgaW50byB0aGUgZGVzdGluYXRpb24gYXJyYXkuCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzcmMwIC0gVGhlIHNvdXJjZSBhcnJheSBvZiB0aGUgZmlyc3QgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3JjT2Zmc2V0MCAtIEFuIG9mZnNldCBpbnRvIHRoZSBmaXJzdCBzb3VyY2UgYXJyYXkuCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzcmMxIC0gIFRoZSBzb3VyY2UgYXJyYXkgb2YgdGhlIHNlY29uZCBxdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzcmNPZmZzZXQxIC0gQW4gb2Zmc2V0IGludG8gdGhlIHNlY29uZCBzb3VyY2UgYXJyYXkuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIHJhbmdlIGBbMCwxXWAuCiAgICAJICogQHNlZSB7QGxpbmsgUXVhdGVybmlvbiNzbGVycH0KICAgIAkgKi8KICAgIAlzdGF0aWMgc2xlcnBGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSwgdCApIHsKCiAgICAJCS8vIGZ1enotZnJlZSwgYXJyYXktYmFzZWQgUXVhdGVybmlvbiBTTEVSUCBvcGVyYXRpb24KCiAgICAJCWxldCB4MCA9IHNyYzBbIHNyY09mZnNldDAgKyAwIF0sCiAgICAJCQl5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF0sCiAgICAJCQl6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF0sCiAgICAJCQl3MCA9IHNyYzBbIHNyY09mZnNldDAgKyAzIF07CgogICAgCQljb25zdCB4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sCiAgICAJCQl5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sCiAgICAJCQl6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sCiAgICAJCQl3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07CgogICAgCQlpZiAoIHQgPT09IDAgKSB7CgogICAgCQkJZHN0WyBkc3RPZmZzZXQgKyAwIF0gPSB4MDsKICAgIAkJCWRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7CiAgICAJCQlkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowOwogICAgCQkJZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDsKICAgIAkJCXJldHVybjsKCiAgICAJCX0KCiAgICAJCWlmICggdCA9PT0gMSApIHsKCiAgICAJCQlkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgxOwogICAgCQkJZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MTsKICAgIAkJCWRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejE7CiAgICAJCQlkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcxOwogICAgCQkJcmV0dXJuOwoKICAgIAkJfQoKICAgIAkJaWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7CgogICAgCQkJbGV0IHMgPSAxIC0gdDsKICAgIAkJCWNvbnN0IGNvcyA9IHgwICogeDEgKyB5MCAqIHkxICsgejAgKiB6MSArIHcwICogdzEsCiAgICAJCQkJZGlyID0gKCBjb3MgPj0gMCA/IDEgOiAtMSApLAogICAgCQkJCXNxclNpbiA9IDEgLSBjb3MgKiBjb3M7CgogICAgCQkJLy8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczoKICAgIAkJCWlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7CgogICAgCQkJCWNvbnN0IHNpbiA9IE1hdGguc3FydCggc3FyU2luICksCiAgICAJCQkJCWxlbiA9IE1hdGguYXRhbjIoIHNpbiwgY29zICogZGlyICk7CgogICAgCQkJCXMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luOwogICAgCQkJCXQgPSBNYXRoLnNpbiggdCAqIGxlbiApIC8gc2luOwoKICAgIAkJCX0KCiAgICAJCQljb25zdCB0RGlyID0gdCAqIGRpcjsKCiAgICAJCQl4MCA9IHgwICogcyArIHgxICogdERpcjsKICAgIAkJCXkwID0geTAgKiBzICsgeTEgKiB0RGlyOwogICAgCQkJejAgPSB6MCAqIHMgKyB6MSAqIHREaXI7CiAgICAJCQl3MCA9IHcwICogcyArIHcxICogdERpcjsKCiAgICAJCQkvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6CiAgICAJCQlpZiAoIHMgPT09IDEgLSB0ICkgewoKICAgIAkJCQljb25zdCBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApOwoKICAgIAkJCQl4MCAqPSBmOwogICAgCQkJCXkwICo9IGY7CiAgICAJCQkJejAgKj0gZjsKICAgIAkJCQl3MCAqPSBmOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWRzdFsgZHN0T2Zmc2V0IF0gPSB4MDsKICAgIAkJZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDsKICAgIAkJZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDsKICAgIAkJZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHR3byBxdWF0ZXJuaW9ucy4gVGhpcyBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoZSBxdWF0ZXJuaW9uIGRhdGEgYXJlIG1hbmFnZWQKICAgIAkgKiBpbiBmbGF0IGFycmF5cy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZHN0IC0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkc3RPZmZzZXQgLSBBbiBvZmZzZXQgaW50byB0aGUgZGVzdGluYXRpb24gYXJyYXkuCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzcmMwIC0gVGhlIHNvdXJjZSBhcnJheSBvZiB0aGUgZmlyc3QgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3JjT2Zmc2V0MCAtIEFuIG9mZnNldCBpbnRvIHRoZSBmaXJzdCBzb3VyY2UgYXJyYXkuCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzcmMxIC0gIFRoZSBzb3VyY2UgYXJyYXkgb2YgdGhlIHNlY29uZCBxdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzcmNPZmZzZXQxIC0gQW4gb2Zmc2V0IGludG8gdGhlIHNlY29uZCBzb3VyY2UgYXJyYXkuCiAgICAJICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LgogICAgCSAqIEBzZWUge0BsaW5rIFF1YXRlcm5pb24jbXVsdGlwbHlRdWF0ZXJuaW9uc30uCiAgICAJICovCiAgICAJc3RhdGljIG11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSApIHsKCiAgICAJCWNvbnN0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCBdOwogICAgCQljb25zdCB5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF07CiAgICAJCWNvbnN0IHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXTsKICAgIAkJY29uc3QgdzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdOwoKICAgIAkJY29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxIF07CiAgICAJCWNvbnN0IHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXTsKICAgIAkJY29uc3QgejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdOwogICAgCQljb25zdCB3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07CgogICAgCQlkc3RbIGRzdE9mZnNldCBdID0geDAgKiB3MSArIHcwICogeDEgKyB5MCAqIHoxIC0gejAgKiB5MTsKICAgIAkJZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MCAqIHcxICsgdzAgKiB5MSArIHowICogeDEgLSB4MCAqIHoxOwogICAgCQlkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowICogdzEgKyB3MCAqIHoxICsgeDAgKiB5MSAtIHkwICogeDE7CiAgICAJCWRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzAgKiB3MSAtIHgwICogeDEgLSB5MCAqIHkxIC0gejAgKiB6MTsKCiAgICAJCXJldHVybiBkc3Q7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIHggdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCAwCiAgICAJICovCiAgICAJZ2V0IHgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5feDsKCiAgICAJfQoKICAgIAlzZXQgeCggdmFsdWUgKSB7CgogICAgCQl0aGlzLl94ID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgeSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uCiAgICAJICoKICAgIAkgKiBAdHlwZSB7bnVtYmVyfQogICAgCSAqIEBkZWZhdWx0IDAKICAgIAkgKi8KICAgIAlnZXQgeSgpIHsKCiAgICAJCXJldHVybiB0aGlzLl95OwoKICAgIAl9CgogICAgCXNldCB5KCB2YWx1ZSApIHsKCiAgICAJCXRoaXMuX3kgPSB2YWx1ZTsKICAgIAkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoZSB6IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKgogICAgCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJICogQGRlZmF1bHQgMAogICAgCSAqLwogICAgCWdldCB6KCkgewoKICAgIAkJcmV0dXJuIHRoaXMuX3o7CgogICAgCX0KCiAgICAJc2V0IHooIHZhbHVlICkgewoKICAgIAkJdGhpcy5feiA9IHZhbHVlOwogICAgCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIHcgdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCAxCiAgICAJICovCiAgICAJZ2V0IHcoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5fdzsKCiAgICAJfQoKICAgIAlzZXQgdyggdmFsdWUgKSB7CgogICAgCQl0aGlzLl93ID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBxdWF0ZXJuaW9uIGNvbXBvbmVudHMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB6IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB3IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJc2V0KCB4LCB5LCB6LCB3ICkgewoKICAgIAkJdGhpcy5feCA9IHg7CiAgICAJCXRoaXMuX3kgPSB5OwogICAgCQl0aGlzLl96ID0gejsKICAgIAkJdGhpcy5fdyA9IHc7CgogICAgCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBxdWF0ZXJuaW9uIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAljb3B5KCBxdWF0ZXJuaW9uICkgewoKICAgIAkJdGhpcy5feCA9IHF1YXRlcm5pb24ueDsKICAgIAkJdGhpcy5feSA9IHF1YXRlcm5pb24ueTsKICAgIAkJdGhpcy5feiA9IHF1YXRlcm5pb24uejsKICAgIAkJdGhpcy5fdyA9IHF1YXRlcm5pb24udzsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uIGZyb20gdGhlIHJvdGF0aW9uIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4KICAgIAkgKiBFdWxlciBhbmdsZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBhbmdsZXMuCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlPXRydWVdIC0gV2hldGhlciB0aGUgaW50ZXJuYWwgYG9uQ2hhbmdlYCBjYWxsYmFjayBzaG91bGQgYmUgZXhlY3V0ZWQgb3Igbm90LgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAlzZXRGcm9tRXVsZXIoIGV1bGVyLCB1cGRhdGUgPSB0cnVlICkgewoKICAgIAkJY29uc3QgeCA9IGV1bGVyLl94LCB5ID0gZXVsZXIuX3ksIHogPSBldWxlci5feiwgb3JkZXIgPSBldWxlci5fb3JkZXI7CgogICAgCQkvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvCiAgICAJCS8vIAkyMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy8KICAgIAkJLy8JY29udGVudC9TcGluQ2FsYy5tCgogICAgCQljb25zdCBjb3MgPSBNYXRoLmNvczsKICAgIAkJY29uc3Qgc2luID0gTWF0aC5zaW47CgogICAgCQljb25zdCBjMSA9IGNvcyggeCAvIDIgKTsKICAgIAkJY29uc3QgYzIgPSBjb3MoIHkgLyAyICk7CiAgICAJCWNvbnN0IGMzID0gY29zKCB6IC8gMiApOwoKICAgIAkJY29uc3QgczEgPSBzaW4oIHggLyAyICk7CiAgICAJCWNvbnN0IHMyID0gc2luKCB5IC8gMiApOwogICAgCQljb25zdCBzMyA9IHNpbiggeiAvIDIgKTsKCiAgICAJCXN3aXRjaCAoIG9yZGVyICkgewoKICAgIAkJCWNhc2UgJ1hZWic6CiAgICAJCQkJdGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMzsKICAgIAkJCQl0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzOwogICAgCQkJCXRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7CiAgICAJCQkJdGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMzsKICAgIAkJCQlicmVhazsKCiAgICAJCQljYXNlICdZWFonOgogICAgCQkJCXRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7CiAgICAJCQkJdGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMzsKICAgIAkJCQl0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzOwogICAgCQkJCXRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWlhZJzoKICAgIAkJCQl0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzOwogICAgCQkJCXRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7CiAgICAJCQkJdGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMzsKICAgIAkJCQl0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgJ1pZWCc6CiAgICAJCQkJdGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMzsKICAgIAkJCQl0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzOwogICAgCQkJCXRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7CiAgICAJCQkJdGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMzsKICAgIAkJCQlicmVhazsKCiAgICAJCQljYXNlICdZWlgnOgogICAgCQkJCXRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7CiAgICAJCQkJdGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMzsKICAgIAkJCQl0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzOwogICAgCQkJCXRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWFpZJzoKICAgIAkJCQl0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzOwogICAgCQkJCXRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7CiAgICAJCQkJdGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMzsKICAgIAkJCQl0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWRlZmF1bHQ6CiAgICAJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApOwoKICAgIAkJfQoKICAgIAkJaWYgKCB1cGRhdGUgPT09IHRydWUgKSB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBheGlzIGFuZCBhbmdsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIFRoZSBub3JtYWxpemVkIGF4aXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCXNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkgewoKICAgIAkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bQoKICAgIAkJY29uc3QgaGFsZkFuZ2xlID0gYW5nbGUgLyAyLCBzID0gTWF0aC5zaW4oIGhhbGZBbmdsZSApOwoKICAgIAkJdGhpcy5feCA9IGF4aXMueCAqIHM7CiAgICAJCXRoaXMuX3kgPSBheGlzLnkgKiBzOwogICAgCQl0aGlzLl96ID0gYXhpcy56ICogczsKICAgIAkJdGhpcy5fdyA9IE1hdGguY29zKCBoYWxmQW5nbGUgKTsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIHJvdGF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIEEgNHg0IG1hdHJpeCBvZiB3aGljaCB0aGUgdXBwZXIgM3gzIG9mIG1hdHJpeCBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUuIHVuc2NhbGVkKS4KICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICkgewoKICAgIAkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG0KCiAgICAJCS8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpCgogICAgCQljb25zdCB0ZSA9IG0uZWxlbWVudHMsCgogICAgCQkJbTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSwKICAgIAkJCW0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sCiAgICAJCQltMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSwKCiAgICAJCQl0cmFjZSA9IG0xMSArIG0yMiArIG0zMzsKCiAgICAJCWlmICggdHJhY2UgPiAwICkgewoKICAgIAkJCWNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7CgogICAgCQkJdGhpcy5fdyA9IDAuMjUgLyBzOwogICAgCQkJdGhpcy5feCA9ICggbTMyIC0gbTIzICkgKiBzOwogICAgCQkJdGhpcy5feSA9ICggbTEzIC0gbTMxICkgKiBzOwogICAgCQkJdGhpcy5feiA9ICggbTIxIC0gbTEyICkgKiBzOwoKICAgIAkJfSBlbHNlIGlmICggbTExID4gbTIyICYmIG0xMSA+IG0zMyApIHsKCiAgICAJCQljb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMTEgLSBtMjIgLSBtMzMgKTsKCiAgICAJCQl0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7CiAgICAJCQl0aGlzLl94ID0gMC4yNSAqIHM7CiAgICAJCQl0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7CiAgICAJCQl0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7CgogICAgCQl9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7CgogICAgCQkJY29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTIyIC0gbTExIC0gbTMzICk7CgogICAgCQkJdGhpcy5fdyA9ICggbTEzIC0gbTMxICkgLyBzOwogICAgCQkJdGhpcy5feCA9ICggbTEyICsgbTIxICkgLyBzOwogICAgCQkJdGhpcy5feSA9IDAuMjUgKiBzOwogICAgCQkJdGhpcy5feiA9ICggbTIzICsgbTMyICkgLyBzOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTsKCiAgICAJCQl0aGlzLl93ID0gKCBtMjEgLSBtMTIgKSAvIHM7CiAgICAJCQl0aGlzLl94ID0gKCBtMTMgKyBtMzEgKSAvIHM7CiAgICAJCQl0aGlzLl95ID0gKCBtMjMgKyBtMzIgKSAvIHM7CiAgICAJCQl0aGlzLl96ID0gMC4yNSAqIHM7CgogICAgCQl9CgogICAgCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgcm90YXRpb24gcmVxdWlyZWQgdG8gcm90YXRlIHRoZSBkaXJlY3Rpb24gdmVjdG9yCiAgICAJICogYHZGcm9tYCB0byB0aGUgZGlyZWN0aW9uIHZlY3RvciBgdlRvYC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdkZyb20gLSBUaGUgZmlyc3QgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2VG8gLSBUaGUgc2Vjb25kIChub3JtYWxpemVkKSBkaXJlY3Rpb24gdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAlzZXRGcm9tVW5pdFZlY3RvcnMoIHZGcm9tLCB2VG8gKSB7CgogICAgCQkvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWQKCiAgICAJCWxldCByID0gdkZyb20uZG90KCB2VG8gKSArIDE7CgogICAgCQlpZiAoIHIgPCAxZS04ICkgeyAvLyB0aGUgZXBzaWxvbiB2YWx1ZSBoYXMgYmVlbiBkaXNjdXNzZWQgaW4gIzMxMjg2CgogICAgCQkJLy8gdkZyb20gYW5kIHZUbyBwb2ludCBpbiBvcHBvc2l0ZSBkaXJlY3Rpb25zCgogICAgCQkJciA9IDA7CgogICAgCQkJaWYgKCBNYXRoLmFicyggdkZyb20ueCApID4gTWF0aC5hYnMoIHZGcm9tLnogKSApIHsKCiAgICAJCQkJdGhpcy5feCA9IC0gdkZyb20ueTsKICAgIAkJCQl0aGlzLl95ID0gdkZyb20ueDsKICAgIAkJCQl0aGlzLl96ID0gMDsKICAgIAkJCQl0aGlzLl93ID0gcjsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQl0aGlzLl94ID0gMDsKICAgIAkJCQl0aGlzLl95ID0gLSB2RnJvbS56OwogICAgCQkJCXRoaXMuX3ogPSB2RnJvbS55OwogICAgCQkJCXRoaXMuX3cgPSByOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSB7CgogICAgCQkJLy8gY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7IC8vIGlubGluZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kgb24gVmVjdG9yMwoKICAgIAkJCXRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7CiAgICAJCQl0aGlzLl95ID0gdkZyb20ueiAqIHZUby54IC0gdkZyb20ueCAqIHZUby56OwogICAgCQkJdGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDsKICAgIAkJCXRoaXMuX3cgPSByOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgYW5nbGUgYmV0d2VlbiB0aGlzIHF1YXRlcm5pb24gYW5kIHRoZSBnaXZlbiBvbmUgaW4gcmFkaWFucy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBxdWF0ZXJuaW9uIHRvIGNvbXB1dGUgdGhlIGFuZ2xlIHdpdGguCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKi8KICAgIAlhbmdsZVRvKCBxICkgewoKICAgIAkJcmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBjbGFtcCggdGhpcy5kb3QoIHEgKSwgLTEsIDEgKSApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUm90YXRlcyB0aGlzIHF1YXRlcm5pb24gYnkgYSBnaXZlbiBhbmd1bGFyIHN0ZXAgdG8gdGhlIGdpdmVuIHF1YXRlcm5pb24uCiAgICAJICogVGhlIG1ldGhvZCBlbnN1cmVzIHRoYXQgdGhlIGZpbmFsIHF1YXRlcm5pb24gd2lsbCBub3Qgb3ZlcnNob290IGBxYC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSB0YXJnZXQgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3RlcCAtIFRoZSBhbmd1bGFyIHN0ZXAgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJcm90YXRlVG93YXJkcyggcSwgc3RlcCApIHsKCiAgICAJCWNvbnN0IGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7CgogICAgCQlpZiAoIGFuZ2xlID09PSAwICkgcmV0dXJuIHRoaXM7CgogICAgCQljb25zdCB0ID0gTWF0aC5taW4oIDEsIHN0ZXAgLyBhbmdsZSApOwoKICAgIAkJdGhpcy5zbGVycCggcSwgdCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIHF1YXRlcm5pb24gdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb247IHRoYXQgaXMsIHRvIHRoZQogICAgCSAqIHF1YXRlcm5pb24gdGhhdCByZXByZXNlbnRzICJubyByb3RhdGlvbiIuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJaWRlbnRpdHkoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDEgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJbnZlcnRzIHRoaXMgcXVhdGVybmlvbiB2aWEge0BsaW5rIFF1YXRlcm5pb24jY29uanVnYXRlfS4gVGhlCiAgICAJICogcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGguCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJaW52ZXJ0KCkgewoKICAgIAkJcmV0dXJuIHRoaXMuY29uanVnYXRlKCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgcm90YXRpb25hbCBjb25qdWdhdGUgb2YgdGhpcyBxdWF0ZXJuaW9uLiBUaGUgY29uanVnYXRlIG9mIGEKICAgIAkgKiBxdWF0ZXJuaW9uIHJlcHJlc2VudHMgdGhlIHNhbWUgcm90YXRpb24gaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBhYm91dAogICAgCSAqIHRoZSByb3RhdGlvbmFsIGF4aXMuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJY29uanVnYXRlKCkgewoKICAgIAkJdGhpcy5feCAqPSAtMTsKICAgIAkJdGhpcy5feSAqPSAtMTsKICAgIAkJdGhpcy5feiAqPSAtMTsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoaXMgcXVhdGVybmlvbiBhbmQgdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gdiAtIFRoZSBxdWF0ZXJuaW9uIHRvIGNvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IHdpdGguCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVzdWx0IG9mIHRoZSBkb3QgcHJvZHVjdC4KICAgIAkgKi8KICAgIAlkb3QoIHYgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHNxdWFyZWQgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIG9mIHRoaXMgcXVhdGVybmlvbiwKICAgIAkgKiBjb25zaWRlcmVkIGFzIGEgNCBkaW1lbnNpb25hbCB2ZWN0b3IuIFRoaXMgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgYXJlIGNvbXBhcmluZyB0aGUKICAgIAkgKiBsZW5ndGhzIG9mIHR3byBxdWF0ZXJuaW9ucywgYXMgdGhpcyBpcyBhIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IGNhbGN1bGF0aW9uIHRoYW4KICAgIAkgKiB7QGxpbmsgUXVhdGVybmlvbiNsZW5ndGh9LgogICAgCSAqCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlZCBFdWNsaWRlYW4gbGVuZ3RoLgogICAgCSAqLwogICAgCWxlbmd0aFNxKCkgewoKICAgIAkJcmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBFdWNsaWRlYW4gbGVuZ3RoIChzdHJhaWdodC1saW5lIGxlbmd0aCkgb2YgdGhpcyBxdWF0ZXJuaW9uLAogICAgCSAqIGNvbnNpZGVyZWQgYXMgYSA0IGRpbWVuc2lvbmFsIHZlY3Rvci4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIEV1Y2xpZGVhbiBsZW5ndGguCiAgICAJICovCiAgICAJbGVuZ3RoKCkgewoKICAgIAkJcmV0dXJuIE1hdGguc3FydCggdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3cgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBOb3JtYWxpemVzIHRoaXMgcXVhdGVybmlvbiAtIHRoYXQgaXMsIGNhbGN1bGF0ZWQgdGhlIHF1YXRlcm5pb24gdGhhdCBwZXJmb3JtcwogICAgCSAqIHRoZSBzYW1lIHJvdGF0aW9uIGFzIHRoaXMgb25lLCBidXQgaGFzIGEgbGVuZ3RoIGVxdWFsIHRvIGAxYC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAlub3JtYWxpemUoKSB7CgogICAgCQlsZXQgbCA9IHRoaXMubGVuZ3RoKCk7CgogICAgCQlpZiAoIGwgPT09IDAgKSB7CgogICAgCQkJdGhpcy5feCA9IDA7CiAgICAJCQl0aGlzLl95ID0gMDsKICAgIAkJCXRoaXMuX3ogPSAwOwogICAgCQkJdGhpcy5fdyA9IDE7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWwgPSAxIC8gbDsKCiAgICAJCQl0aGlzLl94ID0gdGhpcy5feCAqIGw7CiAgICAJCQl0aGlzLl95ID0gdGhpcy5feSAqIGw7CiAgICAJCQl0aGlzLl96ID0gdGhpcy5feiAqIGw7CiAgICAJCQl0aGlzLl93ID0gdGhpcy5fdyAqIGw7CgogICAgCQl9CgogICAgCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoaXMgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gb25lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIHF1YXRlcm5pb24uCiAgICAJICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCW11bHRpcGx5KCBxICkgewoKICAgIAkJcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFByZS1tdWx0aXBsaWVzIHRoaXMgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gb25lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIHF1YXRlcm5pb24uCiAgICAJICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCXByZW11bHRpcGx5KCBxICkgewoKICAgIAkJcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIHF1YXRlcm5pb25zIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBhIC0gVGhlIGZpcnN0IHF1YXRlcm5pb24uCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBiIC0gVGhlIHNlY29uZCBxdWF0ZXJuaW9uLgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAltdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkgewoKICAgIAkJLy8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtCgogICAgCQljb25zdCBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93OwogICAgCQljb25zdCBxYnggPSBiLl94LCBxYnkgPSBiLl95LCBxYnogPSBiLl96LCBxYncgPSBiLl93OwoKICAgIAkJdGhpcy5feCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTsKICAgIAkJdGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejsKICAgIAkJdGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDsKICAgIAkJdGhpcy5fdyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gcXVhdGVybmlvbnMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHFiIC0gVGhlIHRhcmdldCBxdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuCiAgICAJICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCXNsZXJwKCBxYiwgdCApIHsKCiAgICAJCWlmICggdCA9PT0gMCApIHJldHVybiB0aGlzOwogICAgCQlpZiAoIHQgPT09IDEgKSByZXR1cm4gdGhpcy5jb3B5KCBxYiApOwoKICAgIAkJY29uc3QgeCA9IHRoaXMuX3gsIHkgPSB0aGlzLl95LCB6ID0gdGhpcy5feiwgdyA9IHRoaXMuX3c7CgogICAgCQkvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwLwoKICAgIAkJbGV0IGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejsKCiAgICAJCWlmICggY29zSGFsZlRoZXRhIDwgMCApIHsKCiAgICAJCQl0aGlzLl93ID0gLSBxYi5fdzsKICAgIAkJCXRoaXMuX3ggPSAtIHFiLl94OwogICAgCQkJdGhpcy5feSA9IC0gcWIuX3k7CiAgICAJCQl0aGlzLl96ID0gLSBxYi5fejsKCiAgICAJCQljb3NIYWxmVGhldGEgPSAtIGNvc0hhbGZUaGV0YTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdGhpcy5jb3B5KCBxYiApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkgewoKICAgIAkJCXRoaXMuX3cgPSB3OwogICAgCQkJdGhpcy5feCA9IHg7CiAgICAJCQl0aGlzLl95ID0geTsKICAgIAkJCXRoaXMuX3ogPSB6OwoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJY29uc3Qgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhOwoKICAgIAkJaWYgKCBzcXJTaW5IYWxmVGhldGEgPD0gTnVtYmVyLkVQU0lMT04gKSB7CgogICAgCQkJY29uc3QgcyA9IDEgLSB0OwogICAgCQkJdGhpcy5fdyA9IHMgKiB3ICsgdCAqIHRoaXMuX3c7CiAgICAJCQl0aGlzLl94ID0gcyAqIHggKyB0ICogdGhpcy5feDsKICAgIAkJCXRoaXMuX3kgPSBzICogeSArIHQgKiB0aGlzLl95OwogICAgCQkJdGhpcy5feiA9IHMgKiB6ICsgdCAqIHRoaXMuX3o7CgogICAgCQkJdGhpcy5ub3JtYWxpemUoKTsgLy8gbm9ybWFsaXplIGNhbGxzIF9vbkNoYW5nZUNhbGxiYWNrKCkKCiAgICAJCQlyZXR1cm4gdGhpczsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCggc3FyU2luSGFsZlRoZXRhICk7CiAgICAJCWNvbnN0IGhhbGZUaGV0YSA9IE1hdGguYXRhbjIoIHNpbkhhbGZUaGV0YSwgY29zSGFsZlRoZXRhICk7CiAgICAJCWNvbnN0IHJhdGlvQSA9IE1hdGguc2luKCAoIDEgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YSwKICAgIAkJCXJhdGlvQiA9IE1hdGguc2luKCB0ICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGE7CgogICAgCQl0aGlzLl93ID0gKCB3ICogcmF0aW9BICsgdGhpcy5fdyAqIHJhdGlvQiApOwogICAgCQl0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApOwogICAgCQl0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApOwogICAgCQl0aGlzLl96ID0gKCB6ICogcmF0aW9BICsgdGhpcy5feiAqIHJhdGlvQiApOwoKICAgIAkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0aGUgZ2l2ZW4gcXVhdGVybmlvbnMKICAgIAkgKiBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxYSAtIFRoZSBzb3VyY2UgcXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHFiIC0gVGhlIHRhcmdldCBxdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuCiAgICAJICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLgogICAgCSAqLwogICAgCXNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIHsKCiAgICAJCXJldHVybiB0aGlzLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIHF1YXRlcm5pb24gdG8gYSB1bmlmb3JtbHkgcmFuZG9tLCBub3JtYWxpemVkIHF1YXRlcm5pb24uCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJcmFuZG9tKCkgewoKICAgIAkJLy8gS2VuIFNob2VtYWtlCiAgICAJCS8vIFVuaWZvcm0gcmFuZG9tIHJvdGF0aW9ucwogICAgCQkvLyBELiBLaXJrLCBlZGl0b3IsIEdyYXBoaWNzIEdlbXMgSUlJLCBwYWdlcyAxMjQtMTMyLiBBY2FkZW1pYyBQcmVzcywgTmV3IFlvcmssIDE5OTIuCgogICAgCQljb25zdCB0aGV0YTEgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7CiAgICAJCWNvbnN0IHRoZXRhMiA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTsKCiAgICAJCWNvbnN0IHgwID0gTWF0aC5yYW5kb20oKTsKICAgIAkJY29uc3QgcjEgPSBNYXRoLnNxcnQoIDEgLSB4MCApOwogICAgCQljb25zdCByMiA9IE1hdGguc3FydCggeDAgKTsKCiAgICAJCXJldHVybiB0aGlzLnNldCgKICAgIAkJCXIxICogTWF0aC5zaW4oIHRoZXRhMSApLAogICAgCQkJcjEgKiBNYXRoLmNvcyggdGhldGExICksCiAgICAJCQlyMiAqIE1hdGguc2luKCB0aGV0YTIgKSwKICAgIAkJCXIyICogTWF0aC5jb3MoIHRoZXRhMiApLAogICAgCQkpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgcXVhdGVybmlvbiBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcXVhdGVybmlvbiBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICovCiAgICAJZXF1YWxzKCBxdWF0ZXJuaW9uICkgewoKICAgIAkJcmV0dXJuICggcXVhdGVybmlvbi5feCA9PT0gdGhpcy5feCApICYmICggcXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSApICYmICggcXVhdGVybmlvbi5feiA9PT0gdGhpcy5feiApICYmICggcXVhdGVybmlvbi5fdyA9PT0gdGhpcy5fdyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uJ3MgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYXJyYXkgLSBBbiBhcnJheSBob2xkaW5nIHRoZSBxdWF0ZXJuaW9uIGNvbXBvbmVudCB2YWx1ZXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBUaGUgb2Zmc2V0IGludG8gdGhlIGFycmF5LgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAlmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkgewoKICAgIAkJdGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTsKICAgIAkJdGhpcy5feSA9IGFycmF5WyBvZmZzZXQgKyAxIF07CiAgICAJCXRoaXMuX3ogPSBhcnJheVsgb2Zmc2V0ICsgMiBdOwogICAgCQl0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFdyaXRlcyB0aGUgY29tcG9uZW50cyBvZiB0aGlzIHF1YXRlcm5pb24gdG8gdGhlIGdpdmVuIGFycmF5LiBJZiBubyBhcnJheSBpcyBwcm92aWRlZCwKICAgIAkgKiB0aGUgbWV0aG9kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFthcnJheT1bXV0gLSBUaGUgdGFyZ2V0IGFycmF5IGhvbGRpbmcgdGhlIHF1YXRlcm5pb24gY29tcG9uZW50cy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgcXVhdGVybmlvbiBjb21wb25lbnRzLgogICAgCSAqLwogICAgCXRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7CgogICAgCQlhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94OwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7CiAgICAJCWFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93OwoKICAgIAkJcmV0dXJuIGFycmF5OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyBxdWF0ZXJuaW9uIGRhdGEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGF0dHJpYnV0ZS4KICAgIAkgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uCiAgICAJICovCiAgICAJZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCApIHsKCiAgICAJCXRoaXMuX3ggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKICAgIAkJdGhpcy5feSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApOwogICAgCQl0aGlzLl96ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7CiAgICAJCXRoaXMuX3cgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoaXMgbWV0aG9kcyBkZWZpbmVzIHRoZSBzZXJpYWxpemF0aW9uIHJlc3VsdCBvZiB0aGlzIGNsYXNzLiBSZXR1cm5zIHRoZQogICAgCSAqIG51bWVyaWNhbCBlbGVtZW50cyBvZiB0aGlzIHF1YXRlcm5pb24gaW4gYW4gYXJyYXkgb2YgZm9ybWF0IGBbeCwgeSwgeiwgd11gLgogICAgCSAqCiAgICAJICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIHNlcmlhbGl6ZWQgcXVhdGVybmlvbi4KICAgIAkgKi8KICAgIAl0b0pTT04oKSB7CgogICAgCQlyZXR1cm4gdGhpcy50b0FycmF5KCk7CgogICAgCX0KCiAgICAJX29uQ2hhbmdlKCBjYWxsYmFjayApIHsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjazsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCV9vbkNoYW5nZUNhbGxiYWNrKCkge30KCiAgICAJKlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7CgogICAgCQl5aWVsZCB0aGlzLl94OwogICAgCQl5aWVsZCB0aGlzLl95OwogICAgCQl5aWVsZCB0aGlzLl96OwogICAgCQl5aWVsZCB0aGlzLl93OwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgM0QgdmVjdG9yLiBBIDNEIHZlY3RvciBpcyBhbiBvcmRlcmVkIHRyaXBsZXQgb2YgbnVtYmVycwogICAgICogKGxhYmVsZWQgeCwgeSBhbmQgeiksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBhIG51bWJlciBvZiB0aGluZ3MsIHN1Y2ggYXM6CiAgICAgKgogICAgICogLSBBIHBvaW50IGluIDNEIHNwYWNlLgogICAgICogLSBBIGRpcmVjdGlvbiBhbmQgbGVuZ3RoIGluIDNEIHNwYWNlLiBJbiB0aHJlZS5qcyB0aGUgbGVuZ3RoIHdpbGwKICAgICAqIGFsd2F5cyBiZSB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlKHN0cmFpZ2h0LWxpbmUgZGlzdGFuY2UpIGZyb20gYCgwLCAwLCAwKWAgdG8gYCh4LCB5LCB6KWAKICAgICAqIGFuZCB0aGUgZGlyZWN0aW9uIGlzIGFsc28gbWVhc3VyZWQgZnJvbSBgKDAsIDAsIDApYCB0b3dhcmRzIGAoeCwgeSwgeilgLgogICAgICogLSBBbnkgYXJiaXRyYXJ5IG9yZGVyZWQgdHJpcGxldCBvZiBudW1iZXJzLgogICAgICoKICAgICAqIFRoZXJlIGFyZSBvdGhlciB0aGluZ3MgYSAzRCB2ZWN0b3IgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50LCBzdWNoIGFzCiAgICAgKiBtb21lbnR1bSB2ZWN0b3JzIGFuZCBzbyBvbiwgaG93ZXZlciB0aGVzZSBhcmUgdGhlIG1vc3QKICAgICAqIGNvbW1vbiB1c2VzIGluIHRocmVlLmpzLgogICAgICoKICAgICAqIEl0ZXJhdGluZyB0aHJvdWdoIGEgdmVjdG9yIGluc3RhbmNlIHdpbGwgeWllbGQgaXRzIGNvbXBvbmVudHMgYCh4LCB5LCB6KWAgaW4KICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIG9yZGVyLgogICAgICogYGBganMKICAgICAqIGNvbnN0IGEgPSBuZXcgVEhSRUUuVmVjdG9yMyggMCwgMSwgMCApOwogICAgICoKICAgICAqIC8vbm8gYXJndW1lbnRzOyB3aWxsIGJlIGluaXRpYWxpc2VkIHRvICgwLCAwLCAwKQogICAgICogY29uc3QgYiA9IG5ldyBUSFJFRS5WZWN0b3IzKCApOwogICAgICoKICAgICAqIGNvbnN0IGQgPSBhLmRpc3RhbmNlVG8oIGIgKTsKICAgICAqIGBgYAogICAgICovCiAgICBjbGFzcyBWZWN0b3IzIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyAzRCB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgeCB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgeSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQlWZWN0b3IzLnByb3RvdHlwZS5pc1ZlY3RvcjMgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB4IHZhbHVlIG9mIHRoaXMgdmVjdG9yLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKi8KICAgIAkJdGhpcy54ID0geDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgeSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICovCiAgICAJCXRoaXMueSA9IHk7CgogICAgCQkvKioKICAgIAkJICogVGhlIHogdmFsdWUgb2YgdGhpcyB2ZWN0b3IuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqLwogICAgCQl0aGlzLnogPSB6OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgb2YgdGhlIHggY29tcG9uZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIG9mIHRoZSB5IGNvbXBvbmVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSBvZiB0aGUgeiBjb21wb25lbnQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0KCB4LCB5LCB6ICkgewoKICAgIAkJaWYgKCB6ID09PSB1bmRlZmluZWQgKSB6ID0gdGhpcy56OyAvLyBzcHJpdGUuc2NhbGUuc2V0KHgseSkKCiAgICAJCXRoaXMueCA9IHg7CiAgICAJCXRoaXMueSA9IHk7CiAgICAJCXRoaXMueiA9IHo7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyB0byB0aGUgc2FtZSB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciBhbGwgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0U2NhbGFyKCBzY2FsYXIgKSB7CgogICAgCQl0aGlzLnggPSBzY2FsYXI7CiAgICAJCXRoaXMueSA9IHNjYWxhcjsKICAgIAkJdGhpcy56ID0gc2NhbGFyOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yJ3MgeCBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0WCggeCApIHsKCiAgICAJCXRoaXMueCA9IHg7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IncyB5IGNvbXBvbmVudCB0byB0aGUgZ2l2ZW4gdmFsdWUKICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRZKCB5ICkgewoKICAgIAkJdGhpcy55ID0geTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvcidzIHogY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZQogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgdmFsdWUgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldFooIHogKSB7CgogICAgCQl0aGlzLnogPSB6OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWxsb3dzIHRvIHNldCBhIHZlY3RvciBjb21wb25lbnQgd2l0aCBhbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LCBgMmAgZXF1YWxzIHRvIHouCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHsKCiAgICAJCXN3aXRjaCAoIGluZGV4ICkgewoKICAgIAkJCWNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrOwogICAgCQkJY2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7CiAgICAJCQljYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhazsKICAgIAkJCWRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdmVjdG9yIGNvbXBvbmVudCB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LCBgMmAgZXF1YWxzIHRvIHouCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBBIHZlY3RvciBjb21wb25lbnQgdmFsdWUuCiAgICAJICovCiAgICAJZ2V0Q29tcG9uZW50KCBpbmRleCApIHsKCiAgICAJCXN3aXRjaCAoIGluZGV4ICkgewoKICAgIAkJCWNhc2UgMDogcmV0dXJuIHRoaXMueDsKICAgIAkJCWNhc2UgMTogcmV0dXJuIHRoaXMueTsKICAgIAkJCWNhc2UgMjogcmV0dXJuIHRoaXMuejsKICAgIAkJCWRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljb3B5KCB2ICkgewoKICAgIAkJdGhpcy54ID0gdi54OwogICAgCQl0aGlzLnkgPSB2Lnk7CiAgICAJCXRoaXMueiA9IHYuejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBhZGQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkKCB2ICkgewoKICAgIAkJdGhpcy54ICs9IHYueDsKICAgIAkJdGhpcy55ICs9IHYueTsKICAgIAkJdGhpcy56ICs9IHYuejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB0byBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgc2NhbGFyIHRvIGFkZC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlhZGRTY2FsYXIoIHMgKSB7CgogICAgCQl0aGlzLnggKz0gczsKICAgIAkJdGhpcy55ICs9IHM7CiAgICAJCXRoaXMueiArPSBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkVmVjdG9ycyggYSwgYiApIHsKCiAgICAJCXRoaXMueCA9IGEueCArIGIueDsKICAgIAkJdGhpcy55ID0gYS55ICsgYi55OwogICAgCQl0aGlzLnogPSBhLnogKyBiLno7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3Igc2NhbGVkIGJ5IHRoZSBnaXZlbiBmYWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM3xWZWN0b3I0fSB2IC0gVGhlIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBmYWN0b3IgdGhhdCBzY2FsZXMgYHZgLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFkZFNjYWxlZFZlY3RvciggdiwgcyApIHsKCiAgICAJCXRoaXMueCArPSB2LnggKiBzOwogICAgCQl0aGlzLnkgKz0gdi55ICogczsKICAgIAkJdGhpcy56ICs9IHYueiAqIHM7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHZlY3RvciBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIHN1YnRyYWN0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXN1YiggdiApIHsKCiAgICAJCXRoaXMueCAtPSB2Lng7CiAgICAJCXRoaXMueSAtPSB2Lnk7CiAgICAJCXRoaXMueiAtPSB2Lno7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSBmcm9tIGFsbCBjb21wb25lbnRzIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gc3VidHJhY3QuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc3ViU2NhbGFyKCBzICkgewoKICAgIAkJdGhpcy54IC09IHM7CiAgICAJCXRoaXMueSAtPSBzOwogICAgCQl0aGlzLnogLT0gczsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc3ViVmVjdG9ycyggYSwgYiApIHsKCiAgICAJCXRoaXMueCA9IGEueCAtIGIueDsKICAgIAkJdGhpcy55ID0gYS55IC0gYi55OwogICAgCQl0aGlzLnogPSBhLnogLSBiLno7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBtdWx0aXBseS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAltdWx0aXBseSggdiApIHsKCiAgICAJCXRoaXMueCAqPSB2Lng7CiAgICAJCXRoaXMueSAqPSB2Lnk7CiAgICAJCXRoaXMueiAqPSB2Lno7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgd2l0aCBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gbXVsdGlwbHkuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHsKCiAgICAJCXRoaXMueCAqPSBzY2FsYXI7CiAgICAJCXRoaXMueSAqPSBzY2FsYXI7CiAgICAJCXRoaXMueiAqPSBzY2FsYXI7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiB2ZWN0b3JzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAltdWx0aXBseVZlY3RvcnMoIGEsIGIgKSB7CgogICAgCQl0aGlzLnggPSBhLnggKiBiLng7CiAgICAJCXRoaXMueSA9IGEueSAqIGIueTsKICAgIAkJdGhpcy56ID0gYS56ICogYi56OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyB0aGUgZ2l2ZW4gRXVsZXIgcm90YXRpb24gdG8gdGhpcyB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBhbmdsZXMuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYXBwbHlFdWxlciggZXVsZXIgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDQuc2V0RnJvbUV1bGVyKCBldWxlciApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyBhIHJvdGF0aW9uIHNwZWNpZmllZCBieSBhbiBheGlzIGFuZCBhbiBhbmdsZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIEEgbm9ybWFsaXplZCB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbiBheGlzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFwcGx5QXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHsKCiAgICAJCXJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24kNC5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciB3aXRoIHRoZSBnaXZlbiAzeDMgbWF0cml4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIDN4MyBtYXRyaXguCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXgzKCBtICkgewoKICAgIAkJY29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejsKICAgIAkJY29uc3QgZSA9IG0uZWxlbWVudHM7CgogICAgCQl0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXSAqIHo7CiAgICAJCXRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdICogejsKICAgIAkJdGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gbm9ybWFsIG1hdHJpeCBhbmQgbm9ybWFsaXplcwogICAgCSAqIHRoZSByZXN1bHQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbm9ybWFsIG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlhcHBseU5vcm1hbE1hdHJpeCggbSApIHsKCiAgICAJCXJldHVybiB0aGlzLmFwcGx5TWF0cml4MyggbSApLm5vcm1hbGl6ZSgpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgKHdpdGggYW4gaW1wbGljaXQgMSBpbiB0aGUgNHRoIGRpbWVuc2lvbikgYnkgbSwgYW5kCiAgICAJICogZGl2aWRlcyBieSBwZXJzcGVjdGl2ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gYXBwbHkuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXg0KCBtICkgewoKICAgIAkJY29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejsKICAgIAkJY29uc3QgZSA9IG0uZWxlbWVudHM7CgogICAgCQljb25zdCB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTsKCiAgICAJCXRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdzsKICAgIAkJdGhpcy55ID0gKCBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICkgKiB3OwogICAgCQl0aGlzLnogPSAoIGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICkgKiB3OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyB0aGUgZ2l2ZW4gUXVhdGVybmlvbiB0byB0aGlzIHZlY3Rvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBRdWF0ZXJuaW9uLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFwcGx5UXVhdGVybmlvbiggcSApIHsKCiAgICAJCS8vIHF1YXRlcm5pb24gcSBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGgKCiAgICAJCWNvbnN0IHZ4ID0gdGhpcy54LCB2eSA9IHRoaXMueSwgdnogPSB0aGlzLno7CiAgICAJCWNvbnN0IHF4ID0gcS54LCBxeSA9IHEueSwgcXogPSBxLnosIHF3ID0gcS53OwoKICAgIAkJLy8gdCA9IDIgKiBjcm9zcyggcS54eXosIHYgKTsKICAgIAkJY29uc3QgdHggPSAyICogKCBxeSAqIHZ6IC0gcXogKiB2eSApOwogICAgCQljb25zdCB0eSA9IDIgKiAoIHF6ICogdnggLSBxeCAqIHZ6ICk7CiAgICAJCWNvbnN0IHR6ID0gMiAqICggcXggKiB2eSAtIHF5ICogdnggKTsKCiAgICAJCS8vIHYgKyBxLncgKiB0ICsgY3Jvc3MoIHEueHl6LCB0ICk7CiAgICAJCXRoaXMueCA9IHZ4ICsgcXcgKiB0eCArIHF5ICogdHogLSBxeiAqIHR5OwogICAgCQl0aGlzLnkgPSB2eSArIHF3ICogdHkgKyBxeiAqIHR4IC0gcXggKiB0ejsKICAgIAkJdGhpcy56ID0gdnogKyBxdyAqIHR6ICsgcXggKiB0eSAtIHF5ICogdHg7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBQcm9qZWN0cyB0aGlzIHZlY3RvciBmcm9tIHdvcmxkIHNwYWNlIGludG8gdGhlIGNhbWVyYSdzIG5vcm1hbGl6ZWQKICAgIAkgKiBkZXZpY2UgY29vcmRpbmF0ZSAoTkRDKSBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXByb2plY3QoIGNhbWVyYSApIHsKCiAgICAJCXJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBVbnByb2plY3RzIHRoaXMgdmVjdG9yIGZyb20gdGhlIGNhbWVyYSdzIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgKE5EQykKICAgIAkgKiBzcGFjZSBpbnRvIHdvcmxkIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJdW5wcm9qZWN0KCBjYW1lcmEgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVHJhbnNmb3JtcyB0aGUgZGlyZWN0aW9uIG9mIHRoaXMgdmVjdG9yIGJ5IGEgbWF0cml4ICh0aGUgdXBwZXIgbGVmdCAzIHggMwogICAgCSAqIHN1YnNldCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeCBhbmQgdGhlbiBub3JtYWxpemVzIHRoZSByZXN1bHQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXRyYW5zZm9ybURpcmVjdGlvbiggbSApIHsKCiAgICAJCS8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXgKICAgIAkJLy8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uCgogICAgCQljb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56OwogICAgCQljb25zdCBlID0gbS5lbGVtZW50czsKCiAgICAJCXRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogejsKICAgIAkJdGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6OwogICAgCQl0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6OwoKICAgIAkJcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIGluc3RhbmNlIGJ5IHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGRpdmlkZS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlkaXZpZGUoIHYgKSB7CgogICAgCQl0aGlzLnggLz0gdi54OwogICAgCQl0aGlzLnkgLz0gdi55OwogICAgCQl0aGlzLnogLz0gdi56OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gc2NhbGFyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWRpdmlkZVNjYWxhciggc2NhbGFyICkgewoKICAgIAkJcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHgsIHkgb3IgegogICAgCSAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtaW4gdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW1pbiggdiApIHsKCiAgICAJCXRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHgsIHkgb3IgegogICAgCSAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtYXggdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW1heCggdiApIHsKCiAgICAJCXRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIG1heCB2ZWN0b3IncyB4LCB5IG9yIHoKICAgIAkgKiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyB4LCB5IG9yIHogdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBtaW4gdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlLAogICAgCSAqIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBtaW4gLSBUaGUgbWluaW11bSB4LCB5IGFuZCB6IHZhbHVlcy4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IG1heCAtIFRoZSBtYXhpbXVtIHgsIHkgYW5kIHogdmFsdWVzIGluIHRoZSBkZXNpcmVkIHJhbmdlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWNsYW1wKCBtaW4sIG1heCApIHsKCiAgICAJCS8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlCgogICAgCQl0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW4ueCwgbWF4LnggKTsKICAgIAkJdGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluLnksIG1heC55ICk7CiAgICAJCXRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pbi56LCBtYXgueiApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyB4LCB5IG9yIHogdmFsdWVzIGFyZSBncmVhdGVyIHRoYW4gdGhlIG1heCB2YWx1ZSwgdGhleSBhcmUKICAgIAkgKiByZXBsYWNlZCBieSB0aGUgbWF4IHZhbHVlLgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlcyBhcmUgbGVzcyB0aGFuIHRoZSBtaW4gdmFsdWUsIHRoZXkgYXJlCiAgICAJICogcmVwbGFjZWQgYnkgdGhlIG1pbiB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBtaW5WYWwgLSBUaGUgbWluaW11bSB2YWx1ZSB0aGUgY29tcG9uZW50cyB3aWxsIGJlIGNsYW1wZWQgdG8uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG1heFZhbCAtIFRoZSBtYXhpbXVtIHZhbHVlIHRoZSBjb21wb25lbnRzIHdpbGwgYmUgY2xhbXBlZCB0by4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7CgogICAgCQl0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW5WYWwsIG1heFZhbCApOwogICAgCQl0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW5WYWwsIG1heFZhbCApOwogICAgCQl0aGlzLnogPSBjbGFtcCggdGhpcy56LCBtaW5WYWwsIG1heFZhbCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyBsZW5ndGggaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXggdmFsdWUsIGl0IGlzIHJlcGxhY2VkIGJ5CiAgICAJICogdGhlIG1heCB2YWx1ZS4KICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhlIG1pbiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlCiAgICAJICogbWluIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIHZlY3RvciBsZW5ndGggd2lsbCBiZSBjbGFtcGVkIHRvLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHsKCiAgICAJCWNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7CgogICAgCQlyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIGNsYW1wKCBsZW5ndGgsIG1pbiwgbWF4ICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlmbG9vcigpIHsKCiAgICAJCXRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB1cCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2VpbCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7CiAgICAJCXRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7CiAgICAJCXRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyb3VuZCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0b3dhcmRzIHplcm8gKHVwIGlmIG5lZ2F0aXZlLAogICAgCSAqIGRvd24gaWYgcG9zaXRpdmUpIHRvIGFuIGludGVnZXIgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyb3VuZFRvWmVybygpIHsKCiAgICAJCXRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLnRydW5jKCB0aGlzLnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC50cnVuYyggdGhpcy56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJbnZlcnRzIHRoaXMgdmVjdG9yIC0gaS5lLiBzZXRzIHggPSAteCwgeSA9IC15IGFuZCB6ID0gLXouCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAluZWdhdGUoKSB7CgogICAgCQl0aGlzLnggPSAtIHRoaXMueDsKICAgIAkJdGhpcy55ID0gLSB0aGlzLnk7CiAgICAJCXRoaXMueiA9IC0gdGhpcy56OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdGhlIGdpdmVuIHZlY3RvciB3aXRoIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IHdpdGguCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVzdWx0IG9mIHRoZSBkb3QgcHJvZHVjdC4KICAgIAkgKi8KICAgIAlkb3QoIHYgKSB7CgogICAgCQlyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56OwoKICAgIAl9CgogICAgCS8vIFRPRE8gbGVuZ3RoU3F1YXJlZD8KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHNxdWFyZSBvZiB0aGUgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIGZyb20KICAgIAkgKiAoMCwgMCwgMCkgdG8gKHgsIHksIHopLiBJZiB5b3UgYXJlIGNvbXBhcmluZyB0aGUgbGVuZ3RocyBvZiB2ZWN0b3JzLCB5b3Ugc2hvdWxkCiAgICAJICogY29tcGFyZSB0aGUgbGVuZ3RoIHNxdWFyZWQgaW5zdGVhZCBhcyBpdCBpcyBzbGlnaHRseSBtb3JlIGVmZmljaWVudCB0byBjYWxjdWxhdGUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlbmd0aFNxKCkgewoKICAgIAkJcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgIEV1Y2xpZGVhbiBsZW5ndGggKHN0cmFpZ2h0LWxpbmUgbGVuZ3RoKSBmcm9tICgwLCAwLCAwKSB0byAoeCwgeSwgeikuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbGVuZ3RoKCkgewoKICAgIAkJcmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIE1hbmhhdHRhbiBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbWFuaGF0dGFuTGVuZ3RoKCkgewoKICAgIAkJcmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciB0byBhIHVuaXQgdmVjdG9yIC0gdGhhdCBpcywgc2V0cyBpdCBlcXVhbCB0byBhIHZlY3RvcgogICAgCSAqIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXQgd2l0aCBhIHZlY3RvciBsZW5ndGggb2YgYDFgLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbm9ybWFsaXplKCkgewoKICAgIAkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgdmVjdG9yIHRvIGEgdmVjdG9yIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXQKICAgIAkgKiB3aXRoIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBuZXcgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldExlbmd0aCggbGVuZ3RoICkgewoKICAgIAkJcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3IgYW5kIHRoaXMgaW5zdGFuY2UsIHdoZXJlCiAgICAJICogYWxwaGEgaXMgdGhlIHBlcmNlbnQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgLSBhbHBoYSA9IDAgd2lsbCBiZSB0aGlzCiAgICAJICogdmVjdG9yLCBhbmQgYWxwaGEgPSAxIHdpbGwgYmUgdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IgdG8gaW50ZXJwb2xhdGUgdG93YXJkcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlcnAoIHYsIGFscGhhICkgewoKICAgIAkJdGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTsKICAgIAkJdGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTsKICAgIAkJdGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3JzLCB3aGVyZSBhbHBoYSBpcyB0aGUgcGVyY2VudAogICAgCSAqIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIC0gYWxwaGEgPSAwIHdpbGwgYmUgZmlyc3QgdmVjdG9yLCBhbmQgYWxwaGEgPSAxIHdpbGwKICAgIAkgKiBiZSB0aGUgc2Vjb25kIG9uZS4gVGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjEgLSBUaGUgZmlyc3QgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjIgLSBUaGUgc2Vjb25kIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkgewoKICAgIAkJdGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhOwogICAgCQl0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7CiAgICAJCXRoaXMueiA9IHYxLnogKyAoIHYyLnogLSB2MS56ICkgKiBhbHBoYTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENhbGN1bGF0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIGdpdmVuIHZlY3RvciB3aXRoIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGNyb3NzIHByb2R1Y3Qgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgcmVzdWx0IG9mIHRoZSBjcm9zcyBwcm9kdWN0LgogICAgCSAqLwogICAgCWNyb3NzKCB2ICkgewoKICAgIAkJcmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB0aGlzLCB2ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQKICAgIAkgKiBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljcm9zc1ZlY3RvcnMoIGEsIGIgKSB7CgogICAgCQljb25zdCBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56OwogICAgCQljb25zdCBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56OwoKICAgIAkJdGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7CiAgICAJCXRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6OwogICAgCQl0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFByb2plY3RzIHRoaXMgdmVjdG9yIG9udG8gdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IgdG8gcHJvamVjdCB0by4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlwcm9qZWN0T25WZWN0b3IoIHYgKSB7CgogICAgCQljb25zdCBkZW5vbWluYXRvciA9IHYubGVuZ3RoU3EoKTsKCiAgICAJCWlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAgKTsKCiAgICAJCWNvbnN0IHNjYWxhciA9IHYuZG90KCB0aGlzICkgLyBkZW5vbWluYXRvcjsKCiAgICAJCXJldHVybiB0aGlzLmNvcHkoIHYgKS5tdWx0aXBseVNjYWxhciggc2NhbGFyICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUHJvamVjdHMgdGhpcyB2ZWN0b3Igb250byBhIHBsYW5lIGJ5IHN1YnRyYWN0aW5nIHRoaXMKICAgIAkgKiB2ZWN0b3IgcHJvamVjdGVkIG9udG8gdGhlIHBsYW5lJ3Mgbm9ybWFsIGZyb20gdGhpcyB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBsYW5lTm9ybWFsIC0gVGhlIHBsYW5lIG5vcm1hbC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlwcm9qZWN0T25QbGFuZSggcGxhbmVOb3JtYWwgKSB7CgogICAgCQlfdmVjdG9yJGMuY29weSggdGhpcyApLnByb2plY3RPblZlY3RvciggcGxhbmVOb3JtYWwgKTsKCiAgICAJCXJldHVybiB0aGlzLnN1YiggX3ZlY3RvciRjICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmVmbGVjdHMgdGhpcyB2ZWN0b3Igb2ZmIGEgcGxhbmUgb3J0aG9nb25hbCB0byB0aGUgZ2l2ZW4gbm9ybWFsIHZlY3Rvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gbm9ybWFsIC0gVGhlIChub3JtYWxpemVkKSBub3JtYWwgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXJlZmxlY3QoIG5vcm1hbCApIHsKCiAgICAJCXJldHVybiB0aGlzLnN1YiggX3ZlY3RvciRjLmNvcHkoIG5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAyICogdGhpcy5kb3QoIG5vcm1hbCApICkgKTsKCiAgICAJfQogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSBpbiByYWRpYW5zLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBhbmdsZSB3aXRoLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICovCiAgICAJYW5nbGVUbyggdiApIHsKCiAgICAJCWNvbnN0IGRlbm9taW5hdG9yID0gTWF0aC5zcXJ0KCB0aGlzLmxlbmd0aFNxKCkgKiB2Lmxlbmd0aFNxKCkgKTsKCiAgICAJCWlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gTWF0aC5QSSAvIDI7CgogICAgCQljb25zdCB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjsKCiAgICAJCS8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zCgogICAgCQlyZXR1cm4gTWF0aC5hY29zKCBjbGFtcCggdGhldGEsIC0xLCAxICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlLgogICAgCSAqLwogICAgCWRpc3RhbmNlVG8oIHYgKSB7CgogICAgCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKiBJZiB5b3UgYXJlIGp1c3QgY29tcGFyaW5nIHRoZSBkaXN0YW5jZSB3aXRoIGFub3RoZXIgZGlzdGFuY2UsIHlvdSBzaG91bGQgY29tcGFyZQogICAgCSAqIHRoZSBkaXN0YW5jZSBzcXVhcmVkIGluc3RlYWQgYXMgaXQgaXMgc2xpZ2h0bHkgbW9yZSBlZmZpY2llbnQgdG8gY2FsY3VsYXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBzcXVhcmVkIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgZGlzdGFuY2UuCiAgICAJICovCiAgICAJZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7CgogICAgCQljb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56OwoKICAgIAkJcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgTWFuaGF0dGFuIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgdG8uCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgTWFuaGF0dGFuIGRpc3RhbmNlLgogICAgCSAqLwogICAgCW1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKSB7CgogICAgCQlyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApICsgTWF0aC5hYnMoIHRoaXMueiAtIHYueiApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIHNwaGVyaWNhbCBjb29yZGluYXRlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7U3BoZXJpY2FsfSBzIC0gVGhlIHNwaGVyaWNhbCBjb29yZGluYXRlcy4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tU3BoZXJpY2FsKCBzICkgewoKICAgIAkJcmV0dXJuIHRoaXMuc2V0RnJvbVNwaGVyaWNhbENvb3Jkcyggcy5yYWRpdXMsIHMucGhpLCBzLnRoZXRhICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgZ2l2ZW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHBoaSAtIFRoZSBwaGkgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBUaGUgdGhldGEgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7CgogICAgCQljb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7CgogICAgCQl0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTsKICAgIAkJdGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzOwogICAgCQl0aGlzLnogPSBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyggdGhldGEgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIGN5bGluZHJpY2FsIGNvb3JkaW5hdGVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDeWxpbmRyaWNhbH0gYyAtIFRoZSBjeWxpbmRyaWNhbCBjb29yZGluYXRlcy4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tQ3lsaW5kcmljYWwoIGMgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5zZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMoIGMucmFkaXVzLCBjLnRoZXRhLCBjLnkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiBjeWxpbmRyaWNhbCBjb29yZGluYXRlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSBUaGUgcmFkaXVzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSB0aGV0YSBhbmdsZSBpbiByYWRpYW5zLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgdmFsdWUuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCByYWRpdXMsIHRoZXRhLCB5ICkgewoKICAgIAkJdGhpcy54ID0gcmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7CiAgICAJCXRoaXMueSA9IHk7CiAgICAJCXRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgdG8gdGhlIHBvc2l0aW9uIGVsZW1lbnRzIG9mIHRoZQogICAgCSAqIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSA0eDQgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApIHsKCiAgICAJCWNvbnN0IGUgPSBtLmVsZW1lbnRzOwoKICAgIAkJdGhpcy54ID0gZVsgMTIgXTsKICAgIAkJdGhpcy55ID0gZVsgMTMgXTsKICAgIAkJdGhpcy56ID0gZVsgMTQgXTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIHRvIHRoZSBzY2FsZSBlbGVtZW50cyBvZiB0aGUKICAgIAkgKiBnaXZlbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgNHg0IG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tTWF0cml4U2NhbGUoIG0gKSB7CgogICAgCQljb25zdCBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpOwogICAgCQljb25zdCBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpOwogICAgCQljb25zdCBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpOwoKICAgIAkJdGhpcy54ID0gc3g7CiAgICAJCXRoaXMueSA9IHN5OwogICAgCQl0aGlzLnogPSBzejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIHNwZWNpZmllZCBtYXRyaXggY29sdW1uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIDR4NCBtYXRyaXguCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbHVtbiBpbmRleC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tTWF0cml4Q29sdW1uKCBtLCBpbmRleCApIHsKCiAgICAJCXJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiA0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgc3BlY2lmaWVkIG1hdHJpeCBjb2x1bW4uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgM3gzIG1hdHJpeC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY29sdW1uIGluZGV4LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEZyb21NYXRyaXgzQ29sdW1uKCBtLCBpbmRleCApIHsKCiAgICAJCXJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiAzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgZ2l2ZW4gRXVsZXIgYW5nbGVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtFdWxlcn0gZSAtIFRoZSBFdWxlciBhbmdsZXMgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEZyb21FdWxlciggZSApIHsKCiAgICAJCXRoaXMueCA9IGUuX3g7CiAgICAJCXRoaXMueSA9IGUuX3k7CiAgICAJCXRoaXMueiA9IGUuX3o7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyBmcm9tIHRoZSBSR0IgY29tcG9uZW50cyBvZiB0aGUKICAgIAkgKiBnaXZlbiBjb2xvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGMgLSBUaGUgY29sb3IgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEZyb21Db2xvciggYyApIHsKCiAgICAJCXRoaXMueCA9IGMucjsKICAgIAkJdGhpcy55ID0gYy5nOwogICAgCQl0aGlzLnogPSBjLmI7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZlY3RvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIHRlc3QgZm9yIGVxdWFsaXR5LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyB2ZWN0b3IgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqLwogICAgCWVxdWFscyggdiApIHsKCiAgICAJCXJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIHZlY3RvcidzIHggdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgXWAsIHkgdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAxIF1gCiAgICAJICogYW5kIHogdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAyIF1gLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkgewoKICAgIAkJdGhpcy54ID0gYXJyYXlbIG9mZnNldCBdOwogICAgCQl0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwogICAgCQl0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogV3JpdGVzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsCiAgICAJICogdGhlIG1ldGhvZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSB2ZWN0b3IgY29tcG9uZW50cy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICovCiAgICAJdG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDsKICAgIAkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejsKCiAgICAJCXJldHVybiBhcnJheTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyB2ZWN0b3IgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7CgogICAgCQl0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKICAgIAkJdGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7CiAgICAJCXRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyBlYWNoIGNvbXBvbmVudCBvZiB0aGlzIHZlY3RvciB0byBhIHBzZXVkby1yYW5kb20gdmFsdWUgYmV0d2VlbiBgMGAgYW5kCiAgICAJICogYDFgLCBleGNsdWRpbmcgYDFgLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJcmFuZG9tKCkgewoKICAgIAkJdGhpcy54ID0gTWF0aC5yYW5kb20oKTsKICAgIAkJdGhpcy55ID0gTWF0aC5yYW5kb20oKTsKICAgIAkJdGhpcy56ID0gTWF0aC5yYW5kb20oKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyB2ZWN0b3IgdG8gYSB1bmlmb3JtbHkgcmFuZG9tIHBvaW50IG9uIGEgdW5pdCBzcGhlcmUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyYW5kb21EaXJlY3Rpb24oKSB7CgogICAgCQkvLyBodHRwczovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9TcGhlcmVQb2ludFBpY2tpbmcuaHRtbAoKICAgIAkJY29uc3QgdGhldGEgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7CiAgICAJCWNvbnN0IHUgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7CiAgICAJCWNvbnN0IGMgPSBNYXRoLnNxcnQoIDEgLSB1ICogdSApOwoKICAgIAkJdGhpcy54ID0gYyAqIE1hdGguY29zKCB0aGV0YSApOwogICAgCQl0aGlzLnkgPSB1OwogICAgCQl0aGlzLnogPSBjICogTWF0aC5zaW4oIHRoZXRhICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHsKCiAgICAJCXlpZWxkIHRoaXMueDsKICAgIAkJeWllbGQgdGhpcy55OwogICAgCQl5aWVsZCB0aGlzLno7CgogICAgCX0KCiAgICB9CgogICAgY29uc3QgX3ZlY3RvciRjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3F1YXRlcm5pb24kNCA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTsKCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgYSAzeDMgbWF0cml4LgogICAgICoKICAgICAqIEEgTm90ZSBvbiBSb3ctTWFqb3IgYW5kIENvbHVtbi1NYWpvciBPcmRlcmluZzoKICAgICAqCiAgICAgKiBUaGUgY29uc3RydWN0b3IgYW5kIHtAbGluayBNYXRyaXgzI3NldH0gbWV0aG9kIHRha2UgYXJndW1lbnRzIGluCiAgICAgKiBbcm93LW1ham9yXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb3ctX2FuZF9jb2x1bW4tbWFqb3Jfb3JkZXIjQ29sdW1uLW1ham9yX29yZGVyfQogICAgICogb3JkZXIsIHdoaWxlIGludGVybmFsbHkgdGhleSBhcmUgc3RvcmVkIGluIHRoZSB7QGxpbmsgTWF0cml4MyNlbGVtZW50c30gYXJyYXkgaW4gY29sdW1uLW1ham9yIG9yZGVyLgogICAgICogVGhpcyBtZWFucyB0aGF0IGNhbGxpbmc6CiAgICAgKiBgYGBqcwogICAgICogY29uc3QgbSA9IG5ldyBUSFJFRS5NYXRyaXgoKTsKICAgICAqIG0uc2V0KCAxMSwgMTIsIDEzLAogICAgICogICAgICAgIDIxLCAyMiwgMjMsCiAgICAgKiAgICAgICAgMzEsIDMyLCAzMyApOwogICAgICogYGBgCiAgICAgKiB3aWxsIHJlc3VsdCBpbiB0aGUgZWxlbWVudHMgYXJyYXkgY29udGFpbmluZzoKICAgICAqIGBgYGpzCiAgICAgKiBtLmVsZW1lbnRzID0gWyAxMSwgMjEsIDMxLAogICAgICogICAgICAgICAgICAgICAgMTIsIDIyLCAzMiwKICAgICAqICAgICAgICAgICAgICAgIDEzLCAyMywgMzMgXTsKICAgICAqIGBgYAogICAgICogYW5kIGludGVybmFsbHkgYWxsIGNhbGN1bGF0aW9ucyBhcmUgcGVyZm9ybWVkIHVzaW5nIGNvbHVtbi1tYWpvciBvcmRlcmluZy4KICAgICAqIEhvd2V2ZXIsIGFzIHRoZSBhY3R1YWwgb3JkZXJpbmcgbWFrZXMgbm8gZGlmZmVyZW5jZSBtYXRoZW1hdGljYWxseSBhbmQKICAgICAqIG1vc3QgcGVvcGxlIGFyZSB1c2VkIHRvIHRoaW5raW5nIGFib3V0IG1hdHJpY2VzIGluIHJvdy1tYWpvciBvcmRlciwgdGhlCiAgICAgKiB0aHJlZS5qcyBkb2N1bWVudGF0aW9uIHNob3dzIG1hdHJpY2VzIGluIHJvdy1tYWpvciBvcmRlci4gSnVzdCBiZWFyIGluCiAgICAgKiBtaW5kIHRoYXQgaWYgeW91IGFyZSByZWFkaW5nIHRoZSBzb3VyY2UgY29kZSwgeW91J2xsIGhhdmUgdG8gdGFrZSB0aGUKICAgICAqIHRyYW5zcG9zZSBvZiBhbnkgbWF0cmljZXMgb3V0bGluZWQgaGVyZSB0byBtYWtlIHNlbnNlIG9mIHRoZSBjYWxjdWxhdGlvbnMuCiAgICAgKi8KICAgIGNsYXNzIE1hdHJpeDMgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IDN4MyBtYXRyaXguIFRoZSBhcmd1bWVudHMgYXJlIHN1cHBvc2VkIHRvIGJlCiAgICAJICogaW4gcm93LW1ham9yIG9yZGVyLiBJZiBubyBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0b3IKICAgIAkgKiBpbml0aWFsaXplcyB0aGUgbWF0cml4IGFzIGFuIGlkZW50aXR5IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjExXSAtIDEtMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24xMl0gLSAxLTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMTNdIC0gMS0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjIxXSAtIDItMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24yMl0gLSAyLTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMjNdIC0gMi0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjMxXSAtIDMtMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24zMl0gLSAzLTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMzNdIC0gMy0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkgewoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCU1hdHJpeDMucHJvdG90eXBlLmlzTWF0cml4MyA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogQSBjb2x1bW4tbWFqb3IgbGlzdCBvZiBtYXRyaXggdmFsdWVzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7QXJyYXk8bnVtYmVyPn0KICAgIAkJICovCiAgICAJCXRoaXMuZWxlbWVudHMgPSBbCgogICAgCQkJMSwgMCwgMCwKICAgIAkJCTAsIDEsIDAsCiAgICAJCQkwLCAwLCAxCgogICAgCQldOwoKICAgIAkJaWYgKCBuMTEgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl0aGlzLnNldCggbjExLCBuMTIsIG4xMywgbjIxLCBuMjIsIG4yMywgbjMxLCBuMzIsIG4zMyApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGVsZW1lbnRzIG9mIHRoZSBtYXRyaXguVGhlIGFyZ3VtZW50cyBhcmUgc3VwcG9zZWQgdG8gYmUKICAgIAkgKiBpbiByb3ctbWFqb3Igb3JkZXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24xMV0gLSAxLTEgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMTJdIC0gMS0yIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjEzXSAtIDEtMyBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24yMV0gLSAyLTEgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMjJdIC0gMi0yIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjIzXSAtIDItMyBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24zMV0gLSAzLTEgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMzJdIC0gMy0yIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjMzXSAtIDMtMyBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlzZXQoIG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMgKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQl0ZVsgMCBdID0gbjExOyB0ZVsgMSBdID0gbjIxOyB0ZVsgMiBdID0gbjMxOwogICAgCQl0ZVsgMyBdID0gbjEyOyB0ZVsgNCBdID0gbjIyOyB0ZVsgNSBdID0gbjMyOwogICAgCQl0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIG1hdHJpeCB0byB0aGUgM3gzIGlkZW50aXR5IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWlkZW50aXR5KCkgewoKICAgIAkJdGhpcy5zZXQoCgogICAgCQkJMSwgMCwgMCwKICAgIAkJCTAsIDEsIDAsCiAgICAJCQkwLCAwLCAxCgogICAgCQkpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIG1hdHJpeCB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWNvcHkoIG0gKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CiAgICAJCWNvbnN0IG1lID0gbS5lbGVtZW50czsKCiAgICAJCXRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07CiAgICAJCXRlWyAzIF0gPSBtZVsgMyBdOyB0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07CiAgICAJCXRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHRyYWN0cyB0aGUgYmFzaXMgb2YgdGhpcyBtYXRyaXggaW50byB0aGUgdGhyZWUgYXhpcyB2ZWN0b3JzIHByb3ZpZGVkLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB4QXhpcyAtIFRoZSBiYXNpcydzIHggYXhpcy4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHlBeGlzIC0gVGhlIGJhc2lzJ3MgeSBheGlzLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gekF4aXMgLSBUaGUgYmFzaXMncyB6IGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkgewoKICAgIAkJeEF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDAgKTsKICAgIAkJeUF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDEgKTsKICAgIAkJekF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDIgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldCB0aGlzIG1hdHJpeCB0byB0aGUgdXBwZXIgM3gzIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSA0eDQgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCXNldEZyb21NYXRyaXg0KCBtICkgewoKICAgIAkJY29uc3QgbWUgPSBtLmVsZW1lbnRzOwoKICAgIAkJdGhpcy5zZXQoCgogICAgCQkJbWVbIDAgXSwgbWVbIDQgXSwgbWVbIDggXSwKICAgIAkJCW1lWyAxIF0sIG1lWyA1IF0sIG1lWyA5IF0sCiAgICAJCQltZVsgMiBdLCBtZVsgNiBdLCBtZVsgMTAgXQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFBvc3QtbXVsdGlwbGllcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gM3gzIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBtYXRyaXggdG8gbXVsdGlwbHkgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltdWx0aXBseSggbSApIHsKCiAgICAJCXJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBQcmUtbXVsdGlwbGllcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gM3gzIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBtYXRyaXggdG8gbXVsdGlwbHkgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlwcmVtdWx0aXBseSggbSApIHsKCiAgICAJCXJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsZXMgdGhlIGdpdmVuIDN4MyBtYXRyaWNlcyBhbmQgc3RvcmVzIHRoZSByZXN1bHQKICAgIAkgKiBpbiB0aGlzIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4M30gYSAtIFRoZSBmaXJzdCBtYXRyaXguCiAgICAJICogQHBhcmFtIHtNYXRyaXgzfSBiIC0gVGhlIHNlY29uZCBtYXRyaXguCiAgICAJICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIHsKCiAgICAJCWNvbnN0IGFlID0gYS5lbGVtZW50czsKICAgIAkJY29uc3QgYmUgPSBiLmVsZW1lbnRzOwogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQljb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgMyBdLCBhMTMgPSBhZVsgNiBdOwogICAgCQljb25zdCBhMjEgPSBhZVsgMSBdLCBhMjIgPSBhZVsgNCBdLCBhMjMgPSBhZVsgNyBdOwogICAgCQljb25zdCBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNSBdLCBhMzMgPSBhZVsgOCBdOwoKICAgIAkJY29uc3QgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDMgXSwgYjEzID0gYmVbIDYgXTsKICAgIAkJY29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTsKICAgIAkJY29uc3QgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDUgXSwgYjMzID0gYmVbIDggXTsKCiAgICAJCXRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7CiAgICAJCXRlWyAzIF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzI7CiAgICAJCXRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7CgogICAgCQl0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxOwogICAgCQl0ZVsgNCBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyOwogICAgCQl0ZVsgNyBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzOwoKICAgIAkJdGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMTsKICAgIAkJdGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjsKICAgIAkJdGVbIDggXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIE11bHRpcGxpZXMgZXZlcnkgY29tcG9uZW50IG9mIHRoZSBtYXRyaXggYnkgdGhlIGdpdmVuIHNjYWxhci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhci4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltdWx0aXBseVNjYWxhciggcyApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKCiAgICAJCXRlWyAwIF0gKj0gczsgdGVbIDMgXSAqPSBzOyB0ZVsgNiBdICo9IHM7CiAgICAJCXRlWyAxIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgNyBdICo9IHM7CiAgICAJCXRlWyAyIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOCBdICo9IHM7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhpcyBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkZXRlcm1pbmFudC4KICAgIAkgKi8KICAgIAlkZXRlcm1pbmFudCgpIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKCiAgICAJCWNvbnN0IGEgPSB0ZVsgMCBdLCBiID0gdGVbIDEgXSwgYyA9IHRlWyAyIF0sCiAgICAJCQlkID0gdGVbIDMgXSwgZSA9IHRlWyA0IF0sIGYgPSB0ZVsgNSBdLAogICAgCQkJZyA9IHRlWyA2IF0sIGggPSB0ZVsgNyBdLCBpID0gdGVbIDggXTsKCiAgICAJCXJldHVybiBhICogZSAqIGkgLSBhICogZiAqIGggLSBiICogZCAqIGkgKyBiICogZiAqIGcgKyBjICogZCAqIGggLSBjICogZSAqIGc7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSW52ZXJ0cyB0aGlzIG1hdHJpeCwgdXNpbmcgdGhlIFthbmFseXRpYyBtZXRob2Rde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVydGlibGVfbWF0cml4I0FuYWx5dGljX3NvbHV0aW9ufS4KICAgIAkgKiBZb3UgY2FuIG5vdCBpbnZlcnQgd2l0aCBhIGRldGVybWluYW50IG9mIHplcm8uIElmIHlvdSBhdHRlbXB0IHRoaXMsIHRoZSBtZXRob2QgcHJvZHVjZXMKICAgIAkgKiBhIHplcm8gbWF0cml4IGluc3RlYWQuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlpbnZlcnQoKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsCgogICAgCQkJbjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSwKICAgIAkJCW4xMiA9IHRlWyAzIF0sIG4yMiA9IHRlWyA0IF0sIG4zMiA9IHRlWyA1IF0sCiAgICAJCQluMTMgPSB0ZVsgNiBdLCBuMjMgPSB0ZVsgNyBdLCBuMzMgPSB0ZVsgOCBdLAoKICAgIAkJCXQxMSA9IG4zMyAqIG4yMiAtIG4zMiAqIG4yMywKICAgIAkJCXQxMiA9IG4zMiAqIG4xMyAtIG4zMyAqIG4xMiwKICAgIAkJCXQxMyA9IG4yMyAqIG4xMiAtIG4yMiAqIG4xMywKCiAgICAJCQlkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7CgogICAgCQlpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApOwoKICAgIAkJY29uc3QgZGV0SW52ID0gMSAvIGRldDsKCiAgICAJCXRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7CiAgICAJCXRlWyAxIF0gPSAoIG4zMSAqIG4yMyAtIG4zMyAqIG4yMSApICogZGV0SW52OwogICAgCQl0ZVsgMiBdID0gKCBuMzIgKiBuMjEgLSBuMzEgKiBuMjIgKSAqIGRldEludjsKCiAgICAJCXRlWyAzIF0gPSB0MTIgKiBkZXRJbnY7CiAgICAJCXRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52OwogICAgCQl0ZVsgNSBdID0gKCBuMzEgKiBuMTIgLSBuMzIgKiBuMTEgKSAqIGRldEludjsKCiAgICAJCXRlWyA2IF0gPSB0MTMgKiBkZXRJbnY7CiAgICAJCXRlWyA3IF0gPSAoIG4yMSAqIG4xMyAtIG4yMyAqIG4xMSApICogZGV0SW52OwogICAgCQl0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zcG9zZXMgdGhpcyBtYXRyaXggaW4gcGxhY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAl0cmFuc3Bvc2UoKSB7CgogICAgCQlsZXQgdG1wOwogICAgCQljb25zdCBtID0gdGhpcy5lbGVtZW50czsKCiAgICAJCXRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7CiAgICAJCXRtcCA9IG1bIDIgXTsgbVsgMiBdID0gbVsgNiBdOyBtWyA2IF0gPSB0bXA7CiAgICAJCXRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgbm9ybWFsIG1hdHJpeCB3aGljaCBpcyB0aGUgaW52ZXJzZSB0cmFuc3Bvc2Ugb2YgdGhlIHVwcGVyCiAgICAJICogbGVmdCAzeDMgcG9ydGlvbiBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4NCAtIFRoZSA0eDQgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWdldE5vcm1hbE1hdHJpeCggbWF0cml4NCApIHsKCiAgICAJCXJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KCBtYXRyaXg0ICkuaW52ZXJ0KCkudHJhbnNwb3NlKCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVHJhbnNwb3NlcyB0aGlzIG1hdHJpeCBpbnRvIHRoZSBzdXBwbGllZCBhcnJheSwgYW5kIHJldHVybnMgaXRzZWxmIHVuY2hhbmdlZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gciAtIEFuIGFycmF5IHRvIHN0b3JlIHRoZSB0cmFuc3Bvc2VkIG1hdHJpeCBlbGVtZW50cy4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAl0cmFuc3Bvc2VJbnRvQXJyYXkoIHIgKSB7CgogICAgCQljb25zdCBtID0gdGhpcy5lbGVtZW50czsKCiAgICAJCXJbIDAgXSA9IG1bIDAgXTsKICAgIAkJclsgMSBdID0gbVsgMyBdOwogICAgCQlyWyAyIF0gPSBtWyA2IF07CiAgICAJCXJbIDMgXSA9IG1bIDEgXTsKICAgIAkJclsgNCBdID0gbVsgNCBdOwogICAgCQlyWyA1IF0gPSBtWyA3IF07CiAgICAJCXJbIDYgXSA9IG1bIDIgXTsKICAgIAkJclsgNyBdID0gbVsgNSBdOwogICAgCQlyWyA4IF0gPSBtWyA4IF07CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBVViB0cmFuc2Zvcm0gbWF0cml4IGZyb20gb2Zmc2V0LCByZXBlYXQsIHJvdGF0aW9uLCBhbmQgY2VudGVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHR4IC0gT2Zmc2V0IHguCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gT2Zmc2V0IHkuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHN4IC0gUmVwZWF0IHguCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHN5IC0gUmVwZWF0IHkuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gUm90YXRpb24sIGluIHJhZGlhbnMuIFBvc2l0aXZlIHZhbHVlcyByb3RhdGUgY291bnRlcmNsb2Nrd2lzZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gY3ggLSBDZW50ZXIgeCBvZiByb3RhdGlvbi4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gY3kgLSBDZW50ZXIgeSBvZiByb3RhdGlvbgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCXNldFV2VHJhbnNmb3JtKCB0eCwgdHksIHN4LCBzeSwgcm90YXRpb24sIGN4LCBjeSApIHsKCiAgICAJCWNvbnN0IGMgPSBNYXRoLmNvcyggcm90YXRpb24gKTsKICAgIAkJY29uc3QgcyA9IE1hdGguc2luKCByb3RhdGlvbiApOwoKICAgIAkJdGhpcy5zZXQoCiAgICAJCQlzeCAqIGMsIHN4ICogcywgLSBzeCAqICggYyAqIGN4ICsgcyAqIGN5ICkgKyBjeCArIHR4LAogICAgCQkJLSBzeSAqIHMsIHN5ICogYywgLSBzeSAqICggLSBzICogY3ggKyBjICogY3kgKSArIGN5ICsgdHksCiAgICAJCQkwLCAwLCAxCiAgICAJCSk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTY2FsZXMgdGhpcyBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIFRoZSBhbW91bnQgdG8gc2NhbGUgaW4gdGhlIFggYXhpcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBZIGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJc2NhbGUoIHN4LCBzeSApIHsKCiAgICAJCXRoaXMucHJlbXVsdGlwbHkoIF9tMy5tYWtlU2NhbGUoIHN4LCBzeSApICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSb3RhdGVzIHRoaXMgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSByb3RhdGlvbiBpbiByYWRpYW5zLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCXJvdGF0ZSggdGhldGEgKSB7CgogICAgCQl0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVJvdGF0aW9uKCAtIHRoZXRhICkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zbGF0ZXMgdGhpcyBtYXRyaXggYnkgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gdHggLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgWCBheGlzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIFRoZSBhbW91bnQgdG8gdHJhbnNsYXRlIGluIHRoZSBZIGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJdHJhbnNsYXRlKCB0eCwgdHkgKSB7CgogICAgCQl0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVRyYW5zbGF0aW9uKCB0eCwgdHkgKSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLy8gZm9yIDJEIFRyYW5zZm9ybXMKCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIDJEIHRyYW5zbGF0aW9uIHRyYW5zZm9ybS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfFZlY3RvcjJ9IHggLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgWCBheGlzIG9yIGFsdGVybmF0aXZlbHkgYSB0cmFuc2xhdGlvbiB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgWSBheGlzLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VUcmFuc2xhdGlvbiggeCwgeSApIHsKCiAgICAJCWlmICggeC5pc1ZlY3RvcjIgKSB7CgogICAgCQkJdGhpcy5zZXQoCgogICAgCQkJCTEsIDAsIHgueCwKICAgIAkJCQkwLCAxLCB4LnksCiAgICAJCQkJMCwgMCwgMQoKICAgIAkJCSk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRoaXMuc2V0KAoKICAgIAkJCQkxLCAwLCB4LAogICAgCQkJCTAsIDEsIHksCiAgICAJCQkJMCwgMCwgMQoKICAgIAkJCSk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgbWF0cml4IGFzIGEgMkQgcm90YXRpb25hbCB0cmFuc2Zvcm1hdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSByb3RhdGlvbiBpbiByYWRpYW5zLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VSb3RhdGlvbiggdGhldGEgKSB7CgogICAgCQkvLyBjb3VudGVyY2xvY2t3aXNlCgogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICk7CiAgICAJCWNvbnN0IHMgPSBNYXRoLnNpbiggdGhldGEgKTsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCWMsIC0gcywgMCwKICAgIAkJCXMsIGMsIDAsCiAgICAJCQkwLCAwLCAxCgogICAgCQkpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIDJEIHNjYWxlIHRyYW5zZm9ybS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGFtb3VudCB0byBzY2FsZSBpbiB0aGUgWCBheGlzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFtb3VudCB0byBzY2FsZSBpbiB0aGUgWSBheGlzLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VTY2FsZSggeCwgeSApIHsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCXgsIDAsIDAsCiAgICAJCQkwLCB5LCAwLAogICAgCQkJMCwgMCwgMQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgbWF0cml4IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4M30gbWF0cml4IC0gVGhlIG1hdHJpeCB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbWF0cml4IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKi8KICAgIAllcXVhbHMoIG1hdHJpeCApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKICAgIAkJY29uc3QgbWUgPSBtYXRyaXguZWxlbWVudHM7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgewoKICAgIAkJCWlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0cnVlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGVsZW1lbnRzIG9mIHRoZSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGFycmF5IC0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuCiAgICAJICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7CgogICAgCQkJdGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFdyaXRlcyB0aGUgZWxlbWVudHMgb2YgdGhpcyBtYXRyaXggdG8gdGhlIGdpdmVuIGFycmF5LiBJZiBubyBhcnJheSBpcyBwcm92aWRlZCwKICAgIAkgKiB0aGUgbWV0aG9kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFthcnJheT1bXV0gLSBUaGUgdGFyZ2V0IGFycmF5IGhvbGRpbmcgdGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuCiAgICAJICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuCiAgICAJICovCiAgICAJdG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKCiAgICAJCWFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTsKCiAgICAJCWFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07CgogICAgCQlhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdOwoKICAgIAkJcmV0dXJuIGFycmF5OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBtYXRyaXggd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge01hdHJpeDN9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApOwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF9tMyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTsKCiAgICBmdW5jdGlvbiBhcnJheU5lZWRzVWludDMyKCBhcnJheSApIHsKCiAgICAJLy8gYXNzdW1lcyBsYXJnZXIgdmFsdWVzIHVzdWFsbHkgb24gbGFzdAoKICAgIAlmb3IgKCBsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgLS0gaSApIHsKCiAgICAJCWlmICggYXJyYXlbIGkgXSA+PSA2NTUzNSApIHJldHVybiB0cnVlOyAvLyBhY2NvdW50IGZvciBQUklNSVRJVkVfUkVTVEFSVF9GSVhFRF9JTkRFWCwgIzI0NTY1CgogICAgCX0KCiAgICAJcmV0dXJuIGZhbHNlOwoKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMoIG5hbWUgKSB7CgogICAgCXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgbmFtZSApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVDYW52YXNFbGVtZW50KCkgewoKICAgIAljb25zdCBjYW52YXMgPSBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7CiAgICAJY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgCXJldHVybiBjYW52YXM7CgogICAgfQoKICAgIGNvbnN0IF9jYWNoZSA9IHt9OwoKICAgIGZ1bmN0aW9uIHdhcm5PbmNlKCBtZXNzYWdlICkgewoKICAgIAlpZiAoIG1lc3NhZ2UgaW4gX2NhY2hlICkgcmV0dXJuOwoKICAgIAlfY2FjaGVbIG1lc3NhZ2UgXSA9IHRydWU7CgogICAgCWNvbnNvbGUud2FybiggbWVzc2FnZSApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBwcm9iZUFzeW5jKCBnbCwgc3luYywgaW50ZXJ2YWwgKSB7CgogICAgCXJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7CgogICAgCQlmdW5jdGlvbiBwcm9iZSgpIHsKCiAgICAJCQlzd2l0Y2ggKCBnbC5jbGllbnRXYWl0U3luYyggc3luYywgZ2wuU1lOQ19GTFVTSF9DT01NQU5EU19CSVQsIDAgKSApIHsKCiAgICAJCQkJY2FzZSBnbC5XQUlUX0ZBSUxFRDoKICAgIAkJCQkJcmVqZWN0KCk7CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlIGdsLlRJTUVPVVRfRVhQSVJFRDoKICAgIAkJCQkJc2V0VGltZW91dCggcHJvYmUsIGludGVydmFsICk7CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQlkZWZhdWx0OgogICAgCQkJCQlyZXNvbHZlKCk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJc2V0VGltZW91dCggcHJvYmUsIGludGVydmFsICk7CgogICAgCX0gKTsKCiAgICB9CgogICAgZnVuY3Rpb24gdG9Ob3JtYWxpemVkUHJvamVjdGlvbk1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApIHsKCiAgICAJY29uc3QgbSA9IHByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7CgogICAgCS8vIENvbnZlcnQgWy0xLCAxXSB0byBbMCwgMV0gcHJvamVjdGlvbiBtYXRyaXgKICAgIAltWyAyIF0gPSAwLjUgKiBtWyAyIF0gKyAwLjUgKiBtWyAzIF07CiAgICAJbVsgNiBdID0gMC41ICogbVsgNiBdICsgMC41ICogbVsgNyBdOwogICAgCW1bIDEwIF0gPSAwLjUgKiBtWyAxMCBdICsgMC41ICogbVsgMTEgXTsKICAgIAltWyAxNCBdID0gMC41ICogbVsgMTQgXSArIDAuNSAqIG1bIDE1IF07CgogICAgfQoKICAgIGZ1bmN0aW9uIHRvUmV2ZXJzZWRQcm9qZWN0aW9uTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICkgewoKICAgIAljb25zdCBtID0gcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50czsKICAgIAljb25zdCBpc1BlcnNwZWN0aXZlTWF0cml4ID0gbVsgMTEgXSA9PT0gLTE7CgogICAgCS8vIFJldmVyc2UgWzAsIDFdIHByb2plY3Rpb24gbWF0cml4CiAgICAJaWYgKCBpc1BlcnNwZWN0aXZlTWF0cml4ICkgewoKICAgIAkJbVsgMTAgXSA9IC0gbVsgMTAgXSAtIDE7CiAgICAJCW1bIDE0IF0gPSAtIG1bIDE0IF07CgogICAgCX0gZWxzZSB7CgogICAgCQltWyAxMCBdID0gLSBtWyAxMCBdOwogICAgCQltWyAxNCBdID0gLSBtWyAxNCBdICsgMTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBMSU5FQVJfUkVDNzA5X1RPX1hZWiA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKS5zZXQoCiAgICAJMC40MTIzOTA4LCAwLjM1NzU4NDMsIDAuMTgwNDgwOCwKICAgIAkwLjIxMjYzOTAsIDAuNzE1MTY4NywgMC4wNzIxOTIzLAogICAgCTAuMDE5MzMwOCwgMC4xMTkxOTQ4LCAwLjk1MDUzMjIKICAgICk7CgogICAgY29uc3QgWFlaX1RPX0xJTkVBUl9SRUM3MDkgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkuc2V0KAogICAgCTMuMjQwOTY5OSwgLTEuNTM3MzgzMiwgLTAuNDk4NjEwOCwKICAgIAktMC45NjkyNDM2LCAxLjg3NTk2NzUsIDAuMDQxNTU1MSwKICAgIAkwLjA1NTYzMDEsIC0wLjIwMzk3NywgMS4wNTY5NzE1CiAgICApOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbG9yTWFuYWdlbWVudCgpIHsKCiAgICAJY29uc3QgQ29sb3JNYW5hZ2VtZW50ID0gewoKICAgIAkJZW5hYmxlZDogdHJ1ZSwKCiAgICAJCXdvcmtpbmdDb2xvclNwYWNlOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSwKCiAgICAJCS8qKgogICAgCQkgKiBJbXBsZW1lbnRhdGlvbnMgb2Ygc3VwcG9ydGVkIGNvbG9yIHNwYWNlcy4KICAgIAkJICoKICAgIAkJICogUmVxdWlyZWQ6CiAgICAJCSAqCS0gcHJpbWFyaWVzOiBjaHJvbWF0aWNpdHkgY29vcmRpbmF0ZXMgWyByeCByeSBneCBneSBieCBieSBdCiAgICAJCSAqCS0gd2hpdGVQb2ludDogcmVmZXJlbmNlIHdoaXRlIFsgeCB5IF0KICAgIAkJICoJLSB0cmFuc2ZlcjogdHJhbnNmZXIgZnVuY3Rpb24gKHByZS1kZWZpbmVkKQogICAgCQkgKgktIHRvWFlaOiBNYXRyaXgzIFJHQiB0byBYWVogdHJhbnNmb3JtCiAgICAJCSAqCS0gZnJvbVhZWjogTWF0cml4MyBYWVogdG8gUkdCIHRyYW5zZm9ybQogICAgCQkgKgktIGx1bWluYW5jZUNvZWZmaWNpZW50czogUkdCIGx1bWluYW5jZSBjb2VmZmljaWVudHMKICAgIAkJICoKICAgIAkJICogT3B0aW9uYWw6CiAgICAJCSAqICAtIG91dHB1dENvbG9yU3BhY2VDb25maWc6IHsgZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U6IENvbG9yU3BhY2UgfQogICAgCQkgKiAgLSB3b3JraW5nQ29sb3JTcGFjZUNvbmZpZzogeyB1bnBhY2tDb2xvclNwYWNlOiBDb2xvclNwYWNlIH0KICAgIAkJICoKICAgIAkJICogUmVmZXJlbmNlOgogICAgCQkgKiAtIGh0dHBzOi8vd3d3LnJ1c3NlbGxjb3R0cmVsbC5jb20vcGhvdG8vbWF0cml4Q2FsY3VsYXRvci5odG0KICAgIAkJICovCiAgICAJCXNwYWNlczoge30sCgogICAgCQljb252ZXJ0OiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkgewoKICAgIAkJCWlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSB8fCBzb3VyY2VDb2xvclNwYWNlID09PSB0YXJnZXRDb2xvclNwYWNlIHx8ICEgc291cmNlQ29sb3JTcGFjZSB8fCAhIHRhcmdldENvbG9yU3BhY2UgKSB7CgogICAgCQkJCXJldHVybiBjb2xvcjsKCiAgICAJCQl9CgogICAgCQkJaWYgKCB0aGlzLnNwYWNlc1sgc291cmNlQ29sb3JTcGFjZSBdLnRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSB7CgogICAgCQkJCWNvbG9yLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTsKICAgIAkJCQljb2xvci5nID0gU1JHQlRvTGluZWFyKCBjb2xvci5nICk7CiAgICAJCQkJY29sb3IuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHRoaXMuc3BhY2VzWyBzb3VyY2VDb2xvclNwYWNlIF0ucHJpbWFyaWVzICE9PSB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLnByaW1hcmllcyApIHsKCiAgICAJCQkJY29sb3IuYXBwbHlNYXRyaXgzKCB0aGlzLnNwYWNlc1sgc291cmNlQ29sb3JTcGFjZSBdLnRvWFlaICk7CiAgICAJCQkJY29sb3IuYXBwbHlNYXRyaXgzKCB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLmZyb21YWVogKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLnRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSB7CgogICAgCQkJCWNvbG9yLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTsKICAgIAkJCQljb2xvci5nID0gTGluZWFyVG9TUkdCKCBjb2xvci5nICk7CiAgICAJCQkJY29sb3IuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gY29sb3I7CgogICAgCQl9LAoKICAgIAkJd29ya2luZ1RvQ29sb3JTcGFjZTogZnVuY3Rpb24gKCBjb2xvciwgdGFyZ2V0Q29sb3JTcGFjZSApIHsKCiAgICAJCQlyZXR1cm4gdGhpcy5jb252ZXJ0KCBjb2xvciwgdGhpcy53b3JraW5nQ29sb3JTcGFjZSwgdGFyZ2V0Q29sb3JTcGFjZSApOwoKICAgIAkJfSwKCiAgICAJCWNvbG9yU3BhY2VUb1dvcmtpbmc6IGZ1bmN0aW9uICggY29sb3IsIHNvdXJjZUNvbG9yU3BhY2UgKSB7CgogICAgCQkJcmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHNvdXJjZUNvbG9yU3BhY2UsIHRoaXMud29ya2luZ0NvbG9yU3BhY2UgKTsKCiAgICAJCX0sCgogICAgCQlnZXRQcmltYXJpZXM6IGZ1bmN0aW9uICggY29sb3JTcGFjZSApIHsKCiAgICAJCQlyZXR1cm4gdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS5wcmltYXJpZXM7CgogICAgCQl9LAoKICAgIAkJZ2V0VHJhbnNmZXI6IGZ1bmN0aW9uICggY29sb3JTcGFjZSApIHsKCiAgICAJCQlpZiAoIGNvbG9yU3BhY2UgPT09IE5vQ29sb3JTcGFjZSApIHJldHVybiBMaW5lYXJUcmFuc2ZlcjsKCiAgICAJCQlyZXR1cm4gdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS50cmFuc2ZlcjsKCiAgICAJCX0sCgogICAgCQlnZXRMdW1pbmFuY2VDb2VmZmljaWVudHM6IGZ1bmN0aW9uICggdGFyZ2V0LCBjb2xvclNwYWNlID0gdGhpcy53b3JraW5nQ29sb3JTcGFjZSApIHsKCiAgICAJCQlyZXR1cm4gdGFyZ2V0LmZyb21BcnJheSggdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS5sdW1pbmFuY2VDb2VmZmljaWVudHMgKTsKCiAgICAJCX0sCgogICAgCQlkZWZpbmU6IGZ1bmN0aW9uICggY29sb3JTcGFjZXMgKSB7CgogICAgCQkJT2JqZWN0LmFzc2lnbiggdGhpcy5zcGFjZXMsIGNvbG9yU3BhY2VzICk7CgogICAgCQl9LAoKICAgIAkJLy8gSW50ZXJuYWwgQVBJcwoKICAgIAkJX2dldE1hdHJpeDogZnVuY3Rpb24gKCB0YXJnZXRNYXRyaXgsIHNvdXJjZUNvbG9yU3BhY2UsIHRhcmdldENvbG9yU3BhY2UgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldE1hdHJpeAogICAgCQkJCS5jb3B5KCB0aGlzLnNwYWNlc1sgc291cmNlQ29sb3JTcGFjZSBdLnRvWFlaICkKICAgIAkJCQkubXVsdGlwbHkoIHRoaXMuc3BhY2VzWyB0YXJnZXRDb2xvclNwYWNlIF0uZnJvbVhZWiApOwoKICAgIAkJfSwKCiAgICAJCV9nZXREcmF3aW5nQnVmZmVyQ29sb3JTcGFjZTogZnVuY3Rpb24gKCBjb2xvclNwYWNlICkgewoKICAgIAkJCXJldHVybiB0aGlzLnNwYWNlc1sgY29sb3JTcGFjZSBdLm91dHB1dENvbG9yU3BhY2VDb25maWcuZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U7CgogICAgCQl9LAoKICAgIAkJX2dldFVucGFja0NvbG9yU3BhY2U6IGZ1bmN0aW9uICggY29sb3JTcGFjZSA9IHRoaXMud29ya2luZ0NvbG9yU3BhY2UgKSB7CgogICAgCQkJcmV0dXJuIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ud29ya2luZ0NvbG9yU3BhY2VDb25maWcudW5wYWNrQ29sb3JTcGFjZTsKCiAgICAJCX0sCgogICAgCQkvLyBEZXByZWNhdGVkCgogICAgCQlmcm9tV29ya2luZ0NvbG9yU3BhY2U6IGZ1bmN0aW9uICggY29sb3IsIHRhcmdldENvbG9yU3BhY2UgKSB7CgogICAgCQkJd2Fybk9uY2UoICdUSFJFRS5Db2xvck1hbmFnZW1lbnQ6IC5mcm9tV29ya2luZ0NvbG9yU3BhY2UoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC53b3JraW5nVG9Db2xvclNwYWNlKCkuJyApOyAvLyBAZGVwcmVjYXRlZCwgcjE3NwoKICAgIAkJCXJldHVybiBDb2xvck1hbmFnZW1lbnQud29ya2luZ1RvQ29sb3JTcGFjZSggY29sb3IsIHRhcmdldENvbG9yU3BhY2UgKTsKCiAgICAJCX0sCgogICAgCQl0b1dvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlICkgewoKICAgIAkJCXdhcm5PbmNlKCAnVEhSRUUuQ29sb3JNYW5hZ2VtZW50OiAudG9Xb3JraW5nQ29sb3JTcGFjZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvbG9yU3BhY2VUb1dvcmtpbmcoKS4nICk7IC8vIEBkZXByZWNhdGVkLCByMTc3CgogICAgCQkJcmV0dXJuIENvbG9yTWFuYWdlbWVudC5jb2xvclNwYWNlVG9Xb3JraW5nKCBjb2xvciwgc291cmNlQ29sb3JTcGFjZSApOwoKICAgIAkJfSwKCiAgICAJfTsKCiAgICAJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgCSAqIHNSR0IgZGVmaW5pdGlvbnMKICAgIAkgKi8KCiAgICAJY29uc3QgUkVDNzA5X1BSSU1BUklFUyA9IFsgMC42NDAsIDAuMzMwLCAwLjMwMCwgMC42MDAsIDAuMTUwLCAwLjA2MCBdOwogICAgCWNvbnN0IFJFQzcwOV9MVU1JTkFOQ0VfQ09FRkZJQ0lFTlRTID0gWyAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyIF07CiAgICAJY29uc3QgRDY1ID0gWyAwLjMxMjcsIDAuMzI5MCBdOwoKICAgIAlDb2xvck1hbmFnZW1lbnQuZGVmaW5lKCB7CgogICAgCQlbIExpbmVhclNSR0JDb2xvclNwYWNlIF06IHsKICAgIAkJCXByaW1hcmllczogUkVDNzA5X1BSSU1BUklFUywKICAgIAkJCXdoaXRlUG9pbnQ6IEQ2NSwKICAgIAkJCXRyYW5zZmVyOiBMaW5lYXJUcmFuc2ZlciwKICAgIAkJCXRvWFlaOiBMSU5FQVJfUkVDNzA5X1RPX1hZWiwKICAgIAkJCWZyb21YWVo6IFhZWl9UT19MSU5FQVJfUkVDNzA5LAogICAgCQkJbHVtaW5hbmNlQ29lZmZpY2llbnRzOiBSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUywKICAgIAkJCXdvcmtpbmdDb2xvclNwYWNlQ29uZmlnOiB7IHVucGFja0NvbG9yU3BhY2U6IFNSR0JDb2xvclNwYWNlIH0sCiAgICAJCQlvdXRwdXRDb2xvclNwYWNlQ29uZmlnOiB7IGRyYXdpbmdCdWZmZXJDb2xvclNwYWNlOiBTUkdCQ29sb3JTcGFjZSB9CiAgICAJCX0sCgogICAgCQlbIFNSR0JDb2xvclNwYWNlIF06IHsKICAgIAkJCXByaW1hcmllczogUkVDNzA5X1BSSU1BUklFUywKICAgIAkJCXdoaXRlUG9pbnQ6IEQ2NSwKICAgIAkJCXRyYW5zZmVyOiBTUkdCVHJhbnNmZXIsCiAgICAJCQl0b1hZWjogTElORUFSX1JFQzcwOV9UT19YWVosCiAgICAJCQlmcm9tWFlaOiBYWVpfVE9fTElORUFSX1JFQzcwOSwKICAgIAkJCWx1bWluYW5jZUNvZWZmaWNpZW50czogUkVDNzA5X0xVTUlOQU5DRV9DT0VGRklDSUVOVFMsCiAgICAJCQlvdXRwdXRDb2xvclNwYWNlQ29uZmlnOiB7IGRyYXdpbmdCdWZmZXJDb2xvclNwYWNlOiBTUkdCQ29sb3JTcGFjZSB9CiAgICAJCX0sCgogICAgCX0gKTsKCiAgICAJcmV0dXJuIENvbG9yTWFuYWdlbWVudDsKCiAgICB9CgogICAgY29uc3QgQ29sb3JNYW5hZ2VtZW50ID0gLypAX19QVVJFX18qLyBjcmVhdGVDb2xvck1hbmFnZW1lbnQoKTsKCiAgICBmdW5jdGlvbiBTUkdCVG9MaW5lYXIoIGMgKSB7CgogICAgCXJldHVybiAoIGMgPCAwLjA0MDQ1ICkgPyBjICogMC4wNzczOTkzODA4IDogTWF0aC5wb3coIGMgKiAwLjk0Nzg2NzI5ODYgKyAwLjA1MjEzMjcwMTQsIDIuNCApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7CgogICAgCXJldHVybiAoIGMgPCAwLjAwMzEzMDggKSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKCBNYXRoLnBvdyggYywgMC40MTY2NiApICkgLSAwLjA1NTsKCiAgICB9CgogICAgbGV0IF9jYW52YXM7CgogICAgLyoqCiAgICAgKiBBIGNsYXNzIGNvbnRhaW5pbmcgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGltYWdlcy4KICAgICAqCiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yCiAgICAgKi8KICAgIGNsYXNzIEltYWdlVXRpbHMgewoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgZGF0YSBVUkkgY29udGFpbmluZyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBpbWFnZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnQpfSBpbWFnZSAtIFRoZSBpbWFnZSBvYmplY3QuCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPSdpbWFnZS9wbmcnXSAtIEluZGljYXRlcyB0aGUgaW1hZ2UgZm9ybWF0LgogICAgCSAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRhdGEgVVJJLgogICAgCSAqLwogICAgCXN0YXRpYyBnZXREYXRhVVJMKCBpbWFnZSwgdHlwZSA9ICdpbWFnZS9wbmcnICkgewoKICAgIAkJaWYgKCAvXmRhdGE6L2kudGVzdCggaW1hZ2Uuc3JjICkgKSB7CgogICAgCQkJcmV0dXJuIGltYWdlLnNyYzsKCiAgICAJCX0KCiAgICAJCWlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09PSAndW5kZWZpbmVkJyApIHsKCiAgICAJCQlyZXR1cm4gaW1hZ2Uuc3JjOwoKICAgIAkJfQoKICAgIAkJbGV0IGNhbnZhczsKCiAgICAJCWlmICggaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHsKCiAgICAJCQljYW52YXMgPSBpbWFnZTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApOwoKICAgIAkJCV9jYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDsKICAgIAkJCV9jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0OwoKICAgIAkJCWNvbnN0IGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoICcyZCcgKTsKCiAgICAJCQlpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkgewoKICAgIAkJCQljb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2UsIDAsIDAgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCiAgICAJCQl9CgogICAgCQkJY2FudmFzID0gX2NhbnZhczsKCiAgICAJCX0KCiAgICAJCXJldHVybiBjYW52YXMudG9EYXRhVVJMKCB0eXBlICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29udmVydHMgdGhlIGdpdmVuIHNSR0IgaW1hZ2UgZGF0YSB0byBsaW5lYXIgY29sb3Igc3BhY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0geyhIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fEltYWdlQml0bWFwfE9iamVjdCl9IGltYWdlIC0gVGhlIGltYWdlIG9iamVjdC4KICAgIAkgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudHxPYmplY3R9IFRoZSBjb252ZXJ0ZWQgaW1hZ2UuCiAgICAJICovCiAgICAJc3RhdGljIHNSR0JUb0xpbmVhciggaW1hZ2UgKSB7CgogICAgCQlpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8CiAgICAJCQkoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8CiAgICAJCQkoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkgewoKICAgIAkJCWNvbnN0IGNhbnZhcyA9IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTsKCiAgICAJCQljYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDsKICAgIAkJCWNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7CgogICAgCQkJY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7CiAgICAJCQljb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCiAgICAJCQljb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSggMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApOwogICAgCQkJY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhOwoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQlkYXRhWyBpIF0gPSBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSAvIDI1NSApICogMjU1OwoKICAgIAkJCX0KCiAgICAJCQljb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2VEYXRhLCAwLCAwICk7CgogICAgCQkJcmV0dXJuIGNhbnZhczsKCiAgICAJCX0gZWxzZSBpZiAoIGltYWdlLmRhdGEgKSB7CgogICAgCQkJY29uc3QgZGF0YSA9IGltYWdlLmRhdGEuc2xpY2UoIDAgKTsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJaWYgKCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgKSB7CgogICAgCQkJCQlkYXRhWyBpIF0gPSBNYXRoLmZsb29yKCBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSAvIDI1NSApICogMjU1ICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQkvLyBhc3N1bWluZyBmbG9hdAoKICAgIAkJCQkJZGF0YVsgaSBdID0gU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gewogICAgCQkJCWRhdGE6IGRhdGEsCiAgICAJCQkJd2lkdGg6IGltYWdlLndpZHRoLAogICAgCQkJCWhlaWdodDogaW1hZ2UuaGVpZ2h0CiAgICAJCQl9OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLnNSR0JUb0xpbmVhcigpOiBVbnN1cHBvcnRlZCBpbWFnZSB0eXBlLiBObyBjb2xvciBzcGFjZSBjb252ZXJzaW9uIGFwcGxpZWQuJyApOwogICAgCQkJcmV0dXJuIGltYWdlOwoKICAgIAkJfQoKICAgIAl9CgogICAgfQoKICAgIGxldCBfc291cmNlSWQgPSAwOwoKICAgIC8qKgogICAgICogUmVwcmVzZW50cyB0aGUgZGF0YSBzb3VyY2Ugb2YgYSB0ZXh0dXJlLgogICAgICoKICAgICAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBjbGFzcyBpcyB0byBkZWNvdXBsZSB0aGUgZGF0YSBkZWZpbml0aW9uIGZyb20gdGhlIHRleHR1cmUKICAgICAqIGRlZmluaXRpb24gc28gdGhlIHNhbWUgZGF0YSBjYW4gYmUgdXNlZCB3aXRoIG11bHRpcGxlIHRleHR1cmUgaW5zdGFuY2VzLgogICAgICovCiAgICBjbGFzcyBTb3VyY2UgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IHZpZGVvIHRleHR1cmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge2FueX0gW2RhdGE9bnVsbF0gLSBUaGUgZGF0YSBkZWZpbml0aW9uIG9mIGEgdGV4dHVyZS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggZGF0YSA9IG51bGwgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc1NvdXJjZSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhlIElEIG9mIHRoZSBzb3VyY2UuCiAgICAJCSAqCiAgICAJCSAqIEBuYW1lIFNvdXJjZSNpZAogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX3NvdXJjZUlkICsrIH0gKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgVVVJRCBvZiB0aGUgc291cmNlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCXRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBkYXRhIGRlZmluaXRpb24gb2YgYSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7YW55fQogICAgCQkgKi8KICAgIAkJdGhpcy5kYXRhID0gZGF0YTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcmVsZXZhbnQgd2hlbiB7QGxpbmsgU291cmNlI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgIGFuZAogICAgCQkgKiBwcm92aWRlcyBtb3JlIGNvbnRyb2wgb24gaG93IHRleHR1cmUgZGF0YSBzaG91bGQgYmUgcHJvY2Vzc2VkLiBXaGVuIGBkYXRhUmVhZHlgIGlzIHNldAogICAgCQkgKiB0byBgZmFsc2VgLCB0aGUgZW5naW5lIHBlcmZvcm1zIHRoZSBtZW1vcnkgYWxsb2NhdGlvbiAoaWYgbmVjZXNzYXJ5KSBidXQgZG9lcyBub3QgdHJhbnNmZXIKICAgIAkJICogdGhlIGRhdGEgaW50byB0aGUgR1BVIG1lbW9yeS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuZGF0YVJlYWR5ID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIHN0YXJ0cyBhdCBgMGAgYW5kIGNvdW50cyBob3cgbWFueSB0aW1lcyB7QGxpbmsgU291cmNlI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy52ZXJzaW9uID0gMDsKCiAgICAJfQoKICAgIAlnZXRTaXplKCB0YXJnZXQgKSB7CgogICAgCQljb25zdCBkYXRhID0gdGhpcy5kYXRhOwoKICAgIAkJaWYgKCBkYXRhIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCApIHsKCiAgICAJCQl0YXJnZXQuc2V0KCBkYXRhLnZpZGVvV2lkdGgsIGRhdGEudmlkZW9IZWlnaHQgKTsKCiAgICAJCX0gZWxzZSBpZiAoIGRhdGEgIT09IG51bGwgKSB7CgogICAgCQkJdGFyZ2V0LnNldCggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGggfHwgMCApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0YXJnZXQuc2V0KCAwLCAwLCAwICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGFyZ2V0OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFdoZW4gdGhlIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAsIHRoZSBlbmdpbmUgYWxsb2NhdGVzIHRoZSBtZW1vcnkKICAgIAkgKiBmb3IgdGhlIHRleHR1cmUgKGlmIG5lY2Vzc2FyeSkgYW5kIHRyaWdnZXJzIHRoZSBhY3R1YWwgdGV4dHVyZSB1cGxvYWQKICAgIAkgKiB0byB0aGUgR1BVIG5leHQgdGltZSB0aGUgc291cmNlIGlzIHVzZWQuCiAgICAJICoKICAgIAkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkgKiBAZGVmYXVsdCBmYWxzZQogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICAgIAkgKi8KICAgIAlzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkgewoKICAgIAkJaWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKzsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXJpYWxpemVzIHRoZSBzb3VyY2UgaW50byBKU09OLgogICAgCSAqCiAgICAJICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgc291cmNlLgogICAgCSAqIEBzZWUge0BsaW5rIE9iamVjdExvYWRlciNwYXJzZX0KICAgIAkgKi8KICAgIAl0b0pTT04oIG1ldGEgKSB7CgogICAgCQljb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTsKCiAgICAJCWlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS5pbWFnZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJcmV0dXJuIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IG91dHB1dCA9IHsKICAgIAkJCXV1aWQ6IHRoaXMudXVpZCwKICAgIAkJCXVybDogJycKICAgIAkJfTsKCiAgICAJCWNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7CgogICAgCQlpZiAoIGRhdGEgIT09IG51bGwgKSB7CgogICAgCQkJbGV0IHVybDsKCiAgICAJCQlpZiAoIEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHsKCiAgICAJCQkJLy8gY3ViZSB0ZXh0dXJlCgogICAgCQkJCXVybCA9IFtdOwoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQlpZiAoIGRhdGFbIGkgXS5pc0RhdGFUZXh0dXJlICkgewoKICAgIAkJCQkJCXVybC5wdXNoKCBzZXJpYWxpemVJbWFnZSggZGF0YVsgaSBdLmltYWdlICkgKTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJdXJsLnB1c2goIHNlcmlhbGl6ZUltYWdlKCBkYXRhWyBpIF0gKSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJLy8gdGV4dHVyZQoKICAgIAkJCQl1cmwgPSBzZXJpYWxpemVJbWFnZSggZGF0YSApOwoKICAgIAkJCX0KCiAgICAJCQlvdXRwdXQudXJsID0gdXJsOwoKICAgIAkJfQoKICAgIAkJaWYgKCAhIGlzUm9vdE9iamVjdCApIHsKCiAgICAJCQltZXRhLmltYWdlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7CgogICAgCQl9CgogICAgCQlyZXR1cm4gb3V0cHV0OwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZUltYWdlKCBpbWFnZSApIHsKCiAgICAJaWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fAogICAgCQkoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8CiAgICAJCSggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7CgogICAgCQkvLyBkZWZhdWx0IGltYWdlcwoKICAgIAkJcmV0dXJuIEltYWdlVXRpbHMuZ2V0RGF0YVVSTCggaW1hZ2UgKTsKCiAgICAJfSBlbHNlIHsKCiAgICAJCWlmICggaW1hZ2UuZGF0YSApIHsKCiAgICAJCQkvLyBpbWFnZXMgb2YgRGF0YVRleHR1cmUKCiAgICAJCQlyZXR1cm4gewogICAgCQkJCWRhdGE6IEFycmF5LmZyb20oIGltYWdlLmRhdGEgKSwKICAgIAkJCQl3aWR0aDogaW1hZ2Uud2lkdGgsCiAgICAJCQkJaGVpZ2h0OiBpbWFnZS5oZWlnaHQsCiAgICAJCQkJdHlwZTogaW1hZ2UuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lCiAgICAJCQl9OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5UZXh0dXJlOiBVbmFibGUgdG8gc2VyaWFsaXplIFRleHR1cmUuJyApOwogICAgCQkJcmV0dXJuIHt9OwoKICAgIAkJfQoKICAgIAl9CgogICAgfQoKICAgIGxldCBfdGV4dHVyZUlkID0gMDsKCiAgICBjb25zdCBfdGVtcFZlYzMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgLyoqCiAgICAgKiBCYXNlIGNsYXNzIGZvciBhbGwgdGV4dHVyZXMuCiAgICAgKgogICAgICogTm90ZTogQWZ0ZXIgdGhlIGluaXRpYWwgdXNlIG9mIGEgdGV4dHVyZSwgaXRzIGRpbWVuc2lvbnMsIGZvcm1hdCwgYW5kIHR5cGUKICAgICAqIGNhbm5vdCBiZSBjaGFuZ2VkLiBJbnN0ZWFkLCBjYWxsIHtAbGluayBUZXh0dXJlI2Rpc3Bvc2V9IG9uIHRoZSB0ZXh0dXJlIGFuZCBpbnN0YW50aWF0ZSBhIG5ldyBvbmUuCiAgICAgKgogICAgICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlcgogICAgICovCiAgICBjbGFzcyBUZXh0dXJlIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyB0ZXh0dXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHs/T2JqZWN0fSBbaW1hZ2U9VGV4dHVyZS5ERUZBVUxUX0lNQUdFXSAtIFRoZSBpbWFnZSBob2xkaW5nIHRoZSB0ZXh0dXJlIGRhdGEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttYXBwaW5nPVRleHR1cmUuREVGQVVMVF9NQVBQSU5HXSAtIFRoZSB0ZXh0dXJlIG1hcHBpbmcuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwUz1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwUyB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBUPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBUIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbWFnRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWFnIGZpbHRlciB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW21pbkZpbHRlcj1MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJdIC0gVGhlIG1pbiBmaWx0ZXIgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2FuaXNvdHJvcHk9VGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFldIC0gVGhlIGFuaXNvdHJvcHkgdmFsdWUuCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPU5vQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGltYWdlID0gVGV4dHVyZS5ERUZBVUxUX0lNQUdFLCBtYXBwaW5nID0gVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcsIHdyYXBTID0gQ2xhbXBUb0VkZ2VXcmFwcGluZywgd3JhcFQgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCBtYWdGaWx0ZXIgPSBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgZm9ybWF0ID0gUkdCQUZvcm1hdCwgdHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGUsIGFuaXNvdHJvcHkgPSBUZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWSwgY29sb3JTcGFjZSA9IE5vQ29sb3JTcGFjZSApIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc1RleHR1cmUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBJRCBvZiB0aGUgdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogQG5hbWUgVGV4dHVyZSNpZAogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX3RleHR1cmVJZCArKyB9ICk7CgogICAgCQkvKioKICAgIAkJICogVGhlIFVVSUQgb2YgdGhlIG1hdGVyaWFsLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCXRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBuYW1lIG9mIHRoZSBtYXRlcmlhbC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge3N0cmluZ30KICAgIAkJICovCiAgICAJCXRoaXMubmFtZSA9ICcnOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBkYXRhIGRlZmluaXRpb24gb2YgYSB0ZXh0dXJlLiBBIHJlZmVyZW5jZSB0byB0aGUgZGF0YSBzb3VyY2UgY2FuIGJlCiAgICAJCSAqIHNoYXJlZCBhY3Jvc3MgdGV4dHVyZXMuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIGluIGNvbnRleHQgb2Ygc3ByaXRlc2hlZXRzCiAgICAJCSAqIHdoZXJlIG11bHRpcGxlIHRleHR1cmVzIHJlbmRlciB0aGUgc2FtZSBkYXRhIGJ1dCB3aXRoIGRpZmZlcmVudCB0ZXh0dXJlCiAgICAJCSAqIHRyYW5zZm9ybWF0aW9ucy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1NvdXJjZX0KICAgIAkJICovCiAgICAJCXRoaXMuc291cmNlID0gbmV3IFNvdXJjZSggaW1hZ2UgKTsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBhcnJheSBob2xkaW5nIHVzZXItZGVmaW5lZCBtaXBtYXBzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn0KICAgIAkJICovCiAgICAJCXRoaXMubWlwbWFwcyA9IFtdOwoKICAgIAkJLyoqCiAgICAJCSAqIEhvdyB0aGUgdGV4dHVyZSBpcyBhcHBsaWVkIHRvIHRoZSBvYmplY3QuIFRoZSB2YWx1ZSBgVVZNYXBwaW5nYAogICAgCQkgKiBpcyB0aGUgZGVmYXVsdCwgd2hlcmUgdGV4dHVyZSBvciB1diBjb29yZGluYXRlcyBhcmUgdXNlZCB0byBhcHBseSB0aGUgbWFwLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KFVWTWFwcGluZ3xDdWJlUmVmbGVjdGlvbk1hcHBpbmd8Q3ViZVJlZnJhY3Rpb25NYXBwaW5nfEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nfEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nfEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nKX0KICAgIAkJICogQGRlZmF1bHQgVVZNYXBwaW5nCiAgICAJCSovCiAgICAJCXRoaXMubWFwcGluZyA9IG1hcHBpbmc7CgogICAgCQkvKioKICAgIAkJICogTGV0cyB5b3Ugc2VsZWN0IHRoZSB1diBhdHRyaWJ1dGUgdG8gbWFwIHRoZSB0ZXh0dXJlIHRvLiBgMGAgZm9yIGB1dmAsCiAgICAJCSAqIGAxYCBmb3IgYHV2MWAsIGAyYCBmb3IgYHV2MmAgYW5kIGAzYCBmb3IgYHV2M2AuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuY2hhbm5lbCA9IDA7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBkZWZpbmVzIGhvdyB0aGUgdGV4dHVyZSBpcyB3cmFwcGVkIGhvcml6b250YWxseSBhbmQgY29ycmVzcG9uZHMgdG8KICAgIAkJICogKlUqIGluIFVWIG1hcHBpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoUmVwZWF0V3JhcHBpbmd8Q2xhbXBUb0VkZ2VXcmFwcGluZ3xNaXJyb3JlZFJlcGVhdFdyYXBwaW5nKX0KICAgIAkJICogQGRlZmF1bHQgQ2xhbXBUb0VkZ2VXcmFwcGluZwogICAgCQkgKi8KICAgIAkJdGhpcy53cmFwUyA9IHdyYXBTOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZGVmaW5lcyBob3cgdGhlIHRleHR1cmUgaXMgd3JhcHBlZCBob3Jpem9udGFsbHkgYW5kIGNvcnJlc3BvbmRzIHRvCiAgICAJCSAqICpWKiBpbiBVViBtYXBwaW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KFJlcGVhdFdyYXBwaW5nfENsYW1wVG9FZGdlV3JhcHBpbmd8TWlycm9yZWRSZXBlYXRXcmFwcGluZyl9CiAgICAJCSAqIEBkZWZhdWx0IENsYW1wVG9FZGdlV3JhcHBpbmcKICAgIAkJICovCiAgICAJCXRoaXMud3JhcFQgPSB3cmFwVDsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIG1vcmUgdGhhbiBvbmUgcGl4ZWwuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9CiAgICAJCSAqIEBkZWZhdWx0IExpbmVhckZpbHRlcgogICAgCQkgKi8KICAgIAkJdGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7CgogICAgCQkvKioKICAgIAkJICogSG93IHRoZSB0ZXh0dXJlIGlzIHNhbXBsZWQgd2hlbiBhIHRleGVsIGNvdmVycyBsZXNzIHRoYW4gb25lIHBpeGVsLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcnxMaW5lYXJGaWx0ZXJ8TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcnxMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIpfQogICAgCQkgKiBAZGVmYXVsdCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIKICAgIAkJICovCiAgICAJCXRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBudW1iZXIgb2Ygc2FtcGxlcyB0YWtlbiBhbG9uZyB0aGUgYXhpcyB0aHJvdWdoIHRoZSBwaXhlbCB0aGF0IGhhcyB0aGUKICAgIAkJICogaGlnaGVzdCBkZW5zaXR5IG9mIHRleGVscy4gQnkgZGVmYXVsdCwgdGhpcyB2YWx1ZSBpcyBgMWAuIEEgaGlnaGVyIHZhbHVlCiAgICAJCSAqIGdpdmVzIGEgbGVzcyBibHVycnkgcmVzdWx0IHRoYW4gYSBiYXNpYyBtaXBtYXAsIGF0IHRoZSBjb3N0IG9mIG1vcmUKICAgIAkJICogdGV4dHVyZSBzYW1wbGVzIGJlaW5nIHVzZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuYW5pc290cm9weSA9IGFuaXNvdHJvcHk7CgogICAgCQkvKioKICAgIAkJICogVGhlIGZvcm1hdCBvZiB0aGUgdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgUkdCQUZvcm1hdAogICAgCQkgKi8KICAgIAkJdGhpcy5mb3JtYXQgPSBmb3JtYXQ7CgogICAgCQkvKioKICAgIAkJICogVGhlIGRlZmF1bHQgaW50ZXJuYWwgZm9ybWF0IGlzIGRlcml2ZWQgZnJvbSB7QGxpbmsgVGV4dHVyZSNmb3JtYXR9IGFuZCB7QGxpbmsgVGV4dHVyZSN0eXBlfSBhbmQKICAgIAkJICogZGVmaW5lcyBob3cgdGhlIHRleHR1cmUgZGF0YSBpcyBnb2luZyB0byBiZSBzdG9yZWQgb24gdGhlIEdQVS4KICAgIAkJICoKICAgIAkJICogVGhpcyBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0IGZvcm1hdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9zdHJpbmd9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuaW50ZXJuYWxGb3JtYXQgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBkYXRhIHR5cGUgb2YgdGhlIHRleHR1cmUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IFVuc2lnbmVkQnl0ZVR5cGUKICAgIAkJICovCiAgICAJCXRoaXMudHlwZSA9IHR5cGU7CgogICAgCQkvKioKICAgIAkJICogSG93IG11Y2ggYSBzaW5nbGUgcmVwZXRpdGlvbiBvZiB0aGUgdGV4dHVyZSBpcyBvZmZzZXQgZnJvbSB0aGUgYmVnaW5uaW5nLAogICAgCQkgKiBpbiBlYWNoIGRpcmVjdGlvbiBVIGFuZCBWLiBUeXBpY2FsIHJhbmdlIGlzIGAwLjBgIHRvIGAxLjBgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yMn0KICAgIAkJICogQGRlZmF1bHQgKDAsMCkKICAgIAkJICovCiAgICAJCXRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgbWFueSB0aW1lcyB0aGUgdGV4dHVyZSBpcyByZXBlYXRlZCBhY3Jvc3MgdGhlIHN1cmZhY2UsIGluIGVhY2gKICAgIAkJICogZGlyZWN0aW9uIFUgYW5kIFYuIElmIHJlcGVhdCBpcyBzZXQgZ3JlYXRlciB0aGFuIGAxYCBpbiBlaXRoZXIgZGlyZWN0aW9uLAogICAgCQkgKiB0aGUgY29ycmVzcG9uZGluZyB3cmFwIHBhcmFtZXRlciBzaG91bGQgYWxzbyBiZSBzZXQgdG8gYFJlcGVhdFdyYXBwaW5nYAogICAgCQkgKiBvciBgTWlycm9yZWRSZXBlYXRXcmFwcGluZ2AgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCB0aWxpbmcgZWZmZWN0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yMn0KICAgIAkJICogQGRlZmF1bHQgKDEsMSkKICAgIAkJICovCiAgICAJCXRoaXMucmVwZWF0ID0gbmV3IFZlY3RvcjIoIDEsIDEgKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgcG9pbnQgYXJvdW5kIHdoaWNoIHJvdGF0aW9uIG9jY3Vycy4gQSB2YWx1ZSBvZiBgKDAuNSwgMC41KWAgY29ycmVzcG9uZHMKICAgIAkJICogdG8gdGhlIGNlbnRlciBvZiB0aGUgdGV4dHVyZS4gRGVmYXVsdCBpcyBgKDAsIDApYCwgdGhlIGxvd2VyIGxlZnQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtWZWN0b3IyfQogICAgCQkgKiBAZGVmYXVsdCAoMCwwKQogICAgCQkgKi8KICAgIAkJdGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMCwgMCApOwoKICAgIAkJLyoqCiAgICAJCSAqIEhvdyBtdWNoIHRoZSB0ZXh0dXJlIGlzIHJvdGF0ZWQgYXJvdW5kIHRoZSBjZW50ZXIgcG9pbnQsIGluIHJhZGlhbnMuCiAgICAJCSAqIFBvc2l0aXZlIHZhbHVlcyBhcmUgY291bnRlci1jbG9ja3dpc2UuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMucm90YXRpb24gPSAwOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgdG8gdXBkYXRlIHRoZSB0ZXh0dXJlJ3MgdXYtdHJhbnNmb3JtYXRpb24ge0BsaW5rIFRleHR1cmUjbWF0cml4fQogICAgCQkgKiBmcm9tIHRoZSBwcm9wZXJ0aWVzIHtAbGluayBUZXh0dXJlI29mZnNldH0sIHtAbGluayBUZXh0dXJlI3JlcGVhdH0sCiAgICAJCSAqIHtAbGluayBUZXh0dXJlI3JvdGF0aW9ufSwgYW5kIHtAbGluayBUZXh0dXJlI2NlbnRlcn0uCiAgICAJCSAqCiAgICAJCSAqIFNldCB0aGlzIHRvIGBmYWxzZWAgaWYgeW91IGFyZSBzcGVjaWZ5aW5nIHRoZSB1di10cmFuc2Zvcm0gbWF0cml4IGRpcmVjdGx5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgdXYtdHJhbnNmb3JtYXRpb24gbWF0cml4IG9mIHRoZSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7TWF0cml4M30KICAgIAkJICovCiAgICAJCXRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDMoKTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBTZXQgdGhpcyB0byBgZmFsc2VgIGlmIHlvdSBhcmUgY3JlYXRpbmcgbWlwbWFwcyBtYW51YWxseS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgYWxwaGEgY2hhbm5lbCwgaWYgcHJlc2VudCwgaXMgbXVsdGlwbGllZCBpbnRvIHRoZQogICAgCQkgKiBjb2xvciBjaGFubmVscyB3aGVuIHRoZSB0ZXh0dXJlIGlzIHVwbG9hZGVkIHRvIHRoZSBHUFUuCiAgICAJCSAqCiAgICAJCSAqIE5vdGUgdGhhdCB0aGlzIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgd2hlbiB1c2luZyBgSW1hZ2VCaXRtYXBgLiBZb3UgbmVlZCB0bwogICAgCQkgKiBjb25maWd1cmUgcHJlbXVsdGlwbHkgYWxwaGEgb24gYml0bWFwIGNyZWF0aW9uIGluc3RlYWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuCiAgICAJCSAqIHVwbG9hZGVkIHRvIHRoZSBHUFUuCiAgICAJCSAqCiAgICAJCSAqIE5vdGUgdGhhdCB0aGlzIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgd2hlbiB1c2luZyBgSW1hZ2VCaXRtYXBgLiBZb3UgbmVlZCB0bwogICAgCQkgKiBjb25maWd1cmUgdGhlIGZsaXAgb24gYml0bWFwIGNyZWF0aW9uIGluc3RlYWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmZsaXBZID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBTcGVjaWZpZXMgdGhlIGFsaWdubWVudCByZXF1aXJlbWVudHMgZm9yIHRoZSBzdGFydCBvZiBlYWNoIHBpeGVsIHJvdyBpbiBtZW1vcnkuCiAgICAJCSAqIFRoZSBhbGxvd2FibGUgdmFsdWVzIGFyZSBgMWAgKGJ5dGUtYWxpZ25tZW50KSwgYDJgIChyb3dzIGFsaWduZWQgdG8gZXZlbi1udW1iZXJlZCBieXRlcyksCiAgICAJCSAqIGA0YCAod29yZC1hbGlnbm1lbnQpLCBhbmQgYDhgIChyb3dzIHN0YXJ0IG9uIGRvdWJsZS13b3JkIGJvdW5kYXJpZXMpLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCA0CiAgICAJCSAqLwogICAgCQl0aGlzLnVucGFja0FsaWdubWVudCA9IDQ7CS8vIHZhbGlkIHZhbHVlczogMSwgMiwgNCwgOCAoc2VlIGh0dHA6Ly93d3cua2hyb25vcy5vcmcvb3BlbmdsZXMvc2RrL2RvY3MvbWFuL3hodG1sL2dsUGl4ZWxTdG9yZWkueG1sKQoKICAgIAkJLyoqCiAgICAJCSAqIFRleHR1cmVzIGNvbnRhaW5pbmcgY29sb3IgZGF0YSBzaG91bGQgYmUgYW5ub3RhdGVkIHdpdGggYFNSR0JDb2xvclNwYWNlYCBvciBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKiBAZGVmYXVsdCBOb0NvbG9yU3BhY2UKICAgIAkJICovCiAgICAJCXRoaXMuY29sb3JTcGFjZSA9IGNvbG9yU3BhY2U7CgogICAgCQkvKioKICAgIAkJICogQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgY3VzdG9tIGRhdGEgYWJvdXQgdGhlIHRleHR1cmUuIEl0CiAgICAJCSAqIHNob3VsZCBub3QgaG9sZCByZWZlcmVuY2VzIHRvIGZ1bmN0aW9ucyBhcyB0aGVzZSB3aWxsIG5vdCBiZSBjbG9uZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLnVzZXJEYXRhID0ge307CgogICAgCQkvKioKICAgIAkJICogVGhpcyBjYW4gYmUgdXNlZCB0byBvbmx5IHVwZGF0ZSBhIHN1YnJlZ2lvbiBvciBzcGVjaWZpYyByb3dzIG9mIHRoZSB0ZXh0dXJlIChmb3IgZXhhbXBsZSwganVzdCB0aGUKICAgIAkJICogZmlyc3QgMyByb3dzKS4gVXNlIHRoZSBgYWRkVXBkYXRlUmFuZ2UoKWAgZnVuY3Rpb24gdG8gYWRkIHJhbmdlcyB0byB0aGlzIGFycmF5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn0KICAgIAkJICovCiAgICAJCXRoaXMudXBkYXRlUmFuZ2VzID0gW107CgogICAgCQkvKioKICAgIAkJICogVGhpcyBzdGFydHMgYXQgYDBgIGFuZCBjb3VudHMgaG93IG1hbnkgdGltZXMge0BsaW5rIFRleHR1cmUjbmVlZHNVcGRhdGV9IGlzIHNldCB0byBgdHJ1ZWAuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnZlcnNpb24gPSAwOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgY2FsbGJhY2sgZnVuY3Rpb24sIGNhbGxlZCB3aGVuIHRoZSB0ZXh0dXJlIGlzIHVwZGF0ZWQgKGUuZy4sIHdoZW4KICAgIAkJICoge0BsaW5rIFRleHR1cmUjbmVlZHNVcGRhdGV9IGhhcyBiZWVuIHNldCB0byB0cnVlIGFuZCB0aGVuIHRoZSB0ZXh0dXJlIGlzIHVzZWQpLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P0Z1bmN0aW9ufQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLm9uVXBkYXRlID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBvcHRpb25hbCBiYWNrIHJlZmVyZW5jZSB0byB0aGUgdGV4dHVyZXMgcmVuZGVyIHRhcmdldC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez8oUmVuZGVyVGFyZ2V0fFdlYkdMUmVuZGVyVGFyZ2V0KX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5yZW5kZXJUYXJnZXQgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEluZGljYXRlcyB3aGV0aGVyIGEgdGV4dHVyZSBiZWxvbmdzIHRvIGEgcmVuZGVyIHRhcmdldCBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogSW5kaWNhdGVzIGlmIGEgdGV4dHVyZSBzaG91bGQgYmUgaGFuZGxlZCBsaWtlIGEgdGV4dHVyZSBhcnJheS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0FycmF5VGV4dHVyZSA9IGltYWdlICYmIGltYWdlLmRlcHRoICYmIGltYWdlLmRlcHRoID4gMSA/IHRydWUgOiBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIHRleHR1cmUgc2hvdWxkIGJlIHByb2Nlc3NlZCBieSBgUE1SRU1HZW5lcmF0b3JgIG9yIG5vdAogICAgCQkgKiAob25seSByZWxldmFudCBmb3IgcmVuZGVyIHRhcmdldCB0ZXh0dXJlcykuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnBtcmVtVmVyc2lvbiA9IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlIGluIHBpeGVscy4KICAgIAkgKi8KICAgIAlnZXQgd2lkdGgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5zb3VyY2UuZ2V0U2l6ZSggX3RlbXBWZWMzICkueDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlIGluIHBpeGVscy4KICAgIAkgKi8KICAgIAlnZXQgaGVpZ2h0KCkgewoKICAgIAkJcmV0dXJuIHRoaXMuc291cmNlLmdldFNpemUoIF90ZW1wVmVjMyApLnk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIGRlcHRoIG9mIHRoZSB0ZXh0dXJlIGluIHBpeGVscy4KICAgIAkgKi8KICAgIAlnZXQgZGVwdGgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5zb3VyY2UuZ2V0U2l6ZSggX3RlbXBWZWMzICkuejsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgaW1hZ2Ugb2JqZWN0IGhvbGRpbmcgdGhlIHRleHR1cmUgZGF0YS4KICAgIAkgKgogICAgCSAqIEB0eXBlIHs/T2JqZWN0fQogICAgCSAqLwogICAgCWdldCBpbWFnZSgpIHsKCiAgICAJCXJldHVybiB0aGlzLnNvdXJjZS5kYXRhOwoKICAgIAl9CgogICAgCXNldCBpbWFnZSggdmFsdWUgPSBudWxsICkgewoKICAgIAkJdGhpcy5zb3VyY2UuZGF0YSA9IHZhbHVlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFVwZGF0ZXMgdGhlIHRleHR1cmUgdHJhbnNmb3JtYXRpb24gbWF0cml4IGZyb20gdGhlIGZyb20gdGhlIHByb3BlcnRpZXMge0BsaW5rIFRleHR1cmUjb2Zmc2V0fSwKICAgIAkgKiB7QGxpbmsgVGV4dHVyZSNyZXBlYXR9LCB7QGxpbmsgVGV4dHVyZSNyb3RhdGlvbn0sIGFuZCB7QGxpbmsgVGV4dHVyZSNjZW50ZXJ9LgogICAgCSAqLwogICAgCXVwZGF0ZU1hdHJpeCgpIHsKCiAgICAJCXRoaXMubWF0cml4LnNldFV2VHJhbnNmb3JtKCB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55LCB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55LCB0aGlzLnJvdGF0aW9uLCB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyBhIHJhbmdlIG9mIGRhdGEgaW4gdGhlIGRhdGEgdGV4dHVyZSB0byBiZSB1cGRhdGVkIG9uIHRoZSBHUFUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBQb3NpdGlvbiBhdCB3aGljaCB0byBzdGFydCB1cGRhdGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIG51bWJlciBvZiBjb21wb25lbnRzIHRvIHVwZGF0ZS4KICAgIAkgKi8KICAgIAlhZGRVcGRhdGVSYW5nZSggc3RhcnQsIGNvdW50ICkgewoKICAgIAkJdGhpcy51cGRhdGVSYW5nZXMucHVzaCggeyBzdGFydCwgY291bnQgfSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENsZWFycyB0aGUgdXBkYXRlIHJhbmdlcy4KICAgIAkgKi8KICAgIAljbGVhclVwZGF0ZVJhbmdlcygpIHsKCiAgICAJCXRoaXMudXBkYXRlUmFuZ2VzLmxlbmd0aCA9IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyB0ZXh0dXJlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtUZXh0dXJlfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHRleHR1cmUgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VGV4dHVyZX0gc291cmNlIC0gVGhlIHRleHR1cmUgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtUZXh0dXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXRoaXMubmFtZSA9IHNvdXJjZS5uYW1lOwoKICAgIAkJdGhpcy5zb3VyY2UgPSBzb3VyY2Uuc291cmNlOwogICAgCQl0aGlzLm1pcG1hcHMgPSBzb3VyY2UubWlwbWFwcy5zbGljZSggMCApOwoKICAgIAkJdGhpcy5tYXBwaW5nID0gc291cmNlLm1hcHBpbmc7CiAgICAJCXRoaXMuY2hhbm5lbCA9IHNvdXJjZS5jaGFubmVsOwoKICAgIAkJdGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUzsKICAgIAkJdGhpcy53cmFwVCA9IHNvdXJjZS53cmFwVDsKCiAgICAJCXRoaXMubWFnRmlsdGVyID0gc291cmNlLm1hZ0ZpbHRlcjsKICAgIAkJdGhpcy5taW5GaWx0ZXIgPSBzb3VyY2UubWluRmlsdGVyOwoKICAgIAkJdGhpcy5hbmlzb3Ryb3B5ID0gc291cmNlLmFuaXNvdHJvcHk7CgogICAgCQl0aGlzLmZvcm1hdCA9IHNvdXJjZS5mb3JtYXQ7CiAgICAJCXRoaXMuaW50ZXJuYWxGb3JtYXQgPSBzb3VyY2UuaW50ZXJuYWxGb3JtYXQ7CiAgICAJCXRoaXMudHlwZSA9IHNvdXJjZS50eXBlOwoKICAgIAkJdGhpcy5vZmZzZXQuY29weSggc291cmNlLm9mZnNldCApOwogICAgCQl0aGlzLnJlcGVhdC5jb3B5KCBzb3VyY2UucmVwZWF0ICk7CiAgICAJCXRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTsKICAgIAkJdGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjsKCiAgICAJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlOwogICAgCQl0aGlzLm1hdHJpeC5jb3B5KCBzb3VyY2UubWF0cml4ICk7CgogICAgCQl0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHNvdXJjZS5nZW5lcmF0ZU1pcG1hcHM7CiAgICAJCXRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhOwogICAgCQl0aGlzLmZsaXBZID0gc291cmNlLmZsaXBZOwogICAgCQl0aGlzLnVucGFja0FsaWdubWVudCA9IHNvdXJjZS51bnBhY2tBbGlnbm1lbnQ7CiAgICAJCXRoaXMuY29sb3JTcGFjZSA9IHNvdXJjZS5jb2xvclNwYWNlOwoKICAgIAkJdGhpcy5yZW5kZXJUYXJnZXQgPSBzb3VyY2UucmVuZGVyVGFyZ2V0OwogICAgCQl0aGlzLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHNvdXJjZS5pc1JlbmRlclRhcmdldFRleHR1cmU7CiAgICAJCXRoaXMuaXNBcnJheVRleHR1cmUgPSBzb3VyY2UuaXNBcnJheVRleHR1cmU7CgogICAgCQl0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7CgogICAgCQl0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyB0ZXh0dXJlJ3MgcHJvcGVydGllcyBiYXNlZCBvbiBgdmFsdWVzYC4KICAgIAkgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gQSBjb250YWluZXIgd2l0aCB0ZXh0dXJlIHBhcmFtZXRlcnMuCiAgICAJICovCiAgICAJc2V0VmFsdWVzKCB2YWx1ZXMgKSB7CgogICAgCQlmb3IgKCBjb25zdCBrZXkgaW4gdmFsdWVzICkgewoKICAgIAkJCWNvbnN0IG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTsKCiAgICAJCQlpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggYFRIUkVFLlRleHR1cmUuc2V0VmFsdWVzKCk6IHBhcmFtZXRlciAnJHsga2V5IH0nIGhhcyB2YWx1ZSBvZiB1bmRlZmluZWQuYCApOwogICAgCQkJCWNvbnRpbnVlOwoKICAgIAkJCX0KCiAgICAJCQljb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzWyBrZXkgXTsKCiAgICAJCQlpZiAoIGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oIGBUSFJFRS5UZXh0dXJlLnNldFZhbHVlcygpOiBwcm9wZXJ0eSAnJHsga2V5IH0nIGRvZXMgbm90IGV4aXN0LmAgKTsKICAgIAkJCQljb250aW51ZTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCAoIGN1cnJlbnRWYWx1ZSAmJiBuZXdWYWx1ZSApICYmICggY3VycmVudFZhbHVlLmlzVmVjdG9yMiAmJiBuZXdWYWx1ZS5pc1ZlY3RvcjIgKSApIHsKCiAgICAJCQkJY3VycmVudFZhbHVlLmNvcHkoIG5ld1ZhbHVlICk7CgogICAgCQkJfSBlbHNlIGlmICggKCBjdXJyZW50VmFsdWUgJiYgbmV3VmFsdWUgKSAmJiAoIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgJiYgbmV3VmFsdWUuaXNWZWN0b3IzICkgKSB7CgogICAgCQkJCWN1cnJlbnRWYWx1ZS5jb3B5KCBuZXdWYWx1ZSApOwoKICAgIAkJCX0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIG5ld1ZhbHVlICkgJiYgKCBjdXJyZW50VmFsdWUuaXNNYXRyaXgzICYmIG5ld1ZhbHVlLmlzTWF0cml4MyApICkgewoKICAgIAkJCQljdXJyZW50VmFsdWUuY29weSggbmV3VmFsdWUgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQl0aGlzWyBrZXkgXSA9IG5ld1ZhbHVlOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXJpYWxpemVzIHRoZSB0ZXh0dXJlIGludG8gSlNPTi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7PyhPYmplY3R8c3RyaW5nKX0gbWV0YSAtIEFuIG9wdGlvbmFsIHZhbHVlIGhvbGRpbmcgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VyaWFsaXphdGlvbi4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIHRleHR1cmUuCiAgICAJICogQHNlZSB7QGxpbmsgT2JqZWN0TG9hZGVyI3BhcnNlfQogICAgCSAqLwogICAgCXRvSlNPTiggbWV0YSApIHsKCiAgICAJCWNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApOwoKICAgIAkJaWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IG91dHB1dCA9IHsKCiAgICAJCQltZXRhZGF0YTogewogICAgCQkJCXZlcnNpb246IDQuNywKICAgIAkJCQl0eXBlOiAnVGV4dHVyZScsCiAgICAJCQkJZ2VuZXJhdG9yOiAnVGV4dHVyZS50b0pTT04nCiAgICAJCQl9LAoKICAgIAkJCXV1aWQ6IHRoaXMudXVpZCwKICAgIAkJCW5hbWU6IHRoaXMubmFtZSwKCiAgICAJCQlpbWFnZTogdGhpcy5zb3VyY2UudG9KU09OKCBtZXRhICkudXVpZCwKCiAgICAJCQltYXBwaW5nOiB0aGlzLm1hcHBpbmcsCiAgICAJCQljaGFubmVsOiB0aGlzLmNoYW5uZWwsCgogICAgCQkJcmVwZWF0OiBbIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnkgXSwKICAgIAkJCW9mZnNldDogWyB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55IF0sCiAgICAJCQljZW50ZXI6IFsgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSBdLAogICAgCQkJcm90YXRpb246IHRoaXMucm90YXRpb24sCgogICAgCQkJd3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sCgogICAgCQkJZm9ybWF0OiB0aGlzLmZvcm1hdCwKICAgIAkJCWludGVybmFsRm9ybWF0OiB0aGlzLmludGVybmFsRm9ybWF0LAogICAgCQkJdHlwZTogdGhpcy50eXBlLAogICAgCQkJY29sb3JTcGFjZTogdGhpcy5jb2xvclNwYWNlLAoKICAgIAkJCW1pbkZpbHRlcjogdGhpcy5taW5GaWx0ZXIsCiAgICAJCQltYWdGaWx0ZXI6IHRoaXMubWFnRmlsdGVyLAogICAgCQkJYW5pc290cm9weTogdGhpcy5hbmlzb3Ryb3B5LAoKICAgIAkJCWZsaXBZOiB0aGlzLmZsaXBZLAoKICAgIAkJCWdlbmVyYXRlTWlwbWFwczogdGhpcy5nZW5lcmF0ZU1pcG1hcHMsCiAgICAJCQlwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsCiAgICAJCQl1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50CgogICAgCQl9OwoKICAgIAkJaWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBvdXRwdXQudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhOwoKICAgIAkJaWYgKCAhIGlzUm9vdE9iamVjdCApIHsKCiAgICAJCQltZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSA9IG91dHB1dDsKCiAgICAJCX0KCiAgICAJCXJldHVybiBvdXRwdXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzCiAgICAJICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuCiAgICAJICoKICAgIAkgKiBAZmlyZXMgVGV4dHVyZSNkaXNwb3NlCiAgICAJICovCiAgICAJZGlzcG9zZSgpIHsKCiAgICAJCS8qKgogICAgCQkgKiBGaXJlcyB3aGVuIHRoZSB0ZXh0dXJlIGhhcyBiZWVuIGRpc3Bvc2VkIG9mLgogICAgCQkgKgogICAgCQkgKiBAZXZlbnQgVGV4dHVyZSNkaXNwb3NlCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUcmFuc2Zvcm1zIHRoZSBnaXZlbiB1diB2ZWN0b3Igd2l0aCB0aGUgdGV4dHVyZXMgdXYgdHJhbnNmb3JtYXRpb24gbWF0cml4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IyfSB1diAtIFRoZSB1diB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yMn0gVGhlIHRyYW5zZm9ybWVkIHV2IHZlY3Rvci4KICAgIAkgKi8KICAgIAl0cmFuc2Zvcm1VdiggdXYgKSB7CgogICAgCQlpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgcmV0dXJuIHV2OwoKICAgIAkJdXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApOwoKICAgIAkJaWYgKCB1di54IDwgMCB8fCB1di54ID4gMSApIHsKCiAgICAJCQlzd2l0Y2ggKCB0aGlzLndyYXBTICkgewoKICAgIAkJCQljYXNlIFJlcGVhdFdyYXBwaW5nOgoKICAgIAkJCQkJdXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6CgogICAgCQkJCQl1di54ID0gdXYueCA8IDAgPyAwIDogMTsKICAgIAkJCQkJYnJlYWs7CgogICAgCQkJCWNhc2UgTWlycm9yZWRSZXBlYXRXcmFwcGluZzoKCiAgICAJCQkJCWlmICggTWF0aC5hYnMoIE1hdGguZmxvb3IoIHV2LnggKSAlIDIgKSA9PT0gMSApIHsKCiAgICAJCQkJCQl1di54ID0gTWF0aC5jZWlsKCB1di54ICkgLSB1di54OwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQl1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWlmICggdXYueSA8IDAgfHwgdXYueSA+IDEgKSB7CgogICAgCQkJc3dpdGNoICggdGhpcy53cmFwVCApIHsKCiAgICAJCQkJY2FzZSBSZXBlYXRXcmFwcGluZzoKCiAgICAJCQkJCXV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApOwogICAgCQkJCQlicmVhazsKCiAgICAJCQkJY2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOgoKICAgIAkJCQkJdXYueSA9IHV2LnkgPCAwID8gMCA6IDE7CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6CgogICAgCQkJCQlpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di55ICkgJSAyICkgPT09IDEgKSB7CgogICAgCQkJCQkJdXYueSA9IE1hdGguY2VpbCggdXYueSApIC0gdXYueTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJdXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlicmVhazsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuZmxpcFkgKSB7CgogICAgCQkJdXYueSA9IDEgLSB1di55OwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHV2OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB0byBgdHJ1ZWAgaW5kaWNhdGVzIHRoZSBlbmdpbmUgdGhlIHRleHR1cmUKICAgIAkgKiBtdXN0IGJlIHVwZGF0ZWQgaW4gdGhlIG5leHQgcmVuZGVyLiBUaGlzIHRyaWdnZXJzIGEgdGV4dHVyZSB1cGxvYWQKICAgIAkgKiB0byB0aGUgR1BVIGFuZCBlbnN1cmVzIGNvcnJlY3QgdGV4dHVyZSBwYXJhbWV0ZXIgY29uZmlndXJhdGlvbi4KICAgIAkgKgogICAgCSAqIEB0eXBlIHtib29sZWFufQogICAgCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogICAgCSAqLwogICAgCXNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7CgogICAgCQlpZiAoIHZhbHVlID09PSB0cnVlICkgewoKICAgIAkJCXRoaXMudmVyc2lvbiArKzsKICAgIAkJCXRoaXMuc291cmNlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIGluZGljYXRlcyB0aGUgZW5naW5lIHRoZSBQTVJFTQogICAgCSAqIG11c3QgYmUgcmVnZW5lcmF0ZWQuCiAgICAJICoKICAgIAkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkgKiBAZGVmYXVsdCBmYWxzZQogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICAgIAkgKi8KICAgIAlzZXQgbmVlZHNQTVJFTVVwZGF0ZSggdmFsdWUgKSB7CgogICAgCQlpZiAoIHZhbHVlID09PSB0cnVlICkgewoKICAgIAkJCXRoaXMucG1yZW1WZXJzaW9uICsrOwoKICAgIAkJfQoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogVGhlIGRlZmF1bHQgaW1hZ2UgZm9yIGFsbCB0ZXh0dXJlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAdHlwZSB7P0ltYWdlfQogICAgICogQGRlZmF1bHQgbnVsbAogICAgICovCiAgICBUZXh0dXJlLkRFRkFVTFRfSU1BR0UgPSBudWxsOwoKICAgIC8qKgogICAgICogVGhlIGRlZmF1bHQgbWFwcGluZyBmb3IgYWxsIHRleHR1cmVzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKiBAZGVmYXVsdCBVVk1hcHBpbmcKICAgICAqLwogICAgVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7CgogICAgLyoqCiAgICAgKiBUaGUgZGVmYXVsdCBhbmlzb3Ryb3B5IHZhbHVlIGZvciBhbGwgdGV4dHVyZXMuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQHR5cGUge251bWJlcn0KICAgICAqIEBkZWZhdWx0IDEKICAgICAqLwogICAgVGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFkgPSAxOwoKICAgIC8qKgogICAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgNEQgdmVjdG9yLiBBIDREIHZlY3RvciBpcyBhbiBvcmRlcmVkIHF1YWRydXBsZXQgb2YgbnVtYmVycwogICAgICogKGxhYmVsZWQgeCwgeSwgeiBhbmQgdyksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBhIG51bWJlciBvZiB0aGluZ3MsIHN1Y2ggYXM6CiAgICAgKgogICAgICogLSBBIHBvaW50IGluIDREIHNwYWNlLgogICAgICogLSBBIGRpcmVjdGlvbiBhbmQgbGVuZ3RoIGluIDREIHNwYWNlLiBJbiB0aHJlZS5qcyB0aGUgbGVuZ3RoIHdpbGwKICAgICAqIGFsd2F5cyBiZSB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlKHN0cmFpZ2h0LWxpbmUgZGlzdGFuY2UpIGZyb20gYCgwLCAwLCAwLCAwKWAgdG8gYCh4LCB5LCB6LCB3KWAKICAgICAqIGFuZCB0aGUgZGlyZWN0aW9uIGlzIGFsc28gbWVhc3VyZWQgZnJvbSBgKDAsIDAsIDAsIDApYCB0b3dhcmRzIGAoeCwgeSwgeiwgdylgLgogICAgICogLSBBbnkgYXJiaXRyYXJ5IG9yZGVyZWQgcXVhZHJ1cGxldCBvZiBudW1iZXJzLgogICAgICoKICAgICAqIFRoZXJlIGFyZSBvdGhlciB0aGluZ3MgYSA0RCB2ZWN0b3IgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50LCBob3dldmVyIHRoZXNlCiAgICAgKiBhcmUgdGhlIG1vc3QgY29tbW9uIHVzZXMgaW4gKnRocmVlLmpzKi4KICAgICAqCiAgICAgKiBJdGVyYXRpbmcgdGhyb3VnaCBhIHZlY3RvciBpbnN0YW5jZSB3aWxsIHlpZWxkIGl0cyBjb21wb25lbnRzIGAoeCwgeSwgeiwgdylgIGluCiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBvcmRlci4KICAgICAqIGBgYGpzCiAgICAgKiBjb25zdCBhID0gbmV3IFRIUkVFLlZlY3RvcjQoIDAsIDEsIDAsIDAgKTsKICAgICAqCiAgICAgKiAvL25vIGFyZ3VtZW50czsgd2lsbCBiZSBpbml0aWFsaXNlZCB0byAoMCwgMCwgMCwgMSkKICAgICAqIGNvbnN0IGIgPSBuZXcgVEhSRUUuVmVjdG9yNCggKTsKICAgICAqCiAgICAgKiBjb25zdCBkID0gYS5kb3QoIGIgKTsKICAgICAqIGBgYAogICAgICovCiAgICBjbGFzcyBWZWN0b3I0IHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyA0RCB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgeCB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgeSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3c9MV0gLSBUaGUgdyB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJVmVjdG9yNC5wcm90b3R5cGUuaXNWZWN0b3I0ID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgeCB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICovCiAgICAJCXRoaXMueCA9IHg7CgogICAgCQkvKioKICAgIAkJICogVGhlIHkgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqLwogICAgCQl0aGlzLnkgPSB5OwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB6IHZhbHVlIG9mIHRoaXMgdmVjdG9yLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKi8KICAgIAkJdGhpcy56ID0gejsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgdyB2YWx1ZSBvZiB0aGlzIHZlY3Rvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICovCiAgICAJCXRoaXMudyA9IHc7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWxpYXMgZm9yIHtAbGluayBWZWN0b3I0I3p9LgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKi8KICAgIAlnZXQgd2lkdGgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy56OwoKICAgIAl9CgogICAgCXNldCB3aWR0aCggdmFsdWUgKSB7CgogICAgCQl0aGlzLnogPSB2YWx1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBbGlhcyBmb3Ige0BsaW5rIFZlY3RvcjQjd30uCiAgICAJICoKICAgIAkgKiBAdHlwZSB7bnVtYmVyfQogICAgCSAqLwogICAgCWdldCBoZWlnaHQoKSB7CgogICAgCQlyZXR1cm4gdGhpcy53OwoKICAgIAl9CgogICAgCXNldCBoZWlnaHQoIHZhbHVlICkgewoKICAgIAkJdGhpcy53ID0gdmFsdWU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBvZiB0aGUgeCBjb21wb25lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgb2YgdGhlIHkgY29tcG9uZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIG9mIHRoZSB6IGNvbXBvbmVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB2YWx1ZSBvZiB0aGUgdyBjb21wb25lbnQuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0KCB4LCB5LCB6LCB3ICkgewoKICAgIAkJdGhpcy54ID0geDsKICAgIAkJdGhpcy55ID0geTsKICAgIAkJdGhpcy56ID0gejsKICAgIAkJdGhpcy53ID0gdzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIHRvIHRoZSBzYW1lIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSB2YWx1ZSB0byBzZXQgZm9yIGFsbCB2ZWN0b3IgY29tcG9uZW50cy4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRTY2FsYXIoIHNjYWxhciApIHsKCiAgICAJCXRoaXMueCA9IHNjYWxhcjsKICAgIAkJdGhpcy55ID0gc2NhbGFyOwogICAgCQl0aGlzLnogPSBzY2FsYXI7CiAgICAJCXRoaXMudyA9IHNjYWxhcjsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvcidzIHggY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZQogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldFgoIHggKSB7CgogICAgCQl0aGlzLnggPSB4OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yJ3MgeSBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0WSggeSApIHsKCiAgICAJCXRoaXMueSA9IHk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2ZWN0b3IncyB6IGNvbXBvbmVudCB0byB0aGUgZ2l2ZW4gdmFsdWUKICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRaKCB6ICkgewoKICAgIAkJdGhpcy56ID0gejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHZlY3RvcidzIHcgY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZQogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHcgLSBUaGUgdmFsdWUgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldFcoIHcgKSB7CgogICAgCQl0aGlzLncgPSB3OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWxsb3dzIHRvIHNldCBhIHZlY3RvciBjb21wb25lbnQgd2l0aCBhbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LAogICAgCSAqIGAyYCBlcXVhbHMgdG8geiwgYDNgIGVxdWFscyB0byB3LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJc2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7CgogICAgCQlzd2l0Y2ggKCBpbmRleCApIHsKCiAgICAJCQljYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhazsKICAgIAkJCWNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrOwogICAgCQkJY2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7CiAgICAJCQljYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhazsKICAgIAkJCWRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdmVjdG9yIGNvbXBvbmVudCB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LAogICAgCSAqIGAyYCBlcXVhbHMgdG8geiwgYDNgIGVxdWFscyB0byB3LgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gQSB2ZWN0b3IgY29tcG9uZW50IHZhbHVlLgogICAgCSAqLwogICAgCWdldENvbXBvbmVudCggaW5kZXggKSB7CgogICAgCQlzd2l0Y2ggKCBpbmRleCApIHsKCiAgICAJCQljYXNlIDA6IHJldHVybiB0aGlzLng7CiAgICAJCQljYXNlIDE6IHJldHVybiB0aGlzLnk7CiAgICAJCQljYXNlIDI6IHJldHVybiB0aGlzLno7CiAgICAJCQljYXNlIDM6IHJldHVybiB0aGlzLnc7CiAgICAJCQlkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgdmVjdG9yIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM3xWZWN0b3I0fSB2IC0gVGhlIHZlY3RvciB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWNvcHkoIHYgKSB7CgogICAgCQl0aGlzLnggPSB2Lng7CiAgICAJCXRoaXMueSA9IHYueTsKICAgIAkJdGhpcy56ID0gdi56OwogICAgCQl0aGlzLncgPSAoIHYudyAhPT0gdW5kZWZpbmVkICkgPyB2LncgOiAxOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjR9IHYgLSBUaGUgdmVjdG9yIHRvIGFkZC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlhZGQoIHYgKSB7CgogICAgCQl0aGlzLnggKz0gdi54OwogICAgCQl0aGlzLnkgKz0gdi55OwogICAgCQl0aGlzLnogKz0gdi56OwogICAgCQl0aGlzLncgKz0gdi53OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIHRvIGFsbCBjb21wb25lbnRzIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gYWRkLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFkZFNjYWxhciggcyApIHsKCiAgICAJCXRoaXMueCArPSBzOwogICAgCQl0aGlzLnkgKz0gczsKICAgIAkJdGhpcy56ICs9IHM7CiAgICAJCXRoaXMudyArPSBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYWRkVmVjdG9ycyggYSwgYiApIHsKCiAgICAJCXRoaXMueCA9IGEueCArIGIueDsKICAgIAkJdGhpcy55ID0gYS55ICsgYi55OwogICAgCQl0aGlzLnogPSBhLnogKyBiLno7CiAgICAJCXRoaXMudyA9IGEudyArIGIudzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgdGhlIGdpdmVuIHZlY3RvciBzY2FsZWQgYnkgdGhlIGdpdmVuIGZhY3RvciB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSB2IC0gVGhlIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBmYWN0b3IgdGhhdCBzY2FsZXMgYHZgLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWFkZFNjYWxlZFZlY3RvciggdiwgcyApIHsKCiAgICAJCXRoaXMueCArPSB2LnggKiBzOwogICAgCQl0aGlzLnkgKz0gdi55ICogczsKICAgIAkJdGhpcy56ICs9IHYueiAqIHM7CiAgICAJCXRoaXMudyArPSB2LncgKiBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU3VidHJhY3RzIHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSB2IC0gVGhlIHZlY3RvciB0byBzdWJ0cmFjdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzdWIoIHYgKSB7CgogICAgCQl0aGlzLnggLT0gdi54OwogICAgCQl0aGlzLnkgLT0gdi55OwogICAgCQl0aGlzLnogLT0gdi56OwogICAgCQl0aGlzLncgLT0gdi53OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU3VidHJhY3RzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgZnJvbSBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgc2NhbGFyIHRvIHN1YnRyYWN0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXN1YlNjYWxhciggcyApIHsKCiAgICAJCXRoaXMueCAtPSBzOwogICAgCQl0aGlzLnkgLT0gczsKICAgIAkJdGhpcy56IC09IHM7CiAgICAJCXRoaXMudyAtPSBzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU3VidHJhY3RzIHRoZSBnaXZlbiB2ZWN0b3JzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSBhIC0gVGhlIGZpcnN0IHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjR9IGIgLSBUaGUgc2Vjb25kIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzdWJWZWN0b3JzKCBhLCBiICkgewoKICAgIAkJdGhpcy54ID0gYS54IC0gYi54OwogICAgCQl0aGlzLnkgPSBhLnkgLSBiLnk7CiAgICAJCXRoaXMueiA9IGEueiAtIGIuejsKICAgIAkJdGhpcy53ID0gYS53IC0gYi53OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gdmVjdG9yIHdpdGggdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gbXVsdGlwbHkuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbXVsdGlwbHkoIHYgKSB7CgogICAgCQl0aGlzLnggKj0gdi54OwogICAgCQl0aGlzLnkgKj0gdi55OwogICAgCQl0aGlzLnogKj0gdi56OwogICAgCQl0aGlzLncgKj0gdi53OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIHdpdGggYWxsIGNvbXBvbmVudHMgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7CgogICAgCQl0aGlzLnggKj0gc2NhbGFyOwogICAgCQl0aGlzLnkgKj0gc2NhbGFyOwogICAgCQl0aGlzLnogKj0gc2NhbGFyOwogICAgCQl0aGlzLncgKj0gc2NhbGFyOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciB3aXRoIHRoZSBnaXZlbiA0eDQgbWF0cml4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIDR4NCBtYXRyaXguCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXg0KCBtICkgewoKICAgIAkJY29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudzsKICAgIAkJY29uc3QgZSA9IG0uZWxlbWVudHM7CgogICAgCQl0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdzsKICAgIAkJdGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7CiAgICAJCXRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICogdzsKICAgIAkJdGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIGluc3RhbmNlIGJ5IHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjR9IHYgLSBUaGUgdmVjdG9yIHRvIGRpdmlkZS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlkaXZpZGUoIHYgKSB7CgogICAgCQl0aGlzLnggLz0gdi54OwogICAgCQl0aGlzLnkgLz0gdi55OwogICAgCQl0aGlzLnogLz0gdi56OwogICAgCQl0aGlzLncgLz0gdi53OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGl2aWRlcyB0aGlzIHZlY3RvciBieSB0aGUgZ2l2ZW4gc2NhbGFyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWRpdmlkZVNjYWxhciggc2NhbGFyICkgewoKICAgIAkJcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB4LCB5IGFuZCB6IGNvbXBvbmVudHMgb2YgdGhpcwogICAgCSAqIHZlY3RvciB0byB0aGUgcXVhdGVybmlvbidzIGF4aXMgYW5kIHcgdG8gdGhlIGFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIFF1YXRlcm5pb24gdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uKCBxICkgewoKICAgIAkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bQoKICAgIAkJLy8gcSBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQKCiAgICAJCXRoaXMudyA9IDIgKiBNYXRoLmFjb3MoIHEudyApOwoKICAgIAkJY29uc3QgcyA9IE1hdGguc3FydCggMSAtIHEudyAqIHEudyApOwoKICAgIAkJaWYgKCBzIDwgMC4wMDAxICkgewoKICAgIAkJCXRoaXMueCA9IDE7CiAgICAJCQl0aGlzLnkgPSAwOwogICAgCQkJdGhpcy56ID0gMDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdGhpcy54ID0gcS54IC8gczsKICAgIAkJCXRoaXMueSA9IHEueSAvIHM7CiAgICAJCQl0aGlzLnogPSBxLnogLyBzOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgeCwgeSBhbmQgeiBjb21wb25lbnRzIG9mIHRoaXMKICAgIAkgKiB2ZWN0b3IgdG8gdGhlIGF4aXMgb2Ygcm90YXRpb24gYW5kIHcgdG8gdGhlIGFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gQSA0eDQgbWF0cml4IG9mIHdoaWNoIHRoZSB1cHBlciBsZWZ0IDN4MyBtYXRyaXggaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXgoIG0gKSB7CgogICAgCQkvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9BbmdsZS9pbmRleC5odG0KCiAgICAJCS8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpCgogICAgCQlsZXQgYW5nbGUsIHgsIHksIHo7IC8vIHZhcmlhYmxlcyBmb3IgcmVzdWx0CiAgICAJCWNvbnN0IGVwc2lsb24gPSAwLjAxLAkJLy8gbWFyZ2luIHRvIGFsbG93IGZvciByb3VuZGluZyBlcnJvcnMKICAgIAkJCWVwc2lsb24yID0gMC4xLAkJLy8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXMKCiAgICAJCQl0ZSA9IG0uZWxlbWVudHMsCgogICAgCQkJbTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSwKICAgIAkJCW0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sCiAgICAJCQltMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTsKCiAgICAJCWlmICggKCBNYXRoLmFicyggbTEyIC0gbTIxICkgPCBlcHNpbG9uICkgJiYKICAgIAkJICAgICAoIE1hdGguYWJzKCBtMTMgLSBtMzEgKSA8IGVwc2lsb24gKSAmJgogICAgCQkgICAgICggTWF0aC5hYnMoIG0yMyAtIG0zMiApIDwgZXBzaWxvbiApICkgewoKICAgIAkJCS8vIHNpbmd1bGFyaXR5IGZvdW5kCiAgICAJCQkvLyBmaXJzdCBjaGVjayBmb3IgaWRlbnRpdHkgbWF0cml4IHdoaWNoIG11c3QgaGF2ZSArMSBmb3IgYWxsIHRlcm1zCiAgICAJCQkvLyBpbiBsZWFkaW5nIGRpYWdvbmFsIGFuZCB6ZXJvIGluIG90aGVyIHRlcm1zCgogICAgCQkJaWYgKCAoIE1hdGguYWJzKCBtMTIgKyBtMjEgKSA8IGVwc2lsb24yICkgJiYKICAgIAkJCSAgICAgKCBNYXRoLmFicyggbTEzICsgbTMxICkgPCBlcHNpbG9uMiApICYmCiAgICAJCQkgICAgICggTWF0aC5hYnMoIG0yMyArIG0zMiApIDwgZXBzaWxvbjIgKSAmJgogICAgCQkJICAgICAoIE1hdGguYWJzKCBtMTEgKyBtMjIgKyBtMzMgLSAzICkgPCBlcHNpbG9uMiApICkgewoKICAgIAkJCQkvLyB0aGlzIHNpbmd1bGFyaXR5IGlzIGlkZW50aXR5IG1hdHJpeCBzbyBhbmdsZSA9IDAKCiAgICAJCQkJdGhpcy5zZXQoIDEsIDAsIDAsIDAgKTsKCiAgICAJCQkJcmV0dXJuIHRoaXM7IC8vIHplcm8gYW5nbGUsIGFyYml0cmFyeSBheGlzCgogICAgCQkJfQoKICAgIAkJCS8vIG90aGVyd2lzZSB0aGlzIHNpbmd1bGFyaXR5IGlzIGFuZ2xlID0gMTgwCgogICAgCQkJYW5nbGUgPSBNYXRoLlBJOwoKICAgIAkJCWNvbnN0IHh4ID0gKCBtMTEgKyAxICkgLyAyOwogICAgCQkJY29uc3QgeXkgPSAoIG0yMiArIDEgKSAvIDI7CiAgICAJCQljb25zdCB6eiA9ICggbTMzICsgMSApIC8gMjsKICAgIAkJCWNvbnN0IHh5ID0gKCBtMTIgKyBtMjEgKSAvIDQ7CiAgICAJCQljb25zdCB4eiA9ICggbTEzICsgbTMxICkgLyA0OwogICAgCQkJY29uc3QgeXogPSAoIG0yMyArIG0zMiApIC8gNDsKCiAgICAJCQlpZiAoICggeHggPiB5eSApICYmICggeHggPiB6eiApICkgewoKICAgIAkJCQkvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybQoKICAgIAkJCQlpZiAoIHh4IDwgZXBzaWxvbiApIHsKCiAgICAJCQkJCXggPSAwOwogICAgCQkJCQl5ID0gMC43MDcxMDY3ODE7CiAgICAJCQkJCXogPSAwLjcwNzEwNjc4MTsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCXggPSBNYXRoLnNxcnQoIHh4ICk7CiAgICAJCQkJCXkgPSB4eSAvIHg7CiAgICAJCQkJCXogPSB4eiAvIHg7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCB5eSA+IHp6ICkgewoKICAgIAkJCQkvLyBtMjIgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybQoKICAgIAkJCQlpZiAoIHl5IDwgZXBzaWxvbiApIHsKCiAgICAJCQkJCXggPSAwLjcwNzEwNjc4MTsKICAgIAkJCQkJeSA9IDA7CiAgICAJCQkJCXogPSAwLjcwNzEwNjc4MTsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCXkgPSBNYXRoLnNxcnQoIHl5ICk7CiAgICAJCQkJCXggPSB4eSAvIHk7CiAgICAJCQkJCXogPSB5eiAvIHk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQkvLyBtMzMgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybSBzbyBiYXNlIHJlc3VsdCBvbiB0aGlzCgogICAgCQkJCWlmICggenogPCBlcHNpbG9uICkgewoKICAgIAkJCQkJeCA9IDAuNzA3MTA2NzgxOwogICAgCQkJCQl5ID0gMC43MDcxMDY3ODE7CiAgICAJCQkJCXogPSAwOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJeiA9IE1hdGguc3FydCggenogKTsKICAgIAkJCQkJeCA9IHh6IC8gejsKICAgIAkJCQkJeSA9IHl6IC8gejsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQl0aGlzLnNldCggeCwgeSwgeiwgYW5nbGUgKTsKCiAgICAJCQlyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb24KCiAgICAJCX0KCiAgICAJCS8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHkKCiAgICAJCWxldCBzID0gTWF0aC5zcXJ0KCAoIG0zMiAtIG0yMyApICogKCBtMzIgLSBtMjMgKSArCiAgICAJCQkoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArCiAgICAJCQkoIG0yMSAtIG0xMiApICogKCBtMjEgLSBtMTIgKSApOyAvLyB1c2VkIHRvIG5vcm1hbGl6ZQoKICAgIAkJaWYgKCBNYXRoLmFicyggcyApIDwgMC4wMDEgKSBzID0gMTsKCiAgICAJCS8vIHByZXZlbnQgZGl2aWRlIGJ5IHplcm8sIHNob3VsZCBub3QgaGFwcGVuIGlmIG1hdHJpeCBpcyBvcnRob2dvbmFsIGFuZCBzaG91bGQgYmUKICAgIAkJLy8gY2F1Z2h0IGJ5IHNpbmd1bGFyaXR5IHRlc3QgYWJvdmUsIGJ1dCBJJ3ZlIGxlZnQgaXQgaW4ganVzdCBpbiBjYXNlCgogICAgCQl0aGlzLnggPSAoIG0zMiAtIG0yMyApIC8gczsKICAgIAkJdGhpcy55ID0gKCBtMTMgLSBtMzEgKSAvIHM7CiAgICAJCXRoaXMueiA9ICggbTIxIC0gbTEyICkgLyBzOwogICAgCQl0aGlzLncgPSBNYXRoLmFjb3MoICggbTExICsgbTIyICsgbTMzIC0gMSApIC8gMiApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgdG8gdGhlIHBvc2l0aW9uIGVsZW1lbnRzIG9mIHRoZQogICAgCSAqIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSA0eDQgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApIHsKCiAgICAJCWNvbnN0IGUgPSBtLmVsZW1lbnRzOwoKICAgIAkJdGhpcy54ID0gZVsgMTIgXTsKICAgIAkJdGhpcy55ID0gZVsgMTMgXTsKICAgIAkJdGhpcy56ID0gZVsgMTQgXTsKICAgIAkJdGhpcy53ID0gZVsgMTUgXTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gdmVjdG9yJ3MgeCwgeSwgeiBvciB3CiAgICAJICogdmFsdWUsIHJlcGxhY2UgdGhhdCB2YWx1ZSB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIG1pbiB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbWluKCB2ICkgewoKICAgIAkJdGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7CiAgICAJCXRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApOwogICAgCQl0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTsKICAgIAkJdGhpcy53ID0gTWF0aC5taW4oIHRoaXMudywgdi53ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHgsIHksIHogb3IgdwogICAgCSAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtYXggdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjR9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCW1heCggdiApIHsKCiAgICAJCXRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7CiAgICAJCXRoaXMudyA9IE1hdGgubWF4KCB0aGlzLncsIHYudyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyB4LCB5LCB6IG9yIHcgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXggdmVjdG9yJ3MgeCwgeSwgeiBvciB3CiAgICAJICogdmFsdWUsIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlLgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgbWluIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZSwKICAgIAkgKiBpdCBpcyByZXBsYWNlZCBieSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gbWluIC0gVGhlIG1pbmltdW0geCwgeSBhbmQgeiB2YWx1ZXMuCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSBtYXggLSBUaGUgbWF4aW11bSB4LCB5IGFuZCB6IHZhbHVlcyBpbiB0aGUgZGVzaXJlZCByYW5nZS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAljbGFtcCggbWluLCBtYXggKSB7CgogICAgCQkvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZQoKICAgIAkJdGhpcy54ID0gY2xhbXAoIHRoaXMueCwgbWluLngsIG1heC54ICk7CiAgICAJCXRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pbi55LCBtYXgueSApOwogICAgCQl0aGlzLnogPSBjbGFtcCggdGhpcy56LCBtaW4ueiwgbWF4LnogKTsKICAgIAkJdGhpcy53ID0gY2xhbXAoIHRoaXMudywgbWluLncsIG1heC53ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZXMgYXJlIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCB0aGV5IGFyZQogICAgCSAqIHJlcGxhY2VkIGJ5IHRoZSBtYXggdmFsdWUuCiAgICAJICogSWYgdGhpcyB2ZWN0b3IncyB4LCB5LCB6IG9yIHcgdmFsdWVzIGFyZSBsZXNzIHRoYW4gdGhlIG1pbiB2YWx1ZSwgdGhleSBhcmUKICAgIAkgKiByZXBsYWNlZCBieSB0aGUgbWluIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG1pblZhbCAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSBjb21wb25lbnRzIHdpbGwgYmUgY2xhbXBlZCB0by4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbWF4VmFsIC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHsKCiAgICAJCXRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pblZhbCwgbWF4VmFsICk7CiAgICAJCXRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pblZhbCwgbWF4VmFsICk7CiAgICAJCXRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pblZhbCwgbWF4VmFsICk7CiAgICAJCXRoaXMudyA9IGNsYW1wKCB0aGlzLncsIG1pblZhbCwgbWF4VmFsICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJZiB0aGlzIHZlY3RvcidzIGxlbmd0aCBpcyBncmVhdGVyIHRoYW4gdGhlIG1heCB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkKICAgIAkgKiB0aGUgbWF4IHZhbHVlLgogICAgCSAqIElmIHRoaXMgdmVjdG9yJ3MgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgbWluIHZhbHVlLCBpdCBpcyByZXBsYWNlZCBieSB0aGUKICAgIAkgKiBtaW4gdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gVGhlIG1pbmltdW0gdmFsdWUgdGhlIHZlY3RvciBsZW5ndGggd2lsbCBiZSBjbGFtcGVkIHRvLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBUaGUgbWF4aW11bSB2YWx1ZSB0aGUgdmVjdG9yIGxlbmd0aCB3aWxsIGJlIGNsYW1wZWQgdG8uCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkgewoKICAgIAkJY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTsKCiAgICAJCXJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggY2xhbXAoIGxlbmd0aCwgbWluLCBtYXggKSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGFyZSByb3VuZGVkIGRvd24gdG8gdGhlIG5lYXJlc3QgaW50ZWdlciB2YWx1ZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWZsb29yKCkgewoKICAgIAkJdGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7CiAgICAJCXRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApOwogICAgCQl0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTsKICAgIAkJdGhpcy53ID0gTWF0aC5mbG9vciggdGhpcy53ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB1cCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJY2VpbCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7CiAgICAJCXRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7CiAgICAJCXRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7CiAgICAJCXRoaXMudyA9IE1hdGguY2VpbCggdGhpcy53ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlyb3VuZCgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApOwogICAgCQl0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTsKICAgIAkJdGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7CiAgICAJCXRoaXMudyA9IE1hdGgucm91bmQoIHRoaXMudyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdG93YXJkcyB6ZXJvICh1cCBpZiBuZWdhdGl2ZSwKICAgIAkgKiBkb3duIGlmIHBvc2l0aXZlKSB0byBhbiBpbnRlZ2VyIHZhbHVlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJcm91bmRUb1plcm8oKSB7CgogICAgCQl0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTsKICAgIAkJdGhpcy55ID0gTWF0aC50cnVuYyggdGhpcy55ICk7CiAgICAJCXRoaXMueiA9IE1hdGgudHJ1bmMoIHRoaXMueiApOwogICAgCQl0aGlzLncgPSBNYXRoLnRydW5jKCB0aGlzLncgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEludmVydHMgdGhpcyB2ZWN0b3IgLSBpLmUuIHNldHMgeCA9IC14LCB5ID0gLXksIHogPSAteiwgdyA9IC13LgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbmVnYXRlKCkgewoKICAgIAkJdGhpcy54ID0gLSB0aGlzLng7CiAgICAJCXRoaXMueSA9IC0gdGhpcy55OwogICAgCQl0aGlzLnogPSAtIHRoaXMuejsKICAgIAkJdGhpcy53ID0gLSB0aGlzLnc7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdmVjdG9yIHdpdGggdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gY29tcHV0ZSB0aGUgZG90IHByb2R1Y3Qgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZXN1bHQgb2YgdGhlIGRvdCBwcm9kdWN0LgogICAgCSAqLwogICAgCWRvdCggdiApIHsKCiAgICAJCXJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHNxdWFyZSBvZiB0aGUgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIGZyb20KICAgIAkgKiAoMCwgMCwgMCwgMCkgdG8gKHgsIHksIHosIHcpLiBJZiB5b3UgYXJlIGNvbXBhcmluZyB0aGUgbGVuZ3RocyBvZiB2ZWN0b3JzLCB5b3Ugc2hvdWxkCiAgICAJICogY29tcGFyZSB0aGUgbGVuZ3RoIHNxdWFyZWQgaW5zdGVhZCBhcyBpdCBpcyBzbGlnaHRseSBtb3JlIGVmZmljaWVudCB0byBjYWxjdWxhdGUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlbmd0aFNxKCkgewoKICAgIAkJcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudzsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgIEV1Y2xpZGVhbiBsZW5ndGggKHN0cmFpZ2h0LWxpbmUgbGVuZ3RoKSBmcm9tICgwLCAwLCAwLCAwKSB0byAoeCwgeSwgeiwgdykuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbGVuZ3RoKCkgewoKICAgIAkJcmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIE1hbmhhdHRhbiBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbWFuaGF0dGFuTGVuZ3RoKCkgewoKICAgIAkJcmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciB0byBhIHVuaXQgdmVjdG9yIC0gdGhhdCBpcywgc2V0cyBpdCBlcXVhbCB0byBhIHZlY3RvcgogICAgCSAqIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXQgd2l0aCBhIHZlY3RvciBsZW5ndGggb2YgYDFgLgogICAgCSAqCiAgICAJICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuCiAgICAJICovCiAgICAJbm9ybWFsaXplKCkgewoKICAgIAkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgdmVjdG9yIHRvIGEgdmVjdG9yIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXQKICAgIAkgKiB3aXRoIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBuZXcgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXNldExlbmd0aCggbGVuZ3RoICkgewoKICAgIAkJcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3IgYW5kIHRoaXMgaW5zdGFuY2UsIHdoZXJlCiAgICAJICogYWxwaGEgaXMgdGhlIHBlcmNlbnQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgLSBhbHBoYSA9IDAgd2lsbCBiZSB0aGlzCiAgICAJICogdmVjdG9yLCBhbmQgYWxwaGEgPSAxIHdpbGwgYmUgdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gaW50ZXJwb2xhdGUgdG93YXJkcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlcnAoIHYsIGFscGhhICkgewoKICAgIAkJdGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTsKICAgIAkJdGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTsKICAgIAkJdGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTsKICAgIAkJdGhpcy53ICs9ICggdi53IC0gdGhpcy53ICkgKiBhbHBoYTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3JzLCB3aGVyZSBhbHBoYSBpcyB0aGUgcGVyY2VudAogICAgCSAqIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIC0gYWxwaGEgPSAwIHdpbGwgYmUgZmlyc3QgdmVjdG9yLCBhbmQgYWxwaGEgPSAxIHdpbGwKICAgIAkgKiBiZSB0aGUgc2Vjb25kIG9uZS4gVGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdjEgLSBUaGUgZmlyc3QgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yNH0gdjIgLSBUaGUgc2Vjb25kIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkgewoKICAgIAkJdGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhOwogICAgCQl0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7CiAgICAJCXRoaXMueiA9IHYxLnogKyAoIHYyLnogLSB2MS56ICkgKiBhbHBoYTsKICAgIAkJdGhpcy53ID0gdjEudyArICggdjIudyAtIHYxLncgKSAqIGFscGhhOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyB2ZWN0b3IgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3I0fSB2IC0gVGhlIHZlY3RvciB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgdmVjdG9yIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKi8KICAgIAllcXVhbHMoIHYgKSB7CgogICAgCQlyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSAmJiAoIHYudyA9PT0gdGhpcy53ICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgdmVjdG9yJ3MgeCB2YWx1ZSB0byBiZSBgYXJyYXlbIG9mZnNldCBdYCwgeSB2YWx1ZSB0byBiZSBgYXJyYXlbIG9mZnNldCArIDEgXWAsCiAgICAJICogeiB2YWx1ZSB0byBiZSBgYXJyYXlbIG9mZnNldCArIDIgXWAsIHcgdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAzIF1gLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci4KICAgIAkgKi8KICAgIAlmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkgewoKICAgIAkJdGhpcy54ID0gYXJyYXlbIG9mZnNldCBdOwogICAgCQl0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwogICAgCQl0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdOwogICAgCQl0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogV3JpdGVzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsCiAgICAJICogdGhlIG1ldGhvZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSB2ZWN0b3IgY29tcG9uZW50cy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgdmVjdG9yIGNvbXBvbmVudHMuCiAgICAJICovCiAgICAJdG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDsKICAgIAkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejsKICAgIAkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMudzsKCiAgICAJCXJldHVybiBhcnJheTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyB2ZWN0b3IgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7CgogICAgCQl0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKICAgIAkJdGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7CiAgICAJCXRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApOwogICAgCQl0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgZWFjaCBjb21wb25lbnQgb2YgdGhpcyB2ZWN0b3IgdG8gYSBwc2V1ZG8tcmFuZG9tIHZhbHVlIGJldHdlZW4gYDBgIGFuZAogICAgCSAqIGAxYCwgZXhjbHVkaW5nIGAxYC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCXJhbmRvbSgpIHsKCiAgICAJCXRoaXMueCA9IE1hdGgucmFuZG9tKCk7CiAgICAJCXRoaXMueSA9IE1hdGgucmFuZG9tKCk7CiAgICAJCXRoaXMueiA9IE1hdGgucmFuZG9tKCk7CiAgICAJCXRoaXMudyA9IE1hdGgucmFuZG9tKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHsKCiAgICAJCXlpZWxkIHRoaXMueDsKICAgIAkJeWllbGQgdGhpcy55OwogICAgCQl5aWVsZCB0aGlzLno7CiAgICAJCXlpZWxkIHRoaXMudzsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIEEgcmVuZGVyIHRhcmdldCBpcyBhIGJ1ZmZlciB3aGVyZSB0aGUgdmlkZW8gY2FyZCBkcmF3cyBwaXhlbHMgZm9yIGEgc2NlbmUKICAgICAqIHRoYXQgaXMgYmVpbmcgcmVuZGVyZWQgaW4gdGhlIGJhY2tncm91bmQuIEl0IGlzIHVzZWQgaW4gZGlmZmVyZW50IGVmZmVjdHMsCiAgICAgKiBzdWNoIGFzIGFwcGx5aW5nIHBvc3Rwcm9jZXNzaW5nIHRvIGEgcmVuZGVyZWQgaW1hZ2UgYmVmb3JlIGRpc3BsYXlpbmcgaXQKICAgICAqIG9uIHRoZSBzY3JlZW4uCiAgICAgKgogICAgICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlcgogICAgICovCiAgICBjbGFzcyBSZW5kZXJUYXJnZXQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIgewoKICAgIAkvKioKICAgIAkgKiBSZW5kZXIgdGFyZ2V0IG9wdGlvbnMuCiAgICAJICoKICAgIAkgKiBAdHlwZWRlZiB7T2JqZWN0fSBSZW5kZXJUYXJnZXR+T3B0aW9ucwogICAgCSAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2dlbmVyYXRlTWlwbWFwcz1mYWxzZV0gLSBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgb3Igbm90LgogICAgCSAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWFnRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWFnIGZpbHRlci4KICAgIAkgKiBAcHJvcGVydHkge251bWJlcn0gW21pbkZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1pbiBmaWx0ZXIuCiAgICAJICogQHByb3BlcnR5IHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuCiAgICAJICogQHByb3BlcnR5IHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS4KICAgIAkgKiBAcHJvcGVydHkgez9zdHJpbmd9IFtpbnRlcm5hbEZvcm1hdD1udWxsXSAtIFRoZSB0ZXh0dXJlJ3MgaW50ZXJuYWwgZm9ybWF0LgogICAgCSAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgdGV4dHVyZSdzIHV2IHdyYXBwaW5nIG1vZGUuCiAgICAJICogQHByb3BlcnR5IHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB0ZXh0dXJlJ3MgdXYgd3JhcHBpbmcgbW9kZS4KICAgIAkgKiBAcHJvcGVydHkge251bWJlcn0gW2FuaXNvdHJvcHk9MV0gLSBUaGUgdGV4dHVyZSdzIGFuaXNvdHJvcHkgdmFsdWUuCiAgICAJICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb2xvclNwYWNlPU5vQ29sb3JTcGFjZV0gLSBUaGUgdGV4dHVyZSdzIGNvbG9yIHNwYWNlLgogICAgCSAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RlcHRoQnVmZmVyPXRydWVdIC0gV2hldGhlciB0byBhbGxvY2F0ZSBhIGRlcHRoIGJ1ZmZlciBvciBub3QuCiAgICAJICogQHByb3BlcnR5IHtib29sZWFufSBbc3RlbmNpbEJ1ZmZlcj1mYWxzZV0gLSBXaGV0aGVyIHRvIGFsbG9jYXRlIGEgc3RlbmNpbCBidWZmZXIgb3Igbm90LgogICAgCSAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Jlc29sdmVEZXB0aEJ1ZmZlcj10cnVlXSAtIFdoZXRoZXIgdG8gcmVzb2x2ZSB0aGUgZGVwdGggYnVmZmVyIG9yIG5vdC4KICAgIAkgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXNvbHZlU3RlbmNpbEJ1ZmZlcj10cnVlXSAtIFdoZXRoZXIgIHRvIHJlc29sdmUgdGhlIHN0ZW5jaWwgYnVmZmVyIG9yIG5vdC4KICAgIAkgKiBAcHJvcGVydHkgez9UZXh0dXJlfSBbZGVwdGhUZXh0dXJlPW51bGxdIC0gUmVmZXJlbmNlIHRvIGEgZGVwdGggdGV4dHVyZS4KICAgIAkgKiBAcHJvcGVydHkge251bWJlcn0gW3NhbXBsZXM9MF0gLSBUaGUgTVNBQSBzYW1wbGVzIGNvdW50LgogICAgCSAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbY291bnQ9MV0gLSBEZWZpbmVzIHRoZSBudW1iZXIgb2YgY29sb3IgYXR0YWNobWVudHMgLiBNdXN0IGJlIGF0IGxlYXN0IGAxYC4KICAgIAkgKiBAcHJvcGVydHkge251bWJlcn0gW2RlcHRoPTFdIC0gVGhlIHRleHR1cmUgZGVwdGguCiAgICAJICogQHByb3BlcnR5IHtib29sZWFufSBbbXVsdGl2aWV3PWZhbHNlXSAtIFdoZXRoZXIgdGhpcyB0YXJnZXQgaXMgdXNlZCBmb3IgbXVsdGl2aWV3IHJlbmRlcmluZy4KICAgIAkgKi8KCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyByZW5kZXIgdGFyZ2V0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuCiAgICAJICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIG9wdGlvbnMgPSB7fSApIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQlvcHRpb25zID0gT2JqZWN0LmFzc2lnbiggewogICAgCQkJZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZSwKICAgIAkJCWludGVybmFsRm9ybWF0OiBudWxsLAogICAgCQkJbWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsCiAgICAJCQlkZXB0aEJ1ZmZlcjogdHJ1ZSwKICAgIAkJCXN0ZW5jaWxCdWZmZXI6IGZhbHNlLAogICAgCQkJcmVzb2x2ZURlcHRoQnVmZmVyOiB0cnVlLAogICAgCQkJcmVzb2x2ZVN0ZW5jaWxCdWZmZXI6IHRydWUsCiAgICAJCQlkZXB0aFRleHR1cmU6IG51bGwsCiAgICAJCQlzYW1wbGVzOiAwLAogICAgCQkJY291bnQ6IDEsCiAgICAJCQlkZXB0aDogMSwKICAgIAkJCW11bHRpdmlldzogZmFsc2UKICAgIAkJfSwgb3B0aW9ucyApOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNSZW5kZXJUYXJnZXQgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy53aWR0aCA9IHdpZHRoOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMuaGVpZ2h0ID0gaGVpZ2h0OwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBkZXB0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5kZXB0aCA9IG9wdGlvbnMuZGVwdGg7CgogICAgCQkvKioKICAgIAkJICogQSByZWN0YW5ndWxhciBhcmVhIGluc2lkZSB0aGUgcmVuZGVyIHRhcmdldCdzIHZpZXdwb3J0LiBGcmFnbWVudHMgdGhhdCBhcmUKICAgIAkJICogb3V0c2lkZSB0aGUgYXJlYSB3aWxsIGJlIGRpc2NhcmRlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1ZlY3RvcjR9CiAgICAJCSAqIEBkZWZhdWx0ICgwLDAsd2lkdGgsaGVpZ2h0KQogICAgCQkgKi8KICAgIAkJdGhpcy5zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCiAgICAJCS8qKgogICAgCQkgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc2Npc3NvciB0ZXN0IHNob3VsZCBiZSBlbmFibGVkIHdoZW4gcmVuZGVyaW5nIGludG8KICAgIAkJICogdGhpcyByZW5kZXIgdGFyZ2V0IG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLnNjaXNzb3JUZXN0ID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogQSByZWN0YW5ndWxhciBhcmVhIHJlcHJlc2VudGluZyB0aGUgcmVuZGVyIHRhcmdldCdzIHZpZXdwb3J0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yNH0KICAgIAkJICogQGRlZmF1bHQgKDAsMCx3aWR0aCxoZWlnaHQpCiAgICAJCSAqLwogICAgCQl0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCiAgICAJCWNvbnN0IGltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogb3B0aW9ucy5kZXB0aCB9OwoKICAgIAkJY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCBpbWFnZSApOwoKICAgIAkJLyoqCiAgICAJCSAqIEFuIGFycmF5IG9mIHRleHR1cmVzLiBFYWNoIGNvbG9yIGF0dGFjaG1lbnQgaXMgcmVwcmVzZW50ZWQgYXMgYSBzZXBhcmF0ZSB0ZXh0dXJlLgogICAgCQkgKiBIYXMgYXQgbGVhc3QgYSBzaW5nbGUgZW50cnkgZm9yIHRoZSBkZWZhdWx0IGNvbG9yIGF0dGFjaG1lbnQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxUZXh0dXJlPn0KICAgIAkJICovCiAgICAJCXRoaXMudGV4dHVyZXMgPSBbXTsKCiAgICAJCWNvbnN0IGNvdW50ID0gb3B0aW9ucy5jb3VudDsKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7CgogICAgCQkJdGhpcy50ZXh0dXJlc1sgaSBdID0gdGV4dHVyZS5jbG9uZSgpOwogICAgCQkJdGhpcy50ZXh0dXJlc1sgaSBdLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7CiAgICAJCQl0aGlzLnRleHR1cmVzWyBpIF0ucmVuZGVyVGFyZ2V0ID0gdGhpczsKCiAgICAJCX0KCiAgICAJCXRoaXMuX3NldFRleHR1cmVPcHRpb25zKCBvcHRpb25zICk7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byBhbGxvY2F0ZSBhIGRlcHRoIGJ1ZmZlciBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmRlcHRoQnVmZmVyID0gb3B0aW9ucy5kZXB0aEJ1ZmZlcjsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIGFsbG9jYXRlIGEgc3RlbmNpbCBidWZmZXIgb3Igbm90LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlcjsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIHJlc29sdmUgdGhlIGRlcHRoIGJ1ZmZlciBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLnJlc29sdmVEZXB0aEJ1ZmZlciA9IG9wdGlvbnMucmVzb2x2ZURlcHRoQnVmZmVyOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgdG8gcmVzb2x2ZSB0aGUgc3RlbmNpbCBidWZmZXIgb3Igbm90LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5yZXNvbHZlU3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMucmVzb2x2ZVN0ZW5jaWxCdWZmZXI7CgogICAgCQl0aGlzLl9kZXB0aFRleHR1cmUgPSBudWxsOwogICAgCQl0aGlzLmRlcHRoVGV4dHVyZSA9IG9wdGlvbnMuZGVwdGhUZXh0dXJlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBudW1iZXIgb2YgTVNBQSBzYW1wbGVzLgogICAgCQkgKgogICAgCQkgKiBBIHZhbHVlIG9mIGAwYCBkaXNhYmxlcyBNU0FBLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXM7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byB0aGlzIHRhcmdldCBpcyB1c2VkIGluIG11bHRpdmlldyByZW5kZXJpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5tdWx0aXZpZXcgPSBvcHRpb25zLm11bHRpdmlldzsKCiAgICAJfQoKICAgIAlfc2V0VGV4dHVyZU9wdGlvbnMoIG9wdGlvbnMgPSB7fSApIHsKCiAgICAJCWNvbnN0IHZhbHVlcyA9IHsKICAgIAkJCW1pbkZpbHRlcjogTGluZWFyRmlsdGVyLAogICAgCQkJZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZSwKICAgIAkJCWZsaXBZOiBmYWxzZSwKICAgIAkJCWludGVybmFsRm9ybWF0OiBudWxsCiAgICAJCX07CgogICAgCQlpZiAoIG9wdGlvbnMubWFwcGluZyAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLm1hcHBpbmcgPSBvcHRpb25zLm1hcHBpbmc7CiAgICAJCWlmICggb3B0aW9ucy53cmFwUyAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLndyYXBTID0gb3B0aW9ucy53cmFwUzsKICAgIAkJaWYgKCBvcHRpb25zLndyYXBUICE9PSB1bmRlZmluZWQgKSB2YWx1ZXMud3JhcFQgPSBvcHRpb25zLndyYXBUOwogICAgCQlpZiAoIG9wdGlvbnMud3JhcFIgIT09IHVuZGVmaW5lZCApIHZhbHVlcy53cmFwUiA9IG9wdGlvbnMud3JhcFI7CiAgICAJCWlmICggb3B0aW9ucy5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCApIHZhbHVlcy5tYWdGaWx0ZXIgPSBvcHRpb25zLm1hZ0ZpbHRlcjsKICAgIAkJaWYgKCBvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyOwogICAgCQlpZiAoIG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB2YWx1ZXMuZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7CiAgICAJCWlmICggb3B0aW9ucy50eXBlICE9PSB1bmRlZmluZWQgKSB2YWx1ZXMudHlwZSA9IG9wdGlvbnMudHlwZTsKICAgIAkJaWYgKCBvcHRpb25zLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHZhbHVlcy5hbmlzb3Ryb3B5ID0gb3B0aW9ucy5hbmlzb3Ryb3B5OwogICAgCQlpZiAoIG9wdGlvbnMuY29sb3JTcGFjZSAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLmNvbG9yU3BhY2UgPSBvcHRpb25zLmNvbG9yU3BhY2U7CiAgICAJCWlmICggb3B0aW9ucy5mbGlwWSAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLmZsaXBZID0gb3B0aW9ucy5mbGlwWTsKICAgIAkJaWYgKCBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyAhPT0gdW5kZWZpbmVkICkgdmFsdWVzLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzOwogICAgCQlpZiAoIG9wdGlvbnMuaW50ZXJuYWxGb3JtYXQgIT09IHVuZGVmaW5lZCApIHZhbHVlcy5pbnRlcm5hbEZvcm1hdCA9IG9wdGlvbnMuaW50ZXJuYWxGb3JtYXQ7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHR1cmVzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQljb25zdCB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlc1sgaSBdOwogICAgCQkJdGV4dHVyZS5zZXRWYWx1ZXMoIHZhbHVlcyApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoZSB0ZXh0dXJlIHJlcHJlc2VudGluZyB0aGUgZGVmYXVsdCBjb2xvciBhdHRhY2htZW50LgogICAgCSAqCiAgICAJICogQHR5cGUge1RleHR1cmV9CiAgICAJICovCiAgICAJZ2V0IHRleHR1cmUoKSB7CgogICAgCQlyZXR1cm4gdGhpcy50ZXh0dXJlc1sgMCBdOwoKICAgIAl9CgogICAgCXNldCB0ZXh0dXJlKCB2YWx1ZSApIHsKCiAgICAJCXRoaXMudGV4dHVyZXNbIDAgXSA9IHZhbHVlOwoKICAgIAl9CgogICAgCXNldCBkZXB0aFRleHR1cmUoIGN1cnJlbnQgKSB7CgogICAgCQlpZiAoIHRoaXMuX2RlcHRoVGV4dHVyZSAhPT0gbnVsbCApIHRoaXMuX2RlcHRoVGV4dHVyZS5yZW5kZXJUYXJnZXQgPSBudWxsOwogICAgCQlpZiAoIGN1cnJlbnQgIT09IG51bGwgKSBjdXJyZW50LnJlbmRlclRhcmdldCA9IHRoaXM7CgogICAgCQl0aGlzLl9kZXB0aFRleHR1cmUgPSBjdXJyZW50OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEluc3RlYWQgb2Ygc2F2aW5nIHRoZSBkZXB0aCBpbiBhIHJlbmRlcmJ1ZmZlciwgYSB0ZXh0dXJlCiAgICAJICogY2FuIGJlIHVzZWQgaW5zdGVhZCB3aGljaCBpcyB1c2VmdWwgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZwogICAgCSAqIGUuZy4gaW4gY29udGV4dCBvZiBwb3N0LXByb2Nlc3NpbmcuCiAgICAJICoKICAgIAkgKiBAdHlwZSB7P0RlcHRoVGV4dHVyZX0KICAgIAkgKiBAZGVmYXVsdCBudWxsCiAgICAJICovCiAgICAJZ2V0IGRlcHRoVGV4dHVyZSgpIHsKCiAgICAJCXJldHVybiB0aGlzLl9kZXB0aFRleHR1cmU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgc2l6ZSBvZiB0aGlzIHJlbmRlciB0YXJnZXQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGguCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSAtIFRoZSBkZXB0aC4KICAgIAkgKi8KICAgIAlzZXRTaXplKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCA9IDEgKSB7CgogICAgCQlpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgfHwgdGhpcy5kZXB0aCAhPT0gZGVwdGggKSB7CgogICAgCQkJdGhpcy53aWR0aCA9IHdpZHRoOwogICAgCQkJdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAJCQl0aGlzLmRlcHRoID0gZGVwdGg7CgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMudGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCXRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS53aWR0aCA9IHdpZHRoOwogICAgCQkJCXRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7CiAgICAJCQkJdGhpcy50ZXh0dXJlc1sgaSBdLmltYWdlLmRlcHRoID0gZGVwdGg7CiAgICAJCQkJdGhpcy50ZXh0dXJlc1sgaSBdLmlzQXJyYXlUZXh0dXJlID0gdGhpcy50ZXh0dXJlc1sgaSBdLmltYWdlLmRlcHRoID4gMTsKCiAgICAJCQl9CgogICAgCQkJdGhpcy5kaXNwb3NlKCk7CgogICAgCQl9CgogICAgCQl0aGlzLnZpZXdwb3J0LnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApOwogICAgCQl0aGlzLnNjaXNzb3Iuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyByZW5kZXIgdGFyZ2V0IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtSZW5kZXJUYXJnZXR9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIHNldHRpbmdzIG9mIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0LiBUaGlzIGlzIGEgc3RydWN0dXJhbCBjb3B5IHNvCiAgICAJICogbm8gcmVzb3VyY2VzIGFyZSBzaGFyZWQgYmV0d2VlbiByZW5kZXIgdGFyZ2V0cyBhZnRlciB0aGUgY29weS4gVGhhdCBpbmNsdWRlcwogICAgCSAqIGFsbCBNUlQgdGV4dHVyZXMgYW5kIHRoZSBkZXB0aCB0ZXh0dXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtSZW5kZXJUYXJnZXR9IHNvdXJjZSAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7UmVuZGVyVGFyZ2V0fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7CiAgICAJCXRoaXMuaGVpZ2h0ID0gc291cmNlLmhlaWdodDsKICAgIAkJdGhpcy5kZXB0aCA9IHNvdXJjZS5kZXB0aDsKCiAgICAJCXRoaXMuc2Npc3Nvci5jb3B5KCBzb3VyY2Uuc2Npc3NvciApOwogICAgCQl0aGlzLnNjaXNzb3JUZXN0ID0gc291cmNlLnNjaXNzb3JUZXN0OwoKICAgIAkJdGhpcy52aWV3cG9ydC5jb3B5KCBzb3VyY2Uudmlld3BvcnQgKTsKCiAgICAJCXRoaXMudGV4dHVyZXMubGVuZ3RoID0gMDsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSBzb3VyY2UudGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJdGhpcy50ZXh0dXJlc1sgaSBdID0gc291cmNlLnRleHR1cmVzWyBpIF0uY2xvbmUoKTsKICAgIAkJCXRoaXMudGV4dHVyZXNbIGkgXS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlOwogICAgCQkJdGhpcy50ZXh0dXJlc1sgaSBdLnJlbmRlclRhcmdldCA9IHRoaXM7CgogICAgCQkJLy8gZW5zdXJlIGltYWdlIG9iamVjdCBpcyBub3Qgc2hhcmVkLCBzZWUgIzIwMzI4CgogICAgCQkJY29uc3QgaW1hZ2UgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnRleHR1cmVzWyBpIF0uaW1hZ2UgKTsKICAgIAkJCXRoaXMudGV4dHVyZXNbIGkgXS5zb3VyY2UgPSBuZXcgU291cmNlKCBpbWFnZSApOwoKICAgIAkJfQoKICAgIAkJdGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjsKICAgIAkJdGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7CgogICAgCQl0aGlzLnJlc29sdmVEZXB0aEJ1ZmZlciA9IHNvdXJjZS5yZXNvbHZlRGVwdGhCdWZmZXI7CiAgICAJCXRoaXMucmVzb2x2ZVN0ZW5jaWxCdWZmZXIgPSBzb3VyY2UucmVzb2x2ZVN0ZW5jaWxCdWZmZXI7CgogICAgCQlpZiAoIHNvdXJjZS5kZXB0aFRleHR1cmUgIT09IG51bGwgKSB0aGlzLmRlcHRoVGV4dHVyZSA9IHNvdXJjZS5kZXB0aFRleHR1cmUuY2xvbmUoKTsKCiAgICAJCXRoaXMuc2FtcGxlcyA9IHNvdXJjZS5zYW1wbGVzOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzCiAgICAJICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuCiAgICAJICoKICAgIAkgKiBAZmlyZXMgUmVuZGVyVGFyZ2V0I2Rpc3Bvc2UKICAgIAkgKi8KICAgIAlkaXNwb3NlKCkgewoKICAgIAkJdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIHJlbmRlciB0YXJnZXQgdXNlZCBpbiBjb250ZXh0IG9mIHtAbGluayBXZWJHTFJlbmRlcmVyfS4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgUmVuZGVyVGFyZ2V0CiAgICAgKi8KICAgIGNsYXNzIFdlYkdMUmVuZGVyVGFyZ2V0IGV4dGVuZHMgUmVuZGVyVGFyZ2V0IHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyAzRCByZW5kZXIgdGFyZ2V0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuCiAgICAJICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIG9wdGlvbnMgPSB7fSApIHsKCiAgICAJCXN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc1dlYkdMUmVuZGVyVGFyZ2V0ID0gdHJ1ZTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGV4dHVyZXMgZGlyZWN0bHkgZnJvbSByYXcgYnVmZmVyIGRhdGEuCiAgICAgKgogICAgICogQGF1Z21lbnRzIFRleHR1cmUKICAgICAqLwogICAgY2xhc3MgRGF0YUFycmF5VGV4dHVyZSBleHRlbmRzIFRleHR1cmUgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGRhdGEgYXJyYXkgdGV4dHVyZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7P1R5cGVkQXJyYXl9IFtkYXRhPW51bGxdIC0gVGhlIGJ1ZmZlciBkYXRhLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGg9MV0gLSBUaGUgd2lkdGggb2YgdGhlIHRleHR1cmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgZGVwdGggb2YgdGhlIHRleHR1cmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGRhdGEgPSBudWxsLCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSApIHsKCiAgICAJCXN1cGVyKCBudWxsICk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0RhdGFBcnJheVRleHR1cmUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBpbWFnZSBkZWZpbml0aW9uIG9mIGEgZGF0YSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7e2RhdGE6VHlwZWRBcnJheSx3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcixkZXB0aDpudW1iZXJ9fQogICAgCQkgKi8KICAgIAkJdGhpcy5pbWFnZSA9IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggfTsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIG1vcmUgdGhhbiBvbmUgcGl4ZWwuCiAgICAJCSAqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9CiAgICAJCSAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXIKICAgIAkJICovCiAgICAJCXRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIGxlc3MgdGhhbiBvbmUgcGl4ZWwuCiAgICAJCSAqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9CiAgICAJCSAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXIKICAgIAkJICovCiAgICAJCXRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGRlZmluZXMgaG93IHRoZSB0ZXh0dXJlIGlzIHdyYXBwZWQgaW4gdGhlIGRlcHRoIGFuZCBjb3JyZXNwb25kcyB0bwogICAgCQkgKiAqVyogaW4gVVZXIG1hcHBpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoUmVwZWF0V3JhcHBpbmd8Q2xhbXBUb0VkZ2VXcmFwcGluZ3xNaXJyb3JlZFJlcGVhdFdyYXBwaW5nKX0KICAgIAkJICogQGRlZmF1bHQgQ2xhbXBUb0VkZ2VXcmFwcGluZwogICAgCQkgKi8KICAgIAkJdGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byBnZW5lcmF0ZSBtaXBtYXBzIChpZiBwb3NzaWJsZSkgZm9yIGEgdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW4KICAgIAkJICogdXBsb2FkZWQgdG8gdGhlIEdQVS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5mbGlwWSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IHJlcXVpcmVtZW50cyBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggcGl4ZWwgcm93IGluIG1lbW9yeS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgMWAgYnkgZGVmYXVsdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTsKCiAgICAJCS8qKgogICAgCQkgKiBBIHNldCBvZiBhbGwgbGF5ZXJzIHdoaWNoIG5lZWQgdG8gYmUgdXBkYXRlZCBpbiB0aGUgdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1NldDxudW1iZXI+fQogICAgCQkgKi8KICAgIAkJdGhpcy5sYXllclVwZGF0ZXMgPSBuZXcgU2V0KCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGVzY3JpYmVzIHRoYXQgYSBzcGVjaWZpYyBsYXllciBvZiB0aGUgdGV4dHVyZSBuZWVkcyB0byBiZSB1cGRhdGVkLgogICAgCSAqIE5vcm1hbGx5IHdoZW4ge0BsaW5rIFRleHR1cmUjbmVlZHNVcGRhdGV9IGlzIHNldCB0byBgdHJ1ZWAsIHRoZQogICAgCSAqIGVudGlyZSBkYXRhIHRleHR1cmUgYXJyYXkgaXMgc2VudCB0byB0aGUgR1BVLiBNYXJraW5nIHNwZWNpZmljCiAgICAJICogbGF5ZXJzIHdpbGwgb25seSB0cmFuc21pdCBzdWJzZXRzIG9mIGFsbCBtaXBtYXBzIGFzc29jaWF0ZWQgd2l0aCBhCiAgICAJICogc3BlY2lmaWMgZGVwdGggaW4gdGhlIGFycmF5IHdoaWNoIGlzIG9mdGVuIG11Y2ggbW9yZSBwZXJmb3JtYW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxheWVySW5kZXggLSBUaGUgbGF5ZXIgaW5kZXggdGhhdCBzaG91bGQgYmUgdXBkYXRlZC4KICAgIAkgKi8KICAgIAlhZGRMYXllclVwZGF0ZSggbGF5ZXJJbmRleCApIHsKCiAgICAJCXRoaXMubGF5ZXJVcGRhdGVzLmFkZCggbGF5ZXJJbmRleCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlc2V0cyB0aGUgbGF5ZXIgdXBkYXRlcyByZWdpc3RyeS4KICAgIAkgKi8KICAgIAljbGVhckxheWVyVXBkYXRlcygpIHsKCiAgICAJCXRoaXMubGF5ZXJVcGRhdGVzLmNsZWFyKCk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgdGhyZWUtZGltZW5zaW9uYWwgdGV4dHVyZSBmcm9tIHJhdyBkYXRhLCB3aXRoIHBhcmFtZXRlcnMgdG8KICAgICAqIGRpdmlkZSBpdCBpbnRvIHdpZHRoLCBoZWlnaHQsIGFuZCBkZXB0aC4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgVGV4dHVyZQogICAgICovCiAgICBjbGFzcyBEYXRhM0RUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgZGF0YSBhcnJheSB0ZXh0dXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHs/VHlwZWRBcnJheX0gW2RhdGE9bnVsbF0gLSBUaGUgYnVmZmVyIGRhdGEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSAtIFRoZSBkZXB0aCBvZiB0aGUgdGV4dHVyZS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxICkgewoKICAgIAkJLy8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuCiAgICAJCS8vIFVzZXJzIGNhbiBzdGlsbCBzZXQgaW4gRGF0YTNEVGV4dHVyZSBkaXJlY3RseS4KICAgIAkJLy8KICAgIAkJLy8JY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhM0RUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApOwogICAgCQkvLyAJdGV4dHVyZS5hbmlzb3Ryb3B5ID0gMTY7CiAgICAJCS8vCiAgICAJCS8vIFNlZSAjMTQ4MzkKCiAgICAJCXN1cGVyKCBudWxsICk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0RhdGEzRFRleHR1cmUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBpbWFnZSBkZWZpbml0aW9uIG9mIGEgZGF0YSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7e2RhdGE6VHlwZWRBcnJheSx3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcixkZXB0aDpudW1iZXJ9fQogICAgCQkgKi8KICAgIAkJdGhpcy5pbWFnZSA9IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggfTsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIG1vcmUgdGhhbiBvbmUgcGl4ZWwuCiAgICAJCSAqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9CiAgICAJCSAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXIKICAgIAkJICovCiAgICAJCXRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIGxlc3MgdGhhbiBvbmUgcGl4ZWwuCiAgICAJCSAqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9CiAgICAJCSAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXIKICAgIAkJICovCiAgICAJCXRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGRlZmluZXMgaG93IHRoZSB0ZXh0dXJlIGlzIHdyYXBwZWQgaW4gdGhlIGRlcHRoIGFuZCBjb3JyZXNwb25kcyB0bwogICAgCQkgKiAqVyogaW4gVVZXIG1hcHBpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoUmVwZWF0V3JhcHBpbmd8Q2xhbXBUb0VkZ2VXcmFwcGluZ3xNaXJyb3JlZFJlcGVhdFdyYXBwaW5nKX0KICAgIAkJICogQGRlZmF1bHQgQ2xhbXBUb0VkZ2VXcmFwcGluZwogICAgCQkgKi8KICAgIAkJdGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byBnZW5lcmF0ZSBtaXBtYXBzIChpZiBwb3NzaWJsZSkgZm9yIGEgdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW4KICAgIAkJICogdXBsb2FkZWQgdG8gdGhlIEdQVS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5mbGlwWSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IHJlcXVpcmVtZW50cyBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggcGl4ZWwgcm93IGluIG1lbW9yeS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgMWAgYnkgZGVmYXVsdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIFJlcHJlc2VudHMgYW4gYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQikgaW4gM0Qgc3BhY2UuCiAgICAgKi8KICAgIGNsYXNzIEJveDMgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGJvdW5kaW5nIGJveC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW21pbj0oSW5maW5pdHksSW5maW5pdHksSW5maW5pdHkpXSAtIEEgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIGJveC4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFttYXg9KC1JbmZpbml0eSwtSW5maW5pdHksLUluZmluaXR5KV0gLSBBIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBib3guCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIG1pbiA9IG5ldyBWZWN0b3IzKCArIEluZmluaXR5LCArIEluZmluaXR5LCArIEluZmluaXR5ICksIG1heCA9IG5ldyBWZWN0b3IzKCAtIEluZmluaXR5LCAtIEluZmluaXR5LCAtIEluZmluaXR5ICkgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0JveDMgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgYm94LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMubWluID0gbWluOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgYm94LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMubWF4ID0gbWF4OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGxvd2VyIGFuZCB1cHBlciBib3VuZGFyaWVzIG9mIHRoaXMgYm94LgogICAgCSAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBtZXRob2Qgb25seSBjb3BpZXMgdGhlIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBvYmplY3RzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBtaW4gLSBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIGJveC4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IG1heCAtIFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgYm94LgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCXNldCggbWluLCBtYXggKSB7CgogICAgCQl0aGlzLm1pbi5jb3B5KCBtaW4gKTsKICAgIAkJdGhpcy5tYXguY29weSggbWF4ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYm91bmRzIG9mIHRoaXMgYm94IHNvIGl0IGVuY2xvc2VzIHRoZSBwb3NpdGlvbiBkYXRhCiAgICAJICogaW4gdGhlIGdpdmVuIGFycmF5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgM0QgcG9zaXRpb24gZGF0YS4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAlzZXRGcm9tQXJyYXkoIGFycmF5ICkgewoKICAgIAkJdGhpcy5tYWtlRW1wdHkoKTsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArPSAzICkgewoKICAgIAkJCXRoaXMuZXhwYW5kQnlQb2ludCggX3ZlY3RvciRiLmZyb21BcnJheSggYXJyYXksIGkgKSApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvdW5kcyBvZiB0aGlzIGJveCBzbyBpdCBlbmNsb3NlcyB0aGUgcG9zaXRpb24gZGF0YQogICAgCSAqIGluIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIEEgYnVmZmVyIGF0dHJpYnV0ZSBob2xkaW5nIDNEIHBvc2l0aW9uIGRhdGEuCiAgICAJICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgewoKICAgIAkJdGhpcy5tYWtlRW1wdHkoKTsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQl0aGlzLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkYi5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkgKSApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvdW5kcyBvZiB0aGlzIGJveCBzbyBpdCBlbmNsb3NlcyB0aGUgcG9zaXRpb24gZGF0YQogICAgCSAqIGluIHRoZSBnaXZlbiBhcnJheS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMz59IHBvaW50cyAtIEFuIGFycmF5IGhvbGRpbmcgM0QgcG9zaXRpb24gZGF0YSBhcyBpbnN0YW5jZXMgb2Yge0BsaW5rIFZlY3RvcjN9LgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCXNldEZyb21Qb2ludHMoIHBvaW50cyApIHsKCiAgICAJCXRoaXMubWFrZUVtcHR5KCk7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCXRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENlbnRlcnMgdGhpcyBib3ggb24gdGhlIGdpdmVuIGNlbnRlciB2ZWN0b3IgYW5kIHNldHMgdGhpcyBib3gncyB3aWR0aCwgaGVpZ2h0IGFuZAogICAgCSAqIGRlcHRoIHRvIHRoZSBnaXZlbiBzaXplIHZhbHVlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gY2VudGVyIC0gVGhlIGNlbnRlciBvZiB0aGUgYm94LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gc2l6ZSAtIFRoZSB4LCB5IGFuZCB6IGRpbWVuc2lvbnMgb2YgdGhlIGJveC4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAlzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkgewoKICAgIAkJY29uc3QgaGFsZlNpemUgPSBfdmVjdG9yJGIuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTsKCiAgICAJCXRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTsKICAgIAkJdGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggZm9yIHRoZSBnaXZlbiAzRCBvYmplY3QKICAgIAkgKiAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksIGFjY291bnRpbmcgZm9yIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsCiAgICAJICogd29ybGQgdHJhbnNmb3Jtcy4gVGhlIGZ1bmN0aW9uIG1heSByZXN1bHQgaW4gYSBsYXJnZXIgYm94IHRoYW4gc3RyaWN0bHkgbmVjZXNzYXJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byBjb21wdXRlIHRoZSBib3VuZGluZyBib3ggZm9yLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWNpc2U9ZmFsc2VdIC0gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIG1ldGhvZCBjb21wdXRlcyB0aGUgc21hbGxlc3QKICAgIAkgKiB3b3JsZC1heGlzLWFsaWduZWQgYm91bmRpbmcgYm94IGF0IHRoZSBleHBlbnNlIG9mIG1vcmUgY29tcHV0YXRpb24uCiAgICAJICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJc2V0RnJvbU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7CgogICAgCQl0aGlzLm1ha2VFbXB0eSgpOwoKICAgIAkJcmV0dXJuIHRoaXMuZXhwYW5kQnlPYmplY3QoIG9iamVjdCwgcHJlY2lzZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgYm94IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGJveCB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJY29weSggYm94ICkgewoKICAgIAkJdGhpcy5taW4uY29weSggYm94Lm1pbiApOwogICAgCQl0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNYWtlcyB0aGlzIGJveCBlbXB0eSB3aGljaCBtZWFucyBpbiBlbmNsb3NlcyBhIHplcm8gc3BhY2UgaW4gM0QuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAltYWtlRW1wdHkoKSB7CgogICAgCQl0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9IHRoaXMubWluLnogPSArIEluZmluaXR5OwogICAgCQl0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYm94IGluY2x1ZGVzIHplcm8gcG9pbnRzIHdpdGhpbiBpdHMgYm91bmRzLgogICAgCSAqIE5vdGUgdGhhdCBhIGJveCB3aXRoIGVxdWFsIGxvd2VyIGFuZCB1cHBlciBib3VuZHMgc3RpbGwgaW5jbHVkZXMgb25lCiAgICAJICogcG9pbnQsIHRoZSBvbmUgYm90aCBib3VuZHMgc2hhcmUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgYm94IGlzIGVtcHR5IG9yIG5vdC4KICAgIAkgKi8KICAgIAlpc0VtcHR5KCkgewoKICAgIAkJLy8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXMKCiAgICAJCXJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApIHx8ICggdGhpcy5tYXgueiA8IHRoaXMubWluLnogKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBjZW50ZXIgcG9pbnQgb2YgdGhpcyBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBjZW50ZXIgcG9pbnQuCiAgICAJICovCiAgICAJZ2V0Q2VudGVyKCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGRpbWVuc2lvbnMgb2YgdGhpcyBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBzaXplLgogICAgCSAqLwogICAgCWdldFNpemUoIHRhcmdldCApIHsKCiAgICAJCXJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLm1heCwgdGhpcy5taW4gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgYm94IHRvIGluY2x1ZGUgdGhlIGdpdmVuIHBvaW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBieSB0aGUgYm91bmRpbmcgYm94LgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCWV4cGFuZEJ5UG9pbnQoIHBvaW50ICkgewoKICAgIAkJdGhpcy5taW4ubWluKCBwb2ludCApOwogICAgCQl0aGlzLm1heC5tYXgoIHBvaW50ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHBhbmRzIHRoaXMgYm94IGVxdWlsYXRlcmFsbHkgYnkgdGhlIGdpdmVuIHZlY3Rvci4gVGhlIHdpZHRoIG9mIHRoaXMKICAgIAkgKiBib3ggd2lsbCBiZSBleHBhbmRlZCBieSB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBpbiBib3RoCiAgICAJICogZGlyZWN0aW9ucy4gVGhlIGhlaWdodCBvZiB0aGlzIGJveCB3aWxsIGJlIGV4cGFuZGVkIGJ5IHRoZSB5IGNvbXBvbmVudCBvZgogICAgCSAqIHRoZSB2ZWN0b3IgaW4gYm90aCBkaXJlY3Rpb25zLiBUaGUgZGVwdGggb2YgdGhpcyBib3ggd2lsbCBiZQogICAgCSAqIGV4cGFuZGVkIGJ5IHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGluIGJvdGggZGlyZWN0aW9ucy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdmVjdG9yIC0gVGhlIHZlY3RvciB0aGF0IHNob3VsZCBleHBhbmQgdGhlIGJvdW5kaW5nIGJveC4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAlleHBhbmRCeVZlY3RvciggdmVjdG9yICkgewoKICAgIAkJdGhpcy5taW4uc3ViKCB2ZWN0b3IgKTsKICAgIAkJdGhpcy5tYXguYWRkKCB2ZWN0b3IgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEV4cGFuZHMgZWFjaCBkaW1lbnNpb24gb2YgdGhlIGJveCBieSB0aGUgZ2l2ZW4gc2NhbGFyLiBJZiBuZWdhdGl2ZSwgdGhlCiAgICAJICogZGltZW5zaW9ucyBvZiB0aGUgYm94IHdpbGwgYmUgY29udHJhY3RlZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHZhbHVlIHRoYXQgc2hvdWxkIGV4cGFuZCB0aGUgYm91bmRpbmcgYm94LgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCWV4cGFuZEJ5U2NhbGFyKCBzY2FsYXIgKSB7CgogICAgCQl0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7CiAgICAJCXRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgYm94IHRvIGluY2x1ZGUgdGhlIGdpdmVuIDNEIG9iamVjdCBhbmQKICAgIAkgKiBpdHMgY2hpbGRyZW4sIGFjY291bnRpbmcgZm9yIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsIHdvcmxkCiAgICAJICogdHJhbnNmb3Jtcy4gVGhlIGZ1bmN0aW9uIG1heSByZXN1bHQgaW4gYSBsYXJnZXIgYm94IHRoYW4gc3RyaWN0bHkKICAgIAkgKiBuZWNlc3NhcnkgKHVubGVzcyB0aGUgcHJlY2lzZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIHRydWUpLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0aGF0IHNob3VsZCBleHBhbmQgdGhlIGJvdW5kaW5nIGJveC4KICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IHByZWNpc2UgLSBJZiBzZXQgdG8gYHRydWVgLCB0aGUgbWV0aG9kIGV4cGFuZHMgdGhlIGJvdW5kaW5nIGJveAogICAgCSAqIGFzIGxpdHRsZSBhcyBuZWNlc3NhcnkgYXQgdGhlIGV4cGVuc2Ugb2YgbW9yZSBjb21wdXRhdGlvbi4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAlleHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7CgogICAgCQkvLyBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhbiBvYmplY3QgKGluY2x1ZGluZyBpdHMgY2hpbGRyZW4pLAogICAgCQkvLyBhY2NvdW50aW5nIGZvciBib3RoIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsIHdvcmxkIHRyYW5zZm9ybXMKCiAgICAJCW9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7CgogICAgCQljb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTsKCiAgICAJCWlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQljb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApOwoKICAgIAkJCS8vIHByZWNpc2UgQUFCQiBjb21wdXRhdGlvbiBiYXNlZCBvbiB2ZXJ0ZXggZGF0YSByZXF1aXJlcyBhdCBsZWFzdCBhIHBvc2l0aW9uIGF0dHJpYnV0ZS4KICAgIAkJCS8vIGluc3RhbmNpbmcgaXNuJ3Qgc3VwcG9ydGVkIHNvIGZhciBhbmQgdXNlcyB0aGUgbm9ybWFsIChjb25zZXJ2YXRpdmUpIGNvZGUgcGF0aC4KCiAgICAJCQlpZiAoIHByZWNpc2UgPT09IHRydWUgJiYgcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICE9PSB0cnVlICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQlpZiAoIG9iamVjdC5pc01lc2ggPT09IHRydWUgKSB7CgogICAgCQkJCQkJb2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBpLCBfdmVjdG9yJGIgKTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJX3ZlY3RvciRiLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlfdmVjdG9yJGIuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTsKICAgIAkJCQkJdGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yJGIgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWlmICggb2JqZWN0LmJvdW5kaW5nQm94ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQkvLyBvYmplY3QtbGV2ZWwgYm91bmRpbmcgYm94CgogICAgCQkJCQlpZiAoIG9iamVjdC5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHsKCiAgICAJCQkJCQlvYmplY3QuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgogICAgCQkJCQl9CgogICAgCQkJCQlfYm94JDQuY29weSggb2JqZWN0LmJvdW5kaW5nQm94ICk7CgoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJLy8gZ2VvbWV0cnktbGV2ZWwgYm91bmRpbmcgYm94CgogICAgCQkJCQlpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkgewoKICAgIAkJCQkJCWdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJX2JveCQ0LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICk7CgogICAgCQkJCX0KCiAgICAJCQkJX2JveCQ0LmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgogICAgCQkJCXRoaXMudW5pb24oIF9ib3gkNCApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQl0aGlzLmV4cGFuZEJ5T2JqZWN0KCBjaGlsZHJlblsgaSBdLCBwcmVjaXNlICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcG9pbnQgbGllcyB3aXRoaW4gb3Igb24gdGhlIGJvdW5kYXJpZXMgb2YgdGhpcyBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIHRlc3QuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm91bmRpbmcgYm94IGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludCBvciBub3QuCiAgICAJICovCiAgICAJY29udGFpbnNQb2ludCggcG9pbnQgKSB7CgogICAgCQlyZXR1cm4gcG9pbnQueCA+PSB0aGlzLm1pbi54ICYmIHBvaW50LnggPD0gdGhpcy5tYXgueCAmJgogICAgCQkJcG9pbnQueSA+PSB0aGlzLm1pbi55ICYmIHBvaW50LnkgPD0gdGhpcy5tYXgueSAmJgogICAgCQkJcG9pbnQueiA+PSB0aGlzLm1pbi56ICYmIHBvaW50LnogPD0gdGhpcy5tYXguejsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGJvdW5kaW5nIGJveCBpbmNsdWRlcyB0aGUgZW50aXJldHkgb2YgdGhlIGdpdmVuIGJvdW5kaW5nIGJveC4KICAgIAkgKiBJZiB0aGlzIGJveCBhbmQgdGhlIGdpdmVuIG9uZSBhcmUgaWRlbnRpY2FsLCB0aGlzIGZ1bmN0aW9uIGFsc28gcmV0dXJucyBgdHJ1ZWAuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3VuZGluZyBib3ggY29udGFpbnMgdGhlIGdpdmVuIGJvdW5kaW5nIGJveCBvciBub3QuCiAgICAJICovCiAgICAJY29udGFpbnNCb3goIGJveCApIHsKCiAgICAJCXJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJgogICAgCQkJdGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4LnkgJiYKICAgIAkJCXRoaXMubWluLnogPD0gYm94Lm1pbi56ICYmIGJveC5tYXgueiA8PSB0aGlzLm1heC56OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBwb2ludCBhcyBhIHByb3BvcnRpb24gb2YgdGhpcyBib3gncyB3aWR0aCwgaGVpZ2h0IGFuZCBkZXB0aC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBBIHBvaW50IGluIDNEIHNwYWNlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gQSBwb2ludCBhcyBhIHByb3BvcnRpb24gb2YgdGhpcyBib3gncyB3aWR0aCwgaGVpZ2h0IGFuZCBkZXB0aC4KICAgIAkgKi8KICAgIAlnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7CgogICAgCQkvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveAogICAgCQkvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLgoKICAgIAkJcmV0dXJuIHRhcmdldC5zZXQoCiAgICAJCQkoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksCiAgICAJCQkoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55ICksCiAgICAJCQkoIHBvaW50LnogLSB0aGlzLm1pbi56ICkgLyAoIHRoaXMubWF4LnogLSB0aGlzLm1pbi56ICkKICAgIAkJKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0byB0ZXN0LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIGJveCBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJaW50ZXJzZWN0c0JveCggYm94ICkgewoKICAgIAkJLy8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuCiAgICAJCXJldHVybiBib3gubWF4LnggPj0gdGhpcy5taW4ueCAmJiBib3gubWluLnggPD0gdGhpcy5tYXgueCAmJgogICAgCQkJYm94Lm1heC55ID49IHRoaXMubWluLnkgJiYgYm94Lm1pbi55IDw9IHRoaXMubWF4LnkgJiYKICAgIAkJCWJveC5tYXgueiA+PSB0aGlzLm1pbi56ICYmIGJveC5taW4ueiA8PSB0aGlzLm1heC56OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBib3VuZGluZyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBib3VuZGluZyBzcGhlcmUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBib3VuZGluZyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCWludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHsKCiAgICAJCS8vIEZpbmQgdGhlIHBvaW50IG9uIHRoZSBBQUJCIGNsb3Nlc3QgdG8gdGhlIHNwaGVyZSBjZW50ZXIuCiAgICAJCXRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgX3ZlY3RvciRiICk7CgogICAgCQkvLyBJZiB0aGF0IHBvaW50IGlzIGluc2lkZSB0aGUgc3BoZXJlLCB0aGUgQUFCQiBhbmQgc3BoZXJlIGludGVyc2VjdC4KICAgIAkJcmV0dXJuIF92ZWN0b3IkYi5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcGxhbmUgaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwbGFuZSBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApIHsKCiAgICAJCS8vIFdlIGNvbXB1dGUgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZG90IHByb2R1Y3QgdmFsdWVzLiBJZiB0aG9zZSB2YWx1ZXMKICAgIAkJLy8gYXJlIG9uIHRoZSBzYW1lIHNpZGUgKGJhY2sgb3IgZnJvbnQpIG9mIHRoZSBwbGFuZSwgdGhlbiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uCgogICAgCQlsZXQgbWluLCBtYXg7CgogICAgCQlpZiAoIHBsYW5lLm5vcm1hbC54ID4gMCApIHsKCiAgICAJCQltaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLng7CiAgICAJCQltYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCW1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDsKICAgIAkJCW1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDsKCiAgICAJCX0KCiAgICAJCWlmICggcGxhbmUubm9ybWFsLnkgPiAwICkgewoKICAgIAkJCW1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWluLnk7CiAgICAJCQltYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQltaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55OwogICAgCQkJbWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTsKCiAgICAJCX0KCiAgICAJCWlmICggcGxhbmUubm9ybWFsLnogPiAwICkgewoKICAgIAkJCW1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7CiAgICAJCQltYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQltaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56OwogICAgCQkJbWF4ICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5taW4uejsKCiAgICAJCX0KCiAgICAJCXJldHVybiAoIG1pbiA8PSAtIHBsYW5lLmNvbnN0YW50ICYmIG1heCA+PSAtIHBsYW5lLmNvbnN0YW50ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHRyaWFuZ2xlIGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VHJpYW5nbGV9IHRyaWFuZ2xlIC0gVGhlIHRyaWFuZ2xlIHRvIHRlc3QuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gdHJpYW5nbGUgaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCWludGVyc2VjdHNUcmlhbmdsZSggdHJpYW5nbGUgKSB7CgogICAgCQlpZiAoIHRoaXMuaXNFbXB0eSgpICkgewoKICAgIAkJCXJldHVybiBmYWxzZTsKCiAgICAJCX0KCiAgICAJCS8vIGNvbXB1dGUgYm94IGNlbnRlciBhbmQgZXh0ZW50cwogICAgCQl0aGlzLmdldENlbnRlciggX2NlbnRlciApOwogICAgCQlfZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgX2NlbnRlciApOwoKICAgIAkJLy8gdHJhbnNsYXRlIHRyaWFuZ2xlIHRvIGFhYmIgb3JpZ2luCiAgICAJCV92MCQyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmEsIF9jZW50ZXIgKTsKICAgIAkJX3YxJDcuc3ViVmVjdG9ycyggdHJpYW5nbGUuYiwgX2NlbnRlciApOwogICAgCQlfdjIkNC5zdWJWZWN0b3JzKCB0cmlhbmdsZS5jLCBfY2VudGVyICk7CgogICAgCQkvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGUKICAgIAkJX2YwLnN1YlZlY3RvcnMoIF92MSQ3LCBfdjAkMiApOwogICAgCQlfZjEuc3ViVmVjdG9ycyggX3YyJDQsIF92MSQ3ICk7CiAgICAJCV9mMi5zdWJWZWN0b3JzKCBfdjAkMiwgX3YyJDQgKTsKCiAgICAJCS8vIHRlc3QgYWdhaW5zdCBheGVzIHRoYXQgYXJlIGdpdmVuIGJ5IGNyb3NzIHByb2R1Y3QgY29tYmluYXRpb25zIG9mIHRoZSBlZGdlcyBvZiB0aGUgdHJpYW5nbGUgYW5kIHRoZSBlZGdlcyBvZiB0aGUgYWFiYgogICAgCQkvLyBtYWtlIGFuIGF4aXMgdGVzdGluZyBvZiBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSBhYWJiIGFnYWluc3QgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgdHJpYW5nbGUgPSA5IGF4aXMgb2Ygc2VwYXJhdGlvbgogICAgCQkvLyBheGlzX2lqID0gdV9pIHggZl9qICh1MCwgdTEsIHUyID0gZmFjZSBub3JtYWxzIG9mIGFhYmIgPSB4LHkseiBheGVzIHZlY3RvcnMgc2luY2UgYWFiYiBpcyBheGlzIGFsaWduZWQpCiAgICAJCWxldCBheGVzID0gWwogICAgCQkJMCwgLSBfZjAueiwgX2YwLnksIDAsIC0gX2YxLnosIF9mMS55LCAwLCAtIF9mMi56LCBfZjIueSwKICAgIAkJCV9mMC56LCAwLCAtIF9mMC54LCBfZjEueiwgMCwgLSBfZjEueCwgX2YyLnosIDAsIC0gX2YyLngsCiAgICAJCQktIF9mMC55LCBfZjAueCwgMCwgLSBfZjEueSwgX2YxLngsIDAsIC0gX2YyLnksIF9mMi54LCAwCiAgICAJCV07CiAgICAJCWlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQ0LCBfZXh0ZW50cyApICkgewoKICAgIAkJCXJldHVybiBmYWxzZTsKCiAgICAJCX0KCiAgICAJCS8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYgogICAgCQlheGVzID0gWyAxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxIF07CiAgICAJCWlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQ0LCBfZXh0ZW50cyApICkgewoKICAgIAkJCXJldHVybiBmYWxzZTsKCiAgICAJCX0KCiAgICAJCS8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlCiAgICAJCS8vIHVzZSBhbHJlYWR5IGV4aXN0aW5nIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycyBoZXJlCiAgICAJCV90cmlhbmdsZU5vcm1hbC5jcm9zc1ZlY3RvcnMoIF9mMCwgX2YxICk7CiAgICAJCWF4ZXMgPSBbIF90cmlhbmdsZU5vcm1hbC54LCBfdHJpYW5nbGVOb3JtYWwueSwgX3RyaWFuZ2xlTm9ybWFsLnogXTsKCiAgICAJCXJldHVybiBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQ0LCBfZXh0ZW50cyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENsYW1wcyB0aGUgZ2l2ZW4gcG9pbnQgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhpcyBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIGNsYW1wLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNsYW1wZWQgcG9pbnQuCiAgICAJICovCiAgICAJY2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHsKCiAgICAJCXJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgZXVjbGlkZWFuIGRpc3RhbmNlIGZyb20gYW55IGVkZ2Ugb2YgdGhpcyBib3ggdG8gdGhlIHNwZWNpZmllZCBwb2ludC4gSWYKICAgIAkgKiB0aGUgZ2l2ZW4gcG9pbnQgbGllcyBpbnNpZGUgb2YgdGhpcyBib3gsIHRoZSBkaXN0YW5jZSB3aWxsIGJlIGAwYC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcG9pbnQgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgdG8uCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgZXVjbGlkZWFuIGRpc3RhbmNlLgogICAgCSAqLwogICAgCWRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5jbGFtcFBvaW50KCBwb2ludCwgX3ZlY3RvciRiICkuZGlzdGFuY2VUbyggcG9pbnQgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgYm91bmRpbmcgc3BoZXJlIHRoYXQgZW5jbG9zZXMgdGhpcyBib3VuZGluZyBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1NwaGVyZX0gdGFyZ2V0IC0gVGhlIHRhcmdldCBzcGhlcmUgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBUaGUgYm91bmRpbmcgc3BoZXJlIHRoYXQgZW5jbG9zZXMgdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJZ2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHsKCiAgICAJCWlmICggdGhpcy5pc0VtcHR5KCkgKSB7CgogICAgCQkJdGFyZ2V0Lm1ha2VFbXB0eSgpOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApOwoKICAgIAkJCXRhcmdldC5yYWRpdXMgPSB0aGlzLmdldFNpemUoIF92ZWN0b3IkYiApLmxlbmd0aCgpICogMC41OwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRhcmdldDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoaXMgYm91bmRpbmcgYm94IGFuZCB0aGUgZ2l2ZW4gb25lLCBzZXR0aW5nIHRoZSB1cHBlcgogICAgCSAqIGJvdW5kIG9mIHRoaXMgYm94IHRvIHRoZSBsZXNzZXIgb2YgdGhlIHR3byBib3hlcycgdXBwZXIgYm91bmRzIGFuZCB0aGUKICAgIAkgKiBsb3dlciBib3VuZCBvZiB0aGlzIGJveCB0byB0aGUgZ3JlYXRlciBvZiB0aGUgdHdvIGJveGVzJyBsb3dlciBib3VuZHMuIElmCiAgICAJICogdGhlcmUncyBubyBvdmVybGFwLCBtYWtlcyB0aGlzIGJveCBlbXB0eS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0byBpbnRlcnNlY3Qgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3QoIGJveCApIHsKCiAgICAJCXRoaXMubWluLm1heCggYm94Lm1pbiApOwogICAgCQl0aGlzLm1heC5taW4oIGJveC5tYXggKTsKCiAgICAJCS8vIGVuc3VyZSB0aGF0IGlmIHRoZXJlIGlzIG5vIG92ZXJsYXAsIHRoZSByZXN1bHQgaXMgZnVsbHkgZW1wdHksIG5vdCBzbGlnaHRseSBlbXB0eSB3aXRoIG5vbi1pbmYvK2luZiB2YWx1ZXMgdGhhdCB3aWxsIGNhdXNlIHN1YnNlcXVlbmNlIGludGVyc2VjdHMgdG8gZXJyb25lb3VzbHkgcmV0dXJuIHZhbGlkIHZhbHVlcy4KICAgIAkJaWYgKCB0aGlzLmlzRW1wdHkoKSApIHRoaXMubWFrZUVtcHR5KCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgdW5pb24gb2YgdGhpcyBib3ggYW5kIGFub3RoZXIgYW5kIHRoZSBnaXZlbiBvbmUsIHNldHRpbmcgdGhlIHVwcGVyCiAgICAJICogYm91bmQgb2YgdGhpcyBib3ggdG8gdGhlIGdyZWF0ZXIgb2YgdGhlIHR3byBib3hlcycgdXBwZXIgYm91bmRzIGFuZCB0aGUKICAgIAkgKiBsb3dlciBib3VuZCBvZiB0aGlzIGJveCB0byB0aGUgbGVzc2VyIG9mIHRoZSB0d28gYm94ZXMnIGxvd2VyIGJvdW5kcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0aGF0IHdpbGwgYmUgdW5pb25lZCB3aXRoIHRoaXMgaW5zdGFuY2UuCiAgICAJICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJdW5pb24oIGJveCApIHsKCiAgICAJCXRoaXMubWluLm1pbiggYm94Lm1pbiApOwogICAgCQl0aGlzLm1heC5tYXgoIGJveC5tYXggKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zZm9ybXMgdGhpcyBib3VuZGluZyBib3ggYnkgdGhlIGdpdmVuIDR4NCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguCiAgICAJICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7CgogICAgCQkvLyB0cmFuc2Zvcm0gb2YgZW1wdHkgYm94IGlzIGFuIGVtcHR5IGJveC4KICAgIAkJaWYgKCB0aGlzLmlzRW1wdHkoKSApIHJldHVybiB0aGlzOwoKICAgIAkJLy8gTk9URTogSSBhbSB1c2luZyBhIGJpbmFyeSBwYXR0ZXJuIHRvIHNwZWNpZnkgYWxsIDJeMyBjb21iaW5hdGlvbnMgYmVsb3cKICAgIAkJX3BvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMAogICAgCQlfcG9pbnRzWyAxIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAxCiAgICAJCV9wb2ludHNbIDIgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTAKICAgIAkJX3BvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMQogICAgCQlfcG9pbnRzWyA0IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAwCiAgICAJCV9wb2ludHNbIDUgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDEKICAgIAkJX3BvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMAogICAgCQlfcG9pbnRzWyA3IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTExCgogICAgCQl0aGlzLnNldEZyb21Qb2ludHMoIF9wb2ludHMgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgdGhlIGdpdmVuIG9mZnNldCB0byBib3RoIHRoZSB1cHBlciBhbmQgbG93ZXIgYm91bmRzIG9mIHRoaXMgYm91bmRpbmcgYm94LAogICAgCSAqIGVmZmVjdGl2ZWx5IG1vdmluZyBpdCBpbiAzRCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gb2Zmc2V0IC0gVGhlIG9mZnNldCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHRyYW5zbGF0ZSB0aGUgYm91bmRpbmcgYm94LgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCXRyYW5zbGF0ZSggb2Zmc2V0ICkgewoKICAgIAkJdGhpcy5taW4uYWRkKCBvZmZzZXQgKTsKICAgIAkJdGhpcy5tYXguYWRkKCBvZmZzZXQgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgYm91bmRpbmcgYm94IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgYm91bmRpbmcgYm94IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKi8KICAgIAllcXVhbHMoIGJveCApIHsKCiAgICAJCXJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgc2VyaWFsaXplZCBzdHJ1Y3R1cmUgb2YgdGhlIGJvdW5kaW5nIGJveC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gU2VyaWFsaXplZCBzdHJ1Y3R1cmUgd2l0aCBmaWVsZHMgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgc3RhdGUuCiAgICAJICovCiAgICAJdG9KU09OKCkgewoKICAgIAkJcmV0dXJuIHsKICAgIAkJCW1pbjogdGhpcy5taW4udG9BcnJheSgpLAogICAgCQkJbWF4OiB0aGlzLm1heC50b0FycmF5KCkKICAgIAkJfTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgc2VyaWFsaXplZCBzdHJ1Y3R1cmUgb2YgdGhlIGJvdW5kaW5nIGJveC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIHNlcmlhbGl6ZWQganNvbiB0byBzZXQgdGhlIGJveCBmcm9tLgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LgogICAgCSAqLwogICAgCWZyb21KU09OKCBqc29uICkgewoKICAgIAkJdGhpcy5taW4uZnJvbUFycmF5KCBqc29uLm1pbiApOwogICAgCQl0aGlzLm1heC5mcm9tQXJyYXkoIGpzb24ubWF4ICk7CiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF9wb2ludHMgPSBbCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSwKICAgIAkvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSwKICAgIAkvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKQogICAgXTsKCiAgICBjb25zdCBfdmVjdG9yJGIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgY29uc3QgX2JveCQ0ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpOwoKICAgIC8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzCgogICAgY29uc3QgX3YwJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdjEkNyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92MiQ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwoKICAgIC8vIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycwoKICAgIGNvbnN0IF9mMCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9mMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9mMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICBjb25zdCBfY2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX2V4dGVudHMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdHJpYW5nbGVOb3JtYWwgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdGVzdEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgZnVuY3Rpb24gc2F0Rm9yQXhlcyggYXhlcywgdjAsIHYxLCB2MiwgZXh0ZW50cyApIHsKCiAgICAJZm9yICggbGV0IGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHsKCiAgICAJCV90ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTsKICAgIAkJLy8gcHJvamVjdCB0aGUgYWFiYiBvbnRvIHRoZSBzZXBhcmF0aW5nIGF4aXMKICAgIAkJY29uc3QgciA9IGV4dGVudHMueCAqIE1hdGguYWJzKCBfdGVzdEF4aXMueCApICsgZXh0ZW50cy55ICogTWF0aC5hYnMoIF90ZXN0QXhpcy55ICkgKyBleHRlbnRzLnogKiBNYXRoLmFicyggX3Rlc3RBeGlzLnogKTsKICAgIAkJLy8gcHJvamVjdCBhbGwgMyB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGUgb250byB0aGUgc2VwYXJhdGluZyBheGlzCiAgICAJCWNvbnN0IHAwID0gdjAuZG90KCBfdGVzdEF4aXMgKTsKICAgIAkJY29uc3QgcDEgPSB2MS5kb3QoIF90ZXN0QXhpcyApOwogICAgCQljb25zdCBwMiA9IHYyLmRvdCggX3Rlc3RBeGlzICk7CiAgICAJCS8vIGFjdHVhbCB0ZXN0LCBiYXNpY2FsbHkgc2VlIGlmIGVpdGhlciBvZiB0aGUgbW9zdCBleHRyZW1lIG9mIHRoZSB0cmlhbmdsZSBwb2ludHMgaW50ZXJzZWN0cyByCiAgICAJCWlmICggTWF0aC5tYXgoIC0gTWF0aC5tYXgoIHAwLCBwMSwgcDIgKSwgTWF0aC5taW4oIHAwLCBwMSwgcDIgKSApID4gciApIHsKCiAgICAJCQkvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiCiAgICAJCQkvLyB0aGUgYXhpcyBpcyBzZXBhcmF0aW5nIGFuZCB3ZSBjYW4gZXhpdAogICAgCQkJcmV0dXJuIGZhbHNlOwoKICAgIAkJfQoKICAgIAl9CgogICAgCXJldHVybiB0cnVlOwoKICAgIH0KCiAgICBjb25zdCBfYm94JDMgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7CiAgICBjb25zdCBfdjEkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92MiQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwoKICAgIC8qKgogICAgICogQW4gYW5hbHl0aWNhbCAzRCBzcGhlcmUgZGVmaW5lZCBieSBhIGNlbnRlciBhbmQgcmFkaXVzLiBUaGlzIGNsYXNzIGlzIG1haW5seQogICAgICogdXNlZCBhcyBhIEJvdW5kaW5nIFNwaGVyZSBmb3IgM0Qgb2JqZWN0cy4KICAgICAqLwogICAgY2xhc3MgU3BoZXJlIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBzcGhlcmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFtjZW50ZXI9KDAsMCwwKV0gLSBUaGUgY2VudGVyIG9mIHRoZSBzcGhlcmUKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0tMV0gLSBUaGUgcmFkaXVzIG9mIHRoZSBzcGhlcmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGNlbnRlciA9IG5ldyBWZWN0b3IzKCksIHJhZGl1cyA9IC0xICkgewoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNTcGhlcmUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBjZW50ZXIgb2YgdGhlIHNwaGVyZQogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMuY2VudGVyID0gY2VudGVyOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSByYWRpdXMgb2YgdGhlIHNwaGVyZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICovCiAgICAJCXRoaXMucmFkaXVzID0gcmFkaXVzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHNwaGVyZSdzIGNvbXBvbmVudHMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBjZW50ZXIgLSBUaGUgY2VudGVyLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSBUaGUgcmFkaXVzLgogICAgCSAqIEByZXR1cm4ge1NwaGVyZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmUuCiAgICAJICovCiAgICAJc2V0KCBjZW50ZXIsIHJhZGl1cyApIHsKCiAgICAJCXRoaXMuY2VudGVyLmNvcHkoIGNlbnRlciApOwogICAgCQl0aGlzLnJhZGl1cyA9IHJhZGl1czsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIGJvdW5kaW5nIHNwaGVyZSBmb3IgbGlzdCBvZiBwb2ludHMuCiAgICAJICogSWYgdGhlIG9wdGlvbmFsIGNlbnRlciBwb2ludCBpcyBnaXZlbiwgaXQgaXMgdXNlZCBhcyB0aGUgc3BoZXJlJ3MKICAgIAkgKiBjZW50ZXIuIE90aGVyd2lzZSwgdGhlIGNlbnRlciBvZiB0aGUgYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveAogICAgCSAqIGVuY29tcGFzc2luZyB0aGUgcG9pbnRzIGlzIGNhbGN1bGF0ZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjM+fSBwb2ludHMgLSBBIGxpc3Qgb2YgcG9pbnRzIGluIDNEIHNwYWNlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbmFsQ2VudGVyXSAtIFRoZSBjZW50ZXIgb2YgdGhlIHNwaGVyZS4KICAgIAkgKiBAcmV0dXJuIHtTcGhlcmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3BoZXJlLgogICAgCSAqLwogICAgCXNldEZyb21Qb2ludHMoIHBvaW50cywgb3B0aW9uYWxDZW50ZXIgKSB7CgogICAgCQljb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjsKCiAgICAJCWlmICggb3B0aW9uYWxDZW50ZXIgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQljZW50ZXIuY29weSggb3B0aW9uYWxDZW50ZXIgKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJX2JveCQzLnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7CgogICAgCQl9CgogICAgCQlsZXQgbWF4UmFkaXVzU3EgPSAwOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQltYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7CgogICAgCQl9CgogICAgCQl0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBzcGhlcmUgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS4KICAgIAkgKi8KICAgIAljb3B5KCBzcGhlcmUgKSB7CgogICAgCQl0aGlzLmNlbnRlci5jb3B5KCBzcGhlcmUuY2VudGVyICk7CiAgICAJCXRoaXMucmFkaXVzID0gc3BoZXJlLnJhZGl1czsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzcGhlcmUgaXMgZW1wdHkgKHRoZSByYWRpdXMgc2V0IHRvIGEgbmVnYXRpdmUgbnVtYmVyKS4KICAgIAkgKgogICAgCSAqIFNwaGVyZXMgd2l0aCBhIHJhZGl1cyBvZiBgMGAgY29udGFpbiBvbmx5IHRoZWlyIGNlbnRlciBwb2ludCBhbmQgYXJlIG5vdAogICAgCSAqIGNvbnNpZGVyZWQgdG8gYmUgZW1wdHkuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGlzIGVtcHR5IG9yIG5vdC4KICAgIAkgKi8KICAgIAlpc0VtcHR5KCkgewoKICAgIAkJcmV0dXJuICggdGhpcy5yYWRpdXMgPCAwICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTWFrZXMgdGhpcyBzcGhlcmUgZW1wdHkgd2hpY2ggbWVhbnMgaW4gZW5jbG9zZXMgYSB6ZXJvIHNwYWNlIGluIDNELgogICAgCSAqCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS4KICAgIAkgKi8KICAgIAltYWtlRW1wdHkoKSB7CgogICAgCQl0aGlzLmNlbnRlci5zZXQoIDAsIDAsIDAgKTsKICAgIAkJdGhpcy5yYWRpdXMgPSAtMTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgc3BoZXJlIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludCBpbmNsdXNpdmUgb2YKICAgIAkgKiB0aGUgc3VyZmFjZSBvZiB0aGUgc3BoZXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBjaGVjay4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludCBvciBub3QuCiAgICAJICovCiAgICAJY29udGFpbnNQb2ludCggcG9pbnQgKSB7CgogICAgCQlyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGNsb3Nlc3QgZGlzdGFuY2UgZnJvbSB0aGUgYm91bmRhcnkgb2YgdGhlIHNwaGVyZSB0byB0aGUKICAgIAkgKiBnaXZlbiBwb2ludC4gSWYgdGhlIHNwaGVyZSBjb250YWlucyB0aGUgcG9pbnQsIHRoZSBkaXN0YW5jZSB3aWxsCiAgICAJICogYmUgbmVnYXRpdmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlIHRvIHRoZSBwb2ludC4KICAgIAkgKi8KICAgIAlkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgewoKICAgIAkJcmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIHNwaGVyZSB0byB0ZXN0LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBvbmUgb3Igbm90LgogICAgCSAqLwogICAgCWludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHsKCiAgICAJCWNvbnN0IHJhZGl1c1N1bSA9IHRoaXMucmFkaXVzICsgc3BoZXJlLnJhZGl1czsKCiAgICAJCXJldHVybiBzcGhlcmUuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmNlbnRlciApIDw9ICggcmFkaXVzU3VtICogcmFkaXVzU3VtICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBib3guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3ggdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94IG9yIG5vdC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RzQm94KCBib3ggKSB7CgogICAgCQlyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIHBsYW5lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gcGxhbmUgb3Igbm90LgogICAgCSAqLwogICAgCWludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7CgogICAgCQlyZXR1cm4gTWF0aC5hYnMoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5jZW50ZXIgKSApIDw9IHRoaXMucmFkaXVzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENsYW1wcyBhIHBvaW50IHdpdGhpbiB0aGUgc3BoZXJlLiBJZiB0aGUgcG9pbnQgaXMgb3V0c2lkZSB0aGUgc3BoZXJlLCBpdAogICAgCSAqIHdpbGwgY2xhbXAgaXQgdG8gdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGVkZ2Ugb2YgdGhlIHNwaGVyZS4gUG9pbnRzCiAgICAJICogYWxyZWFkeSBpbnNpZGUgdGhlIHNwaGVyZSB3aWxsIG5vdCBiZSBhZmZlY3RlZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcGxhbmUgdG8gY2xhbXAuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY2xhbXBlZCBwb2ludC4KICAgIAkgKi8KICAgIAljbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkgewoKICAgIAkJY29uc3QgZGVsdGFMZW5ndGhTcSA9IHRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApOwoKICAgIAkJdGFyZ2V0LmNvcHkoIHBvaW50ICk7CgogICAgCQlpZiAoIGRlbHRhTGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHsKCiAgICAJCQl0YXJnZXQuc3ViKCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpOwogICAgCQkJdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCB0aGlzLnJhZGl1cyApLmFkZCggdGhpcy5jZW50ZXIgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIGJvdW5kaW5nIGJveCB0aGF0IGVuY2xvc2VzIHRoaXMgc3BoZXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtCb3gzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGJveCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtCb3gzfSBUaGUgYm91bmRpbmcgYm94IHRoYXQgZW5jbG9zZXMgdGhpcyBzcGhlcmUuCiAgICAJICovCiAgICAJZ2V0Qm91bmRpbmdCb3goIHRhcmdldCApIHsKCiAgICAJCWlmICggdGhpcy5pc0VtcHR5KCkgKSB7CgogICAgCQkJLy8gRW1wdHkgc3BoZXJlIHByb2R1Y2VzIGVtcHR5IGJvdW5kaW5nIGJveAogICAgCQkJdGFyZ2V0Lm1ha2VFbXB0eSgpOwogICAgCQkJcmV0dXJuIHRhcmdldDsKCiAgICAJCX0KCiAgICAJCXRhcmdldC5zZXQoIHRoaXMuY2VudGVyLCB0aGlzLmNlbnRlciApOwogICAgCQl0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7CgogICAgCQlyZXR1cm4gdGFyZ2V0OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zZm9ybXMgdGhpcyBzcGhlcmUgd2l0aCB0aGUgZ2l2ZW4gNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4IC0gVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtTcGhlcmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3BoZXJlLgogICAgCSAqLwogICAgCWFwcGx5TWF0cml4NCggbWF0cml4ICkgewoKICAgIAkJdGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsKICAgIAkJdGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVHJhbnNsYXRlcyB0aGUgc3BoZXJlJ3MgY2VudGVyIGJ5IHRoZSBnaXZlbiBvZmZzZXQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IG9mZnNldCAtIFRoZSBvZmZzZXQuCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS4KICAgIAkgKi8KICAgIAl0cmFuc2xhdGUoIG9mZnNldCApIHsKCiAgICAJCXRoaXMuY2VudGVyLmFkZCggb2Zmc2V0ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgc3BoZXJlIHRvIGluY2x1ZGUgdGhlIGdpdmVuIHBvaW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBpbmNsdWRlLgogICAgCSAqIEByZXR1cm4ge1NwaGVyZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmUuCiAgICAJICovCiAgICAJZXhwYW5kQnlQb2ludCggcG9pbnQgKSB7CgogICAgCQlpZiAoIHRoaXMuaXNFbXB0eSgpICkgewoKICAgIAkJCXRoaXMuY2VudGVyLmNvcHkoIHBvaW50ICk7CgogICAgCQkJdGhpcy5yYWRpdXMgPSAwOwoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJX3YxJDYuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMuY2VudGVyICk7CgogICAgCQljb25zdCBsZW5ndGhTcSA9IF92MSQ2Lmxlbmd0aFNxKCk7CgogICAgCQlpZiAoIGxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7CgogICAgCQkJLy8gY2FsY3VsYXRlIHRoZSBtaW5pbWFsIHNwaGVyZQoKICAgIAkJCWNvbnN0IGxlbmd0aCA9IE1hdGguc3FydCggbGVuZ3RoU3EgKTsKCiAgICAJCQljb25zdCBkZWx0YSA9ICggbGVuZ3RoIC0gdGhpcy5yYWRpdXMgKSAqIDAuNTsKCiAgICAJCQl0aGlzLmNlbnRlci5hZGRTY2FsZWRWZWN0b3IoIF92MSQ2LCBkZWx0YSAvIGxlbmd0aCApOwoKICAgIAkJCXRoaXMucmFkaXVzICs9IGRlbHRhOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRXhwYW5kcyB0aGlzIHNwaGVyZSB0byBlbmNsb3NlIGJvdGggdGhlIG9yaWdpbmFsIHNwaGVyZSBhbmQgdGhlIGdpdmVuIHNwaGVyZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGluY2x1ZGUuCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS4KICAgIAkgKi8KICAgIAl1bmlvbiggc3BoZXJlICkgewoKICAgIAkJaWYgKCBzcGhlcmUuaXNFbXB0eSgpICkgewoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLmlzRW1wdHkoKSApIHsKCiAgICAJCQl0aGlzLmNvcHkoIHNwaGVyZSApOwoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLmNlbnRlci5lcXVhbHMoIHNwaGVyZS5jZW50ZXIgKSA9PT0gdHJ1ZSApIHsKCiAgICAJCQkgdGhpcy5yYWRpdXMgPSBNYXRoLm1heCggdGhpcy5yYWRpdXMsIHNwaGVyZS5yYWRpdXMgKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJX3YyJDMuc3ViVmVjdG9ycyggc3BoZXJlLmNlbnRlciwgdGhpcy5jZW50ZXIgKS5zZXRMZW5ndGgoIHNwaGVyZS5yYWRpdXMgKTsKCiAgICAJCQl0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MSQ2LmNvcHkoIHNwaGVyZS5jZW50ZXIgKS5hZGQoIF92MiQzICkgKTsKCiAgICAJCQl0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MSQ2LmNvcHkoIHNwaGVyZS5jZW50ZXIgKS5zdWIoIF92MiQzICkgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgc3BoZXJlIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIHRlc3QgZm9yIGVxdWFsaXR5LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBib3VuZGluZyBzcGhlcmUgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqLwogICAgCWVxdWFscyggc3BoZXJlICkgewoKICAgIAkJcmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgbmV3IHNwaGVyZSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7U3BoZXJlfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIHNlcmlhbGl6ZWQgc3RydWN0dXJlIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtPYmplY3R9IFNlcmlhbGl6ZWQgc3RydWN0dXJlIHdpdGggZmllbGRzIHJlcHJlc2VudGluZyB0aGUgb2JqZWN0IHN0YXRlLgogICAgCSAqLwogICAgCXRvSlNPTigpIHsKCiAgICAJCXJldHVybiB7CiAgICAJCQlyYWRpdXM6IHRoaXMucmFkaXVzLAogICAgCQkJY2VudGVyOiB0aGlzLmNlbnRlci50b0FycmF5KCkKICAgIAkJfTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgc2VyaWFsaXplZCBzdHJ1Y3R1cmUgb2YgdGhlIGJvdW5kaW5nIHNwaGVyZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIHNlcmlhbGl6ZWQganNvbiB0byBzZXQgdGhlIHNwaGVyZSBmcm9tLgogICAgCSAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgc3BoZXJlLgogICAgCSAqLwogICAgCWZyb21KU09OKCBqc29uICkgewoKICAgIAkJdGhpcy5yYWRpdXMgPSBqc29uLnJhZGl1czsKICAgIAkJdGhpcy5jZW50ZXIuZnJvbUFycmF5KCBqc29uLmNlbnRlciApOwogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBfdmVjdG9yJGEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfc2VnQ2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3NlZ0RpciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9kaWZmID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwoKICAgIGNvbnN0IF9lZGdlMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9lZGdlMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9ub3JtYWwkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICAvKioKICAgICAqIEEgcmF5IHRoYXQgZW1pdHMgZnJvbSBhbiBvcmlnaW4gaW4gYSBjZXJ0YWluIGRpcmVjdGlvbi4gVGhlIGNsYXNzIGlzIHVzZWQgYnkKICAgICAqIHtAbGluayBSYXljYXN0ZXJ9IHRvIGFzc2lzdCB3aXRoIHJheWNhc3RpbmcuIFJheWNhc3RpbmcgaXMgdXNlZCBmb3IKICAgICAqIG1vdXNlIHBpY2tpbmcgKHdvcmtpbmcgb3V0IHdoYXQgb2JqZWN0cyBpbiB0aGUgM0Qgc3BhY2UgdGhlIG1vdXNlIGlzIG92ZXIpCiAgICAgKiBhbW9uZ3N0IG90aGVyIHRoaW5ncy4KICAgICAqLwogICAgY2xhc3MgUmF5IHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyByYXkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFtvcmlnaW49KDAsMCwwKV0gLSBUaGUgb3JpZ2luIG9mIHRoZSByYXkuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBbZGlyZWN0aW9uPSgwLDAsLTEpXSAtIFRoZSAobm9ybWFsaXplZCkgZGlyZWN0aW9uIG9mIHRoZSByYXkuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIG9yaWdpbiA9IG5ldyBWZWN0b3IzKCksIGRpcmVjdGlvbiA9IG5ldyBWZWN0b3IzKCAwLCAwLCAtMSApICkgewoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBvcmlnaW4gb2YgdGhlIHJheS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1ZlY3RvcjN9CiAgICAJCSAqLwogICAgCQl0aGlzLm9yaWdpbiA9IG9yaWdpbjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiBvZiB0aGUgcmF5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHJheSdzIGNvbXBvbmVudHMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBvcmlnaW4gLSBUaGUgb3JpZ2luLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbi4KICAgIAkgKiBAcmV0dXJuIHtSYXl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5LgogICAgCSAqLwogICAgCXNldCggb3JpZ2luLCBkaXJlY3Rpb24gKSB7CgogICAgCQl0aGlzLm9yaWdpbi5jb3B5KCBvcmlnaW4gKTsKICAgIAkJdGhpcy5kaXJlY3Rpb24uY29weSggZGlyZWN0aW9uICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gcmF5IHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1JheX0gcmF5IC0gVGhlIHJheSB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge1JheX0gQSByZWZlcmVuY2UgdG8gdGhpcyByYXkuCiAgICAJICovCiAgICAJY29weSggcmF5ICkgewoKICAgIAkJdGhpcy5vcmlnaW4uY29weSggcmF5Lm9yaWdpbiApOwogICAgCQl0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgdmVjdG9yIHRoYXQgaXMgbG9jYXRlZCBhdCBhIGdpdmVuIGRpc3RhbmNlIGFsb25nIHRoaXMgcmF5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgZGlzdGFuY2UgYWxvbmcgdGhlIHJheSB0byByZXRyaWV2ZSBhIHBvc2l0aW9uIGZvci4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcG9zaXRpb24gb24gdGhlIHJheS4KICAgIAkgKi8KICAgIAlhdCggdCwgdGFyZ2V0ICkgewoKICAgIAkJcmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIHQgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGp1c3RzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHJheSB0byBwb2ludCBhdCB0aGUgZ2l2ZW4gdmVjdG9yIGluIHdvcmxkIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHRhcmdldCBwb3NpdGlvbi4KICAgIAkgKiBAcmV0dXJuIHtSYXl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5LgogICAgCSAqLwogICAgCWxvb2tBdCggdiApIHsKCiAgICAJCXRoaXMuZGlyZWN0aW9uLmNvcHkoIHYgKS5zdWIoIHRoaXMub3JpZ2luICkubm9ybWFsaXplKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTaGlmdCB0aGUgb3JpZ2luIG9mIHRoaXMgcmF5IGFsb25nIGl0cyBkaXJlY3Rpb24gYnkgdGhlIGdpdmVuIGRpc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgZGlzdGFuY2UgYWxvbmcgdGhlIHJheSB0byBpbnRlcnBvbGF0ZS4KICAgIAkgKiBAcmV0dXJuIHtSYXl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5LgogICAgCSAqLwogICAgCXJlY2FzdCggdCApIHsKCiAgICAJCXRoaXMub3JpZ2luLmNvcHkoIHRoaXMuYXQoIHQsIF92ZWN0b3IkYSApICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBwb2ludCBhbG9uZyB0aGlzIHJheSB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhlIGdpdmVuIHBvaW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UgdG8gZ2V0IHRoZSBjbG9zZXQgbG9jYXRpb24gb24gdGhlIHJheSBmb3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGlzIHJheS4KICAgIAkgKi8KICAgIAljbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgdGFyZ2V0ICkgewoKICAgIAkJdGFyZ2V0LnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApOwoKICAgIAkJY29uc3QgZGlyZWN0aW9uRGlzdGFuY2UgPSB0YXJnZXQuZG90KCB0aGlzLmRpcmVjdGlvbiApOwoKICAgIAkJaWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIGRpcmVjdGlvbkRpc3RhbmNlICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgZGlzdGFuY2Ugb2YgdGhlIGNsb3Nlc3QgYXBwcm9hY2ggYmV0d2VlbiB0aGlzIHJheSBhbmQgdGhlIGdpdmVuIHBvaW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgdG8uCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgZGlzdGFuY2UuCiAgICAJICovCiAgICAJZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHsKCiAgICAJCXJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIG9mIHRoZSBjbG9zZXN0IGFwcHJvYWNoIGJldHdlZW4gdGhpcyByYXkgYW5kIHRoZSBnaXZlbiBwb2ludC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBBIHBvaW50IGluIDNEIHNwYWNlIHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgZGlzdGFuY2UuCiAgICAJICovCiAgICAJZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgewoKICAgIAkJY29uc3QgZGlyZWN0aW9uRGlzdGFuY2UgPSBfdmVjdG9yJGEuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICkuZG90KCB0aGlzLmRpcmVjdGlvbiApOwoKICAgIAkJLy8gcG9pbnQgYmVoaW5kIHRoZSByYXkKCiAgICAJCWlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkgewoKICAgIAkJCXJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTsKCiAgICAJCX0KCiAgICAJCV92ZWN0b3IkYS5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIGRpcmVjdGlvbkRpc3RhbmNlICk7CgogICAgCQlyZXR1cm4gX3ZlY3RvciRhLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiB0aGlzIHJheSBhbmQgdGhlIGdpdmVuIGxpbmUgc2VnbWVudC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjAgLSBUaGUgc3RhcnQgcG9pbnQgb2YgdGhlIGxpbmUgc2VnbWVudC4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYxIC0gVGhlIGVuZCBwb2ludCBvZiB0aGUgbGluZSBzZWdtZW50LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbmFsUG9pbnRPblJheV0gLSBXaGVuIHByb3ZpZGVkLCBpdCByZWNlaXZlcyB0aGUgcG9pbnQgb24gdGhpcyByYXkgdGhhdCBpcyBjbG9zZXN0IHRvIHRoZSBzZWdtZW50LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbmFsUG9pbnRPblNlZ21lbnRdIC0gV2hlbiBwcm92aWRlZCwgaXQgcmVjZWl2ZXMgdGhlIHBvaW50IG9uIHRoZSBsaW5lIHNlZ21lbnQgdGhhdCBpcyBjbG9zZXN0IHRvIHRoaXMgcmF5LgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgZGlzdGFuY2UuCiAgICAJICovCiAgICAJZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7CgogICAgCQkvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wbWpvbmlhay9HZW9tZXRyaWNUb29scy9ibG9iL21hc3Rlci9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50LmgKICAgIAkJLy8gSXQgcmV0dXJucyB0aGUgbWluIGRpc3RhbmNlIGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIHNlZ21lbnQKICAgIAkJLy8gZGVmaW5lZCBieSB2MCBhbmQgdjEKICAgIAkJLy8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDoKICAgIAkJLy8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgcmF5CiAgICAJCS8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNlZ21lbnQKCiAgICAJCV9zZWdDZW50ZXIuY29weSggdjAgKS5hZGQoIHYxICkubXVsdGlwbHlTY2FsYXIoIDAuNSApOwogICAgCQlfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpOwogICAgCQlfZGlmZi5jb3B5KCB0aGlzLm9yaWdpbiApLnN1YiggX3NlZ0NlbnRlciApOwoKICAgIAkJY29uc3Qgc2VnRXh0ZW50ID0gdjAuZGlzdGFuY2VUbyggdjEgKSAqIDAuNTsKICAgIAkJY29uc3QgYTAxID0gLSB0aGlzLmRpcmVjdGlvbi5kb3QoIF9zZWdEaXIgKTsKICAgIAkJY29uc3QgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7CiAgICAJCWNvbnN0IGIxID0gLSBfZGlmZi5kb3QoIF9zZWdEaXIgKTsKICAgIAkJY29uc3QgYyA9IF9kaWZmLmxlbmd0aFNxKCk7CiAgICAJCWNvbnN0IGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7CiAgICAJCWxldCBzMCwgczEsIHNxckRpc3QsIGV4dERldDsKCiAgICAJCWlmICggZGV0ID4gMCApIHsKCiAgICAJCQkvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuCgogICAgCQkJczAgPSBhMDEgKiBiMSAtIGIwOwogICAgCQkJczEgPSBhMDEgKiBiMCAtIGIxOwogICAgCQkJZXh0RGV0ID0gc2VnRXh0ZW50ICogZGV0OwoKICAgIAkJCWlmICggczAgPj0gMCApIHsKCiAgICAJCQkJaWYgKCBzMSA+PSAtIGV4dERldCApIHsKCiAgICAJCQkJCWlmICggczEgPD0gZXh0RGV0ICkgewoKICAgIAkJCQkJCS8vIHJlZ2lvbiAwCiAgICAJCQkJCQkvLyBNaW5pbXVtIGF0IGludGVyaW9yIHBvaW50cyBvZiByYXkgYW5kIHNlZ21lbnQuCgogICAgCQkJCQkJY29uc3QgaW52RGV0ID0gMSAvIGRldDsKICAgIAkJCQkJCXMwICo9IGludkRldDsKICAgIAkJCQkJCXMxICo9IGludkRldDsKICAgIAkJCQkJCXNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCS8vIHJlZ2lvbiAxCgogICAgCQkJCQkJczEgPSBzZWdFeHRlbnQ7CiAgICAJCQkJCQlzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7CiAgICAJCQkJCQlzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJLy8gcmVnaW9uIDUKCiAgICAJCQkJCXMxID0gLSBzZWdFeHRlbnQ7CiAgICAJCQkJCXMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTsKICAgIAkJCQkJc3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYzsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWlmICggczEgPD0gLSBleHREZXQgKSB7CgogICAgCQkJCQkvLyByZWdpb24gNAoKICAgIAkJCQkJczAgPSBNYXRoLm1heCggMCwgLSAoIC0gYTAxICogc2VnRXh0ZW50ICsgYjAgKSApOwogICAgCQkJCQlzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7CiAgICAJCQkJCXNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7CgogICAgCQkJCX0gZWxzZSBpZiAoIHMxIDw9IGV4dERldCApIHsKCiAgICAJCQkJCS8vIHJlZ2lvbiAzCgogICAgCQkJCQlzMCA9IDA7CiAgICAJCQkJCXMxID0gTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTsKICAgIAkJCQkJc3FyRGlzdCA9IHMxICogKCBzMSArIDIgKiBiMSApICsgYzsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCS8vIHJlZ2lvbiAyCgogICAgCQkJCQlzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogc2VnRXh0ZW50ICsgYjAgKSApOwogICAgCQkJCQlzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApOwogICAgCQkJCQlzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQkvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLgoKICAgIAkJCXMxID0gKCBhMDEgPiAwICkgPyAtIHNlZ0V4dGVudCA6IHNlZ0V4dGVudDsKICAgIAkJCXMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTsKICAgIAkJCXNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7CgogICAgCQl9CgogICAgCQlpZiAoIG9wdGlvbmFsUG9pbnRPblJheSApIHsKCiAgICAJCQlvcHRpb25hbFBvaW50T25SYXkuY29weSggdGhpcy5vcmlnaW4gKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuZGlyZWN0aW9uLCBzMCApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkgewoKICAgIAkJCW9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggX3NlZ0NlbnRlciApLmFkZFNjYWxlZFZlY3RvciggX3NlZ0RpciwgczEgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBzcXJEaXN0OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEludGVyc2VjdHMgdGhpcyByYXkgd2l0aCB0aGUgZ2l2ZW4gc3BoZXJlLCByZXR1cm5pbmcgdGhlIGludGVyc2VjdGlvbgogICAgCSAqIHBvaW50IG9yIGBudWxsYCBpZiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIHNwaGVyZSB0byBpbnRlcnNlY3QuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGludGVyc2VjdGlvbiBwb2ludC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkgewoKICAgIAkJX3ZlY3RvciRhLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMub3JpZ2luICk7CiAgICAJCWNvbnN0IHRjYSA9IF92ZWN0b3IkYS5kb3QoIHRoaXMuZGlyZWN0aW9uICk7CiAgICAJCWNvbnN0IGQyID0gX3ZlY3RvciRhLmRvdCggX3ZlY3RvciRhICkgLSB0Y2EgKiB0Y2E7CiAgICAJCWNvbnN0IHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1czsKCiAgICAJCWlmICggZDIgPiByYWRpdXMyICkgcmV0dXJuIG51bGw7CgogICAgCQljb25zdCB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApOwoKICAgIAkJLy8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmUKICAgIAkJY29uc3QgdDAgPSB0Y2EgLSB0aGM7CgogICAgCQkvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlCiAgICAJCWNvbnN0IHQxID0gdGNhICsgdGhjOwoKICAgIAkJLy8gdGVzdCB0byBzZWUgaWYgdDEgaXMgYmVoaW5kIHRoZSByYXkgLSBpZiBzbywgcmV0dXJuIG51bGwKICAgIAkJaWYgKCB0MSA8IDAgKSByZXR1cm4gbnVsbDsKCiAgICAJCS8vIHRlc3QgdG8gc2VlIGlmIHQwIGlzIGJlaGluZCB0aGUgcmF5OgogICAgCQkvLyBpZiBpdCBpcywgdGhlIHJheSBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgc28gcmV0dXJuIHRoZSBzZWNvbmQgZXhpdCBwb2ludCBzY2FsZWQgYnkgdDEsCiAgICAJCS8vIGluIG9yZGVyIHRvIGFsd2F5cyByZXR1cm4gYW4gaW50ZXJzZWN0IHBvaW50IHRoYXQgaXMgaW4gZnJvbnQgb2YgdGhlIHJheS4KICAgIAkJaWYgKCB0MCA8IDAgKSByZXR1cm4gdGhpcy5hdCggdDEsIHRhcmdldCApOwoKICAgIAkJLy8gZWxzZSB0MCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LCBzbyByZXR1cm4gdGhlIGZpcnN0IGNvbGxpc2lvbiBwb2ludCBzY2FsZWQgYnkgdDAKICAgIAkJcmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHJheSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIHNwaGVyZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGludGVyc2VjdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gc3BoZXJlIG9yIG5vdC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7CgogICAgCQlpZiAoIHNwaGVyZS5yYWRpdXMgPCAwICkgcmV0dXJuIGZhbHNlOyAvLyBoYW5kbGUgZW1wdHkgc3BoZXJlcywgc2VlICMzMTE4NwoKICAgIAkJcmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHJheSdzIG9yaWdpbiB0byB0aGUgZ2l2ZW4gcGxhbmUuIFJldHVybnMgYG51bGxgIGlmIHRoZSByYXkKICAgIAkgKiBkb2VzIG5vdCBpbnRlcnNlY3Qgd2l0aCB0aGUgcGxhbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1BsYW5lfSBwbGFuZSAtIFRoZSBwbGFuZSB0byBjb21wdXRlIHRoZSBkaXN0YW5jZSB0by4KICAgIAkgKiBAcmV0dXJuIHs/bnVtYmVyfSBXaGV0aGVyIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gc3BoZXJlIG9yIG5vdC4KICAgIAkgKi8KICAgIAlkaXN0YW5jZVRvUGxhbmUoIHBsYW5lICkgewoKICAgIAkJY29uc3QgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApOwoKICAgIAkJaWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHsKCiAgICAJCQkvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luCiAgICAJCQlpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKSA9PT0gMCApIHsKCiAgICAJCQkJcmV0dXJuIDA7CgogICAgCQkJfQoKICAgIAkJCS8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWQKCiAgICAJCQlyZXR1cm4gbnVsbDsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHQgPSAtICggdGhpcy5vcmlnaW4uZG90KCBwbGFuZS5ub3JtYWwgKSArIHBsYW5lLmNvbnN0YW50ICkgLyBkZW5vbWluYXRvcjsKCiAgICAJCS8vIFJldHVybiBpZiB0aGUgcmF5IG5ldmVyIGludGVyc2VjdHMgdGhlIHBsYW5lCgogICAgCQlyZXR1cm4gdCA+PSAwID8gdCA6IG51bGw7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSW50ZXJzZWN0cyB0aGlzIHJheSB3aXRoIHRoZSBnaXZlbiBwbGFuZSwgcmV0dXJuaW5nIHRoZSBpbnRlcnNlY3Rpb24KICAgIAkgKiBwb2ludCBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gaW50ZXJzZWN0LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuCiAgICAJICovCiAgICAJaW50ZXJzZWN0UGxhbmUoIHBsYW5lLCB0YXJnZXQgKSB7CgogICAgCQljb25zdCB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7CgogICAgCQlpZiAoIHQgPT09IG51bGwgKSB7CgogICAgCQkJcmV0dXJuIG51bGw7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpcy5hdCggdCwgdGFyZ2V0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyByYXkgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBwbGFuZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IHBsYW5lIC0gVGhlIHBsYW5lIHRvIGludGVyc2VjdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gcGxhbmUgb3Igbm90LgogICAgCSAqLwogICAgCWludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7CgogICAgCQkvLyBjaGVjayBpZiB0aGUgcmF5IGxpZXMgb24gdGhlIHBsYW5lIGZpcnN0CgogICAgCQljb25zdCBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTsKCiAgICAJCWlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7CgogICAgCQkJcmV0dXJuIHRydWU7CgogICAgCQl9CgogICAgCQljb25zdCBkZW5vbWluYXRvciA9IHBsYW5lLm5vcm1hbC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7CgogICAgCQlpZiAoIGRlbm9taW5hdG9yICogZGlzdFRvUG9pbnQgPCAwICkgewoKICAgIAkJCXJldHVybiB0cnVlOwoKICAgIAkJfQoKICAgIAkJLy8gcmF5IG9yaWdpbiBpcyBiZWhpbmQgdGhlIHBsYW5lIChhbmQgaXMgcG9pbnRpbmcgYmVoaW5kIGl0KQoKICAgIAkJcmV0dXJuIGZhbHNlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEludGVyc2VjdHMgdGhpcyByYXkgd2l0aCB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94LCByZXR1cm5pbmcgdGhlIGludGVyc2VjdGlvbgogICAgCSAqIHBvaW50IG9yIGBudWxsYCBpZiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3ggdG8gaW50ZXJzZWN0LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuCiAgICAJICovCiAgICAJaW50ZXJzZWN0Qm94KCBib3gsIHRhcmdldCApIHsKCiAgICAJCWxldCB0bWluLCB0bWF4LCB0eW1pbiwgdHltYXgsIHR6bWluLCB0em1heDsKCiAgICAJCWNvbnN0IGludmRpcnggPSAxIC8gdGhpcy5kaXJlY3Rpb24ueCwKICAgIAkJCWludmRpcnkgPSAxIC8gdGhpcy5kaXJlY3Rpb24ueSwKICAgIAkJCWludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejsKCiAgICAJCWNvbnN0IG9yaWdpbiA9IHRoaXMub3JpZ2luOwoKICAgIAkJaWYgKCBpbnZkaXJ4ID49IDAgKSB7CgogICAgCQkJdG1pbiA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7CiAgICAJCQl0bWF4ID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdG1pbiA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7CiAgICAJCQl0bWF4ID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDsKCiAgICAJCX0KCiAgICAJCWlmICggaW52ZGlyeSA+PSAwICkgewoKICAgIAkJCXR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTsKICAgIAkJCXR5bWF4ID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdHltaW4gPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5OwogICAgCQkJdHltYXggPSAoIGJveC5taW4ueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5OwoKICAgIAkJfQoKICAgIAkJaWYgKCAoIHRtaW4gPiB0eW1heCApIHx8ICggdHltaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDsKCiAgICAJCWlmICggdHltaW4gPiB0bWluIHx8IGlzTmFOKCB0bWluICkgKSB0bWluID0gdHltaW47CgogICAgCQlpZiAoIHR5bWF4IDwgdG1heCB8fCBpc05hTiggdG1heCApICkgdG1heCA9IHR5bWF4OwoKICAgIAkJaWYgKCBpbnZkaXJ6ID49IDAgKSB7CgogICAgCQkJdHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6OwogICAgCQkJdHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0em1pbiA9ICggYm94Lm1heC56IC0gb3JpZ2luLnogKSAqIGludmRpcno7CiAgICAJCQl0em1heCA9ICggYm94Lm1pbi56IC0gb3JpZ2luLnogKSAqIGludmRpcno7CgogICAgCQl9CgogICAgCQlpZiAoICggdG1pbiA+IHR6bWF4ICkgfHwgKCB0em1pbiA+IHRtYXggKSApIHJldHVybiBudWxsOwoKICAgIAkJaWYgKCB0em1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0em1pbjsKCiAgICAJCWlmICggdHptYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB0bWF4ID0gdHptYXg7CgogICAgCQkvL3JldHVybiBwb2ludCBjbG9zZXN0IHRvIHRoZSByYXkgKHBvc2l0aXZlIHNpZGUpCgogICAgCQlpZiAoIHRtYXggPCAwICkgcmV0dXJuIG51bGw7CgogICAgCQlyZXR1cm4gdGhpcy5hdCggdG1pbiA+PSAwID8gdG1pbiA6IHRtYXgsIHRhcmdldCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGludGVyc2VjdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94IG9yIG5vdC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RzQm94KCBib3ggKSB7CgogICAgCQlyZXR1cm4gdGhpcy5pbnRlcnNlY3RCb3goIGJveCwgX3ZlY3RvciRhICkgIT09IG51bGw7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSW50ZXJzZWN0cyB0aGlzIHJheSB3aXRoIHRoZSBnaXZlbiB0cmlhbmdsZSwgcmV0dXJuaW5nIHRoZSBpbnRlcnNlY3Rpb24KICAgIAkgKiBwb2ludCBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlcnRleCBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZXJ0ZXggb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCB2ZXJ0ZXggb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gYmFja2ZhY2VDdWxsaW5nIC0gV2hldGhlciB0byB1c2UgYmFja2ZhY2UgY3VsbGluZyBvciBub3QuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGludGVyc2VjdGlvbiBwb2ludC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RUcmlhbmdsZSggYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQgKSB7CgogICAgCQkvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC4KCiAgICAJCS8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Btam9uaWFrL0dlb21ldHJpY1Rvb2xzL2Jsb2IvbWFzdGVyL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaAoKICAgIAkJX2VkZ2UxLnN1YlZlY3RvcnMoIGIsIGEgKTsKICAgIAkJX2VkZ2UyLnN1YlZlY3RvcnMoIGMsIGEgKTsKICAgIAkJX25vcm1hbCQxLmNyb3NzVmVjdG9ycyggX2VkZ2UxLCBfZWRnZTIgKTsKCiAgICAJCS8vIFNvbHZlIFEgKyB0KkQgPSBiMSpFMSArIGIyKkUyIChRID0ga0RpZmYsIEQgPSByYXkgZGlyZWN0aW9uLAogICAgCQkvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5CiAgICAJCS8vICAgfERvdChELE4pfCpiMSA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKFEsRTIpKQogICAgCQkvLyAgIHxEb3QoRCxOKXwqYjIgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhFMSxRKSkKICAgIAkJLy8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTikKICAgIAkJbGV0IERkTiA9IHRoaXMuZGlyZWN0aW9uLmRvdCggX25vcm1hbCQxICk7CiAgICAJCWxldCBzaWduOwoKICAgIAkJaWYgKCBEZE4gPiAwICkgewoKICAgIAkJCWlmICggYmFja2ZhY2VDdWxsaW5nICkgcmV0dXJuIG51bGw7CiAgICAJCQlzaWduID0gMTsKCiAgICAJCX0gZWxzZSBpZiAoIERkTiA8IDAgKSB7CgogICAgCQkJc2lnbiA9IC0xOwogICAgCQkJRGROID0gLSBEZE47CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXJldHVybiBudWxsOwoKICAgIAkJfQoKICAgIAkJX2RpZmYuc3ViVmVjdG9ycyggdGhpcy5vcmlnaW4sIGEgKTsKICAgIAkJY29uc3QgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UyLmNyb3NzVmVjdG9ycyggX2RpZmYsIF9lZGdlMiApICk7CgogICAgCQkvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvbgogICAgCQlpZiAoIERkUXhFMiA8IDAgKSB7CgogICAgCQkJcmV0dXJuIG51bGw7CgogICAgCQl9CgogICAgCQljb25zdCBEZEUxeFEgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTEuY3Jvc3MoIF9kaWZmICkgKTsKCiAgICAJCS8vIGIyIDwgMCwgbm8gaW50ZXJzZWN0aW9uCiAgICAJCWlmICggRGRFMXhRIDwgMCApIHsKCiAgICAJCQlyZXR1cm4gbnVsbDsKCiAgICAJCX0KCiAgICAJCS8vIGIxK2IyID4gMSwgbm8gaW50ZXJzZWN0aW9uCiAgICAJCWlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkgewoKICAgIAkJCXJldHVybiBudWxsOwoKICAgIAkJfQoKICAgIAkJLy8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy4KICAgIAkJY29uc3QgUWROID0gLSBzaWduICogX2RpZmYuZG90KCBfbm9ybWFsJDEgKTsKCiAgICAJCS8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb24KICAgIAkJaWYgKCBRZE4gPCAwICkgewoKICAgIAkJCXJldHVybiBudWxsOwoKICAgIAkJfQoKICAgIAkJLy8gUmF5IGludGVyc2VjdHMgdHJpYW5nbGUuCiAgICAJCXJldHVybiB0aGlzLmF0KCBRZE4gLyBEZE4sIHRhcmdldCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zZm9ybXMgdGhpcyByYXkgd2l0aCB0aGUgZ2l2ZW4gNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4NCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguCiAgICAJICogQHJldHVybiB7UmF5fSBBIHJlZmVyZW5jZSB0byB0aGlzIHJheS4KICAgIAkgKi8KICAgIAlhcHBseU1hdHJpeDQoIG1hdHJpeDQgKSB7CgogICAgCQl0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoIG1hdHJpeDQgKTsKICAgIAkJdGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXg0ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHJheSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1JheX0gcmF5IC0gVGhlIHJheSB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcmF5IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKi8KICAgIAllcXVhbHMoIHJheSApIHsKCiAgICAJCXJldHVybiByYXkub3JpZ2luLmVxdWFscyggdGhpcy5vcmlnaW4gKSAmJiByYXkuZGlyZWN0aW9uLmVxdWFscyggdGhpcy5kaXJlY3Rpb24gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgbmV3IHJheSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7UmF5fSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBSZXByZXNlbnRzIGEgNHg0IG1hdHJpeC4KICAgICAqCiAgICAgKiBUaGUgbW9zdCBjb21tb24gdXNlIG9mIGEgNHg0IG1hdHJpeCBpbiAzRCBjb21wdXRlciBncmFwaGljcyBpcyBhcyBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4KICAgICAqIEZvciBhbiBpbnRyb2R1Y3Rpb24gdG8gdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgYXMgdXNlZCBpbiBXZWJHTCwgY2hlY2sgb3V0IFt0aGlzIHR1dG9yaWFsXXtAbGluayBodHRwczovL3d3dy5vcGVuZ2wtdHV0b3JpYWwub3JnL2JlZ2lubmVycy10dXRvcmlhbHMvdHV0b3JpYWwtMy1tYXRyaWNlc30KICAgICAqCiAgICAgKiBUaGlzIGFsbG93cyBhIDNEIHZlY3RvciByZXByZXNlbnRpbmcgYSBwb2ludCBpbiAzRCBzcGFjZSB0byB1bmRlcmdvCiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgc3VjaCBhcyB0cmFuc2xhdGlvbiwgcm90YXRpb24sIHNoZWFyLCBzY2FsZSwgcmVmbGVjdGlvbiwKICAgICAqIG9ydGhvZ29uYWwgb3IgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBhbmQgc28gb24sIGJ5IGJlaW5nIG11bHRpcGxpZWQgYnkgdGhlCiAgICAgKiBtYXRyaXguIFRoaXMgaXMga25vd24gYXMgYGFwcGx5aW5nYCB0aGUgbWF0cml4IHRvIHRoZSB2ZWN0b3IuCiAgICAgKgogICAgICogQSBOb3RlIG9uIFJvdy1NYWpvciBhbmQgQ29sdW1uLU1ham9yIE9yZGVyaW5nOgogICAgICoKICAgICAqIFRoZSBjb25zdHJ1Y3RvciBhbmQge0BsaW5rIE1hdHJpeDMjc2V0fSBtZXRob2QgdGFrZSBhcmd1bWVudHMgaW4KICAgICAqIFtyb3ctbWFqb3Jde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jvdy1fYW5kX2NvbHVtbi1tYWpvcl9vcmRlciNDb2x1bW4tbWFqb3Jfb3JkZXJ9CiAgICAgKiBvcmRlciwgd2hpbGUgaW50ZXJuYWxseSB0aGV5IGFyZSBzdG9yZWQgaW4gdGhlIHtAbGluayBNYXRyaXgzI2VsZW1lbnRzfSBhcnJheSBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuCiAgICAgKiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZzoKICAgICAqIGBgYGpzCiAgICAgKiBjb25zdCBtID0gbmV3IFRIUkVFLk1hdHJpeDQoKTsKICAgICAqIG0uc2V0KCAxMSwgMTIsIDEzLCAxNCwKICAgICAqICAgICAgICAyMSwgMjIsIDIzLCAyNCwKICAgICAqICAgICAgICAzMSwgMzIsIDMzLCAzNCwKICAgICAqICAgICAgICA0MSwgNDIsIDQzLCA0NCApOwogICAgICogYGBgCiAgICAgKiB3aWxsIHJlc3VsdCBpbiB0aGUgZWxlbWVudHMgYXJyYXkgY29udGFpbmluZzoKICAgICAqIGBgYGpzCiAgICAgKiBtLmVsZW1lbnRzID0gWyAxMSwgMjEsIDMxLCA0MSwKICAgICAqICAgICAgICAgICAgICAgIDEyLCAyMiwgMzIsIDQyLAogICAgICogICAgICAgICAgICAgICAgMTMsIDIzLCAzMywgNDMsCiAgICAgKiAgICAgICAgICAgICAgICAxNCwgMjQsIDM0LCA0NCBdOwogICAgICogYGBgCiAgICAgKiBhbmQgaW50ZXJuYWxseSBhbGwgY2FsY3VsYXRpb25zIGFyZSBwZXJmb3JtZWQgdXNpbmcgY29sdW1uLW1ham9yIG9yZGVyaW5nLgogICAgICogSG93ZXZlciwgYXMgdGhlIGFjdHVhbCBvcmRlcmluZyBtYWtlcyBubyBkaWZmZXJlbmNlIG1hdGhlbWF0aWNhbGx5IGFuZAogICAgICogbW9zdCBwZW9wbGUgYXJlIHVzZWQgdG8gdGhpbmtpbmcgYWJvdXQgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLCB0aGUKICAgICAqIHRocmVlLmpzIGRvY3VtZW50YXRpb24gc2hvd3MgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLiBKdXN0IGJlYXIgaW4KICAgICAqIG1pbmQgdGhhdCBpZiB5b3UgYXJlIHJlYWRpbmcgdGhlIHNvdXJjZSBjb2RlLCB5b3UnbGwgaGF2ZSB0byB0YWtlIHRoZQogICAgICogdHJhbnNwb3NlIG9mIGFueSBtYXRyaWNlcyBvdXRsaW5lZCBoZXJlIHRvIG1ha2Ugc2Vuc2Ugb2YgdGhlIGNhbGN1bGF0aW9ucy4KICAgICAqLwogICAgY2xhc3MgTWF0cml4NCB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgNHg0IG1hdHJpeC4gVGhlIGFyZ3VtZW50cyBhcmUgc3VwcG9zZWQgdG8gYmUKICAgIAkgKiBpbiByb3ctbWFqb3Igb3JkZXIuIElmIG5vIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RvcgogICAgCSAqIGluaXRpYWxpemVzIHRoZSBtYXRyaXggYXMgYW4gaWRlbnRpdHkgbWF0cml4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMTFdIC0gMS0xIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjEyXSAtIDEtMiBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24xM10gLSAxLTMgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMTRdIC0gMS00IG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjIxXSAtIDItMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24yMl0gLSAyLTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMjNdIC0gMi0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjI0XSAtIDItNCBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24zMV0gLSAzLTEgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMzJdIC0gMy0yIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjMzXSAtIDMtMyBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24zNF0gLSAzLTQgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuNDFdIC0gNC0xIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjQyXSAtIDQtMiBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW240M10gLSA0LTMgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuNDRdIC0gNC00IG1hdHJpeCBlbGVtZW50LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJTWF0cml4NC5wcm90b3R5cGUuaXNNYXRyaXg0ID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBBIGNvbHVtbi1tYWpvciBsaXN0IG9mIG1hdHJpeCB2YWx1ZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxudW1iZXI+fQogICAgCQkgKi8KICAgIAkJdGhpcy5lbGVtZW50cyA9IFsKCiAgICAJCQkxLCAwLCAwLCAwLAogICAgCQkJMCwgMSwgMCwgMCwKICAgIAkJCTAsIDAsIDEsIDAsCiAgICAJCQkwLCAwLCAwLCAxCgogICAgCQldOwoKICAgIAkJaWYgKCBuMTEgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl0aGlzLnNldCggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZWxlbWVudHMgb2YgdGhlIG1hdHJpeC5UaGUgYXJndW1lbnRzIGFyZSBzdXBwb3NlZCB0byBiZQogICAgCSAqIGluIHJvdy1tYWpvciBvcmRlci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjExXSAtIDEtMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24xMl0gLSAxLTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMTNdIC0gMS0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjE0XSAtIDEtNCBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24yMV0gLSAyLTEgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMjJdIC0gMi0yIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjIzXSAtIDItMyBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24yNF0gLSAyLTQgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMzFdIC0gMy0xIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjMyXSAtIDMtMiBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW24zM10gLSAzLTMgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuMzRdIC0gMy00IG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjQxXSAtIDQtMSBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW240Ml0gLSA0LTIgbWF0cml4IGVsZW1lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuNDNdIC0gNC0zIG1hdHJpeCBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbjQ0XSAtIDQtNCBtYXRyaXggZWxlbWVudC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlzZXQoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKCiAgICAJCXRlWyAwIF0gPSBuMTE7IHRlWyA0IF0gPSBuMTI7IHRlWyA4IF0gPSBuMTM7IHRlWyAxMiBdID0gbjE0OwogICAgCQl0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDsKICAgIAkJdGVbIDIgXSA9IG4zMTsgdGVbIDYgXSA9IG4zMjsgdGVbIDEwIF0gPSBuMzM7IHRlWyAxNCBdID0gbjM0OwogICAgCQl0ZVsgMyBdID0gbjQxOyB0ZVsgNyBdID0gbjQyOyB0ZVsgMTEgXSA9IG40MzsgdGVbIDE1IF0gPSBuNDQ7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgbWF0cml4IHRvIHRoZSA0eDQgaWRlbnRpdHkgbWF0cml4LgogICAgCSAqCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJaWRlbnRpdHkoKSB7CgogICAgCQl0aGlzLnNldCgKCiAgICAJCQkxLCAwLCAwLCAwLAogICAgCQkJMCwgMSwgMCwgMCwKICAgIAkJCTAsIDAsIDEsIDAsCiAgICAJCQkwLCAwLCAwLCAxCgogICAgCQkpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG1hdHJpeCB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNsb25lKCkgewoKICAgIAkJcmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWNvcHkoIG0gKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CiAgICAJCWNvbnN0IG1lID0gbS5lbGVtZW50czsKCiAgICAJCXRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdOwogICAgCQl0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsKICAgIAkJdGVbIDggXSA9IG1lWyA4IF07IHRlWyA5IF0gPSBtZVsgOSBdOyB0ZVsgMTAgXSA9IG1lWyAxMCBdOyB0ZVsgMTEgXSA9IG1lWyAxMSBdOwogICAgCQl0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB0cmFuc2xhdGlvbiBjb21wb25lbnQgb2YgdGhlIGdpdmVuIG1hdHJpeAogICAgCSAqIGludG8gdGhpcyBtYXRyaXgncyB0cmFuc2xhdGlvbiBjb21wb25lbnQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4IHRvIGNvcHkgdGhlIHRyYW5zbGF0aW9uIGNvbXBvbmVudC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAljb3B5UG9zaXRpb24oIG0gKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsIG1lID0gbS5lbGVtZW50czsKCiAgICAJCXRlWyAxMiBdID0gbWVbIDEyIF07CiAgICAJCXRlWyAxMyBdID0gbWVbIDEzIF07CiAgICAJCXRlWyAxNCBdID0gbWVbIDE0IF07CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXQgdGhlIHVwcGVyIDN4MyBlbGVtZW50cyBvZiB0aGlzIG1hdHJpeCB0byB0aGUgdmFsdWVzIG9mIGdpdmVuIDN4MyBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgM3gzIG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlzZXRGcm9tTWF0cml4MyggbSApIHsKCiAgICAJCWNvbnN0IG1lID0gbS5lbGVtZW50czsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCW1lWyAwIF0sIG1lWyAzIF0sIG1lWyA2IF0sIDAsCiAgICAJCQltZVsgMSBdLCBtZVsgNCBdLCBtZVsgNyBdLCAwLAogICAgCQkJbWVbIDIgXSwgbWVbIDUgXSwgbWVbIDggXSwgMCwKICAgIAkJCTAsIDAsIDAsIDEKCiAgICAJCSk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBFeHRyYWN0cyB0aGUgYmFzaXMgb2YgdGhpcyBtYXRyaXggaW50byB0aGUgdGhyZWUgYXhpcyB2ZWN0b3JzIHByb3ZpZGVkLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB4QXhpcyAtIFRoZSBiYXNpcydzIHggYXhpcy4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHlBeGlzIC0gVGhlIGJhc2lzJ3MgeSBheGlzLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gekF4aXMgLSBUaGUgYmFzaXMncyB6IGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkgewoKICAgIAkJeEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMCApOwogICAgCQl5QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAxICk7CiAgICAJCXpBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDIgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIGJhc2lzIHZlY3RvcnMgdG8gdGhpcyBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHhBeGlzIC0gVGhlIGJhc2lzJ3MgeCBheGlzLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30geUF4aXMgLSBUaGUgYmFzaXMncyB5IGF4aXMuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB6QXhpcyAtIFRoZSBiYXNpcydzIHogYXhpcy4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltYWtlQmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7CgogICAgCQl0aGlzLnNldCgKICAgIAkJCXhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsCiAgICAJCQl4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLAogICAgCQkJeEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCwKICAgIAkJCTAsIDAsIDAsIDEKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEV4dHJhY3RzIHRoZSByb3RhdGlvbiBjb21wb25lbnQgb2YgdGhlIGdpdmVuIG1hdHJpeAogICAgCSAqIGludG8gdGhpcyBtYXRyaXgncyByb3RhdGlvbiBjb21wb25lbnQuCiAgICAJICoKICAgIAkgKiBOb3RlOiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4LgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWV4dHJhY3RSb3RhdGlvbiggbSApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKICAgIAkJY29uc3QgbWUgPSBtLmVsZW1lbnRzOwoKICAgIAkJY29uc3Qgc2NhbGVYID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTsKICAgIAkJY29uc3Qgc2NhbGVZID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTsKICAgIAkJY29uc3Qgc2NhbGVaID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTsKCiAgICAJCXRlWyAwIF0gPSBtZVsgMCBdICogc2NhbGVYOwogICAgCQl0ZVsgMSBdID0gbWVbIDEgXSAqIHNjYWxlWDsKICAgIAkJdGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7CiAgICAJCXRlWyAzIF0gPSAwOwoKICAgIAkJdGVbIDQgXSA9IG1lWyA0IF0gKiBzY2FsZVk7CiAgICAJCXRlWyA1IF0gPSBtZVsgNSBdICogc2NhbGVZOwogICAgCQl0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTsKICAgIAkJdGVbIDcgXSA9IDA7CgogICAgCQl0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjsKICAgIAkJdGVbIDkgXSA9IG1lWyA5IF0gKiBzY2FsZVo7CiAgICAJCXRlWyAxMCBdID0gbWVbIDEwIF0gKiBzY2FsZVo7CiAgICAJCXRlWyAxMSBdID0gMDsKCiAgICAJCXRlWyAxMiBdID0gMDsKICAgIAkJdGVbIDEzIF0gPSAwOwogICAgCQl0ZVsgMTQgXSA9IDA7CiAgICAJCXRlWyAxNSBdID0gMTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHJvdGF0aW9uIGNvbXBvbmVudCAodGhlIHVwcGVyIGxlZnQgM3gzIG1hdHJpeCkgb2YgdGhpcyBtYXRyaXggdG8KICAgIAkgKiB0aGUgcm90YXRpb24gc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBFdWxlciBhbmdsZXMuIFRoZSByZXN0IG9mCiAgICAJICogdGhlIG1hdHJpeCBpcyBzZXQgdG8gdGhlIGlkZW50aXR5LiBEZXBlbmRpbmcgb24gdGhlIHtAbGluayBFdWxlciNvcmRlcn0sCiAgICAJICogdGhlcmUgYXJlIHNpeCBwb3NzaWJsZSBvdXRjb21lcy4gU2VlIFt0aGlzIHBhZ2Vde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlcyNSb3RhdGlvbl9tYXRyaXh9CiAgICAJICogZm9yIGEgY29tcGxldGUgbGlzdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7RXVsZXJ9IGV1bGVyIC0gVGhlIEV1bGVyIGFuZ2xlcy4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltYWtlUm90YXRpb25Gcm9tRXVsZXIoIGV1bGVyICkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwoKICAgIAkJY29uc3QgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejsKICAgIAkJY29uc3QgYSA9IE1hdGguY29zKCB4ICksIGIgPSBNYXRoLnNpbiggeCApOwogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIHkgKSwgZCA9IE1hdGguc2luKCB5ICk7CiAgICAJCWNvbnN0IGUgPSBNYXRoLmNvcyggeiApLCBmID0gTWF0aC5zaW4oIHogKTsKCiAgICAJCWlmICggZXVsZXIub3JkZXIgPT09ICdYWVonICkgewoKICAgIAkJCWNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7CgogICAgCQkJdGVbIDAgXSA9IGMgKiBlOwogICAgCQkJdGVbIDQgXSA9IC0gYyAqIGY7CiAgICAJCQl0ZVsgOCBdID0gZDsKCiAgICAJCQl0ZVsgMSBdID0gYWYgKyBiZSAqIGQ7CiAgICAJCQl0ZVsgNSBdID0gYWUgLSBiZiAqIGQ7CiAgICAJCQl0ZVsgOSBdID0gLSBiICogYzsKCiAgICAJCQl0ZVsgMiBdID0gYmYgLSBhZSAqIGQ7CiAgICAJCQl0ZVsgNiBdID0gYmUgKyBhZiAqIGQ7CiAgICAJCQl0ZVsgMTAgXSA9IGEgKiBjOwoKICAgIAkJfSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWFonICkgewoKICAgIAkJCWNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7CgogICAgCQkJdGVbIDAgXSA9IGNlICsgZGYgKiBiOwogICAgCQkJdGVbIDQgXSA9IGRlICogYiAtIGNmOwogICAgCQkJdGVbIDggXSA9IGEgKiBkOwoKICAgIAkJCXRlWyAxIF0gPSBhICogZjsKICAgIAkJCXRlWyA1IF0gPSBhICogZTsKICAgIAkJCXRlWyA5IF0gPSAtIGI7CgogICAgCQkJdGVbIDIgXSA9IGNmICogYiAtIGRlOwogICAgCQkJdGVbIDYgXSA9IGRmICsgY2UgKiBiOwogICAgCQkJdGVbIDEwIF0gPSBhICogYzsKCiAgICAJCX0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHsKCiAgICAJCQljb25zdCBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmOwoKICAgIAkJCXRlWyAwIF0gPSBjZSAtIGRmICogYjsKICAgIAkJCXRlWyA0IF0gPSAtIGEgKiBmOwogICAgCQkJdGVbIDggXSA9IGRlICsgY2YgKiBiOwoKICAgIAkJCXRlWyAxIF0gPSBjZiArIGRlICogYjsKICAgIAkJCXRlWyA1IF0gPSBhICogZTsKICAgIAkJCXRlWyA5IF0gPSBkZiAtIGNlICogYjsKCiAgICAJCQl0ZVsgMiBdID0gLSBhICogZDsKICAgIAkJCXRlWyA2IF0gPSBiOwogICAgCQkJdGVbIDEwIF0gPSBhICogYzsKCiAgICAJCX0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWllYJyApIHsKCiAgICAJCQljb25zdCBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmOwoKICAgIAkJCXRlWyAwIF0gPSBjICogZTsKICAgIAkJCXRlWyA0IF0gPSBiZSAqIGQgLSBhZjsKICAgIAkJCXRlWyA4IF0gPSBhZSAqIGQgKyBiZjsKCiAgICAJCQl0ZVsgMSBdID0gYyAqIGY7CiAgICAJCQl0ZVsgNSBdID0gYmYgKiBkICsgYWU7CiAgICAJCQl0ZVsgOSBdID0gYWYgKiBkIC0gYmU7CgogICAgCQkJdGVbIDIgXSA9IC0gZDsKICAgIAkJCXRlWyA2IF0gPSBiICogYzsKICAgIAkJCXRlWyAxMCBdID0gYSAqIGM7CgogICAgCQl9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1laWCcgKSB7CgogICAgCQkJY29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDsKCiAgICAJCQl0ZVsgMCBdID0gYyAqIGU7CiAgICAJCQl0ZVsgNCBdID0gYmQgLSBhYyAqIGY7CiAgICAJCQl0ZVsgOCBdID0gYmMgKiBmICsgYWQ7CgogICAgCQkJdGVbIDEgXSA9IGY7CiAgICAJCQl0ZVsgNSBdID0gYSAqIGU7CiAgICAJCQl0ZVsgOSBdID0gLSBiICogZTsKCiAgICAJCQl0ZVsgMiBdID0gLSBkICogZTsKICAgIAkJCXRlWyA2IF0gPSBhZCAqIGYgKyBiYzsKICAgIAkJCXRlWyAxMCBdID0gYWMgLSBiZCAqIGY7CgogICAgCQl9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7CgogICAgCQkJY29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDsKCiAgICAJCQl0ZVsgMCBdID0gYyAqIGU7CiAgICAJCQl0ZVsgNCBdID0gLSBmOwogICAgCQkJdGVbIDggXSA9IGQgKiBlOwoKICAgIAkJCXRlWyAxIF0gPSBhYyAqIGYgKyBiZDsKICAgIAkJCXRlWyA1IF0gPSBhICogZTsKICAgIAkJCXRlWyA5IF0gPSBhZCAqIGYgLSBiYzsKCiAgICAJCQl0ZVsgMiBdID0gYmMgKiBmIC0gYWQ7CiAgICAJCQl0ZVsgNiBdID0gYiAqIGU7CiAgICAJCQl0ZVsgMTAgXSA9IGJkICogZiArIGFjOwoKICAgIAkJfQoKICAgIAkJLy8gYm90dG9tIHJvdwogICAgCQl0ZVsgMyBdID0gMDsKICAgIAkJdGVbIDcgXSA9IDA7CiAgICAJCXRlWyAxMSBdID0gMDsKCiAgICAJCS8vIGxhc3QgY29sdW1uCiAgICAJCXRlWyAxMiBdID0gMDsKICAgIAkJdGVbIDEzIF0gPSAwOwogICAgCQl0ZVsgMTQgXSA9IDA7CiAgICAJCXRlWyAxNSBdID0gMTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHJvdGF0aW9uIGNvbXBvbmVudCBvZiB0aGlzIG1hdHJpeCB0byB0aGUgcm90YXRpb24gc3BlY2lmaWVkIGJ5CiAgICAJICogdGhlIGdpdmVuIFF1YXRlcm5pb24gYXMgb3V0bGluZWQgW2hlcmVde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JvdGF0aW9uX21hdHJpeCNRdWF0ZXJuaW9ufQogICAgCSAqIFRoZSByZXN0IG9mIHRoZSBtYXRyaXggaXMgc2V0IHRvIHRoZSBpZGVudGl0eS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBRdWF0ZXJuaW9uLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkgewoKICAgIAkJcmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSByb3RhdGlvbiBjb21wb25lbnQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCwgbG9va2luZyBmcm9tIGBleWVgIHRvd2FyZHMKICAgIAkgKiBgdGFyZ2V0YCwgYW5kIG9yaWVudGVkIGJ5IHRoZSB1cC1kaXJlY3Rpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGV5ZSAtIFRoZSBleWUgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB1cCAtIFRoZSB1cCB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbG9va0F0KCBleWUsIHRhcmdldCwgdXAgKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQlfei5zdWJWZWN0b3JzKCBleWUsIHRhcmdldCApOwoKICAgIAkJaWYgKCBfei5sZW5ndGhTcSgpID09PSAwICkgewoKICAgIAkJCS8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvbgoKICAgIAkJCV96LnogPSAxOwoKICAgIAkJfQoKICAgIAkJX3oubm9ybWFsaXplKCk7CiAgICAJCV94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7CgogICAgCQlpZiAoIF94Lmxlbmd0aFNxKCkgPT09IDAgKSB7CgogICAgCQkJLy8gdXAgYW5kIHogYXJlIHBhcmFsbGVsCgogICAgCQkJaWYgKCBNYXRoLmFicyggdXAueiApID09PSAxICkgewoKICAgIAkJCQlfei54ICs9IDAuMDAwMTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlfei56ICs9IDAuMDAwMTsKCiAgICAJCQl9CgogICAgCQkJX3oubm9ybWFsaXplKCk7CiAgICAJCQlfeC5jcm9zc1ZlY3RvcnMoIHVwLCBfeiApOwoKICAgIAkJfQoKICAgIAkJX3gubm9ybWFsaXplKCk7CiAgICAJCV95LmNyb3NzVmVjdG9ycyggX3osIF94ICk7CgogICAgCQl0ZVsgMCBdID0gX3gueDsgdGVbIDQgXSA9IF95Lng7IHRlWyA4IF0gPSBfei54OwogICAgCQl0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55OwogICAgCQl0ZVsgMiBdID0gX3guejsgdGVbIDYgXSA9IF95Lno7IHRlWyAxMCBdID0gX3ouejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFBvc3QtbXVsdGlwbGllcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gbXVsdGlwbHkgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltdWx0aXBseSggbSApIHsKCiAgICAJCXJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBQcmUtbXVsdGlwbGllcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gbXVsdGlwbHkgd2l0aC4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlwcmVtdWx0aXBseSggbSApIHsKCiAgICAJCXJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsZXMgdGhlIGdpdmVuIDR4NCBtYXRyaWNlcyBhbmQgc3RvcmVzIHRoZSByZXN1bHQKICAgIAkgKiBpbiB0aGlzIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gYSAtIFRoZSBmaXJzdCBtYXRyaXguCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBiIC0gVGhlIHNlY29uZCBtYXRyaXguCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIHsKCiAgICAJCWNvbnN0IGFlID0gYS5lbGVtZW50czsKICAgIAkJY29uc3QgYmUgPSBiLmVsZW1lbnRzOwogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQljb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTsKICAgIAkJY29uc3QgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07CiAgICAJCWNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTsKICAgIAkJY29uc3QgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdOwoKICAgIAkJY29uc3QgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDQgXSwgYjEzID0gYmVbIDggXSwgYjE0ID0gYmVbIDEyIF07CiAgICAJCWNvbnN0IGIyMSA9IGJlWyAxIF0sIGIyMiA9IGJlWyA1IF0sIGIyMyA9IGJlWyA5IF0sIGIyNCA9IGJlWyAxMyBdOwogICAgCQljb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNiBdLCBiMzMgPSBiZVsgMTAgXSwgYjM0ID0gYmVbIDE0IF07CiAgICAJCWNvbnN0IGI0MSA9IGJlWyAzIF0sIGI0MiA9IGJlWyA3IF0sIGI0MyA9IGJlWyAxMSBdLCBiNDQgPSBiZVsgMTUgXTsKCiAgICAJCXRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEgKyBhMTQgKiBiNDE7CiAgICAJCXRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7CiAgICAJCXRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7CiAgICAJCXRlWyAxMiBdID0gYTExICogYjE0ICsgYTEyICogYjI0ICsgYTEzICogYjM0ICsgYTE0ICogYjQ0OwoKICAgIAkJdGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTsKICAgIAkJdGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0MjsKICAgIAkJdGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0MzsKICAgIAkJdGVbIDEzIF0gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7CgogICAgCQl0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxICsgYTM0ICogYjQxOwogICAgCQl0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyOwogICAgCQl0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0MzsKICAgIAkJdGVbIDE0IF0gPSBhMzEgKiBiMTQgKyBhMzIgKiBiMjQgKyBhMzMgKiBiMzQgKyBhMzQgKiBiNDQ7CgogICAgCQl0ZVsgMyBdID0gYTQxICogYjExICsgYTQyICogYjIxICsgYTQzICogYjMxICsgYTQ0ICogYjQxOwogICAgCQl0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyOwogICAgCQl0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0MzsKICAgIAkJdGVbIDE1IF0gPSBhNDEgKiBiMTQgKyBhNDIgKiBiMjQgKyBhNDMgKiBiMzQgKyBhNDQgKiBiNDQ7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIGV2ZXJ5IGNvbXBvbmVudCBvZiB0aGUgbWF0cml4IGJ5IHRoZSBnaXZlbiBzY2FsYXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbXVsdGlwbHlTY2FsYXIoIHMgKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQl0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzOwogICAgCQl0ZVsgMSBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDkgXSAqPSBzOyB0ZVsgMTMgXSAqPSBzOwogICAgCQl0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gczsKICAgIAkJdGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhpcyBtYXRyaXguCiAgICAJICoKICAgIAkgKiBCYXNlZCBvbiB0aGUgbWV0aG9kIG91dGxpbmVkIFtoZXJlXXtAbGluayBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG1sfS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRldGVybWluYW50LgogICAgCSAqLwogICAgCWRldGVybWluYW50KCkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwoKICAgIAkJY29uc3QgbjExID0gdGVbIDAgXSwgbjEyID0gdGVbIDQgXSwgbjEzID0gdGVbIDggXSwgbjE0ID0gdGVbIDEyIF07CiAgICAJCWNvbnN0IG4yMSA9IHRlWyAxIF0sIG4yMiA9IHRlWyA1IF0sIG4yMyA9IHRlWyA5IF0sIG4yNCA9IHRlWyAxMyBdOwogICAgCQljb25zdCBuMzEgPSB0ZVsgMiBdLCBuMzIgPSB0ZVsgNiBdLCBuMzMgPSB0ZVsgMTAgXSwgbjM0ID0gdGVbIDE0IF07CiAgICAJCWNvbnN0IG40MSA9IHRlWyAzIF0sIG40MiA9IHRlWyA3IF0sIG40MyA9IHRlWyAxMSBdLCBuNDQgPSB0ZVsgMTUgXTsKCiAgICAJCS8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50CgogICAgCQlyZXR1cm4gKAogICAgCQkJbjQxICogKAogICAgCQkJCSsgbjE0ICogbjIzICogbjMyCiAgICAJCQkJIC0gbjEzICogbjI0ICogbjMyCiAgICAJCQkJIC0gbjE0ICogbjIyICogbjMzCiAgICAJCQkJICsgbjEyICogbjI0ICogbjMzCiAgICAJCQkJICsgbjEzICogbjIyICogbjM0CiAgICAJCQkJIC0gbjEyICogbjIzICogbjM0CiAgICAJCQkpICsKICAgIAkJCW40MiAqICgKICAgIAkJCQkrIG4xMSAqIG4yMyAqIG4zNAogICAgCQkJCSAtIG4xMSAqIG4yNCAqIG4zMwogICAgCQkJCSArIG4xNCAqIG4yMSAqIG4zMwogICAgCQkJCSAtIG4xMyAqIG4yMSAqIG4zNAogICAgCQkJCSArIG4xMyAqIG4yNCAqIG4zMQogICAgCQkJCSAtIG4xNCAqIG4yMyAqIG4zMQogICAgCQkJKSArCiAgICAJCQluNDMgKiAoCiAgICAJCQkJKyBuMTEgKiBuMjQgKiBuMzIKICAgIAkJCQkgLSBuMTEgKiBuMjIgKiBuMzQKICAgIAkJCQkgLSBuMTQgKiBuMjEgKiBuMzIKICAgIAkJCQkgKyBuMTIgKiBuMjEgKiBuMzQKICAgIAkJCQkgKyBuMTQgKiBuMjIgKiBuMzEKICAgIAkJCQkgLSBuMTIgKiBuMjQgKiBuMzEKICAgIAkJCSkgKwogICAgCQkJbjQ0ICogKAogICAgCQkJCS0gbjEzICogbjIyICogbjMxCiAgICAJCQkJIC0gbjExICogbjIzICogbjMyCiAgICAJCQkJICsgbjExICogbjIyICogbjMzCiAgICAJCQkJICsgbjEzICogbjIxICogbjMyCiAgICAJCQkJIC0gbjEyICogbjIxICogbjMzCiAgICAJCQkJICsgbjEyICogbjIzICogbjMxCiAgICAJCQkpCgogICAgCQkpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zcG9zZXMgdGhpcyBtYXRyaXggaW4gcGxhY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAl0cmFuc3Bvc2UoKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CiAgICAJCWxldCB0bXA7CgogICAgCQl0bXAgPSB0ZVsgMSBdOyB0ZVsgMSBdID0gdGVbIDQgXTsgdGVbIDQgXSA9IHRtcDsKICAgIAkJdG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7CiAgICAJCXRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wOwoKICAgIAkJdG1wID0gdGVbIDMgXTsgdGVbIDMgXSA9IHRlWyAxMiBdOyB0ZVsgMTIgXSA9IHRtcDsKICAgIAkJdG1wID0gdGVbIDcgXTsgdGVbIDcgXSA9IHRlWyAxMyBdOyB0ZVsgMTMgXSA9IHRtcDsKICAgIAkJdG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgcG9zaXRpb24gY29tcG9uZW50IGZvciB0aGlzIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IsCiAgICAJICogd2l0aG91dCBhZmZlY3RpbmcgdGhlIHJlc3Qgb2YgdGhlIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfFZlY3RvcjN9IHggLSBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBvciBhbHRlcm5hdGl2ZWx5IHRoZSB2ZWN0b3Igb2JqZWN0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAlzZXRQb3NpdGlvbiggeCwgeSwgeiApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKCiAgICAJCWlmICggeC5pc1ZlY3RvcjMgKSB7CgogICAgCQkJdGVbIDEyIF0gPSB4Lng7CiAgICAJCQl0ZVsgMTMgXSA9IHgueTsKICAgIAkJCXRlWyAxNCBdID0geC56OwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0ZVsgMTIgXSA9IHg7CiAgICAJCQl0ZVsgMTMgXSA9IHk7CiAgICAJCQl0ZVsgMTQgXSA9IHo7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBJbnZlcnRzIHRoaXMgbWF0cml4LCB1c2luZyB0aGUgW2FuYWx5dGljIG1ldGhvZF17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW52ZXJ0aWJsZV9tYXRyaXgjQW5hbHl0aWNfc29sdXRpb259LgogICAgCSAqIFlvdSBjYW4gbm90IGludmVydCB3aXRoIGEgZGV0ZXJtaW5hbnQgb2YgemVyby4gSWYgeW91IGF0dGVtcHQgdGhpcywgdGhlIG1ldGhvZCBwcm9kdWNlcwogICAgCSAqIGEgemVybyBtYXRyaXggaW5zdGVhZC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWludmVydCgpIHsKCiAgICAJCS8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bQogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsCgogICAgCQkJbjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSwgbjQxID0gdGVbIDMgXSwKICAgIAkJCW4xMiA9IHRlWyA0IF0sIG4yMiA9IHRlWyA1IF0sIG4zMiA9IHRlWyA2IF0sIG40MiA9IHRlWyA3IF0sCiAgICAJCQluMTMgPSB0ZVsgOCBdLCBuMjMgPSB0ZVsgOSBdLCBuMzMgPSB0ZVsgMTAgXSwgbjQzID0gdGVbIDExIF0sCiAgICAJCQluMTQgPSB0ZVsgMTIgXSwgbjI0ID0gdGVbIDEzIF0sIG4zNCA9IHRlWyAxNCBdLCBuNDQgPSB0ZVsgMTUgXSwKCiAgICAJCQl0MTEgPSBuMjMgKiBuMzQgKiBuNDIgLSBuMjQgKiBuMzMgKiBuNDIgKyBuMjQgKiBuMzIgKiBuNDMgLSBuMjIgKiBuMzQgKiBuNDMgLSBuMjMgKiBuMzIgKiBuNDQgKyBuMjIgKiBuMzMgKiBuNDQsCiAgICAJCQl0MTIgPSBuMTQgKiBuMzMgKiBuNDIgLSBuMTMgKiBuMzQgKiBuNDIgLSBuMTQgKiBuMzIgKiBuNDMgKyBuMTIgKiBuMzQgKiBuNDMgKyBuMTMgKiBuMzIgKiBuNDQgLSBuMTIgKiBuMzMgKiBuNDQsCiAgICAJCQl0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsCiAgICAJCQl0MTQgPSBuMTQgKiBuMjMgKiBuMzIgLSBuMTMgKiBuMjQgKiBuMzIgLSBuMTQgKiBuMjIgKiBuMzMgKyBuMTIgKiBuMjQgKiBuMzMgKyBuMTMgKiBuMjIgKiBuMzQgLSBuMTIgKiBuMjMgKiBuMzQ7CgogICAgCQljb25zdCBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7CgogICAgCQlpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApOwoKICAgIAkJY29uc3QgZGV0SW52ID0gMSAvIGRldDsKCiAgICAJCXRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7CiAgICAJCXRlWyAxIF0gPSAoIG4yNCAqIG4zMyAqIG40MSAtIG4yMyAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMSAqIG40MyArIG4yMSAqIG4zNCAqIG40MyArIG4yMyAqIG4zMSAqIG40NCAtIG4yMSAqIG4zMyAqIG40NCApICogZGV0SW52OwogICAgCQl0ZVsgMiBdID0gKCBuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQgKSAqIGRldEludjsKICAgIAkJdGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7CgogICAgCQl0ZVsgNCBdID0gdDEyICogZGV0SW52OwogICAgCQl0ZVsgNSBdID0gKCBuMTMgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzMgKiBuNDEgKyBuMTQgKiBuMzEgKiBuNDMgLSBuMTEgKiBuMzQgKiBuNDMgLSBuMTMgKiBuMzEgKiBuNDQgKyBuMTEgKiBuMzMgKiBuNDQgKSAqIGRldEludjsKICAgIAkJdGVbIDYgXSA9ICggbjE0ICogbjMyICogbjQxIC0gbjEyICogbjM0ICogbjQxIC0gbjE0ICogbjMxICogbjQyICsgbjExICogbjM0ICogbjQyICsgbjEyICogbjMxICogbjQ0IC0gbjExICogbjMyICogbjQ0ICkgKiBkZXRJbnY7CiAgICAJCXRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52OwoKICAgIAkJdGVbIDggXSA9IHQxMyAqIGRldEludjsKICAgIAkJdGVbIDkgXSA9ICggbjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0ICkgKiBkZXRJbnY7CiAgICAJCXRlWyAxMCBdID0gKCBuMTIgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjIgKiBuNDEgKyBuMTQgKiBuMjEgKiBuNDIgLSBuMTEgKiBuMjQgKiBuNDIgLSBuMTIgKiBuMjEgKiBuNDQgKyBuMTEgKiBuMjIgKiBuNDQgKSAqIGRldEludjsKICAgIAkJdGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52OwoKICAgIAkJdGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7CiAgICAJCXRlWyAxMyBdID0gKCBuMTMgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjMgKiBuMzEgKyBuMTQgKiBuMjEgKiBuMzMgLSBuMTEgKiBuMjQgKiBuMzMgLSBuMTMgKiBuMjEgKiBuMzQgKyBuMTEgKiBuMjMgKiBuMzQgKSAqIGRldEludjsKICAgIAkJdGVbIDE0IF0gPSAoIG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCApICogZGV0SW52OwogICAgCQl0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoZSBjb2x1bW5zIG9mIHRoaXMgbWF0cml4IGJ5IHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgc2NhbGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCXNjYWxlKCB2ICkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwogICAgCQljb25zdCB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56OwoKICAgIAkJdGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejsKICAgIAkJdGVbIDEgXSAqPSB4OyB0ZVsgNSBdICo9IHk7IHRlWyA5IF0gKj0gejsKICAgIAkJdGVbIDIgXSAqPSB4OyB0ZVsgNiBdICo9IHk7IHRlWyAxMCBdICo9IHo7CiAgICAJCXRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogR2V0cyB0aGUgbWF4aW11bSBzY2FsZSB2YWx1ZSBvZiB0aGUgdGhyZWUgYXhlcy4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heGltdW0gc2NhbGUuCiAgICAJICovCiAgICAJZ2V0TWF4U2NhbGVPbkF4aXMoKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQljb25zdCBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTsKICAgIAkJY29uc3Qgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07CiAgICAJCWNvbnN0IHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07CgogICAgCQlyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHRyYW5zbGF0aW9uIHRyYW5zZm9ybSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcnxWZWN0b3IzfSB4IC0gVGhlIGFtb3VudCB0byB0cmFuc2xhdGUgaW4gdGhlIFggYXhpcyBvciBhbHRlcm5hdGl2ZWx5IGEgdHJhbnNsYXRpb24gdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFtb3VudCB0byB0cmFuc2xhdGUgaW4gdGhlIFkgYXhpcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSBhbW91bnQgdG8gdHJhbnNsYXRlIGluIHRoZSB6IGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICkgewoKICAgIAkJaWYgKCB4LmlzVmVjdG9yMyApIHsKCiAgICAJCQl0aGlzLnNldCgKCiAgICAJCQkJMSwgMCwgMCwgeC54LAogICAgCQkJCTAsIDEsIDAsIHgueSwKICAgIAkJCQkwLCAwLCAxLCB4LnosCiAgICAJCQkJMCwgMCwgMCwgMQoKICAgIAkJCSk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRoaXMuc2V0KAoKICAgIAkJCQkxLCAwLCAwLCB4LAogICAgCQkJCTAsIDEsIDAsIHksCiAgICAJCQkJMCwgMCwgMSwgeiwKICAgIAkJCQkwLCAwLCAwLCAxCgogICAgCQkJKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGFyb3VuZCB0aGUgWCBheGlzIGJ5CiAgICAJICogdGhlIGdpdmVuIGFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHRoZXRhIC0gVGhlIHJvdGF0aW9uIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVJvdGF0aW9uWCggdGhldGEgKSB7CgogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCTEsIDAsIDAsIDAsCiAgICAJCQkwLCBjLCAtIHMsIDAsCiAgICAJCQkwLCBzLCBjLCAwLAogICAgCQkJMCwgMCwgMCwgMQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGFyb3VuZCB0aGUgWSBheGlzIGJ5CiAgICAJICogdGhlIGdpdmVuIGFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHRoZXRhIC0gVGhlIHJvdGF0aW9uIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVJvdGF0aW9uWSggdGhldGEgKSB7CgogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCSBjLCAwLCBzLCAwLAogICAgCQkJIDAsIDEsIDAsIDAsCiAgICAJCQktIHMsIDAsIGMsIDAsCiAgICAJCQkgMCwgMCwgMCwgMQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGFyb3VuZCB0aGUgWiBheGlzIGJ5CiAgICAJICogdGhlIGdpdmVuIGFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHRoZXRhIC0gVGhlIHJvdGF0aW9uIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVJvdGF0aW9uWiggdGhldGEgKSB7CgogICAgCQljb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCWMsIC0gcywgMCwgMCwKICAgIAkJCXMsIGMsIDAsIDAsCiAgICAJCQkwLCAwLCAxLCAwLAogICAgCQkJMCwgMCwgMCwgMQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpcyBieQogICAgCSAqIHRoZSBnaXZlbiBhbmdsZS4KICAgIAkgKgogICAgCSAqIFRoaXMgaXMgYSBzb21ld2hhdCBjb250cm92ZXJzaWFsIGJ1dCBtYXRoZW1hdGljYWxseSBzb3VuZCBhbHRlcm5hdGl2ZSB0bwogICAgCSAqIHJvdGF0aW5nIHZpYSBRdWF0ZXJuaW9ucy4gU2VlIHRoZSBkaXNjdXNzaW9uIFtoZXJlXXtAbGluayBodHRwczovL3d3dy5nYW1lZGV2Lm5ldC9hcnRpY2xlcy9wcm9ncmFtbWluZy9tYXRoLWFuZC1waHlzaWNzL2RvLXdlLXJlYWxseS1uZWVkLXF1YXRlcm5pb25zLXIxMTk5fS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIFRoZSBub3JtYWxpemVkIHJvdGF0aW9uIGF4aXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIHJvdGF0aW9uIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVJvdGF0aW9uQXhpcyggYXhpcywgYW5nbGUgKSB7CgogICAgCQkvLyBCYXNlZCBvbiBodHRwOi8vd3d3LmdhbWVkZXYubmV0L3JlZmVyZW5jZS9hcnRpY2xlcy9hcnRpY2xlMTE5OS5hc3AKCiAgICAJCWNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKTsKICAgIAkJY29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApOwogICAgCQljb25zdCB0ID0gMSAtIGM7CiAgICAJCWNvbnN0IHggPSBheGlzLngsIHkgPSBheGlzLnksIHogPSBheGlzLno7CiAgICAJCWNvbnN0IHR4ID0gdCAqIHgsIHR5ID0gdCAqIHk7CgogICAgCQl0aGlzLnNldCgKCiAgICAJCQl0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsCiAgICAJCQl0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsCiAgICAJCQl0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsCiAgICAJCQkwLCAwLCAwLCAxCgogICAgCQkpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHNjYWxlIHRyYW5zZm9ybWF0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBYIGF4aXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBZIGF4aXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBaIGF4aXMuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJbWFrZVNjYWxlKCB4LCB5LCB6ICkgewoKICAgIAkJdGhpcy5zZXQoCgogICAgCQkJeCwgMCwgMCwgMCwKICAgIAkJCTAsIHksIDAsIDAsCiAgICAJCQkwLCAwLCB6LCAwLAogICAgCQkJMCwgMCwgMCwgMQoKICAgIAkJKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSBzaGVhciB0cmFuc2Zvcm1hdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4eSAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWCBieSBZLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4eiAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWCBieSBaLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5eCAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWSBieSBYLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5eiAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWSBieSBaLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6eCAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWiBieSBYLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6eSAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWiBieSBZLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VTaGVhciggeHksIHh6LCB5eCwgeXosIHp4LCB6eSApIHsKCiAgICAJCXRoaXMuc2V0KAoKICAgIAkJCTEsIHl4LCB6eCwgMCwKICAgIAkJCXh5LCAxLCB6eSwgMCwKICAgIAkJCXh6LCB5eiwgMSwgMCwKICAgIAkJCTAsIDAsIDAsIDEKCiAgICAJCSk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgbWF0cml4IHRvIHRoZSB0cmFuc2Zvcm1hdGlvbiBjb21wb3NlZCBvZiB0aGUgZ2l2ZW4gcG9zaXRpb24sCiAgICAJICogcm90YXRpb24gKFF1YXRlcm5pb24pIGFuZCBzY2FsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdGVybmlvbiAtIFRoZSByb3RhdGlvbiBhcyBhIFF1YXRlcm5pb24uCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBzY2FsZSAtIFRoZSBzY2FsZSB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwoKICAgIAkJY29uc3QgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7CiAgICAJCWNvbnN0IHgyID0geCArIHgsCXkyID0geSArIHksIHoyID0geiArIHo7CiAgICAJCWNvbnN0IHh4ID0geCAqIHgyLCB4eSA9IHggKiB5MiwgeHogPSB4ICogejI7CiAgICAJCWNvbnN0IHl5ID0geSAqIHkyLCB5eiA9IHkgKiB6MiwgenogPSB6ICogejI7CiAgICAJCWNvbnN0IHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7CgogICAgCQljb25zdCBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56OwoKICAgIAkJdGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDsKICAgIAkJdGVbIDEgXSA9ICggeHkgKyB3eiApICogc3g7CiAgICAJCXRlWyAyIF0gPSAoIHh6IC0gd3kgKSAqIHN4OwogICAgCQl0ZVsgMyBdID0gMDsKCiAgICAJCXRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5OwogICAgCQl0ZVsgNSBdID0gKCAxIC0gKCB4eCArIHp6ICkgKSAqIHN5OwogICAgCQl0ZVsgNiBdID0gKCB5eiArIHd4ICkgKiBzeTsKICAgIAkJdGVbIDcgXSA9IDA7CgogICAgCQl0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejsKICAgIAkJdGVbIDkgXSA9ICggeXogLSB3eCApICogc3o7CiAgICAJCXRlWyAxMCBdID0gKCAxIC0gKCB4eCArIHl5ICkgKSAqIHN6OwogICAgCQl0ZVsgMTEgXSA9IDA7CgogICAgCQl0ZVsgMTIgXSA9IHBvc2l0aW9uLng7CiAgICAJCXRlWyAxMyBdID0gcG9zaXRpb24ueTsKICAgIAkJdGVbIDE0IF0gPSBwb3NpdGlvbi56OwogICAgCQl0ZVsgMTUgXSA9IDE7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEZWNvbXBvc2VzIHRoaXMgbWF0cml4IGludG8gaXRzIHBvc2l0aW9uLCByb3RhdGlvbiBhbmQgc2NhbGUgY29tcG9uZW50cwogICAgCSAqIGFuZCBwcm92aWRlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiBvYmplY3RzLgogICAgCSAqCiAgICAJICogTm90ZTogTm90IGFsbCBtYXRyaWNlcyBhcmUgZGVjb21wb3NhYmxlIGluIHRoaXMgd2F5LiBGb3IgZXhhbXBsZSwgaWYgYW4KICAgIAkgKiBvYmplY3QgaGFzIGEgbm9uLXVuaWZvcm1seSBzY2FsZWQgcGFyZW50LCB0aGVuIHRoZSBvYmplY3QncyB3b3JsZCBtYXRyaXgKICAgIAkgKiBtYXkgbm90IGJlIGRlY29tcG9zYWJsZSwgYW5kIHRoaXMgbWV0aG9kIG1heSBub3QgYmUgYXBwcm9wcmlhdGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRlcm5pb24gLSBUaGUgcm90YXRpb24gYXMgYSBRdWF0ZXJuaW9uLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gc2NhbGUgLSBUaGUgc2NhbGUgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCWRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwoKICAgIAkJbGV0IHN4ID0gX3YxJDUuc2V0KCB0ZVsgMCBdLCB0ZVsgMSBdLCB0ZVsgMiBdICkubGVuZ3RoKCk7CiAgICAJCWNvbnN0IHN5ID0gX3YxJDUuc2V0KCB0ZVsgNCBdLCB0ZVsgNSBdLCB0ZVsgNiBdICkubGVuZ3RoKCk7CiAgICAJCWNvbnN0IHN6ID0gX3YxJDUuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpOwoKICAgIAkJLy8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGUKICAgIAkJY29uc3QgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpOwogICAgCQlpZiAoIGRldCA8IDAgKSBzeCA9IC0gc3g7CgogICAgCQlwb3NpdGlvbi54ID0gdGVbIDEyIF07CiAgICAJCXBvc2l0aW9uLnkgPSB0ZVsgMTMgXTsKICAgIAkJcG9zaXRpb24ueiA9IHRlWyAxNCBdOwoKICAgIAkJLy8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnQKICAgIAkJX20xJDIuY29weSggdGhpcyApOwoKICAgIAkJY29uc3QgaW52U1ggPSAxIC8gc3g7CiAgICAJCWNvbnN0IGludlNZID0gMSAvIHN5OwogICAgCQljb25zdCBpbnZTWiA9IDEgLyBzejsKCiAgICAJCV9tMSQyLmVsZW1lbnRzWyAwIF0gKj0gaW52U1g7CiAgICAJCV9tMSQyLmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7CiAgICAJCV9tMSQyLmVsZW1lbnRzWyAyIF0gKj0gaW52U1g7CgogICAgCQlfbTEkMi5lbGVtZW50c1sgNCBdICo9IGludlNZOwogICAgCQlfbTEkMi5lbGVtZW50c1sgNSBdICo9IGludlNZOwogICAgCQlfbTEkMi5lbGVtZW50c1sgNiBdICo9IGludlNZOwoKICAgIAkJX20xJDIuZWxlbWVudHNbIDggXSAqPSBpbnZTWjsKICAgIAkJX20xJDIuZWxlbWVudHNbIDkgXSAqPSBpbnZTWjsKICAgIAkJX20xJDIuZWxlbWVudHNbIDEwIF0gKj0gaW52U1o7CgogICAgCQlxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xJDIgKTsKCiAgICAJCXNjYWxlLnggPSBzeDsKICAgIAkJc2NhbGUueSA9IHN5OwogICAgCQlzY2FsZS56ID0gc3o7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDcmVhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXguIFRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5CiAgICAJICoge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI3VwZGF0ZVByb2plY3Rpb25NYXRyaXh9LgoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbGVmdCAtIExlZnQgYm91bmRhcnkgb2YgdGhlIHZpZXdpbmcgZnJ1c3R1bSBhdCB0aGUgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgLSBSaWdodCBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgLSBUb3AgYm91bmRhcnkgb2YgdGhlIHZpZXdpbmcgZnJ1c3R1bSBhdCB0aGUgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIC0gQm90dG9tIGJvdW5kYXJ5IG9mIHRoZSB2aWV3aW5nIGZydXN0dW0gYXQgdGhlIG5lYXIgcGxhbmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBuZWFyIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBmYXIgcGxhbmUuCiAgICAJICogQHBhcmFtIHsoV2ViR0xDb29yZGluYXRlU3lzdGVtfFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0pfSBbY29vcmRpbmF0ZVN5c3RlbT1XZWJHTENvb3JkaW5hdGVTeXN0ZW1dIC0gVGhlIGNvb3JkaW5hdGUgc3lzdGVtLgogICAgCSAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LgogICAgCSAqLwogICAgCW1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIsIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CiAgICAJCWNvbnN0IHggPSAyICogbmVhciAvICggcmlnaHQgLSBsZWZ0ICk7CiAgICAJCWNvbnN0IHkgPSAyICogbmVhciAvICggdG9wIC0gYm90dG9tICk7CgogICAgCQljb25zdCBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7CiAgICAJCWNvbnN0IGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTsKCiAgICAJCWxldCBjLCBkOwoKICAgIAkJaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQkJYyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTsKICAgIAkJCWQgPSAoIC0yICogZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7CgogICAgCQl9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkgewoKICAgIAkJCWMgPSAtIGZhciAvICggZmFyIC0gbmVhciApOwogICAgCQkJZCA9ICggLSBmYXIgKiBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuTWF0cml4NC5tYWtlUGVyc3BlY3RpdmUoKTogSW52YWxpZCBjb29yZGluYXRlIHN5c3RlbTogJyArIGNvb3JkaW5hdGVTeXN0ZW0gKTsKCiAgICAJCX0KCiAgICAJCXRlWyAwIF0gPSB4Owl0ZVsgNCBdID0gMDsJdGVbIDggXSA9IGE7IAl0ZVsgMTIgXSA9IDA7CiAgICAJCXRlWyAxIF0gPSAwOwl0ZVsgNSBdID0geTsJdGVbIDkgXSA9IGI7IAl0ZVsgMTMgXSA9IDA7CiAgICAJCXRlWyAyIF0gPSAwOwl0ZVsgNiBdID0gMDsJdGVbIDEwIF0gPSBjOyAJdGVbIDE0IF0gPSBkOwogICAgCQl0ZVsgMyBdID0gMDsJdGVbIDcgXSA9IDA7CXRlWyAxMSBdID0gLTE7CXRlWyAxNSBdID0gMDsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENyZWF0ZXMgYSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXguIFRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5CiAgICAJICoge0BsaW5rIE9ydGhvZ3JhcGhpY0NhbWVyYSN1cGRhdGVQcm9qZWN0aW9uTWF0cml4fS4KCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgLSBMZWZ0IGJvdW5kYXJ5IG9mIHRoZSB2aWV3aW5nIGZydXN0dW0gYXQgdGhlIG5lYXIgcGxhbmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IC0gUmlnaHQgYm91bmRhcnkgb2YgdGhlIHZpZXdpbmcgZnJ1c3R1bSBhdCB0aGUgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gdG9wIC0gVG9wIGJvdW5kYXJ5IG9mIHRoZSB2aWV3aW5nIGZydXN0dW0gYXQgdGhlIG5lYXIgcGxhbmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSAtIEJvdHRvbSBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gZmFyIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgZmFyIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7KFdlYkdMQ29vcmRpbmF0ZVN5c3RlbXxXZWJHUFVDb29yZGluYXRlU3lzdGVtKX0gW2Nvb3JkaW5hdGVTeXN0ZW09V2ViR0xDb29yZGluYXRlU3lzdGVtXSAtIFRoZSBjb29yZGluYXRlIHN5c3RlbS4KICAgIAkgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC4KICAgIAkgKi8KICAgIAltYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHsKCiAgICAJCWNvbnN0IHRlID0gdGhpcy5lbGVtZW50czsKICAgIAkJY29uc3QgdyA9IDEuMCAvICggcmlnaHQgLSBsZWZ0ICk7CiAgICAJCWNvbnN0IGggPSAxLjAgLyAoIHRvcCAtIGJvdHRvbSApOwogICAgCQljb25zdCBwID0gMS4wIC8gKCBmYXIgLSBuZWFyICk7CgogICAgCQljb25zdCB4ID0gKCByaWdodCArIGxlZnQgKSAqIHc7CiAgICAJCWNvbnN0IHkgPSAoIHRvcCArIGJvdHRvbSApICogaDsKCiAgICAJCWxldCB6LCB6SW52OwoKICAgIAkJaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQkJeiA9ICggZmFyICsgbmVhciApICogcDsKICAgIAkJCXpJbnYgPSAtMiAqIHA7CgogICAgCQl9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkgewoKICAgIAkJCXogPSBuZWFyICogcDsKICAgIAkJCXpJbnYgPSAtMSAqIHA7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLk1hdHJpeDQubWFrZU9ydGhvZ3JhcGhpYygpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApOwoKICAgIAkJfQoKICAgIAkJdGVbIDAgXSA9IDIgKiB3Owl0ZVsgNCBdID0gMDsJCXRlWyA4IF0gPSAwOyAJCXRlWyAxMiBdID0gLSB4OwogICAgCQl0ZVsgMSBdID0gMDsgCQl0ZVsgNSBdID0gMiAqIGg7CXRlWyA5IF0gPSAwOyAJCXRlWyAxMyBdID0gLSB5OwogICAgCQl0ZVsgMiBdID0gMDsgCQl0ZVsgNiBdID0gMDsJCXRlWyAxMCBdID0gekludjsJdGVbIDE0IF0gPSAtIHo7CiAgICAJCXRlWyAzIF0gPSAwOyAJCXRlWyA3IF0gPSAwOwkJdGVbIDExIF0gPSAwOwkJdGVbIDE1IF0gPSAxOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBtYXRyaXggaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIHRlc3QgZm9yIGVxdWFsaXR5LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBtYXRyaXggaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqLwogICAgCWVxdWFscyggbWF0cml4ICkgewoKICAgIAkJY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzOwogICAgCQljb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50czsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkgewoKICAgIAkJCWlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0cnVlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGVsZW1lbnRzIG9mIHRoZSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGFycmF5IC0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuCiAgICAJICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguCiAgICAJICovCiAgICAJZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkgewoKICAgIAkJCXRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBXcml0ZXMgdGhlIGVsZW1lbnRzIG9mIHRoaXMgbWF0cml4IHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsCiAgICAJICogdGhlIG1ldGhvZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSBtYXRyaXggZWxlbWVudHMgaW4gY29sdW1uLW1ham9yIG9yZGVyLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gSW5kZXggb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5LgogICAgCSAqIEByZXR1cm4ge0FycmF5PG51bWJlcj59IFRoZSBtYXRyaXggZWxlbWVudHMgaW4gY29sdW1uLW1ham9yIG9yZGVyLgogICAgCSAqLwogICAgCXRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7CgogICAgCQljb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7CgogICAgCQlhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdOwoKICAgIAkJYXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07CgogICAgCQlhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTsKICAgIAkJYXJyYXlbIG9mZnNldCArIDkgXSA9IHRlWyA5IF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyAxMCBdID0gdGVbIDEwIF07CiAgICAJCWFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07CgogICAgCQlhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMTMgXSA9IHRlWyAxMyBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMTQgXSA9IHRlWyAxNCBdOwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdOwoKICAgIAkJcmV0dXJuIGFycmF5OwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF92MSQ1ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX20xJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7CiAgICBjb25zdCBfemVybyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTsKICAgIGNvbnN0IF9vbmUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7CiAgICBjb25zdCBfeCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF95ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3ogPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgY29uc3QgX21hdHJpeCQyID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpOwogICAgY29uc3QgX3F1YXRlcm5pb24kMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTsKCiAgICAvKioKICAgICAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIEV1bGVyIGFuZ2xlcy4KICAgICAqCiAgICAgKiBFdWxlciBhbmdsZXMgZGVzY3JpYmUgYSByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uIGJ5IHJvdGF0aW5nIGFuIG9iamVjdCBvbgogICAgICogaXRzIHZhcmlvdXMgYXhlcyBpbiBzcGVjaWZpZWQgYW1vdW50cyBwZXIgYXhpcywgYW5kIGEgc3BlY2lmaWVkIGF4aXMKICAgICAqIG9yZGVyLgogICAgICoKICAgICAqIEl0ZXJhdGluZyB0aHJvdWdoIGFuIGluc3RhbmNlIHdpbGwgeWllbGQgaXRzIGNvbXBvbmVudHMgKHgsIHksIHosCiAgICAgKiBvcmRlcikgaW4gdGhlIGNvcnJlc3BvbmRpbmcgb3JkZXIuCiAgICAgKgogICAgICogYGBganMKICAgICAqIGNvbnN0IGEgPSBuZXcgVEhSRUUuRXVsZXIoIDAsIDEsIDEuNTcsICdYWVonICk7CiAgICAgKiBjb25zdCBiID0gbmV3IFRIUkVFLlZlY3RvcjMoIDEsIDAsIDEgKTsKICAgICAqIGIuYXBwbHlFdWxlcihhKTsKICAgICAqIGBgYAogICAgICovCiAgICBjbGFzcyBFdWxlciB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgZXVsZXIgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSBhbmdsZSBvZiB0aGUgeSBheGlzIGluIHJhZGlhbnMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt6PTBdIC0gVGhlIGFuZ2xlIG9mIHRoZSB6IGF4aXMgaW4gcmFkaWFucy4KICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyPUV1bGVyLkRFRkFVTFRfT1JERVJdIC0gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIG9yZGVyID0gRXVsZXIuREVGQVVMVF9PUkRFUiApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzRXVsZXIgPSB0cnVlOwoKICAgIAkJdGhpcy5feCA9IHg7CiAgICAJCXRoaXMuX3kgPSB5OwogICAgCQl0aGlzLl96ID0gejsKICAgIAkJdGhpcy5fb3JkZXIgPSBvcmRlcjsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCAwCiAgICAJICovCiAgICAJZ2V0IHgoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5feDsKCiAgICAJfQoKICAgIAlzZXQgeCggdmFsdWUgKSB7CgogICAgCQl0aGlzLl94ID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgYW5nbGUgb2YgdGhlIHkgYXhpcyBpbiByYWRpYW5zLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCAwCiAgICAJICovCiAgICAJZ2V0IHkoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5feTsKCiAgICAJfQoKICAgIAlzZXQgeSggdmFsdWUgKSB7CgogICAgCQl0aGlzLl95ID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGUgYW5nbGUgb2YgdGhlIHogYXhpcyBpbiByYWRpYW5zLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCAwCiAgICAJICovCiAgICAJZ2V0IHooKSB7CgogICAgCQlyZXR1cm4gdGhpcy5fejsKCiAgICAJfQoKICAgIAlzZXQgeiggdmFsdWUgKSB7CgogICAgCQl0aGlzLl96ID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG9yZGVyIHRoYXQgdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC4KICAgIAkgKgogICAgCSAqIEB0eXBlIHtzdHJpbmd9CiAgICAJICogQGRlZmF1bHQgJ1hZWicKICAgIAkgKi8KICAgIAlnZXQgb3JkZXIoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5fb3JkZXI7CgogICAgCX0KCiAgICAJc2V0IG9yZGVyKCB2YWx1ZSApIHsKCiAgICAJCXRoaXMuX29yZGVyID0gdmFsdWU7CiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBFdWxlciBjb21wb25lbnRzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFuZ2xlIG9mIHRoZSB5IGF4aXMgaW4gcmFkaWFucy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSBhbmdsZSBvZiB0aGUgeiBheGlzIGluIHJhZGlhbnMuCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtvcmRlcl0gLSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG9yZGVyIHRoYXQgdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC4KICAgIAkgKiBAcmV0dXJuIHtFdWxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBFdWxlciBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXQoIHgsIHksIHosIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7CgogICAgCQl0aGlzLl94ID0geDsKICAgIAkJdGhpcy5feSA9IHk7CiAgICAJCXRoaXMuX3ogPSB6OwogICAgCQl0aGlzLl9vcmRlciA9IG9yZGVyOwoKICAgIAkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyBFdWxlciBpbnN0YW5jZSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7RXVsZXJ9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fb3JkZXIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gRXVsZXIgaW5zdGFuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7RXVsZXJ9IGV1bGVyIC0gVGhlIEV1bGVyIGluc3RhbmNlIHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY29weSggZXVsZXIgKSB7CgogICAgCQl0aGlzLl94ID0gZXVsZXIuX3g7CiAgICAJCXRoaXMuX3kgPSBldWxlci5feTsKICAgIAkJdGhpcy5feiA9IGV1bGVyLl96OwogICAgCQl0aGlzLl9vcmRlciA9IGV1bGVyLl9vcmRlcjsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGFuZ2xlcyBvZiB0aGlzIEV1bGVyIGluc3RhbmNlIGZyb20gYSBwdXJlIHJvdGF0aW9uIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIEEgNHg0IG1hdHJpeCBvZiB3aGljaCB0aGUgdXBwZXIgM3gzIG9mIG1hdHJpeCBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUuIHVuc2NhbGVkKS4KICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyXSAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgdGhhdCB0aGUgcm90YXRpb25zIGFyZSBhcHBsaWVkLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZT10cnVlXSAtIFdoZXRoZXIgdGhlIGludGVybmFsIGBvbkNoYW5nZWAgY2FsbGJhY2sgc2hvdWxkIGJlIGV4ZWN1dGVkIG9yIG5vdC4KICAgIAkgKiBAcmV0dXJuIHtFdWxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBFdWxlciBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXRGcm9tUm90YXRpb25NYXRyaXgoIG0sIG9yZGVyID0gdGhpcy5fb3JkZXIsIHVwZGF0ZSA9IHRydWUgKSB7CgogICAgCQljb25zdCB0ZSA9IG0uZWxlbWVudHM7CiAgICAJCWNvbnN0IG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07CiAgICAJCWNvbnN0IG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF07CiAgICAJCWNvbnN0IG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdOwoKICAgIAkJc3dpdGNoICggb3JkZXIgKSB7CgogICAgCQkJY2FzZSAnWFlaJzoKCiAgICAJCQkJdGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLTEsIDEgKSApOwoKICAgIAkJCQlpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHsKCiAgICAJCQkJCXRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7CiAgICAJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTExICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQl0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTsKICAgIAkJCQkJdGhpcy5feiA9IDA7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWVhaJzoKCiAgICAJCQkJdGhpcy5feCA9IE1hdGguYXNpbiggLSBjbGFtcCggbTIzLCAtMSwgMSApICk7CgogICAgCQkJCWlmICggTWF0aC5hYnMoIG0yMyApIDwgMC45OTk5OTk5ICkgewoKICAgIAkJCQkJdGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7CiAgICAJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0yMiApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJdGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMTEgKTsKICAgIAkJCQkJdGhpcy5feiA9IDA7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWlhZJzoKCiAgICAJCQkJdGhpcy5feCA9IE1hdGguYXNpbiggY2xhbXAoIG0zMiwgLTEsIDEgKSApOwoKICAgIAkJCQlpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTk5OSApIHsKCiAgICAJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTMzICk7CiAgICAJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQl0aGlzLl95ID0gMDsKICAgIAkJCQkJdGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWllYJzoKCiAgICAJCQkJdGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtMSwgMSApICk7CgogICAgCQkJCWlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkgewoKICAgIAkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7CiAgICAJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJdGhpcy5feCA9IDA7CiAgICAJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWVpYJzoKCiAgICAJCQkJdGhpcy5feiA9IE1hdGguYXNpbiggY2xhbXAoIG0yMSwgLTEsIDEgKSApOwoKICAgIAkJCQlpZiAoIE1hdGguYWJzKCBtMjEgKSA8IDAuOTk5OTk5OSApIHsKCiAgICAJCQkJCXRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTIyICk7CiAgICAJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQl0aGlzLl94ID0gMDsKICAgIAkJCQkJdGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnWFpZJzoKCiAgICAJCQkJdGhpcy5feiA9IE1hdGguYXNpbiggLSBjbGFtcCggbTEyLCAtMSwgMSApICk7CgogICAgCQkJCWlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OTk5ICkgewoKICAgIAkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7CiAgICAJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0xMSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTsKICAgIAkJCQkJdGhpcy5feSA9IDA7CgogICAgCQkJCX0KCiAgICAJCQkJYnJlYWs7CgogICAgCQkJZGVmYXVsdDoKCiAgICAJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTsKCiAgICAJCX0KCiAgICAJCXRoaXMuX29yZGVyID0gb3JkZXI7CgogICAgCQlpZiAoIHVwZGF0ZSA9PT0gdHJ1ZSApIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGFuZ2xlcyBvZiB0aGlzIEV1bGVyIGluc3RhbmNlIGZyb20gYSBub3JtYWxpemVkIHF1YXRlcm5pb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHEgLSBBIG5vcm1hbGl6ZWQgUXVhdGVybmlvbi4KICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyXSAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgdGhhdCB0aGUgcm90YXRpb25zIGFyZSBhcHBsaWVkLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZT10cnVlXSAtIFdoZXRoZXIgdGhlIGludGVybmFsIGBvbkNoYW5nZWAgY2FsbGJhY2sgc2hvdWxkIGJlIGV4ZWN1dGVkIG9yIG5vdC4KICAgIAkgKiBAcmV0dXJuIHtFdWxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBFdWxlciBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXRGcm9tUXVhdGVybmlvbiggcSwgb3JkZXIsIHVwZGF0ZSApIHsKCiAgICAJCV9tYXRyaXgkMi5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApOwoKICAgIAkJcmV0dXJuIHRoaXMuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbWF0cml4JDIsIG9yZGVyLCB1cGRhdGUgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBhbmdsZXMgb2YgdGhpcyBFdWxlciBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbb3JkZXJdIC0gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuCiAgICAJICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0RnJvbVZlY3RvcjMoIHYsIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmVzZXRzIHRoZSBldWxlciBhbmdsZSB3aXRoIGEgbmV3IG9yZGVyIGJ5IGNyZWF0aW5nIGEgcXVhdGVybmlvbiBmcm9tIHRoaXMKICAgIAkgKiBldWxlciBhbmdsZSBhbmQgdGhlbiBzZXR0aW5nIHRoaXMgZXVsZXIgYW5nbGUgd2l0aCB0aGUgcXVhdGVybmlvbiBhbmQgdGhlCiAgICAJICogbmV3IG9yZGVyLgogICAgCSAqCiAgICAJICogV2FybmluZzogVGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtuZXdPcmRlcl0gLSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG5ldyBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuCiAgICAJICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuCiAgICAJICovCiAgICAJcmVvcmRlciggbmV3T3JkZXIgKSB7CgogICAgCQlfcXVhdGVybmlvbiQzLnNldEZyb21FdWxlciggdGhpcyApOwoKICAgIAkJcmV0dXJuIHRoaXMuc2V0RnJvbVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDMsIG5ld09yZGVyICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBFdWxlciBpbnN0YW5jZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBpbnN0YW5jZSB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgRXVsZXIgaW5zdGFuY2UgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqLwogICAgCWVxdWFscyggZXVsZXIgKSB7CgogICAgCQlyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIEV1bGVyIGluc3RhbmNlJ3MgY29tcG9uZW50cyB0byB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuIFRoZSBmaXJzdCB0aHJlZQogICAgCSAqIGVudHJpZXMgb2YgdGhlIGFycmF5IGFyZSBhc3NpZ24gdG8gdGhlIHgseSBhbmQgeiBjb21wb25lbnRzLiBBbiBvcHRpb25hbCBmb3VydGggZW50cnkKICAgIAkgKiBkZWZpbmVzIHRoZSBFdWxlciBvcmRlci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyLG51bWJlcixudW1iZXIsP3N0cmluZz59IGFycmF5IC0gQW4gYXJyYXkgaG9sZGluZyB0aGUgRXVsZXIgY29tcG9uZW50IHZhbHVlcy4KICAgIAkgKiBAcmV0dXJuIHtFdWxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBFdWxlciBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlmcm9tQXJyYXkoIGFycmF5ICkgewoKICAgIAkJdGhpcy5feCA9IGFycmF5WyAwIF07CiAgICAJCXRoaXMuX3kgPSBhcnJheVsgMSBdOwogICAgCQl0aGlzLl96ID0gYXJyYXlbIDIgXTsKICAgIAkJaWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07CgogICAgCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBXcml0ZXMgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyBFdWxlciBpbnN0YW5jZSB0byB0aGUgZ2l2ZW4gYXJyYXkuIElmIG5vIGFycmF5IGlzIHByb3ZpZGVkLAogICAgCSAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyLG51bWJlcixudW1iZXIsc3RyaW5nPn0gW2FycmF5PVtdXSAtIFRoZSB0YXJnZXQgYXJyYXkgaG9sZGluZyB0aGUgRXVsZXIgY29tcG9uZW50cy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS4KICAgIAkgKiBAcmV0dXJuIHtBcnJheTxudW1iZXIsbnVtYmVyLG51bWJlcixzdHJpbmc+fSBUaGUgRXVsZXIgY29tcG9uZW50cy4KICAgIAkgKi8KICAgIAl0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkgewoKICAgIAkJYXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDsKICAgIAkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7CiAgICAJCWFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96OwogICAgCQlhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fb3JkZXI7CgogICAgCQlyZXR1cm4gYXJyYXk7CgogICAgCX0KCiAgICAJX29uQ2hhbmdlKCBjYWxsYmFjayApIHsKCiAgICAJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjazsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCV9vbkNoYW5nZUNhbGxiYWNrKCkge30KCiAgICAJKlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7CgogICAgCQl5aWVsZCB0aGlzLl94OwogICAgCQl5aWVsZCB0aGlzLl95OwogICAgCQl5aWVsZCB0aGlzLl96OwogICAgCQl5aWVsZCB0aGlzLl9vcmRlcjsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBkZWZhdWx0IEV1bGVyIGFuZ2xlIG9yZGVyLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKiBAZGVmYXVsdCAnWFlaJwogICAgICovCiAgICBFdWxlci5ERUZBVUxUX09SREVSID0gJ1hZWic7CgogICAgLyoqCiAgICAgKiBBIGxheWVycyBvYmplY3QgYXNzaWducyBhbiAzRCBvYmplY3QgdG8gMSBvciBtb3JlIG9mIDMyCiAgICAgKiBsYXllcnMgbnVtYmVyZWQgYDBgIHRvIGAzMWAgLSBpbnRlcm5hbGx5IHRoZSBsYXllcnMgYXJlIHN0b3JlZCBhcyBhCiAgICAgKiBiaXQgbWFza10sIGFuZCBieSBkZWZhdWx0IGFsbCAzRCBvYmplY3RzIGFyZSBhIG1lbWJlciBvZiBsYXllciBgMGAuCiAgICAgKgogICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBjb250cm9sIHZpc2liaWxpdHkgLSBhbiBvYmplY3QgbXVzdCBzaGFyZSBhIGxheWVyIHdpdGgKICAgICAqIGEgY2FtZXJhIHRvIGJlIHZpc2libGUgd2hlbiB0aGF0IGNhbWVyYSdzIHZpZXcgaXMKICAgICAqIHJlbmRlcmVkLgogICAgICoKICAgICAqIEFsbCBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIHtAbGluayBPYmplY3QzRH0gaGF2ZSBhbiBgbGF5ZXJzYCBwcm9wZXJ0eSB3aGljaAogICAgICogaXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy4KICAgICAqLwogICAgY2xhc3MgTGF5ZXJzIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBsYXllcnMgaW5zdGFuY2UsIHdpdGggbWVtYmVyc2hpcAogICAgCSAqIGluaXRpYWxseSBzZXQgdG8gbGF5ZXIgYDBgLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCkgewoKICAgIAkJLyoqCiAgICAJCSAqIEEgYml0IG1hc2sgc3RvcmluZyB3aGljaCBvZiB0aGUgMzIgbGF5ZXJzIHRoaXMgbGF5ZXJzIG9iamVjdCBpcyBjdXJyZW50bHkKICAgIAkJICogYSBtZW1iZXIgb2YuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqLwogICAgCQl0aGlzLm1hc2sgPSAxIHwgMDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIG1lbWJlcnNoaXAgdG8gdGhlIGdpdmVuIGxheWVyLCBhbmQgcmVtb3ZlIG1lbWJlcnNoaXAgYWxsIG90aGVyIGxheWVycy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBsYXllciAtIFRoZSBsYXllciB0byBzZXQuCiAgICAJICovCiAgICAJc2V0KCBsYXllciApIHsKCiAgICAJCXRoaXMubWFzayA9ICggMSA8PCBsYXllciB8IDAgKSA+Pj4gMDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIG1lbWJlcnNoaXAgb2YgdGhlIGdpdmVuIGxheWVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIGVuYWJsZS4KICAgIAkgKi8KICAgIAllbmFibGUoIGxheWVyICkgewoKICAgIAkJdGhpcy5tYXNrIHw9IDEgPDwgbGF5ZXIgfCAwOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgbWVtYmVyc2hpcCB0byBhbGwgbGF5ZXJzLgogICAgCSAqLwogICAgCWVuYWJsZUFsbCgpIHsKCiAgICAJCXRoaXMubWFzayA9IDB4ZmZmZmZmZmYgfCAwOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRvZ2dsZXMgdGhlIG1lbWJlcnNoaXAgb2YgdGhlIGdpdmVuIGxheWVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHRvZ2dsZS4KICAgIAkgKi8KICAgIAl0b2dnbGUoIGxheWVyICkgewoKICAgIAkJdGhpcy5tYXNrIF49IDEgPDwgbGF5ZXIgfCAwOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlbW92ZXMgbWVtYmVyc2hpcCBvZiB0aGUgZ2l2ZW4gbGF5ZXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gZW5hYmxlLgogICAgCSAqLwogICAgCWRpc2FibGUoIGxheWVyICkgewoKICAgIAkJdGhpcy5tYXNrICY9IH4gKCAxIDw8IGxheWVyIHwgMCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlbW92ZXMgdGhlIG1lbWJlcnNoaXAgZnJvbSBhbGwgbGF5ZXJzLgogICAgCSAqLwogICAgCWRpc2FibGVBbGwoKSB7CgogICAgCQl0aGlzLm1hc2sgPSAwOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgYW5kIHRoZSBnaXZlbiBsYXllcnMgb2JqZWN0IGhhdmUgYXQgbGVhc3Qgb25lCiAgICAJICogbGF5ZXIgaW4gY29tbW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtMYXllcnN9IGxheWVycyAtIFRoZSBsYXllcnMgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFuIH0gV2hldGhlciB0aGlzIGFuZCB0aGUgZ2l2ZW4gbGF5ZXJzIG9iamVjdCBoYXZlIGF0IGxlYXN0IG9uZSBsYXllciBpbiBjb21tb24gb3Igbm90LgogICAgCSAqLwogICAgCXRlc3QoIGxheWVycyApIHsKCiAgICAJCXJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGxheWVyIGlzIGVuYWJsZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFuIH0gV2hldGhlciB0aGUgZ2l2ZW4gbGF5ZXIgaXMgZW5hYmxlZCBvciBub3QuCiAgICAJICovCiAgICAJaXNFbmFibGVkKCBsYXllciApIHsKCiAgICAJCXJldHVybiAoIHRoaXMubWFzayAmICggMSA8PCBsYXllciB8IDAgKSApICE9PSAwOwoKICAgIAl9CgogICAgfQoKICAgIGxldCBfb2JqZWN0M0RJZCA9IDA7CgogICAgY29uc3QgX3YxJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfcTEgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7CiAgICBjb25zdCBfbTEkMSQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpOwogICAgY29uc3QgX3RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICBjb25zdCBfcG9zaXRpb24kMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9zY2FsZSQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3F1YXRlcm5pb24kMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTsKCiAgICBjb25zdCBfeEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7CiAgICBjb25zdCBfeUF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7CiAgICBjb25zdCBfekF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7CgogICAgLyoqCiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvYmplY3QgaGFzIGJlZW4gYWRkZWQgdG8gaXRzIHBhcmVudCBvYmplY3QuCiAgICAgKgogICAgICogQGV2ZW50IE9iamVjdDNEI2FkZGVkCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBjb25zdCBfYWRkZWRFdmVudCA9IHsgdHlwZTogJ2FkZGVkJyB9OwoKICAgIC8qKgogICAgICogRmlyZXMgd2hlbiB0aGUgb2JqZWN0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IG9iamVjdC4KICAgICAqCiAgICAgKiBAZXZlbnQgT2JqZWN0M0QjcmVtb3ZlZAogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgY29uc3QgX3JlbW92ZWRFdmVudCA9IHsgdHlwZTogJ3JlbW92ZWQnIH07CgogICAgLyoqCiAgICAgKiBGaXJlcyB3aGVuIGEgbmV3IGNoaWxkIG9iamVjdCBoYXMgYmVlbiBhZGRlZC4KICAgICAqCiAgICAgKiBAZXZlbnQgT2JqZWN0M0QjY2hpbGRhZGRlZAogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgY29uc3QgX2NoaWxkYWRkZWRFdmVudCA9IHsgdHlwZTogJ2NoaWxkYWRkZWQnLCBjaGlsZDogbnVsbCB9OwoKICAgIC8qKgogICAgICogRmlyZXMgd2hlbiBhIGNoaWxkIG9iamVjdCBoYXMgYmVlbiByZW1vdmVkLgogICAgICoKICAgICAqIEBldmVudCBPYmplY3QzRCNjaGlsZHJlbW92ZWQKICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgKi8KICAgIGNvbnN0IF9jaGlsZHJlbW92ZWRFdmVudCA9IHsgdHlwZTogJ2NoaWxkcmVtb3ZlZCcsIGNoaWxkOiBudWxsIH07CgogICAgLyoqCiAgICAgKiBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBtb3N0IG9iamVjdHMgaW4gdGhyZWUuanMgYW5kIHByb3ZpZGVzIGEgc2V0IG9mCiAgICAgKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGZvciBtYW5pcHVsYXRpbmcgb2JqZWN0cyBpbiAzRCBzcGFjZS4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgRXZlbnREaXNwYXRjaGVyCiAgICAgKi8KICAgIGNsYXNzIE9iamVjdDNEIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyAzRCBvYmplY3QuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNPYmplY3QzRCA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhlIElEIG9mIHRoZSAzRCBvYmplY3QuCiAgICAJCSAqCiAgICAJCSAqIEBuYW1lIE9iamVjdDNEI2lkCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKi8KICAgIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfb2JqZWN0M0RJZCArKyB9ICk7CgogICAgCQkvKioKICAgIAkJICogVGhlIFVVSUQgb2YgdGhlIDNEIG9iamVjdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge3N0cmluZ30KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqLwogICAgCQl0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgbmFtZSBvZiB0aGUgM0Qgb2JqZWN0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5uYW1lID0gJyc7CgogICAgCQkvKioKICAgIAkJICogVGhlIHR5cGUgcHJvcGVydHkgaXMgdXNlZCBmb3IgZGV0ZWN0aW5nIHRoZSBvYmplY3QgdHlwZQogICAgCQkgKiBpbiBjb250ZXh0IG9mIHNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemF0aW9uLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCXRoaXMudHlwZSA9ICdPYmplY3QzRCc7CgogICAgCQkvKioKICAgIAkJICogQSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBvYmplY3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/T2JqZWN0M0R9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMucGFyZW50ID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBhcnJheSBob2xkaW5nIHRoZSBjaGlsZCAzRCBvYmplY3RzIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxPYmplY3QzRD59CiAgICAJCSAqLwogICAgCQl0aGlzLmNoaWxkcmVuID0gW107CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB0aGUgYHVwYCBkaXJlY3Rpb24gb2YgdGhlIDNEIG9iamVjdCB3aGljaCBpbmZsdWVuY2VzCiAgICAJCSAqIHRoZSBvcmllbnRhdGlvbiB2aWEgbWV0aG9kcyBsaWtlIHtAbGluayBPYmplY3QzRCNsb29rQXR9LgogICAgCQkgKgogICAgCQkgKiBUaGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCAzRCBvYmplY3RzIGlzIGRlZmluZWQgYnkgYE9iamVjdDNELkRFRkFVTFRfVVBgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMudXAgPSBPYmplY3QzRC5ERUZBVUxUX1VQLmNsb25lKCk7CgogICAgCQljb25zdCBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7CiAgICAJCWNvbnN0IHJvdGF0aW9uID0gbmV3IEV1bGVyKCk7CiAgICAJCWNvbnN0IHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpOwogICAgCQljb25zdCBzY2FsZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7CgogICAgCQlmdW5jdGlvbiBvblJvdGF0aW9uQ2hhbmdlKCkgewoKICAgIAkJCXF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCByb3RhdGlvbiwgZmFsc2UgKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHsKCiAgICAJCQlyb3RhdGlvbi5zZXRGcm9tUXVhdGVybmlvbiggcXVhdGVybmlvbiwgdW5kZWZpbmVkLCBmYWxzZSApOwoKICAgIAkJfQoKICAgIAkJcm90YXRpb24uX29uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7CiAgICAJCXF1YXRlcm5pb24uX29uQ2hhbmdlKCBvblF1YXRlcm5pb25DaGFuZ2UgKTsKCiAgICAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7CiAgICAJCQkvKioKICAgIAkJCSAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCdzIGxvY2FsIHBvc2l0aW9uLgogICAgCQkJICoKICAgIAkJCSAqIEBuYW1lIE9iamVjdDNEI3Bvc2l0aW9uCiAgICAJCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJCSAqIEBkZWZhdWx0ICgwLDAsMCkKICAgIAkJCSAqLwogICAgCQkJcG9zaXRpb246IHsKICAgIAkJCQljb25maWd1cmFibGU6IHRydWUsCiAgICAJCQkJZW51bWVyYWJsZTogdHJ1ZSwKICAgIAkJCQl2YWx1ZTogcG9zaXRpb24KICAgIAkJCX0sCiAgICAJCQkvKioKICAgIAkJCSAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCdzIGxvY2FsIHJvdGF0aW9uIGFzIEV1bGVyIGFuZ2xlcywgaW4gcmFkaWFucy4KICAgIAkJCSAqCiAgICAJCQkgKiBAbmFtZSBPYmplY3QzRCNyb3RhdGlvbgogICAgCQkJICogQHR5cGUge0V1bGVyfQogICAgCQkJICogQGRlZmF1bHQgKDAsMCwwKQogICAgCQkJICovCiAgICAJCQlyb3RhdGlvbjogewogICAgCQkJCWNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIAkJCQllbnVtZXJhYmxlOiB0cnVlLAogICAgCQkJCXZhbHVlOiByb3RhdGlvbgogICAgCQkJfSwKICAgIAkJCS8qKgogICAgCQkJICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbG9jYWwgcm90YXRpb24gYXMgUXVhdGVybmlvbnMuCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgT2JqZWN0M0QjcXVhdGVybmlvbgogICAgCQkJICogQHR5cGUge1F1YXRlcm5pb259CiAgICAJCQkgKi8KICAgIAkJCXF1YXRlcm5pb246IHsKICAgIAkJCQljb25maWd1cmFibGU6IHRydWUsCiAgICAJCQkJZW51bWVyYWJsZTogdHJ1ZSwKICAgIAkJCQl2YWx1ZTogcXVhdGVybmlvbgogICAgCQkJfSwKICAgIAkJCS8qKgogICAgCQkJICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbG9jYWwgc2NhbGUuCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgT2JqZWN0M0Qjc2NhbGUKICAgIAkJCSAqIEB0eXBlIHtWZWN0b3IzfQogICAgCQkJICogQGRlZmF1bHQgKDEsMSwxKQogICAgCQkJICovCiAgICAJCQlzY2FsZTogewogICAgCQkJCWNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIAkJCQllbnVtZXJhYmxlOiB0cnVlLAogICAgCQkJCXZhbHVlOiBzY2FsZQogICAgCQkJfSwKICAgIAkJCS8qKgogICAgCQkJICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbW9kZWwtdmlldyBtYXRyaXguCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgT2JqZWN0M0QjbW9kZWxWaWV3TWF0cml4CiAgICAJCQkgKiBAdHlwZSB7TWF0cml4NH0KICAgIAkJCSAqLwogICAgCQkJbW9kZWxWaWV3TWF0cml4OiB7CiAgICAJCQkJdmFsdWU6IG5ldyBNYXRyaXg0KCkKICAgIAkJCX0sCiAgICAJCQkvKioKICAgIAkJCSAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCdzIG5vcm1hbCBtYXRyaXguCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgT2JqZWN0M0Qjbm9ybWFsTWF0cml4CiAgICAJCQkgKiBAdHlwZSB7TWF0cml4M30KICAgIAkJCSAqLwogICAgCQkJbm9ybWFsTWF0cml4OiB7CiAgICAJCQkJdmFsdWU6IG5ldyBNYXRyaXgzKCkKICAgIAkJCX0KICAgIAkJfSApOwoKICAgIAkJLyoqCiAgICAJCSAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiBsb2NhbCBzcGFjZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge01hdHJpeDR9CiAgICAJCSAqLwogICAgCQl0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7CgogICAgCQkvKioKICAgIAkJICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgdHJhbnNmb3JtYXRpb24gbWF0cml4IGluIHdvcmxkIHNwYWNlLgogICAgCQkgKiBJZiB0aGUgM0Qgb2JqZWN0IGhhcyBubyBwYXJlbnQsIHRoZW4gaXQncyBpZGVudGljYWwgdG8gdGhlIGxvY2FsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeAogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7TWF0cml4NH0KICAgIAkJICovCiAgICAJCXRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0cml4NCgpOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGVuZ2luZSBhdXRvbWF0aWNhbGx5IGNvbXB1dGVzIHRoZSBsb2NhbCBtYXRyaXggZnJvbSBwb3NpdGlvbiwKICAgIAkJICogcm90YXRpb24gYW5kIHNjYWxlIGV2ZXJ5IGZyYW1lLgogICAgCQkgKgogICAgCQkgKiBUaGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCAzRCBvYmplY3RzIGlzIGRlZmluZWQgYnkgYE9iamVjdDNELkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IE9iamVjdDNELkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGVuZ2luZSBhdXRvbWF0aWNhbGx5IGNvbXB1dGVzIHRoZSB3b3JsZCBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBsb2NhbAogICAgCQkgKiBtYXRyaXggYW5kIHRoZSBvYmplY3QncyB0cmFuc2Zvcm1hdGlvbiBoaWVyYXJjaHkuCiAgICAJCSAqCiAgICAJCSAqIFRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIDNEIG9iamVjdHMgaXMgZGVmaW5lZCBieSBgT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPSBPYmplY3QzRC5ERUZBVUxUX01BVFJJWF9XT1JMRF9BVVRPX1VQREFURTsgLy8gY2hlY2tlZCBieSB0aGUgcmVuZGVyZXIKCiAgICAJCS8qKgogICAgCQkgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGl0IGNhbGN1bGF0ZXMgdGhlIHdvcmxkIG1hdHJpeCBpbiB0aGF0IGZyYW1lIGFuZCByZXNldHMgdGhpcyBwcm9wZXJ0eQogICAgCQkgKiB0byBgZmFsc2VgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBsYXllciBtZW1iZXJzaGlwIG9mIHRoZSAzRCBvYmplY3QuIFRoZSAzRCBvYmplY3QgaXMgb25seSB2aXNpYmxlIGlmIGl0IGhhcwogICAgCQkgKiBhdCBsZWFzdCBvbmUgbGF5ZXIgaW4gY29tbW9uIHdpdGggdGhlIGNhbWVyYSBpbiB1c2UuIFRoaXMgcHJvcGVydHkgY2FuIGFsc28gYmUKICAgIAkJICogdXNlZCB0byBmaWx0ZXIgb3V0IHVud2FudGVkIG9iamVjdHMgaW4gcmF5LWludGVyc2VjdGlvbiB0ZXN0cyB3aGVuIHVzaW5nIHtAbGluayBSYXljYXN0ZXJ9LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7TGF5ZXJzfQogICAgCQkgKi8KICAgIAkJdGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7CgogICAgCQkvKioKICAgIAkJICogV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgM0Qgb2JqZWN0IGdldHMgcmVuZGVyZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLnZpc2libGUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIDNEIG9iamVjdCBnZXRzIHJlbmRlcmVkIGludG8gc2hhZG93IG1hcHMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgM0Qgb2JqZWN0IGlzIGFmZmVjdGVkIGJ5IHNoYWRvd3MgaW4gdGhlIHNjZW5lLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIDNEIG9iamVjdCBpcyBob25vcmVkIGJ5IHZpZXcgZnJ1c3R1bSBjdWxsaW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIHZhbHVlIGFsbG93cyB0aGUgZGVmYXVsdCByZW5kZXJpbmcgb3JkZXIgb2Ygc2NlbmUgZ3JhcGggb2JqZWN0cyB0byBiZQogICAgCQkgKiBvdmVycmlkZGVuIGFsdGhvdWdoIG9wYXF1ZSBhbmQgdHJhbnNwYXJlbnQgb2JqZWN0cyByZW1haW4gc29ydGVkIGluZGVwZW5kZW50bHkuCiAgICAJCSAqIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBzZXQgZm9yIGFuIGluc3RhbmNlIG9mIHtAbGluayBHcm91cH0sYWxsIGRlc2NlbmRhbnRzCiAgICAJCSAqIG9iamVjdHMgd2lsbCBiZSBzb3J0ZWQgYW5kIHJlbmRlcmVkIHRvZ2V0aGVyLiBTb3J0aW5nIGlzIGZyb20gbG93ZXN0IHRvIGhpZ2hlc3QKICAgIAkJICogcmVuZGVyIG9yZGVyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnJlbmRlck9yZGVyID0gMDsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBhcnJheSBob2xkaW5nIHRoZSBhbmltYXRpb24gY2xpcHMgb2YgdGhlIDNEIG9iamVjdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0FycmF5PEFuaW1hdGlvbkNsaXA+fQogICAgCQkgKi8KICAgIAkJdGhpcy5hbmltYXRpb25zID0gW107CgogICAgCQkvKioKICAgIAkJICogQ3VzdG9tIGRlcHRoIG1hdGVyaWFsIHRvIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdG8gdGhlIGRlcHRoIG1hcC4gQ2FuIG9ubHkgYmUgdXNlZAogICAgCQkgKiBpbiBjb250ZXh0IG9mIG1lc2hlcy4gV2hlbiBzaGFkb3ctY2FzdGluZyB3aXRoIGEge0BsaW5rIERpcmVjdGlvbmFsTGlnaHR9IG9yIHtAbGluayBTcG90TGlnaHR9LAogICAgCQkgKiBpZiB5b3UgYXJlIG1vZGlmeWluZyB2ZXJ0ZXggcG9zaXRpb25zIGluIHRoZSB2ZXJ0ZXggc2hhZGVyIHlvdSBtdXN0IHNwZWNpZnkgYSBjdXN0b20gZGVwdGgKICAgIAkJICogbWF0ZXJpYWwgZm9yIHByb3BlciBzaGFkb3dzLgogICAgCQkgKgogICAgCQkgKiBPbmx5IHJlbGV2YW50IGluIGNvbnRleHQgb2Yge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KE1hdGVyaWFsfHVuZGVmaW5lZCl9CiAgICAJCSAqIEBkZWZhdWx0IHVuZGVmaW5lZAogICAgCQkgKi8KICAgIAkJdGhpcy5jdXN0b21EZXB0aE1hdGVyaWFsID0gdW5kZWZpbmVkOwoKICAgIAkJLyoqCiAgICAJCSAqIFNhbWUgYXMge0BsaW5rIE9iamVjdDNEI2N1c3RvbURlcHRoTWF0ZXJpYWx9LCBidXQgdXNlZCB3aXRoIHtAbGluayBQb2ludExpZ2h0fS4KICAgIAkJICoKICAgIAkJICogT25seSByZWxldmFudCBpbiBjb250ZXh0IG9mIHtAbGluayBXZWJHTFJlbmRlcmVyfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeyhNYXRlcmlhbHx1bmRlZmluZWQpfQogICAgCQkgKiBAZGVmYXVsdCB1bmRlZmluZWQKICAgIAkJICovCiAgICAJCXRoaXMuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCA9IHVuZGVmaW5lZDsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBjdXN0b20gZGF0YSBhYm91dCB0aGUgM0Qgb2JqZWN0LiBJdAogICAgCQkgKiBzaG91bGQgbm90IGhvbGQgcmVmZXJlbmNlcyB0byBmdW5jdGlvbnMgYXMgdGhlc2Ugd2lsbCBub3QgYmUgY2xvbmVkLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7T2JqZWN0fQogICAgCQkgKi8KICAgIAkJdGhpcy51c2VyRGF0YSA9IHt9OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSBiZWZvcmUgYSAzRCBvYmplY3QgaXMgcmVuZGVyZWQgdG8gYSBzaGFkb3cgbWFwLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtSZW5kZXJlcnxXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci4KICAgIAkgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LgogICAgCSAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhlIHNjZW5lLgogICAgCSAqIEBwYXJhbSB7Q2FtZXJhfSBzaGFkb3dDYW1lcmEgLSBUaGUgc2hhZG93IGNhbWVyYS4KICAgIAkgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS4KICAgIAkgKiBAcGFyYW0ge01hdGVyaWFsfSBkZXB0aE1hdGVyaWFsIC0gVGhlIGRlcHRoIG1hdGVyaWFsLgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBncm91cCAtIFRoZSBnZW9tZXRyeSBncm91cCBkYXRhLgogICAgCSAqLwogICAgCW9uQmVmb3JlU2hhZG93KCAvKiByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICovICkge30KCiAgICAJLyoqCiAgICAJICogQSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGFmdGVyIGEgM0Qgb2JqZWN0IGlzIHJlbmRlcmVkIHRvIGEgc2hhZG93IG1hcC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UmVuZGVyZXJ8V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuCiAgICAJICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC4KICAgIAkgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS4KICAgIAkgKiBAcGFyYW0ge0NhbWVyYX0gc2hhZG93Q2FtZXJhIC0gVGhlIHNoYWRvdyBjYW1lcmEuCiAgICAJICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgM0Qgb2JqZWN0J3MgZ2VvbWV0cnkuCiAgICAJICogQHBhcmFtIHtNYXRlcmlhbH0gZGVwdGhNYXRlcmlhbCAtIFRoZSBkZXB0aCBtYXRlcmlhbC4KICAgIAkgKiBAcGFyYW0ge09iamVjdH0gZ3JvdXAgLSBUaGUgZ2VvbWV0cnkgZ3JvdXAgZGF0YS4KICAgIAkgKi8KICAgIAlvbkFmdGVyU2hhZG93KCAvKiByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICovICkge30KCiAgICAJLyoqCiAgICAJICogQSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIDNEIG9iamVjdCBpcyByZW5kZXJlZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UmVuZGVyZXJ8V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuCiAgICAJICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC4KICAgIAkgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS4KICAgIAkgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS4KICAgIAkgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSAzRCBvYmplY3QncyBtYXRlcmlhbC4KICAgIAkgKiBAcGFyYW0ge09iamVjdH0gZ3JvdXAgLSBUaGUgZ2VvbWV0cnkgZ3JvdXAgZGF0YS4KICAgIAkgKi8KICAgIAlvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fQoKICAgIAkvKioKICAgIAkgKiBBIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYSAzRCBvYmplY3QgaXMgcmVuZGVyZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1JlbmRlcmVyfFdlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLgogICAgCSAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuCiAgICAJICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhhdCBpcyB1c2VkIHRvIHJlbmRlciB0aGUgc2NlbmUuCiAgICAJICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgM0Qgb2JqZWN0J3MgZ2VvbWV0cnkuCiAgICAJICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgM0Qgb2JqZWN0J3MgbWF0ZXJpYWwuCiAgICAJICogQHBhcmFtIHtPYmplY3R9IGdyb3VwIC0gVGhlIGdlb21ldHJ5IGdyb3VwIGRhdGEuCiAgICAJICovCiAgICAJb25BZnRlclJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fQoKICAgIAkvKioKICAgIAkgKiBBcHBsaWVzIHRoZSBnaXZlbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gdGhlIG9iamVjdCBhbmQgdXBkYXRlcyB0aGUgb2JqZWN0J3MgcG9zaXRpb24sCiAgICAJICogcm90YXRpb24gYW5kIHNjYWxlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LgogICAgCSAqLwogICAgCWFwcGx5TWF0cml4NCggbWF0cml4ICkgewoKICAgIAkJaWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpOwoKICAgIAkJdGhpcy5tYXRyaXgucHJlbXVsdGlwbHkoIG1hdHJpeCApOwoKICAgIAkJdGhpcy5tYXRyaXguZGVjb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBcHBsaWVzIGEgcm90YXRpb24gcmVwcmVzZW50ZWQgYnkgZ2l2ZW4gdGhlIHF1YXRlcm5pb24gdG8gdGhlIDNEIG9iamVjdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBxdWF0ZXJuaW9uLgogICAgCSAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWFwcGx5UXVhdGVybmlvbiggcSApIHsKCiAgICAJCXRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZ2l2ZW4gcm90YXRpb24gcmVwcmVzZW50ZWQgYXMgYW4gYXhpcy9hbmdsZSBjb3VwbGUgdG8gdGhlIDNEIG9iamVjdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIFRoZSAobm9ybWFsaXplZCkgYXhpcyB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICovCiAgICAJc2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHsKCiAgICAJCS8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkCgogICAgCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBnaXZlbiByb3RhdGlvbiByZXByZXNlbnRlZCBhcyBFdWxlciBhbmdsZXMgdG8gdGhlIDNEIG9iamVjdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7RXVsZXJ9IGV1bGVyIC0gVGhlIEV1bGVyIGFuZ2xlcy4KICAgIAkgKi8KICAgIAlzZXRSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7CgogICAgCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIHJvdGF0aW9uIHJlcHJlc2VudGVkIGFzIHJvdGF0aW9uIG1hdHJpeCB0byB0aGUgM0Qgb2JqZWN0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gQWx0aG91Z2ggYSA0eDQgbWF0cml4IGlzIGV4cGVjdGVkLCB0aGUgdXBwZXIgM3gzIHBvcnRpb24gbXVzdCBiZQogICAgCSAqIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpLgogICAgCSAqLwogICAgCXNldFJvdGF0aW9uRnJvbU1hdHJpeCggbSApIHsKCiAgICAJCS8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpCgogICAgCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZ2l2ZW4gcm90YXRpb24gcmVwcmVzZW50ZWQgYXMgYSBRdWF0ZXJuaW9uIHRvIHRoZSAzRCBvYmplY3QuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1F1YXRlcm5pb259IHEgLSBUaGUgUXVhdGVybmlvbgogICAgCSAqLwogICAgCXNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7CgogICAgCQkvLyBhc3N1bWVzIHEgaXMgbm9ybWFsaXplZAoKICAgIAkJdGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYWxvbmcgYW4gYXhpcyBpbiBsb2NhbCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIFRoZSAobm9ybWFsaXplZCkgYXhpcyB2ZWN0b3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJcm90YXRlT25BeGlzKCBheGlzLCBhbmdsZSApIHsKCiAgICAJCS8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiBvYmplY3Qgc3BhY2UKICAgIAkJLy8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQKCiAgICAJCV9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApOwoKICAgIAkJdGhpcy5xdWF0ZXJuaW9uLm11bHRpcGx5KCBfcTEgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJvdGF0ZXMgdGhlIDNEIG9iamVjdCBhbG9uZyBhbiBheGlzIGluIHdvcmxkIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBheGlzIC0gVGhlIChub3JtYWxpemVkKSBheGlzIHZlY3Rvci4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlyb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7CgogICAgCQkvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gd29ybGQgc3BhY2UKICAgIAkJLy8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQKICAgIAkJLy8gbWV0aG9kIGFzc3VtZXMgbm8gcm90YXRlZCBwYXJlbnQKCiAgICAJCV9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApOwoKICAgIAkJdGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJvdGF0ZXMgdGhlIDNEIG9iamVjdCBhcm91bmQgaXRzIFggYXhpcyBpbiBsb2NhbCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLgogICAgCSAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXJvdGF0ZVgoIGFuZ2xlICkgewoKICAgIAkJcmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeEF4aXMsIGFuZ2xlICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUm90YXRlcyB0aGUgM0Qgb2JqZWN0IGFyb3VuZCBpdHMgWSBheGlzIGluIGxvY2FsIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJcm90YXRlWSggYW5nbGUgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF95QXhpcywgYW5nbGUgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYXJvdW5kIGl0cyBaIGF4aXMgaW4gbG9jYWwgc3BhY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlyb3RhdGVaKCBhbmdsZSApIHsKCiAgICAJCXJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3pBeGlzLCBhbmdsZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zbGF0ZSB0aGUgM0Qgb2JqZWN0IGJ5IGEgZGlzdGFuY2UgYWxvbmcgdGhlIGdpdmVuIGF4aXMgaW4gbG9jYWwgc3BhY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGF4aXMgLSBUaGUgKG5vcm1hbGl6ZWQpIGF4aXMgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBpbiB3b3JsZCB1bml0cy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl0cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkgewoKICAgIAkJLy8gdHJhbnNsYXRlIG9iamVjdCBieSBkaXN0YW5jZSBhbG9uZyBheGlzIGluIG9iamVjdCBzcGFjZQogICAgCQkvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZAoKICAgIAkJX3YxJDQuY29weSggYXhpcyApLmFwcGx5UXVhdGVybmlvbiggdGhpcy5xdWF0ZXJuaW9uICk7CgogICAgCQl0aGlzLnBvc2l0aW9uLmFkZCggX3YxJDQubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zbGF0ZSB0aGUgM0Qgb2JqZWN0IGJ5IGEgZGlzdGFuY2UgYWxvbmcgaXRzIFgtYXhpcyBpbiBsb2NhbCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBpbiB3b3JsZCB1bml0cy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl0cmFuc2xhdGVYKCBkaXN0YW5jZSApIHsKCiAgICAJCXJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3hBeGlzLCBkaXN0YW5jZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zbGF0ZSB0aGUgM0Qgb2JqZWN0IGJ5IGEgZGlzdGFuY2UgYWxvbmcgaXRzIFktYXhpcyBpbiBsb2NhbCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBpbiB3b3JsZCB1bml0cy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl0cmFuc2xhdGVZKCBkaXN0YW5jZSApIHsKCiAgICAJCXJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3lBeGlzLCBkaXN0YW5jZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRyYW5zbGF0ZSB0aGUgM0Qgb2JqZWN0IGJ5IGEgZGlzdGFuY2UgYWxvbmcgaXRzIFotYXhpcyBpbiBsb2NhbCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBpbiB3b3JsZCB1bml0cy4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl0cmFuc2xhdGVaKCBkaXN0YW5jZSApIHsKCiAgICAJCXJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3pBeGlzLCBkaXN0YW5jZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbnZlcnRzIHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGlzIDNEIG9iamVjdCdzIGxvY2FsIHNwYWNlIHRvIHdvcmxkIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2ZWN0b3IgLSBUaGUgdmVjdG9yIHRvIGNvbnZlcnQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNvbnZlcnRlZCB2ZWN0b3IuCiAgICAJICovCiAgICAJbG9jYWxUb1dvcmxkKCB2ZWN0b3IgKSB7CgogICAgCQl0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApOwoKICAgIAkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhpcyAzRCBvYmplY3QncyB3b3JkIHNwYWNlIHRvIGxvY2FsIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2ZWN0b3IgLSBUaGUgdmVjdG9yIHRvIGNvbnZlcnQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNvbnZlcnRlZCB2ZWN0b3IuCiAgICAJICovCiAgICAJd29ybGRUb0xvY2FsKCB2ZWN0b3IgKSB7CgogICAgCQl0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApOwoKICAgIAkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIF9tMSQxJDEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUm90YXRlcyB0aGUgb2JqZWN0IHRvIGZhY2UgYSBwb2ludCBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKgogICAgCSAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ8VmVjdG9yM30geCAtIFRoZSB4IGNvb3JkaW5hdGUgaW4gd29ybGQgc3BhY2UuIEFsdGVybmF0aXZlbHksIGEgdmVjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt5XSAtIFRoZSB5IGNvb3JkaW5hdGUgaW4gd29ybGQgc3BhY2UuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt6XSAtIFRoZSB6IGNvb3JkaW5hdGUgaW4gd29ybGQgc3BhY2UuCiAgICAJICovCiAgICAJbG9va0F0KCB4LCB5LCB6ICkgewoKICAgIAkJLy8gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBvYmplY3RzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBwYXJlbnQocykKCiAgICAJCWlmICggeC5pc1ZlY3RvcjMgKSB7CgogICAgCQkJX3RhcmdldC5jb3B5KCB4ICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCV90YXJnZXQuc2V0KCB4LCB5LCB6ICk7CgogICAgCQl9CgogICAgCQljb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDsKCiAgICAJCXRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7CgogICAgCQlfcG9zaXRpb24kMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTsKCiAgICAJCWlmICggdGhpcy5pc0NhbWVyYSB8fCB0aGlzLmlzTGlnaHQgKSB7CgogICAgCQkJX20xJDEkMS5sb29rQXQoIF9wb3NpdGlvbiQzLCBfdGFyZ2V0LCB0aGlzLnVwICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCV9tMSQxJDEubG9va0F0KCBfdGFyZ2V0LCBfcG9zaXRpb24kMywgdGhpcy51cCApOwoKICAgIAkJfQoKICAgIAkJdGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xJDEkMSApOwoKICAgIAkJaWYgKCBwYXJlbnQgKSB7CgogICAgCQkJX20xJDEkMS5leHRyYWN0Um90YXRpb24oIHBhcmVudC5tYXRyaXhXb3JsZCApOwogICAgCQkJX3ExLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xJDEkMSApOwogICAgCQkJdGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEuaW52ZXJ0KCkgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiAzRCBvYmplY3QgYXMgYSBjaGlsZCB0byB0aGlzIDNEIG9iamVjdC4gQW4gYXJiaXRyYXJ5IG51bWJlciBvZgogICAgCSAqIG9iamVjdHMgbWF5IGJlIGFkZGVkLiBBbnkgY3VycmVudCBwYXJlbnQgb24gYW4gb2JqZWN0IHBhc3NlZCBpbiBoZXJlIHdpbGwgYmUKICAgIAkgKiByZW1vdmVkLCBzaW5jZSBhbiBvYmplY3QgY2FuIGhhdmUgYXQgbW9zdCBvbmUgcGFyZW50LgogICAgCSAqCiAgICAJICogQGZpcmVzIE9iamVjdDNEI2FkZGVkCiAgICAJICogQGZpcmVzIE9iamVjdDNEI2NoaWxkYWRkZWQKICAgIAkgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRvIGFkZC4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlhZGQoIG9iamVjdCApIHsKCiAgICAJCWlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJdGhpcy5hZGQoIGFyZ3VtZW50c1sgaSBdICk7CgogICAgCQkJfQoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJaWYgKCBvYmplY3QgPT09IHRoaXMgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhblwndCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIGl0c2VsZi4nLCBvYmplY3QgKTsKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfQoKICAgIAkJaWYgKCBvYmplY3QgJiYgb2JqZWN0LmlzT2JqZWN0M0QgKSB7CgogICAgCQkJb2JqZWN0LnJlbW92ZUZyb21QYXJlbnQoKTsKICAgIAkJCW9iamVjdC5wYXJlbnQgPSB0aGlzOwogICAgCQkJdGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTsKCiAgICAJCQlvYmplY3QuZGlzcGF0Y2hFdmVudCggX2FkZGVkRXZlbnQgKTsKCiAgICAJCQlfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gb2JqZWN0OwogICAgCQkJdGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRhZGRlZEV2ZW50ICk7CiAgICAJCQlfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gbnVsbDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC4nLCBvYmplY3QgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlbW92ZXMgdGhlIGdpdmVuIDNEIG9iamVjdCBhcyBjaGlsZCBmcm9tIHRoaXMgM0Qgb2JqZWN0LgogICAgCSAqIEFuIGFyYml0cmFyeSBudW1iZXIgb2Ygb2JqZWN0cyBtYXkgYmUgcmVtb3ZlZC4KICAgIAkgKgogICAgCSAqIEBmaXJlcyBPYmplY3QzRCNyZW1vdmVkCiAgICAJICogQGZpcmVzIE9iamVjdDNEI2NoaWxkcmVtb3ZlZAogICAgCSAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gcmVtb3ZlLgogICAgCSAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXJlbW92ZSggb2JqZWN0ICkgewoKICAgIAkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQl0aGlzLnJlbW92ZSggYXJndW1lbnRzWyBpIF0gKTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIHRoaXM7CgogICAgCQl9CgogICAgCQljb25zdCBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZiggb2JqZWN0ICk7CgogICAgCQlpZiAoIGluZGV4ICE9PSAtMSApIHsKCiAgICAJCQlvYmplY3QucGFyZW50ID0gbnVsbDsKICAgIAkJCXRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApOwoKICAgIAkJCW9iamVjdC5kaXNwYXRjaEV2ZW50KCBfcmVtb3ZlZEV2ZW50ICk7CgogICAgCQkJX2NoaWxkcmVtb3ZlZEV2ZW50LmNoaWxkID0gb2JqZWN0OwogICAgCQkJdGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRyZW1vdmVkRXZlbnQgKTsKICAgIAkJCV9jaGlsZHJlbW92ZWRFdmVudC5jaGlsZCA9IG51bGw7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZW1vdmVzIHRoaXMgM0Qgb2JqZWN0IGZyb20gaXRzIGN1cnJlbnQgcGFyZW50LgogICAgCSAqCiAgICAJICogQGZpcmVzIE9iamVjdDNEI3JlbW92ZWQKICAgIAkgKiBAZmlyZXMgT2JqZWN0M0QjY2hpbGRyZW1vdmVkCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJcmVtb3ZlRnJvbVBhcmVudCgpIHsKCiAgICAJCWNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50OwoKICAgIAkJaWYgKCBwYXJlbnQgIT09IG51bGwgKSB7CgogICAgCQkJcGFyZW50LnJlbW92ZSggdGhpcyApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmVtb3ZlcyBhbGwgY2hpbGQgb2JqZWN0cy4KICAgIAkgKgogICAgCSAqIEBmaXJlcyBPYmplY3QzRCNyZW1vdmVkCiAgICAJICogQGZpcmVzIE9iamVjdDNEI2NoaWxkcmVtb3ZlZAogICAgCSAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNsZWFyKCkgewoKICAgIAkJcmV0dXJuIHRoaXMucmVtb3ZlKCAuLi4gdGhpcy5jaGlsZHJlbiApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgdGhlIGdpdmVuIDNEIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMgM0Qgb2JqZWN0LCB3aGlsZSBtYWludGFpbmluZyB0aGUgb2JqZWN0J3Mgd29ybGQKICAgIAkgKiB0cmFuc2Zvcm0uIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgc2NlbmUgZ3JhcGhzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBub2RlcyhzKS4KICAgIAkgKgogICAgCSAqIEBmaXJlcyBPYmplY3QzRCNhZGRlZAogICAgCSAqIEBmaXJlcyBPYmplY3QzRCNjaGlsZGFkZGVkCiAgICAJICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byBhdHRhY2guCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJYXR0YWNoKCBvYmplY3QgKSB7CgogICAgCQkvLyBhZGRzIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMsIHdoaWxlIG1haW50YWluaW5nIHRoZSBvYmplY3QncyB3b3JsZCB0cmFuc2Zvcm0KCiAgICAJCS8vIE5vdGU6IFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgc2NlbmUgZ3JhcGhzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBub2RlcyhzKQoKICAgIAkJdGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTsKCiAgICAJCV9tMSQxJDEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpOwoKICAgIAkJaWYgKCBvYmplY3QucGFyZW50ICE9PSBudWxsICkgewoKICAgIAkJCW9iamVjdC5wYXJlbnQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7CgogICAgCQkJX20xJDEkMS5tdWx0aXBseSggb2JqZWN0LnBhcmVudC5tYXRyaXhXb3JsZCApOwoKICAgIAkJfQoKICAgIAkJb2JqZWN0LmFwcGx5TWF0cml4NCggX20xJDEkMSApOwoKICAgIAkJb2JqZWN0LnJlbW92ZUZyb21QYXJlbnQoKTsKICAgIAkJb2JqZWN0LnBhcmVudCA9IHRoaXM7CiAgICAJCXRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7CgogICAgCQlvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7CgogICAgCQlvYmplY3QuZGlzcGF0Y2hFdmVudCggX2FkZGVkRXZlbnQgKTsKCiAgICAJCV9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBvYmplY3Q7CiAgICAJCXRoaXMuZGlzcGF0Y2hFdmVudCggX2NoaWxkYWRkZWRFdmVudCApOwogICAgCQlfY2hpbGRhZGRlZEV2ZW50LmNoaWxkID0gbnVsbDsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNlYXJjaGVzIHRocm91Z2ggdGhlIDNEIG9iamVjdCBhbmQgaXRzIGNoaWxkcmVuLCBzdGFydGluZyB3aXRoIHRoZSAzRCBvYmplY3QKICAgIAkgKiBpdHNlbGYsIGFuZCByZXR1cm5zIHRoZSBmaXJzdCB3aXRoIGEgbWF0Y2hpbmcgSUQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgaWQuCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R8dW5kZWZpbmVkfSBUaGUgZm91bmQgM0Qgb2JqZWN0LiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIDNEIG9iamVjdCBoYXMgYmVlbiBmb3VuZC4KICAgIAkgKi8KICAgIAlnZXRPYmplY3RCeUlkKCBpZCApIHsKCiAgICAJCXJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICdpZCcsIGlkICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2VhcmNoZXMgdGhyb3VnaCB0aGUgM0Qgb2JqZWN0IGFuZCBpdHMgY2hpbGRyZW4sIHN0YXJ0aW5nIHdpdGggdGhlIDNEIG9iamVjdAogICAgCSAqIGl0c2VsZiwgYW5kIHJldHVybnMgdGhlIGZpcnN0IHdpdGggYSBtYXRjaGluZyBuYW1lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZS4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRHx1bmRlZmluZWR9IFRoZSBmb3VuZCAzRCBvYmplY3QuIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gM0Qgb2JqZWN0IGhhcyBiZWVuIGZvdW5kLgogICAgCSAqLwogICAgCWdldE9iamVjdEJ5TmFtZSggbmFtZSApIHsKCiAgICAJCXJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICduYW1lJywgbmFtZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNlYXJjaGVzIHRocm91Z2ggdGhlIDNEIG9iamVjdCBhbmQgaXRzIGNoaWxkcmVuLCBzdGFydGluZyB3aXRoIHRoZSAzRCBvYmplY3QKICAgIAkgKiBpdHNlbGYsIGFuZCByZXR1cm5zIHRoZSBmaXJzdCB3aXRoIGEgbWF0Y2hpbmcgcHJvcGVydHkgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eS4KICAgIAkgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBUaGUgdmFsdWUuCiAgICAJICogQHJldHVybiB7T2JqZWN0M0R8dW5kZWZpbmVkfSBUaGUgZm91bmQgM0Qgb2JqZWN0LiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIDNEIG9iamVjdCBoYXMgYmVlbiBmb3VuZC4KICAgIAkgKi8KICAgIAlnZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApIHsKCiAgICAJCWlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJldHVybiB0aGlzOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCWNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdOwogICAgCQkJY29uc3Qgb2JqZWN0ID0gY2hpbGQuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTsKCiAgICAJCQlpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlyZXR1cm4gb2JqZWN0OwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiB1bmRlZmluZWQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2VhcmNoZXMgdGhyb3VnaCB0aGUgM0Qgb2JqZWN0IGFuZCBpdHMgY2hpbGRyZW4sIHN0YXJ0aW5nIHdpdGggdGhlIDNEIG9iamVjdAogICAgCSAqIGl0c2VsZiwgYW5kIHJldHVybnMgYWxsIDNEIG9iamVjdHMgd2l0aCBhIG1hdGNoaW5nIHByb3BlcnR5IHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuCiAgICAJICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0M0Q+fSByZXN1bHQgLSBUaGUgbWV0aG9kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoaXMgYXJyYXkuCiAgICAJICogQHJldHVybiB7QXJyYXk8T2JqZWN0M0Q+fSBUaGUgZm91bmQgM0Qgb2JqZWN0cy4KICAgIAkgKi8KICAgIAlnZXRPYmplY3RzQnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUsIHJlc3VsdCA9IFtdICkgewoKICAgIAkJaWYgKCB0aGlzWyBuYW1lIF0gPT09IHZhbHVlICkgcmVzdWx0LnB1c2goIHRoaXMgKTsKCiAgICAJCWNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY2hpbGRyZW5bIGkgXS5nZXRPYmplY3RzQnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUsIHJlc3VsdCApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHJlc3VsdDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyBzdG9yZWQgdG8uCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIDNEIG9iamVjdCdzIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlLgogICAgCSAqLwogICAgCWdldFdvcmxkUG9zaXRpb24oIHRhcmdldCApIHsKCiAgICAJCXRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7CgogICAgCQlyZXR1cm4gdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBRdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UXVhdGVybmlvbn0gdGFyZ2V0IC0gVGhlIHRhcmdldCBRdWF0ZXJuaW9uIHRoZSByZXN1bHQgaXMgc3RvcmVkIHRvLgogICAgCSAqIEByZXR1cm4ge1F1YXRlcm5pb259IFRoZSAzRCBvYmplY3QncyByb3RhdGlvbiBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKi8KICAgIAlnZXRXb3JsZFF1YXRlcm5pb24oIHRhcmdldCApIHsKCiAgICAJCXRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7CgogICAgCQl0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uJDMsIHRhcmdldCwgX3NjYWxlJDIgKTsKCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHNjYWxlIG9mIHRoZSAzRCBvYmplY3QgaW4gd29ybGQgc3BhY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgc3RvcmVkIHRvLgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSAzRCBvYmplY3QncyBzY2FsZSBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKi8KICAgIAlnZXRXb3JsZFNjYWxlKCB0YXJnZXQgKSB7CgogICAgCQl0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApOwoKICAgIAkJdGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiQzLCBfcXVhdGVybmlvbiQyLCB0YXJnZXQgKTsKCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIHZlY3RvciByZXByZXNlbnRpbmcgdGhlICgibG9vayIpIGRpcmVjdGlvbiBvZiB0aGUgM0Qgb2JqZWN0IGluIHdvcmxkIHNwYWNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHN0b3JlZCB0by4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgM0Qgb2JqZWN0J3MgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLgogICAgCSAqLwogICAgCWdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7CgogICAgCQl0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApOwoKICAgIAkJY29uc3QgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7CgogICAgCQlyZXR1cm4gdGFyZ2V0LnNldCggZVsgOCBdLCBlWyA5IF0sIGVbIDEwIF0gKS5ub3JtYWxpemUoKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBYnN0cmFjdCBtZXRob2QgdG8gZ2V0IGludGVyc2VjdGlvbnMgYmV0d2VlbiBhIGNhc3RlZCByYXkgYW5kIHRoaXMKICAgIAkgKiAzRCBvYmplY3QuIFJlbmRlcmFibGUgM0Qgb2JqZWN0cyBzdWNoIGFzIHtAbGluayBNZXNofSwge0BsaW5rIExpbmV9IG9yIHtAbGluayBQb2ludHN9CiAgICAJICogaW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIG9yZGVyIHRvIHVzZSByYXljYXN0aW5nLgogICAgCSAqCiAgICAJICogQGFic3RyYWN0CiAgICAJICogQHBhcmFtIHtSYXljYXN0ZXJ9IHJheWNhc3RlciAtIFRoZSByYXljYXN0ZXIuCiAgICAJICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBpbnRlcnNlY3RzIC0gQW4gYXJyYXkgaG9sZGluZyB0aGUgcmVzdWx0IG9mIHRoZSBtZXRob2QuCiAgICAJICovCiAgICAJcmF5Y2FzdCggLyogcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICovICkge30KCiAgICAJLyoqCiAgICAJICogRXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIHRoaXMgM0Qgb2JqZWN0IGFuZCBhbGwgZGVzY2VuZGFudHMuCiAgICAJICoKICAgIAkgKiBOb3RlOiBNb2RpZnlpbmcgdGhlIHNjZW5lIGdyYXBoIGluc2lkZSB0aGUgY2FsbGJhY2sgaXMgZGlzY291cmFnZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcHJvY2VzcyB0aGUgY3VycmVudCAzRCBvYmplY3QuCiAgICAJICovCiAgICAJdHJhdmVyc2UoIGNhbGxiYWNrICkgewoKICAgIAkJY2FsbGJhY2soIHRoaXMgKTsKCiAgICAJCWNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY2hpbGRyZW5bIGkgXS50cmF2ZXJzZSggY2FsbGJhY2sgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBMaWtlIHtAbGluayBPYmplY3QzRCN0cmF2ZXJzZX0sIGJ1dCB0aGUgY2FsbGJhY2sgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGZvciB2aXNpYmxlIDNEIG9iamVjdHMuCiAgICAJICogRGVzY2VuZGFudHMgb2YgaW52aXNpYmxlIDNEIG9iamVjdHMgYXJlIG5vdCB0cmF2ZXJzZWQuCiAgICAJICoKICAgIAkgKiBOb3RlOiBNb2RpZnlpbmcgdGhlIHNjZW5lIGdyYXBoIGluc2lkZSB0aGUgY2FsbGJhY2sgaXMgZGlzY291cmFnZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcHJvY2VzcyB0aGUgY3VycmVudCAzRCBvYmplY3QuCiAgICAJICovCiAgICAJdHJhdmVyc2VWaXNpYmxlKCBjYWxsYmFjayApIHsKCiAgICAJCWlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjsKCiAgICAJCWNhbGxiYWNrKCB0aGlzICk7CgogICAgCQljb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCWNoaWxkcmVuWyBpIF0udHJhdmVyc2VWaXNpYmxlKCBjYWxsYmFjayApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIExpa2Uge0BsaW5rIE9iamVjdDNEI3RyYXZlcnNlfSwgYnV0IHRoZSBjYWxsYmFjayB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgZm9yIGFsbCBhbmNlc3RvcnMuCiAgICAJICoKICAgIAkgKiBOb3RlOiBNb2RpZnlpbmcgdGhlIHNjZW5lIGdyYXBoIGluc2lkZSB0aGUgY2FsbGJhY2sgaXMgZGlzY291cmFnZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcHJvY2VzcyB0aGUgY3VycmVudCAzRCBvYmplY3QuCiAgICAJICovCiAgICAJdHJhdmVyc2VBbmNlc3RvcnMoIGNhbGxiYWNrICkgewoKICAgIAkJY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7CgogICAgCQlpZiAoIHBhcmVudCAhPT0gbnVsbCApIHsKCiAgICAJCQljYWxsYmFjayggcGFyZW50ICk7CgogICAgCQkJcGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFVwZGF0ZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiBsb2NhbCBzcGFjZSBieSBjb21wdXRpbmcgaXQgZnJvbSB0aGUgY3VycmVudAogICAgCSAqIHBvc2l0aW9uLCByb3RhdGlvbiBhbmQgc2NhbGUgdmFsdWVzLgogICAgCSAqLwogICAgCXVwZGF0ZU1hdHJpeCgpIHsKCiAgICAJCXRoaXMubWF0cml4LmNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApOwoKICAgIAkJdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBVcGRhdGVzIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggaW4gd29ybGQgc3BhY2Ugb2YgdGhpcyAzRCBvYmplY3RzIGFuZCBpdHMgZGVzY2VuZGFudHMuCiAgICAJICoKICAgIAkgKiBUbyBlbnN1cmUgY29ycmVjdCByZXN1bHRzLCB0aGlzIG1ldGhvZCBhbHNvIHJlY29tcHV0ZXMgdGhlIDNEIG9iamVjdCdzIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbgogICAgCSAqIGxvY2FsIHNwYWNlLiBUaGUgY29tcHV0YXRpb24gb2YgdGhlIGxvY2FsIGFuZCB3b3JsZCBtYXRyaXggY2FuIGJlIGNvbnRyb2xsZWQgd2l0aCB0aGUKICAgIAkgKiB7QGxpbmsgT2JqZWN0M0QjbWF0cml4QXV0b1VwZGF0ZX0gYW5kIHtAbGluayBPYmplY3QzRCNtYXRyaXhXb3JsZEF1dG9VcGRhdGV9IGZsYWdzIHdoaWNoIGFyZSBib3RoCiAgICAJICogYHRydWVgIGJ5IGRlZmF1bHQuICBTZXQgdGhlc2UgZmxhZ3MgdG8gYGZhbHNlYCBpZiB5b3UgbmVlZCBtb3JlIGNvbnRyb2wgb3ZlciB0aGUgdXBkYXRlIG1hdHJpeCBwcm9jZXNzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbZm9yY2U9ZmFsc2VdIC0gV2hlbiBzZXQgdG8gYHRydWVgLCBhIHJlY29tcHV0YXRpb24gb2Ygd29ybGQgbWF0cmljZXMgaXMgZm9yY2VkIGV2ZW4KICAgIAkgKiB3aGVuIHtAbGluayBPYmplY3QzRCNtYXRyaXhXb3JsZEF1dG9VcGRhdGV9IGlzIHNldCB0byBgZmFsc2VgLgogICAgCSAqLwogICAgCXVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHsKCiAgICAJCWlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTsKCiAgICAJCWlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkgewoKICAgIAkJCWlmICggdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSB7CgogICAgCQkJCWlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7CgogICAgCQkJCQl0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQl0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCXRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlOwoKICAgIAkJCWZvcmNlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCS8vIG1ha2Ugc3VyZSBkZXNjZW5kYW50cyBhcmUgdXBkYXRlZCBpZiByZXF1aXJlZAoKICAgIAkJY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQljb25zdCBjaGlsZCA9IGNoaWxkcmVuWyBpIF07CgogICAgCQkJY2hpbGQudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQW4gYWx0ZXJuYXRpdmUgdmVyc2lvbiBvZiB7QGxpbmsgT2JqZWN0M0QjdXBkYXRlTWF0cml4V29ybGR9IHdpdGggbW9yZSBjb250cm9sIG92ZXIgdGhlCiAgICAJICogdXBkYXRlIG9mIGFuY2VzdG9yIGFuZCBkZXNjZW5kYW50IG5vZGVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlUGFyZW50cz1mYWxzZV0gV2hldGhlciBhbmNlc3RvciBub2RlcyBzaG91bGQgYmUgdXBkYXRlZCBvciBub3QuCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlQ2hpbGRyZW49ZmFsc2VdIFdoZXRoZXIgZGVzY2VuZGFudCBub2RlcyBzaG91bGQgYmUgdXBkYXRlZCBvciBub3QuCiAgICAJICovCiAgICAJdXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkgewoKICAgIAkJY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7CgogICAgCQlpZiAoIHVwZGF0ZVBhcmVudHMgPT09IHRydWUgJiYgcGFyZW50ICE9PSBudWxsICkgewoKICAgIAkJCXBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTsKCiAgICAJCWlmICggdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSB7CgogICAgCQkJaWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHsKCiAgICAJCQkJdGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8gbWFrZSBzdXJlIGRlc2NlbmRhbnRzIGFyZSB1cGRhdGVkCgogICAgCQlpZiAoIHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlICkgewoKICAgIAkJCWNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCQljb25zdCBjaGlsZCA9IGNoaWxkcmVuWyBpIF07CgogICAgCQkJCWNoaWxkLnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXJpYWxpemVzIHRoZSAzRCBvYmplY3QgaW50byBKU09OLgogICAgCSAqCiAgICAJICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgM0Qgb2JqZWN0LgogICAgCSAqIEBzZWUge0BsaW5rIE9iamVjdExvYWRlciNwYXJzZX0KICAgIAkgKi8KICAgIAl0b0pTT04oIG1ldGEgKSB7CgogICAgCQkvLyBtZXRhIGlzIGEgc3RyaW5nIHdoZW4gY2FsbGVkIGZyb20gSlNPTi5zdHJpbmdpZnkKICAgIAkJY29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7CgogICAgCQljb25zdCBvdXRwdXQgPSB7fTsKCiAgICAJCS8vIG1ldGEgaXMgYSBoYXNoIHVzZWQgdG8gY29sbGVjdCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMuCiAgICAJCS8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0CiAgICAJCS8vIGJlaW5nIHNlcmlhbGl6ZWQuCiAgICAJCWlmICggaXNSb290T2JqZWN0ICkgewoKICAgIAkJCS8vIGluaXRpYWxpemUgbWV0YSBvYmoKICAgIAkJCW1ldGEgPSB7CiAgICAJCQkJZ2VvbWV0cmllczoge30sCiAgICAJCQkJbWF0ZXJpYWxzOiB7fSwKICAgIAkJCQl0ZXh0dXJlczoge30sCiAgICAJCQkJaW1hZ2VzOiB7fSwKICAgIAkJCQlzaGFwZXM6IHt9LAogICAgCQkJCXNrZWxldG9uczoge30sCiAgICAJCQkJYW5pbWF0aW9uczoge30sCiAgICAJCQkJbm9kZXM6IHt9CiAgICAJCQl9OwoKICAgIAkJCW91dHB1dC5tZXRhZGF0YSA9IHsKICAgIAkJCQl2ZXJzaW9uOiA0LjcsCiAgICAJCQkJdHlwZTogJ09iamVjdCcsCiAgICAJCQkJZ2VuZXJhdG9yOiAnT2JqZWN0M0QudG9KU09OJwogICAgCQkJfTsKCiAgICAJCX0KCiAgICAJCS8vIHN0YW5kYXJkIE9iamVjdDNEIHNlcmlhbGl6YXRpb24KCiAgICAJCWNvbnN0IG9iamVjdCA9IHt9OwoKICAgIAkJb2JqZWN0LnV1aWQgPSB0aGlzLnV1aWQ7CiAgICAJCW9iamVjdC50eXBlID0gdGhpcy50eXBlOwoKICAgIAkJaWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7CiAgICAJCWlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgb2JqZWN0LmNhc3RTaGFkb3cgPSB0cnVlOwogICAgCQlpZiAoIHRoaXMucmVjZWl2ZVNoYWRvdyA9PT0gdHJ1ZSApIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTsKICAgIAkJaWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTsKICAgIAkJaWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBmYWxzZTsKICAgIAkJaWYgKCB0aGlzLnJlbmRlck9yZGVyICE9PSAwICkgb2JqZWN0LnJlbmRlck9yZGVyID0gdGhpcy5yZW5kZXJPcmRlcjsKICAgIAkJaWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBvYmplY3QudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhOwoKICAgIAkJb2JqZWN0LmxheWVycyA9IHRoaXMubGF5ZXJzLm1hc2s7CiAgICAJCW9iamVjdC5tYXRyaXggPSB0aGlzLm1hdHJpeC50b0FycmF5KCk7CiAgICAJCW9iamVjdC51cCA9IHRoaXMudXAudG9BcnJheSgpOwoKICAgIAkJaWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IGZhbHNlICkgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKCiAgICAJCS8vIG9iamVjdCBzcGVjaWZpYyBwcm9wZXJ0aWVzCgogICAgCQlpZiAoIHRoaXMuaXNJbnN0YW5jZWRNZXNoICkgewoKICAgIAkJCW9iamVjdC50eXBlID0gJ0luc3RhbmNlZE1lc2gnOwogICAgCQkJb2JqZWN0LmNvdW50ID0gdGhpcy5jb3VudDsKICAgIAkJCW9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IHRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCk7CiAgICAJCQlpZiAoIHRoaXMuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIG9iamVjdC5pbnN0YW5jZUNvbG9yID0gdGhpcy5pbnN0YW5jZUNvbG9yLnRvSlNPTigpOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLmlzQmF0Y2hlZE1lc2ggKSB7CgogICAgCQkJb2JqZWN0LnR5cGUgPSAnQmF0Y2hlZE1lc2gnOwogICAgCQkJb2JqZWN0LnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7CiAgICAJCQlvYmplY3Quc29ydE9iamVjdHMgPSB0aGlzLnNvcnRPYmplY3RzOwoKICAgIAkJCW9iamVjdC5kcmF3UmFuZ2VzID0gdGhpcy5fZHJhd1JhbmdlczsKICAgIAkJCW9iamVjdC5yZXNlcnZlZFJhbmdlcyA9IHRoaXMuX3Jlc2VydmVkUmFuZ2VzOwoKICAgIAkJCW9iamVjdC5nZW9tZXRyeUluZm8gPSB0aGlzLl9nZW9tZXRyeUluZm8ubWFwKCBpbmZvID0+ICggewogICAgCQkJCS4uLmluZm8sCiAgICAJCQkJYm91bmRpbmdCb3g6IGluZm8uYm91bmRpbmdCb3ggPyBpbmZvLmJvdW5kaW5nQm94LnRvSlNPTigpIDogdW5kZWZpbmVkLAogICAgCQkJCWJvdW5kaW5nU3BoZXJlOiBpbmZvLmJvdW5kaW5nU3BoZXJlID8gaW5mby5ib3VuZGluZ1NwaGVyZS50b0pTT04oKSA6IHVuZGVmaW5lZAogICAgCQkJfSApICk7CiAgICAJCQlvYmplY3QuaW5zdGFuY2VJbmZvID0gdGhpcy5faW5zdGFuY2VJbmZvLm1hcCggaW5mbyA9PiAoIHsgLi4uaW5mbyB9ICkgKTsKCiAgICAJCQlvYmplY3QuYXZhaWxhYmxlSW5zdGFuY2VJZHMgPSB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5zbGljZSgpOwogICAgCQkJb2JqZWN0LmF2YWlsYWJsZUdlb21ldHJ5SWRzID0gdGhpcy5fYXZhaWxhYmxlR2VvbWV0cnlJZHMuc2xpY2UoKTsKCiAgICAJCQlvYmplY3QubmV4dEluZGV4U3RhcnQgPSB0aGlzLl9uZXh0SW5kZXhTdGFydDsKICAgIAkJCW9iamVjdC5uZXh0VmVydGV4U3RhcnQgPSB0aGlzLl9uZXh0VmVydGV4U3RhcnQ7CiAgICAJCQlvYmplY3QuZ2VvbWV0cnlDb3VudCA9IHRoaXMuX2dlb21ldHJ5Q291bnQ7CgogICAgCQkJb2JqZWN0Lm1heEluc3RhbmNlQ291bnQgPSB0aGlzLl9tYXhJbnN0YW5jZUNvdW50OwogICAgCQkJb2JqZWN0Lm1heFZlcnRleENvdW50ID0gdGhpcy5fbWF4VmVydGV4Q291bnQ7CiAgICAJCQlvYmplY3QubWF4SW5kZXhDb3VudCA9IHRoaXMuX21heEluZGV4Q291bnQ7CgogICAgCQkJb2JqZWN0Lmdlb21ldHJ5SW5pdGlhbGl6ZWQgPSB0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkOwoKICAgIAkJCW9iamVjdC5tYXRyaWNlc1RleHR1cmUgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmUudG9KU09OKCBtZXRhICk7CgogICAgCQkJb2JqZWN0LmluZGlyZWN0VGV4dHVyZSA9IHRoaXMuX2luZGlyZWN0VGV4dHVyZS50b0pTT04oIG1ldGEgKTsKCiAgICAJCQlpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7CgogICAgCQkJCW9iamVjdC5jb2xvcnNUZXh0dXJlID0gdGhpcy5fY29sb3JzVGV4dHVyZS50b0pTT04oIG1ldGEgKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkgewoKICAgIAkJCQlvYmplY3QuYm91bmRpbmdTcGhlcmUgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLnRvSlNPTigpOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgogICAgCQkJCW9iamVjdC5ib3VuZGluZ0JveCA9IHRoaXMuYm91bmRpbmdCb3gudG9KU09OKCk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8KCiAgICAJCWZ1bmN0aW9uIHNlcmlhbGl6ZSggbGlicmFyeSwgZWxlbWVudCApIHsKCiAgICAJCQlpZiAoIGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID0gZWxlbWVudC50b0pTT04oIG1ldGEgKTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIGVsZW1lbnQudXVpZDsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5pc1NjZW5lICkgewoKICAgIAkJCWlmICggdGhpcy5iYWNrZ3JvdW5kICkgewoKICAgIAkJCQlpZiAoIHRoaXMuYmFja2dyb3VuZC5pc0NvbG9yICkgewoKICAgIAkJCQkJb2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCk7CgogICAgCQkJCX0gZWxzZSBpZiAoIHRoaXMuYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7CgogICAgCQkJCQlvYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCWlmICggdGhpcy5lbnZpcm9ubWVudCAmJiB0aGlzLmVudmlyb25tZW50LmlzVGV4dHVyZSAmJiB0aGlzLmVudmlyb25tZW50LmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSAhPT0gdHJ1ZSApIHsKCiAgICAJCQkJb2JqZWN0LmVudmlyb25tZW50ID0gdGhpcy5lbnZpcm9ubWVudC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSBpZiAoIHRoaXMuaXNNZXNoIHx8IHRoaXMuaXNMaW5lIHx8IHRoaXMuaXNQb2ludHMgKSB7CgogICAgCQkJb2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTsKCiAgICAJCQljb25zdCBwYXJhbWV0ZXJzID0gdGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzOwoKICAgIAkJCWlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWNvbnN0IHNoYXBlcyA9IHBhcmFtZXRlcnMuc2hhcGVzOwoKICAgIAkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkgewoKICAgIAkJCQkJZm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQkJY29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTsKCiAgICAJCQkJCQlzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJc2VyaWFsaXplKCBtZXRhLnNoYXBlcywgc2hhcGVzICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuaXNTa2lubmVkTWVzaCApIHsKCiAgICAJCQlvYmplY3QuYmluZE1vZGUgPSB0aGlzLmJpbmRNb2RlOwogICAgCQkJb2JqZWN0LmJpbmRNYXRyaXggPSB0aGlzLmJpbmRNYXRyaXgudG9BcnJheSgpOwoKICAgIAkJCWlmICggdGhpcy5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlzZXJpYWxpemUoIG1ldGEuc2tlbGV0b25zLCB0aGlzLnNrZWxldG9uICk7CgogICAgCQkJCW9iamVjdC5za2VsZXRvbiA9IHRoaXMuc2tlbGV0b24udXVpZDsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlpZiAoIEFycmF5LmlzQXJyYXkoIHRoaXMubWF0ZXJpYWwgKSApIHsKCiAgICAJCQkJY29uc3QgdXVpZHMgPSBbXTsKCiAgICAJCQkJZm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5tYXRlcmlhbC5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCQkJdXVpZHMucHVzaCggc2VyaWFsaXplKCBtZXRhLm1hdGVyaWFscywgdGhpcy5tYXRlcmlhbFsgaSBdICkgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlvYmplY3QubWF0ZXJpYWwgPSB1dWlkczsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8KCiAgICAJCWlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkgewoKICAgIAkJCW9iamVjdC5jaGlsZHJlbiA9IFtdOwoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQlvYmplY3QuY2hpbGRyZW4ucHVzaCggdGhpcy5jaGlsZHJlblsgaSBdLnRvSlNPTiggbWV0YSApLm9iamVjdCApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCS8vCgogICAgCQlpZiAoIHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggPiAwICkgewoKICAgIAkJCW9iamVjdC5hbmltYXRpb25zID0gW107CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5hbmltYXRpb25zLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25zWyBpIF07CgogICAgCQkJCW9iamVjdC5hbmltYXRpb25zLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5hbmltYXRpb25zLCBhbmltYXRpb24gKSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWlmICggaXNSb290T2JqZWN0ICkgewoKICAgIAkJCWNvbnN0IGdlb21ldHJpZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmdlb21ldHJpZXMgKTsKICAgIAkJCWNvbnN0IG1hdGVyaWFscyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubWF0ZXJpYWxzICk7CiAgICAJCQljb25zdCB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTsKICAgIAkJCWNvbnN0IGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7CiAgICAJCQljb25zdCBzaGFwZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnNoYXBlcyApOwogICAgCQkJY29uc3Qgc2tlbGV0b25zID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5za2VsZXRvbnMgKTsKICAgIAkJCWNvbnN0IGFuaW1hdGlvbnMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmFuaW1hdGlvbnMgKTsKICAgIAkJCWNvbnN0IG5vZGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5ub2RlcyApOwoKICAgIAkJCWlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzOwogICAgCQkJaWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7CiAgICAJCQlpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlczsKICAgIAkJCWlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzOwogICAgCQkJaWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7CiAgICAJCQlpZiAoIHNrZWxldG9ucy5sZW5ndGggPiAwICkgb3V0cHV0LnNrZWxldG9ucyA9IHNrZWxldG9uczsKICAgIAkJCWlmICggYW5pbWF0aW9ucy5sZW5ndGggPiAwICkgb3V0cHV0LmFuaW1hdGlvbnMgPSBhbmltYXRpb25zOwogICAgCQkJaWYgKCBub2Rlcy5sZW5ndGggPiAwICkgb3V0cHV0Lm5vZGVzID0gbm9kZXM7CgogICAgCQl9CgogICAgCQlvdXRwdXQub2JqZWN0ID0gb2JqZWN0OwoKICAgIAkJcmV0dXJuIG91dHB1dDsKCiAgICAJCS8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoCiAgICAJCS8vIHJlbW92ZSBtZXRhZGF0YSBvbiBlYWNoIGl0ZW0KICAgIAkJLy8gYW5kIHJldHVybiBhcyBhcnJheQogICAgCQlmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHsKCiAgICAJCQljb25zdCB2YWx1ZXMgPSBbXTsKICAgIAkJCWZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHsKCiAgICAJCQkJY29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTsKICAgIAkJCQlkZWxldGUgZGF0YS5tZXRhZGF0YTsKICAgIAkJCQl2YWx1ZXMucHVzaCggZGF0YSApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gdmFsdWVzOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgM0Qgb2JqZWN0IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWN1cnNpdmU9dHJ1ZV0gLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGRlc2NlbmRhbnRzIG9mIHRoZSAzRCBvYmplY3QgYXJlIGFsc28gY2xvbmVkLgogICAgCSAqIEByZXR1cm4ge09iamVjdDNEfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoIHJlY3Vyc2l2ZSApIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiAzRCBvYmplY3QgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0M0R9IHNvdXJjZSAtIFRoZSAzRCBvYmplY3QgdG8gY29weS4KICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWN1cnNpdmU9dHJ1ZV0gLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGRlc2NlbmRhbnRzIG9mIHRoZSAzRCBvYmplY3QgYXJlIGNsb25lZC4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSA9IHRydWUgKSB7CgogICAgCQl0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTsKCiAgICAJCXRoaXMudXAuY29weSggc291cmNlLnVwICk7CgogICAgCQl0aGlzLnBvc2l0aW9uLmNvcHkoIHNvdXJjZS5wb3NpdGlvbiApOwogICAgCQl0aGlzLnJvdGF0aW9uLm9yZGVyID0gc291cmNlLnJvdGF0aW9uLm9yZGVyOwogICAgCQl0aGlzLnF1YXRlcm5pb24uY29weSggc291cmNlLnF1YXRlcm5pb24gKTsKICAgIAkJdGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTsKCiAgICAJCXRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTsKICAgIAkJdGhpcy5tYXRyaXhXb3JsZC5jb3B5KCBzb3VyY2UubWF0cml4V29ybGQgKTsKCiAgICAJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlOwoKICAgIAkJdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4V29ybGRBdXRvVXBkYXRlOwogICAgCQl0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBzb3VyY2UubWF0cml4V29ybGROZWVkc1VwZGF0ZTsKCiAgICAJCXRoaXMubGF5ZXJzLm1hc2sgPSBzb3VyY2UubGF5ZXJzLm1hc2s7CiAgICAJCXRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlOwoKICAgIAkJdGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7CiAgICAJCXRoaXMucmVjZWl2ZVNoYWRvdyA9IHNvdXJjZS5yZWNlaXZlU2hhZG93OwoKICAgIAkJdGhpcy5mcnVzdHVtQ3VsbGVkID0gc291cmNlLmZydXN0dW1DdWxsZWQ7CiAgICAJCXRoaXMucmVuZGVyT3JkZXIgPSBzb3VyY2UucmVuZGVyT3JkZXI7CgogICAgCQl0aGlzLmFuaW1hdGlvbnMgPSBzb3VyY2UuYW5pbWF0aW9ucy5zbGljZSgpOwoKICAgIAkJdGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApOwoKICAgIAkJaWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgc291cmNlLmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgY2hpbGQgPSBzb3VyY2UuY2hpbGRyZW5bIGkgXTsKICAgIAkJCQl0aGlzLmFkZCggY2hpbGQuY2xvbmUoKSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogVGhlIGRlZmF1bHQgdXAgZGlyZWN0aW9uIGZvciBvYmplY3RzLCBhbHNvIHVzZWQgYXMgdGhlIGRlZmF1bHQKICAgICAqIHBvc2l0aW9uIGZvciB7QGxpbmsgRGlyZWN0aW9uYWxMaWdodH0gYW5kIHtAbGluayBIZW1pc3BoZXJlTGlnaHR9LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEB0eXBlIHtWZWN0b3IzfQogICAgICogQGRlZmF1bHQgKDAsMSwwKQogICAgICovCiAgICBPYmplY3QzRC5ERUZBVUxUX1VQID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApOwoKICAgIC8qKgogICAgICogVGhlIGRlZmF1bHQgc2V0dGluZyBmb3Ige0BsaW5rIE9iamVjdDNEI21hdHJpeEF1dG9VcGRhdGV9IGZvcgogICAgICogbmV3bHkgY3JlYXRlZCAzRCBvYmplY3RzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICogQGRlZmF1bHQgdHJ1ZQogICAgICovCiAgICBPYmplY3QzRC5ERUZBVUxUX01BVFJJWF9BVVRPX1VQREFURSA9IHRydWU7CgogICAgLyoqCiAgICAgKiBUaGUgZGVmYXVsdCBzZXR0aW5nIGZvciB7QGxpbmsgT2JqZWN0M0QjbWF0cml4V29ybGRBdXRvVXBkYXRlfSBmb3IKICAgICAqIG5ld2x5IGNyZWF0ZWQgM0Qgb2JqZWN0cy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqIEBkZWZhdWx0IHRydWUKICAgICAqLwogICAgT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUgPSB0cnVlOwoKICAgIGNvbnN0IF92MCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3YxJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdjIkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92MyQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwoKICAgIGNvbnN0IF92YWIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdmFjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3ZiYyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92YXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfdmJwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3ZjcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICBjb25zdCBfdjQwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpOwogICAgY29uc3QgX3Y0MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTsKICAgIGNvbnN0IF92NDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7CgogICAgLyoqCiAgICAgKiBBIGdlb21ldHJpYyB0cmlhbmdsZSBhcyBkZWZpbmVkIGJ5IHRocmVlIHZlY3RvcnMgcmVwcmVzZW50aW5nIGl0cyB0aHJlZSBjb3JuZXJzLgogICAgICovCiAgICBjbGFzcyBUcmlhbmdsZSB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgdHJpYW5nbGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFthPSgwLDAsMCldIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBbYj0oMCwwLDApXSAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFtjPSgwLDAsMCldIC0gVGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGEgPSBuZXcgVmVjdG9yMygpLCBiID0gbmV3IFZlY3RvcjMoKSwgYyA9IG5ldyBWZWN0b3IzKCkgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtWZWN0b3IzfQogICAgCQkgKi8KICAgIAkJdGhpcy5hID0gYTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtWZWN0b3IzfQogICAgCQkgKi8KICAgIAkJdGhpcy5iID0gYjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1ZlY3RvcjN9CiAgICAJCSAqLwogICAgCQl0aGlzLmMgPSBjOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBub3JtYWwgdmVjdG9yIG9mIGEgdHJpYW5nbGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgLSBUaGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBjIC0gVGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdHJpYW5nbGUncyBub3JtYWwuCiAgICAJICovCiAgICAJc3RhdGljIGdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICkgewoKICAgIAkJdGFyZ2V0LnN1YlZlY3RvcnMoIGMsIGIgKTsKICAgIAkJX3YwJDEuc3ViVmVjdG9ycyggYSwgYiApOwogICAgCQl0YXJnZXQuY3Jvc3MoIF92MCQxICk7CgogICAgCQljb25zdCB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpOwogICAgCQlpZiAoIHRhcmdldExlbmd0aFNxID4gMCApIHsKCiAgICAJCQlyZXR1cm4gdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCAxIC8gTWF0aC5zcXJ0KCB0YXJnZXRMZW5ndGhTcSApICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGFyZ2V0LnNldCggMCwgMCwgMCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIGEgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVjdG9yLgogICAgCSAqIFJldHVybnMgYG51bGxgIGlmIHRoZSB0cmlhbmdsZSBpcyBkZWdlbmVyYXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBmb3IgdGhlIGdpdmVuIHBvaW50CiAgICAJICovCiAgICAJc3RhdGljIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHsKCiAgICAJCS8vIGJhc2VkIG9uOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcG9pbnRpbnBvbHkvZGVmYXVsdC5odG1sCgogICAgCQlfdjAkMS5zdWJWZWN0b3JzKCBjLCBhICk7CiAgICAJCV92MSQzLnN1YlZlY3RvcnMoIGIsIGEgKTsKICAgIAkJX3YyJDIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTsKCiAgICAJCWNvbnN0IGRvdDAwID0gX3YwJDEuZG90KCBfdjAkMSApOwogICAgCQljb25zdCBkb3QwMSA9IF92MCQxLmRvdCggX3YxJDMgKTsKICAgIAkJY29uc3QgZG90MDIgPSBfdjAkMS5kb3QoIF92MiQyICk7CiAgICAJCWNvbnN0IGRvdDExID0gX3YxJDMuZG90KCBfdjEkMyApOwogICAgCQljb25zdCBkb3QxMiA9IF92MSQzLmRvdCggX3YyJDIgKTsKCiAgICAJCWNvbnN0IGRlbm9tID0gKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApOwoKICAgIAkJLy8gY29sbGluZWFyIG9yIHNpbmd1bGFyIHRyaWFuZ2xlCiAgICAJCWlmICggZGVub20gPT09IDAgKSB7CgogICAgCQkJdGFyZ2V0LnNldCggMCwgMCwgMCApOwogICAgCQkJcmV0dXJuIG51bGw7CgogICAgCQl9CgogICAgCQljb25zdCBpbnZEZW5vbSA9IDEgLyBkZW5vbTsKICAgIAkJY29uc3QgdSA9ICggZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIgKSAqIGludkRlbm9tOwogICAgCQljb25zdCB2ID0gKCBkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMiApICogaW52RGVub207CgogICAgCQkvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMQogICAgCQlyZXR1cm4gdGFyZ2V0LnNldCggMSAtIHUgLSB2LCB2LCB1ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHBvaW50LCB3aGVuIHByb2plY3RlZCBvbnRvIHRoZSBwbGFuZSBvZiB0aGUKICAgIAkgKiB0cmlhbmdsZSwgbGllcyB3aXRoaW4gdGhlIHRyaWFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCBpbiAzRCBzcGFjZSB0byB0ZXN0LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGMgLSBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwb2ludCwgd2hlbiBwcm9qZWN0ZWQgb250byB0aGUgcGxhbmUgb2YgdGhlCiAgICAJICogdHJpYW5nbGUsIGxpZXMgd2l0aGluIHRoZSB0cmlhbmdsZSBvciBub3QuCiAgICAJICovCiAgICAJc3RhdGljIGNvbnRhaW5zUG9pbnQoIHBvaW50LCBhLCBiLCBjICkgewoKICAgIAkJLy8gaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUgdGhlbiB3ZSBjYW4ndCBjb250YWluIGEgcG9pbnQKICAgIAkJaWYgKCB0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIF92MyQyICkgPT09IG51bGwgKSB7CgogICAgCQkJcmV0dXJuIGZhbHNlOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuICggX3YzJDIueCA+PSAwICkgJiYgKCBfdjMkMi55ID49IDAgKSAmJiAoICggX3YzJDIueCArIF92MyQyLnkgKSA8PSAxICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHZhbHVlIGJhcnljZW50cmljYWxseSBpbnRlcnBvbGF0ZWQgZm9yIHRoZSBnaXZlbiBwb2ludCBvbiB0aGUKICAgIAkgKiB0cmlhbmdsZS4gUmV0dXJucyBgbnVsbGAgaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gUG9zaXRpb24gb2YgaW50ZXJwb2xhdGVkIHBvaW50LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcDEgLSBUaGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHAyIC0gVGhlIHNlY29uZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcDMgLSBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYxIC0gVmFsdWUgdG8gaW50ZXJwb2xhdGUgb2YgZmlyc3QgdmVydGV4LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjIgLSBWYWx1ZSB0byBpbnRlcnBvbGF0ZSBvZiBzZWNvbmQgdmVydGV4LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjMgLSBWYWx1ZSB0byBpbnRlcnBvbGF0ZSBvZiB0aGlyZCB2ZXJ0ZXguCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGludGVycG9sYXRlZCB2YWx1ZS4KICAgIAkgKi8KICAgIAlzdGF0aWMgZ2V0SW50ZXJwb2xhdGlvbiggcG9pbnQsIHAxLCBwMiwgcDMsIHYxLCB2MiwgdjMsIHRhcmdldCApIHsKCiAgICAJCWlmICggdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCBwMSwgcDIsIHAzLCBfdjMkMiApID09PSBudWxsICkgewoKICAgIAkJCXRhcmdldC54ID0gMDsKICAgIAkJCXRhcmdldC55ID0gMDsKICAgIAkJCWlmICggJ3onIGluIHRhcmdldCApIHRhcmdldC56ID0gMDsKICAgIAkJCWlmICggJ3cnIGluIHRhcmdldCApIHRhcmdldC53ID0gMDsKICAgIAkJCXJldHVybiBudWxsOwoKICAgIAkJfQoKICAgIAkJdGFyZ2V0LnNldFNjYWxhciggMCApOwogICAgCQl0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB2MSwgX3YzJDIueCApOwogICAgCQl0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB2MiwgX3YzJDIueSApOwogICAgCQl0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB2MywgX3YzJDIueiApOwoKICAgIAkJcmV0dXJuIHRhcmdldDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgdmFsdWUgYmFyeWNlbnRyaWNhbGx5IGludGVycG9sYXRlZCBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSBhbmQgaW5kaWNlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSB0byBpbnRlcnBvbGF0ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaTEgLSBJbmRleCBvZiBmaXJzdCB2ZXJ0ZXguCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGkyIC0gSW5kZXggb2Ygc2Vjb25kIHZlcnRleC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaTMgLSBJbmRleCBvZiB0aGlyZCB2ZXJ0ZXguCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiYXJ5Y29vcmQgLSBUaGUgYmFyeWNvb3JkaW5hdGUgdmFsdWUgdG8gdXNlIHRvIGludGVycG9sYXRlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgdmFsdWUuCiAgICAJICovCiAgICAJc3RhdGljIGdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggYXR0ciwgaTEsIGkyLCBpMywgYmFyeWNvb3JkLCB0YXJnZXQgKSB7CgogICAgCQlfdjQwLnNldFNjYWxhciggMCApOwogICAgCQlfdjQxLnNldFNjYWxhciggMCApOwogICAgCQlfdjQyLnNldFNjYWxhciggMCApOwoKICAgIAkJX3Y0MC5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyLCBpMSApOwogICAgCQlfdjQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHIsIGkyICk7CiAgICAJCV92NDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0ciwgaTMgKTsKCiAgICAJCXRhcmdldC5zZXRTY2FsYXIoIDAgKTsKICAgIAkJdGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggX3Y0MCwgYmFyeWNvb3JkLnggKTsKICAgIAkJdGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggX3Y0MSwgYmFyeWNvb3JkLnkgKTsKICAgIAkJdGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggX3Y0MiwgYmFyeWNvb3JkLnogKTsKCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRyaWFuZ2xlIGlzIG9yaWVudGVkIHRvd2FyZHMgdGhlIGdpdmVuIGRpcmVjdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGMgLSBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IGRpcmVjdGlvbiAtIFRoZSAobm9ybWFsaXplZCkgZGlyZWN0aW9uIHZlY3Rvci4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB0cmlhbmdsZSBpcyBvcmllbnRlZCB0b3dhcmRzIHRoZSBnaXZlbiBkaXJlY3Rpb24gb3Igbm90LgogICAgCSAqLwogICAgCXN0YXRpYyBpc0Zyb250RmFjaW5nKCBhLCBiLCBjLCBkaXJlY3Rpb24gKSB7CgogICAgCQlfdjAkMS5zdWJWZWN0b3JzKCBjLCBiICk7CiAgICAJCV92MSQzLnN1YlZlY3RvcnMoIGEsIGIgKTsKCiAgICAJCS8vIHN0cmljdGx5IGZyb250IGZhY2luZwogICAgCQlyZXR1cm4gKCBfdjAkMS5jcm9zcyggX3YxJDMgKS5kb3QoIGRpcmVjdGlvbiApIDwgMCApID8gdHJ1ZSA6IGZhbHNlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHRyaWFuZ2xlJ3MgdmVydGljZXMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqIEByZXR1cm4ge1RyaWFuZ2xlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHRyaWFuZ2xlLgogICAgCSAqLwogICAgCXNldCggYSwgYiwgYyApIHsKCiAgICAJCXRoaXMuYS5jb3B5KCBhICk7CiAgICAJCXRoaXMuYi5jb3B5KCBiICk7CiAgICAJCXRoaXMuYy5jb3B5KCBjICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB0cmlhbmdsZSdzIHZlcnRpY2VzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIGFycmF5IHZhbHVlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMz59IHBvaW50cyAtIEFuIGFycmF5IHdpdGggM0QgcG9pbnRzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpMCAtIFRoZSBhcnJheSBpbmRleCByZXByZXNlbnRpbmcgdGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGkxIC0gVGhlIGFycmF5IGluZGV4IHJlcHJlc2VudGluZyB0aGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGkyIC0gVGhlIGFycmF5IGluZGV4IHJlcHJlc2VudGluZyB0aGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcmV0dXJuIHtUcmlhbmdsZX0gQSByZWZlcmVuY2UgdG8gdGhpcyB0cmlhbmdsZS4KICAgIAkgKi8KICAgIAlzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyggcG9pbnRzLCBpMCwgaTEsIGkyICkgewoKICAgIAkJdGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApOwogICAgCQl0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7CiAgICAJCXRoaXMuYy5jb3B5KCBwb2ludHNbIGkyIF0gKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHRyaWFuZ2xlJ3MgdmVydGljZXMgYnkgY29weWluZyB0aGUgZ2l2ZW4gYXR0cmlidXRlIHZhbHVlcy4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBBIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aCAzRCBwb2ludHMgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaTAgLSBUaGUgYXR0cmlidXRlIGluZGV4IHJlcHJlc2VudGluZyB0aGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaTEgLSBUaGUgYXR0cmlidXRlIGluZGV4IHJlcHJlc2VudGluZyB0aGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGkyIC0gVGhlIGF0dHJpYnV0ZSBpbmRleCByZXByZXNlbnRpbmcgdGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICogQHJldHVybiB7VHJpYW5nbGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdHJpYW5nbGUuCiAgICAJICovCiAgICAJc2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMoIGF0dHJpYnV0ZSwgaTAsIGkxLCBpMiApIHsKCiAgICAJCXRoaXMuYS5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkwICk7CiAgICAJCXRoaXMuYi5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkxICk7CiAgICAJCXRoaXMuYy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkyICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgbmV3IHRyaWFuZ2xlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtUcmlhbmdsZX0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNsb25lKCkgewoKICAgIAkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB0cmlhbmdsZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtUcmlhbmdsZX0gdHJpYW5nbGUgLSBUaGUgdHJpYW5nbGUgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtUcmlhbmdsZX0gQSByZWZlcmVuY2UgdG8gdGhpcyB0cmlhbmdsZS4KICAgIAkgKi8KICAgIAljb3B5KCB0cmlhbmdsZSApIHsKCiAgICAJCXRoaXMuYS5jb3B5KCB0cmlhbmdsZS5hICk7CiAgICAJCXRoaXMuYi5jb3B5KCB0cmlhbmdsZS5iICk7CiAgICAJCXRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgYXJlYSBvZiB0aGUgdHJpYW5nbGUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0cmlhbmdsZSdzIGFyZWEuCiAgICAJICovCiAgICAJZ2V0QXJlYSgpIHsKCiAgICAJCV92MCQxLnN1YlZlY3RvcnMoIHRoaXMuYywgdGhpcy5iICk7CiAgICAJCV92MSQzLnN1YlZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICk7CgogICAgCQlyZXR1cm4gX3YwJDEuY3Jvc3MoIF92MSQzICkubGVuZ3RoKCkgKiAwLjU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIG1pZHBvaW50IG9mIHRoZSB0cmlhbmdsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIHRyaWFuZ2xlJ3MgbWlkcG9pbnQuCiAgICAJICovCiAgICAJZ2V0TWlkcG9pbnQoIHRhcmdldCApIHsKCiAgICAJCXJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdHJpYW5nbGUncyBub3JtYWwuCiAgICAJICovCiAgICAJZ2V0Tm9ybWFsKCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyBhIHBsYW5lIHRoZSB0cmlhbmdsZSBsaWVzIHdpdGhpbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBUaGUgcGxhbmUgdGhlIHRyaWFuZ2xlIGxpZXMgd2l0aGluLgogICAgCSAqLwogICAgCWdldFBsYW5lKCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gdGFyZ2V0LnNldEZyb21Db3BsYW5hclBvaW50cyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIGEgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVjdG9yLgogICAgCSAqIFJldHVybnMgYG51bGxgIGlmIHRoZSB0cmlhbmdsZSBpcyBkZWdlbmVyYXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIGZvciB0aGUgZ2l2ZW4gcG9pbnQKICAgIAkgKi8KICAgIAlnZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHZhbHVlIGJhcnljZW50cmljYWxseSBpbnRlcnBvbGF0ZWQgZm9yIHRoZSBnaXZlbiBwb2ludCBvbiB0aGUKICAgIAkgKiB0cmlhbmdsZS4gUmV0dXJucyBgbnVsbGAgaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gUG9zaXRpb24gb2YgaW50ZXJwb2xhdGVkIHBvaW50LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdjEgLSBWYWx1ZSB0byBpbnRlcnBvbGF0ZSBvZiBmaXJzdCB2ZXJ0ZXguCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2MiAtIFZhbHVlIHRvIGludGVycG9sYXRlIG9mIHNlY29uZCB2ZXJ0ZXguCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB2MyAtIFZhbHVlIHRvIGludGVycG9sYXRlIG9mIHRoaXJkIHZlcnRleC4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4gez9WZWN0b3IzfSBUaGUgaW50ZXJwb2xhdGVkIHZhbHVlLgogICAgCSAqLwogICAgCWdldEludGVycG9sYXRpb24oIHBvaW50LCB2MSwgdjIsIHYzLCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gVHJpYW5nbGUuZ2V0SW50ZXJwb2xhdGlvbiggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHYxLCB2MiwgdjMsIHRhcmdldCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBwb2ludCwgd2hlbiBwcm9qZWN0ZWQgb250byB0aGUgcGxhbmUgb2YgdGhlCiAgICAJICogdHJpYW5nbGUsIGxpZXMgd2l0aGluIHRoZSB0cmlhbmdsZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcG9pbnQgaW4gM0Qgc3BhY2UgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwb2ludCwgd2hlbiBwcm9qZWN0ZWQgb250byB0aGUgcGxhbmUgb2YgdGhlCiAgICAJICogdHJpYW5nbGUsIGxpZXMgd2l0aGluIHRoZSB0cmlhbmdsZSBvciBub3QuCiAgICAJICovCiAgICAJY29udGFpbnNQb2ludCggcG9pbnQgKSB7CgogICAgCQlyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdHJpYW5nbGUgaXMgb3JpZW50ZWQgdG93YXJkcyB0aGUgZ2l2ZW4gZGlyZWN0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdHJpYW5nbGUgaXMgb3JpZW50ZWQgdG93YXJkcyB0aGUgZ2l2ZW4gZGlyZWN0aW9uIG9yIG5vdC4KICAgIAkgKi8KICAgIAlpc0Zyb250RmFjaW5nKCBkaXJlY3Rpb24gKSB7CgogICAgCQlyZXR1cm4gVHJpYW5nbGUuaXNGcm9udEZhY2luZyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgZGlyZWN0aW9uICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyB0cmlhbmdsZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIGJveC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB0byBpbnRlcnNlY3QuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHRyaWFuZ2xlIGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94IG9yIG5vdC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RzQm94KCBib3ggKSB7CgogICAgCQlyZXR1cm4gYm94LmludGVyc2VjdHNUcmlhbmdsZSggdGhpcyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHRyaWFuZ2xlIHRvIHRoZSBnaXZlbiBwb2ludC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcCAtIFRoZSBwb2ludCB0byBjb21wdXRlIHRoZSBjbG9zZXN0IHBvaW50IGZvci4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSB0cmlhbmdsZS4KICAgIAkgKi8KICAgIAljbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7CgogICAgCQljb25zdCBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jOwogICAgCQlsZXQgdiwgdzsKCiAgICAJCS8vIGFsZ29yaXRobSB0aGFua3MgdG8gUmVhbC1UaW1lIENvbGxpc2lvbiBEZXRlY3Rpb24gYnkgQ2hyaXN0ZXIgRXJpY3NvbiwKICAgIAkJLy8gcHVibGlzaGVkIGJ5IE1vcmdhbiBLYXVmbWFubiBQdWJsaXNoZXJzLCAoYykgMjAwNSBFbHNldmllciBJbmMuLAogICAgCQkvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi4KICAgIAkJLy8gYmFzaWNhbGx5LCB3ZSdyZSBkaXN0aW5ndWlzaGluZyB3aGljaCBvZiB0aGUgdm9yb25vaSByZWdpb25zIG9mIHRoZSB0cmlhbmdsZQogICAgCQkvLyB0aGUgcG9pbnQgbGllcyBpbiB3aXRoIHRoZSBtaW5pbXVtIGFtb3VudCBvZiByZWR1bmRhbnQgY29tcHV0YXRpb24uCgogICAgCQlfdmFiLnN1YlZlY3RvcnMoIGIsIGEgKTsKICAgIAkJX3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7CiAgICAJCV92YXAuc3ViVmVjdG9ycyggcCwgYSApOwogICAgCQljb25zdCBkMSA9IF92YWIuZG90KCBfdmFwICk7CiAgICAJCWNvbnN0IGQyID0gX3ZhYy5kb3QoIF92YXAgKTsKICAgIAkJaWYgKCBkMSA8PSAwICYmIGQyIDw9IDAgKSB7CgogICAgCQkJLy8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApCiAgICAJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTsKCiAgICAJCX0KCiAgICAJCV92YnAuc3ViVmVjdG9ycyggcCwgYiApOwogICAgCQljb25zdCBkMyA9IF92YWIuZG90KCBfdmJwICk7CiAgICAJCWNvbnN0IGQ0ID0gX3ZhYy5kb3QoIF92YnAgKTsKICAgIAkJaWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkgewoKICAgIAkJCS8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKQogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBiICk7CgogICAgCQl9CgogICAgCQljb25zdCB2YyA9IGQxICogZDQgLSBkMyAqIGQyOwogICAgCQlpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkgewoKICAgIAkJCXYgPSBkMSAvICggZDEgLSBkMyApOwogICAgCQkJLy8gZWRnZSByZWdpb24gb2YgQUI7IGJhcnljZW50cmljIGNvb3JkcyAoMS12LCB2LCAwKQogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICk7CgogICAgCQl9CgogICAgCQlfdmNwLnN1YlZlY3RvcnMoIHAsIGMgKTsKICAgIAkJY29uc3QgZDUgPSBfdmFiLmRvdCggX3ZjcCApOwogICAgCQljb25zdCBkNiA9IF92YWMuZG90KCBfdmNwICk7CiAgICAJCWlmICggZDYgPj0gMCAmJiBkNSA8PSBkNiApIHsKCiAgICAJCQkvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSkKICAgIAkJCXJldHVybiB0YXJnZXQuY29weSggYyApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgdmIgPSBkNSAqIGQyIC0gZDEgKiBkNjsKICAgIAkJaWYgKCB2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCApIHsKCiAgICAJCQl3ID0gZDIgLyAoIGQyIC0gZDYgKTsKICAgIAkJCS8vIGVkZ2UgcmVnaW9uIG9mIEFDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdywgMCwgdykKICAgIAkJCXJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYywgdyApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgdmEgPSBkMyAqIGQ2IC0gZDUgKiBkNDsKICAgIAkJaWYgKCB2YSA8PSAwICYmICggZDQgLSBkMyApID49IDAgJiYgKCBkNSAtIGQ2ICkgPj0gMCApIHsKCiAgICAJCQlfdmJjLnN1YlZlY3RvcnMoIGMsIGIgKTsKICAgIAkJCXcgPSAoIGQ0IC0gZDMgKSAvICggKCBkNCAtIGQzICkgKyAoIGQ1IC0gZDYgKSApOwogICAgCQkJLy8gZWRnZSByZWdpb24gb2YgQkM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMS13LCB3KQogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBiICkuYWRkU2NhbGVkVmVjdG9yKCBfdmJjLCB3ICk7IC8vIGVkZ2UgcmVnaW9uIG9mIEJDCgogICAgCQl9CgogICAgCQkvLyBmYWNlIHJlZ2lvbgogICAgCQljb25zdCBkZW5vbSA9IDEgLyAoIHZhICsgdmIgKyB2YyApOwogICAgCQkvLyB1ID0gdmEgKiBkZW5vbQogICAgCQl2ID0gdmIgKiBkZW5vbTsKICAgIAkJdyA9IHZjICogZGVub207CgogICAgCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWIsIHYgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHRyaWFuZ2xlIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VHJpYW5nbGV9IHRyaWFuZ2xlIC0gVGhlIHRyaWFuZ2xlIHRvIHRlc3QgZm9yIGVxdWFsaXR5LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyB0cmlhbmdsZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICovCiAgICAJZXF1YWxzKCB0cmlhbmdsZSApIHsKCiAgICAJCXJldHVybiB0cmlhbmdsZS5hLmVxdWFscyggdGhpcy5hICkgJiYgdHJpYW5nbGUuYi5lcXVhbHMoIHRoaXMuYiApICYmIHRyaWFuZ2xlLmMuZXF1YWxzKCB0aGlzLmMgKTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBfY29sb3JLZXl3b3JkcyA9IHsgJ2FsaWNlYmx1ZSc6IDB4RjBGOEZGLCAnYW50aXF1ZXdoaXRlJzogMHhGQUVCRDcsICdhcXVhJzogMHgwMEZGRkYsICdhcXVhbWFyaW5lJzogMHg3RkZGRDQsICdhenVyZSc6IDB4RjBGRkZGLAogICAgCSdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMiwKICAgIAknYnJvd24nOiAweEE1MkEyQSwgJ2J1cmx5d29vZCc6IDB4REVCODg3LCAnY2FkZXRibHVlJzogMHg1RjlFQTAsICdjaGFydHJldXNlJzogMHg3RkZGMDAsICdjaG9jb2xhdGUnOiAweEQyNjkxRSwgJ2NvcmFsJzogMHhGRjdGNTAsCiAgICAJJ2Nvcm5mbG93ZXJibHVlJzogMHg2NDk1RUQsICdjb3Juc2lsayc6IDB4RkZGOERDLCAnY3JpbXNvbic6IDB4REMxNDNDLCAnY3lhbic6IDB4MDBGRkZGLCAnZGFya2JsdWUnOiAweDAwMDA4QiwgJ2RhcmtjeWFuJzogMHgwMDhCOEIsCiAgICAJJ2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsCiAgICAJJ2RhcmtvbGl2ZWdyZWVuJzogMHg1NTZCMkYsICdkYXJrb3JhbmdlJzogMHhGRjhDMDAsICdkYXJrb3JjaGlkJzogMHg5OTMyQ0MsICdkYXJrcmVkJzogMHg4QjAwMDAsICdkYXJrc2FsbW9uJzogMHhFOTk2N0EsICdkYXJrc2VhZ3JlZW4nOiAweDhGQkM4RiwKICAgIAknZGFya3NsYXRlYmx1ZSc6IDB4NDgzRDhCLCAnZGFya3NsYXRlZ3JheSc6IDB4MkY0RjRGLCAnZGFya3NsYXRlZ3JleSc6IDB4MkY0RjRGLCAnZGFya3R1cnF1b2lzZSc6IDB4MDBDRUQxLCAnZGFya3Zpb2xldCc6IDB4OTQwMEQzLAogICAgCSdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLAogICAgCSdmbG9yYWx3aGl0ZSc6IDB4RkZGQUYwLCAnZm9yZXN0Z3JlZW4nOiAweDIyOEIyMiwgJ2Z1Y2hzaWEnOiAweEZGMDBGRiwgJ2dhaW5zYm9ybyc6IDB4RENEQ0RDLCAnZ2hvc3R3aGl0ZSc6IDB4RjhGOEZGLCAnZ29sZCc6IDB4RkZENzAwLAogICAgCSdnb2xkZW5yb2QnOiAweERBQTUyMCwgJ2dyYXknOiAweDgwODA4MCwgJ2dyZWVuJzogMHgwMDgwMDAsICdncmVlbnllbGxvdyc6IDB4QURGRjJGLCAnZ3JleSc6IDB4ODA4MDgwLCAnaG9uZXlkZXcnOiAweEYwRkZGMCwgJ2hvdHBpbmsnOiAweEZGNjlCNCwKICAgIAknaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLAogICAgCSdsZW1vbmNoaWZmb24nOiAweEZGRkFDRCwgJ2xpZ2h0Ymx1ZSc6IDB4QUREOEU2LCAnbGlnaHRjb3JhbCc6IDB4RjA4MDgwLCAnbGlnaHRjeWFuJzogMHhFMEZGRkYsICdsaWdodGdvbGRlbnJvZHllbGxvdyc6IDB4RkFGQUQyLCAnbGlnaHRncmF5JzogMHhEM0QzRDMsCiAgICAJJ2xpZ2h0Z3JlZW4nOiAweDkwRUU5MCwgJ2xpZ2h0Z3JleSc6IDB4RDNEM0QzLCAnbGlnaHRwaW5rJzogMHhGRkI2QzEsICdsaWdodHNhbG1vbic6IDB4RkZBMDdBLCAnbGlnaHRzZWFncmVlbic6IDB4MjBCMkFBLCAnbGlnaHRza3libHVlJzogMHg4N0NFRkEsCiAgICAJJ2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMiwKICAgIAknbGluZW4nOiAweEZBRjBFNiwgJ21hZ2VudGEnOiAweEZGMDBGRiwgJ21hcm9vbic6IDB4ODAwMDAwLCAnbWVkaXVtYXF1YW1hcmluZSc6IDB4NjZDREFBLCAnbWVkaXVtYmx1ZSc6IDB4MDAwMENELCAnbWVkaXVtb3JjaGlkJzogMHhCQTU1RDMsCiAgICAJJ21lZGl1bXB1cnBsZSc6IDB4OTM3MERCLCAnbWVkaXVtc2VhZ3JlZW4nOiAweDNDQjM3MSwgJ21lZGl1bXNsYXRlYmx1ZSc6IDB4N0I2OEVFLCAnbWVkaXVtc3ByaW5nZ3JlZW4nOiAweDAwRkE5QSwgJ21lZGl1bXR1cnF1b2lzZSc6IDB4NDhEMUNDLAogICAgCSdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELAogICAgCSduYXZ5JzogMHgwMDAwODAsICdvbGRsYWNlJzogMHhGREY1RTYsICdvbGl2ZSc6IDB4ODA4MDAwLCAnb2xpdmVkcmFiJzogMHg2QjhFMjMsICdvcmFuZ2UnOiAweEZGQTUwMCwgJ29yYW5nZXJlZCc6IDB4RkY0NTAwLCAnb3JjaGlkJzogMHhEQTcwRDYsCiAgICAJJ3BhbGVnb2xkZW5yb2QnOiAweEVFRThBQSwgJ3BhbGVncmVlbic6IDB4OThGQjk4LCAncGFsZXR1cnF1b2lzZSc6IDB4QUZFRUVFLCAncGFsZXZpb2xldHJlZCc6IDB4REI3MDkzLCAncGFwYXlhd2hpcCc6IDB4RkZFRkQ1LCAncGVhY2hwdWZmJzogMHhGRkRBQjksCiAgICAJJ3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4RiwKICAgIAkncm95YWxibHVlJzogMHg0MTY5RTEsICdzYWRkbGVicm93bic6IDB4OEI0NTEzLCAnc2FsbW9uJzogMHhGQTgwNzIsICdzYW5keWJyb3duJzogMHhGNEE0NjAsICdzZWFncmVlbic6IDB4MkU4QjU3LCAnc2Vhc2hlbGwnOiAweEZGRjVFRSwKICAgIAknc2llbm5hJzogMHhBMDUyMkQsICdzaWx2ZXInOiAweEMwQzBDMCwgJ3NreWJsdWUnOiAweDg3Q0VFQiwgJ3NsYXRlYmx1ZSc6IDB4NkE1QUNELCAnc2xhdGVncmF5JzogMHg3MDgwOTAsICdzbGF0ZWdyZXknOiAweDcwODA5MCwgJ3Nub3cnOiAweEZGRkFGQSwKICAgIAknc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLAogICAgCSd2aW9sZXQnOiAweEVFODJFRSwgJ3doZWF0JzogMHhGNURFQjMsICd3aGl0ZSc6IDB4RkZGRkZGLCAnd2hpdGVzbW9rZSc6IDB4RjVGNUY1LCAneWVsbG93JzogMHhGRkZGMDAsICd5ZWxsb3dncmVlbic6IDB4OUFDRDMyIH07CgogICAgY29uc3QgX2hzbEEgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTsKICAgIGNvbnN0IF9oc2xCID0geyBoOiAwLCBzOiAwLCBsOiAwIH07CgogICAgZnVuY3Rpb24gaHVlMnJnYiggcCwgcSwgdCApIHsKCiAgICAJaWYgKCB0IDwgMCApIHQgKz0gMTsKICAgIAlpZiAoIHQgPiAxICkgdCAtPSAxOwogICAgCWlmICggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogdDsKICAgIAlpZiAoIHQgPCAxIC8gMiApIHJldHVybiBxOwogICAgCWlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTsKICAgIAlyZXR1cm4gcDsKCiAgICB9CgogICAgLyoqCiAgICAgKiBBIENvbG9yIGluc3RhbmNlIGlzIHJlcHJlc2VudGVkIGJ5IFJHQiBjb21wb25lbnRzIGluIHRoZSBsaW5lYXIgPGk+d29ya2luZwogICAgICogY29sb3Igc3BhY2U8L2k+LCB3aGljaCBkZWZhdWx0cyB0byBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLiBJbnB1dHMKICAgICAqIGNvbnZlbnRpb25hbGx5IHVzaW5nIGBTUkdCQ29sb3JTcGFjZWAgKHN1Y2ggYXMgaGV4YWRlY2ltYWxzIGFuZCBDU1MKICAgICAqIHN0cmluZ3MpIGFyZSBjb252ZXJ0ZWQgdG8gdGhlIHdvcmtpbmcgY29sb3Igc3BhY2UgYXV0b21hdGljYWxseS4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogLy8gY29udmVydGVkIGF1dG9tYXRpY2FsbHkgZnJvbSBTUkdCQ29sb3JTcGFjZSB0byBMaW5lYXJTUkdCQ29sb3JTcGFjZQogICAgICogY29uc3QgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKS5zZXRIZXgoIDB4MTEyMjMzICk7CiAgICAgKiBgYGAKICAgICAqIFNvdXJjZSBjb2xvciBzcGFjZXMgbWF5IGJlIHNwZWNpZmllZCBleHBsaWNpdGx5LCB0byBlbnN1cmUgY29ycmVjdCBjb252ZXJzaW9ucy4KICAgICAqIGBgYGpzCiAgICAgKiAvLyBhc3N1bWVkIGFscmVhZHkgTGluZWFyU1JHQkNvbG9yU3BhY2U7IG5vIGNvbnZlcnNpb24KICAgICAqIGNvbnN0IGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuc2V0UkdCKCAwLjUsIDAuNSwgMC41ICk7CiAgICAgKgogICAgICogLy8gY29udmVydGVkIGV4cGxpY2l0bHkgZnJvbSBTUkdCQ29sb3JTcGFjZSB0byBMaW5lYXJTUkdCQ29sb3JTcGFjZQogICAgICogY29uc3QgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKS5zZXRSR0IoIDAuNSwgMC41LCAwLjUsIFNSR0JDb2xvclNwYWNlICk7CiAgICAgKiBgYGAKICAgICAqIElmIFRIUkVFLkNvbG9yTWFuYWdlbWVudCBpcyBkaXNhYmxlZCwgbm8gY29udmVyc2lvbnMgb2NjdXIuIEZvciBkZXRhaWxzLAogICAgICogc2VlIDxpPkNvbG9yIG1hbmFnZW1lbnQ8L2k+LiBJdGVyYXRpbmcgdGhyb3VnaCBhIENvbG9yIGluc3RhbmNlIHdpbGwgeWllbGQKICAgICAqIGl0cyBjb21wb25lbnRzIChyLCBnLCBiKSBpbiB0aGUgY29ycmVzcG9uZGluZyBvcmRlci4gQSBDb2xvciBjYW4gYmUgaW5pdGlhbGlzZWQKICAgICAqIGluIGFueSBvZiB0aGUgZm9sbG93aW5nIHdheXM6CiAgICAgKiBgYGBqcwogICAgICogLy9lbXB0eSBjb25zdHJ1Y3RvciAtIHdpbGwgZGVmYXVsdCB3aGl0ZQogICAgICogY29uc3QgY29sb3IxID0gbmV3IFRIUkVFLkNvbG9yKCk7CiAgICAgKgogICAgICogLy9IZXhhZGVjaW1hbCBjb2xvciAocmVjb21tZW5kZWQpCiAgICAgKiBjb25zdCBjb2xvcjIgPSBuZXcgVEhSRUUuQ29sb3IoIDB4ZmYwMDAwICk7CiAgICAgKgogICAgICogLy9SR0Igc3RyaW5nCiAgICAgKiBjb25zdCBjb2xvcjMgPSBuZXcgVEhSRUUuQ29sb3IoInJnYigyNTUsIDAsIDApIik7CiAgICAgKiBjb25zdCBjb2xvcjQgPSBuZXcgVEhSRUUuQ29sb3IoInJnYigxMDAlLCAwJSwgMCUpIik7CiAgICAgKgogICAgICogLy9YMTEgY29sb3IgbmFtZSAtIGFsbCAxNDAgY29sb3IgbmFtZXMgYXJlIHN1cHBvcnRlZC4KICAgICAqIC8vTm90ZSB0aGUgbGFjayBvZiBDYW1lbENhc2UgaW4gdGhlIG5hbWUKICAgICAqIGNvbnN0IGNvbG9yNSA9IG5ldyBUSFJFRS5Db2xvciggJ3NreWJsdWUnICk7CiAgICAgKiAvL0hTTCBzdHJpbmcKICAgICAqIGNvbnN0IGNvbG9yNiA9IG5ldyBUSFJFRS5Db2xvcigiaHNsKDAsIDEwMCUsIDUwJSkiKTsKICAgICAqCiAgICAgKiAvL1NlcGFyYXRlIFJHQiB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAxCiAgICAgKiBjb25zdCBjb2xvcjcgPSBuZXcgVEhSRUUuQ29sb3IoIDEsIDAsIDAgKTsKICAgICAqIGBgYAogICAgICovCiAgICBjbGFzcyBDb2xvciB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgY29sb3IuCiAgICAJICoKICAgIAkgKiBOb3RlIHRoYXQgc3RhbmRhcmQgbWV0aG9kIG9mIHNwZWNpZnlpbmcgY29sb3IgaW4gdGhyZWUuanMgaXMgd2l0aCBhIGhleGFkZWNpbWFsIHRyaXBsZXQsCiAgICAJICogYW5kIHRoYXQgbWV0aG9kIGlzIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgZG9jdW1lbnRhdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8Q29sb3IpfSBbcl0gLSBUaGUgcmVkIGNvbXBvbmVudCBvZiB0aGUgY29sb3IuIElmIGBnYCBhbmQgYGJgIGFyZQogICAgCSAqIG5vdCBwcm92aWRlZCwgaXQgY2FuIGJlIGhleGFkZWNpbWFsIHRyaXBsZXQsIGEgQ1NTLXN0eWxlIHN0cmluZyBvciBhbm90aGVyIGBDb2xvcmAgaW5zdGFuY2UuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtnXSAtIFRoZSBncmVlbiBjb21wb25lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtiXSAtIFRoZSBibHVlIGNvbXBvbmVudC4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggciwgZywgYiApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzQ29sb3IgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSByZWQgY29tcG9uZW50LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAxCiAgICAJCSAqLwogICAgCQl0aGlzLnIgPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBncmVlbiBjb21wb25lbnQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMuZyA9IDE7CgogICAgCQkvKioKICAgIAkJICogVGhlIGJsdWUgY29tcG9uZW50LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAxCiAgICAJCSAqLwogICAgCQl0aGlzLmIgPSAxOwoKICAgIAkJcmV0dXJuIHRoaXMuc2V0KCByLCBnLCBiICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgY29sb3JzJ3MgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiB2YWx1ZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nfENvbG9yKX0gW3JdIC0gVGhlIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yLiBJZiBgZ2AgYW5kIGBiYCBhcmUKICAgIAkgKiBub3QgcHJvdmlkZWQsIGl0IGNhbiBiZSBoZXhhZGVjaW1hbCB0cmlwbGV0LCBhIENTUy1zdHlsZSBzdHJpbmcgb3IgYW5vdGhlciBgQ29sb3JgIGluc3RhbmNlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZ10gLSBUaGUgZ3JlZW4gY29tcG9uZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbYl0gLSBUaGUgYmx1ZSBjb21wb25lbnQuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJc2V0KCByLCBnLCBiICkgewoKICAgIAkJaWYgKCBnID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCS8vIHIgaXMgVEhSRUUuQ29sb3IsIGhleCBvciBzdHJpbmcKCiAgICAJCQljb25zdCB2YWx1ZSA9IHI7CgogICAgCQkJaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkgewoKICAgIAkJCQl0aGlzLmNvcHkoIHZhbHVlICk7CgogICAgCQkJfSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyApIHsKCiAgICAJCQkJdGhpcy5zZXRIZXgoIHZhbHVlICk7CgogICAgCQkJfSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHsKCiAgICAJCQkJdGhpcy5zZXRTdHlsZSggdmFsdWUgKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRoaXMuc2V0UkdCKCByLCBnLCBiICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBjb2xvcnMncyBjb21wb25lbnRzIHRvIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB2YWx1ZS4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlzZXRTY2FsYXIoIHNjYWxhciApIHsKCiAgICAJCXRoaXMuciA9IHNjYWxhcjsKICAgIAkJdGhpcy5nID0gc2NhbGFyOwogICAgCQl0aGlzLmIgPSBzY2FsYXI7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgY29sb3IgZnJvbSBhIGhleGFkZWNpbWFsIHZhbHVlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGhleCAtIFRoZSBoZXhhZGVjaW1hbCB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCXNldEhleCggaGV4LCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7CgogICAgCQloZXggPSBNYXRoLmZsb29yKCBoZXggKTsKCiAgICAJCXRoaXMuciA9ICggaGV4ID4+IDE2ICYgMjU1ICkgLyAyNTU7CiAgICAJCXRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTsKICAgIAkJdGhpcy5iID0gKCBoZXggJiAyNTUgKSAvIDI1NTsKCiAgICAJCUNvbG9yTWFuYWdlbWVudC5jb2xvclNwYWNlVG9Xb3JraW5nKCB0aGlzLCBjb2xvclNwYWNlICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgY29sb3IgZnJvbSBSR0IgdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHIgLSBSZWQgY2hhbm5lbCB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gZyAtIEdyZWVuIGNoYW5uZWwgdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGIgLSBCbHVlIGNoYW5uZWwgdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPUNvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJc2V0UkdCKCByLCBnLCBiLCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkgewoKICAgIAkJdGhpcy5yID0gcjsKICAgIAkJdGhpcy5nID0gZzsKICAgIAkJdGhpcy5iID0gYjsKCiAgICAJCUNvbG9yTWFuYWdlbWVudC5jb2xvclNwYWNlVG9Xb3JraW5nKCB0aGlzLCBjb2xvclNwYWNlICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoaXMgY29sb3IgZnJvbSBSR0IgdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGggLSBIdWUgdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHMgLSBTYXR1cmF0aW9uIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBsIC0gTGlnaHRuZXNzIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1Db2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCXNldEhTTCggaCwgcywgbCwgY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHsKCiAgICAJCS8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wCiAgICAJCWggPSBldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTsKICAgIAkJcyA9IGNsYW1wKCBzLCAwLCAxICk7CiAgICAJCWwgPSBjbGFtcCggbCwgMCwgMSApOwoKICAgIAkJaWYgKCBzID09PSAwICkgewoKICAgIAkJCXRoaXMuciA9IHRoaXMuZyA9IHRoaXMuYiA9IGw7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWNvbnN0IHAgPSBsIDw9IDAuNSA/IGwgKiAoIDEgKyBzICkgOiBsICsgcyAtICggbCAqIHMgKTsKICAgIAkJCWNvbnN0IHEgPSAoIDIgKiBsICkgLSBwOwoKICAgIAkJCXRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApOwogICAgCQkJdGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApOwogICAgCQkJdGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7CgogICAgCQl9CgogICAgCQlDb2xvck1hbmFnZW1lbnQuY29sb3JTcGFjZVRvV29ya2luZyggdGhpcywgY29sb3JTcGFjZSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGlzIGNvbG9yIGZyb20gYSBDU1Mtc3R5bGUgc3RyaW5nLiBGb3IgZXhhbXBsZSwgYHJnYigyNTAsIDAsMClgLAogICAgCSAqIGByZ2IoMTAwJSwgMCUsIDAlKWAsIGBoc2woMCwgMTAwJSwgNTAlKWAsIGAjZmYwMDAwYCwgYCNmMDBgLCBvciBgcmVkYCAoIG9yCiAgICAJICogYW55IFtYMTEgY29sb3IgbmFtZV17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWDExX2NvbG9yX25hbWVzI0NvbG9yX25hbWVfY2hhcnR9IC0KICAgIAkgKiBhbGwgMTQwIGNvbG9yIG5hbWVzIGFyZSBzdXBwb3J0ZWQpLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIC0gQ29sb3IgYXMgYSBDU1Mtc3R5bGUgc3RyaW5nLgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1TUkdCQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJc2V0U3R5bGUoIHN0eWxlLCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7CgogICAgCQlmdW5jdGlvbiBoYW5kbGVBbHBoYSggc3RyaW5nICkgewoKICAgIAkJCWlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSByZXR1cm47CgogICAgCQkJaWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBBbHBoYSBjb21wb25lbnQgb2YgJyArIHN0eWxlICsgJyB3aWxsIGJlIGlnbm9yZWQuJyApOwoKICAgIAkJCX0KCiAgICAJCX0KCgogICAgCQlsZXQgbTsKCiAgICAJCWlmICggbSA9IC9eKFx3KylcKChbXlwpXSopXCkvLmV4ZWMoIHN0eWxlICkgKSB7CgogICAgCQkJLy8gcmdiIC8gaHNsCgogICAgCQkJbGV0IGNvbG9yOwogICAgCQkJY29uc3QgbmFtZSA9IG1bIDEgXTsKICAgIAkJCWNvbnN0IGNvbXBvbmVudHMgPSBtWyAyIF07CgogICAgCQkJc3dpdGNoICggbmFtZSApIHsKCiAgICAJCQkJY2FzZSAncmdiJzoKICAgIAkJCQljYXNlICdyZ2JhJzoKCiAgICAJCQkJCWlmICggY29sb3IgPSAvXlxzKihcZCspXHMqLFxzKihcZCspXHMqLFxzKihcZCspXHMqKD86LFxzKihcZCpcLj9cZCspXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7CgogICAgCQkJCQkJLy8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpCgogICAgCQkJCQkJaGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTsKCiAgICAJCQkJCQlyZXR1cm4gdGhpcy5zZXRSR0IoCiAgICAJCQkJCQkJTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAxIF0sIDEwICkgKSAvIDI1NSwKICAgIAkJCQkJCQlNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1LAogICAgCQkJCQkJCU1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAyNTUsCiAgICAJCQkJCQkJY29sb3JTcGFjZQogICAgCQkJCQkJKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWlmICggY29sb3IgPSAvXlxzKihcZCspXCVccyosXHMqKFxkKylcJVxzKixccyooXGQrKVwlXHMqKD86LFxzKihcZCpcLj9cZCspXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7CgogICAgCQkJCQkJLy8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpCgogICAgCQkJCQkJaGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTsKCiAgICAJCQkJCQlyZXR1cm4gdGhpcy5zZXRSR0IoCiAgICAJCQkJCQkJTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAxIF0sIDEwICkgKSAvIDEwMCwKICAgIAkJCQkJCQlNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMTAwLAogICAgCQkJCQkJCU1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDAsCiAgICAJCQkJCQkJY29sb3JTcGFjZQogICAgCQkJCQkJKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlICdoc2wnOgogICAgCQkJCWNhc2UgJ2hzbGEnOgoKICAgIAkJCQkJaWYgKCBjb2xvciA9IC9eXHMqKFxkKlwuP1xkKylccyosXHMqKFxkKlwuP1xkKylcJVxzKixccyooXGQqXC4/XGQrKVwlXHMqKD86LFxzKihcZCpcLj9cZCspXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7CgogICAgCQkJCQkJLy8gaHNsKDEyMCw1MCUsNTAlKSBoc2xhKDEyMCw1MCUsNTAlLDAuNSkKCiAgICAJCQkJCQloYW5kbGVBbHBoYSggY29sb3JbIDQgXSApOwoKICAgIAkJCQkJCXJldHVybiB0aGlzLnNldEhTTCgKICAgIAkJCQkJCQlwYXJzZUZsb2F0KCBjb2xvclsgMSBdICkgLyAzNjAsCiAgICAJCQkJCQkJcGFyc2VGbG9hdCggY29sb3JbIDIgXSApIC8gMTAwLAogICAgCQkJCQkJCXBhcnNlRmxvYXQoIGNvbG9yWyAzIF0gKSAvIDEwMCwKICAgIAkJCQkJCQljb2xvclNwYWNlCiAgICAJCQkJCQkpOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJYnJlYWs7CgogICAgCQkJCWRlZmF1bHQ6CgogICAgCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciBtb2RlbCAnICsgc3R5bGUgKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgaWYgKCBtID0gL15cIyhbQS1GYS1mXGRdKykkLy5leGVjKCBzdHlsZSApICkgewoKICAgIAkJCS8vIGhleCBjb2xvcgoKICAgIAkJCWNvbnN0IGhleCA9IG1bIDEgXTsKICAgIAkJCWNvbnN0IHNpemUgPSBoZXgubGVuZ3RoOwoKICAgIAkJCWlmICggc2l6ZSA9PT0gMyApIHsKCiAgICAJCQkJLy8gI2ZmMAogICAgCQkJCXJldHVybiB0aGlzLnNldFJHQigKICAgIAkJCQkJcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDE1LAogICAgCQkJCQlwYXJzZUludCggaGV4LmNoYXJBdCggMSApLCAxNiApIC8gMTUsCiAgICAJCQkJCXBhcnNlSW50KCBoZXguY2hhckF0KCAyICksIDE2ICkgLyAxNSwKICAgIAkJCQkJY29sb3JTcGFjZQogICAgCQkJCSk7CgogICAgCQkJfSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHsKCiAgICAJCQkJLy8gI2ZmMDAwMAogICAgCQkJCXJldHVybiB0aGlzLnNldEhleCggcGFyc2VJbnQoIGhleCwgMTYgKSwgY29sb3JTcGFjZSApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBJbnZhbGlkIGhleCBjb2xvciAnICsgc3R5bGUgKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgaWYgKCBzdHlsZSAmJiBzdHlsZS5sZW5ndGggPiAwICkgewoKICAgIAkJCXJldHVybiB0aGlzLnNldENvbG9yTmFtZSggc3R5bGUsIGNvbG9yU3BhY2UgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBjb2xvciBmcm9tIGEgY29sb3IgbmFtZS4gRmFzdGVyIHRoYW4ge0BsaW5rIENvbG9yI3NldFN0eWxlfSBpZgogICAgCSAqIHlvdSBkb24ndCBuZWVkIHRoZSBvdGhlciBDU1Mtc3R5bGUgZm9ybWF0cy4KICAgIAkgKgogICAgCSAqIEZvciBjb252ZW5pZW5jZSwgdGhlIGxpc3Qgb2YgbmFtZXMgaXMgZXhwb3NlZCBpbiBgQ29sb3IuTkFNRVNgIGFzIGEgaGFzaC4KICAgIAkgKiBgYGBqcwogICAgCSAqIENvbG9yLk5BTUVTLmFsaWNlYmx1ZSAvLyByZXR1cm5zIDB4RjBGOEZGCiAgICAJICogYGBgCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gc3R5bGUgLSBUaGUgY29sb3IgbmFtZS4KICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCXNldENvbG9yTmFtZSggc3R5bGUsIGNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZSApIHsKCiAgICAJCS8vIGNvbG9yIGtleXdvcmRzCiAgICAJCWNvbnN0IGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZS50b0xvd2VyQ2FzZSgpIF07CgogICAgCQlpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCS8vIHJlZAogICAgCQkJdGhpcy5zZXRIZXgoIGhleCwgY29sb3JTcGFjZSApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQkvLyB1bmtub3duIGNvbG9yCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgY29sb3Igd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuciwgdGhpcy5nLCB0aGlzLmIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gY29sb3IgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJY29weSggY29sb3IgKSB7CgogICAgCQl0aGlzLnIgPSBjb2xvci5yOwogICAgCQl0aGlzLmcgPSBjb2xvci5nOwogICAgCQl0aGlzLmIgPSBjb2xvci5iOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSBnaXZlbiBjb2xvciBpbnRvIHRoaXMgY29sb3IsIGFuZCB0aGVuIGNvbnZlcnRzIHRoaXMgY29sb3IgZnJvbQogICAgCSAqIGBTUkdCQ29sb3JTcGFjZWAgdG8gYExpbmVhclNSR0JDb2xvclNwYWNlYC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvcHkvY29udmVydC4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAljb3B5U1JHQlRvTGluZWFyKCBjb2xvciApIHsKCiAgICAJCXRoaXMuciA9IFNSR0JUb0xpbmVhciggY29sb3IuciApOwogICAgCQl0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTsKICAgIAkJdGhpcy5iID0gU1JHQlRvTGluZWFyKCBjb2xvci5iICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIGdpdmVuIGNvbG9yIGludG8gdGhpcyBjb2xvciwgYW5kIHRoZW4gY29udmVydHMgdGhpcyBjb2xvciBmcm9tCiAgICAJICogYExpbmVhclNSR0JDb2xvclNwYWNlYCB0byBgU1JHQkNvbG9yU3BhY2VgLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gY29weS9jb252ZXJ0LgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCWNvcHlMaW5lYXJUb1NSR0IoIGNvbG9yICkgewoKICAgIAkJdGhpcy5yID0gTGluZWFyVG9TUkdCKCBjb2xvci5yICk7CiAgICAJCXRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApOwogICAgCQl0aGlzLmIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLmIgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbnZlcnRzIHRoaXMgY29sb3IgZnJvbSBgU1JHQkNvbG9yU3BhY2VgIHRvIGBMaW5lYXJTUkdCQ29sb3JTcGFjZWAuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAljb252ZXJ0U1JHQlRvTGluZWFyKCkgewoKICAgIAkJdGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb252ZXJ0cyB0aGlzIGNvbG9yIGZyb20gYExpbmVhclNSR0JDb2xvclNwYWNlYCB0byBgU1JHQkNvbG9yU3BhY2VgLgogICAgCSAqCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJY29udmVydExpbmVhclRvU1JHQigpIHsKCiAgICAJCXRoaXMuY29weUxpbmVhclRvU1JHQiggdGhpcyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgaGV4YWRlY2ltYWwgdmFsdWUgb2YgdGhpcyBjb2xvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1TUkdCQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGV4YWRlY2ltYWwgdmFsdWUuCiAgICAJICovCiAgICAJZ2V0SGV4KCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7CgogICAgCQlDb2xvck1hbmFnZW1lbnQud29ya2luZ1RvQ29sb3JTcGFjZSggX2NvbG9yLmNvcHkoIHRoaXMgKSwgY29sb3JTcGFjZSApOwoKICAgIAkJcmV0dXJuIE1hdGgucm91bmQoIGNsYW1wKCBfY29sb3IuciAqIDI1NSwgMCwgMjU1ICkgKSAqIDY1NTM2ICsgTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5nICogMjU1LCAwLCAyNTUgKSApICogMjU2ICsgTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5iICogMjU1LCAwLCAyNTUgKSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGhleGFkZWNpbWFsIHZhbHVlIG9mIHRoaXMgY29sb3IgYXMgYSBzdHJpbmcgKGZvciBleGFtcGxlLCAnRkZGRkZGJykuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleGFkZWNpbWFsIHZhbHVlIGFzIGEgc3RyaW5nLgogICAgCSAqLwogICAgCWdldEhleFN0cmluZyggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkgewoKICAgIAkJcmV0dXJuICggJzAwMDAwMCcgKyB0aGlzLmdldEhleCggY29sb3JTcGFjZSApLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC02ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29udmVydHMgdGhlIGNvbG9ycyBSR0IgdmFsdWVzIGludG8gdGhlIEhTTCBmb3JtYXQgYW5kIHN0b3JlcyB0aGVtIGludG8gdGhlCiAgICAJICogZ2l2ZW4gdGFyZ2V0IG9iamVjdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7e2g6bnVtYmVyLHM6bnVtYmVyLGw6bnVtYmVyfX0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPUNvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuCiAgICAJICogQHJldHVybiB7e2g6bnVtYmVyLHM6bnVtYmVyLGw6bnVtYmVyfX0gVGhlIEhTTCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCWdldEhTTCggdGFyZ2V0LCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkgewoKICAgIAkJLy8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjAKCiAgICAJCUNvbG9yTWFuYWdlbWVudC53b3JraW5nVG9Db2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7CgogICAgCQljb25zdCByID0gX2NvbG9yLnIsIGcgPSBfY29sb3IuZywgYiA9IF9jb2xvci5iOwoKICAgIAkJY29uc3QgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTsKICAgIAkJY29uc3QgbWluID0gTWF0aC5taW4oIHIsIGcsIGIgKTsKCiAgICAJCWxldCBodWUsIHNhdHVyYXRpb247CiAgICAJCWNvbnN0IGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7CgogICAgCQlpZiAoIG1pbiA9PT0gbWF4ICkgewoKICAgIAkJCWh1ZSA9IDA7CiAgICAJCQlzYXR1cmF0aW9uID0gMDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJY29uc3QgZGVsdGEgPSBtYXggLSBtaW47CgogICAgCQkJc2F0dXJhdGlvbiA9IGxpZ2h0bmVzcyA8PSAwLjUgPyBkZWx0YSAvICggbWF4ICsgbWluICkgOiBkZWx0YSAvICggMiAtIG1heCAtIG1pbiApOwoKICAgIAkJCXN3aXRjaCAoIG1heCApIHsKCiAgICAJCQkJY2FzZSByOiBodWUgPSAoIGcgLSBiICkgLyBkZWx0YSArICggZyA8IGIgPyA2IDogMCApOyBicmVhazsKICAgIAkJCQljYXNlIGc6IGh1ZSA9ICggYiAtIHIgKSAvIGRlbHRhICsgMjsgYnJlYWs7CiAgICAJCQkJY2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrOwoKICAgIAkJCX0KCiAgICAJCQlodWUgLz0gNjsKCiAgICAJCX0KCiAgICAJCXRhcmdldC5oID0gaHVlOwogICAgCQl0YXJnZXQucyA9IHNhdHVyYXRpb247CiAgICAJCXRhcmdldC5sID0gbGlnaHRuZXNzOwoKICAgIAkJcmV0dXJuIHRhcmdldDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBSR0IgdmFsdWVzIG9mIHRoaXMgY29sb3IgYW5kIHN0b3JlcyB0aGVtIGludG8gdGhlIGdpdmVuIHRhcmdldCBvYmplY3QuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0NvbG9yfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1Db2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBUaGUgUkdCIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJZ2V0UkdCKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgKSB7CgogICAgCQlDb2xvck1hbmFnZW1lbnQud29ya2luZ1RvQ29sb3JTcGFjZSggX2NvbG9yLmNvcHkoIHRoaXMgKSwgY29sb3JTcGFjZSApOwoKICAgIAkJdGFyZ2V0LnIgPSBfY29sb3IucjsKICAgIAkJdGFyZ2V0LmcgPSBfY29sb3IuZzsKICAgIAkJdGFyZ2V0LmIgPSBfY29sb3IuYjsKCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhpcyBjb2xvciBhcyBhIENTUyBzdHlsZSBzdHJpbmcuIEV4YW1wbGU6IGByZ2IoMjU1LDAsMClgLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPVNSR0JDb2xvclNwYWNlXSAtIFRoZSBjb2xvciBzcGFjZS4KICAgIAkgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBDU1MgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlnZXRTdHlsZSggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkgewoKICAgIAkJQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdUb0NvbG9yU3BhY2UoIF9jb2xvci5jb3B5KCB0aGlzICksIGNvbG9yU3BhY2UgKTsKCiAgICAJCWNvbnN0IHIgPSBfY29sb3IuciwgZyA9IF9jb2xvci5nLCBiID0gX2NvbG9yLmI7CgogICAgCQlpZiAoIGNvbG9yU3BhY2UgIT09IFNSR0JDb2xvclNwYWNlICkgewoKICAgIAkJCS8vIFJlcXVpcmVzIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgNCAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1jb2xvci00LykuCiAgICAJCQlyZXR1cm4gYGNvbG9yKCR7IGNvbG9yU3BhY2UgfSAkeyByLnRvRml4ZWQoIDMgKSB9ICR7IGcudG9GaXhlZCggMyApIH0gJHsgYi50b0ZpeGVkKCAzICkgfSlgOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIGByZ2IoJHsgTWF0aC5yb3VuZCggciAqIDI1NSApIH0sJHsgTWF0aC5yb3VuZCggZyAqIDI1NSApIH0sJHsgTWF0aC5yb3VuZCggYiAqIDI1NSApIH0pYDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiBIU0wgdmFsdWVzIHRvIHRoaXMgY29sb3IncyB2YWx1ZXMuCiAgICAJICogSW50ZXJuYWxseSwgdGhpcyBjb252ZXJ0cyB0aGUgY29sb3IncyBSR0IgdmFsdWVzIHRvIEhTTCwgYWRkcyBIU0wKICAgIAkgKiBhbmQgdGhlbiBjb252ZXJ0cyB0aGUgY29sb3IgYmFjayB0byBSR0IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaCAtIEh1ZSB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gcyAtIFNhdHVyYXRpb24gdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGwgLSBMaWdodG5lc3MgdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJb2Zmc2V0SFNMKCBoLCBzLCBsICkgewoKICAgIAkJdGhpcy5nZXRIU0woIF9oc2xBICk7CgogICAgCQlyZXR1cm4gdGhpcy5zZXRIU0woIF9oc2xBLmggKyBoLCBfaHNsQS5zICsgcywgX2hzbEEubCArIGwgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvciB0byB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gYWRkLgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCWFkZCggY29sb3IgKSB7CgogICAgCQl0aGlzLnIgKz0gY29sb3IucjsKICAgIAkJdGhpcy5nICs9IGNvbG9yLmc7CiAgICAJCXRoaXMuYiArPSBjb2xvci5iOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQWRkcyB0aGUgUkdCIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gY29sb3JzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IxIC0gVGhlIGZpcnN0IGNvbG9yLgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yMiAtIFRoZSBzZWNvbmQgY29sb3IuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJYWRkQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiApIHsKCiAgICAJCXRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7CiAgICAJCXRoaXMuZyA9IGNvbG9yMS5nICsgY29sb3IyLmc7CiAgICAJCXRoaXMuYiA9IGNvbG9yMS5iICsgY29sb3IyLmI7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgdG8gdGhlIFJHQiB2YWx1ZXMgb2YgdGhpcyBjb2xvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhciB0byBhZGQuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJYWRkU2NhbGFyKCBzICkgewoKICAgIAkJdGhpcy5yICs9IHM7CiAgICAJCXRoaXMuZyArPSBzOwogICAgCQl0aGlzLmIgKz0gczsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFN1YnRyYWN0cyB0aGUgUkdCIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gY29sb3IgZnJvbSB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gc3VidHJhY3QuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJc3ViKCBjb2xvciApIHsKCiAgICAJCXRoaXMuciA9IE1hdGgubWF4KCAwLCB0aGlzLnIgLSBjb2xvci5yICk7CiAgICAJCXRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7CiAgICAJCXRoaXMuYiA9IE1hdGgubWF4KCAwLCB0aGlzLmIgLSBjb2xvci5iICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBNdWx0aXBsaWVzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvciB3aXRoIHRoZSBSR0IgdmFsdWVzIG9mIHRoaXMgY29sb3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBtdWx0aXBseS4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAltdWx0aXBseSggY29sb3IgKSB7CgogICAgCQl0aGlzLnIgKj0gY29sb3IucjsKICAgIAkJdGhpcy5nICo9IGNvbG9yLmc7CiAgICAJCXRoaXMuYiAqPSBjb2xvci5iOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIHdpdGggdGhlIFJHQiB2YWx1ZXMgb2YgdGhpcyBjb2xvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhciB0byBtdWx0aXBseS4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAltdWx0aXBseVNjYWxhciggcyApIHsKCiAgICAJCXRoaXMuciAqPSBzOwogICAgCQl0aGlzLmcgKj0gczsKICAgIAkJdGhpcy5iICo9IHM7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBMaW5lYXJseSBpbnRlcnBvbGF0ZXMgdGhpcyBjb2xvcidzIFJHQiB2YWx1ZXMgdG93YXJkIHRoZSBSR0IgdmFsdWVzIG9mIHRoZQogICAgCSAqIGdpdmVuIGNvbG9yLiBUaGUgYWxwaGEgYXJndW1lbnQgY2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlIHJhdGlvIGJldHdlZW4KICAgIAkgKiB0aGUgdHdvIGNvbG9ycywgd2hlcmUgYDAuMGAgaXMgdGhpcyBjb2xvciBhbmQgYDEuMGAgaXMgdGhlIGZpcnN0IGFyZ3VtZW50LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gY29udmVyZ2Ugb24uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLDFdYC4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlsZXJwKCBjb2xvciwgYWxwaGEgKSB7CgogICAgCQl0aGlzLnIgKz0gKCBjb2xvci5yIC0gdGhpcy5yICkgKiBhbHBoYTsKICAgIAkJdGhpcy5nICs9ICggY29sb3IuZyAtIHRoaXMuZyApICogYWxwaGE7CiAgICAJCXRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIGNvbG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS4KICAgIAkgKiBUaGUgYWxwaGEgYXJndW1lbnQgY2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlIHJhdGlvIGJldHdlZW4gdGhlIHR3byBjb2xvcnMsIHdoZXJlIGAwLjBgCiAgICAJICogaXMgdGhlIGZpcnN0IGFuZCBgMS4wYCBpcyB0aGUgc2Vjb25kIGNvbG9yLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtDb2xvcn0gY29sb3IxIC0gVGhlIGZpcnN0IGNvbG9yLgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yMiAtIFRoZSBzZWNvbmQgY29sb3IuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLDFdYC4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlsZXJwQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiwgYWxwaGEgKSB7CgogICAgCQl0aGlzLnIgPSBjb2xvcjEuciArICggY29sb3IyLnIgLSBjb2xvcjEuciApICogYWxwaGE7CiAgICAJCXRoaXMuZyA9IGNvbG9yMS5nICsgKCBjb2xvcjIuZyAtIGNvbG9yMS5nICkgKiBhbHBoYTsKICAgIAkJdGhpcy5iID0gY29sb3IxLmIgKyAoIGNvbG9yMi5iIC0gY29sb3IxLmIgKSAqIGFscGhhOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTGluZWFybHkgaW50ZXJwb2xhdGVzIHRoaXMgY29sb3IncyBIU0wgdmFsdWVzIHRvd2FyZCB0aGUgSFNMIHZhbHVlcyBvZiB0aGUKICAgIAkgKiBnaXZlbiBjb2xvci4gSXQgZGlmZmVycyBmcm9tIHtAbGluayBDb2xvciNsZXJwfSBieSBub3QgaW50ZXJwb2xhdGluZyBzdHJhaWdodAogICAgCSAqIGZyb20gb25lIGNvbG9yIHRvIHRoZSBvdGhlciwgYnV0IGluc3RlYWQgZ29pbmcgdGhyb3VnaCBhbGwgdGhlIGh1ZXMgaW4gYmV0d2VlbgogICAgCSAqIHRob3NlIHR3byBjb2xvcnMuIFRoZSBhbHBoYSBhcmd1bWVudCBjYW4gYmUgdGhvdWdodCBvZiBhcyB0aGUgcmF0aW8gYmV0d2VlbgogICAgCSAqIHRoZSB0d28gY29sb3JzLCB3aGVyZSAwLjAgaXMgdGhpcyBjb2xvciBhbmQgMS4wIGlzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvbnZlcmdlIG9uLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwxXWAuCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJbGVycEhTTCggY29sb3IsIGFscGhhICkgewoKICAgIAkJdGhpcy5nZXRIU0woIF9oc2xBICk7CiAgICAJCWNvbG9yLmdldEhTTCggX2hzbEIgKTsKCiAgICAJCWNvbnN0IGggPSBsZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApOwogICAgCQljb25zdCBzID0gbGVycCggX2hzbEEucywgX2hzbEIucywgYWxwaGEgKTsKICAgIAkJY29uc3QgbCA9IGxlcnAoIF9oc2xBLmwsIF9oc2xCLmwsIGFscGhhICk7CgogICAgCQl0aGlzLnNldEhTTCggaCwgcywgbCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgY29sb3IncyBSR0IgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiAzRCB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlzZXRGcm9tVmVjdG9yMyggdiApIHsKCiAgICAJCXRoaXMuciA9IHYueDsKICAgIAkJdGhpcy5nID0gdi55OwogICAgCQl0aGlzLmIgPSB2Lno7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUcmFuc2Zvcm1zIHRoaXMgY29sb3Igd2l0aCB0aGUgZ2l2ZW4gM3gzIG1hdHJpeC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBtYXRyaXguCiAgICAJICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXgzKCBtICkgewoKICAgIAkJY29uc3QgciA9IHRoaXMuciwgZyA9IHRoaXMuZywgYiA9IHRoaXMuYjsKICAgIAkJY29uc3QgZSA9IG0uZWxlbWVudHM7CgogICAgCQl0aGlzLnIgPSBlWyAwIF0gKiByICsgZVsgMyBdICogZyArIGVbIDYgXSAqIGI7CiAgICAJCXRoaXMuZyA9IGVbIDEgXSAqIHIgKyBlWyA0IF0gKiBnICsgZVsgNyBdICogYjsKICAgIAkJdGhpcy5iID0gZVsgMiBdICogciArIGVbIDUgXSAqIGcgKyBlWyA4IF0gKiBiOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBjb2xvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0NvbG9yfSBjIC0gVGhlIGNvbG9yIHRvIHRlc3QgZm9yIGVxdWFsaXR5LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBib3VuZGluZyBjb2xvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICovCiAgICAJZXF1YWxzKCBjICkgewoKICAgIAkJcmV0dXJuICggYy5yID09PSB0aGlzLnIgKSAmJiAoIGMuZyA9PT0gdGhpcy5nICkgJiYgKCBjLmIgPT09IHRoaXMuYiApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhpcyBjb2xvcidzIFJHQiBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIGFycmF5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIFJHQiB2YWx1ZXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBUaGUgb2Zmc2V0IGludG8gdGhlIGFycmF5LgogICAgCSAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLgogICAgCSAqLwogICAgCWZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7CgogICAgCQl0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07CiAgICAJCXRoaXMuZyA9IGFycmF5WyBvZmZzZXQgKyAxIF07CiAgICAJCXRoaXMuYiA9IGFycmF5WyBvZmZzZXQgKyAyIF07CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBXcml0ZXMgdGhlIFJHQiBjb21wb25lbnRzIG9mIHRoaXMgY29sb3IgdG8gdGhlIGdpdmVuIGFycmF5LiBJZiBubyBhcnJheSBpcyBwcm92aWRlZCwKICAgIAkgKiB0aGUgbWV0aG9kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFthcnJheT1bXV0gLSBUaGUgdGFyZ2V0IGFycmF5IGhvbGRpbmcgdGhlIGNvbG9yIGNvbXBvbmVudHMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuCiAgICAJICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGNvbG9yIGNvbXBvbmVudHMuCiAgICAJICovCiAgICAJdG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHsKCiAgICAJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMucjsKICAgIAkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuZzsKICAgIAkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuYjsKCiAgICAJCXJldHVybiBhcnJheTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgY29sb3IgZnJvbSB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSBob2xkaW5nIGNvbG9yIGRhdGEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGF0dHJpYnV0ZS4KICAgIAkgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci4KICAgIAkgKi8KICAgIAlmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkgewoKICAgIAkJdGhpcy5yID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7CiAgICAJCXRoaXMuZyA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApOwogICAgCQl0aGlzLmIgPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFRoaXMgbWV0aG9kcyBkZWZpbmVzIHRoZSBzZXJpYWxpemF0aW9uIHJlc3VsdCBvZiB0aGlzIGNsYXNzLiBSZXR1cm5zIHRoZSBjb2xvcgogICAgCSAqIGFzIGEgaGV4YWRlY2ltYWwgdmFsdWUuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoZXhhZGVjaW1hbCB2YWx1ZS4KICAgIAkgKi8KICAgIAl0b0pTT04oKSB7CgogICAgCQlyZXR1cm4gdGhpcy5nZXRIZXgoKTsKCiAgICAJfQoKICAgIAkqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHsKCiAgICAJCXlpZWxkIHRoaXMucjsKICAgIAkJeWllbGQgdGhpcy5nOwogICAgCQl5aWVsZCB0aGlzLmI7CgogICAgCX0KCiAgICB9CgogICAgY29uc3QgX2NvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTsKCiAgICAvKioKICAgICAqIEEgZGljdGlvbmFyeSB3aXRoIFgxMSBjb2xvciBuYW1lcy4KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgbXVsdGlwbGUgd29yZHMgc3VjaCBhcyBEYXJrIE9yYW5nZSBiZWNvbWUgdGhlIHN0cmluZyAnZGFya29yYW5nZScuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgQ29sb3IuTkFNRVMgPSBfY29sb3JLZXl3b3JkczsKCiAgICBsZXQgX21hdGVyaWFsSWQgPSAwOwoKICAgIC8qKgogICAgICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgbWF0ZXJpYWxzLgogICAgICoKICAgICAqIE1hdGVyaWFscyBkZWZpbmUgdGhlIGFwcGVhcmFuY2Ugb2YgcmVuZGVyYWJsZSAzRCBvYmplY3RzLgogICAgICoKICAgICAqIEBhYnN0cmFjdAogICAgICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlcgogICAgICovCiAgICBjbGFzcyBNYXRlcmlhbCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgbWF0ZXJpYWwuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNNYXRlcmlhbCA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhlIElEIG9mIHRoZSBtYXRlcmlhbC4KICAgIAkJICoKICAgIAkJICogQG5hbWUgTWF0ZXJpYWwjaWQKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqLwogICAgCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9tYXRlcmlhbElkICsrIH0gKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgVVVJRCBvZiB0aGUgbWF0ZXJpYWwuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtzdHJpbmd9CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKi8KICAgIAkJdGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7CgogICAgCQkvKioKICAgIAkJICogVGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5uYW1lID0gJyc7CgogICAgCQkvKioKICAgIAkJICogVGhlIHR5cGUgcHJvcGVydHkgaXMgdXNlZCBmb3IgZGV0ZWN0aW5nIHRoZSBvYmplY3QgdHlwZQogICAgCQkgKiBpbiBjb250ZXh0IG9mIHNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemF0aW9uLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCXRoaXMudHlwZSA9ICdNYXRlcmlhbCc7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB0aGUgYmxlbmRpbmcgdHlwZSBvZiB0aGUgbWF0ZXJpYWwuCiAgICAJCSAqCiAgICAJCSAqIEl0IG11c3QgYmUgc2V0IHRvIGBDdXN0b21CbGVuZGluZ2AgaWYgY3VzdG9tIGJsZW5kaW5nIHByb3BlcnRpZXMgbGlrZQogICAgCQkgKiB7QGxpbmsgTWF0ZXJpYWwjYmxlbmRTcmN9LCB7QGxpbmsgTWF0ZXJpYWwjYmxlbmREc3R9IG9yIHtAbGluayBNYXRlcmlhbCNibGVuZEVxdWF0aW9ufQogICAgCQkgKiBzaG91bGQgaGF2ZSBhbnkgZWZmZWN0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KE5vQmxlbmRpbmd8Tm9ybWFsQmxlbmRpbmd8QWRkaXRpdmVCbGVuZGluZ3xTdWJ0cmFjdGl2ZUJsZW5kaW5nfE11bHRpcGx5QmxlbmRpbmd8Q3VzdG9tQmxlbmRpbmcpfQogICAgCQkgKiBAZGVmYXVsdCBOb3JtYWxCbGVuZGluZwogICAgCQkgKi8KICAgIAkJdGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgd2hpY2ggc2lkZSBvZiBmYWNlcyB3aWxsIGJlIHJlbmRlcmVkIC0gZnJvbnQsIGJhY2sgb3IgYm90aC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeyhGcm9udFNpZGV8QmFja1NpZGV8RG91YmxlU2lkZSl9CiAgICAJCSAqIEBkZWZhdWx0IEZyb250U2lkZQogICAgCQkgKi8KICAgIAkJdGhpcy5zaWRlID0gRnJvbnRTaWRlOwoKICAgIAkJLyoqCiAgICAJCSAqIElmIHNldCB0byBgdHJ1ZWAsIHZlcnRleCBjb2xvcnMgc2hvdWxkIGJlIHVzZWQuCiAgICAJCSAqCiAgICAJCSAqIFRoZSBlbmdpbmUgc3VwcG9ydHMgUkdCIGFuZCBSR0JBIHZlcnRleCBjb2xvcnMgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYSB0aHJlZSAoUkdCKSBvcgogICAgCQkgKiBmb3VyIChSR0JBKSBjb21wb25lbnQgY29sb3IgYnVmZmVyIGF0dHJpYnV0ZSBpcyB1c2VkLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMudmVydGV4Q29sb3JzID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyBob3cgdHJhbnNwYXJlbnQgdGhlIG1hdGVyaWFsIGlzLgogICAgCQkgKiBBIHZhbHVlIG9mIGAwLjBgIGluZGljYXRlcyBmdWxseSB0cmFuc3BhcmVudCwgYDEuMGAgaXMgZnVsbHkgb3BhcXVlLgogICAgCQkgKgogICAgCQkgKiBJZiB0aGUge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBpcyBub3Qgc2V0IHRvIGB0cnVlYCwKICAgIAkJICogdGhlIG1hdGVyaWFsIHdpbGwgcmVtYWluIGZ1bGx5IG9wYXF1ZSBhbmQgdGhpcyB2YWx1ZSB3aWxsIG9ubHkgYWZmZWN0IGl0cyBjb2xvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5vcGFjaXR5ID0gMTsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHdoZXRoZXIgdGhpcyBtYXRlcmlhbCBpcyB0cmFuc3BhcmVudC4gVGhpcyBoYXMgYW4gZWZmZWN0IG9uCiAgICAJCSAqIHJlbmRlcmluZyBhcyB0cmFuc3BhcmVudCBvYmplY3RzIG5lZWQgc3BlY2lhbCB0cmVhdG1lbnQgYW5kIGFyZSByZW5kZXJlZAogICAgCQkgKiBhZnRlciBub24tdHJhbnNwYXJlbnQgb2JqZWN0cy4KICAgIAkJICoKICAgIAkJICogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIGV4dGVudCB0byB3aGljaCB0aGUgbWF0ZXJpYWwgaXMgdHJhbnNwYXJlbnQgaXMKICAgIAkJICogY29udHJvbGxlZCBieSB7QGxpbmsgTWF0ZXJpYWwjb3BhY2l0eX0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy50cmFuc3BhcmVudCA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIEVuYWJsZXMgYWxwaGEgaGFzaGVkIHRyYW5zcGFyZW5jeSwgYW4gYWx0ZXJuYXRpdmUgdG8ge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvcgogICAgCQkgKiB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIG1hdGVyaWFsIHdpbGwgbm90IGJlIHJlbmRlcmVkIGlmIG9wYWNpdHkgaXMgbG93ZXIgdGhhbgogICAgCQkgKiBhIHJhbmRvbSB0aHJlc2hvbGQuIFJhbmRvbWl6YXRpb24gaW50cm9kdWNlcyBzb21lIGdyYWluIG9yIG5vaXNlLCBidXQgYXBwcm94aW1hdGVzIGFscGhhCiAgICAJCSAqIGJsZW5kaW5nIHdpdGhvdXQgdGhlIGFzc29jaWF0ZWQgcHJvYmxlbXMgb2Ygc29ydGluZy4gVXNpbmcgVEFBIGNhbiByZWR1Y2UgdGhlIHJlc3VsdGluZyBub2lzZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmFscGhhSGFzaCA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgdGhlIGJsZW5kaW5nIHNvdXJjZSBmYWN0b3IuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX0KICAgIAkJICogQGRlZmF1bHQgU3JjQWxwaGFGYWN0b3IKICAgIAkJICovCiAgICAJCXRoaXMuYmxlbmRTcmMgPSBTcmNBbHBoYUZhY3RvcjsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBibGVuZGluZyBkZXN0aW5hdGlvbiBmYWN0b3IuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX0KICAgIAkJICogQGRlZmF1bHQgT25lTWludXNTcmNBbHBoYUZhY3RvcgogICAgCQkgKi8KICAgIAkJdGhpcy5ibGVuZERzdCA9IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3I7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB0aGUgYmxlbmRpbmcgZXF1YXRpb24uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoQWRkRXF1YXRpb258U3VidHJhY3RFcXVhdGlvbnxSZXZlcnNlU3VidHJhY3RFcXVhdGlvbnxNaW5FcXVhdGlvbnxNYXhFcXVhdGlvbil9CiAgICAJCSAqIEBkZWZhdWx0IEFkZEVxdWF0aW9uCiAgICAJCSAqLwogICAgCQl0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBibGVuZGluZyBzb3VyY2UgYWxwaGEgZmFjdG9yLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7PyhaZXJvRmFjdG9yfE9uZUZhY3RvcnxTcmNDb2xvckZhY3RvcnxPbmVNaW51c1NyY0NvbG9yRmFjdG9yfFNyY0FscGhhRmFjdG9yfE9uZU1pbnVzU3JjQWxwaGFGYWN0b3J8RHN0QWxwaGFGYWN0b3J8T25lTWludXNEc3RBbHBoYUZhY3RvcnxEc3RDb2xvckZhY3RvcnxPbmVNaW51c0RzdENvbG9yRmFjdG9yfFNyY0FscGhhU2F0dXJhdGVGYWN0b3J8Q29uc3RhbnRDb2xvckZhY3RvcnxPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3J8Q29uc3RhbnRBbHBoYUZhY3RvcnxPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IpfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmJsZW5kU3JjQWxwaGEgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgdGhlIGJsZW5kaW5nIGRlc3RpbmF0aW9uIGFscGhhIGZhY3Rvci4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez8oWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBibGVuZGluZyBlcXVhdGlvbiBvZiB0aGUgYWxwaGEgY2hhbm5lbC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez8oQWRkRXF1YXRpb258U3VidHJhY3RFcXVhdGlvbnxSZXZlcnNlU3VidHJhY3RFcXVhdGlvbnxNaW5FcXVhdGlvbnxNYXhFcXVhdGlvbil9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBSZXByZXNlbnRzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBjb25zdGFudCBibGVuZCBjb2xvci4KICAgIAkJICoKICAgIAkJICogVGhpcyBwcm9wZXJ0eSBoYXMgb25seSBhbiBlZmZlY3Qgd2hlbiB1c2luZyBjdXN0b20gYmxlbmRpbmcgd2l0aCBgQ29uc3RhbnRDb2xvcmAgb3IgYE9uZU1pbnVzQ29uc3RhbnRDb2xvcmAuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtDb2xvcn0KICAgIAkJICogQGRlZmF1bHQgKDAsMCwwKQogICAgCQkgKi8KICAgIAkJdGhpcy5ibGVuZENvbG9yID0gbmV3IENvbG9yKCAwLCAwLCAwICk7CgogICAgCQkvKioKICAgIAkJICogUmVwcmVzZW50cyB0aGUgYWxwaGEgdmFsdWUgb2YgdGhlIGNvbnN0YW50IGJsZW5kIGNvbG9yLgogICAgCQkgKgogICAgCQkgKiBUaGlzIHByb3BlcnR5IGhhcyBvbmx5IGFuIGVmZmVjdCB3aGVuIHVzaW5nIGN1c3RvbSBibGVuZGluZyB3aXRoIGBDb25zdGFudEFscGhhYCBvciBgT25lTWludXNDb25zdGFudEFscGhhYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy5ibGVuZEFscGhhID0gMDsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBkZXB0aCBmdW5jdGlvbi4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeyhOZXZlckRlcHRofEFsd2F5c0RlcHRofExlc3NEZXB0aHxMZXNzRXF1YWxEZXB0aHxFcXVhbERlcHRofEdyZWF0ZXJFcXVhbERlcHRofEdyZWF0ZXJEZXB0aHxOb3RFcXVhbERlcHRoKX0KICAgIAkJICogQGRlZmF1bHQgTGVzc0VxdWFsRGVwdGgKICAgIAkJICovCiAgICAJCXRoaXMuZGVwdGhGdW5jID0gTGVzc0VxdWFsRGVwdGg7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byBoYXZlIGRlcHRoIHRlc3QgZW5hYmxlZCB3aGVuIHJlbmRlcmluZyB0aGlzIG1hdGVyaWFsLgogICAgCQkgKiBXaGVuIHRoZSBkZXB0aCB0ZXN0IGlzIGRpc2FibGVkLCB0aGUgZGVwdGggd3JpdGUgd2lsbCBhbHNvIGJlIGltcGxpY2l0bHkgZGlzYWJsZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmRlcHRoVGVzdCA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciByZW5kZXJpbmcgdGhpcyBtYXRlcmlhbCBoYXMgYW55IGVmZmVjdCBvbiB0aGUgZGVwdGggYnVmZmVyLgogICAgCQkgKgogICAgCQkgKiBXaGVuIGRyYXdpbmcgMkQgb3ZlcmxheXMgaXQgY2FuIGJlIHVzZWZ1bCB0byBkaXNhYmxlIHRoZSBkZXB0aCB3cml0aW5nIGluCiAgICAJCSAqIG9yZGVyIHRvIGxheWVyIHNldmVyYWwgdGhpbmdzIHRvZ2V0aGVyIHdpdGhvdXQgY3JlYXRpbmcgei1pbmRleCBhcnRpZmFjdHMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmRlcHRoV3JpdGUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBiaXQgbWFzayB0byB1c2Ugd2hlbiB3cml0aW5nIHRvIHRoZSBzdGVuY2lsIGJ1ZmZlci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMHhmZgogICAgCQkgKi8KICAgIAkJdGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gMHhmZjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgc3RlbmNpbCBjb21wYXJpc29uIGZ1bmN0aW9uIHRvIHVzZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge05ldmVyU3RlbmNpbEZ1bmN8TGVzc1N0ZW5jaWxGdW5jfEVxdWFsU3RlbmNpbEZ1bmN8TGVzc0VxdWFsU3RlbmNpbEZ1bmN8R3JlYXRlclN0ZW5jaWxGdW5jfE5vdEVxdWFsU3RlbmNpbEZ1bmN8R3JlYXRlckVxdWFsU3RlbmNpbEZ1bmN8QWx3YXlzU3RlbmNpbEZ1bmN9CiAgICAJCSAqIEBkZWZhdWx0IEFsd2F5c1N0ZW5jaWxGdW5jCiAgICAJCSAqLwogICAgCQl0aGlzLnN0ZW5jaWxGdW5jID0gQWx3YXlzU3RlbmNpbEZ1bmM7CgogICAgCQkvKioKICAgIAkJICogVGhlIHZhbHVlIHRvIHVzZSB3aGVuIHBlcmZvcm1pbmcgc3RlbmNpbCBjb21wYXJpc29ucyBvciBzdGVuY2lsIG9wZXJhdGlvbnMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuc3RlbmNpbFJlZiA9IDA7CgogICAgCQkvKioKICAgIAkJICogVGhlIGJpdCBtYXNrIHRvIHVzZSB3aGVuIGNvbXBhcmluZyBhZ2FpbnN0IHRoZSBzdGVuY2lsIGJ1ZmZlci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMHhmZgogICAgCQkgKi8KICAgIAkJdGhpcy5zdGVuY2lsRnVuY01hc2sgPSAweGZmOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoaWNoIHN0ZW5jaWwgb3BlcmF0aW9uIHRvIHBlcmZvcm0gd2hlbiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtaZXJvU3RlbmNpbE9wfEtlZXBTdGVuY2lsT3B8UmVwbGFjZVN0ZW5jaWxPcHxJbmNyZW1lbnRTdGVuY2lsT3B8RGVjcmVtZW50U3RlbmNpbE9wfEluY3JlbWVudFdyYXBTdGVuY2lsT3B8RGVjcmVtZW50V3JhcFN0ZW5jaWxPcHxJbnZlcnRTdGVuY2lsT3B9CiAgICAJCSAqIEBkZWZhdWx0IEtlZXBTdGVuY2lsT3AKICAgIAkJICovCiAgICAJCXRoaXMuc3RlbmNpbEZhaWwgPSBLZWVwU3RlbmNpbE9wOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoaWNoIHN0ZW5jaWwgb3BlcmF0aW9uIHRvIHBlcmZvcm0gd2hlbiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbiByZXR1cm5zCiAgICAJCSAqIGB0cnVlYCBidXQgdGhlIGRlcHRoIHRlc3QgZmFpbHMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtaZXJvU3RlbmNpbE9wfEtlZXBTdGVuY2lsT3B8UmVwbGFjZVN0ZW5jaWxPcHxJbmNyZW1lbnRTdGVuY2lsT3B8RGVjcmVtZW50U3RlbmNpbE9wfEluY3JlbWVudFdyYXBTdGVuY2lsT3B8RGVjcmVtZW50V3JhcFN0ZW5jaWxPcHxJbnZlcnRTdGVuY2lsT3B9CiAgICAJCSAqIEBkZWZhdWx0IEtlZXBTdGVuY2lsT3AKICAgIAkJICovCiAgICAJCXRoaXMuc3RlbmNpbFpGYWlsID0gS2VlcFN0ZW5jaWxPcDsKCiAgICAJCS8qKgogICAgCQkgKiBXaGljaCBzdGVuY2lsIG9wZXJhdGlvbiB0byBwZXJmb3JtIHdoZW4gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb24gcmV0dXJucwogICAgCQkgKiBgdHJ1ZWAgYW5kIHRoZSBkZXB0aCB0ZXN0IHBhc3Nlcy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1plcm9TdGVuY2lsT3B8S2VlcFN0ZW5jaWxPcHxSZXBsYWNlU3RlbmNpbE9wfEluY3JlbWVudFN0ZW5jaWxPcHxEZWNyZW1lbnRTdGVuY2lsT3B8SW5jcmVtZW50V3JhcFN0ZW5jaWxPcHxEZWNyZW1lbnRXcmFwU3RlbmNpbE9wfEludmVydFN0ZW5jaWxPcH0KICAgIAkJICogQGRlZmF1bHQgS2VlcFN0ZW5jaWxPcAogICAgCQkgKi8KICAgIAkJdGhpcy5zdGVuY2lsWlBhc3MgPSBLZWVwU3RlbmNpbE9wOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgc3RlbmNpbCBvcGVyYXRpb25zIGFyZSBwZXJmb3JtZWQgYWdhaW5zdCB0aGUgc3RlbmNpbCBidWZmZXIuIEluCiAgICAJCSAqIG9yZGVyIHRvIHBlcmZvcm0gd3JpdGVzIG9yIGNvbXBhcmlzb25zIGFnYWluc3QgdGhlIHN0ZW5jaWwgYnVmZmVyIHRoaXMKICAgIAkJICogdmFsdWUgbXVzdCBiZSBgdHJ1ZWAuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5zdGVuY2lsV3JpdGUgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBVc2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzIHNwZWNpZmllZCBhcyBUSFJFRS5QbGFuZSBvYmplY3RzIGluIHdvcmxkCiAgICAJCSAqIHNwYWNlLiBUaGVzZSBwbGFuZXMgYXBwbHkgdG8gdGhlIG9iamVjdHMgdGhpcyBtYXRlcmlhbCBpcyBhdHRhY2hlZCB0by4KICAgIAkJICogUG9pbnRzIGluIHNwYWNlIHdob3NlIHNpZ25lZCBkaXN0YW5jZSB0byB0aGUgcGxhbmUgaXMgbmVnYXRpdmUgYXJlIGNsaXBwZWQKICAgIAkJICogKG5vdCByZW5kZXJlZCkuIFRoaXMgcmVxdWlyZXMge0BsaW5rIFdlYkdMUmVuZGVyZXIjbG9jYWxDbGlwcGluZ0VuYWJsZWR9IHRvCiAgICAJCSAqIGJlIGB0cnVlYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9BcnJheTxQbGFuZT59CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuY2xpcHBpbmdQbGFuZXMgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIENoYW5nZXMgdGhlIGJlaGF2aW9yIG9mIGNsaXBwaW5nIHBsYW5lcyBzbyB0aGF0IG9ubHkgdGhlaXIgaW50ZXJzZWN0aW9uIGlzCiAgICAJCSAqIGNsaXBwZWQsIHJhdGhlciB0aGFuIHRoZWlyIHVuaW9uLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuY2xpcEludGVyc2VjdGlvbiA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgd2hldGhlciB0byBjbGlwIHNoYWRvd3MgYWNjb3JkaW5nIHRvIHRoZSBjbGlwcGluZyBwbGFuZXMgc3BlY2lmaWVkCiAgICAJCSAqIG9uIHRoaXMgbWF0ZXJpYWwuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5jbGlwU2hhZG93cyA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgd2hpY2ggc2lkZSBvZiBmYWNlcyBjYXN0IHNoYWRvd3MuIElmIGBudWxsYCwgdGhlIHNpZGUgY2FzdGluZyBzaGFkb3dzCiAgICAJCSAqIGlzIGRldGVybWluZWQgYXMgZm9sbG93czoKICAgIAkJICoKICAgIAkJICogLSBXaGVuIHtAbGluayBNYXRlcmlhbCNzaWRlfSBpcyBzZXQgdG8gYEZyb250U2lkZWAsIHRoZSBiYWNrIHNpZGUgY2FzdCBzaGFkb3dzLgogICAgCQkgKiAtIFdoZW4ge0BsaW5rIE1hdGVyaWFsI3NpZGV9IGlzIHNldCB0byBgQmFja1NpZGVgLCB0aGUgZnJvbnQgc2lkZSBjYXN0IHNoYWRvd3MuCiAgICAJCSAqIC0gV2hlbiB7QGxpbmsgTWF0ZXJpYWwjc2lkZX0gaXMgc2V0IHRvIGBEb3VibGVTaWRlYCwgYm90aCBzaWRlcyBjYXN0IHNoYWRvd3MuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/KEZyb250U2lkZXxCYWNrU2lkZXxEb3VibGVTaWRlKX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5zaGFkb3dTaWRlID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIHJlbmRlciB0aGUgbWF0ZXJpYWwncyBjb2xvci4KICAgIAkJICoKICAgIAkJICogVGhpcyBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtAbGluayBPYmplY3QzRCNyZW5kZXJPZGVyfSB0byBjcmVhdGUgaW52aXNpYmxlCiAgICAJCSAqIG9iamVjdHMgdGhhdCBvY2NsdWRlIG90aGVyIG9iamVjdHMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmNvbG9yV3JpdGUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIE92ZXJyaWRlIHRoZSByZW5kZXJlcidzIGRlZmF1bHQgcHJlY2lzaW9uIGZvciB0aGlzIG1hdGVyaWFsLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7PygnaGlnaHAnfCdtZWRpdW1wJ3wnbG93cCcpfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLnByZWNpc2lvbiA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byB1c2UgcG9seWdvbiBvZmZzZXQgb3Igbm90LiBXaGVuIGVuYWJsZWQsIGVhY2ggZnJhZ21lbnQncyBkZXB0aCB2YWx1ZSB3aWxsCiAgICAJCSAqIGJlIG9mZnNldCBhZnRlciBpdCBpcyBpbnRlcnBvbGF0ZWQgZnJvbSB0aGUgZGVwdGggdmFsdWVzIG9mIHRoZSBhcHByb3ByaWF0ZSB2ZXJ0aWNlcy4KICAgIAkJICogVGhlIG9mZnNldCBpcyBhZGRlZCBiZWZvcmUgdGhlIGRlcHRoIHRlc3QgaXMgcGVyZm9ybWVkIGFuZCBiZWZvcmUgdGhlIHZhbHVlIGlzIHdyaXR0ZW4KICAgIAkJICogaW50byB0aGUgZGVwdGggYnVmZmVyLgogICAgCQkgKgogICAgCQkgKiBDYW4gYmUgdXNlZnVsIGZvciByZW5kZXJpbmcgaGlkZGVuLWxpbmUgaW1hZ2VzLCBmb3IgYXBwbHlpbmcgZGVjYWxzIHRvIHN1cmZhY2VzLCBhbmQgZm9yCiAgICAJCSAqIHJlbmRlcmluZyBzb2xpZHMgd2l0aCBoaWdobGlnaHRlZCBlZGdlcy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLnBvbHlnb25PZmZzZXQgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBTcGVjaWZpZXMgYSBzY2FsZSBmYWN0b3IgdGhhdCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHZhcmlhYmxlIGRlcHRoIG9mZnNldCBmb3IgZWFjaCBwb2x5Z29uLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwOwoKICAgIAkJLyoqCiAgICAJCSAqIElzIG11bHRpcGxpZWQgYnkgYW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgdmFsdWUgdG8gY3JlYXRlIGEgY29uc3RhbnQgZGVwdGggb2Zmc2V0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0byBhcHBseSBkaXRoZXJpbmcgdG8gdGhlIGNvbG9yIHRvIHJlbW92ZSB0aGUgYXBwZWFyYW5jZSBvZiBiYW5kaW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuZGl0aGVyaW5nID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogV2hldGhlciBhbHBoYSB0byBjb3ZlcmFnZSBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuIENhbiBvbmx5IGJlIHVzZWQgd2l0aCBNU0FBLWVuYWJsZWQgY29udGV4dHMKICAgIAkJICogKG1lYW5pbmcgd2hlbiB0aGUgcmVuZGVyZXIgd2FzIGNyZWF0ZWQgd2l0aCAqYW50aWFsaWFzKiBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYCkuIEVuYWJsaW5nIHRoaXMKICAgIAkJICogd2lsbCBzbW9vdGggYWxpYXNpbmcgb24gY2xpcCBwbGFuZSBlZGdlcyBhbmQgYWxwaGFUZXN0LWNsaXBwZWQgZWRnZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5hbHBoYVRvQ292ZXJhZ2UgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIHByZW11bHRpcGx5IHRoZSBhbHBoYSAodHJhbnNwYXJlbmN5KSB2YWx1ZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgZG91YmxlLXNpZGVkLCB0cmFuc3BhcmVudCBvYmplY3RzIHNob3VsZCBiZSByZW5kZXJlZCB3aXRoIGEgc2luZ2xlIHBhc3Mgb3Igbm90LgogICAgCQkgKgogICAgCQkgKiBUaGUgZW5naW5lIHJlbmRlcnMgZG91YmxlLXNpZGVkLCB0cmFuc3BhcmVudCBvYmplY3RzIHdpdGggdHdvIGRyYXcgY2FsbHMgKGJhY2sgZmFjZXMgZmlyc3QsCiAgICAJCSAqIHRoZW4gZnJvbnQgZmFjZXMpIHRvIG1pdGlnYXRlIHRyYW5zcGFyZW5jeSBhcnRpZmFjdHMuIFRoZXJlIGFyZSBzY2VuYXJpb3MgaG93ZXZlciB3aGVyZSB0aGlzCiAgICAJCSAqIGFwcHJvYWNoIHByb2R1Y2VzIG5vIHF1YWxpdHkgZ2FpbnMgYnV0IHN0aWxsIGRvdWJsZXMgZHJhdyBjYWxscyBlLmcuIHdoZW4gcmVuZGVyaW5nIGZsYXQKICAgIAkJICogdmVnZXRhdGlvbiBsaWtlIGdyYXNzIHNwcml0ZXMuIEluIHRoZXNlIGNhc2VzLCBzZXQgdGhlIGBmb3JjZVNpbmdsZVBhc3NgIGZsYWcgdG8gYHRydWVgIHRvCiAgICAJCSAqIGRpc2FibGUgdGhlIHR3byBwYXNzIHJlbmRlcmluZyB0byBhdm9pZCBwZXJmb3JtYW5jZSBpc3N1ZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5mb3JjZVNpbmdsZVBhc3MgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIGl0J3MgcG9zc2libGUgdG8gb3ZlcnJpZGUgdGhlIG1hdGVyaWFsIHdpdGgge0BsaW5rIFNjZW5lI292ZXJyaWRlTWF0ZXJpYWx9IG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuYWxsb3dPdmVycmlkZSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB3aGV0aGVyIDNEIG9iamVjdHMgdXNpbmcgdGhpcyBtYXRlcmlhbCBhcmUgdmlzaWJsZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMudmlzaWJsZSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB3aGV0aGVyIHRoaXMgbWF0ZXJpYWwgaXMgdG9uZSBtYXBwZWQgYWNjb3JkaW5nIHRvIHRoZSByZW5kZXJlcidzIHRvbmUgbWFwcGluZyBzZXR0aW5nLgogICAgCQkgKgogICAgCQkgKiBJdCBpcyBpZ25vcmVkIHdoZW4gcmVuZGVyaW5nIHRvIGEgcmVuZGVyIHRhcmdldCBvciB1c2luZyBwb3N0IHByb2Nlc3Npbmcgb3Igd2hlbiB1c2luZwogICAgCQkgKiBgV2ViR1BVUmVuZGVyZXJgLiBJbiBhbGwgdGhlc2UgY2FzZXMsIGFsbCBtYXRlcmlhbHMgYXJlIGhvbm9yZWQgYnkgdG9uZSBtYXBwaW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy50b25lTWFwcGVkID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBjdXN0b20gZGF0YSBhYm91dCB0aGUgTWF0ZXJpYWwuIEl0CiAgICAJCSAqIHNob3VsZCBub3QgaG9sZCByZWZlcmVuY2VzIHRvIGZ1bmN0aW9ucyBhcyB0aGVzZSB3aWxsIG5vdCBiZSBjbG9uZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLnVzZXJEYXRhID0ge307CgogICAgCQkvKioKICAgIAkJICogVGhpcyBzdGFydHMgYXQgYDBgIGFuZCBjb3VudHMgaG93IG1hbnkgdGltZXMge0BsaW5rIE1hdGVyaWFsI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy52ZXJzaW9uID0gMDsKCiAgICAJCXRoaXMuX2FscGhhVGVzdCA9IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgYWxwaGEgdmFsdWUgdG8gYmUgdXNlZCB3aGVuIHJ1bm5pbmcgYW4gYWxwaGEgdGVzdC4gVGhlIG1hdGVyaWFsCiAgICAJICogd2lsbCBub3QgYmUgcmVuZGVyZWQgaWYgdGhlIG9wYWNpdHkgaXMgbG93ZXIgdGhhbiB0aGlzIHZhbHVlLgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAcmVhZG9ubHkKICAgIAkgKiBAZGVmYXVsdCAwCiAgICAJICovCiAgICAJZ2V0IGFscGhhVGVzdCgpIHsKCiAgICAJCXJldHVybiB0aGlzLl9hbHBoYVRlc3Q7CgogICAgCX0KCiAgICAJc2V0IGFscGhhVGVzdCggdmFsdWUgKSB7CgogICAgCQlpZiAoIHRoaXMuX2FscGhhVGVzdCA+IDAgIT09IHZhbHVlID4gMCApIHsKCiAgICAJCQl0aGlzLnZlcnNpb24gKys7CgogICAgCQl9CgogICAgCQl0aGlzLl9hbHBoYVRlc3QgPSB2YWx1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBbiBvcHRpb25hbCBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbWF0ZXJpYWwgaXMgdXNlZCB0byByZW5kZXIgYSAzRCBvYmplY3QuCiAgICAJICoKICAgIAkgKiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIHdpdGgge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci4KICAgIAkgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS4KICAgIAkgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS4KICAgIAkgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS4KICAgIAkgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBncm91cCAtIFRoZSBnZW9tZXRyeSBncm91cCBkYXRhLgogICAgCSAqLwogICAgCW9uQmVmb3JlUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG9iamVjdCwgZ3JvdXAgKi8gKSB7fQoKICAgIAkvKioKICAgIAkgKiBBbiBvcHRpb25hbCBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgc2hhZGVyCiAgICAJICogcHJvZ3JhbSBpcyBjb21waWxlZC4gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgc2hhZGVyIHNvdXJjZSBjb2RlCiAgICAJICogYXMgYSBwYXJhbWV0ZXIuIFVzZWZ1bCBmb3IgdGhlIG1vZGlmaWNhdGlvbiBvZiBidWlsdC1pbiBtYXRlcmlhbHMuCiAgICAJICoKICAgIAkgKiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIHdpdGgge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LiBUaGUKICAgIAkgKiByZWNvbW1lbmRlZCBhcHByb2FjaCB3aGVuIGN1c3RvbWl6aW5nIG1hdGVyaWFscyBpcyB0byB1c2UgYFdlYkdQVVJlbmRlcmVyYCB3aXRoIHRoZSBuZXcKICAgIAkgKiBOb2RlIE1hdGVyaWFsIHN5c3RlbSBhbmQgW1RTTF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy93aWtpL1RocmVlLmpzLVNoYWRpbmctTGFuZ3VhZ2V9LgogICAgCSAqCiAgICAJICogQHBhcmFtIHt7dmVydGV4U2hhZGVyOnN0cmluZyxmcmFnbWVudFNoYWRlcjpzdHJpbmcsdW5pZm9ybXM6T2JqZWN0fX0gc2hhZGVyb2JqZWN0IC0gVGhlIG9iamVjdCBob2xkcyB0aGUgdW5pZm9ybXMgYW5kIHRoZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlciBzb3VyY2UuCiAgICAJICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSByZW5kZXJlci4KICAgIAkgKi8KICAgIAlvbkJlZm9yZUNvbXBpbGUoIC8qIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKi8gKSB7fQoKICAgIAkvKioKICAgIAkgKiBJbiBjYXNlIHtAbGluayBNYXRlcmlhbCNvbkJlZm9yZUNvbXBpbGV9IGlzIHVzZWQsIHRoaXMgY2FsbGJhY2sgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkKICAgIAkgKiB2YWx1ZXMgb2Ygc2V0dGluZ3MgdXNlZCBpbiBgb25CZWZvcmVDb21waWxlKClgLCBzbyB0aHJlZS5qcyBjYW4gcmV1c2UgYSBjYWNoZWQKICAgIAkgKiBzaGFkZXIgb3IgcmVjb21waWxlIHRoZSBzaGFkZXIgZm9yIHRoaXMgbWF0ZXJpYWwgYXMgbmVlZGVkLgogICAgCSAqCiAgICAJICogVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCB3aGVuIHJlbmRlcmluZyB3aXRoIHtAbGluayBXZWJHTFJlbmRlcmVyfS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGN1c3RvbSBwcm9ncmFtIGNhY2hlIGtleS4KICAgIAkgKi8KICAgIAljdXN0b21Qcm9ncmFtQ2FjaGVLZXkoKSB7CgogICAgCQlyZXR1cm4gdGhpcy5vbkJlZm9yZUNvbXBpbGUudG9TdHJpbmcoKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byBzZXQgZGVmYXVsdCB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIgb2JqZWN0cy4KICAgIAkgKiBJdCBpcyBhIGdlbmVyaWMgaW1wbGVtZW50YXRpb24gc28gaXQgY2FuIGJlIHVzZWQgd2l0aCBkaWZmZXJlbnQgdHlwZXMKICAgIAkgKiBvZiBtYXRlcmlhbHMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlc10gLSBUaGUgbWF0ZXJpYWwgdmFsdWVzIHRvIHNldC4KICAgIAkgKi8KICAgIAlzZXRWYWx1ZXMoIHZhbHVlcyApIHsKCiAgICAJCWlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSByZXR1cm47CgogICAgCQlmb3IgKCBjb25zdCBrZXkgaW4gdmFsdWVzICkgewoKICAgIAkJCWNvbnN0IG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTsKCiAgICAJCQlpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggYFRIUkVFLk1hdGVyaWFsOiBwYXJhbWV0ZXIgJyR7IGtleSB9JyBoYXMgdmFsdWUgb2YgdW5kZWZpbmVkLmAgKTsKICAgIAkJCQljb250aW51ZTsKCiAgICAJCQl9CgogICAgCQkJY29uc3QgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07CgogICAgCQkJaWYgKCBjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJY29uc29sZS53YXJuKCBgVEhSRUUuTWF0ZXJpYWw6ICckeyBrZXkgfScgaXMgbm90IGEgcHJvcGVydHkgb2YgVEhSRUUuJHsgdGhpcy50eXBlIH0uYCApOwogICAgCQkJCWNvbnRpbnVlOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNDb2xvciApIHsKCiAgICAJCQkJY3VycmVudFZhbHVlLnNldCggbmV3VmFsdWUgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNWZWN0b3IzICkgJiYgKCBuZXdWYWx1ZSAmJiBuZXdWYWx1ZS5pc1ZlY3RvcjMgKSApIHsKCiAgICAJCQkJY3VycmVudFZhbHVlLmNvcHkoIG5ld1ZhbHVlICk7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJdGhpc1sga2V5IF0gPSBuZXdWYWx1ZTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2VyaWFsaXplcyB0aGUgbWF0ZXJpYWwgaW50byBKU09OLgogICAgCSAqCiAgICAJICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgbWF0ZXJpYWwuCiAgICAJICogQHNlZSB7QGxpbmsgT2JqZWN0TG9hZGVyI3BhcnNlfQogICAgCSAqLwogICAgCXRvSlNPTiggbWV0YSApIHsKCiAgICAJCWNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApOwoKICAgIAkJaWYgKCBpc1Jvb3RPYmplY3QgKSB7CgogICAgCQkJbWV0YSA9IHsKICAgIAkJCQl0ZXh0dXJlczoge30sCiAgICAJCQkJaW1hZ2VzOiB7fQogICAgCQkJfTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IGRhdGEgPSB7CiAgICAJCQltZXRhZGF0YTogewogICAgCQkJCXZlcnNpb246IDQuNywKICAgIAkJCQl0eXBlOiAnTWF0ZXJpYWwnLAogICAgCQkJCWdlbmVyYXRvcjogJ01hdGVyaWFsLnRvSlNPTicKICAgIAkJCX0KICAgIAkJfTsKCiAgICAJCS8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb24KICAgIAkJZGF0YS51dWlkID0gdGhpcy51dWlkOwogICAgCQlkYXRhLnR5cGUgPSB0aGlzLnR5cGU7CgogICAgCQlpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7CgogICAgCQlpZiAoIHRoaXMuY29sb3IgJiYgdGhpcy5jb2xvci5pc0NvbG9yICkgZGF0YS5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7CgogICAgCQlpZiAoIHRoaXMucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnJvdWdobmVzcyA9IHRoaXMucm91Z2huZXNzOwogICAgCQlpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzOwoKICAgIAkJaWYgKCB0aGlzLnNoZWVuICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbjsKICAgIAkJaWYgKCB0aGlzLnNoZWVuQ29sb3IgJiYgdGhpcy5zaGVlbkNvbG9yLmlzQ29sb3IgKSBkYXRhLnNoZWVuQ29sb3IgPSB0aGlzLnNoZWVuQ29sb3IuZ2V0SGV4KCk7CiAgICAJCWlmICggdGhpcy5zaGVlblJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaGVlblJvdWdobmVzcyA9IHRoaXMuc2hlZW5Sb3VnaG5lc3M7CiAgICAJCWlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSBkYXRhLmVtaXNzaXZlID0gdGhpcy5lbWlzc2l2ZS5nZXRIZXgoKTsKICAgIAkJaWYgKCB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gMSApIGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5OwoKICAgIAkJaWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpOwogICAgCQlpZiAoIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIGRhdGEuc3BlY3VsYXJJbnRlbnNpdHkgPSB0aGlzLnNwZWN1bGFySW50ZW5zaXR5OwogICAgCQlpZiAoIHRoaXMuc3BlY3VsYXJDb2xvciAmJiB0aGlzLnNwZWN1bGFyQ29sb3IuaXNDb2xvciApIGRhdGEuc3BlY3VsYXJDb2xvciA9IHRoaXMuc3BlY3VsYXJDb2xvci5nZXRIZXgoKTsKICAgIAkJaWYgKCB0aGlzLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaGluaW5lc3MgPSB0aGlzLnNoaW5pbmVzczsKICAgIAkJaWYgKCB0aGlzLmNsZWFyY29hdCAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXQgPSB0aGlzLmNsZWFyY29hdDsKICAgIAkJaWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3MgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzczsKCiAgICAJCWlmICggdGhpcy5jbGVhcmNvYXRNYXAgJiYgdGhpcy5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuY2xlYXJjb2F0TWFwID0gdGhpcy5jbGVhcmNvYXRNYXAudG9KU09OKCBtZXRhICkudXVpZDsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgJiYgdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgJiYgdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJCWRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5kaXNwZXJzaW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLmRpc3BlcnNpb24gPSB0aGlzLmRpc3BlcnNpb247CgogICAgCQlpZiAoIHRoaXMuaXJpZGVzY2VuY2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2UgPSB0aGlzLmlyaWRlc2NlbmNlOwogICAgCQlpZiAoIHRoaXMuaXJpZGVzY2VuY2VJT1IgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2VJT1IgPSB0aGlzLmlyaWRlc2NlbmNlSU9SOwogICAgCQlpZiAoIHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlID0gdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlOwoKICAgIAkJaWYgKCB0aGlzLmlyaWRlc2NlbmNlTWFwICYmIHRoaXMuaXJpZGVzY2VuY2VNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuaXJpZGVzY2VuY2VNYXAgPSB0aGlzLmlyaWRlc2NlbmNlTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgJiYgdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcC5pc1RleHR1cmUgKSB7CgogICAgCQkJZGF0YS5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSBkYXRhLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7CiAgICAJCWlmICggdGhpcy5hbmlzb3Ryb3B5Um90YXRpb24gIT09IHVuZGVmaW5lZCApIGRhdGEuYW5pc290cm9weVJvdGF0aW9uID0gdGhpcy5hbmlzb3Ryb3B5Um90YXRpb247CgogICAgCQlpZiAoIHRoaXMuYW5pc290cm9weU1hcCAmJiB0aGlzLmFuaXNvdHJvcHlNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuYW5pc290cm9weU1hcCA9IHRoaXMuYW5pc290cm9weU1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CiAgICAJCWlmICggdGhpcy5tYXRjYXAgJiYgdGhpcy5tYXRjYXAuaXNUZXh0dXJlICkgZGF0YS5tYXRjYXAgPSB0aGlzLm1hdGNhcC50b0pTT04oIG1ldGEgKS51dWlkOwogICAgCQlpZiAoIHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUgKSBkYXRhLmFscGhhTWFwID0gdGhpcy5hbHBoYU1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJaWYgKCB0aGlzLmxpZ2h0TWFwICYmIHRoaXMubGlnaHRNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEubGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CiAgICAJCQlkYXRhLmxpZ2h0TWFwSW50ZW5zaXR5ID0gdGhpcy5saWdodE1hcEludGVuc2l0eTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5hb01hcCAmJiB0aGlzLmFvTWFwLmlzVGV4dHVyZSApIHsKCiAgICAJCQlkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkOwogICAgCQkJZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuYnVtcE1hcCA9IHRoaXMuYnVtcE1hcC50b0pTT04oIG1ldGEgKS51dWlkOwogICAgCQkJZGF0YS5idW1wU2NhbGUgPSB0aGlzLmJ1bXBTY2FsZTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5ub3JtYWxNYXAgJiYgdGhpcy5ub3JtYWxNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEubm9ybWFsTWFwID0gdGhpcy5ub3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJCWRhdGEubm9ybWFsTWFwVHlwZSA9IHRoaXMubm9ybWFsTWFwVHlwZTsKICAgIAkJCWRhdGEubm9ybWFsU2NhbGUgPSB0aGlzLm5vcm1hbFNjYWxlLnRvQXJyYXkoKTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5kaXNwbGFjZW1lbnRNYXAgJiYgdGhpcy5kaXNwbGFjZW1lbnRNYXAuaXNUZXh0dXJlICkgewoKICAgIAkJCWRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJCWRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlOwogICAgCQkJZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CiAgICAJCWlmICggdGhpcy5tZXRhbG5lc3NNYXAgJiYgdGhpcy5tZXRhbG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5tZXRhbG5lc3NNYXAgPSB0aGlzLm1ldGFsbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJaWYgKCB0aGlzLmVtaXNzaXZlTWFwICYmIHRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlICkgZGF0YS5lbWlzc2l2ZU1hcCA9IHRoaXMuZW1pc3NpdmVNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJaWYgKCB0aGlzLnNwZWN1bGFyTWFwICYmIHRoaXMuc3BlY3VsYXJNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJaWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwICYmIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckludGVuc2l0eU1hcCA9IHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudG9KU09OKCBtZXRhICkudXVpZDsKICAgIAkJaWYgKCB0aGlzLnNwZWN1bGFyQ29sb3JNYXAgJiYgdGhpcy5zcGVjdWxhckNvbG9yTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJDb2xvck1hcCA9IHRoaXMuc3BlY3VsYXJDb2xvck1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJaWYgKCB0aGlzLmVudk1hcCAmJiB0aGlzLmVudk1hcC5pc1RleHR1cmUgKSB7CgogICAgCQkJZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJCWlmICggdGhpcy5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuZW52TWFwUm90YXRpb24gIT09IHVuZGVmaW5lZCApIGRhdGEuZW52TWFwUm90YXRpb24gPSB0aGlzLmVudk1hcFJvdGF0aW9uLnRvQXJyYXkoKTsKICAgIAkJaWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTsKICAgIAkJaWYgKCB0aGlzLnJlZmxlY3Rpdml0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTsKICAgIAkJaWYgKCB0aGlzLnJlZnJhY3Rpb25SYXRpbyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbzsKCiAgICAJCWlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHsKCiAgICAJCQlkYXRhLmdyYWRpZW50TWFwID0gdGhpcy5ncmFkaWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoKICAgIAkJfQoKICAgIAkJaWYgKCB0aGlzLnRyYW5zbWlzc2lvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS50cmFuc21pc3Npb24gPSB0aGlzLnRyYW5zbWlzc2lvbjsKICAgIAkJaWYgKCB0aGlzLnRyYW5zbWlzc2lvbk1hcCAmJiB0aGlzLnRyYW5zbWlzc2lvbk1hcC5pc1RleHR1cmUgKSBkYXRhLnRyYW5zbWlzc2lvbk1hcCA9IHRoaXMudHJhbnNtaXNzaW9uTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CiAgICAJCWlmICggdGhpcy50aGlja25lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEudGhpY2tuZXNzID0gdGhpcy50aGlja25lc3M7CiAgICAJCWlmICggdGhpcy50aGlja25lc3NNYXAgJiYgdGhpcy50aGlja25lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS50aGlja25lc3NNYXAgPSB0aGlzLnRoaWNrbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkOwogICAgCQlpZiAoIHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZSAhPT0gSW5maW5pdHkgKSBkYXRhLmF0dGVudWF0aW9uRGlzdGFuY2UgPSB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2U7CiAgICAJCWlmICggdGhpcy5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uQ29sb3IgPSB0aGlzLmF0dGVudWF0aW9uQ29sb3IuZ2V0SGV4KCk7CgogICAgCQlpZiAoIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplID0gdGhpcy5zaXplOwogICAgCQlpZiAoIHRoaXMuc2hhZG93U2lkZSAhPT0gbnVsbCApIGRhdGEuc2hhZG93U2lkZSA9IHRoaXMuc2hhZG93U2lkZTsKICAgIAkJaWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjsKCiAgICAJCWlmICggdGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcgKSBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZzsKICAgIAkJaWYgKCB0aGlzLnNpZGUgIT09IEZyb250U2lkZSApIGRhdGEuc2lkZSA9IHRoaXMuc2lkZTsKICAgIAkJaWYgKCB0aGlzLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSApIGRhdGEudmVydGV4Q29sb3JzID0gdHJ1ZTsKCiAgICAJCWlmICggdGhpcy5vcGFjaXR5IDwgMSApIGRhdGEub3BhY2l0eSA9IHRoaXMub3BhY2l0eTsKICAgIAkJaWYgKCB0aGlzLnRyYW5zcGFyZW50ID09PSB0cnVlICkgZGF0YS50cmFuc3BhcmVudCA9IHRydWU7CgogICAgCQlpZiAoIHRoaXMuYmxlbmRTcmMgIT09IFNyY0FscGhhRmFjdG9yICkgZGF0YS5ibGVuZFNyYyA9IHRoaXMuYmxlbmRTcmM7CiAgICAJCWlmICggdGhpcy5ibGVuZERzdCAhPT0gT25lTWludXNTcmNBbHBoYUZhY3RvciApIGRhdGEuYmxlbmREc3QgPSB0aGlzLmJsZW5kRHN0OwogICAgCQlpZiAoIHRoaXMuYmxlbmRFcXVhdGlvbiAhPT0gQWRkRXF1YXRpb24gKSBkYXRhLmJsZW5kRXF1YXRpb24gPSB0aGlzLmJsZW5kRXF1YXRpb247CiAgICAJCWlmICggdGhpcy5ibGVuZFNyY0FscGhhICE9PSBudWxsICkgZGF0YS5ibGVuZFNyY0FscGhhID0gdGhpcy5ibGVuZFNyY0FscGhhOwogICAgCQlpZiAoIHRoaXMuYmxlbmREc3RBbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmREc3RBbHBoYSA9IHRoaXMuYmxlbmREc3RBbHBoYTsKICAgIAkJaWYgKCB0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmRFcXVhdGlvbkFscGhhID0gdGhpcy5ibGVuZEVxdWF0aW9uQWxwaGE7CiAgICAJCWlmICggdGhpcy5ibGVuZENvbG9yICYmIHRoaXMuYmxlbmRDb2xvci5pc0NvbG9yICkgZGF0YS5ibGVuZENvbG9yID0gdGhpcy5ibGVuZENvbG9yLmdldEhleCgpOwogICAgCQlpZiAoIHRoaXMuYmxlbmRBbHBoYSAhPT0gMCApIGRhdGEuYmxlbmRBbHBoYSA9IHRoaXMuYmxlbmRBbHBoYTsKCiAgICAJCWlmICggdGhpcy5kZXB0aEZ1bmMgIT09IExlc3NFcXVhbERlcHRoICkgZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYzsKICAgIAkJaWYgKCB0aGlzLmRlcHRoVGVzdCA9PT0gZmFsc2UgKSBkYXRhLmRlcHRoVGVzdCA9IHRoaXMuZGVwdGhUZXN0OwogICAgCQlpZiAoIHRoaXMuZGVwdGhXcml0ZSA9PT0gZmFsc2UgKSBkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7CiAgICAJCWlmICggdGhpcy5jb2xvcldyaXRlID09PSBmYWxzZSApIGRhdGEuY29sb3JXcml0ZSA9IHRoaXMuY29sb3JXcml0ZTsKCiAgICAJCWlmICggdGhpcy5zdGVuY2lsV3JpdGVNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrOwogICAgCQlpZiAoIHRoaXMuc3RlbmNpbEZ1bmMgIT09IEFsd2F5c1N0ZW5jaWxGdW5jICkgZGF0YS5zdGVuY2lsRnVuYyA9IHRoaXMuc3RlbmNpbEZ1bmM7CiAgICAJCWlmICggdGhpcy5zdGVuY2lsUmVmICE9PSAwICkgZGF0YS5zdGVuY2lsUmVmID0gdGhpcy5zdGVuY2lsUmVmOwogICAgCQlpZiAoIHRoaXMuc3RlbmNpbEZ1bmNNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzazsKICAgIAkJaWYgKCB0aGlzLnN0ZW5jaWxGYWlsICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsRmFpbCA9IHRoaXMuc3RlbmNpbEZhaWw7CiAgICAJCWlmICggdGhpcy5zdGVuY2lsWkZhaWwgIT09IEtlZXBTdGVuY2lsT3AgKSBkYXRhLnN0ZW5jaWxaRmFpbCA9IHRoaXMuc3RlbmNpbFpGYWlsOwogICAgCQlpZiAoIHRoaXMuc3RlbmNpbFpQYXNzICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzczsKICAgIAkJaWYgKCB0aGlzLnN0ZW5jaWxXcml0ZSA9PT0gdHJ1ZSApIGRhdGEuc3RlbmNpbFdyaXRlID0gdGhpcy5zdGVuY2lsV3JpdGU7CgogICAgCQkvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpCiAgICAJCWlmICggdGhpcy5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHRoaXMucm90YXRpb24gIT09IDAgKSBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjsKCiAgICAJCWlmICggdGhpcy5wb2x5Z29uT2Zmc2V0ID09PSB0cnVlICkgZGF0YS5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTsKICAgIAkJaWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7CiAgICAJCWlmICggdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRVbml0cyA9IHRoaXMucG9seWdvbk9mZnNldFVuaXRzOwoKICAgIAkJaWYgKCB0aGlzLmxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICYmIHRoaXMubGluZXdpZHRoICE9PSAxICkgZGF0YS5saW5ld2lkdGggPSB0aGlzLmxpbmV3aWR0aDsKICAgIAkJaWYgKCB0aGlzLmRhc2hTaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLmRhc2hTaXplID0gdGhpcy5kYXNoU2l6ZTsKICAgIAkJaWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTsKICAgIAkJaWYgKCB0aGlzLnNjYWxlICE9PSB1bmRlZmluZWQgKSBkYXRhLnNjYWxlID0gdGhpcy5zY2FsZTsKCiAgICAJCWlmICggdGhpcy5kaXRoZXJpbmcgPT09IHRydWUgKSBkYXRhLmRpdGhlcmluZyA9IHRydWU7CgogICAgCQlpZiAoIHRoaXMuYWxwaGFUZXN0ID4gMCApIGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7CiAgICAJCWlmICggdGhpcy5hbHBoYUhhc2ggPT09IHRydWUgKSBkYXRhLmFscGhhSGFzaCA9IHRydWU7CiAgICAJCWlmICggdGhpcy5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWUgKSBkYXRhLmFscGhhVG9Db3ZlcmFnZSA9IHRydWU7CiAgICAJCWlmICggdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSBkYXRhLnByZW11bHRpcGxpZWRBbHBoYSA9IHRydWU7CiAgICAJCWlmICggdGhpcy5mb3JjZVNpbmdsZVBhc3MgPT09IHRydWUgKSBkYXRhLmZvcmNlU2luZ2xlUGFzcyA9IHRydWU7CgogICAgCQlpZiAoIHRoaXMud2lyZWZyYW1lID09PSB0cnVlICkgZGF0YS53aXJlZnJhbWUgPSB0cnVlOwogICAgCQlpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7CiAgICAJCWlmICggdGhpcy53aXJlZnJhbWVMaW5lY2FwICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lY2FwID0gdGhpcy53aXJlZnJhbWVMaW5lY2FwOwogICAgCQlpZiAoIHRoaXMud2lyZWZyYW1lTGluZWpvaW4gIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjsKCiAgICAJCWlmICggdGhpcy5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIGRhdGEuZmxhdFNoYWRpbmcgPSB0cnVlOwoKICAgIAkJaWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgZGF0YS52aXNpYmxlID0gZmFsc2U7CgogICAgCQlpZiAoIHRoaXMudG9uZU1hcHBlZCA9PT0gZmFsc2UgKSBkYXRhLnRvbmVNYXBwZWQgPSBmYWxzZTsKCiAgICAJCWlmICggdGhpcy5mb2cgPT09IGZhbHNlICkgZGF0YS5mb2cgPSBmYWxzZTsKCiAgICAJCWlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7CgogICAgCQkvLyBUT0RPOiBDb3BpZWQgZnJvbSBPYmplY3QzRC50b0pTT04KCiAgICAJCWZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkgewoKICAgIAkJCWNvbnN0IHZhbHVlcyA9IFtdOwoKICAgIAkJCWZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHsKCiAgICAJCQkJY29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTsKICAgIAkJCQlkZWxldGUgZGF0YS5tZXRhZGF0YTsKICAgIAkJCQl2YWx1ZXMucHVzaCggZGF0YSApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gdmFsdWVzOwoKICAgIAkJfQoKICAgIAkJaWYgKCBpc1Jvb3RPYmplY3QgKSB7CgogICAgCQkJY29uc3QgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7CiAgICAJCQljb25zdCBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApOwoKICAgIAkJCWlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIGRhdGEudGV4dHVyZXMgPSB0ZXh0dXJlczsKICAgIAkJCWlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBkYXRhLmltYWdlcyA9IGltYWdlczsKCiAgICAJCX0KCiAgICAJCXJldHVybiBkYXRhOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgbWF0ZXJpYWwgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge01hdGVyaWFsfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIG1hdGVyaWFsIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdGVyaWFsfSBzb3VyY2UgLSBUaGUgbWF0ZXJpYWwgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtNYXRlcmlhbH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljb3B5KCBzb3VyY2UgKSB7CgogICAgCQl0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTsKCiAgICAJCXRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7CiAgICAJCXRoaXMuc2lkZSA9IHNvdXJjZS5zaWRlOwogICAgCQl0aGlzLnZlcnRleENvbG9ycyA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnM7CgogICAgCQl0aGlzLm9wYWNpdHkgPSBzb3VyY2Uub3BhY2l0eTsKICAgIAkJdGhpcy50cmFuc3BhcmVudCA9IHNvdXJjZS50cmFuc3BhcmVudDsKCiAgICAJCXRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7CiAgICAJCXRoaXMuYmxlbmREc3QgPSBzb3VyY2UuYmxlbmREc3Q7CiAgICAJCXRoaXMuYmxlbmRFcXVhdGlvbiA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uOwogICAgCQl0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTsKICAgIAkJdGhpcy5ibGVuZERzdEFscGhhID0gc291cmNlLmJsZW5kRHN0QWxwaGE7CiAgICAJCXRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gc291cmNlLmJsZW5kRXF1YXRpb25BbHBoYTsKICAgIAkJdGhpcy5ibGVuZENvbG9yLmNvcHkoIHNvdXJjZS5ibGVuZENvbG9yICk7CiAgICAJCXRoaXMuYmxlbmRBbHBoYSA9IHNvdXJjZS5ibGVuZEFscGhhOwoKICAgIAkJdGhpcy5kZXB0aEZ1bmMgPSBzb3VyY2UuZGVwdGhGdW5jOwogICAgCQl0aGlzLmRlcHRoVGVzdCA9IHNvdXJjZS5kZXB0aFRlc3Q7CiAgICAJCXRoaXMuZGVwdGhXcml0ZSA9IHNvdXJjZS5kZXB0aFdyaXRlOwoKICAgIAkJdGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gc291cmNlLnN0ZW5jaWxXcml0ZU1hc2s7CiAgICAJCXRoaXMuc3RlbmNpbEZ1bmMgPSBzb3VyY2Uuc3RlbmNpbEZ1bmM7CiAgICAJCXRoaXMuc3RlbmNpbFJlZiA9IHNvdXJjZS5zdGVuY2lsUmVmOwogICAgCQl0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHNvdXJjZS5zdGVuY2lsRnVuY01hc2s7CiAgICAJCXRoaXMuc3RlbmNpbEZhaWwgPSBzb3VyY2Uuc3RlbmNpbEZhaWw7CiAgICAJCXRoaXMuc3RlbmNpbFpGYWlsID0gc291cmNlLnN0ZW5jaWxaRmFpbDsKICAgIAkJdGhpcy5zdGVuY2lsWlBhc3MgPSBzb3VyY2Uuc3RlbmNpbFpQYXNzOwogICAgCQl0aGlzLnN0ZW5jaWxXcml0ZSA9IHNvdXJjZS5zdGVuY2lsV3JpdGU7CgogICAgCQljb25zdCBzcmNQbGFuZXMgPSBzb3VyY2UuY2xpcHBpbmdQbGFuZXM7CiAgICAJCWxldCBkc3RQbGFuZXMgPSBudWxsOwoKICAgIAkJaWYgKCBzcmNQbGFuZXMgIT09IG51bGwgKSB7CgogICAgCQkJY29uc3QgbiA9IHNyY1BsYW5lcy5sZW5ndGg7CiAgICAJCQlkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7CgogICAgCQkJCWRzdFBsYW5lc1sgaSBdID0gc3JjUGxhbmVzWyBpIF0uY2xvbmUoKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQl0aGlzLmNsaXBwaW5nUGxhbmVzID0gZHN0UGxhbmVzOwogICAgCQl0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBzb3VyY2UuY2xpcEludGVyc2VjdGlvbjsKICAgIAkJdGhpcy5jbGlwU2hhZG93cyA9IHNvdXJjZS5jbGlwU2hhZG93czsKCiAgICAJCXRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlOwoKICAgIAkJdGhpcy5jb2xvcldyaXRlID0gc291cmNlLmNvbG9yV3JpdGU7CgogICAgCQl0aGlzLnByZWNpc2lvbiA9IHNvdXJjZS5wcmVjaXNpb247CgogICAgCQl0aGlzLnBvbHlnb25PZmZzZXQgPSBzb3VyY2UucG9seWdvbk9mZnNldDsKICAgIAkJdGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7CiAgICAJCXRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gc291cmNlLnBvbHlnb25PZmZzZXRVbml0czsKCiAgICAJCXRoaXMuZGl0aGVyaW5nID0gc291cmNlLmRpdGhlcmluZzsKCiAgICAJCXRoaXMuYWxwaGFUZXN0ID0gc291cmNlLmFscGhhVGVzdDsKICAgIAkJdGhpcy5hbHBoYUhhc2ggPSBzb3VyY2UuYWxwaGFIYXNoOwogICAgCQl0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IHNvdXJjZS5hbHBoYVRvQ292ZXJhZ2U7CiAgICAJCXRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLnByZW11bHRpcGxpZWRBbHBoYTsKICAgIAkJdGhpcy5mb3JjZVNpbmdsZVBhc3MgPSBzb3VyY2UuZm9yY2VTaW5nbGVQYXNzOwoKICAgIAkJdGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7CgogICAgCQl0aGlzLnRvbmVNYXBwZWQgPSBzb3VyY2UudG9uZU1hcHBlZDsKCiAgICAJCXRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpcwogICAgCSAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLgogICAgCSAqCiAgICAJICogQGZpcmVzIE1hdGVyaWFsI2Rpc3Bvc2UKICAgIAkgKi8KICAgIAlkaXNwb3NlKCkgewoKICAgIAkJLyoqCiAgICAJCSAqIEZpcmVzIHdoZW4gdGhlIG1hdGVyaWFsIGhhcyBiZWVuIGRpc3Bvc2VkIG9mLgogICAgCQkgKgogICAgCQkgKiBAZXZlbnQgTWF0ZXJpYWwjZGlzcG9zZQogICAgCQkgKiBAdHlwZSB7T2JqZWN0fQogICAgCQkgKi8KICAgIAkJdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCBpbmRpY2F0ZXMgdGhlIGVuZ2luZSB0aGUgbWF0ZXJpYWwKICAgIAkgKiBuZWVkcyB0byBiZSByZWNvbXBpbGVkLgogICAgCSAqCiAgICAJICogQHR5cGUge2Jvb2xlYW59CiAgICAJICogQGRlZmF1bHQgZmFsc2UKICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlCiAgICAJICovCiAgICAJc2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHsKCiAgICAJCWlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIG1hdGVyaWFsIGZvciBkcmF3aW5nIGdlb21ldHJpZXMgaW4gYSBzaW1wbGUgc2hhZGVkIChmbGF0IG9yIHdpcmVmcmFtZSkgd2F5LgogICAgICoKICAgICAqIFRoaXMgbWF0ZXJpYWwgaXMgbm90IGFmZmVjdGVkIGJ5IGxpZ2h0cy4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgTWF0ZXJpYWwKICAgICAqLwogICAgY2xhc3MgTWVzaEJhc2ljTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgbWVzaCBiYXNpYyBtYXRlcmlhbC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzCiAgICAJICogZGVmaW5pbmcgdGhlIG1hdGVyaWFsJ3MgYXBwZWFyYW5jZS4gQW55IHByb3BlcnR5IG9mIHRoZSBtYXRlcmlhbAogICAgCSAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZAogICAgCSAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkCiAgICAJICogYnkge0BsaW5rIENvbG9yI3NldH0uCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNNZXNoQmFzaWNNYXRlcmlhbCA9IHRydWU7CgogICAgCQl0aGlzLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnOwoKICAgIAkJLyoqCiAgICAJCSAqIENvbG9yIG9mIHRoZSBtYXRlcmlhbC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0NvbG9yfQogICAgCQkgKiBAZGVmYXVsdCAoMSwxLDEpCiAgICAJCSAqLwogICAgCQl0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBlbWlzc2l2ZQoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBjb2xvciBtYXAuIE1heSBvcHRpb25hbGx5IGluY2x1ZGUgYW4gYWxwaGEgY2hhbm5lbCwgdHlwaWNhbGx5IGNvbWJpbmVkCiAgICAJCSAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIHRleHR1cmUgbWFwCiAgICAJCSAqIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGUgZGlmZnVzZSBgY29sb3JgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P1RleHR1cmV9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMubWFwID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgbGlnaHQgbWFwLiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P1RleHR1cmV9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMubGlnaHRNYXAgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEludGVuc2l0eSBvZiB0aGUgYmFrZWQgbGlnaHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7CgogICAgCQkvKioKICAgIAkJICogVGhlIHJlZCBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyB1c2VkIGFzIHRoZSBhbWJpZW50IG9jY2x1c2lvbiBtYXAuCiAgICAJCSAqIFJlcXVpcmVzIGEgc2Vjb25kIHNldCBvZiBVVnMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/VGV4dHVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5hb01hcCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogSW50ZW5zaXR5IG9mIHRoZSBhbWJpZW50IG9jY2x1c2lvbiBlZmZlY3QuIFJhbmdlIGlzIGBbMCwxXWAsIHdoZXJlIGAwYAogICAgCQkgKiBkaXNhYmxlcyBhbWJpZW50IG9jY2x1c2lvbi4gV2hlcmUgaW50ZW5zaXR5IGlzIGAxYCBhbmQgdGhlIEFPIG1hcCdzCiAgICAJCSAqIHJlZCBjaGFubmVsIGlzIGFsc28gYDFgLCBhbWJpZW50IGxpZ2h0IGlzIGZ1bGx5IG9jY2x1ZGVkIG9uIGEgc3VyZmFjZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDsKCiAgICAJCS8qKgogICAgCQkgKiBTcGVjdWxhciBtYXAgdXNlZCBieSB0aGUgbWF0ZXJpYWwuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/VGV4dHVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5zcGVjdWxhck1hcCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogVGhlIGFscGhhIG1hcCBpcyBhIGdyYXlzY2FsZSB0ZXh0dXJlIHRoYXQgY29udHJvbHMgdGhlIG9wYWNpdHkgYWNyb3NzIHRoZQogICAgCQkgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLgogICAgCQkgKgogICAgCQkgKiBPbmx5IHRoZSBjb2xvciBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkLCBpZ25vcmluZyB0aGUgYWxwaGEgY2hhbm5lbCBpZiBvbmUKICAgIAkJICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWwKICAgIAkJICogd2hlbiBzYW1wbGluZyB0aGlzIHRleHR1cmUgZHVlIHRvIHRoZSBleHRyYSBiaXQgb2YgcHJlY2lzaW9uIHByb3ZpZGVkIGZvcgogICAgCQkgKiBncmVlbiBpbiBEWFQtY29tcHJlc3NlZCBhbmQgdW5jb21wcmVzc2VkIFJHQiA1NjUgZm9ybWF0cy4gTHVtaW5hbmNlLW9ubHkgYW5kCiAgICAJCSAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9UZXh0dXJlfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgZW52aXJvbm1lbnQgbWFwLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P1RleHR1cmV9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuZW52TWFwID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgcm90YXRpb24gb2YgdGhlIGVudmlyb25tZW50IG1hcCBpbiByYWRpYW5zLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7RXVsZXJ9CiAgICAJCSAqIEBkZWZhdWx0ICgwLDAsMCkKICAgIAkJICovCiAgICAJCXRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTsKCiAgICAJCS8qKgogICAgCQkgKiBIb3cgdG8gY29tYmluZSB0aGUgcmVzdWx0IG9mIHRoZSBzdXJmYWNlJ3MgY29sb3Igd2l0aCB0aGUgZW52aXJvbm1lbnQgbWFwLCBpZiBhbnkuCiAgICAJCSAqCiAgICAJCSAqIFdoZW4gc2V0IHRvIGBNaXhPcGVyYXRpb25gLCB0aGUge0BsaW5rIE1lc2hCYXNpY01hdGVyaWFsI3JlZmxlY3Rpdml0eX0gaXMgdXNlZCB0bwogICAgCQkgKiBibGVuZCBiZXR3ZWVuIHRoZSB0d28gY29sb3JzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KE11bHRpcGx5T3BlcmF0aW9ufE1peE9wZXJhdGlvbnxBZGRPcGVyYXRpb24pfQogICAgCQkgKiBAZGVmYXVsdCBNdWx0aXBseU9wZXJhdGlvbgogICAgCQkgKi8KICAgIAkJdGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247CgogICAgCQkvKioKICAgIAkJICogSG93IG11Y2ggdGhlIGVudmlyb25tZW50IG1hcCBhZmZlY3RzIHRoZSBzdXJmYWNlLgogICAgCQkgKiBUaGUgdmFsaWQgcmFuZ2UgaXMgYmV0d2VlbiBgMGAgKG5vIHJlZmxlY3Rpb25zKSBhbmQgYDFgIChmdWxsIHJlZmxlY3Rpb25zKS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5yZWZsZWN0aXZpdHkgPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBpbmRleCBvZiByZWZyYWN0aW9uIChJT1IpIG9mIGFpciAoYXBwcm94aW1hdGVseSAxKSBkaXZpZGVkIGJ5IHRoZQogICAgCQkgKiBpbmRleCBvZiByZWZyYWN0aW9uIG9mIHRoZSBtYXRlcmlhbC4gSXQgaXMgdXNlZCB3aXRoIGVudmlyb25tZW50IG1hcHBpbmcKICAgIAkJICogbW9kZXMge0BsaW5rIEN1YmVSZWZyYWN0aW9uTWFwcGluZ30gYW5kIHtAbGluayBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZ30uCiAgICAJCSAqIFRoZSByZWZyYWN0aW9uIHJhdGlvIHNob3VsZCBub3QgZXhjZWVkIGAxYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMC45OAogICAgCQkgKi8KICAgIAkJdGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4OwoKICAgIAkJLyoqCiAgICAJCSAqIFJlbmRlcnMgdGhlIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMud2lyZWZyYW1lID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogQ29udHJvbHMgdGhlIHRoaWNrbmVzcyBvZiB0aGUgd2lyZWZyYW1lLgogICAgCQkgKgogICAgCQkgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiB3aXJlZnJhbWUgZW5kcy4KICAgIAkJICoKICAgIAkJICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoJ3JvdW5kJ3wnYmV2ZWwnfCdtaXRlcicpfQogICAgCQkgKiBAZGVmYXVsdCAncm91bmQnCiAgICAJCSAqLwogICAgCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiB3aXJlZnJhbWUgam9pbnRzLgogICAgCQkgKgogICAgCQkgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeygncm91bmQnfCdiZXZlbCd8J21pdGVyJyl9CiAgICAJCSAqIEBkZWZhdWx0ICdyb3VuZCcKICAgIAkJICovCiAgICAJCXRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmZvZyA9IHRydWU7CgogICAgCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSApOwoKICAgIAkJdGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTsKCiAgICAJCXRoaXMubWFwID0gc291cmNlLm1hcDsKCiAgICAJCXRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7CiAgICAJCXRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7CgogICAgCQl0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwOwogICAgCQl0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5OwoKICAgIAkJdGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDsKCiAgICAJCXRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7CgogICAgCQl0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7CiAgICAJCXRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7CiAgICAJCXRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lOwogICAgCQl0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7CiAgICAJCXRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbzsKCiAgICAJCXRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTsKICAgIAkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoOwogICAgCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDsKICAgIAkJdGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjsKCiAgICAJCXRoaXMuZm9nID0gc291cmNlLmZvZzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF92ZWN0b3IkOSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92ZWN0b3IyJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7CgogICAgbGV0IF9pZCQyID0gMDsKCiAgICAvKioKICAgICAqIFRoaXMgY2xhc3Mgc3RvcmVzIGRhdGEgZm9yIGFuIGF0dHJpYnV0ZSAoc3VjaCBhcyB2ZXJ0ZXggcG9zaXRpb25zLCBmYWNlCiAgICAgKiBpbmRpY2VzLCBub3JtYWxzLCBjb2xvcnMsIFVWcywgYW5kIGFueSBjdXN0b20gYXR0cmlidXRlcyApIGFzc29jaWF0ZWQgd2l0aAogICAgICogYSBnZW9tZXRyeSwgd2hpY2ggYWxsb3dzIGZvciBtb3JlIGVmZmljaWVudCBwYXNzaW5nIG9mIGRhdGEgdG8gdGhlIEdQVS4KICAgICAqCiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCB2ZWN0b3ItbGlrZSBkYXRhLCB0aGUgYGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKWAKICAgICAqIGhlbHBlciBtZXRob2RzIG9uIHZlY3RvciBhbmQgY29sb3IgY2xhc3MgbWlnaHQgYmUgaGVscGZ1bC4gRS5nLiB7QGxpbmsgVmVjdG9yMyNmcm9tQnVmZmVyQXR0cmlidXRlfS4KICAgICAqLwogICAgY2xhc3MgQnVmZmVyQXR0cmlidXRlIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtUeXBlZEFycmF5fSBhcnJheSAtIFRoZSBhcnJheSBob2xkaW5nIHRoZSBhdHRyaWJ1dGUgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCA9IGZhbHNlICkgewoKICAgIAkJaWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkgewoKICAgIAkJCXRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTsKCiAgICAJCX0KCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgSUQgb2YgdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJCSAqCiAgICAJCSAqIEBuYW1lIEJ1ZmZlckF0dHJpYnV0ZSNpZAogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX2lkJDIgKysgfSApOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBuYW1lIG9mIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5uYW1lID0gJyc7CgogICAgCQkvKioKICAgIAkJICogVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLiBJdCBzaG91bGQgaGF2ZSBgaXRlbVNpemUgKiBudW1WZXJ0aWNlc2AKICAgIAkJICogZWxlbWVudHMsIHdoZXJlIGBudW1WZXJ0aWNlc2AgaXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBpbiB0aGUgYXNzb2NpYXRlZCBnZW9tZXRyeS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1R5cGVkQXJyYXl9CiAgICAJCSAqLwogICAgCQl0aGlzLmFycmF5ID0gYXJyYXk7CgogICAgCQkvKioKICAgIAkJICogVGhlIG51bWJlciBvZiB2YWx1ZXMgb2YgdGhlIGFycmF5IHRoYXQgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCBhIHBhcnRpY3VsYXIgdmVydGV4LgogICAgCQkgKiBGb3IgaW5zdGFuY2UsIGlmIHRoaXMgYXR0cmlidXRlIGlzIHN0b3JpbmcgYSAzLWNvbXBvbmVudCB2ZWN0b3IgKHN1Y2ggYXMgYSBwb3NpdGlvbiwKICAgIAkJICogbm9ybWFsLCBvciBjb2xvciksIHRoZW4gdGhlIHZhbHVlIHNob3VsZCBiZSBgM2AuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqLwogICAgCQl0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7CgogICAgCQkvKioKICAgIAkJICogUmVwcmVzZW50cyB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRoaXMgYnVmZmVyIGF0dHJpYnV0ZSBzdG9yZXMuIEl0IGlzIGludGVybmFsbHkgY29tcHV0ZWQKICAgIAkJICogYnkgZGl2aWRpbmcgdGhlIGBhcnJheWAgbGVuZ3RoIGJ5IHRoZSBgaXRlbVNpemVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICovCiAgICAJCXRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gaXRlbVNpemUgOiAwOwoKICAgIAkJLyoqCiAgICAJCSAqIEFwcGxpZXMgdG8gaW50ZWdlciBkYXRhIG9ubHkuIEluZGljYXRlcyBob3cgdGhlIHVuZGVybHlpbmcgZGF0YSBpbiB0aGUgYnVmZmVyIG1hcHMgdG8KICAgIAkJICogdGhlIHZhbHVlcyBpbiB0aGUgR0xTTCBjb2RlLiBGb3IgaW5zdGFuY2UsIGlmIGBhcnJheWAgaXMgYW4gaW5zdGFuY2Ugb2YgYFVJbnQxNkFycmF5YCwKICAgIAkJICogYW5kIGBub3JtYWxpemVkYCBpcyBgdHJ1ZWAsIHRoZSB2YWx1ZXMgYDAgLSArNjU1MzVgIGluIHRoZSBhcnJheSBkYXRhIHdpbGwgYmUgbWFwcGVkIHRvCiAgICAJCSAqIGAwLjBmIC0gKzEuMGZgIGluIHRoZSBHTFNMIGF0dHJpYnV0ZS4gSWYgYG5vcm1hbGl6ZWRgIGlzIGBmYWxzZWAsIHRoZSB2YWx1ZXMgd2lsbCBiZSBjb252ZXJ0ZWQKICAgIAkJICogdG8gZmxvYXRzIHVubW9kaWZpZWQsIGkuZS4gYDY1NTM1YCBiZWNvbWVzIGA2NTUzNS4wZmAuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKi8KICAgIAkJdGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBpbnRlbmRlZCB1c2FnZSBwYXR0ZXJuIG9mIHRoZSBkYXRhIHN0b3JlIGZvciBvcHRpbWl6YXRpb24gcHVycG9zZXMuCiAgICAJCSAqCiAgICAJCSAqIE5vdGU6IEFmdGVyIHRoZSBpbml0aWFsIHVzZSBvZiBhIGJ1ZmZlciwgaXRzIHVzYWdlIGNhbm5vdCBiZSBjaGFuZ2VkLiBJbnN0ZWFkLAogICAgCQkgKiBpbnN0YW50aWF0ZSBhIG5ldyBvbmUgYW5kIHNldCB0aGUgZGVzaXJlZCB1c2FnZSBiZWZvcmUgdGhlIG5leHQgcmVuZGVyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KFN0YXRpY0RyYXdVc2FnZXxEeW5hbWljRHJhd1VzYWdlfFN0cmVhbURyYXdVc2FnZXxTdGF0aWNSZWFkVXNhZ2V8RHluYW1pY1JlYWRVc2FnZXxTdHJlYW1SZWFkVXNhZ2V8U3RhdGljQ29weVVzYWdlfER5bmFtaWNDb3B5VXNhZ2V8U3RyZWFtQ29weVVzYWdlKX0KICAgIAkJICogQGRlZmF1bHQgU3RhdGljRHJhd1VzYWdlCiAgICAJCSAqLwogICAgCQl0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gb25seSB1cGRhdGUgc29tZSBjb21wb25lbnRzIG9mIHN0b3JlZCB2ZWN0b3JzIChmb3IgZXhhbXBsZSwganVzdCB0aGUKICAgIAkJICogY29tcG9uZW50IHJlbGF0ZWQgdG8gY29sb3IpLiBVc2UgdGhlIGBhZGRVcGRhdGVSYW5nZSgpYCBmdW5jdGlvbiB0byBhZGQgcmFuZ2VzIHRvIHRoaXMgYXJyYXkuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxPYmplY3Q+fQogICAgCQkgKi8KICAgIAkJdGhpcy51cGRhdGVSYW5nZXMgPSBbXTsKCiAgICAJCS8qKgogICAgCQkgKiBDb25maWd1cmVzIHRoZSBib3VuZCBHUFUgdHlwZSBmb3IgdXNlIGluIHNoYWRlcnMuCiAgICAJCSAqCiAgICAJCSAqIE5vdGU6IHRoaXMgb25seSBoYXMgYW4gZWZmZWN0IGZvciBpbnRlZ2VyIGFycmF5cyBhbmQgaXMgbm90IGNvbmZpZ3VyYWJsZSBmb3IgZmxvYXQgYXJyYXlzLgogICAgCQkgKiBGb3IgbG93ZXIgcHJlY2lzaW9uIGZsb2F0IHR5cGVzLCB1c2UgYEZsb2F0MTZCdWZmZXJBdHRyaWJ1dGVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7KEZsb2F0VHlwZXxJbnRUeXBlKX0KICAgIAkJICogQGRlZmF1bHQgRmxvYXRUeXBlCiAgICAJCSAqLwogICAgCQl0aGlzLmdwdVR5cGUgPSBGbG9hdFR5cGU7CgogICAgCQkvKioKICAgIAkJICogQSB2ZXJzaW9uIG51bWJlciwgaW5jcmVtZW50ZWQgZXZlcnkgdGltZSB0aGUgYG5lZWRzVXBkYXRlYCBpcyBzZXQgdG8gYHRydWVgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKi8KICAgIAkJdGhpcy52ZXJzaW9uID0gMDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgdGhlIHJlbmRlcmVyIGhhcyB0cmFuc2ZlcnJlZCB0aGUgYXR0cmlidXRlCiAgICAJICogYXJyYXkgZGF0YSB0byB0aGUgR1BVLgogICAgCSAqLwogICAgCW9uVXBsb2FkQ2FsbGJhY2soKSB7fQoKICAgIAkvKioKICAgIAkgKiBGbGFnIHRvIGluZGljYXRlIHRoYXQgdGhpcyBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgYW5kIHNob3VsZCBiZSByZS1zZW50IHRvCiAgICAJICogdGhlIEdQVS4gU2V0IHRoaXMgdG8gYHRydWVgIHdoZW4geW91IG1vZGlmeSB0aGUgdmFsdWUgb2YgdGhlIGFycmF5LgogICAgCSAqCiAgICAJICogQHR5cGUge251bWJlcn0KICAgIAkgKiBAZGVmYXVsdCBmYWxzZQogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICAgIAkgKi8KICAgIAlzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkgewoKICAgIAkJaWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKzsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB1c2FnZSBvZiB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0geyhTdGF0aWNEcmF3VXNhZ2V8RHluYW1pY0RyYXdVc2FnZXxTdHJlYW1EcmF3VXNhZ2V8U3RhdGljUmVhZFVzYWdlfER5bmFtaWNSZWFkVXNhZ2V8U3RyZWFtUmVhZFVzYWdlfFN0YXRpY0NvcHlVc2FnZXxEeW5hbWljQ29weVVzYWdlfFN0cmVhbUNvcHlVc2FnZSl9IHZhbHVlIC0gVGhlIHVzYWdlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKi8KICAgIAlzZXRVc2FnZSggdmFsdWUgKSB7CgogICAgCQl0aGlzLnVzYWdlID0gdmFsdWU7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBZGRzIGEgcmFuZ2Ugb2YgZGF0YSBpbiB0aGUgZGF0YSBhcnJheSB0byBiZSB1cGRhdGVkIG9uIHRoZSBHUFUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBQb3NpdGlvbiBhdCB3aGljaCB0byBzdGFydCB1cGRhdGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIG51bWJlciBvZiBjb21wb25lbnRzIHRvIHVwZGF0ZS4KICAgIAkgKi8KICAgIAlhZGRVcGRhdGVSYW5nZSggc3RhcnQsIGNvdW50ICkgewoKICAgIAkJdGhpcy51cGRhdGVSYW5nZXMucHVzaCggeyBzdGFydCwgY291bnQgfSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENsZWFycyB0aGUgdXBkYXRlIHJhbmdlcy4KICAgIAkgKi8KICAgIAljbGVhclVwZGF0ZVJhbmdlcygpIHsKCiAgICAJCXRoaXMudXBkYXRlUmFuZ2VzLmxlbmd0aCA9IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBzb3VyY2UgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljb3B5KCBzb3VyY2UgKSB7CgogICAgCQl0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTsKICAgIAkJdGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApOwogICAgCQl0aGlzLml0ZW1TaXplID0gc291cmNlLml0ZW1TaXplOwogICAgCQl0aGlzLmNvdW50ID0gc291cmNlLmNvdW50OwogICAgCQl0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDsKCiAgICAJCXRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7CiAgICAJCXRoaXMuZ3B1VHlwZSA9IHNvdXJjZS5ncHVUeXBlOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIGEgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUgdG8gdGhpcyBvbmUuIFRoZSBzdGFydAogICAgCSAqIGFuZCBkZXN0aW5hdGlvbiBwb3NpdGlvbiBpbiB0aGUgYXR0cmlidXRlIGJ1ZmZlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IHRoZQogICAgCSAqIGdpdmVuIGluZGljZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgxIC0gVGhlIGRlc3RpbmF0aW9uIGluZGV4IGludG8gdGhpcyBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSB0byBjb3B5IGZyb20uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4MiAtIFRoZSBzb3VyY2UgaW5kZXggaW50byB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY29weUF0KCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkgewoKICAgIAkJaW5kZXgxICo9IHRoaXMuaXRlbVNpemU7CiAgICAJCWluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQl0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvcGllcyB0aGUgZ2l2ZW4gYXJyYXkgZGF0YSBpbnRvIHRoaXMgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KFR5cGVkQXJyYXl8QXJyYXkpfSBhcnJheSAtIFRoZSBhcnJheSB0byBjb3B5LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljb3B5QXJyYXkoIGFycmF5ICkgewoKICAgIAkJdGhpcy5hcnJheS5zZXQoIGFycmF5ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBcHBsaWVzIHRoZSBnaXZlbiAzeDMgbWF0cml4IHRvIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIFdvcmtzIHdpdGgKICAgIAkgKiBpdGVtIHNpemUgYDJgIGFuZCBgM2AuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbWF0cml4IHRvIGFwcGx5LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlhcHBseU1hdHJpeDMoIG0gKSB7CgogICAgCQlpZiAoIHRoaXMuaXRlbVNpemUgPT09IDIgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCV92ZWN0b3IyJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApOwogICAgCQkJCV92ZWN0b3IyJDEuYXBwbHlNYXRyaXgzKCBtICk7CgogICAgCQkJCXRoaXMuc2V0WFkoIGksIF92ZWN0b3IyJDEueCwgX3ZlY3RvcjIkMS55ICk7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMyApIHsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJX3ZlY3RvciQ5LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTsKICAgIAkJCQlfdmVjdG9yJDkuYXBwbHlNYXRyaXgzKCBtICk7CgogICAgCQkJCXRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyB0aGUgZ2l2ZW4gNHg0IG1hdHJpeCB0byB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBPbmx5IHdvcmtzIHdpdGgKICAgIAkgKiBpdGVtIHNpemUgYDNgLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBhcHBseS4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXg0KCBtICkgewoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJX3ZlY3RvciQ5LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTsKCiAgICAJCQlfdmVjdG9yJDkuYXBwbHlNYXRyaXg0KCBtICk7CgogICAgCQkJdGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFwcGxpZXMgdGhlIGdpdmVuIDN4MyBub3JtYWwgbWF0cml4IHRvIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIE9ubHkgd29ya3Mgd2l0aAogICAgCSAqIGl0ZW0gc2l6ZSBgM2AuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbm9ybWFsIG1hdHJpeCB0byBhcHBseS4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJYXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQlfdmVjdG9yJDkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApOwoKICAgIAkJCV92ZWN0b3IkOS5hcHBseU5vcm1hbE1hdHJpeCggbSApOwoKICAgIAkJCXRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBBcHBsaWVzIHRoZSBnaXZlbiA0eDQgbWF0cml4IHRvIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIE9ubHkgd29ya3Mgd2l0aAogICAgCSAqIGl0ZW0gc2l6ZSBgM2AgYW5kIHdpdGggZGlyZWN0aW9uIHZlY3RvcnMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4IHRvIGFwcGx5LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQlfdmVjdG9yJDkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApOwoKICAgIAkJCV92ZWN0b3IkOS50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTsKCiAgICAJCQl0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ5LngsIF92ZWN0b3IkOS55LCBfdmVjdG9yJDkueiApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZ2l2ZW4gYXJyYXkgZGF0YSBpbiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KFR5cGVkQXJyYXl8QXJyYXkpfSB2YWx1ZSAtIFRoZSBhcnJheSBkYXRhIHRvIHNldC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBvZmZzZXQgaW4gdGhpcyBidWZmZXIgYXR0cmlidXRlJ3MgYXJyYXkuCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldCggdmFsdWUsIG9mZnNldCA9IDAgKSB7CgogICAgCQkvLyBNYXRjaGluZyBCdWZmZXJBdHRyaWJ1dGUgY29uc3RydWN0b3IsIGRvIG5vdCBub3JtYWxpemUgdGhlIGFycmF5LgogICAgCQl0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgZ2l2ZW4gY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGNvbXBvbmVudCAtIFRoZSBjb21wb25lbnQgaW5kZXguCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmV0dXJuZWQgdmFsdWUuCiAgICAJICovCiAgICAJZ2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50ICkgewoKICAgIAkJbGV0IHZhbHVlID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgY29tcG9uZW50IF07CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHZhbHVlID0gZGVub3JtYWxpemUoIHZhbHVlLCB0aGlzLmFycmF5ICk7CgogICAgCQlyZXR1cm4gdmFsdWU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhlIGdpdmVuIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBjb21wb25lbnQgLSBUaGUgY29tcG9uZW50IGluZGV4LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldENvbXBvbmVudCggaW5kZXgsIGNvbXBvbmVudCwgdmFsdWUgKSB7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHZhbHVlID0gbm9ybWFsaXplJDMoIHZhbHVlLCB0aGlzLmFycmF5ICk7CgogICAgCQl0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyBjb21wb25lbnQgXSA9IHZhbHVlOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB4IGNvbXBvbmVudC4KICAgIAkgKi8KICAgIAlnZXRYKCBpbmRleCApIHsKCiAgICAJCWxldCB4ID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF07CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBkZW5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApOwoKICAgIAkJcmV0dXJuIHg7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBzZXQuCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldFgoIGluZGV4LCB4ICkgewoKICAgIAkJaWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gbm9ybWFsaXplJDMoIHgsIHRoaXMuYXJyYXkgKTsKCiAgICAJCXRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdID0geDsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgeSBjb21wb25lbnQuCiAgICAJICovCiAgICAJZ2V0WSggaW5kZXggKSB7CgogICAgCQlsZXQgeSA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXTsKCiAgICAJCWlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IGRlbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7CgogICAgCQlyZXR1cm4geTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0WSggaW5kZXgsIHkgKSB7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBub3JtYWxpemUkMyggeSwgdGhpcy5hcnJheSApOwoKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdID0geTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgeiBjb21wb25lbnQuCiAgICAJICovCiAgICAJZ2V0WiggaW5kZXggKSB7CgogICAgCQlsZXQgeiA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXTsKCiAgICAJCWlmICggdGhpcy5ub3JtYWxpemVkICkgeiA9IGRlbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7CgogICAgCQlyZXR1cm4gejsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0WiggaW5kZXgsIHogKSB7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBub3JtYWxpemUkMyggeiwgdGhpcy5hcnJheSApOwoKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdID0gejsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgdyBjb21wb25lbnQuCiAgICAJICovCiAgICAJZ2V0VyggaW5kZXggKSB7CgogICAgCQlsZXQgdyA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXTsKCiAgICAJCWlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IGRlbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7CgogICAgCQlyZXR1cm4gdzsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB3IC0gVGhlIHZhbHVlIHRvIHNldC4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0VyggaW5kZXgsIHcgKSB7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBub3JtYWxpemUkMyggdywgdGhpcy5hcnJheSApOwoKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdID0gdzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHggYW5kIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgZm9yIHRoZSB4IGNvbXBvbmVudCB0byBzZXQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgZm9yIHRoZSB5IGNvbXBvbmVudCB0byBzZXQuCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldFhZKCBpbmRleCwgeCwgeSApIHsKCiAgICAJCWluZGV4ICo9IHRoaXMuaXRlbVNpemU7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHsKCiAgICAJCQl4ID0gbm9ybWFsaXplJDMoIHgsIHRoaXMuYXJyYXkgKTsKICAgIAkJCXkgPSBub3JtYWxpemUkMyggeSwgdGhpcy5hcnJheSApOwoKICAgIAkJfQoKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4OwogICAgCQl0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB4LCB5IGFuZCB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIGZvciB0aGUgeCBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIGZvciB0aGUgeSBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIGZvciB0aGUgeiBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXRYWVooIGluZGV4LCB4LCB5LCB6ICkgewoKICAgIAkJaW5kZXggKj0gdGhpcy5pdGVtU2l6ZTsKCiAgICAJCWlmICggdGhpcy5ub3JtYWxpemVkICkgewoKICAgIAkJCXggPSBub3JtYWxpemUkMyggeCwgdGhpcy5hcnJheSApOwogICAgCQkJeSA9IG5vcm1hbGl6ZSQzKCB5LCB0aGlzLmFycmF5ICk7CiAgICAJCQl6ID0gbm9ybWFsaXplJDMoIHosIHRoaXMuYXJyYXkgKTsKCiAgICAJCX0KCiAgICAJCXRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDsKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5OwogICAgCQl0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB4LCB5LCB6IGFuZCB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIGZvciB0aGUgeCBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIGZvciB0aGUgeSBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIGZvciB0aGUgeiBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB3IC0gVGhlIHZhbHVlIGZvciB0aGUgdyBjb21wb25lbnQgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHsKCiAgICAJCWluZGV4ICo9IHRoaXMuaXRlbVNpemU7CgogICAgCQlpZiAoIHRoaXMubm9ybWFsaXplZCApIHsKCiAgICAJCQl4ID0gbm9ybWFsaXplJDMoIHgsIHRoaXMuYXJyYXkgKTsKICAgIAkJCXkgPSBub3JtYWxpemUkMyggeSwgdGhpcy5hcnJheSApOwogICAgCQkJeiA9IG5vcm1hbGl6ZSQzKCB6LCB0aGlzLmFycmF5ICk7CiAgICAJCQl3ID0gbm9ybWFsaXplJDMoIHcsIHRoaXMuYXJyYXkgKTsKCiAgICAJCX0KCiAgICAJCXRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDsKICAgIAkJdGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5OwogICAgCQl0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7CiAgICAJCXRoaXMuYXJyYXlbIGluZGV4ICsgMyBdID0gdzsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgdGhlIFJlbmRlcmVyIGhhcyB0cmFuc2ZlcnJlZAogICAgCSAqIHRoZSBhdHRyaWJ1dGUgYXJyYXkgZGF0YSB0byB0aGUgR1BVLiBDYW4gYmUgdXNlZCB0byBwZXJmb3JtIGNsZWFuLXVwIG9wZXJhdGlvbnMgYWZ0ZXIKICAgIAkgKiB0aGUgdXBsb2FkIHdoZW4gYXR0cmlidXRlIGRhdGEgYXJlIG5vdCBuZWVkZWQgYW55bW9yZSBvbiB0aGUgQ1BVIHNpZGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBgb25VcGxvYWQoKWAgY2FsbGJhY2suCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCW9uVXBsb2FkKCBjYWxsYmFjayApIHsKCiAgICAJCXRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyBidWZmZXIgYXR0cmlidXRlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5hcnJheSwgdGhpcy5pdGVtU2l6ZSApLmNvcHkoIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXJpYWxpemVzIHRoZSBidWZmZXIgYXR0cmlidXRlIGludG8gSlNPTi4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKi8KICAgIAl0b0pTT04oKSB7CgogICAgCQljb25zdCBkYXRhID0gewogICAgCQkJaXRlbVNpemU6IHRoaXMuaXRlbVNpemUsCiAgICAJCQl0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsCiAgICAJCQlhcnJheTogQXJyYXkuZnJvbSggdGhpcy5hcnJheSApLAogICAgCQkJbm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkCiAgICAJCX07CgogICAgCQlpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7CiAgICAJCWlmICggdGhpcy51c2FnZSAhPT0gU3RhdGljRHJhd1VzYWdlICkgZGF0YS51c2FnZSA9IHRoaXMudXNhZ2U7CgogICAgCQlyZXR1cm4gZGF0YTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlbmllbnQgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgYFVJbnQxNmAgYnVmZmVyIGF0dHJpYnV0ZSB3aXRoCiAgICAgKiBhIHBsYWluIGBBcnJheWAgaW5zdGFuY2UuCiAgICAgKgogICAgICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZQogICAgICovCiAgICBjbGFzcyBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fFVpbnQxNkFycmF5KX0gYXJyYXkgLSBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1TaXplIC0gVGhlIGl0ZW0gc2l6ZS4KICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7CgogICAgCQlzdXBlciggbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQ29udmVuaWVudCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBgVUludDMyYCBidWZmZXIgYXR0cmlidXRlIHdpdGgKICAgICAqIGEgcGxhaW4gYEFycmF5YCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgQnVmZmVyQXR0cmlidXRlCiAgICAgKi8KICAgIGNsYXNzIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIGF0dHJpYnV0ZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KEFycmF5PG51bWJlcj58VWludDMyQXJyYXkpfSBhcnJheSAtIFRoZSBhcnJheSBob2xkaW5nIHRoZSBhdHRyaWJ1dGUgZGF0YS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHsKCiAgICAJCXN1cGVyKCBuZXcgVWludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZW5pZW50IGNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIGBGbG9hdDMyYCBidWZmZXIgYXR0cmlidXRlIHdpdGgKICAgICAqIGEgcGxhaW4gYEFycmF5YCBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgQnVmZmVyQXR0cmlidXRlCiAgICAgKi8KICAgIGNsYXNzIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fEZsb2F0MzJBcnJheSl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbbm9ybWFsaXplZD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBkYXRhIGFyZSBub3JtYWxpemVkIG9yIG5vdC4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkgewoKICAgIAkJc3VwZXIoIG5ldyBGbG9hdDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7CgogICAgCX0KCiAgICB9CgogICAgbGV0IF9pZCQxID0gMDsKCiAgICBjb25zdCBfbTEkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTsKICAgIGNvbnN0IF9vYmogPSAvKkBfX1BVUkVfXyovIG5ldyBPYmplY3QzRCgpOwogICAgY29uc3QgX29mZnNldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9ib3gkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTsKICAgIGNvbnN0IF9ib3hNb3JwaFRhcmdldHMgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7CiAgICBjb25zdCBfdmVjdG9yJDggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgLyoqCiAgICAgKiBBIHJlcHJlc2VudGF0aW9uIG9mIG1lc2gsIGxpbmUsIG9yIHBvaW50IGdlb21ldHJ5LiBJbmNsdWRlcyB2ZXJ0ZXgKICAgICAqIHBvc2l0aW9ucywgZmFjZSBpbmRpY2VzLCBub3JtYWxzLCBjb2xvcnMsIFVWcywgYW5kIGN1c3RvbSBhdHRyaWJ1dGVzCiAgICAgKiB3aXRoaW4gYnVmZmVycywgcmVkdWNpbmcgdGhlIGNvc3Qgb2YgcGFzc2luZyBhbGwgdGhpcyBkYXRhIHRvIHRoZSBHUFUuCiAgICAgKgogICAgICogYGBganMKICAgICAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7CiAgICAgKiAvLyBjcmVhdGUgYSBzaW1wbGUgc3F1YXJlIHNoYXBlLiBXZSBkdXBsaWNhdGUgdGhlIHRvcCBsZWZ0IGFuZCBib3R0b20gcmlnaHQKICAgICAqIC8vIHZlcnRpY2VzIGJlY2F1c2UgZWFjaCB2ZXJ0ZXggbmVlZHMgdG8gYXBwZWFyIG9uY2UgcGVyIHRyaWFuZ2xlLgogICAgICogY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBbCiAgICAgKiAJLTEuMCwgLTEuMCwgIDEuMCwgLy8gdjAKICAgICAqIAkgMS4wLCAtMS4wLCAgMS4wLCAvLyB2MQogICAgICogCSAxLjAsICAxLjAsICAxLjAsIC8vIHYyCiAgICAgKgogICAgICogCSAxLjAsICAxLjAsICAxLjAsIC8vIHYzCiAgICAgKiAJLTEuMCwgIDEuMCwgIDEuMCwgLy8gdjQKICAgICAqIAktMS4wLCAtMS4wLCAgMS4wICAvLyB2NQogICAgICogXSApOwogICAgICogLy8gaXRlbVNpemUgPSAzIGJlY2F1c2UgdGhlcmUgYXJlIDMgdmFsdWVzIChjb21wb25lbnRzKSBwZXIgdmVydGV4CiAgICAgKiBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKICAgICAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmMDAwMCB9ICk7CiAgICAgKiBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApOwogICAgICogYGBgCiAgICAgKgogICAgICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlcgogICAgICovCiAgICBjbGFzcyBCdWZmZXJHZW9tZXRyeSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgZ2VvbWV0cnkuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNCdWZmZXJHZW9tZXRyeSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhlIElEIG9mIHRoZSBnZW9tZXRyeS4KICAgIAkJICoKICAgIAkJICogQG5hbWUgQnVmZmVyR2VvbWV0cnkjaWQKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqLwogICAgCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9pZCQxICsrIH0gKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgVVVJRCBvZiB0aGUgZ2VvbWV0cnkuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtzdHJpbmd9CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKi8KICAgIAkJdGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7CgogICAgCQkvKioKICAgIAkJICogVGhlIG5hbWUgb2YgdGhlIGdlb21ldHJ5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5uYW1lID0gJyc7CiAgICAJCXRoaXMudHlwZSA9ICdCdWZmZXJHZW9tZXRyeSc7CgogICAgCQkvKioKICAgIAkJICogQWxsb3dzIGZvciB2ZXJ0aWNlcyB0byBiZSByZS11c2VkIGFjcm9zcyBtdWx0aXBsZSB0cmlhbmdsZXM7IHRoaXMgaXMKICAgIAkJICogY2FsbGVkIHVzaW5nICJpbmRleGVkIHRyaWFuZ2xlcyIuIEVhY2ggdHJpYW5nbGUgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZQogICAgCQkgKiBpbmRpY2VzIG9mIHRocmVlIHZlcnRpY2VzLiBUaGlzIGF0dHJpYnV0ZSB0aGVyZWZvcmUgc3RvcmVzIHRoZSBpbmRleCBvZgogICAgCQkgKiBlYWNoIHZlcnRleCBmb3IgZWFjaCB0cmlhbmd1bGFyIGZhY2UuIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzZXQsIHRoZQogICAgCQkgKiByZW5kZXJlciBhc3N1bWVzIHRoYXQgZWFjaCB0aHJlZSBjb250aWd1b3VzIHBvc2l0aW9ucyByZXByZXNlbnQgYSBzaW5nbGUgdHJpYW5nbGUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/QnVmZmVyQXR0cmlidXRlfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmluZGV4ID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBBIChzdG9yYWdlKSBidWZmZXIgYXR0cmlidXRlIHdoaWNoIHdhcyBnZW5lcmF0ZWQgd2l0aCBhIGNvbXB1dGUgc2hhZGVyIGFuZAogICAgCQkgKiBub3cgZGVmaW5lcyBpbmRpcmVjdCBkcmF3IGNhbGxzLgogICAgCQkgKgogICAgCQkgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFdlYkdQVVJlbmRlcmVyfSBhbmQgYSBXZWJHUFUgYmFja2VuZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9CdWZmZXJBdHRyaWJ1dGV9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuaW5kaXJlY3QgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZGljdGlvbmFyeSBoYXMgYXMgaWQgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBiZSBzZXQgYW5kIGFzIHZhbHVlCiAgICAJCSAqIHRoZSBidWZmZXIgYXR0cmlidXRlIHRvIHNldCBpdCB0by4gUmF0aGVyIHRoYW4gYWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgZGlyZWN0bHksCiAgICAJCSAqIHVzZSBgc2V0QXR0cmlidXRlKClgIGFuZCBgZ2V0QXR0cmlidXRlKClgIHRvIGFjY2VzcyBhdHRyaWJ1dGVzIG9mIHRoaXMgZ2VvbWV0cnkuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLChCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpPn0KICAgIAkJICovCiAgICAJCXRoaXMuYXR0cmlidXRlcyA9IHt9OwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZGljdGlvbmFyeSBob2xkcyB0aGUgbW9ycGggdGFyZ2V0cyBvZiB0aGUgZ2VvbWV0cnkuCiAgICAJCSAqCiAgICAJCSAqIE5vdGU6IE9uY2UgdGhlIGdlb21ldHJ5IGhhcyBiZWVuIHJlbmRlcmVkLCB0aGUgbW9ycGggYXR0cmlidXRlIGRhdGEgY2Fubm90CiAgICAJCSAqIGJlIGNoYW5nZWQuIFlvdSB3aWxsIGhhdmUgdG8gY2FsbCBgZGlzcG9zZSgpPywgYW5kIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeSBpbnN0YW5jZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge09iamVjdH0KICAgIAkJICovCiAgICAJCXRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307CgogICAgCQkvKioKICAgIAkJICogVXNlZCB0byBjb250cm9sIHRoZSBtb3JwaCB0YXJnZXQgYmVoYXZpb3I7IHdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIG1vcnBoCiAgICAJCSAqIHRhcmdldCBkYXRhIGlzIHRyZWF0ZWQgYXMgcmVsYXRpdmUgb2Zmc2V0cywgcmF0aGVyIHRoYW4gYXMgYWJzb2x1dGUKICAgIAkJICogcG9zaXRpb25zL25vcm1hbHMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFNwbGl0IHRoZSBnZW9tZXRyeSBpbnRvIGdyb3VwcywgZWFjaCBvZiB3aGljaCB3aWxsIGJlIHJlbmRlcmVkIGluIGEKICAgIAkJICogc2VwYXJhdGUgZHJhdyBjYWxsLiBUaGlzIGFsbG93cyBhbiBhcnJheSBvZiBtYXRlcmlhbHMgdG8gYmUgdXNlZCB3aXRoIHRoZSBnZW9tZXRyeS4KICAgIAkJICoKICAgIAkJICogVXNlIGBhZGRHcm91cCgpYCBhbmQgYGNsZWFyR3JvdXBzKClgIHRvIGVkaXQgZ3JvdXBzLCByYXRoZXIgdGhhbiBtb2RpZnlpbmcgdGhpcyBhcnJheSBkaXJlY3RseS4KICAgIAkJICoKICAgIAkJICogRXZlcnkgdmVydGV4IGFuZCBpbmRleCBtdXN0IGJlbG9uZyB0byBleGFjdGx5IG9uZSBncm91cCDigJQgZ3JvdXBzIG11c3Qgbm90IHNoYXJlIHZlcnRpY2VzIG9yCiAgICAJCSAqIGluZGljZXMsIGFuZCBtdXN0IG5vdCBsZWF2ZSB2ZXJ0aWNlcyBvciBpbmRpY2VzIHVudXNlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0FycmF5PE9iamVjdD59CiAgICAJCSAqLwogICAgCQl0aGlzLmdyb3VwcyA9IFtdOwoKICAgIAkJLyoqCiAgICAJCSAqIEJvdW5kaW5nIGJveCBmb3IgdGhlIGdlb21ldHJ5IHdoaWNoIGNhbiBiZSBjYWxjdWxhdGVkIHdpdGggYGNvbXB1dGVCb3VuZGluZ0JveCgpYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0JveDN9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuYm91bmRpbmdCb3ggPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEJvdW5kaW5nIHNwaGVyZSBmb3IgdGhlIGdlb21ldHJ5IHdoaWNoIGNhbiBiZSBjYWxjdWxhdGVkIHdpdGggYGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge1NwaGVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogRGV0ZXJtaW5lcyB0aGUgcGFydCBvZiB0aGUgZ2VvbWV0cnkgdG8gcmVuZGVyLiBUaGlzIHNob3VsZCBub3QgYmUgc2V0IGRpcmVjdGx5LAogICAgCQkgKiBpbnN0ZWFkIHVzZSBgc2V0RHJhd1JhbmdlKClgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7e3N0YXJ0Om51bWJlcixjb3VudDpudW1iZXJ9fQogICAgCQkgKi8KICAgIAkJdGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBjdXN0b20gZGF0YSBhYm91dCB0aGUgZ2VvbWV0cnkuCiAgICAJCSAqIEl0IHNob3VsZCBub3QgaG9sZCByZWZlcmVuY2VzIHRvIGZ1bmN0aW9ucyBhcyB0aGVzZSB3aWxsIG5vdCBiZSBjbG9uZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLnVzZXJEYXRhID0ge307CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhpcyBnZW9tZXRyeS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4gez9CdWZmZXJBdHRyaWJ1dGV9IFRoZSBpbmRleC4gUmV0dXJucyBgbnVsbGAgaWYgbm8gaW5kZXggaXMgZGVmaW5lZC4KICAgIAkgKi8KICAgIAlnZXRJbmRleCgpIHsKCiAgICAJCXJldHVybiB0aGlzLmluZGV4OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIGluZGV4IHRvIHRoaXMgZ2VvbWV0cnkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PG51bWJlcj58QnVmZmVyQXR0cmlidXRlfSBpbmRleCAtIFRoZSBpbmRleCB0byBzZXQuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0SW5kZXgoIGluZGV4ICkgewoKICAgIAkJaWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkgewoKICAgIAkJCXRoaXMuaW5kZXggPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRleCApID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGV4LCAxICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRoaXMuaW5kZXggPSBpbmRleDsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIGluZGlyZWN0IGF0dHJpYnV0ZSB0byB0aGlzIGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGluZGlyZWN0IC0gVGhlIGF0dHJpYnV0ZSBob2xkaW5nIGluZGlyZWN0IGRyYXcgY2FsbHMuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0SW5kaXJlY3QoIGluZGlyZWN0ICkgewoKICAgIAkJdGhpcy5pbmRpcmVjdCA9IGluZGlyZWN0OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgaW5kaXJlY3QgYXR0cmlidXRlIG9mIHRoaXMgZ2VvbWV0cnkuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHs/QnVmZmVyQXR0cmlidXRlfSBUaGUgaW5kaXJlY3QgYXR0cmlidXRlLiBSZXR1cm5zIGBudWxsYCBpZiBubyBpbmRpcmVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZC4KICAgIAkgKi8KICAgIAlnZXRJbmRpcmVjdCgpIHsKCiAgICAJCXJldHVybiB0aGlzLmluZGlyZWN0OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGJ1ZmZlciBhdHRyaWJ1dGUgZm9yIHRoZSBnaXZlbiBuYW1lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYXR0cmlidXRlIG5hbWUuCiAgICAJICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfHVuZGVmaW5lZH0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUuCiAgICAJICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBub3QgYXR0cmlidXRlIGhhcyBiZWVuIGZvdW5kLgogICAgCSAqLwogICAgCWdldEF0dHJpYnV0ZSggbmFtZSApIHsKCiAgICAJCXJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBnaXZlbiBhdHRyaWJ1dGUgZm9yIHRoZSBnaXZlbiBuYW1lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYXR0cmlidXRlIG5hbWUuCiAgICAJICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBhdHRyaWJ1dGUgdG8gc2V0LgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICkgewoKICAgIAkJdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF0gPSBhdHRyaWJ1dGU7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEZWxldGVzIHRoZSBhdHRyaWJ1dGUgZm9yIHRoZSBnaXZlbiBuYW1lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gZGVsZXRlLgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWRlbGV0ZUF0dHJpYnV0ZSggbmFtZSApIHsKCiAgICAJCWRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgZ2VvbWV0cnkgaGFzIGFuIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIG5hbWUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBhdHRyaWJ1dGUgbmFtZS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgZ2VvbWV0cnkgaGFzIGFuIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIG5hbWUgb3Igbm90LgogICAgCSAqLwogICAgCWhhc0F0dHJpYnV0ZSggbmFtZSApIHsKCiAgICAJCXJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFkZHMgYSBncm91cCB0byB0aGlzIGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBkcmF3IGNhbGwuIFRoYXQgaXMgdGhlIGZpcnN0CiAgICAJICogdmVydGV4IGZvciBub24taW5kZXhlZCBnZW9tZXRyeSwgb3RoZXJ3aXNlIHRoZSBmaXJzdCB0cmlhbmdsZSBpbmRleC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBTcGVjaWZpZXMgaG93IG1hbnkgdmVydGljZXMgKG9yIGluZGljZXMpIGFyZSBwYXJ0IG9mIHRoaXMgZ3JvdXAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttYXRlcmlhbEluZGV4PTBdIC0gVGhlIG1hdGVyaWFsIGFycmF5IGluZGV4IHRvIHVzZS4KICAgIAkgKi8KICAgIAlhZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ID0gMCApIHsKCiAgICAJCXRoaXMuZ3JvdXBzLnB1c2goIHsKCiAgICAJCQlzdGFydDogc3RhcnQsCiAgICAJCQljb3VudDogY291bnQsCiAgICAJCQltYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4CgogICAgCQl9ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ2xlYXJzIGFsbCBncm91cHMuCiAgICAJICovCiAgICAJY2xlYXJHcm91cHMoKSB7CgogICAgCQl0aGlzLmdyb3VwcyA9IFtdOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGRyYXcgcmFuZ2UgZm9yIHRoaXMgZ2VvbWV0cnkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgZmlyc3QgdmVydGV4IGZvciBub24taW5kZXhlZCBnZW9tZXRyeSwgb3RoZXJ3aXNlIHRoZSBmaXJzdCB0cmlhbmdsZSBpbmRleC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBGb3Igbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnksIGBjb3VudGAgaXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcyB0byByZW5kZXIuCiAgICAJICogRm9yIGluZGV4ZWQgQnVmZmVyR2VvbWV0cnksIGBjb3VudGAgaXMgdGhlIG51bWJlciBvZiBpbmRpY2VzIHRvIHJlbmRlci4KICAgIAkgKi8KICAgIAlzZXREcmF3UmFuZ2UoIHN0YXJ0LCBjb3VudCApIHsKCiAgICAJCXRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7CiAgICAJCXRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyB0aGUgZ2l2ZW4gNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byB0aGUgZ2VvbWV0cnkuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSBtYXRyaXggdG8gYXBwbHkuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJYXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7CgogICAgCQljb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjsKCiAgICAJCWlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlwb3NpdGlvbi5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoKICAgIAkJCXBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IG5vcm1hbCA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7CgogICAgCQlpZiAoIG5vcm1hbCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWNvbnN0IG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTsKCiAgICAJCQlub3JtYWwuYXBwbHlOb3JtYWxNYXRyaXgoIG5vcm1hbE1hdHJpeCApOwoKICAgIAkJCW5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQl9CgogICAgCQljb25zdCB0YW5nZW50ID0gdGhpcy5hdHRyaWJ1dGVzLnRhbmdlbnQ7CgogICAgCQlpZiAoIHRhbmdlbnQgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl0YW5nZW50LnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICk7CgogICAgCQkJdGFuZ2VudC5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbGllcyB0aGUgcm90YXRpb24gcmVwcmVzZW50ZWQgYnkgdGhlIFF1YXRlcm5pb24gdG8gdGhlIGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIFF1YXRlcm5pb24gdG8gYXBwbHkuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJYXBwbHlRdWF0ZXJuaW9uKCBxICkgewoKICAgIAkJX20xJDMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTsKCiAgICAJCXRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUm90YXRlcyB0aGUgZ2VvbWV0cnkgYWJvdXQgdGhlIFggYXhpcy4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lCiAgICAJICogb3BlcmF0aW9uLCBhbmQgbm90IGR1cmluZyBhIGxvb3AuIFVzZSB7QGxpbmsgT2JqZWN0M0Qjcm90YXRpb259IGZvciB0eXBpY2FsCiAgICAJICogcmVhbC10aW1lIG1lc2ggcm90YXRpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlyb3RhdGVYKCBhbmdsZSApIHsKCiAgICAJCS8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzCgogICAgCQlfbTEkMy5tYWtlUm90YXRpb25YKCBhbmdsZSApOwoKICAgIAkJdGhpcy5hcHBseU1hdHJpeDQoIF9tMSQzICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSb3RhdGVzIHRoZSBnZW9tZXRyeSBhYm91dCB0aGUgWSBheGlzLiBUaGlzIGlzIHR5cGljYWxseSBkb25lIGFzIGEgb25lIHRpbWUKICAgIAkgKiBvcGVyYXRpb24sIGFuZCBub3QgZHVyaW5nIGEgbG9vcC4gVXNlIHtAbGluayBPYmplY3QzRCNyb3RhdGlvbn0gZm9yIHR5cGljYWwKICAgIAkgKiByZWFsLXRpbWUgbWVzaCByb3RhdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXJvdGF0ZVkoIGFuZ2xlICkgewoKICAgIAkJLy8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB5LWF4aXMKCiAgICAJCV9tMSQzLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7CgogICAgCQl0aGlzLmFwcGx5TWF0cml4NCggX20xJDMgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJvdGF0ZXMgdGhlIGdlb21ldHJ5IGFib3V0IHRoZSBaIGF4aXMuIFRoaXMgaXMgdHlwaWNhbGx5IGRvbmUgYXMgYSBvbmUgdGltZQogICAgCSAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI3JvdGF0aW9ufSBmb3IgdHlwaWNhbAogICAgCSAqIHJlYWwtdGltZSBtZXNoIHJvdGF0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJcm90YXRlWiggYW5nbGUgKSB7CgogICAgCQkvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpcwoKICAgIAkJX20xJDMubWFrZVJvdGF0aW9uWiggYW5nbGUgKTsKCiAgICAJCXRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVHJhbnNsYXRlcyB0aGUgZ2VvbWV0cnkuIFRoaXMgaXMgdHlwaWNhbGx5IGRvbmUgYXMgYSBvbmUgdGltZQogICAgCSAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI3Bvc2l0aW9ufSBmb3IgdHlwaWNhbAogICAgCSAqIHJlYWwtdGltZSBtZXNoIHJvdGF0aW9uLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBvZmZzZXQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBvZmZzZXQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeiBvZmZzZXQuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJdHJhbnNsYXRlKCB4LCB5LCB6ICkgewoKICAgIAkJLy8gdHJhbnNsYXRlIGdlb21ldHJ5CgogICAgCQlfbTEkMy5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTsKCiAgICAJCXRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2NhbGVzIHRoZSBnZW9tZXRyeS4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lCiAgICAJICogb3BlcmF0aW9uLCBhbmQgbm90IGR1cmluZyBhIGxvb3AuIFVzZSB7QGxpbmsgT2JqZWN0M0Qjc2NhbGV9IGZvciB0eXBpY2FsCiAgICAJICogcmVhbC10aW1lIG1lc2ggcm90YXRpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IHNjYWxlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgc2NhbGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeiBzY2FsZS4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzY2FsZSggeCwgeSwgeiApIHsKCiAgICAJCS8vIHNjYWxlIGdlb21ldHJ5CgogICAgCQlfbTEkMy5tYWtlU2NhbGUoIHgsIHksIHogKTsKCiAgICAJCXRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMyApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUm90YXRlcyB0aGUgZ2VvbWV0cnkgdG8gZmFjZSBhIHBvaW50IGluIDNEIHNwYWNlLiBUaGlzIGlzIHR5cGljYWxseSBkb25lIGFzIGEgb25lIHRpbWUKICAgIAkgKiBvcGVyYXRpb24sIGFuZCBub3QgZHVyaW5nIGEgbG9vcC4gVXNlIHtAbGluayBPYmplY3QzRCNsb29rQXR9IGZvciB0eXBpY2FsCiAgICAJICogcmVhbC10aW1lIG1lc2ggcm90YXRpb24uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHZlY3RvciAtIFRoZSB0YXJnZXQgcG9pbnQuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJbG9va0F0KCB2ZWN0b3IgKSB7CgogICAgCQlfb2JqLmxvb2tBdCggdmVjdG9yICk7CgogICAgCQlfb2JqLnVwZGF0ZU1hdHJpeCgpOwoKICAgIAkJdGhpcy5hcHBseU1hdHJpeDQoIF9vYmoubWF0cml4ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDZW50ZXIgdGhlIGdlb21ldHJ5IGJhc2VkIG9uIGl0cyBib3VuZGluZyBib3guCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljZW50ZXIoKSB7CgogICAgCQl0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpOwoKICAgIAkJdGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIF9vZmZzZXQgKS5uZWdhdGUoKTsKCiAgICAJCXRoaXMudHJhbnNsYXRlKCBfb2Zmc2V0LngsIF9vZmZzZXQueSwgX29mZnNldC56ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEZWZpbmVzIGEgZ2VvbWV0cnkgYnkgY3JlYXRpbmcgYSBgcG9zaXRpb25gIGF0dHJpYnV0ZSBiYXNlZCBvbiB0aGUgZ2l2ZW4gYXJyYXkgb2YgcG9pbnRzLiBUaGUgYXJyYXkKICAgIAkgKiBjYW4gaG9sZCAyRCBvciAzRCB2ZWN0b3JzLiBXaGVuIHVzaW5nIHR3by1kaW1lbnNpb25hbCBkYXRhLCB0aGUgYHpgIGNvb3JkaW5hdGUgZm9yIGFsbCB2ZXJ0aWNlcyBpcwogICAgCSAqIHNldCB0byBgMGAuCiAgICAJICoKICAgIAkgKiBJZiB0aGUgbWV0aG9kIGlzIHVzZWQgd2l0aCBhbiBleGlzdGluZyBgcG9zaXRpb25gIGF0dHJpYnV0ZSwgdGhlIHZlcnRleCBkYXRhIGFyZSBvdmVyd3JpdHRlbiB3aXRoIHRoZQogICAgCSAqIGRhdGEgZnJvbSB0aGUgYXJyYXkuIFRoZSBsZW5ndGggb2YgdGhlIGFycmF5IG11c3QgbWF0Y2ggdGhlIHZlcnRleCBjb3VudC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj58QXJyYXk8VmVjdG9yMz59IHBvaW50cyAtIFRoZSBwb2ludHMuCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0RnJvbVBvaW50cyggcG9pbnRzICkgewoKICAgIAkJY29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApOwoKICAgIAkJaWYgKCBwb3NpdGlvbkF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWNvbnN0IHBvc2l0aW9uID0gW107CgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCWNvbnN0IHBvaW50ID0gcG9pbnRzWyBpIF07CiAgICAJCQkJcG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7CgogICAgCQkJfQoKICAgIAkJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIDMgKSApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zdCBsID0gTWF0aC5taW4oIHBvaW50cy5sZW5ndGgsIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50ICk7IC8vIG1ha2Ugc3VyZSBkYXRhIGRvIG5vdCBleGNlZWQgYnVmZmVyIHNpemUKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCQljb25zdCBwb2ludCA9IHBvaW50c1sgaSBdOwogICAgCQkJCXBvc2l0aW9uQXR0cmlidXRlLnNldFhZWiggaSwgcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7CgogICAgCQkJfQoKICAgIAkJCWlmICggcG9pbnRzLmxlbmd0aCA+IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50ICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogQnVmZmVyIHNpemUgdG9vIHNtYWxsIGZvciBwb2ludHMgZGF0YS4gVXNlIC5kaXNwb3NlKCkgYW5kIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeS4nICk7CgogICAgCQkJfQoKICAgIAkJCXBvc2l0aW9uQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGdlb21ldHJ5LCBhbmQgdXBkYXRlcyB0aGUgYGJvdW5kaW5nQm94YCBtZW1iZXIuCiAgICAJICogVGhlIGJvdW5kaW5nIGJveCBpcyBub3QgY29tcHV0ZWQgYnkgdGhlIGVuZ2luZTsgaXQgbXVzdCBiZSBjb21wdXRlZCBieSB5b3VyIGFwcC4KICAgIAkgKiBZb3UgbWF5IG5lZWQgdG8gcmVjb21wdXRlIHRoZSBib3VuZGluZyBib3ggaWYgdGhlIGdlb21ldHJ5IHZlcnRpY2VzIGFyZSBtb2RpZmllZC4KICAgIAkgKi8KICAgIAljb21wdXRlQm91bmRpbmdCb3goKSB7CgogICAgCQlpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7CgogICAgCQl9CgogICAgCQljb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIAkJY29uc3QgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjsKCiAgICAJCWlmICggcG9zaXRpb24gJiYgcG9zaXRpb24uaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHsKCiAgICAJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIGJveC4nLCB0aGlzICk7CgogICAgCQkJdGhpcy5ib3VuZGluZ0JveC5zZXQoCiAgICAJCQkJbmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSwKICAgIAkJCQluZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApCiAgICAJCQkpOwoKICAgIAkJCXJldHVybjsKCiAgICAJCX0KCiAgICAJCWlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7CgogICAgCQkJLy8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnQKCiAgICAJCQlpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQljb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07CiAgICAJCQkJCV9ib3gkMi5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApOwoKICAgIAkJCQkJaWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKICAgIAkJCQkJCV92ZWN0b3IkOC5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1pbiwgX2JveCQyLm1pbiApOwogICAgCQkJCQkJdGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTsKCiAgICAJCQkJCQlfdmVjdG9yJDguYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5tYXgsIF9ib3gkMi5tYXggKTsKICAgIAkJCQkJCXRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ4ICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCXRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveCQyLm1pbiApOwogICAgCQkJCQkJdGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94JDIubWF4ICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7CgogICAgCQl9CgogICAgCQlpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkgewoKICAgIAkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSAicG9zaXRpb24iIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgc3BoZXJlIG9mIHRoZSBnZW9tZXRyeSwgYW5kIHVwZGF0ZXMgdGhlIGBib3VuZGluZ1NwaGVyZWAgbWVtYmVyLgogICAgCSAqIFRoZSBlbmdpbmUgYXV0b21hdGljYWxseSBjb21wdXRlcyB0aGUgYm91bmRpbmcgc3BoZXJlIHdoZW4gaXQgaXMgbmVlZGVkLCBlLmcuLCBmb3IgcmF5IGNhc3Rpbmcgb3IgdmlldyBmcnVzdHVtIGN1bGxpbmcuCiAgICAJICogWW91IG1heSBuZWVkIHRvIHJlY29tcHV0ZSB0aGUgYm91bmRpbmcgc3BoZXJlIGlmIHRoZSBnZW9tZXRyeSB2ZXJ0aWNlcyBhcmUgbW9kaWZpZWQuCiAgICAJICovCiAgICAJY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkgewoKICAgIAkJaWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgewoKICAgIAkJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7CgogICAgCQl9CgogICAgCQljb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIAkJY29uc3QgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjsKCiAgICAJCWlmICggcG9zaXRpb24gJiYgcG9zaXRpb24uaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHsKCiAgICAJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIHNwaGVyZS4nLCB0aGlzICk7CgogICAgCQkJdGhpcy5ib3VuZGluZ1NwaGVyZS5zZXQoIG5ldyBWZWN0b3IzKCksIEluZmluaXR5ICk7CgogICAgCQkJcmV0dXJuOwoKICAgIAkJfQoKICAgIAkJaWYgKCBwb3NpdGlvbiApIHsKCiAgICAJCQkvLyBmaXJzdCwgZmluZCB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBzcGhlcmUKCiAgICAJCQljb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjsKCiAgICAJCQlfYm94JDIuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTsKCiAgICAJCQkvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudAoKICAgIAkJCWlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7CgogICAgCQkJCWZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJCWNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb25bIGkgXTsKICAgIAkJCQkJX2JveE1vcnBoVGFyZ2V0cy5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApOwoKICAgIAkJCQkJaWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKICAgIAkJCQkJCV92ZWN0b3IkOC5hZGRWZWN0b3JzKCBfYm94JDIubWluLCBfYm94TW9ycGhUYXJnZXRzLm1pbiApOwogICAgCQkJCQkJX2JveCQyLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApOwoKICAgIAkJCQkJCV92ZWN0b3IkOC5hZGRWZWN0b3JzKCBfYm94JDIubWF4LCBfYm94TW9ycGhUYXJnZXRzLm1heCApOwogICAgCQkJCQkJX2JveCQyLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlfYm94JDIuZXhwYW5kQnlQb2ludCggX2JveE1vcnBoVGFyZ2V0cy5taW4gKTsKICAgIAkJCQkJCV9ib3gkMi5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1heCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCV9ib3gkMi5nZXRDZW50ZXIoIGNlbnRlciApOwoKICAgIAkJCS8vIHNlY29uZCwgdHJ5IHRvIGZpbmQgYSBib3VuZGluZ1NwaGVyZSB3aXRoIGEgcmFkaXVzIHNtYWxsZXIgdGhhbiB0aGUKICAgIAkJCS8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2UKCiAgICAJCQlsZXQgbWF4UmFkaXVzU3EgPSAwOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCQlfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGkgKTsKCiAgICAJCQkJbWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciQ4ICkgKTsKCiAgICAJCQl9CgogICAgCQkJLy8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnQKCiAgICAJCQlpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQljb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07CiAgICAJCQkJCWNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTsKCiAgICAJCQkJCWZvciAoIGxldCBqID0gMCwgamwgPSBtb3JwaEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkgewoKICAgIAkJCQkJCV92ZWN0b3IkOC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaiApOwoKICAgIAkJCQkJCWlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7CgogICAgCQkJCQkJCV9vZmZzZXQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGogKTsKICAgIAkJCQkJCQlfdmVjdG9yJDguYWRkKCBfb2Zmc2V0ICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJCW1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IkOCApICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7CgogICAgCQkJaWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHsKCiAgICAJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgInBvc2l0aW9uIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENhbGN1bGF0ZXMgYW5kIGFkZHMgYSB0YW5nZW50IGF0dHJpYnV0ZSB0byB0aGlzIGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogVGhlIGNvbXB1dGF0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBpbmRleGVkIGdlb21ldHJpZXMgYW5kIGlmIHBvc2l0aW9uLCBub3JtYWwsIGFuZCB1diBhdHRyaWJ1dGVzCiAgICAJICogYXJlIGRlZmluZWQuIFdoZW4gdXNpbmcgYSB0YW5nZW50IHNwYWNlIG5vcm1hbCBtYXAsIHByZWZlciB0aGUgTWlra1RTcGFjZSBhbGdvcml0aG0gcHJvdmlkZWQgYnkKICAgIAkgKiB7QGxpbmsgQnVmZmVyR2VvbWV0cnlVdGlscyNjb21wdXRlTWlra1RTcGFjZVRhbmdlbnRzfSBpbnN0ZWFkLgogICAgCSAqLwogICAgCWNvbXB1dGVUYW5nZW50cygpIHsKCiAgICAJCWNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDsKICAgIAkJY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlczsKCiAgICAJCS8vIGJhc2VkIG9uIGh0dHA6Ly93d3cudGVyYXRob24uY29tL2NvZGUvdGFuZ2VudC5odG1sCiAgICAJCS8vIChwZXIgdmVydGV4IHRhbmdlbnRzKQoKICAgIAkJaWYgKCBpbmRleCA9PT0gbnVsbCB8fAogICAgCQkJIGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fAogICAgCQkJIGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQgfHwKICAgIAkJCSBhdHRyaWJ1dGVzLnV2ID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgZmFpbGVkLiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KScgKTsKICAgIAkJCXJldHVybjsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIAkJY29uc3Qgbm9ybWFsQXR0cmlidXRlID0gYXR0cmlidXRlcy5ub3JtYWw7CiAgICAJCWNvbnN0IHV2QXR0cmlidXRlID0gYXR0cmlidXRlcy51djsKCiAgICAJCWlmICggdGhpcy5oYXNBdHRyaWJ1dGUoICd0YW5nZW50JyApID09PSBmYWxzZSApIHsKCiAgICAJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3RhbmdlbnQnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCA0ICogcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKSwgNCApICk7CgogICAgCQl9CgogICAgCQljb25zdCB0YW5nZW50QXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICd0YW5nZW50JyApOwoKICAgIAkJY29uc3QgdGFuMSA9IFtdLCB0YW4yID0gW107CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHsKCiAgICAJCQl0YW4xWyBpIF0gPSBuZXcgVmVjdG9yMygpOwogICAgCQkJdGFuMlsgaSBdID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHZBID0gbmV3IFZlY3RvcjMoKSwKICAgIAkJCXZCID0gbmV3IFZlY3RvcjMoKSwKICAgIAkJCXZDID0gbmV3IFZlY3RvcjMoKSwKCiAgICAJCQl1dkEgPSBuZXcgVmVjdG9yMigpLAogICAgCQkJdXZCID0gbmV3IFZlY3RvcjIoKSwKICAgIAkJCXV2QyA9IG5ldyBWZWN0b3IyKCksCgogICAgCQkJc2RpciA9IG5ldyBWZWN0b3IzKCksCiAgICAJCQl0ZGlyID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCWZ1bmN0aW9uIGhhbmRsZVRyaWFuZ2xlKCBhLCBiLCBjICkgewoKICAgIAkJCXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7CiAgICAJCQl2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYiApOwogICAgCQkJdkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGMgKTsKCiAgICAJCQl1dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXZBdHRyaWJ1dGUsIGEgKTsKICAgIAkJCXV2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCB1dkF0dHJpYnV0ZSwgYiApOwogICAgCQkJdXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2QXR0cmlidXRlLCBjICk7CgogICAgCQkJdkIuc3ViKCB2QSApOwogICAgCQkJdkMuc3ViKCB2QSApOwoKICAgIAkJCXV2Qi5zdWIoIHV2QSApOwogICAgCQkJdXZDLnN1YiggdXZBICk7CgogICAgCQkJY29uc3QgciA9IDEuMCAvICggdXZCLnggKiB1dkMueSAtIHV2Qy54ICogdXZCLnkgKTsKCiAgICAJCQkvLyBzaWxlbnRseSBpZ25vcmUgZGVnZW5lcmF0ZSB1diB0cmlhbmdsZXMgaGF2aW5nIGNvaW5jaWRlbnQgb3IgY29saW5lYXIgdmVydGljZXMKCiAgICAJCQlpZiAoICEgaXNGaW5pdGUoIHIgKSApIHJldHVybjsKCiAgICAJCQlzZGlyLmNvcHkoIHZCICkubXVsdGlwbHlTY2FsYXIoIHV2Qy55ICkuYWRkU2NhbGVkVmVjdG9yKCB2QywgLSB1dkIueSApLm11bHRpcGx5U2NhbGFyKCByICk7CiAgICAJCQl0ZGlyLmNvcHkoIHZDICkubXVsdGlwbHlTY2FsYXIoIHV2Qi54ICkuYWRkU2NhbGVkVmVjdG9yKCB2QiwgLSB1dkMueCApLm11bHRpcGx5U2NhbGFyKCByICk7CgogICAgCQkJdGFuMVsgYSBdLmFkZCggc2RpciApOwogICAgCQkJdGFuMVsgYiBdLmFkZCggc2RpciApOwogICAgCQkJdGFuMVsgYyBdLmFkZCggc2RpciApOwoKICAgIAkJCXRhbjJbIGEgXS5hZGQoIHRkaXIgKTsKICAgIAkJCXRhbjJbIGIgXS5hZGQoIHRkaXIgKTsKICAgIAkJCXRhbjJbIGMgXS5hZGQoIHRkaXIgKTsKCiAgICAJCX0KCiAgICAJCWxldCBncm91cHMgPSB0aGlzLmdyb3VwczsKCiAgICAJCWlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHsKCiAgICAJCQlncm91cHMgPSBbIHsKICAgIAkJCQlzdGFydDogMCwKICAgIAkJCQljb3VudDogaW5kZXguY291bnQKICAgIAkJCX0gXTsKCiAgICAJCX0KCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7CgogICAgCQkJY29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTsKCiAgICAJCQljb25zdCBzdGFydCA9IGdyb3VwLnN0YXJ0OwogICAgCQkJY29uc3QgY291bnQgPSBncm91cC5jb3VudDsKCiAgICAJCQlmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkgewoKICAgIAkJCQloYW5kbGVUcmlhbmdsZSgKICAgIAkJCQkJaW5kZXguZ2V0WCggaiArIDAgKSwKICAgIAkJCQkJaW5kZXguZ2V0WCggaiArIDEgKSwKICAgIAkJCQkJaW5kZXguZ2V0WCggaiArIDIgKQogICAgCQkJCSk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJY29uc3QgdG1wID0gbmV3IFZlY3RvcjMoKSwgdG1wMiA9IG5ldyBWZWN0b3IzKCk7CiAgICAJCWNvbnN0IG4gPSBuZXcgVmVjdG9yMygpLCBuMiA9IG5ldyBWZWN0b3IzKCk7CgogICAgCQlmdW5jdGlvbiBoYW5kbGVWZXJ0ZXgoIHYgKSB7CgogICAgCQkJbi5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHYgKTsKICAgIAkJCW4yLmNvcHkoIG4gKTsKCiAgICAJCQljb25zdCB0ID0gdGFuMVsgdiBdOwoKICAgIAkJCS8vIEdyYW0tU2NobWlkdCBvcnRob2dvbmFsaXplCgogICAgCQkJdG1wLmNvcHkoIHQgKTsKICAgIAkJCXRtcC5zdWIoIG4ubXVsdGlwbHlTY2FsYXIoIG4uZG90KCB0ICkgKSApLm5vcm1hbGl6ZSgpOwoKICAgIAkJCS8vIENhbGN1bGF0ZSBoYW5kZWRuZXNzCgogICAgCQkJdG1wMi5jcm9zc1ZlY3RvcnMoIG4yLCB0ICk7CiAgICAJCQljb25zdCB0ZXN0ID0gdG1wMi5kb3QoIHRhbjJbIHYgXSApOwogICAgCQkJY29uc3QgdyA9ICggdGVzdCA8IDAuMCApID8gLTEgOiAxLjA7CgogICAgCQkJdGFuZ2VudEF0dHJpYnV0ZS5zZXRYWVpXKCB2LCB0bXAueCwgdG1wLnksIHRtcC56LCB3ICk7CgogICAgCQl9CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkgewoKICAgIAkJCWNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07CgogICAgCQkJY29uc3Qgc3RhcnQgPSBncm91cC5zdGFydDsKICAgIAkJCWNvbnN0IGNvdW50ID0gZ3JvdXAuY291bnQ7CgogICAgCQkJZm9yICggbGV0IGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHsKCiAgICAJCQkJaGFuZGxlVmVydGV4KCBpbmRleC5nZXRYKCBqICsgMCApICk7CiAgICAJCQkJaGFuZGxlVmVydGV4KCBpbmRleC5nZXRYKCBqICsgMSApICk7CiAgICAJCQkJaGFuZGxlVmVydGV4KCBpbmRleC5nZXRYKCBqICsgMiApICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIENvbXB1dGVzIHZlcnRleCBub3JtYWxzIGZvciB0aGUgZ2l2ZW4gdmVydGV4IGRhdGEuIEZvciBpbmRleGVkIGdlb21ldHJpZXMsIHRoZSBtZXRob2Qgc2V0cwogICAgCSAqIGVhY2ggdmVydGV4IG5vcm1hbCB0byBiZSB0aGUgYXZlcmFnZSBvZiB0aGUgZmFjZSBub3JtYWxzIG9mIHRoZSBmYWNlcyB0aGF0IHNoYXJlIHRoYXQgdmVydGV4LgogICAgCSAqIEZvciBub24taW5kZXhlZCBnZW9tZXRyaWVzLCB2ZXJ0aWNlcyBhcmUgbm90IHNoYXJlZCwgYW5kIHRoZSBtZXRob2Qgc2V0cyBlYWNoIHZlcnRleCBub3JtYWwKICAgIAkgKiB0byBiZSB0aGUgc2FtZSBhcyB0aGUgZmFjZSBub3JtYWwuCiAgICAJICovCiAgICAJY29tcHV0ZVZlcnRleE5vcm1hbHMoKSB7CgogICAgCQljb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7CiAgICAJCWNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTsKCiAgICAJCWlmICggcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlsZXQgbm9ybWFsQXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICdub3JtYWwnICk7CgogICAgCQkJaWYgKCBub3JtYWxBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJbm9ybWFsQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb25BdHRyaWJ1dGUuY291bnQgKiAzICksIDMgKTsKICAgIAkJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5vcm1hbEF0dHJpYnV0ZSApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCS8vIHJlc2V0IGV4aXN0aW5nIG5vcm1hbHMgdG8gemVybwoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gbm9ybWFsQXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQlub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpLCAwLCAwLCAwICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJY29uc3QgcEEgPSBuZXcgVmVjdG9yMygpLCBwQiA9IG5ldyBWZWN0b3IzKCksIHBDID0gbmV3IFZlY3RvcjMoKTsKICAgIAkJCWNvbnN0IG5BID0gbmV3IFZlY3RvcjMoKSwgbkIgPSBuZXcgVmVjdG9yMygpLCBuQyA9IG5ldyBWZWN0b3IzKCk7CiAgICAJCQljb25zdCBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCQkvLyBpbmRleGVkIGVsZW1lbnRzCgogICAgCQkJaWYgKCBpbmRleCApIHsKCiAgICAJCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IGluZGV4LmNvdW50OyBpIDwgaWw7IGkgKz0gMyApIHsKCiAgICAJCQkJCWNvbnN0IHZBID0gaW5kZXguZ2V0WCggaSArIDAgKTsKICAgIAkJCQkJY29uc3QgdkIgPSBpbmRleC5nZXRYKCBpICsgMSApOwogICAgCQkJCQljb25zdCB2QyA9IGluZGV4LmdldFgoIGkgKyAyICk7CgogICAgCQkJCQlwQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgdkEgKTsKICAgIAkJCQkJcEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZCICk7CiAgICAJCQkJCXBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCB2QyApOwoKICAgIAkJCQkJY2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7CiAgICAJCQkJCWFiLnN1YlZlY3RvcnMoIHBBLCBwQiApOwogICAgCQkJCQljYi5jcm9zcyggYWIgKTsKCiAgICAJCQkJCW5BLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdkEgKTsKICAgIAkJCQkJbkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QiApOwogICAgCQkJCQluQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHZDICk7CgogICAgCQkJCQluQS5hZGQoIGNiICk7CiAgICAJCQkJCW5CLmFkZCggY2IgKTsKICAgIAkJCQkJbkMuYWRkKCBjYiApOwoKICAgIAkJCQkJbm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkEsIG5BLngsIG5BLnksIG5BLnogKTsKICAgIAkJCQkJbm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkIsIG5CLngsIG5CLnksIG5CLnogKTsKICAgIAkJCQkJbm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkMsIG5DLngsIG5DLnksIG5DLnogKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCS8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKQoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArPSAzICkgewoKICAgIAkJCQkJcEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAwICk7CiAgICAJCQkJCXBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApOwogICAgCQkJCQlwQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDIgKTsKCiAgICAJCQkJCWNiLnN1YlZlY3RvcnMoIHBDLCBwQiApOwogICAgCQkJCQlhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTsKICAgIAkJCQkJY2IuY3Jvc3MoIGFiICk7CgogICAgCQkJCQlub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMCwgY2IueCwgY2IueSwgY2IueiApOwogICAgCQkJCQlub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMSwgY2IueCwgY2IueSwgY2IueiApOwogICAgCQkJCQlub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMiwgY2IueCwgY2IueSwgY2IueiApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCXRoaXMubm9ybWFsaXplTm9ybWFscygpOwoKICAgIAkJCW5vcm1hbEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRW5zdXJlcyBldmVyeSBub3JtYWwgdmVjdG9yIGluIGEgZ2VvbWV0cnkgd2lsbCBoYXZlIGEgbWFnbml0dWRlIG9mIGAxYC4gVGhpcyB3aWxsCiAgICAJICogY29ycmVjdCBsaWdodGluZyBvbiB0aGUgZ2VvbWV0cnkgc3VyZmFjZXMuCiAgICAJICovCiAgICAJbm9ybWFsaXplTm9ybWFscygpIHsKCiAgICAJCWNvbnN0IG5vcm1hbHMgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQlfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgaSApOwoKICAgIAkJCV92ZWN0b3IkOC5ub3JtYWxpemUoKTsKCiAgICAJCQlub3JtYWxzLnNldFhZWiggaSwgX3ZlY3RvciQ4LngsIF92ZWN0b3IkOC55LCBfdmVjdG9yJDgueiApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybiBhIG5ldyBub24taW5kZXggdmVyc2lvbiBvZiB0aGlzIGluZGV4ZWQgZ2VvbWV0cnkuIElmIHRoZSBnZW9tZXRyeQogICAgCSAqIGlzIGFscmVhZHkgbm9uLWluZGV4ZWQsIHRoZSBtZXRob2QgaXMgYSBOT09QLgogICAgCSAqCiAgICAJICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IFRoZSBub24taW5kZXhlZCB2ZXJzaW9uIG9mIHRoaXMgaW5kZXhlZCBnZW9tZXRyeS4KICAgIAkgKi8KICAgIAl0b05vbkluZGV4ZWQoKSB7CgogICAgCQlmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7CgogICAgCQkJY29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7CiAgICAJCQljb25zdCBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTsKICAgIAkJCWNvbnN0IG5vcm1hbGl6ZWQgPSBhdHRyaWJ1dGUubm9ybWFsaXplZDsKCiAgICAJCQljb25zdCBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTsKCiAgICAJCQlsZXQgaW5kZXggPSAwLCBpbmRleDIgPSAwOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJaWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHsKCiAgICAJCQkJCWluZGV4ID0gaW5kaWNlc1sgaSBdICogYXR0cmlidXRlLmRhdGEuc3RyaWRlICsgYXR0cmlidXRlLm9mZnNldDsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCWluZGV4ID0gaW5kaWNlc1sgaSBdICogaXRlbVNpemU7CgogICAgCQkJCX0KCiAgICAJCQkJZm9yICggbGV0IGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7CgogICAgCQkJCQlhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTsKCiAgICAJCX0KCiAgICAJCS8vCgogICAgCQlpZiAoIHRoaXMuaW5kZXggPT09IG51bGwgKSB7CgogICAgCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEJ1ZmZlckdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApOwogICAgCQkJcmV0dXJuIHRoaXM7CgogICAgCQl9CgogICAgCQljb25zdCBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCiAgICAJCWNvbnN0IGluZGljZXMgPSB0aGlzLmluZGV4LmFycmF5OwogICAgCQljb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwoKICAgIAkJLy8gYXR0cmlidXRlcwoKICAgIAkJZm9yICggY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzICkgewoKICAgIAkJCWNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTsKCiAgICAJCQljb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTsKCiAgICAJCQlnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCBuYW1lLCBuZXdBdHRyaWJ1dGUgKTsKCiAgICAJCX0KCiAgICAJCS8vIG1vcnBoIGF0dHJpYnV0ZXMKCiAgICAJCWNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzOwoKICAgIAkJZm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7CgogICAgCQkJY29uc3QgbW9ycGhBcnJheSA9IFtdOwogICAgCQkJY29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzCgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCQljb25zdCBhdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZVsgaSBdOwoKICAgIAkJCQljb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTsKCiAgICAJCQkJbW9ycGhBcnJheS5wdXNoKCBuZXdBdHRyaWJ1dGUgKTsKCiAgICAJCQl9CgogICAgCQkJZ2VvbWV0cnkyLm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdID0gbW9ycGhBcnJheTsKCiAgICAJCX0KCiAgICAJCWdlb21ldHJ5Mi5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7CgogICAgCQkvLyBncm91cHMKCiAgICAJCWNvbnN0IGdyb3VwcyA9IHRoaXMuZ3JvdXBzOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTsKICAgIAkJCWdlb21ldHJ5Mi5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gZ2VvbWV0cnkyOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNlcmlhbGl6ZXMgdGhlIGdlb21ldHJ5IGludG8gSlNPTi4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuCiAgICAJICovCiAgICAJdG9KU09OKCkgewoKICAgIAkJY29uc3QgZGF0YSA9IHsKICAgIAkJCW1ldGFkYXRhOiB7CiAgICAJCQkJdmVyc2lvbjogNC43LAogICAgCQkJCXR5cGU6ICdCdWZmZXJHZW9tZXRyeScsCiAgICAJCQkJZ2VuZXJhdG9yOiAnQnVmZmVyR2VvbWV0cnkudG9KU09OJwogICAgCQkJfQogICAgCQl9OwoKICAgIAkJLy8gc3RhbmRhcmQgQnVmZmVyR2VvbWV0cnkgc2VyaWFsaXphdGlvbgoKICAgIAkJZGF0YS51dWlkID0gdGhpcy51dWlkOwogICAgCQlkYXRhLnR5cGUgPSB0aGlzLnR5cGU7CiAgICAJCWlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTsKICAgIAkJaWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTsKCiAgICAJCWlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY29uc3QgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVyczsKCiAgICAJCQlmb3IgKCBjb25zdCBrZXkgaW4gcGFyYW1ldGVycyApIHsKCiAgICAJCQkJaWYgKCBwYXJhbWV0ZXJzWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIGRhdGE7CgogICAgCQl9CgogICAgCQkvLyBmb3Igc2ltcGxpY2l0eSB0aGUgY29kZSBhc3N1bWVzIGF0dHJpYnV0ZXMgYXJlIG5vdCBzaGFyZWQgYWNyb3NzIGdlb21ldHJpZXMsIHNlZSAjMTU4MTEKCiAgICAJCWRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTsKCiAgICAJCWNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDsKCiAgICAJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgogICAgCQkJZGF0YS5kYXRhLmluZGV4ID0gewogICAgCQkJCXR5cGU6IGluZGV4LmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsCiAgICAJCQkJYXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbmRleC5hcnJheSApCiAgICAJCQl9OwoKICAgIAkJfQoKICAgIAkJY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlczsKCiAgICAJCWZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkgewoKICAgIAkJCWNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdOwoKICAgIAkJCWRhdGEuZGF0YS5hdHRyaWJ1dGVzWyBrZXkgXSA9IGF0dHJpYnV0ZS50b0pTT04oIGRhdGEuZGF0YSApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgbW9ycGhBdHRyaWJ1dGVzID0ge307CiAgICAJCWxldCBoYXNNb3JwaEF0dHJpYnV0ZXMgPSBmYWxzZTsKCiAgICAJCWZvciAoIGNvbnN0IGtleSBpbiB0aGlzLm1vcnBoQXR0cmlidXRlcyApIHsKCiAgICAJCQljb25zdCBhdHRyaWJ1dGVBcnJheSA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXTsKCiAgICAJCQljb25zdCBhcnJheSA9IFtdOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlQXJyYXlbIGkgXTsKCiAgICAJCQkJYXJyYXkucHVzaCggYXR0cmlidXRlLnRvSlNPTiggZGF0YS5kYXRhICkgKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBhcnJheS5sZW5ndGggPiAwICkgewoKICAgIAkJCQltb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7CgogICAgCQkJCWhhc01vcnBoQXR0cmlidXRlcyA9IHRydWU7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSB7CgogICAgCQkJZGF0YS5kYXRhLm1vcnBoQXR0cmlidXRlcyA9IG1vcnBoQXR0cmlidXRlczsKICAgIAkJCWRhdGEuZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7CgogICAgCQl9CgogICAgCQljb25zdCBncm91cHMgPSB0aGlzLmdyb3VwczsKCiAgICAJCWlmICggZ3JvdXBzLmxlbmd0aCA+IDAgKSB7CgogICAgCQkJZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgYm91bmRpbmdTcGhlcmUgPSB0aGlzLmJvdW5kaW5nU3BoZXJlOwoKICAgIAkJaWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQlkYXRhLmRhdGEuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS50b0pTT04oKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBkYXRhOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBuZXcgZ2VvbWV0cnkgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGdlb21ldHJ5IHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBzb3VyY2UgLSBUaGUgZ2VvbWV0cnkgdG8gY29weS4KICAgIAkgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljb3B5KCBzb3VyY2UgKSB7CgogICAgCQkvLyByZXNldAoKICAgIAkJdGhpcy5pbmRleCA9IG51bGw7CiAgICAJCXRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgCQl0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9OwogICAgCQl0aGlzLmdyb3VwcyA9IFtdOwogICAgCQl0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDsKICAgIAkJdGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7CgogICAgCQkvLyB1c2VkIGZvciBzdG9yaW5nIGNsb25lZCwgc2hhcmVkIGRhdGEKCiAgICAJCWNvbnN0IGRhdGEgPSB7fTsKCiAgICAJCS8vIG5hbWUKCiAgICAJCXRoaXMubmFtZSA9IHNvdXJjZS5uYW1lOwoKICAgIAkJLy8gaW5kZXgKCiAgICAJCWNvbnN0IGluZGV4ID0gc291cmNlLmluZGV4OwoKICAgIAkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLnNldEluZGV4KCBpbmRleC5jbG9uZSgpICk7CgogICAgCQl9CgogICAgCQkvLyBhdHRyaWJ1dGVzCgogICAgCQljb25zdCBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7CgogICAgCQlmb3IgKCBjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7CgogICAgCQkJY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdOwogICAgCQkJdGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIGF0dHJpYnV0ZS5jbG9uZSggZGF0YSApICk7CgogICAgCQl9CgogICAgCQkvLyBtb3JwaCBhdHRyaWJ1dGVzCgogICAgCQljb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzOwoKICAgIAkJZm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7CgogICAgCQkJY29uc3QgYXJyYXkgPSBbXTsKICAgIAkJCWNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlcwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCWFycmF5LnB1c2goIG1vcnBoQXR0cmlidXRlWyBpIF0uY2xvbmUoIGRhdGEgKSApOwoKICAgIAkJCX0KCiAgICAJCQl0aGlzLm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdID0gYXJyYXk7CgogICAgCQl9CgogICAgCQl0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gc291cmNlLm1vcnBoVGFyZ2V0c1JlbGF0aXZlOwoKICAgIAkJLy8gZ3JvdXBzCgogICAgCQljb25zdCBncm91cHMgPSBzb3VyY2UuZ3JvdXBzOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTsKICAgIAkJCXRoaXMuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApOwoKICAgIAkJfQoKICAgIAkJLy8gYm91bmRpbmcgYm94CgogICAgCQljb25zdCBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDsKCiAgICAJCWlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7CgogICAgCQl9CgogICAgCQkvLyBib3VuZGluZyBzcGhlcmUKCiAgICAJCWNvbnN0IGJvdW5kaW5nU3BoZXJlID0gc291cmNlLmJvdW5kaW5nU3BoZXJlOwoKICAgIAkJaWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTsKCiAgICAJCX0KCiAgICAJCS8vIGRyYXcgcmFuZ2UKCiAgICAJCXRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDsKICAgIAkJdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBzb3VyY2UuZHJhd1JhbmdlLmNvdW50OwoKICAgIAkJLy8gdXNlciBkYXRhCgogICAgCQl0aGlzLnVzZXJEYXRhID0gc291cmNlLnVzZXJEYXRhOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzCiAgICAJICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuCiAgICAJICoKICAgIAkgKiBAZmlyZXMgQnVmZmVyR2VvbWV0cnkjZGlzcG9zZQogICAgCSAqLwogICAgCWRpc3Bvc2UoKSB7CgogICAgCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBfaW52ZXJzZU1hdHJpeCQzID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpOwogICAgY29uc3QgX3JheSQzID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7CiAgICBjb25zdCBfc3BoZXJlJDYgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTsKICAgIGNvbnN0IF9zcGhlcmVIaXRBdCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICBjb25zdCBfdkEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF92QiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3ZDJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgY29uc3QgX3RlbXBBID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX21vcnBoQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICBjb25zdCBfaW50ZXJzZWN0aW9uUG9pbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICAvKioKICAgICAqIENsYXNzIHJlcHJlc2VudGluZyB0cmlhbmd1bGFyIHBvbHlnb24gbWVzaCBiYXNlZCBvYmplY3RzLgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggMSwgMSwgMSApOwogICAgICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZjAwIH0gKTsKICAgICAqIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7CiAgICAgKiBzY2VuZS5hZGQoIG1lc2ggKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIEBhdWdtZW50cyBPYmplY3QzRAogICAgICovCiAgICBjbGFzcyBNZXNoIGV4dGVuZHMgT2JqZWN0M0QgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2guCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBbZ2VvbWV0cnldIC0gVGhlIG1lc2ggZ2VvbWV0cnkuCiAgICAJICogQHBhcmFtIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59IFttYXRlcmlhbF0gLSBUaGUgbWVzaCBtYXRlcmlhbC4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoKSApIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc01lc2ggPSB0cnVlOwoKICAgIAkJdGhpcy50eXBlID0gJ01lc2gnOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBtZXNoIGdlb21ldHJ5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7QnVmZmVyR2VvbWV0cnl9CiAgICAJCSAqLwogICAgCQl0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7CgogICAgCQkvKioKICAgIAkJICogVGhlIG1lc2ggbWF0ZXJpYWwuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59CiAgICAJCSAqIEBkZWZhdWx0IE1lc2hCYXNpY01hdGVyaWFsCiAgICAJCSAqLwogICAgCQl0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7CgogICAgCQkvKioKICAgIAkJICogQSBkaWN0aW9uYXJ5IHJlcHJlc2VudGluZyB0aGUgbW9ycGggdGFyZ2V0cyBpbiB0aGUgZ2VvbWV0cnkuIFRoZSBrZXkgaXMgdGhlCiAgICAJCSAqIG1vcnBoIHRhcmdldHMgbmFtZSwgdGhlIHZhbHVlIGl0cyBhdHRyaWJ1dGUgaW5kZXguIFRoaXMgbWVtYmVyIGlzIGB1bmRlZmluZWRgCiAgICAJCSAqIGJ5IGRlZmF1bHQgYW5kIG9ubHkgc2V0IHdoZW4gbW9ycGggdGFyZ2V0cyBhcmUgZGV0ZWN0ZWQgaW4gdGhlIGdlb21ldHJ5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7T2JqZWN0PFN0cmluZyxudW1iZXI+fHVuZGVmaW5lZH0KICAgIAkJICogQGRlZmF1bHQgdW5kZWZpbmVkCiAgICAJCSAqLwogICAgCQl0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHVuZGVmaW5lZDsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBhcnJheSBvZiB3ZWlnaHRzIHR5cGljYWxseSBpbiB0aGUgcmFuZ2UgYFswLDFdYCB0aGF0IHNwZWNpZnkgaG93IG11Y2ggb2YgdGhlIG1vcnBoCiAgICAJCSAqIGlzIGFwcGxpZWQuIFRoaXMgbWVtYmVyIGlzIGB1bmRlZmluZWRgIGJ5IGRlZmF1bHQgYW5kIG9ubHkgc2V0IHdoZW4gbW9ycGggdGFyZ2V0cyBhcmUKICAgIAkJICogZGV0ZWN0ZWQgaW4gdGhlIGdlb21ldHJ5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7QXJyYXk8bnVtYmVyPnx1bmRlZmluZWR9CiAgICAJCSAqIEBkZWZhdWx0IHVuZGVmaW5lZAogICAgCQkgKi8KICAgIAkJdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSB1bmRlZmluZWQ7CgogICAgCQkvKioKICAgIAkJICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhpcyBtZXNoLgogICAgCQkgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFdlYkdQVVJlbmRlcmVyfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5jb3VudCA9IDE7CgogICAgCQl0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkgewoKICAgIAkJc3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTsKCiAgICAJCWlmICggc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpOwoKICAgIAkJfQoKICAgIAkJaWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSApOwoKICAgIAkJfQoKICAgIAkJdGhpcy5tYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIHNvdXJjZS5tYXRlcmlhbCApID8gc291cmNlLm1hdGVyaWFsLnNsaWNlKCkgOiBzb3VyY2UubWF0ZXJpYWw7CiAgICAJCXRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSB2YWx1ZXMgb2Yge0BsaW5rIE1lc2gjbW9ycGhUYXJnZXREaWN0aW9uYXJ5fSBhbmQge0BsaW5rIE1lc2gjbW9ycGhUYXJnZXRJbmZsdWVuY2VzfQogICAgCSAqIHRvIG1ha2Ugc3VyZSBleGlzdGluZyBtb3JwaCB0YXJnZXRzIGNhbiBpbmZsdWVuY2UgdGhpcyAzRCBvYmplY3QuCiAgICAJICovCiAgICAJdXBkYXRlTW9ycGhUYXJnZXRzKCkgewoKICAgIAkJY29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwoKICAgIAkJY29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzOwogICAgCQljb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApOwoKICAgIAkJaWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7CgogICAgCQkJY29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdOwoKICAgIAkJCWlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTsKICAgIAkJCQl0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9OwoKICAgIAkJCQlmb3IgKCBsZXQgbSA9IDAsIG1sID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7CgogICAgCQkJCQljb25zdCBuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApOwoKICAgIAkJCQkJdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApOwogICAgCQkJCQl0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBsb2NhbC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgdmVydGV4IGF0IHRoZSBnaXZlbiBpbmRleCwgdGFraW5nIGludG8KICAgIAkgKiBhY2NvdW50IHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzdGF0ZSBvZiBib3RoIG1vcnBoIHRhcmdldHMgYW5kIHNraW5uaW5nLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIHZlcnRleCBpbmRleC4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LgogICAgCSAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSB2ZXJ0ZXggcG9zaXRpb24gaW4gbG9jYWwgc3BhY2UuCiAgICAJICovCiAgICAJZ2V0VmVydGV4UG9zaXRpb24oIGluZGV4LCB0YXJnZXQgKSB7CgogICAgCQljb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CiAgICAJCWNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIAkJY29uc3QgbW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIAkJY29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZTsKCiAgICAJCXRhcmdldC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXggKTsKCiAgICAJCWNvbnN0IG1vcnBoSW5mbHVlbmNlcyA9IHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzOwoKICAgIAkJaWYgKCBtb3JwaFBvc2l0aW9uICYmIG1vcnBoSW5mbHVlbmNlcyApIHsKCiAgICAJCQlfbW9ycGhBLnNldCggMCwgMCwgMCApOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaFBvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCQljb25zdCBpbmZsdWVuY2UgPSBtb3JwaEluZmx1ZW5jZXNbIGkgXTsKICAgIAkJCQljb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoUG9zaXRpb25bIGkgXTsKCiAgICAJCQkJaWYgKCBpbmZsdWVuY2UgPT09IDAgKSBjb250aW51ZTsKCiAgICAJCQkJX3RlbXBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBpbmRleCApOwoKICAgIAkJCQlpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKICAgIAkJCQkJX21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQSwgaW5mbHVlbmNlICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlfbW9ycGhBLmFkZFNjYWxlZFZlY3RvciggX3RlbXBBLnN1YiggdGFyZ2V0ICksIGluZmx1ZW5jZSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCXRhcmdldC5hZGQoIF9tb3JwaEEgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0YXJnZXQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgaW50ZXJzZWN0aW9uIHBvaW50cyBiZXR3ZWVuIGEgY2FzdGVkIHJheSBhbmQgdGhpcyBsaW5lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtSYXljYXN0ZXJ9IHJheWNhc3RlciAtIFRoZSByYXljYXN0ZXIuCiAgICAJICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBpbnRlcnNlY3RzIC0gVGhlIHRhcmdldCBhcnJheSB0aGF0IGhvbGRzIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnRzLgogICAgCSAqLwogICAgCXJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHsKCiAgICAJCWNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKICAgIAkJY29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsOwogICAgCQljb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7CgogICAgCQlpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47CgogICAgCQkvLyB0ZXN0IHdpdGggYm91bmRpbmcgc3BoZXJlIGluIHdvcmxkIHNwYWNlCgogICAgCQlpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7CgogICAgCQlfc3BoZXJlJDYuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTsKICAgIAkJX3NwaGVyZSQ2LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTsKCiAgICAJCS8vIGNoZWNrIGRpc3RhbmNlIGZyb20gcmF5IG9yaWdpbiB0byBib3VuZGluZyBzcGhlcmUKCiAgICAJCV9yYXkkMy5jb3B5KCByYXljYXN0ZXIucmF5ICkucmVjYXN0KCByYXljYXN0ZXIubmVhciApOwoKICAgIAkJaWYgKCBfc3BoZXJlJDYuY29udGFpbnNQb2ludCggX3JheSQzLm9yaWdpbiApID09PSBmYWxzZSApIHsKCiAgICAJCQlpZiAoIF9yYXkkMy5pbnRlcnNlY3RTcGhlcmUoIF9zcGhlcmUkNiwgX3NwaGVyZUhpdEF0ICkgPT09IG51bGwgKSByZXR1cm47CgogICAgCQkJaWYgKCBfcmF5JDMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBfc3BoZXJlSGl0QXQgKSA+ICggcmF5Y2FzdGVyLmZhciAtIHJheWNhc3Rlci5uZWFyICkgKiogMiApIHJldHVybjsKCiAgICAJCX0KCiAgICAJCS8vIGNvbnZlcnQgcmF5IHRvIGxvY2FsIHNwYWNlIG9mIG1lc2gKCiAgICAJCV9pbnZlcnNlTWF0cml4JDMuY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTsKICAgIAkJX3JheSQzLmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4JDMgKTsKCiAgICAJCS8vIHRlc3Qgd2l0aCBib3VuZGluZyBib3ggaW4gbG9jYWwgc3BhY2UKCiAgICAJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgogICAgCQkJaWYgKCBfcmF5JDMuaW50ZXJzZWN0c0JveCggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKSA9PT0gZmFsc2UgKSByZXR1cm47CgogICAgCQl9CgogICAgCQkvLyB0ZXN0IGZvciBpbnRlcnNlY3Rpb25zIHdpdGggZ2VvbWV0cnkKCiAgICAJCXRoaXMuX2NvbXB1dGVJbnRlcnNlY3Rpb25zKCByYXljYXN0ZXIsIGludGVyc2VjdHMsIF9yYXkkMyApOwoKICAgIAl9CgogICAgCV9jb21wdXRlSW50ZXJzZWN0aW9ucyggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByYXlMb2NhbFNwYWNlICkgewoKICAgIAkJbGV0IGludGVyc2VjdGlvbjsKCiAgICAJCWNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKICAgIAkJY29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsOwoKICAgIAkJY29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDsKICAgIAkJY29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwogICAgCQljb25zdCB1diA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXY7CiAgICAJCWNvbnN0IHV2MSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYxOwogICAgCQljb25zdCBub3JtYWwgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbDsKICAgIAkJY29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzOwogICAgCQljb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7CgogICAgCQlpZiAoIGluZGV4ICE9PSBudWxsICkgewoKICAgIAkJCS8vIGluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5CgogICAgCQkJaWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCQkJY29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTsKICAgIAkJCQkJY29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07CgogICAgCQkJCQljb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7CiAgICAJCQkJCWNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICkgKTsKCiAgICAJCQkJCWZvciAoIGxldCBqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMyApIHsKCiAgICAJCQkJCQljb25zdCBhID0gaW5kZXguZ2V0WCggaiApOwogICAgCQkJCQkJY29uc3QgYiA9IGluZGV4LmdldFgoIGogKyAxICk7CiAgICAJCQkJCQljb25zdCBjID0gaW5kZXguZ2V0WCggaiArIDIgKTsKCiAgICAJCQkJCQlpbnRlcnNlY3Rpb24gPSBjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIHJheUxvY2FsU3BhY2UsIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApOwoKICAgIAkJCQkJCWlmICggaW50ZXJzZWN0aW9uICkgewoKICAgIAkJCQkJCQlpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljcwogICAgCQkJCQkJCWludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4OwogICAgCQkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJY29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7CiAgICAJCQkJY29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7CgogICAgCQkJCWZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHsKCiAgICAJCQkJCWNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7CiAgICAJCQkJCWNvbnN0IGIgPSBpbmRleC5nZXRYKCBpICsgMSApOwogICAgCQkJCQljb25zdCBjID0gaW5kZXguZ2V0WCggaSArIDIgKTsKCiAgICAJCQkJCWludGVyc2VjdGlvbiA9IGNoZWNrR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheUxvY2FsU3BhY2UsIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApOwoKICAgIAkJCQkJaWYgKCBpbnRlcnNlY3Rpb24gKSB7CgogICAgCQkJCQkJaW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3MKICAgIAkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCS8vIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeQoKICAgIAkJCWlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHsKCiAgICAJCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJCWNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07CiAgICAJCQkJCWNvbnN0IGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdOwoKICAgIAkJCQkJY29uc3Qgc3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApOwogICAgCQkJCQljb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsIE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApICk7CgogICAgCQkJCQlmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7CgogICAgCQkJCQkJY29uc3QgYSA9IGo7CiAgICAJCQkJCQljb25zdCBiID0gaiArIDE7CiAgICAJCQkJCQljb25zdCBjID0gaiArIDI7CgogICAgCQkJCQkJaW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTsKCiAgICAJCQkJCQlpZiAoIGludGVyc2VjdGlvbiApIHsKCiAgICAJCQkJCQkJaW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzCiAgICAJCQkJCQkJaW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7CiAgICAJCQkJCQkJaW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTsKICAgIAkJCQljb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTsKCiAgICAJCQkJZm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkgewoKICAgIAkJCQkJY29uc3QgYSA9IGk7CiAgICAJCQkJCWNvbnN0IGIgPSBpICsgMTsKICAgIAkJCQkJY29uc3QgYyA9IGkgKyAyOwoKICAgIAkJCQkJaW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5TG9jYWxTcGFjZSwgdXYsIHV2MSwgbm9ybWFsLCBhLCBiLCBjICk7CgogICAgCQkJCQlpZiAoIGludGVyc2VjdGlvbiApIHsKCiAgICAJCQkJCQlpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIG5vbi1pbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3MKICAgIAkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24kMSggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBBLCBwQiwgcEMsIHBvaW50ICkgewoKICAgIAlsZXQgaW50ZXJzZWN0OwoKICAgIAlpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgewoKICAgIAkJaW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQywgcEIsIHBBLCB0cnVlLCBwb2ludCApOwoKICAgIAl9IGVsc2UgewoKICAgIAkJaW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQSwgcEIsIHBDLCAoIG1hdGVyaWFsLnNpZGUgPT09IEZyb250U2lkZSApLCBwb2ludCApOwoKICAgIAl9CgogICAgCWlmICggaW50ZXJzZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7CgogICAgCV9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNvcHkoIHBvaW50ICk7CiAgICAJX2ludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTsKCiAgICAJY29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCApOwoKICAgIAlpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuIG51bGw7CgogICAgCXJldHVybiB7CiAgICAJCWRpc3RhbmNlOiBkaXN0YW5jZSwKICAgIAkJcG9pbnQ6IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNsb25lKCksCiAgICAJCW9iamVjdDogb2JqZWN0CiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApIHsKCiAgICAJb2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBhLCBfdkEkMSApOwogICAgCW9iamVjdC5nZXRWZXJ0ZXhQb3NpdGlvbiggYiwgX3ZCJDEgKTsKICAgIAlvYmplY3QuZ2V0VmVydGV4UG9zaXRpb24oIGMsIF92QyQxICk7CgogICAgCWNvbnN0IGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uJDEoIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBfaW50ZXJzZWN0aW9uUG9pbnQgKTsKCiAgICAJaWYgKCBpbnRlcnNlY3Rpb24gKSB7CgogICAgCQljb25zdCBiYXJ5Y29vcmQgPSBuZXcgVmVjdG9yMygpOwogICAgCQlUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIF9pbnRlcnNlY3Rpb25Qb2ludCwgX3ZBJDEsIF92QiQxLCBfdkMkMSwgYmFyeWNvb3JkICk7CgogICAgCQlpZiAoIHV2ICkgewoKICAgIAkJCWludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggdXYsIGEsIGIsIGMsIGJhcnljb29yZCwgbmV3IFZlY3RvcjIoKSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCB1djEgKSB7CgogICAgCQkJaW50ZXJzZWN0aW9uLnV2MSA9IFRyaWFuZ2xlLmdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggdXYxLCBhLCBiLCBjLCBiYXJ5Y29vcmQsIG5ldyBWZWN0b3IyKCkgKTsKCiAgICAJCX0KCiAgICAJCWlmICggbm9ybWFsICkgewoKICAgIAkJCWludGVyc2VjdGlvbi5ub3JtYWwgPSBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0ZWRBdHRyaWJ1dGUoIG5vcm1hbCwgYSwgYiwgYywgYmFyeWNvb3JkLCBuZXcgVmVjdG9yMygpICk7CgogICAgCQkJaWYgKCBpbnRlcnNlY3Rpb24ubm9ybWFsLmRvdCggcmF5LmRpcmVjdGlvbiApID4gMCApIHsKCiAgICAJCQkJaW50ZXJzZWN0aW9uLm5vcm1hbC5tdWx0aXBseVNjYWxhciggLTEgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQljb25zdCBmYWNlID0gewogICAgCQkJYTogYSwKICAgIAkJCWI6IGIsCiAgICAJCQljOiBjLAogICAgCQkJbm9ybWFsOiBuZXcgVmVjdG9yMygpLAogICAgCQkJbWF0ZXJpYWxJbmRleDogMAogICAgCQl9OwoKICAgIAkJVHJpYW5nbGUuZ2V0Tm9ybWFsKCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBmYWNlLm5vcm1hbCApOwoKICAgIAkJaW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlOwogICAgCQlpbnRlcnNlY3Rpb24uYmFyeWNvb3JkID0gYmFyeWNvb3JkOwoKICAgIAl9CgogICAgCXJldHVybiBpbnRlcnNlY3Rpb247CgogICAgfQoKICAgIC8qKgogICAgICogQSBnZW9tZXRyeSBjbGFzcyBmb3IgYSByZWN0YW5ndWxhciBjdWJvaWQgd2l0aCBhIGdpdmVuIHdpZHRoLCBoZWlnaHQsIGFuZCBkZXB0aC4KICAgICAqIE9uIGNyZWF0aW9uLCB0aGUgY3Vib2lkIGlzIGNlbnRyZWQgb24gdGhlIG9yaWdpbiwgd2l0aCBlYWNoIGVkZ2UgcGFyYWxsZWwgdG8gb25lCiAgICAgKiBvZiB0aGUgYXhlcy4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoIDEsIDEsIDEgKTsKICAgICAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwZmYwMCB9ICk7CiAgICAgKiBjb25zdCBjdWJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApOwogICAgICogc2NlbmUuYWRkKCBjdWJlICk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnkKICAgICAqLwogICAgY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgYm94IGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aC4gVGhhdCBpcywgdGhlIGxlbmd0aCBvZiB0aGUgZWRnZXMgcGFyYWxsZWwgdG8gdGhlIFggYXhpcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQuIFRoYXQgaXMsIHRoZSBsZW5ndGggb2YgdGhlIGVkZ2VzIHBhcmFsbGVsIHRvIHRoZSBZIGF4aXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSAtIFRoZSBkZXB0aC4gVGhhdCBpcywgdGhlIGxlbmd0aCBvZiB0aGUgZWRnZXMgcGFyYWxsZWwgdG8gdGhlIFogYXhpcy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoU2VnbWVudHM9MV0gLSBOdW1iZXIgb2Ygc2VnbWVudGVkIHJlY3Rhbmd1bGFyIGZhY2VzIGFsb25nIHRoZSB3aWR0aCBvZiB0aGUgc2lkZXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRTZWdtZW50cz0xXSAtIE51bWJlciBvZiBzZWdtZW50ZWQgcmVjdGFuZ3VsYXIgZmFjZXMgYWxvbmcgdGhlIGhlaWdodCBvZiB0aGUgc2lkZXMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aFNlZ21lbnRzPTFdIC0gTnVtYmVyIG9mIHNlZ21lbnRlZCByZWN0YW5ndWxhciBmYWNlcyBhbG9uZyB0aGUgZGVwdGggb2YgdGhlIHNpZGVzLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgZGVwdGhTZWdtZW50cyA9IDEgKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJdGhpcy50eXBlID0gJ0JveEdlb21ldHJ5JzsKCiAgICAJCS8qKgogICAgCQkgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlbgogICAgCQkgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvbgogICAgCQkgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLnBhcmFtZXRlcnMgPSB7CiAgICAJCQl3aWR0aDogd2lkdGgsCiAgICAJCQloZWlnaHQ6IGhlaWdodCwKICAgIAkJCWRlcHRoOiBkZXB0aCwKICAgIAkJCXdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsCiAgICAJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsCiAgICAJCQlkZXB0aFNlZ21lbnRzOiBkZXB0aFNlZ21lbnRzCiAgICAJCX07CgogICAgCQljb25zdCBzY29wZSA9IHRoaXM7CgogICAgCQkvLyBzZWdtZW50cwoKICAgIAkJd2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKTsKICAgIAkJaGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApOwogICAgCQlkZXB0aFNlZ21lbnRzID0gTWF0aC5mbG9vciggZGVwdGhTZWdtZW50cyApOwoKICAgIAkJLy8gYnVmZmVycwoKICAgIAkJY29uc3QgaW5kaWNlcyA9IFtdOwogICAgCQljb25zdCB2ZXJ0aWNlcyA9IFtdOwogICAgCQljb25zdCBub3JtYWxzID0gW107CiAgICAJCWNvbnN0IHV2cyA9IFtdOwoKICAgIAkJLy8gaGVscGVyIHZhcmlhYmxlcwoKICAgIAkJbGV0IG51bWJlck9mVmVydGljZXMgPSAwOwogICAgCQlsZXQgZ3JvdXBTdGFydCA9IDA7CgogICAgCQkvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeQoKICAgIAkJYnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgLTEsIC0xLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHgKICAgIAkJYnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLTEsIGRlcHRoLCBoZWlnaHQsIC0gd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAxICk7IC8vIG54CiAgICAJCWJ1aWxkUGxhbmUoICd4JywgJ3onLCAneScsIDEsIDEsIHdpZHRoLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAyICk7IC8vIHB5CiAgICAJCWJ1aWxkUGxhbmUoICd4JywgJ3onLCAneScsIDEsIC0xLCB3aWR0aCwgZGVwdGgsIC0gaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAzICk7IC8vIG55CiAgICAJCWJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIDEsIC0xLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHoKICAgIAkJYnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLTEsIC0xLCB3aWR0aCwgaGVpZ2h0LCAtIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNSApOyAvLyBuegoKICAgIAkJLy8gYnVpbGQgZ2VvbWV0cnkKCiAgICAJCXRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTsKICAgIAkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CiAgICAJCXRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApOwogICAgCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7CgogICAgCQlmdW5jdGlvbiBidWlsZFBsYW5lKCB1LCB2LCB3LCB1ZGlyLCB2ZGlyLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ3JpZFgsIGdyaWRZLCBtYXRlcmlhbEluZGV4ICkgewoKICAgIAkJCWNvbnN0IHNlZ21lbnRXaWR0aCA9IHdpZHRoIC8gZ3JpZFg7CiAgICAJCQljb25zdCBzZWdtZW50SGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7CgogICAgCQkJY29uc3Qgd2lkdGhIYWxmID0gd2lkdGggLyAyOwogICAgCQkJY29uc3QgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7CiAgICAJCQljb25zdCBkZXB0aEhhbGYgPSBkZXB0aCAvIDI7CgogICAgCQkJY29uc3QgZ3JpZFgxID0gZ3JpZFggKyAxOwogICAgCQkJY29uc3QgZ3JpZFkxID0gZ3JpZFkgKyAxOwoKICAgIAkJCWxldCB2ZXJ0ZXhDb3VudGVyID0gMDsKICAgIAkJCWxldCBncm91cENvdW50ID0gMDsKCiAgICAJCQljb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpOwoKICAgIAkJCS8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnMKCiAgICAJCQlmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7CgogICAgCQkJCWNvbnN0IHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmOwoKICAgIAkJCQlmb3IgKCBsZXQgaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7CgogICAgCQkJCQljb25zdCB4ID0gaXggKiBzZWdtZW50V2lkdGggLSB3aWR0aEhhbGY7CgogICAgCQkJCQkvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudAoKICAgIAkJCQkJdmVjdG9yWyB1IF0gPSB4ICogdWRpcjsKICAgIAkJCQkJdmVjdG9yWyB2IF0gPSB5ICogdmRpcjsKICAgIAkJCQkJdmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7CgogICAgCQkJCQkvLyBub3cgYXBwbHkgdmVjdG9yIHRvIHZlcnRleCBidWZmZXIKCiAgICAJCQkJCXZlcnRpY2VzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTsKCiAgICAJCQkJCS8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50CgogICAgCQkJCQl2ZWN0b3JbIHUgXSA9IDA7CiAgICAJCQkJCXZlY3RvclsgdiBdID0gMDsKICAgIAkJCQkJdmVjdG9yWyB3IF0gPSBkZXB0aCA+IDAgPyAxIDogLTE7CgogICAgCQkJCQkvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXIKCiAgICAJCQkJCW5vcm1hbHMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApOwoKICAgIAkJCQkJLy8gdXZzCgogICAgCQkJCQl1dnMucHVzaCggaXggLyBncmlkWCApOwogICAgCQkJCQl1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7CgogICAgCQkJCQkvLyBjb3VudGVycwoKICAgIAkJCQkJdmVydGV4Q291bnRlciArPSAxOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCS8vIGluZGljZXMKCiAgICAJCQkvLyAxLiB5b3UgbmVlZCB0aHJlZSBpbmRpY2VzIHRvIGRyYXcgYSBzaW5nbGUgZmFjZQogICAgCQkJLy8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXMKICAgIAkJCS8vIDMuIHNvIHdlIG5lZWQgdG8gZ2VuZXJhdGUgc2l4ICgyKjMpIGluZGljZXMgcGVyIHNlZ21lbnQKCiAgICAJCQlmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHsKCiAgICAJCQkJZm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7CgogICAgCQkJCQljb25zdCBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7CiAgICAJCQkJCWNvbnN0IGIgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiAoIGl5ICsgMSApOwogICAgCQkJCQljb25zdCBjID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApOwogICAgCQkJCQljb25zdCBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTsKCiAgICAJCQkJCS8vIGZhY2VzCgogICAgCQkJCQlpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTsKICAgIAkJCQkJaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7CgogICAgCQkJCQkvLyBpbmNyZWFzZSBjb3VudGVyCgogICAgCQkJCQlncm91cENvdW50ICs9IDY7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJLy8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnQKCiAgICAJCQlzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgbWF0ZXJpYWxJbmRleCApOwoKICAgIAkJCS8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3VwcwoKICAgIAkJCWdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDsKCiAgICAJCQkvLyB1cGRhdGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzCgogICAgCQkJbnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSApOwoKICAgIAkJdGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlbgogICAgCSAqIEpTT04gb2JqZWN0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS4KICAgIAkgKiBAcmV0dXJuIHtCb3hHZW9tZXRyeX0gQSBuZXcgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc3RhdGljIGZyb21KU09OKCBkYXRhICkgewoKICAgIAkJcmV0dXJuIG5ldyBCb3hHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5kZXB0aFNlZ21lbnRzICk7CgogICAgCX0KCiAgICB9CgogICAgLy8gVW5pZm9ybSBVdGlsaXRpZXMKCiAgICBmdW5jdGlvbiBjbG9uZVVuaWZvcm1zKCBzcmMgKSB7CgogICAgCWNvbnN0IGRzdCA9IHt9OwoKICAgIAlmb3IgKCBjb25zdCB1IGluIHNyYyApIHsKCiAgICAJCWRzdFsgdSBdID0ge307CgogICAgCQlmb3IgKCBjb25zdCBwIGluIHNyY1sgdSBdICkgewoKICAgIAkJCWNvbnN0IHByb3BlcnR5ID0gc3JjWyB1IF1bIHAgXTsKCiAgICAJCQlpZiAoIHByb3BlcnR5ICYmICggcHJvcGVydHkuaXNDb2xvciB8fAogICAgCQkJCXByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHwKICAgIAkJCQlwcm9wZXJ0eS5pc1ZlY3RvcjIgfHwgcHJvcGVydHkuaXNWZWN0b3IzIHx8IHByb3BlcnR5LmlzVmVjdG9yNCB8fAogICAgCQkJCXByb3BlcnR5LmlzVGV4dHVyZSB8fCBwcm9wZXJ0eS5pc1F1YXRlcm5pb24gKSApIHsKCiAgICAJCQkJaWYgKCBwcm9wZXJ0eS5pc1JlbmRlclRhcmdldFRleHR1cmUgKSB7CgogICAgCQkJCQljb25zb2xlLndhcm4oICdVbmlmb3Jtc1V0aWxzOiBUZXh0dXJlcyBvZiByZW5kZXIgdGFyZ2V0cyBjYW5ub3QgYmUgY2xvbmVkIHZpYSBjbG9uZVVuaWZvcm1zKCkgb3IgbWVyZ2VVbmlmb3JtcygpLicgKTsKICAgIAkJCQkJZHN0WyB1IF1bIHAgXSA9IG51bGw7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlkc3RbIHUgXVsgcCBdID0gcHJvcGVydHkuY2xvbmUoKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHByb3BlcnR5ICkgKSB7CgogICAgCQkJCWRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5zbGljZSgpOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIGRzdDsKCiAgICB9CgogICAgZnVuY3Rpb24gbWVyZ2VVbmlmb3JtcyggdW5pZm9ybXMgKSB7CgogICAgCWNvbnN0IG1lcmdlZCA9IHt9OwoKICAgIAlmb3IgKCBsZXQgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7CgogICAgCQljb25zdCB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7CgogICAgCQlmb3IgKCBjb25zdCBwIGluIHRtcCApIHsKCiAgICAJCQltZXJnZWRbIHAgXSA9IHRtcFsgcCBdOwoKICAgIAkJfQoKICAgIAl9CgogICAgCXJldHVybiBtZXJnZWQ7CgogICAgfQoKICAgIGZ1bmN0aW9uIGNsb25lVW5pZm9ybXNHcm91cHMoIHNyYyApIHsKCiAgICAJY29uc3QgZHN0ID0gW107CgogICAgCWZvciAoIGxldCB1ID0gMDsgdSA8IHNyYy5sZW5ndGg7IHUgKysgKSB7CgogICAgCQlkc3QucHVzaCggc3JjWyB1IF0uY2xvbmUoKSApOwoKICAgIAl9CgogICAgCXJldHVybiBkc3Q7CgogICAgfQoKICAgIGZ1bmN0aW9uIGdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UoIHJlbmRlcmVyICkgewoKICAgIAljb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7CgogICAgCWlmICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApIHsKCiAgICAJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yMzkzNyNpc3N1ZWNvbW1lbnQtMTExMTA2NzM5OAogICAgCQlyZXR1cm4gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZTsKCiAgICAJfQoKICAgIAkvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yNzg2OAogICAgCWlmICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkgewoKICAgIAkJcmV0dXJuIGN1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5jb2xvclNwYWNlOwoKICAgIAl9CgogICAgCXJldHVybiBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2U7CgogICAgfQoKICAgIC8vIExlZ2FjeQoKICAgIGNvbnN0IFVuaWZvcm1zVXRpbHMgPSB7IGNsb25lOiBjbG9uZVVuaWZvcm1zLCBtZXJnZTogbWVyZ2VVbmlmb3JtcyB9OwoKICAgIHZhciBkZWZhdWx0X3ZlcnRleCA9ICJ2b2lkIG1haW4oKSB7XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcbn0iOwoKICAgIHZhciBkZWZhdWx0X2ZyYWdtZW50ID0gInZvaWQgbWFpbigpIHtcblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XG59IjsKCiAgICAvKioKICAgICAqIEEgbWF0ZXJpYWwgcmVuZGVyZWQgd2l0aCBjdXN0b20gc2hhZGVycy4gQSBzaGFkZXIgaXMgYSBzbWFsbCBwcm9ncmFtIHdyaXR0ZW4gaW4gR0xTTC4KICAgICAqIHRoYXQgcnVucyBvbiB0aGUgR1BVLiBZb3UgbWF5IHdhbnQgdG8gdXNlIGEgY3VzdG9tIHNoYWRlciBpZiB5b3UgbmVlZCB0byBpbXBsZW1lbnQgYW4KICAgICAqIGVmZmVjdCBub3QgaW5jbHVkZWQgd2l0aCBhbnkgb2YgdGhlIGJ1aWx0LWluIG1hdGVyaWFscy4KICAgICAqCiAgICAgKiBUaGVyZSBhcmUgdGhlIGZvbGxvd2luZyBub3RlcyB0byBiZWFyIGluIG1pbmQgd2hlbiB1c2luZyBhIGBTaGFkZXJNYXRlcmlhbGA6CiAgICAgKgogICAgICogLSBgU2hhZGVyTWF0ZXJpYWxgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uCiAgICAgKiAtIEJ1aWx0IGluIGF0dHJpYnV0ZXMgYW5kIHVuaWZvcm1zIGFyZSBwYXNzZWQgdG8gdGhlIHNoYWRlcnMgYWxvbmcgd2l0aCB5b3VyIGNvZGUuIElmCiAgICAgKiB5b3UgZG9uJ3Qgd2FudCB0aGF0LCB1c2Uge0BsaW5rIFJhd1NoYWRlck1hdGVyaWFsfSBpbnN0ZWFkLgogICAgICogLSBZb3UgY2FuIHVzZSB0aGUgZGlyZWN0aXZlIGAjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0YCBhbmQgYCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kYAogICAgICogaW4gb3JkZXIgdG8gdW5yb2xsIGEgYGZvcmAgbG9vcCBpbiBHTFNMIGJ5IHRoZSBzaGFkZXIgcHJlcHJvY2Vzc29yLiBUaGUgZGlyZWN0aXZlIGhhcwogICAgICogdG8gYmUgcGxhY2VkIHJpZ2h0IGFib3ZlIHRoZSBsb29wLiBUaGUgbG9vcCBmb3JtYXR0aW5nIGhhcyB0byBjb3JyZXNwb25kIHRvIGEgZGVmaW5lZCBzdGFuZGFyZC4KICAgICAqICAgLSBUaGUgbG9vcCBoYXMgdG8gYmUgW25vcm1hbGl6ZWRde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05vcm1hbGl6ZWRfbG9vcH0uCiAgICAgKiAgIC0gVGhlIGxvb3AgdmFyaWFibGUgaGFzIHRvIGJlICppKi4KICAgICAqICAgLSBUaGUgdmFsdWUgYFVOUk9MTEVEX0xPT1BfSU5ERVhgIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgZXhwbGljaXRseQogICAgICogdmFsdWUgb2YgKmkqIGZvciB0aGUgZ2l2ZW4gaXRlcmF0aW9uIGFuZCBjYW4gYmUgdXNlZCBpbiBwcmVwcm9jZXNzb3IKICAgICAqIHN0YXRlbWVudHMuCiAgICAgKgogICAgICogYGBganMKICAgICAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKCB7CiAgICAgKiAJdW5pZm9ybXM6IHsKICAgICAqIAkJdGltZTogeyB2YWx1ZTogMS4wIH0sCiAgICAgKiAJCXJlc29sdXRpb246IHsgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IyKCkgfQogICAgICogCX0sCiAgICAgKiAJdmVydGV4U2hhZGVyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3ZlcnRleFNoYWRlcicgKS50ZXh0Q29udGVudCwKICAgICAqIAlmcmFnbWVudFNoYWRlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdmcmFnbWVudFNoYWRlcicgKS50ZXh0Q29udGVudAogICAgICogfSApOwogICAgICogYGBgCiAgICAgKgogICAgICogQGF1Z21lbnRzIE1hdGVyaWFsCiAgICAgKi8KICAgIGNsYXNzIFNoYWRlck1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IHNoYWRlciBtYXRlcmlhbC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzCiAgICAJICogZGVmaW5pbmcgdGhlIG1hdGVyaWFsJ3MgYXBwZWFyYW5jZS4gQW55IHByb3BlcnR5IG9mIHRoZSBtYXRlcmlhbAogICAgCSAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZAogICAgCSAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkCiAgICAJICogYnkge0BsaW5rIENvbG9yI3NldH0uCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNTaGFkZXJNYXRlcmlhbCA9IHRydWU7CgogICAgCQl0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgY3VzdG9tIGNvbnN0YW50cyB1c2luZyBgI2RlZmluZWAgZGlyZWN0aXZlcyB3aXRoaW4gdGhlIEdMU0wgY29kZQogICAgCQkgKiBmb3IgYm90aCB0aGUgdmVydGV4IHNoYWRlciBhbmQgdGhlIGZyYWdtZW50IHNoYWRlcjsgZWFjaCBrZXkvdmFsdWUgcGFpcgogICAgCQkgKiB5aWVsZHMgYW5vdGhlciBkaXJlY3RpdmUuCiAgICAJCSAqIGBgYGpzCiAgICAJCSAqIGRlZmluZXM6IHsKICAgIAkJICogCUZPTzogMTUsCiAgICAJCSAqIAlCQVI6IHRydWUKICAgIAkJICogfQogICAgCQkgKiBgYGAKICAgIAkJICogWWllbGRzIHRoZSBsaW5lczoKICAgIAkJICogYGBgCiAgICAJCSAqICNkZWZpbmUgRk9PIDE1CiAgICAJCSAqICNkZWZpbmUgQkFSIHRydWUKICAgIAkJICogYGBgCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLmRlZmluZXMgPSB7fTsKCiAgICAJCS8qKgogICAgCQkgKiBBbiBvYmplY3Qgb2YgdGhlIGZvcm06CiAgICAJCSAqIGBgYGpzCiAgICAJCSAqIHsKICAgIAkJICogCSJ1bmlmb3JtMSI6IHsgdmFsdWU6IDEuMCB9LAogICAgCQkgKiAJInVuaWZvcm0yIjogeyB2YWx1ZTogMiB9CiAgICAJCSAqIH0KICAgIAkJICogYGBgCiAgICAJCSAqIHNwZWNpZnlpbmcgdGhlIHVuaWZvcm1zIHRvIGJlIHBhc3NlZCB0byB0aGUgc2hhZGVyIGNvZGU7IGtleXMgYXJlIHVuaWZvcm0KICAgIAkJICogbmFtZXMsIHZhbHVlcyBhcmUgZGVmaW5pdGlvbnMgb2YgdGhlIGZvcm0KICAgIAkJICogYGBgCiAgICAJCSAqIHsKICAgIAkJICogCXZhbHVlOiAxLjAKICAgIAkJICogfQogICAgCQkgKiBgYGAKICAgIAkJICogd2hlcmUgYHZhbHVlYCBpcyB0aGUgdmFsdWUgb2YgdGhlIHVuaWZvcm0uIE5hbWVzIG11c3QgbWF0Y2ggdGhlIG5hbWUgb2YKICAgIAkJICogdGhlIHVuaWZvcm0sIGFzIGRlZmluZWQgaW4gdGhlIEdMU0wgY29kZS4gTm90ZSB0aGF0IHVuaWZvcm1zIGFyZSByZWZyZXNoZWQKICAgIAkJICogb24gZXZlcnkgZnJhbWUsIHNvIHVwZGF0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgdW5pZm9ybSB3aWxsIGltbWVkaWF0ZWx5CiAgICAJCSAqIHVwZGF0ZSB0aGUgdmFsdWUgYXZhaWxhYmxlIHRvIHRoZSBHTFNMIGNvZGUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCSAqLwogICAgCQl0aGlzLnVuaWZvcm1zID0ge307CgogICAgCQkvKioKICAgIAkJICogQW4gYXJyYXkgaG9sZGluZyB1bmlmb3JtcyBncm91cHMgZm9yIGNvbmZpZ3VyaW5nIFVCT3MuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxVbmlmb3Jtc0dyb3VwPn0KICAgIAkJICovCiAgICAJCXRoaXMudW5pZm9ybXNHcm91cHMgPSBbXTsKCiAgICAJCS8qKgogICAgCQkgKiBWZXJ0ZXggc2hhZGVyIEdMU0wgY29kZS4gVGhpcyBpcyB0aGUgYWN0dWFsIGNvZGUgZm9yIHRoZSBzaGFkZXIuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtzdHJpbmd9CiAgICAJCSAqLwogICAgCQl0aGlzLnZlcnRleFNoYWRlciA9IGRlZmF1bHRfdmVydGV4OwoKICAgIAkJLyoqCiAgICAJCSAqIEZyYWdtZW50IHNoYWRlciBHTFNMIGNvZGUuIFRoaXMgaXMgdGhlIGFjdHVhbCBjb2RlIGZvciB0aGUgc2hhZGVyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5mcmFnbWVudFNoYWRlciA9IGRlZmF1bHRfZnJhZ21lbnQ7CgogICAgCQkvKioKICAgIAkJICogQ29udHJvbHMgbGluZSB0aGlja25lc3Mgb3IgbGluZXMuCiAgICAJCSAqCiAgICAJCSAqIFdlYkdMIGFuZCBXZWJHUFUgaWdub3JlIHRoaXMgc2V0dGluZyBhbmQgYWx3YXlzIHJlbmRlciBsaW5lIHByaW1pdGl2ZXMgd2l0aCBhCiAgICAJCSAqIHdpZHRoIG9mIG9uZSBwaXhlbC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5saW5ld2lkdGggPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIFJlbmRlcnMgdGhlIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMud2lyZWZyYW1lID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogQ29udHJvbHMgdGhlIHRoaWNrbmVzcyBvZiB0aGUgd2lyZWZyYW1lLgogICAgCQkgKgogICAgCQkgKiBXZWJHTCBhbmQgV2ViR1BVIGlnbm9yZSB0aGlzIHByb3BlcnR5IGFuZCBhbHdheXMgcmVuZGVyCiAgICAJCSAqIDEgcGl4ZWwgd2lkZSBsaW5lcy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZSB3aGV0aGVyIHRoZSBtYXRlcmlhbCBjb2xvciBpcyBhZmZlY3RlZCBieSBnbG9iYWwgZm9nIHNldHRpbmdzOyBgdHJ1ZWAKICAgIAkJICogdG8gcGFzcyBmb2cgdW5pZm9ybXMgdG8gdGhlIHNoYWRlci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmZvZyA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgd2hldGhlciB0aGlzIG1hdGVyaWFsIHVzZXMgbGlnaHRpbmc7IGB0cnVlYCB0byBwYXNzIHVuaWZvcm0gZGF0YQogICAgCQkgKiByZWxhdGVkIHRvIGxpZ2h0aW5nIHRvIHRoaXMgc2hhZGVyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMubGlnaHRzID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogRGVmaW5lcyB3aGV0aGVyIHRoaXMgbWF0ZXJpYWwgc3VwcG9ydHMgY2xpcHBpbmc7IGB0cnVlYCB0byBsZXQgdGhlIHJlbmRlcmVyCiAgICAJCSAqIHBhc3MgdGhlIGNsaXBwaW5nUGxhbmVzIHVuaWZvcm0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5jbGlwcGluZyA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYHRydWVgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmZvcmNlU2luZ2xlUGFzcyA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBvYmplY3QgYWxsb3dzIHRvIGVuYWJsZSBjZXJ0YWluIFdlYkdMIDIgZXh0ZW5zaW9ucy4KICAgIAkJICoKICAgIAkJICogLSBjbGlwQ3VsbERpc3RhbmNlOiBzZXQgdG8gYHRydWVgIHRvIHVzZSB2ZXJ0ZXggc2hhZGVyIGNsaXBwaW5nCiAgICAJCSAqIC0gbXVsdGlEcmF3OiBzZXQgdG8gYHRydWVgIHRvIHVzZSB2ZXJ0ZXggc2hhZGVyIG11bHRpX2RyYXcgLyBlbmFibGUgZ2xfRHJhd0lECiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHt7Y2xpcEN1bGxEaXN0YW5jZTpmYWxzZSxtdWx0aURyYXc6ZmFsc2V9fQogICAgCQkgKi8KICAgIAkJdGhpcy5leHRlbnNpb25zID0gewogICAgCQkJY2xpcEN1bGxEaXN0YW5jZTogZmFsc2UsIC8vIHNldCB0byB1c2UgdmVydGV4IHNoYWRlciBjbGlwcGluZwogICAgCQkJbXVsdGlEcmF3OiBmYWxzZSAvLyBzZXQgdG8gdXNlIHZlcnRleCBzaGFkZXIgbXVsdGlfZHJhdyAvIGVuYWJsZSBnbF9EcmF3SUQKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGVuIHRoZSByZW5kZXJlZCBnZW9tZXRyeSBkb2Vzbid0IGluY2x1ZGUgdGhlc2UgYXR0cmlidXRlcyBidXQgdGhlCiAgICAJCSAqIG1hdGVyaWFsIGRvZXMsIHRoZXNlIGRlZmF1bHQgdmFsdWVzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBzaGFkZXJzLiBUaGlzCiAgICAJCSAqIGF2b2lkcyBlcnJvcnMgd2hlbiBidWZmZXIgZGF0YSBpcyBtaXNzaW5nLgogICAgCQkgKgogICAgCQkgKiAtIGNvbG9yOiBbIDEsIDEsIDEgXQogICAgCQkgKiAtIHV2OiBbIDAsIDAgXQogICAgCQkgKiAtIHV2MTogWyAwLCAwIF0KICAgIAkJICoKICAgIAkJICogQHR5cGUge09iamVjdH0KICAgIAkJICovCiAgICAJCXRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHsKICAgIAkJCSdjb2xvcic6IFsgMSwgMSwgMSBdLAogICAgCQkJJ3V2JzogWyAwLCAwIF0sCiAgICAJCQkndXYxJzogWyAwLCAwIF0KICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBzZXQsIHRoaXMgY2FsbHMgW2dsLmJpbmRBdHRyaWJMb2NhdGlvbl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9iaW5kQXR0cmliTG9jYXRpb259CiAgICAJCSAqIHRvIGJpbmQgYSBnZW5lcmljIHZlcnRleCBpbmRleCB0byBhbiBhdHRyaWJ1dGUgdmFyaWFibGUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfQogICAgCQkgKiBAZGVmYXVsdCB1bmRlZmluZWQKICAgIAkJICovCiAgICAJCXRoaXMuaW5kZXgwQXR0cmlidXRlTmFtZSA9IHVuZGVmaW5lZDsKCiAgICAJCS8qKgogICAgCQkgKiBDYW4gYmUgdXNlZCB0byBmb3JjZSBhIHVuaWZvcm0gdXBkYXRlIHdoaWxlIGNoYW5naW5nIHVuaWZvcm1zIGluCiAgICAJCSAqIHtAbGluayBPYmplY3QzRCNvbkJlZm9yZVJlbmRlcn0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBEZWZpbmVzIHRoZSBHTFNMIHZlcnNpb24gb2YgY3VzdG9tIHNoYWRlciBjb2RlLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7PyhHTFNMMXxHTFNMMyl9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuZ2xzbFZlcnNpb24gPSBudWxsOwoKICAgIAkJaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAljb3B5KCBzb3VyY2UgKSB7CgogICAgCQlzdXBlci5jb3B5KCBzb3VyY2UgKTsKCiAgICAJCXRoaXMuZnJhZ21lbnRTaGFkZXIgPSBzb3VyY2UuZnJhZ21lbnRTaGFkZXI7CiAgICAJCXRoaXMudmVydGV4U2hhZGVyID0gc291cmNlLnZlcnRleFNoYWRlcjsKCiAgICAJCXRoaXMudW5pZm9ybXMgPSBjbG9uZVVuaWZvcm1zKCBzb3VyY2UudW5pZm9ybXMgKTsKICAgIAkJdGhpcy51bmlmb3Jtc0dyb3VwcyA9IGNsb25lVW5pZm9ybXNHcm91cHMoIHNvdXJjZS51bmlmb3Jtc0dyb3VwcyApOwoKICAgIAkJdGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5kZWZpbmVzICk7CgogICAgCQl0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7CiAgICAJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDsKCiAgICAJCXRoaXMuZm9nID0gc291cmNlLmZvZzsKICAgIAkJdGhpcy5saWdodHMgPSBzb3VyY2UubGlnaHRzOwogICAgCQl0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nOwoKICAgIAkJdGhpcy5leHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5leHRlbnNpb25zICk7CgogICAgCQl0aGlzLmdsc2xWZXJzaW9uID0gc291cmNlLmdsc2xWZXJzaW9uOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJdG9KU09OKCBtZXRhICkgewoKICAgIAkJY29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApOwoKICAgIAkJZGF0YS5nbHNsVmVyc2lvbiA9IHRoaXMuZ2xzbFZlcnNpb247CiAgICAJCWRhdGEudW5pZm9ybXMgPSB7fTsKCiAgICAJCWZvciAoIGNvbnN0IG5hbWUgaW4gdGhpcy51bmlmb3JtcyApIHsKCiAgICAJCQljb25zdCB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1sgbmFtZSBdOwogICAgCQkJY29uc3QgdmFsdWUgPSB1bmlmb3JtLnZhbHVlOwoKICAgIAkJCWlmICggdmFsdWUgJiYgdmFsdWUuaXNUZXh0dXJlICkgewoKICAgIAkJCQlkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7CiAgICAJCQkJCXR5cGU6ICd0JywKICAgIAkJCQkJdmFsdWU6IHZhbHVlLnRvSlNPTiggbWV0YSApLnV1aWQKICAgIAkJCQl9OwoKICAgIAkJCX0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7CgogICAgCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKICAgIAkJCQkJdHlwZTogJ2MnLAogICAgCQkJCQl2YWx1ZTogdmFsdWUuZ2V0SGV4KCkKICAgIAkJCQl9OwoKICAgIAkJCX0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMiApIHsKCiAgICAJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewogICAgCQkJCQl0eXBlOiAndjInLAogICAgCQkJCQl2YWx1ZTogdmFsdWUudG9BcnJheSgpCiAgICAJCQkJfTsKCiAgICAJCQl9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjMgKSB7CgogICAgCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKICAgIAkJCQkJdHlwZTogJ3YzJywKICAgIAkJCQkJdmFsdWU6IHZhbHVlLnRvQXJyYXkoKQogICAgCQkJCX07CgogICAgCQkJfSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNWZWN0b3I0ICkgewoKICAgIAkJCQlkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7CiAgICAJCQkJCXR5cGU6ICd2NCcsCiAgICAJCQkJCXZhbHVlOiB2YWx1ZS50b0FycmF5KCkKICAgIAkJCQl9OwoKICAgIAkJCX0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4MyApIHsKCiAgICAJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewogICAgCQkJCQl0eXBlOiAnbTMnLAogICAgCQkJCQl2YWx1ZTogdmFsdWUudG9BcnJheSgpCiAgICAJCQkJfTsKCiAgICAJCQl9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDQgKSB7CgogICAgCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKICAgIAkJCQkJdHlwZTogJ200JywKICAgIAkJCQkJdmFsdWU6IHZhbHVlLnRvQXJyYXkoKQogICAgCQkJCX07CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewogICAgCQkJCQl2YWx1ZTogdmFsdWUKICAgIAkJCQl9OwoKICAgIAkJCQkvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXIKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIE9iamVjdC5rZXlzKCB0aGlzLmRlZmluZXMgKS5sZW5ndGggPiAwICkgZGF0YS5kZWZpbmVzID0gdGhpcy5kZWZpbmVzOwoKICAgIAkJZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjsKICAgIAkJZGF0YS5mcmFnbWVudFNoYWRlciA9IHRoaXMuZnJhZ21lbnRTaGFkZXI7CgogICAgCQlkYXRhLmxpZ2h0cyA9IHRoaXMubGlnaHRzOwogICAgCQlkYXRhLmNsaXBwaW5nID0gdGhpcy5jbGlwcGluZzsKCiAgICAJCWNvbnN0IGV4dGVuc2lvbnMgPSB7fTsKCiAgICAJCWZvciAoIGNvbnN0IGtleSBpbiB0aGlzLmV4dGVuc2lvbnMgKSB7CgogICAgCQkJaWYgKCB0aGlzLmV4dGVuc2lvbnNbIGtleSBdID09PSB0cnVlICkgZXh0ZW5zaW9uc1sga2V5IF0gPSB0cnVlOwoKICAgIAkJfQoKICAgIAkJaWYgKCBPYmplY3Qua2V5cyggZXh0ZW5zaW9ucyApLmxlbmd0aCA+IDAgKSBkYXRhLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zOwoKICAgIAkJcmV0dXJuIGRhdGE7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBjYW1lcmFzLiBUaGlzIGNsYXNzIHNob3VsZCBhbHdheXMgYmUgaW5oZXJpdGVkCiAgICAgKiB3aGVuIHlvdSBidWlsZCBhIG5ldyBjYW1lcmEuCiAgICAgKgogICAgICogQGFic3RyYWN0CiAgICAgKiBAYXVnbWVudHMgT2JqZWN0M0QKICAgICAqLwogICAgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgT2JqZWN0M0QgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGNhbWVyYS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvcigpIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0NhbWVyYSA9IHRydWU7CgogICAgCQl0aGlzLnR5cGUgPSAnQ2FtZXJhJzsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgaW52ZXJzZSBvZiB0aGUgY2FtZXJhJ3Mgd29ybGQgbWF0cml4LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7TWF0cml4NH0KICAgIAkJICovCiAgICAJCXRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY2FtZXJhJ3MgcHJvamVjdGlvbiBtYXRyaXguCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtNYXRyaXg0fQogICAgCQkgKi8KICAgIAkJdGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgaW52ZXJzZSBvZiB0aGUgY2FtZXJhJ3MgcHJvamVjdGlvbiBtYXRyaXguCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtNYXRyaXg0fQogICAgCQkgKi8KICAgIAkJdGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7CgogICAgCQkvKioKICAgIAkJICogVGhlIGNvb3JkaW5hdGUgc3lzdGVtIGluIHdoaWNoIHRoZSBjYW1lcmEgaXMgdXNlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeyhXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSl9CiAgICAJCSAqLwogICAgCQl0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW07CgogICAgCX0KCiAgICAJY29weSggc291cmNlLCByZWN1cnNpdmUgKSB7CgogICAgCQlzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApOwoKICAgIAkJdGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSApOwoKICAgIAkJdGhpcy5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4ICk7CiAgICAJCXRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7CgogICAgCQl0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSBzb3VyY2UuY29vcmRpbmF0ZVN5c3RlbTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSAoImxvb2siKSBkaXJlY3Rpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKgogICAgCSAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIGNhbWVyYXMgaGF2ZSBhIGRpZmZlcmVudCBmb3J3YXJkIHZlY3RvciBjb21wYXJlZCB0byBvdGhlcgogICAgCSAqIDNEIG9iamVjdHMuIEEgY2FtZXJhIGxvb2tzIGRvd24gaXRzIGxvY2FsLCBuZWdhdGl2ZSB6LWF4aXMgYnkgZGVmYXVsdC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyBzdG9yZWQgdG8uCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIDNEIG9iamVjdCdzIGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS4KICAgIAkgKi8KICAgIAlnZXRXb3JsZERpcmVjdGlvbiggdGFyZ2V0ICkgewoKICAgIAkJcmV0dXJuIHN1cGVyLmdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKS5uZWdhdGUoKTsKCiAgICAJfQoKICAgIAl1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7CgogICAgCQlzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTsKCiAgICAJCXRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTsKCiAgICAJfQoKICAgIAl1cGRhdGVXb3JsZE1hdHJpeCggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7CgogICAgCQlzdXBlci51cGRhdGVXb3JsZE1hdHJpeCggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKTsKCiAgICAJCXRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTsKCiAgICAJfQoKICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBfdjMkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKICAgIGNvbnN0IF9taW5UYXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7CiAgICBjb25zdCBfbWF4VGFyZ2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpOwoKICAgIC8qKgogICAgICogQ2FtZXJhIHRoYXQgdXNlcyBbcGVyc3BlY3RpdmUgcHJvamVjdGlvbl17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyc3BlY3RpdmVfKGdyYXBoaWNhbCl9LgogICAgICoKICAgICAqIFRoaXMgcHJvamVjdGlvbiBtb2RlIGlzIGRlc2lnbmVkIHRvIG1pbWljIHRoZSB3YXkgdGhlIGh1bWFuIGV5ZSBzZWVzLiBJdAogICAgICogaXMgdGhlIG1vc3QgY29tbW9uIHByb2plY3Rpb24gbW9kZSB1c2VkIGZvciByZW5kZXJpbmcgYSAzRCBzY2VuZS4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA0NSwgd2lkdGggLyBoZWlnaHQsIDEsIDEwMDAgKTsKICAgICAqIHNjZW5lLmFkZCggY2FtZXJhICk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBAYXVnbWVudHMgQ2FtZXJhCiAgICAgKi8KICAgIGNsYXNzIFBlcnNwZWN0aXZlQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBwZXJzcGVjdGl2ZSBjYW1lcmEuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2Zvdj01MF0gLSBUaGUgdmVydGljYWwgZmllbGQgb2Ygdmlldy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2FzcGVjdD0xXSAtIFRoZSBhc3BlY3QgcmF0aW8uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtuZWFyPTAuMV0gLSBUaGUgY2FtZXJhJ3MgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2Zhcj0yMDAwXSAtIFRoZSBjYW1lcmEncyBmYXIgcGxhbmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIGZvdiA9IDUwLCBhc3BlY3QgPSAxLCBuZWFyID0gMC4xLCBmYXIgPSAyMDAwICkgewoKICAgIAkJc3VwZXIoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzUGVyc3BlY3RpdmVDYW1lcmEgPSB0cnVlOwoKICAgIAkJdGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJzsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgdmVydGljYWwgZmllbGQgb2YgdmlldywgZnJvbSBib3R0b20gdG8gdG9wIG9mIHZpZXcsCiAgICAJCSAqIGluIGRlZ3JlZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDUwCiAgICAJCSAqLwogICAgCQl0aGlzLmZvdiA9IGZvdjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgem9vbSBmYWN0b3Igb2YgdGhlIGNhbWVyYS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy56b29tID0gMTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY2FtZXJhJ3MgbmVhciBwbGFuZS4gVGhlIHZhbGlkIHJhbmdlIGlzIGdyZWF0ZXIgdGhhbiBgMGAKICAgIAkJICogYW5kIGxlc3MgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZmFyfS4KICAgIAkJICoKICAgIAkJICogTm90ZSB0aGF0LCB1bmxpa2UgZm9yIHRoZSB7QGxpbmsgT3J0aG9ncmFwaGljQ2FtZXJhfSwgYDBgIGlzIDxlbT5ub3Q8L2VtPiBhCiAgICAJCSAqIHZhbGlkIHZhbHVlIGZvciBhIHBlcnNwZWN0aXZlIGNhbWVyYSdzIG5lYXIgcGxhbmUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAuMQogICAgCQkgKi8KICAgIAkJdGhpcy5uZWFyID0gbmVhcjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY2FtZXJhJ3MgZmFyIHBsYW5lLiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUKICAgIAkJICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjbmVhcn0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDIwMDAKICAgIAkJICovCiAgICAJCXRoaXMuZmFyID0gZmFyOwoKICAgIAkJLyoqCiAgICAJCSAqIE9iamVjdCBkaXN0YW5jZSB1c2VkIGZvciBzdGVyZW9zY29weSBhbmQgZGVwdGgtb2YtZmllbGQgZWZmZWN0cy4gVGhpcwogICAgCQkgKiBwYXJhbWV0ZXIgZG9lcyBub3QgaW5mbHVlbmNlIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCB1bmxlc3MgYQogICAgCQkgKiB7QGxpbmsgU3RlcmVvQ2FtZXJhfSBpcyBiZWluZyB1c2VkLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAxMAogICAgCQkgKi8KICAgIAkJdGhpcy5mb2N1cyA9IDEwOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBhc3BlY3QgcmF0aW8sIHVzdWFsbHkgdGhlIGNhbnZhcyB3aWR0aCAvIGNhbnZhcyBoZWlnaHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMuYXNwZWN0ID0gYXNwZWN0OwoKICAgIAkJLyoqCiAgICAJCSAqIFJlcHJlc2VudHMgdGhlIGZydXN0dW0gd2luZG93IHNwZWNpZmljYXRpb24uIFRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBlZGl0ZWQKICAgIAkJICogZGlyZWN0bHkgYnV0IHZpYSB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjc2V0Vmlld09mZnNldH0gYW5kIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNjbGVhclZpZXdPZmZzZXR9LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P09iamVjdH0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy52aWV3ID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBGaWxtIHNpemUgdXNlZCBmb3IgdGhlIGxhcmdlciBheGlzLiBEZWZhdWx0IGlzIGAzNWAgKG1pbGxpbWV0ZXJzKS4gVGhpcwogICAgCQkgKiBwYXJhbWV0ZXIgZG9lcyBub3QgaW5mbHVlbmNlIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCB1bmxlc3Mge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1PZmZzZXR9CiAgICAJCSAqIGlzIHNldCB0byBhIG5vbnplcm8gdmFsdWUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDM1CiAgICAJCSAqLwogICAgCQl0aGlzLmZpbG1HYXVnZSA9IDM1OwoKICAgIAkJLyoqCiAgICAJCSAqIEhvcml6b250YWwgb2ZmLWNlbnRlciBvZmZzZXQgaW4gdGhlIHNhbWUgdW5pdCBhcyB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZmlsbUdhdWdlfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy5maWxtT2Zmc2V0ID0gMDsKCiAgICAJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkgewoKICAgIAkJc3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTsKCiAgICAJCXRoaXMuZm92ID0gc291cmNlLmZvdjsKICAgIAkJdGhpcy56b29tID0gc291cmNlLnpvb207CgogICAgCQl0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjsKICAgIAkJdGhpcy5mYXIgPSBzb3VyY2UuZmFyOwogICAgCQl0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzOwoKICAgIAkJdGhpcy5hc3BlY3QgPSBzb3VyY2UuYXNwZWN0OwogICAgCQl0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTsKCiAgICAJCXRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTsKICAgIAkJdGhpcy5maWxtT2Zmc2V0ID0gc291cmNlLmZpbG1PZmZzZXQ7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBGT1YgYnkgZm9jYWwgbGVuZ3RoIGluIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uCiAgICAJICoKICAgIAkgKiBUaGUgZGVmYXVsdCBmaWxtIGdhdWdlIGlzIDM1LCBzbyB0aGF0IHRoZSBmb2NhbCBsZW5ndGggY2FuIGJlIHNwZWNpZmllZCBmb3IKICAgIAkgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBmb2NhbExlbmd0aCAtIFZhbHVlcyBmb3IgZm9jYWwgbGVuZ3RoIGFuZCBmaWxtIGdhdWdlIG11c3QgaGF2ZSB0aGUgc2FtZSB1bml0LgogICAgCSAqLwogICAgCXNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApIHsKCiAgICAJCS8qKiBzZWUge0BsaW5rIGh0dHA6Ly93d3cuYm9iYXRraW5zLmNvbS9waG90b2dyYXBoeS90ZWNobmljYWwvZmllbGRfb2Zfdmlldy5odG1sfSAqLwogICAgCQljb25zdCB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoOwoKICAgIAkJdGhpcy5mb3YgPSBSQUQyREVHICogMiAqIE1hdGguYXRhbiggdkV4dGVudFNsb3BlICk7CiAgICAJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNmb3Z9IGFuZAogICAgCSAqIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNmaWxtR2F1Z2V9LgogICAgCSAqCiAgICAJICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29tcHV0ZWQgZm9jYWwgbGVuZ3RoLgogICAgCSAqLwogICAgCWdldEZvY2FsTGVuZ3RoKCkgewoKICAgIAkJY29uc3QgdkV4dGVudFNsb3BlID0gTWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApOwoKICAgIAkJcmV0dXJuIDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gdkV4dGVudFNsb3BlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmVydGljYWwgZmllbGQgb2YgdmlldyBhbmdsZSBpbiBkZWdyZWVzIGNvbnNpZGVyaW5nIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSN6b29tfS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGVmZmVjdGl2ZSBGT1YuCiAgICAJICovCiAgICAJZ2V0RWZmZWN0aXZlRk9WKCkgewoKICAgIAkJcmV0dXJuIFJBRDJERUcgKiAyICogTWF0aC5hdGFuKAogICAgCQkJTWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgd2lkdGggb2YgdGhlIGltYWdlIG9uIHRoZSBmaWxtLiBJZiB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjYXNwZWN0fSBpcyBncmVhdGVyIHRoYW4gb3IKICAgIAkgKiBlcXVhbCB0byBvbmUgKGxhbmRzY2FwZSBmb3JtYXQpLCB0aGUgcmVzdWx0IGVxdWFscyB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZmlsbUdhdWdlfS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGZpbG0gd2lkdGguCiAgICAJICovCiAgICAJZ2V0RmlsbVdpZHRoKCkgewoKICAgIAkJLy8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIHBvcnRyYWl0IGZvcm1hdCAoYXNwZWN0IDwgMSkKICAgIAkJcmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgaGVpZ2h0IG9mIHRoZSBpbWFnZSBvbiB0aGUgZmlsbS4gSWYge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2FzcGVjdH0gaXMgZ3JlYXRlciB0aGFuIG9yCiAgICAJICogZXF1YWwgdG8gb25lIChsYW5kc2NhcGUgZm9ybWF0KSwgdGhlIHJlc3VsdCBlcXVhbHMge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBmaWxtIHdpZHRoLgogICAgCSAqLwogICAgCWdldEZpbG1IZWlnaHQoKSB7CgogICAgCQkvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gbGFuZHNjYXBlIGZvcm1hdCAoYXNwZWN0ID4gMSkKICAgIAkJcmV0dXJuIHRoaXMuZmlsbUdhdWdlIC8gTWF0aC5tYXgoIHRoaXMuYXNwZWN0LCAxICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIDJEIGJvdW5kcyBvZiB0aGUgY2FtZXJhJ3Mgdmlld2FibGUgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZGlzdGFuY2UgYWxvbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uLgogICAgCSAqIFNldHMgYG1pblRhcmdldGAgYW5kIGBtYXhUYXJnZXRgIHRvIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgbG93ZXItbGVmdCBhbmQgdXBwZXItcmlnaHQgY29ybmVycyBvZiB0aGUgdmlldyByZWN0YW5nbGUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgLSBUaGUgdmlld2luZyBkaXN0YW5jZS4KICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1pblRhcmdldCAtIFRoZSBsb3dlci1sZWZ0IGNvcm5lciBvZiB0aGUgdmlldyByZWN0YW5nbGUgaXMgd3JpdHRlbiBpbnRvIHRoaXMgdmVjdG9yLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gbWF4VGFyZ2V0IC0gVGhlIHVwcGVyLXJpZ2h0IGNvcm5lciBvZiB0aGUgdmlldyByZWN0YW5nbGUgaXMgd3JpdHRlbiBpbnRvIHRoaXMgdmVjdG9yLgogICAgCSAqLwogICAgCWdldFZpZXdCb3VuZHMoIGRpc3RhbmNlLCBtaW5UYXJnZXQsIG1heFRhcmdldCApIHsKCiAgICAJCV92MyQxLnNldCggLTEsIC0xLCAwLjUgKS5hcHBseU1hdHJpeDQoIHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTsKCiAgICAJCW1pblRhcmdldC5zZXQoIF92MyQxLngsIF92MyQxLnkgKS5tdWx0aXBseVNjYWxhciggLSBkaXN0YW5jZSAvIF92MyQxLnogKTsKCiAgICAJCV92MyQxLnNldCggMSwgMSwgMC41ICkuYXBwbHlNYXRyaXg0KCB0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7CgogICAgCQltYXhUYXJnZXQuc2V0KCBfdjMkMS54LCBfdjMkMS55ICkubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgLyBfdjMkMS56ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29tcHV0ZXMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGNhbWVyYSdzIHZpZXdhYmxlIHJlY3RhbmdsZSBhdCBhIGdpdmVuIGRpc3RhbmNlIGFsb25nIHRoZSB2aWV3aW5nIGRpcmVjdGlvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSB2aWV3aW5nIGRpc3RhbmNlLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yMn0gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHJlc3VsdCB3aGVyZSB4IGlzIHdpZHRoIGFuZCB5IGlzIGhlaWdodC4KICAgIAkgKiBAcmV0dXJucyB7VmVjdG9yMn0gVGhlIHZpZXcgc2l6ZS4KICAgIAkgKi8KICAgIAlnZXRWaWV3U2l6ZSggZGlzdGFuY2UsIHRhcmdldCApIHsKCiAgICAJCXRoaXMuZ2V0Vmlld0JvdW5kcyggZGlzdGFuY2UsIF9taW5UYXJnZXQsIF9tYXhUYXJnZXQgKTsKCiAgICAJCXJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggX21heFRhcmdldCwgX21pblRhcmdldCApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgYW4gb2Zmc2V0IGluIGEgbGFyZ2VyIGZydXN0dW0uIFRoaXMgaXMgdXNlZnVsIGZvciBtdWx0aS13aW5kb3cgb3IKICAgIAkgKiBtdWx0aS1tb25pdG9yL211bHRpLW1hY2hpbmUgc2V0dXBzLgogICAgCSAqCiAgICAJICogRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIDN4MiBtb25pdG9ycyBhbmQgZWFjaCBtb25pdG9yIGlzIDE5MjB4MTA4MCBhbmQKICAgIAkgKiB0aGUgbW9uaXRvcnMgYXJlIGluIGdyaWQgbGlrZSB0aGlzCiAgICAJICpgYGAKICAgIAkgKiAgICstLS0rLS0tKy0tLSsKICAgIAkgKiAgIHwgQSB8IEIgfCBDIHwKICAgIAkgKiAgICstLS0rLS0tKy0tLSsKICAgIAkgKiAgIHwgRCB8IEUgfCBGIHwKICAgIAkgKiAgICstLS0rLS0tKy0tLSsKICAgIAkgKmBgYAogICAgCSAqIHRoZW4gZm9yIGVhY2ggbW9uaXRvciB5b3Ugd291bGQgY2FsbCBpdCBsaWtlIHRoaXM6CiAgICAJICpgYGBqcwogICAgCSAqIGNvbnN0IHcgPSAxOTIwOwogICAgCSAqIGNvbnN0IGggPSAxMDgwOwogICAgCSAqIGNvbnN0IGZ1bGxXaWR0aCA9IHcgKiAzOwogICAgCSAqIGNvbnN0IGZ1bGxIZWlnaHQgPSBoICogMjsKICAgIAkgKgogICAgCSAqIC8vIC0tQS0tCiAgICAJICogY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7CiAgICAJICogLy8gLS1CLS0KICAgIAkgKiBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDAsIHcsIGggKTsKICAgIAkgKiAvLyAtLUMtLQogICAgCSAqIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMCwgdywgaCApOwogICAgCSAqIC8vIC0tRC0tCiAgICAJICogY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7CiAgICAJICogLy8gLS1FLS0KICAgIAkgKiBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDEsIHcsIGggKTsKICAgIAkgKiAvLyAtLUYtLQogICAgCSAqIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMSwgdywgaCApOwogICAgCSAqIGBgYAogICAgCSAqCiAgICAJICogTm90ZSB0aGVyZSBpcyBubyByZWFzb24gbW9uaXRvcnMgaGF2ZSB0byBiZSB0aGUgc2FtZSBzaXplIG9yIGluIGEgZ3JpZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsV2lkdGggLSBUaGUgZnVsbCB3aWR0aCBvZiBtdWx0aXZpZXcgc2V0dXAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGZ1bGxIZWlnaHQgLSBUaGUgZnVsbCBoZWlnaHQgb2YgbXVsdGl2aWV3IHNldHVwLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGhvcml6b250YWwgb2Zmc2V0IG9mIHRoZSBzdWJjYW1lcmEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgb2Zmc2V0IG9mIHRoZSBzdWJjYW1lcmEuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHN1YmNhbWVyYS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiBzdWJjYW1lcmEuCiAgICAJICovCiAgICAJc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkgewoKICAgIAkJdGhpcy5hc3BlY3QgPSBmdWxsV2lkdGggLyBmdWxsSGVpZ2h0OwoKICAgIAkJaWYgKCB0aGlzLnZpZXcgPT09IG51bGwgKSB7CgogICAgCQkJdGhpcy52aWV3ID0gewogICAgCQkJCWVuYWJsZWQ6IHRydWUsCiAgICAJCQkJZnVsbFdpZHRoOiAxLAogICAgCQkJCWZ1bGxIZWlnaHQ6IDEsCiAgICAJCQkJb2Zmc2V0WDogMCwKICAgIAkJCQlvZmZzZXRZOiAwLAogICAgCQkJCXdpZHRoOiAxLAogICAgCQkJCWhlaWdodDogMQogICAgCQkJfTsKCiAgICAJCX0KCiAgICAJCXRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTsKICAgIAkJdGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDsKICAgIAkJdGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0OwogICAgCQl0aGlzLnZpZXcub2Zmc2V0WCA9IHg7CiAgICAJCXRoaXMudmlldy5vZmZzZXRZID0geTsKICAgIAkJdGhpcy52aWV3LndpZHRoID0gd2lkdGg7CiAgICAJCXRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7CgogICAgCQl0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZW1vdmVzIHRoZSB2aWV3IG9mZnNldCBmcm9tIHRoZSBwcm9qZWN0aW9uIG1hdHJpeC4KICAgIAkgKi8KICAgIAljbGVhclZpZXdPZmZzZXQoKSB7CgogICAgCQlpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlOwoKICAgIAkJfQoKICAgIAkJdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVXBkYXRlcyB0aGUgY2FtZXJhJ3MgcHJvamVjdGlvbiBtYXRyaXguIE11c3QgYmUgY2FsbGVkIGFmdGVyIGFueSBjaGFuZ2Ugb2YKICAgIAkgKiBjYW1lcmEgcHJvcGVydGllcy4KICAgIAkgKi8KICAgIAl1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkgewoKICAgIAkJY29uc3QgbmVhciA9IHRoaXMubmVhcjsKICAgIAkJbGV0IHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb207CiAgICAJCWxldCBoZWlnaHQgPSAyICogdG9wOwogICAgCQlsZXQgd2lkdGggPSB0aGlzLmFzcGVjdCAqIGhlaWdodDsKICAgIAkJbGV0IGxlZnQgPSAtMC41ICogd2lkdGg7CiAgICAJCWNvbnN0IHZpZXcgPSB0aGlzLnZpZXc7CgogICAgCQlpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHsKCiAgICAJCQljb25zdCBmdWxsV2lkdGggPSB2aWV3LmZ1bGxXaWR0aCwKICAgIAkJCQlmdWxsSGVpZ2h0ID0gdmlldy5mdWxsSGVpZ2h0OwoKICAgIAkJCWxlZnQgKz0gdmlldy5vZmZzZXRYICogd2lkdGggLyBmdWxsV2lkdGg7CiAgICAJCQl0b3AgLT0gdmlldy5vZmZzZXRZICogaGVpZ2h0IC8gZnVsbEhlaWdodDsKICAgIAkJCXdpZHRoICo9IHZpZXcud2lkdGggLyBmdWxsV2lkdGg7CiAgICAJCQloZWlnaHQgKj0gdmlldy5oZWlnaHQgLyBmdWxsSGVpZ2h0OwoKICAgIAkJfQoKICAgIAkJY29uc3Qgc2tldyA9IHRoaXMuZmlsbU9mZnNldDsKICAgIAkJaWYgKCBza2V3ICE9PSAwICkgbGVmdCArPSBuZWFyICogc2tldyAvIHRoaXMuZ2V0RmlsbVdpZHRoKCk7CgogICAgCQl0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCBsZWZ0ICsgd2lkdGgsIHRvcCwgdG9wIC0gaGVpZ2h0LCBuZWFyLCB0aGlzLmZhciwgdGhpcy5jb29yZGluYXRlU3lzdGVtICk7CgogICAgCQl0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMucHJvamVjdGlvbk1hdHJpeCApLmludmVydCgpOwoKICAgIAl9CgogICAgCXRvSlNPTiggbWV0YSApIHsKCiAgICAJCWNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTsKCiAgICAJCWRhdGEub2JqZWN0LmZvdiA9IHRoaXMuZm92OwogICAgCQlkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tOwoKICAgIAkJZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjsKICAgIAkJZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7CiAgICAJCWRhdGEub2JqZWN0LmZvY3VzID0gdGhpcy5mb2N1czsKCiAgICAJCWRhdGEub2JqZWN0LmFzcGVjdCA9IHRoaXMuYXNwZWN0OwoKICAgIAkJaWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApOwoKICAgIAkJZGF0YS5vYmplY3QuZmlsbUdhdWdlID0gdGhpcy5maWxtR2F1Z2U7CiAgICAJCWRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7CgogICAgCQlyZXR1cm4gZGF0YTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBmb3YgPSAtOTA7IC8vIG5lZ2F0aXZlIGZvdiBpcyBub3QgYW4gZXJyb3IKICAgIGNvbnN0IGFzcGVjdCA9IDE7CgogICAgLyoqCiAgICAgKiBBIHNwZWNpYWwgdHlwZSBvZiBjYW1lcmEgdGhhdCBpcyBwb3NpdGlvbmVkIGluIDNEIHNwYWNlIHRvIHJlbmRlciBpdHMgc3Vycm91bmRpbmdzIGludG8gYQogICAgICogY3ViZSByZW5kZXIgdGFyZ2V0LiBUaGUgcmVuZGVyIHRhcmdldCBjYW4gdGhlbiBiZSB1c2VkIGFzIGFuIGVudmlyb25tZW50IG1hcCBmb3IgcmVuZGVyaW5nCiAgICAgKiByZWFsdGltZSByZWZsZWN0aW9ucyBpbiB5b3VyIHNjZW5lLgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiAvLyBDcmVhdGUgY3ViZSByZW5kZXIgdGFyZ2V0CiAgICAgKiBjb25zdCBjdWJlUmVuZGVyVGFyZ2V0ID0gbmV3IFRIUkVFLldlYkdMQ3ViZVJlbmRlclRhcmdldCggMjU2LCB7IGdlbmVyYXRlTWlwbWFwczogdHJ1ZSwgbWluRmlsdGVyOiBUSFJFRS5MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgfSApOwogICAgICoKICAgICAqIC8vIENyZWF0ZSBjdWJlIGNhbWVyYQogICAgICogY29uc3QgY3ViZUNhbWVyYSA9IG5ldyBUSFJFRS5DdWJlQ2FtZXJhKCAxLCAxMDAwMDAsIGN1YmVSZW5kZXJUYXJnZXQgKTsKICAgICAqIHNjZW5lLmFkZCggY3ViZUNhbWVyYSApOwogICAgICoKICAgICAqIC8vIENyZWF0ZSBjYXIKICAgICAqIGNvbnN0IGNocm9tZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCBlbnZNYXA6IGN1YmVSZW5kZXJUYXJnZXQudGV4dHVyZSB9ICk7CiAgICAgKiBjb25zdCBjYXIgPSBuZXcgVEhSRUUuTWVzaCggY2FyR2VvbWV0cnksIGNocm9tZU1hdGVyaWFsICk7CiAgICAgKiBzY2VuZS5hZGQoIGNhciApOwogICAgICoKICAgICAqIC8vIFVwZGF0ZSB0aGUgcmVuZGVyIHRhcmdldCBjdWJlCiAgICAgKiBjYXIudmlzaWJsZSA9IGZhbHNlOwogICAgICogY3ViZUNhbWVyYS5wb3NpdGlvbi5jb3B5KCBjYXIucG9zaXRpb24gKTsKICAgICAqIGN1YmVDYW1lcmEudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTsKICAgICAqCiAgICAgKiAvLyBSZW5kZXIgdGhlIHNjZW5lCiAgICAgKiBjYXIudmlzaWJsZSA9IHRydWU7CiAgICAgKiByZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmEgKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIEBhdWdtZW50cyBPYmplY3QzRAogICAgICovCiAgICBjbGFzcyBDdWJlQ2FtZXJhIGV4dGVuZHMgT2JqZWN0M0QgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGN1YmUgY2FtZXJhLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgLSBUaGUgY2FtZXJhJ3MgbmVhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gZmFyIC0gVGhlIGNhbWVyYSdzIGZhciBwbGFuZS4KICAgIAkgKiBAcGFyYW0ge1dlYkdMQ3ViZVJlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIGN1YmUgcmVuZGVyIHRhcmdldC4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggbmVhciwgZmFyLCByZW5kZXJUYXJnZXQgKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJdGhpcy50eXBlID0gJ0N1YmVDYW1lcmEnOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdWJlIHJlbmRlciB0YXJnZXQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtXZWJHTEN1YmVSZW5kZXJUYXJnZXR9CiAgICAJCSAqLwogICAgCQl0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY3VycmVudCBhY3RpdmUgY29vcmRpbmF0ZSBzeXN0ZW0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/KFdlYkdMQ29vcmRpbmF0ZVN5c3RlbXxXZWJHUFVDb29yZGluYXRlU3lzdGVtKX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5jb29yZGluYXRlU3lzdGVtID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY3VycmVudCBhY3RpdmUgbWlwbWFwIGxldmVsCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuYWN0aXZlTWlwbWFwTGV2ZWwgPSAwOwoKICAgIAkJY29uc3QgY2FtZXJhUFggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhUFgubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFQWCApOwoKICAgIAkJY29uc3QgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhTlgubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFOWCApOwoKICAgIAkJY29uc3QgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhUFkubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFQWSApOwoKICAgIAkJY29uc3QgY2FtZXJhTlkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhTlkubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFOWSApOwoKICAgIAkJY29uc3QgY2FtZXJhUFogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhUFoubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFQWiApOwoKICAgIAkJY29uc3QgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKICAgIAkJY2FtZXJhTloubGF5ZXJzID0gdGhpcy5sYXllcnM7CiAgICAJCXRoaXMuYWRkKCBjYW1lcmFOWiApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIE11c3QgYmUgY2FsbGVkIHdoZW4gdGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSBjdWJlIGNhbWVyYSBpcyBjaGFuZ2VkLgogICAgCSAqLwogICAgCXVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKSB7CgogICAgCQljb25zdCBjb29yZGluYXRlU3lzdGVtID0gdGhpcy5jb29yZGluYXRlU3lzdGVtOwoKICAgIAkJY29uc3QgY2FtZXJhcyA9IHRoaXMuY2hpbGRyZW4uY29uY2F0KCk7CgogICAgCQljb25zdCBbIGNhbWVyYVBYLCBjYW1lcmFOWCwgY2FtZXJhUFksIGNhbWVyYU5ZLCBjYW1lcmFQWiwgY2FtZXJhTlogXSA9IGNhbWVyYXM7CgogICAgCQlmb3IgKCBjb25zdCBjYW1lcmEgb2YgY2FtZXJhcyApIHRoaXMucmVtb3ZlKCBjYW1lcmEgKTsKCiAgICAJCWlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkgewoKICAgIAkJCWNhbWVyYVBYLnVwLnNldCggMCwgMSwgMCApOwogICAgCQkJY2FtZXJhUFgubG9va0F0KCAxLCAwLCAwICk7CgogICAgCQkJY2FtZXJhTlgudXAuc2V0KCAwLCAxLCAwICk7CiAgICAJCQljYW1lcmFOWC5sb29rQXQoIC0xLCAwLCAwICk7CgogICAgCQkJY2FtZXJhUFkudXAuc2V0KCAwLCAwLCAtMSApOwogICAgCQkJY2FtZXJhUFkubG9va0F0KCAwLCAxLCAwICk7CgogICAgCQkJY2FtZXJhTlkudXAuc2V0KCAwLCAwLCAxICk7CiAgICAJCQljYW1lcmFOWS5sb29rQXQoIDAsIC0xLCAwICk7CgogICAgCQkJY2FtZXJhUFoudXAuc2V0KCAwLCAxLCAwICk7CiAgICAJCQljYW1lcmFQWi5sb29rQXQoIDAsIDAsIDEgKTsKCiAgICAJCQljYW1lcmFOWi51cC5zZXQoIDAsIDEsIDAgKTsKICAgIAkJCWNhbWVyYU5aLmxvb2tBdCggMCwgMCwgLTEgKTsKCiAgICAJCX0gZWxzZSBpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQkJY2FtZXJhUFgudXAuc2V0KCAwLCAtMSwgMCApOwogICAgCQkJY2FtZXJhUFgubG9va0F0KCAtMSwgMCwgMCApOwoKICAgIAkJCWNhbWVyYU5YLnVwLnNldCggMCwgLTEsIDAgKTsKICAgIAkJCWNhbWVyYU5YLmxvb2tBdCggMSwgMCwgMCApOwoKICAgIAkJCWNhbWVyYVBZLnVwLnNldCggMCwgMCwgMSApOwogICAgCQkJY2FtZXJhUFkubG9va0F0KCAwLCAxLCAwICk7CgogICAgCQkJY2FtZXJhTlkudXAuc2V0KCAwLCAwLCAtMSApOwogICAgCQkJY2FtZXJhTlkubG9va0F0KCAwLCAtMSwgMCApOwoKICAgIAkJCWNhbWVyYVBaLnVwLnNldCggMCwgLTEsIDAgKTsKICAgIAkJCWNhbWVyYVBaLmxvb2tBdCggMCwgMCwgMSApOwoKICAgIAkJCWNhbWVyYU5aLnVwLnNldCggMCwgLTEsIDAgKTsKICAgIAkJCWNhbWVyYU5aLmxvb2tBdCggMCwgMCwgLTEgKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuQ3ViZUNhbWVyYS51cGRhdGVDb29yZGluYXRlU3lzdGVtKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICcgKyBjb29yZGluYXRlU3lzdGVtICk7CgogICAgCQl9CgogICAgCQlmb3IgKCBjb25zdCBjYW1lcmEgb2YgY2FtZXJhcyApIHsKCiAgICAJCQl0aGlzLmFkZCggY2FtZXJhICk7CgogICAgCQkJY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIHJlbmRlciB0aGUgZ2l2ZW4gc2NlbmUgd2l0aCB0aGUgZ2l2ZW4gcmVuZGVyZXIKICAgIAkgKiBpbnRvIHRoZSBjdWJlIHJlbmRlciB0YXJnZXQgb2YgdGhlIGNhbWVyYS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7KFJlbmRlcmVyfFdlYkdMUmVuZGVyZXIpfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci4KICAgIAkgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZSB0byByZW5kZXIuCiAgICAJICovCiAgICAJdXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKSB7CgogICAgCQlpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkgdGhpcy51cGRhdGVNYXRyaXhXb3JsZCgpOwoKICAgIAkJY29uc3QgeyByZW5kZXJUYXJnZXQsIGFjdGl2ZU1pcG1hcExldmVsIH0gPSB0aGlzOwoKICAgIAkJaWYgKCB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gIT09IHJlbmRlcmVyLmNvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQkJdGhpcy5jb29yZGluYXRlU3lzdGVtID0gcmVuZGVyZXIuY29vcmRpbmF0ZVN5c3RlbTsKCiAgICAJCQl0aGlzLnVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gdGhpcy5jaGlsZHJlbjsKCiAgICAJCWNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTsKICAgIAkJY29uc3QgY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTsKICAgIAkJY29uc3QgY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTsKCiAgICAJCWNvbnN0IGN1cnJlbnRYckVuYWJsZWQgPSByZW5kZXJlci54ci5lbmFibGVkOwoKICAgIAkJcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlOwoKICAgIAkJY29uc3QgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzOwoKICAgIAkJcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7CgogICAgCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMCwgYWN0aXZlTWlwbWFwTGV2ZWwgKTsKICAgIAkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTsKCiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAxLCBhY3RpdmVNaXBtYXBMZXZlbCApOwogICAgCQlyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFOWCApOwoKICAgIAkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDIsIGFjdGl2ZU1pcG1hcExldmVsICk7CiAgICAJCXJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBZICk7CgogICAgCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMywgYWN0aXZlTWlwbWFwTGV2ZWwgKTsKICAgIAkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTsKCiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA0LCBhY3RpdmVNaXBtYXBMZXZlbCApOwogICAgCQlyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWiApOwoKICAgIAkJLy8gbWlwbWFwcyBhcmUgZ2VuZXJhdGVkIGR1cmluZyB0aGUgbGFzdCBjYWxsIG9mIHJlbmRlcigpCiAgICAJCS8vIGF0IHRoaXMgcG9pbnQsIGFsbCBzaWRlcyBvZiB0aGUgY3ViZSByZW5kZXIgdGFyZ2V0IGFyZSBkZWZpbmVkCgogICAgCQlyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7CgogICAgCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTsKICAgIAkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlogKTsKCiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgY3VycmVudEFjdGl2ZUN1YmVGYWNlLCBjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgKTsKCiAgICAJCXJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkOwoKICAgIAkJcmVuZGVyVGFyZ2V0LnRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IHRydWU7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgY3ViZSB0ZXh0dXJlIG1hZGUgdXAgb2Ygc2l4IGltYWdlcy4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCk7CiAgICAgKiBsb2FkZXIuc2V0UGF0aCggJ3RleHR1cmVzL2N1YmUvcGlzYS8nICk7CiAgICAgKgogICAgICogY29uc3QgdGV4dHVyZUN1YmUgPSBsb2FkZXIubG9hZCggWwogICAgICogCSdweC5wbmcnLCAnbngucG5nJywgJ3B5LnBuZycsICdueS5wbmcnLCAncHoucG5nJywgJ256LnBuZycKICAgICAqIF0gKTsKICAgICAqCiAgICAgKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIGVudk1hcDogdGV4dHVyZUN1YmUgfSApOwogICAgICogYGBgCiAgICAgKgogICAgICogQGF1Z21lbnRzIFRleHR1cmUKICAgICAqLwogICAgY2xhc3MgQ3ViZVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBjdWJlIHRleHR1cmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PEltYWdlPn0gW2ltYWdlcz1bXV0gLSBBbiBhcnJheSBob2xkaW5nIGEgaW1hZ2UgZm9yIGVhY2ggc2lkZSBvZiBhIGN1YmUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttYXBwaW5nPUN1YmVSZWZsZWN0aW9uTWFwcGluZ10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwVCB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttaW5GaWx0ZXI9TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXSAtIFRoZSBtaW4gZmlsdGVyIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZm9ybWF0PVJHQkFGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1Ob0NvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlIHZhbHVlLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBpbWFnZXMgPSBbXSwgbWFwcGluZyA9IEN1YmVSZWZsZWN0aW9uTWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICkgewoKICAgIAkJc3VwZXIoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0N1YmVUZXh0dXJlID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW4KICAgIAkJICogdXBsb2FkZWQgdG8gdGhlIEdQVS4KICAgIAkJICoKICAgIAkJICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCBmYWxzZQogICAgCQkgKi8KICAgIAkJdGhpcy5mbGlwWSA9IGZhbHNlOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIEFsaWFzIGZvciB7QGxpbmsgQ3ViZVRleHR1cmUjaW1hZ2V9LgogICAgCSAqCiAgICAJICogQHR5cGUge0FycmF5PEltYWdlPn0KICAgIAkgKi8KICAgIAlnZXQgaW1hZ2VzKCkgewoKICAgIAkJcmV0dXJuIHRoaXMuaW1hZ2U7CgogICAgCX0KCiAgICAJc2V0IGltYWdlcyggdmFsdWUgKSB7CgogICAgCQl0aGlzLmltYWdlID0gdmFsdWU7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIGN1YmUgcmVuZGVyIHRhcmdldCB1c2VkIGluIGNvbnRleHQgb2Yge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LgogICAgICoKICAgICAqIEBhdWdtZW50cyBXZWJHTFJlbmRlclRhcmdldAogICAgICovCiAgICBjbGFzcyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQgZXh0ZW5kcyBXZWJHTFJlbmRlclRhcmdldCB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgY3ViZSByZW5kZXIgdGFyZ2V0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIC0gVGhlIHNpemUgb2YgdGhlIHJlbmRlciB0YXJnZXQuCiAgICAJICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBzaXplID0gMSwgb3B0aW9ucyA9IHt9ICkgewoKICAgIAkJc3VwZXIoIHNpemUsIHNpemUsIG9wdGlvbnMgKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID0gdHJ1ZTsKCiAgICAJCWNvbnN0IGltYWdlID0geyB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBkZXB0aDogMSB9OwogICAgCQljb25zdCBpbWFnZXMgPSBbIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UgXTsKCiAgICAJCS8qKgogICAgCQkgKiBPdmVyd3JpdHRlbiB3aXRoIGEgZGlmZmVyZW50IHRleHR1cmUgdHlwZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0RhdGFBcnJheVRleHR1cmV9CiAgICAJCSAqLwogICAgCQl0aGlzLnRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoIGltYWdlcyApOwogICAgCQl0aGlzLl9zZXRUZXh0dXJlT3B0aW9ucyggb3B0aW9ucyApOwoKICAgIAkJLy8gQnkgY29udmVudGlvbiAtLSBsaWtlbHkgYmFzZWQgb24gdGhlIFJlbmRlck1hbiBzcGVjIGZyb20gdGhlIDE5OTAncyAtLSBjdWJlIG1hcHMgYXJlIHNwZWNpZmllZCBieSBXZWJHTCAoYW5kIHRocmVlLmpzKQogICAgCQkvLyBpbiBhIGNvb3JkaW5hdGUgc3lzdGVtIGluIHdoaWNoIHBvc2l0aXZlLXggaXMgdG8gdGhlIHJpZ2h0IHdoZW4gbG9va2luZyB1cCB0aGUgcG9zaXRpdmUteiBheGlzIC0tIGluIG90aGVyIHdvcmRzLAogICAgCQkvLyBpbiBhIGxlZnQtaGFuZGVkIGNvb3JkaW5hdGUgc3lzdGVtLiBCeSBjb250aW51aW5nIHRoaXMgY29udmVudGlvbiwgcHJlZXhpc3RpbmcgY3ViZSBtYXBzIGNvbnRpbnVlZCB0byByZW5kZXIgY29ycmVjdGx5LgoKICAgIAkJLy8gdGhyZWUuanMgdXNlcyBhIHJpZ2h0LWhhbmRlZCBjb29yZGluYXRlIHN5c3RlbS4gU28gZW52aXJvbm1lbnQgbWFwcyB1c2VkIGluIHRocmVlLmpzIGFwcGVhciB0byBoYXZlIHB4IGFuZCBueCBzd2FwcGVkCiAgICAJCS8vIGFuZCB0aGUgZmxhZyBpc1JlbmRlclRhcmdldFRleHR1cmUgY29udHJvbHMgdGhpcyBjb252ZXJzaW9uLiBUaGUgZmxpcCBpcyBub3QgcmVxdWlyZWQgd2hlbiB1c2luZyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQudGV4dHVyZQogICAgCQkvLyBhcyBhIGN1YmUgdGV4dHVyZSAodGhpcyBpcyBkZXRlY3RlZCB3aGVuIGlzUmVuZGVyVGFyZ2V0VGV4dHVyZSBpcyBzZXQgdG8gdHJ1ZSBmb3IgY3ViZSB0ZXh0dXJlcykuCgogICAgCQl0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUgdG8gYSBjdWJlIG1hcC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuCiAgICAJICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlLgogICAgCSAqIEByZXR1cm4ge1dlYkdMQ3ViZVJlbmRlclRhcmdldH0gQSByZWZlcmVuY2UgdG8gdGhpcyBjdWJlIHJlbmRlciB0YXJnZXQuCiAgICAJICovCiAgICAJZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICkgewoKICAgIAkJdGhpcy50ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7CiAgICAJCXRoaXMudGV4dHVyZS5jb2xvclNwYWNlID0gdGV4dHVyZS5jb2xvclNwYWNlOwoKICAgIAkJdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzOwogICAgCQl0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXI7CiAgICAJCXRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXh0dXJlLm1hZ0ZpbHRlcjsKCiAgICAJCWNvbnN0IHNoYWRlciA9IHsKCiAgICAJCQl1bmlmb3JtczogewogICAgCQkJCXRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJfSwKCiAgICAJCQl2ZXJ0ZXhTaGFkZXI6IC8qIGdsc2wgKi9gCgoJCQkJdmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjsKCgkJCQl2ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkgewoKCQkJCQlyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTsKCgkJCQl9CgoJCQkJdm9pZCBtYWluKCkgewoKCQkJCQl2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApOwoKCQkJCQkjaW5jbHVkZSA8YmVnaW5fdmVydGV4PgoJCQkJCSNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD4KCgkJCQl9CgkJCWAsCgogICAgCQkJZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gCgoJCQkJdW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0OwoKCQkJCXZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247CgoJCQkJI2luY2x1ZGUgPGNvbW1vbj4KCgkJCQl2b2lkIG1haW4oKSB7CgoJCQkJCXZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTsKCgkJCQkJdmVjMiBzYW1wbGVVViA9IGVxdWlyZWN0VXYoIGRpcmVjdGlvbiApOwoKCQkJCQlnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTsKCgkJCQl9CgkJCWAKICAgIAkJfTsKCiAgICAJCWNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCA1LCA1LCA1ICk7CgogICAgCQljb25zdCBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCggewoKICAgIAkJCW5hbWU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JywKCiAgICAJCQl1bmlmb3JtczogY2xvbmVVbmlmb3Jtcyggc2hhZGVyLnVuaWZvcm1zICksCiAgICAJCQl2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsCiAgICAJCQlmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLAogICAgCQkJc2lkZTogQmFja1NpZGUsCiAgICAJCQlibGVuZGluZzogTm9CbGVuZGluZwoKICAgIAkJfSApOwoKICAgIAkJbWF0ZXJpYWwudW5pZm9ybXMudEVxdWlyZWN0LnZhbHVlID0gdGV4dHVyZTsKCiAgICAJCWNvbnN0IG1lc2ggPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgogICAgCQljb25zdCBjdXJyZW50TWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXI7CgogICAgCQkvLyBBdm9pZCBibHVycmVkIHBvbGVzCiAgICAJCWlmICggdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyOwoKICAgIAkJY29uc3QgY2FtZXJhID0gbmV3IEN1YmVDYW1lcmEoIDEsIDEwLCB0aGlzICk7CiAgICAJCWNhbWVyYS51cGRhdGUoIHJlbmRlcmVyLCBtZXNoICk7CgogICAgCQl0ZXh0dXJlLm1pbkZpbHRlciA9IGN1cnJlbnRNaW5GaWx0ZXI7CgogICAgCQltZXNoLmdlb21ldHJ5LmRpc3Bvc2UoKTsKICAgIAkJbWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDbGVhcnMgdGhpcyBjdWJlIHJlbmRlciB0YXJnZXQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLgogICAgCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbG9yPXRydWVdIC0gV2hldGhlciB0aGUgY29sb3IgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC4KICAgIAkgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgdGhlIGRlcHRoIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuCiAgICAJICogQHBhcmFtIHtib29sZWFufSBbc3RlbmNpbD10cnVlXSAtIFdoZXRoZXIgdGhlIHN0ZW5jaWwgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC4KICAgIAkgKi8KICAgIAljbGVhciggcmVuZGVyZXIsIGNvbG9yID0gdHJ1ZSwgZGVwdGggPSB0cnVlLCBzdGVuY2lsID0gdHJ1ZSApIHsKCiAgICAJCWNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLCBpICk7CgogICAgCQkJcmVuZGVyZXIuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApOwoKICAgIAkJfQoKICAgIAkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIGlzIGFsbW9zdCBpZGVudGljYWwgdG8gYW4ge0BsaW5rIE9iamVjdDNEfS4gSXRzIHB1cnBvc2UgaXMgdG8KICAgICAqIG1ha2Ugd29ya2luZyB3aXRoIGdyb3VwcyBvZiBvYmplY3RzIHN5bnRhY3RpY2FsbHkgY2xlYXJlci4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogLy8gQ3JlYXRlIGEgZ3JvdXAgYW5kIGFkZCB0aGUgdHdvIGN1YmVzLgogICAgICogLy8gVGhlc2UgY3ViZXMgY2FuIG5vdyBiZSByb3RhdGVkIC8gc2NhbGVkIGV0YyBhcyBhIGdyb3VwLgogICAgICogY29uc3QgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTsKICAgICAqCiAgICAgKiBncm91cC5hZGQoIG1lc2hBICk7CiAgICAgKiBncm91cC5hZGQoIG1lc2hCICk7CiAgICAgKgogICAgICogc2NlbmUuYWRkKCBncm91cCApOwogICAgICogYGBgCiAgICAgKgogICAgICogQGF1Z21lbnRzIE9iamVjdDNECiAgICAgKi8KICAgIGNsYXNzIEdyb3VwIGV4dGVuZHMgT2JqZWN0M0QgewoKICAgIAljb25zdHJ1Y3RvcigpIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0dyb3VwID0gdHJ1ZTsKCiAgICAJCXRoaXMudHlwZSA9ICdHcm91cCc7CgogICAgCX0KCiAgICB9CgogICAgY29uc3QgX21vdmVFdmVudCA9IHsgdHlwZTogJ21vdmUnIH07CgogICAgLyoqCiAgICAgKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgWFIgY29udHJvbGxlciB3aXRoIGl0cwogICAgICogZGlmZmVyZW50IGNvb3JkaW5hdGUgc3lzdGVtcy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICovCiAgICBjbGFzcyBXZWJYUkNvbnRyb2xsZXIgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IFhSIGNvbnRyb2xsZXIuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQkvKioKICAgIAkJICogQSBncm91cCByZXByZXNlbnRpbmcgdGhlIHRhcmdldCByYXkgc3BhY2UKICAgIAkJICogb2YgdGhlIFhSIGNvbnRyb2xsZXIuCiAgICAJCSAqCiAgICAJCSAqIEBwcml2YXRlCiAgICAJCSAqIEB0eXBlIHs/R3JvdXB9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuX3RhcmdldFJheSA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGdyaXAgc3BhY2UKICAgIAkJICogb2YgdGhlIFhSIGNvbnRyb2xsZXIuCiAgICAJCSAqCiAgICAJCSAqIEBwcml2YXRlCiAgICAJCSAqIEB0eXBlIHs/R3JvdXB9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuX2dyaXAgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBoYW5kIHNwYWNlCiAgICAJCSAqIG9mIHRoZSBYUiBjb250cm9sbGVyLgogICAgCQkgKgogICAgCQkgKiBAcHJpdmF0ZQogICAgCQkgKiBAdHlwZSB7P0dyb3VwfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLl9oYW5kID0gbnVsbDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBoYW5kIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLgogICAgCSAqCiAgICAJICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBoYW5kIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLgogICAgCSAqLwogICAgCWdldEhhbmRTcGFjZSgpIHsKCiAgICAJCWlmICggdGhpcy5faGFuZCA9PT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLl9oYW5kID0gbmV3IEdyb3VwKCk7CiAgICAJCQl0aGlzLl9oYW5kLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKICAgIAkJCXRoaXMuX2hhbmQudmlzaWJsZSA9IGZhbHNlOwoKICAgIAkJCXRoaXMuX2hhbmQuam9pbnRzID0ge307CiAgICAJCQl0aGlzLl9oYW5kLmlucHV0U3RhdGUgPSB7IHBpbmNoaW5nOiBmYWxzZSB9OwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXMuX2hhbmQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgdGFyZ2V0IHJheSBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgdGFyZ2V0IHJheSBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkgKi8KICAgIAlnZXRUYXJnZXRSYXlTcGFjZSgpIHsKCiAgICAJCWlmICggdGhpcy5fdGFyZ2V0UmF5ID09PSBudWxsICkgewoKICAgIAkJCXRoaXMuX3RhcmdldFJheSA9IG5ldyBHcm91cCgpOwogICAgCQkJdGhpcy5fdGFyZ2V0UmF5Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKICAgIAkJCXRoaXMuX3RhcmdldFJheS52aXNpYmxlID0gZmFsc2U7CiAgICAJCQl0aGlzLl90YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSBmYWxzZTsKICAgIAkJCXRoaXMuX3RhcmdldFJheS5saW5lYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7CiAgICAJCQl0aGlzLl90YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7CiAgICAJCQl0aGlzLl90YXJnZXRSYXkuYW5ndWxhclZlbG9jaXR5ID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzLl90YXJnZXRSYXk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgZ3JpcCBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgZ3JpcCBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkgKi8KICAgIAlnZXRHcmlwU3BhY2UoKSB7CgogICAgCQlpZiAoIHRoaXMuX2dyaXAgPT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5fZ3JpcCA9IG5ldyBHcm91cCgpOwogICAgCQkJdGhpcy5fZ3JpcC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CiAgICAJCQl0aGlzLl9ncmlwLnZpc2libGUgPSBmYWxzZTsKICAgIAkJCXRoaXMuX2dyaXAuaGFzTGluZWFyVmVsb2NpdHkgPSBmYWxzZTsKICAgIAkJCXRoaXMuX2dyaXAubGluZWFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpOwogICAgCQkJdGhpcy5fZ3JpcC5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTsKICAgIAkJCXRoaXMuX2dyaXAuYW5ndWxhclZlbG9jaXR5ID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzLl9ncmlwOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIERpc3BhdGNoZXMgdGhlIGdpdmVuIGV2ZW50IHRvIHRoZSBncm91cHMgcmVwcmVzZW50aW5nCiAgICAJICogdGhlIGRpZmZlcmVudCBjb29yZGluYXRlIHNwYWNlcyBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCB0byBkaXNwYXRjaC4KICAgIAkgKiBAcmV0dXJuIHtXZWJYUkNvbnRyb2xsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7CgogICAgCQlpZiAoIHRoaXMuX3RhcmdldFJheSAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLl90YXJnZXRSYXkuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTsKCiAgICAJCX0KCiAgICAJCWlmICggdGhpcy5fZ3JpcCAhPT0gbnVsbCApIHsKCiAgICAJCQl0aGlzLl9ncmlwLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5faGFuZC5kaXNwYXRjaEV2ZW50KCBldmVudCApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29ubmVjdHMgdGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgZ2l2ZW4gWFIgaW5wdXQgc291cmNlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtYUklucHV0U291cmNlfSBpbnB1dFNvdXJjZSAtIFRoZSBpbnB1dCBzb3VyY2UuCiAgICAJICogQHJldHVybiB7V2ViWFJDb250cm9sbGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCWNvbm5lY3QoIGlucHV0U291cmNlICkgewoKICAgIAkJaWYgKCBpbnB1dFNvdXJjZSAmJiBpbnB1dFNvdXJjZS5oYW5kICkgewoKICAgIAkJCWNvbnN0IGhhbmQgPSB0aGlzLl9oYW5kOwoKICAgIAkJCWlmICggaGFuZCApIHsKCiAgICAJCQkJZm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkgewoKICAgIAkJCQkJLy8gSW5pdGlhbGl6ZSBoYW5kIHdpdGggam9pbnRzIHdoZW4gY29ubmVjdGVkCiAgICAJCQkJCXRoaXMuX2dldEhhbmRKb2ludCggaGFuZCwgaW5wdXRqb2ludCApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEaXNjb25uZWN0cyB0aGUgY29udHJvbGxlciBmcm9tIHRoZSBnaXZlbiBYUiBpbnB1dCBzb3VyY2UuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IGlucHV0U291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS4KICAgIAkgKiBAcmV0dXJuIHtXZWJYUkNvbnRyb2xsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKSB7CgogICAgCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTsKCiAgICAJCWlmICggdGhpcy5fdGFyZ2V0UmF5ICE9PSBudWxsICkgewoKICAgIAkJCXRoaXMuX3RhcmdldFJheS52aXNpYmxlID0gZmFsc2U7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuX2dyaXAgIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5fZ3JpcC52aXNpYmxlID0gZmFsc2U7CgogICAgCQl9CgogICAgCQlpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5faGFuZC52aXNpYmxlID0gZmFsc2U7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBVcGRhdGVzIHRoZSBjb250cm9sbGVyIHdpdGggdGhlIGdpdmVuIGlucHV0IHNvdXJjZSwgWFIgZnJhbWUgYW5kIHJlZmVyZW5jZSBzcGFjZS4KICAgIAkgKiBUaGlzIHVwZGF0ZXMgdGhlIHRyYW5zZm9ybWF0aW9ucyBvZiB0aGUgZ3JvdXBzIHRoYXQgcmVwcmVzZW50IHRoZSBkaWZmZXJlbnQKICAgIAkgKiBjb29yZGluYXRlIHN5c3RlbXMgb2YgdGhlIGNvbnRyb2xsZXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IGlucHV0U291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS4KICAgIAkgKiBAcGFyYW0ge1hSRnJhbWV9IGZyYW1lIC0gVGhlIFhSIGZyYW1lLgogICAgCSAqIEBwYXJhbSB7WFJSZWZlcmVuY2VTcGFjZX0gcmVmZXJlbmNlU3BhY2UgLSBUaGUgcmVmZXJlbmNlIHNwYWNlLgogICAgCSAqIEByZXR1cm4ge1dlYlhSQ29udHJvbGxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAl1cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgcmVmZXJlbmNlU3BhY2UgKSB7CgogICAgCQlsZXQgaW5wdXRQb3NlID0gbnVsbDsKICAgIAkJbGV0IGdyaXBQb3NlID0gbnVsbDsKICAgIAkJbGV0IGhhbmRQb3NlID0gbnVsbDsKCiAgICAJCWNvbnN0IHRhcmdldFJheSA9IHRoaXMuX3RhcmdldFJheTsKICAgIAkJY29uc3QgZ3JpcCA9IHRoaXMuX2dyaXA7CiAgICAJCWNvbnN0IGhhbmQgPSB0aGlzLl9oYW5kOwoKICAgIAkJaWYgKCBpbnB1dFNvdXJjZSAmJiBmcmFtZS5zZXNzaW9uLnZpc2liaWxpdHlTdGF0ZSAhPT0gJ3Zpc2libGUtYmx1cnJlZCcgKSB7CgogICAgCQkJaWYgKCBoYW5kICYmIGlucHV0U291cmNlLmhhbmQgKSB7CgogICAgCQkJCWhhbmRQb3NlID0gdHJ1ZTsKCiAgICAJCQkJZm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkgewoKICAgIAkJCQkJLy8gVXBkYXRlIHRoZSBqb2ludHMgZ3JvdXBzIHdpdGggdGhlIFhSSm9pbnQgcG9zZXMKICAgIAkJCQkJY29uc3Qgam9pbnRQb3NlID0gZnJhbWUuZ2V0Sm9pbnRQb3NlKCBpbnB1dGpvaW50LCByZWZlcmVuY2VTcGFjZSApOwoKICAgIAkJCQkJLy8gVGhlIHRyYW5zZm9ybSBvZiB0aGlzIGpvaW50IHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBqb2ludCBwb3NlIG9uIGVhY2ggZnJhbWUKICAgIAkJCQkJY29uc3Qgam9pbnQgPSB0aGlzLl9nZXRIYW5kSm9pbnQoIGhhbmQsIGlucHV0am9pbnQgKTsKCiAgICAJCQkJCWlmICggam9pbnRQb3NlICE9PSBudWxsICkgewoKICAgIAkJCQkJCWpvaW50Lm1hdHJpeC5mcm9tQXJyYXkoIGpvaW50UG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7CiAgICAJCQkJCQlqb2ludC5tYXRyaXguZGVjb21wb3NlKCBqb2ludC5wb3NpdGlvbiwgam9pbnQucm90YXRpb24sIGpvaW50LnNjYWxlICk7CiAgICAJCQkJCQlqb2ludC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIAkJCQkJCWpvaW50LmpvaW50UmFkaXVzID0gam9pbnRQb3NlLnJhZGl1czsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWpvaW50LnZpc2libGUgPSBqb2ludFBvc2UgIT09IG51bGw7CgogICAgCQkJCX0KCiAgICAJCQkJLy8gQ3VzdG9tIGV2ZW50cwoKICAgIAkJCQkvLyBDaGVjayBwaW5jaHoKICAgIAkJCQljb25zdCBpbmRleFRpcCA9IGhhbmQuam9pbnRzWyAnaW5kZXgtZmluZ2VyLXRpcCcgXTsKICAgIAkJCQljb25zdCB0aHVtYlRpcCA9IGhhbmQuam9pbnRzWyAndGh1bWItdGlwJyBdOwogICAgCQkJCWNvbnN0IGRpc3RhbmNlID0gaW5kZXhUaXAucG9zaXRpb24uZGlzdGFuY2VUbyggdGh1bWJUaXAucG9zaXRpb24gKTsKCiAgICAJCQkJY29uc3QgZGlzdGFuY2VUb1BpbmNoID0gMC4wMjsKICAgIAkJCQljb25zdCB0aHJlc2hvbGQgPSAwLjAwNTsKCiAgICAJCQkJaWYgKCBoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgJiYgZGlzdGFuY2UgPiBkaXN0YW5jZVRvUGluY2ggKyB0aHJlc2hvbGQgKSB7CgogICAgCQkJCQloYW5kLmlucHV0U3RhdGUucGluY2hpbmcgPSBmYWxzZTsKICAgIAkJCQkJdGhpcy5kaXNwYXRjaEV2ZW50KCB7CiAgICAJCQkJCQl0eXBlOiAncGluY2hlbmQnLAogICAgCQkJCQkJaGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcywKICAgIAkJCQkJCXRhcmdldDogdGhpcwogICAgCQkJCQl9ICk7CgogICAgCQkJCX0gZWxzZSBpZiAoICEgaGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nICYmIGRpc3RhbmNlIDw9IGRpc3RhbmNlVG9QaW5jaCAtIHRocmVzaG9sZCApIHsKCiAgICAJCQkJCWhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyA9IHRydWU7CiAgICAJCQkJCXRoaXMuZGlzcGF0Y2hFdmVudCggewogICAgCQkJCQkJdHlwZTogJ3BpbmNoc3RhcnQnLAogICAgCQkJCQkJaGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcywKICAgIAkJCQkJCXRhcmdldDogdGhpcwogICAgCQkJCQl9ICk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlpZiAoIGdyaXAgIT09IG51bGwgJiYgaW5wdXRTb3VyY2UuZ3JpcFNwYWNlICkgewoKICAgIAkJCQkJZ3JpcFBvc2UgPSBmcmFtZS5nZXRQb3NlKCBpbnB1dFNvdXJjZS5ncmlwU3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7CgogICAgCQkJCQlpZiAoIGdyaXBQb3NlICE9PSBudWxsICkgewoKICAgIAkJCQkJCWdyaXAubWF0cml4LmZyb21BcnJheSggZ3JpcFBvc2UudHJhbnNmb3JtLm1hdHJpeCApOwogICAgCQkJCQkJZ3JpcC5tYXRyaXguZGVjb21wb3NlKCBncmlwLnBvc2l0aW9uLCBncmlwLnJvdGF0aW9uLCBncmlwLnNjYWxlICk7CiAgICAJCQkJCQlncmlwLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCQkJCWlmICggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKSB7CgogICAgCQkJCQkJCWdyaXAuaGFzTGluZWFyVmVsb2NpdHkgPSB0cnVlOwogICAgCQkJCQkJCWdyaXAubGluZWFyVmVsb2NpdHkuY29weSggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKTsKCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQlncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJCWlmICggZ3JpcFBvc2UuYW5ndWxhclZlbG9jaXR5ICkgewoKICAgIAkJCQkJCQlncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IHRydWU7CiAgICAJCQkJCQkJZ3JpcC5hbmd1bGFyVmVsb2NpdHkuY29weSggZ3JpcFBvc2UuYW5ndWxhclZlbG9jaXR5ICk7CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJZ3JpcC5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJaWYgKCB0YXJnZXRSYXkgIT09IG51bGwgKSB7CgogICAgCQkJCWlucHV0UG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLnRhcmdldFJheVNwYWNlLCByZWZlcmVuY2VTcGFjZSApOwoKICAgIAkJCQkvLyBTb21lIHJ1bnRpbWVzIChuYW1lbHkgVml2ZSBDb3Ntb3Mgd2l0aCBWaXZlIE9wZW5YUiBSdW50aW1lKSBoYXZlIG9ubHkgZ3JpcCBzcGFjZSBhbmQgcmF5IHNwYWNlIGlzIGVxdWFsIHRvIGl0CiAgICAJCQkJaWYgKCBpbnB1dFBvc2UgPT09IG51bGwgJiYgZ3JpcFBvc2UgIT09IG51bGwgKSB7CgogICAgCQkJCQlpbnB1dFBvc2UgPSBncmlwUG9zZTsKCiAgICAJCQkJfQoKICAgIAkJCQlpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHsKCiAgICAJCQkJCXRhcmdldFJheS5tYXRyaXguZnJvbUFycmF5KCBpbnB1dFBvc2UudHJhbnNmb3JtLm1hdHJpeCApOwogICAgCQkJCQl0YXJnZXRSYXkubWF0cml4LmRlY29tcG9zZSggdGFyZ2V0UmF5LnBvc2l0aW9uLCB0YXJnZXRSYXkucm90YXRpb24sIHRhcmdldFJheS5zY2FsZSApOwogICAgCQkJCQl0YXJnZXRSYXkubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQkJCQlpZiAoIGlucHV0UG9zZS5saW5lYXJWZWxvY2l0eSApIHsKCiAgICAJCQkJCQl0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSB0cnVlOwogICAgCQkJCQkJdGFyZ2V0UmF5LmxpbmVhclZlbG9jaXR5LmNvcHkoIGlucHV0UG9zZS5saW5lYXJWZWxvY2l0eSApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQl0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSBmYWxzZTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWlmICggaW5wdXRQb3NlLmFuZ3VsYXJWZWxvY2l0eSApIHsKCiAgICAJCQkJCQl0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gdHJ1ZTsKICAgIAkJCQkJCXRhcmdldFJheS5hbmd1bGFyVmVsb2NpdHkuY29weSggaW5wdXRQb3NlLmFuZ3VsYXJWZWxvY2l0eSApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQl0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7CgogICAgCQkJCQl9CgogICAgCQkJCQl0aGlzLmRpc3BhdGNoRXZlbnQoIF9tb3ZlRXZlbnQgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCgogICAgCQl9CgogICAgCQlpZiAoIHRhcmdldFJheSAhPT0gbnVsbCApIHsKCiAgICAJCQl0YXJnZXRSYXkudmlzaWJsZSA9ICggaW5wdXRQb3NlICE9PSBudWxsICk7CgogICAgCQl9CgogICAgCQlpZiAoIGdyaXAgIT09IG51bGwgKSB7CgogICAgCQkJZ3JpcC52aXNpYmxlID0gKCBncmlwUG9zZSAhPT0gbnVsbCApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBoYW5kICE9PSBudWxsICkgewoKICAgIAkJCWhhbmQudmlzaWJsZSA9ICggaGFuZFBvc2UgIT09IG51bGwgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgam9pbnQgZm9yIHRoZSBnaXZlbiBpbnB1dCBqb2ludC4KICAgIAkgKgogICAgCSAqIEBwcml2YXRlCiAgICAJICogQHBhcmFtIHtHcm91cH0gaGFuZCAtIFRoZSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgc3BhY2UuCiAgICAJICogQHBhcmFtIHtYUkpvaW50U3BhY2V9IGlucHV0am9pbnQgLSBUaGUgaGFuZCBqb2ludCBkYXRhLgogICAgCSAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgaGFuZCBqb2ludCBmb3IgdGhlIGdpdmVuIGlucHV0IGpvaW50LgogICAgCSAqLwogICAgCV9nZXRIYW5kSm9pbnQoIGhhbmQsIGlucHV0am9pbnQgKSB7CgogICAgCQlpZiAoIGhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY29uc3Qgam9pbnQgPSBuZXcgR3JvdXAoKTsKICAgIAkJCWpvaW50Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKICAgIAkJCWpvaW50LnZpc2libGUgPSBmYWxzZTsKICAgIAkJCWhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdID0gam9pbnQ7CgogICAgCQkJaGFuZC5hZGQoIGpvaW50ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF07CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBTY2VuZXMgYWxsb3cgeW91IHRvIHNldCB1cCB3aGF0IGlzIHRvIGJlIHJlbmRlcmVkIGFuZCB3aGVyZSBieSB0aHJlZS5qcy4KICAgICAqIFRoaXMgaXMgd2hlcmUgeW91IHBsYWNlIDNEIG9iamVjdHMgbGlrZSBtZXNoZXMsIGxpbmVzIG9yIGxpZ2h0cy4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgT2JqZWN0M0QKICAgICAqLwogICAgY2xhc3MgU2NlbmUgZXh0ZW5kcyBPYmplY3QzRCB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgc2NlbmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNTY2VuZSA9IHRydWU7CgogICAgCQl0aGlzLnR5cGUgPSAnU2NlbmUnOwoKICAgIAkJLyoqCiAgICAJCSAqIERlZmluZXMgdGhlIGJhY2tncm91bmQgb2YgdGhlIHNjZW5lLiBWYWxpZCBpbnB1dHMgYXJlOgogICAgCQkgKgogICAgCQkgKiAtIEEgY29sb3IgZm9yIGRlZmluaW5nIGEgdW5pZm9ybSBjb2xvcmVkIGJhY2tncm91bmQuCiAgICAJCSAqIC0gQSB0ZXh0dXJlIGZvciBkZWZpbmluZyBhIChmbGF0KSB0ZXh0dXJlZCBiYWNrZ3JvdW5kLgogICAgCQkgKiAtIEN1YmUgdGV4dHVyZXMgb3IgZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmVzIGZvciBkZWZpbmluZyBhIHNreWJveC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez8oQ29sb3J8VGV4dHVyZSl9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuYmFja2dyb3VuZCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogU2V0cyB0aGUgZW52aXJvbm1lbnQgbWFwIGZvciBhbGwgcGh5c2ljYWwgbWF0ZXJpYWxzIGluIHRoZSBzY2VuZS4gSG93ZXZlciwKICAgIAkJICogaXQncyBub3QgcG9zc2libGUgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIHRleHR1cmUgYXNzaWduZWQgdG8gdGhlIGBlbnZNYXBgCiAgICAJCSAqIG1hdGVyaWFsIHByb3BlcnR5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P1RleHR1cmV9CiAgICAJCSAqIEBkZWZhdWx0IG51bGwKICAgIAkJICovCiAgICAJCXRoaXMuZW52aXJvbm1lbnQgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgZm9nIGluc3RhbmNlIGRlZmluaW5nIHRoZSB0eXBlIG9mIGZvZyB0aGF0IGFmZmVjdHMgZXZlcnl0aGluZwogICAgCQkgKiByZW5kZXJlZCBpbiB0aGUgc2NlbmUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/KEZvZ3xGb2dFeHAyKX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5mb2cgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIFNldHMgdGhlIGJsdXJyaW5lc3Mgb2YgdGhlIGJhY2tncm91bmQuIE9ubHkgaW5mbHVlbmNlcyBlbnZpcm9ubWVudCBtYXBzCiAgICAJCSAqIGFzc2lnbmVkIHRvIHtAbGluayBTY2VuZSNiYWNrZ3JvdW5kfS4gVmFsaWQgaW5wdXQgaXMgYSBmbG9hdCBiZXR3ZWVuIGAwYAogICAgCQkgKiBhbmQgYDFgLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLmJhY2tncm91bmRCbHVycmluZXNzID0gMDsKCiAgICAJCS8qKgogICAgCQkgKiBBdHRlbnVhdGVzIHRoZSBjb2xvciBvZiB0aGUgYmFja2dyb3VuZC4gT25seSBhcHBsaWVzIHRvIGJhY2tncm91bmQgdGV4dHVyZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMuYmFja2dyb3VuZEludGVuc2l0eSA9IDE7CgogICAgCQkvKioKICAgIAkJICogVGhlIHJvdGF0aW9uIG9mIHRoZSBiYWNrZ3JvdW5kIGluIHJhZGlhbnMuIE9ubHkgaW5mbHVlbmNlcyBlbnZpcm9ubWVudCBtYXBzCiAgICAJCSAqIGFzc2lnbmVkIHRvIHtAbGluayBTY2VuZSNiYWNrZ3JvdW5kfS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0V1bGVyfQogICAgCQkgKiBAZGVmYXVsdCAoMCwwLDApCiAgICAJCSAqLwogICAgCQl0aGlzLmJhY2tncm91bmRSb3RhdGlvbiA9IG5ldyBFdWxlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIEF0dGVudWF0ZXMgdGhlIGNvbG9yIG9mIHRoZSBlbnZpcm9ubWVudC4gT25seSBpbmZsdWVuY2VzIGVudmlyb25tZW50IG1hcHMKICAgIAkJICogYXNzaWduZWQgdG8ge0BsaW5rIFNjZW5lI2Vudmlyb25tZW50fS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy5lbnZpcm9ubWVudEludGVuc2l0eSA9IDE7CgogICAgCQkvKioKICAgIAkJICogVGhlIHJvdGF0aW9uIG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgaW4gcmFkaWFucy4gT25seSBpbmZsdWVuY2VzIHBoeXNpY2FsIG1hdGVyaWFscwogICAgCQkgKiBpbiB0aGUgc2NlbmUgd2hlbiB7QGxpbmsgU2NlbmUjZW52aXJvbm1lbnR9IGlzIHVzZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtFdWxlcn0KICAgIAkJICogQGRlZmF1bHQgKDAsMCwwKQogICAgCQkgKi8KICAgIAkJdGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uID0gbmV3IEV1bGVyKCk7CgogICAgCQkvKioKICAgIAkJICogRm9yY2VzIGV2ZXJ5dGhpbmcgaW4gdGhlIHNjZW5lIHRvIGJlIHJlbmRlcmVkIHdpdGggdGhlIGRlZmluZWQgbWF0ZXJpYWwuIEl0IGlzIHBvc3NpYmxlCiAgICAJCSAqIHRvIGV4Y2x1ZGUgbWF0ZXJpYWxzIGZyb20gb3ZlcnJpZGUgYnkgc2V0dGluZyB7QGxpbmsgTWF0ZXJpYWwjYWxsb3dPdmVycmlkZX0gdG8gYGZhbHNlYC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9NYXRlcmlhbH0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDsKCiAgICAJCWlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7CgogICAgCQkJX19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9ICkgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAljb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7CgogICAgCQlpZiAoIHNvdXJjZS5iYWNrZ3JvdW5kICE9PSBudWxsICkgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTsKICAgIAkJaWYgKCBzb3VyY2UuZW52aXJvbm1lbnQgIT09IG51bGwgKSB0aGlzLmVudmlyb25tZW50ID0gc291cmNlLmVudmlyb25tZW50LmNsb25lKCk7CiAgICAJCWlmICggc291cmNlLmZvZyAhPT0gbnVsbCApIHRoaXMuZm9nID0gc291cmNlLmZvZy5jbG9uZSgpOwoKICAgIAkJdGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IHNvdXJjZS5iYWNrZ3JvdW5kQmx1cnJpbmVzczsKICAgIAkJdGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ID0gc291cmNlLmJhY2tncm91bmRJbnRlbnNpdHk7CiAgICAJCXRoaXMuYmFja2dyb3VuZFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5iYWNrZ3JvdW5kUm90YXRpb24gKTsKCiAgICAJCXRoaXMuZW52aXJvbm1lbnRJbnRlbnNpdHkgPSBzb3VyY2UuZW52aXJvbm1lbnRJbnRlbnNpdHk7CiAgICAJCXRoaXMuZW52aXJvbm1lbnRSb3RhdGlvbi5jb3B5KCBzb3VyY2UuZW52aXJvbm1lbnRSb3RhdGlvbiApOwoKICAgIAkJaWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7CgogICAgCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCXRvSlNPTiggbWV0YSApIHsKCiAgICAJCWNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTsKCiAgICAJCWlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTsKCiAgICAJCWlmICggdGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA+IDAgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IHRoaXMuYmFja2dyb3VuZEJsdXJyaW5lc3M7CiAgICAJCWlmICggdGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5vYmplY3QuYmFja2dyb3VuZEludGVuc2l0eSA9IHRoaXMuYmFja2dyb3VuZEludGVuc2l0eTsKICAgIAkJZGF0YS5vYmplY3QuYmFja2dyb3VuZFJvdGF0aW9uID0gdGhpcy5iYWNrZ3JvdW5kUm90YXRpb24udG9BcnJheSgpOwoKICAgIAkJaWYgKCB0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5ICE9PSAxICkgZGF0YS5vYmplY3QuZW52aXJvbm1lbnRJbnRlbnNpdHkgPSB0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5OwogICAgCQlkYXRhLm9iamVjdC5lbnZpcm9ubWVudFJvdGF0aW9uID0gdGhpcy5lbnZpcm9ubWVudFJvdGF0aW9uLnRvQXJyYXkoKTsKCiAgICAJCXJldHVybiBkYXRhOwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF92ZWN0b3IxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwogICAgY29uc3QgX3ZlY3RvcjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CiAgICBjb25zdCBfbm9ybWFsTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpOwoKICAgIC8qKgogICAgICogQSB0d28gZGltZW5zaW9uYWwgc3VyZmFjZSB0aGF0IGV4dGVuZHMgaW5maW5pdGVseSBpbiAzRCBzcGFjZSwgcmVwcmVzZW50ZWQKICAgICAqIGluIFtIZXNzaWFuIG5vcm1hbCBmb3JtXXtAbGluayBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0hlc3NpYW5Ob3JtYWxGb3JtLmh0bWx9CiAgICAgKiBieSBhIHVuaXQgbGVuZ3RoIG5vcm1hbCB2ZWN0b3IgYW5kIGEgY29uc3RhbnQuCiAgICAgKi8KICAgIGNsYXNzIFBsYW5lIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBwbGFuZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW25vcm1hbD0oMSwwLDApXSAtIEEgdW5pdCBsZW5ndGggdmVjdG9yIGRlZmluaW5nIHRoZSBub3JtYWwgb2YgdGhlIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbY29uc3RhbnQ9MF0gLSBUaGUgc2lnbmVkIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byB0aGUgcGxhbmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIGNvbnN0YW50ID0gMCApIHsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzUGxhbmUgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgdW5pdCBsZW5ndGggdmVjdG9yIGRlZmluaW5nIHRoZSBub3JtYWwgb2YgdGhlIHBsYW5lLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7VmVjdG9yM30KICAgIAkJICovCiAgICAJCXRoaXMubm9ybWFsID0gbm9ybWFsOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIHRoZSBwbGFuZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy5jb25zdGFudCA9IGNvbnN0YW50OwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHBsYW5lIGNvbXBvbmVudHMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBub3JtYWwgLSBUaGUgbm9ybWFsLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBjb25zdGFudCAtIFRoZSBjb25zdGFudC4KICAgIAkgKiBAcmV0dXJuIHtQbGFuZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBwbGFuZS4KICAgIAkgKi8KICAgIAlzZXQoIG5vcm1hbCwgY29uc3RhbnQgKSB7CgogICAgCQl0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTsKICAgIAkJdGhpcy5jb25zdGFudCA9IGNvbnN0YW50OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgcGxhbmUgY29tcG9uZW50cyBieSBkZWZpbmluZyBgeGAsIGB5YCwgYHpgIGFzIHRoZQogICAgCSAqIHBsYW5lIG5vcm1hbCBhbmQgYHdgIGFzIHRoZSBjb25zdGFudC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIGZvciB0aGUgbm9ybWFsJ3MgeCBjb21wb25lbnQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgZm9yIHRoZSBub3JtYWwncyB5IGNvbXBvbmVudC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSBmb3IgdGhlIG5vcm1hbCdzIHogY29tcG9uZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSB3IC0gVGhlIGNvbnN0YW50IHZhbHVlLgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBsYW5lLgogICAgCSAqLwogICAgCXNldENvbXBvbmVudHMoIHgsIHksIHosIHcgKSB7CgogICAgCQl0aGlzLm5vcm1hbC5zZXQoIHgsIHksIHogKTsKICAgIAkJdGhpcy5jb25zdGFudCA9IHc7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTZXRzIHRoZSBwbGFuZSBmcm9tIHRoZSBnaXZlbiBub3JtYWwgYW5kIGNvcGxhbmFyIHBvaW50ICh0aGF0IGlzIGEgcG9pbnQKICAgIAkgKiB0aGF0IGxpZXMgb250byB0aGUgcGxhbmUpLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBub3JtYWwgLSBUaGUgbm9ybWFsLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBBIGNvcGxhbmFyIHBvaW50LgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBsYW5lLgogICAgCSAqLwogICAgCXNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIHBvaW50ICkgewoKICAgIAkJdGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7CiAgICAJCXRoaXMuY29uc3RhbnQgPSAtIHBvaW50LmRvdCggdGhpcy5ub3JtYWwgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIHBsYW5lIGZyb20gdGhyZWUgY29wbGFuYXIgcG9pbnRzLiBUaGUgd2luZGluZyBvcmRlciBpcwogICAgCSAqIGFzc3VtZWQgdG8gYmUgY291bnRlci1jbG9ja3dpc2UsIGFuZCBkZXRlcm1pbmVzIHRoZSBkaXJlY3Rpb24gb2YKICAgIAkgKiB0aGUgcGxhbmUgbm9ybWFsLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IGNvcGxhbmFyIHBvaW50LgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29wbGFuYXIgcG9pbnQuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBjIC0gVGhlIHRoaXJkIGNvcGxhbmFyIHBvaW50LgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBsYW5lLgogICAgCSAqLwogICAgCXNldEZyb21Db3BsYW5hclBvaW50cyggYSwgYiwgYyApIHsKCiAgICAJCWNvbnN0IG5vcm1hbCA9IF92ZWN0b3IxLnN1YlZlY3RvcnMoIGMsIGIgKS5jcm9zcyggX3ZlY3RvcjIuc3ViVmVjdG9ycyggYSwgYiApICkubm9ybWFsaXplKCk7CgogICAgCQkvLyBROiBzaG91bGQgYW4gZXJyb3IgYmUgdGhyb3duIGlmIG5vcm1hbCBpcyB6ZXJvIChlLmcuIGRlZ2VuZXJhdGUgcGxhbmUpPwoKICAgIAkJdGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gcGxhbmUgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IHBsYW5lIC0gVGhlIHBsYW5lIHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuCiAgICAJICovCiAgICAJY29weSggcGxhbmUgKSB7CgogICAgCQl0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTsKICAgIAkJdGhpcy5jb25zdGFudCA9IHBsYW5lLmNvbnN0YW50OwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogTm9ybWFsaXplcyB0aGUgcGxhbmUgbm9ybWFsIGFuZCBhZGp1c3RzIHRoZSBjb25zdGFudCBhY2NvcmRpbmdseS4KICAgIAkgKgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBsYW5lLgogICAgCSAqLwogICAgCW5vcm1hbGl6ZSgpIHsKCiAgICAJCS8vIE5vdGU6IHdpbGwgbGVhZCB0byBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBwbGFuZSBpcyBpbnZhbGlkLgoKICAgIAkJY29uc3QgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpOwogICAgCQl0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApOwogICAgCQl0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBOZWdhdGVzIGJvdGggdGhlIHBsYW5lIG5vcm1hbCBhbmQgdGhlIGNvbnN0YW50LgogICAgCSAqCiAgICAJICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuCiAgICAJICovCiAgICAJbmVnYXRlKCkgewoKICAgIAkJdGhpcy5jb25zdGFudCAqPSAtMTsKICAgIAkJdGhpcy5ub3JtYWwubmVnYXRlKCk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIHRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gcG9pbnQgdG8gdGhpcyBwbGFuZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcG9pbnQgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgZm9yLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNpZ25lZCBkaXN0YW5jZS4KICAgIAkgKi8KICAgIAlkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgewoKICAgIAkJcmV0dXJuIHRoaXMubm9ybWFsLmRvdCggcG9pbnQgKSArIHRoaXMuY29uc3RhbnQ7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyB0aGUgc2lnbmVkIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHNwaGVyZSB0byB0aGlzIHBsYW5lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBzcGhlcmUgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgZm9yLgogICAgCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNpZ25lZCBkaXN0YW5jZS4KICAgIAkgKi8KICAgIAlkaXN0YW5jZVRvU3BoZXJlKCBzcGhlcmUgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSAtIHNwaGVyZS5yYWRpdXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUHJvamVjdHMgYSB0aGUgZ2l2ZW4gcG9pbnQgb250byB0aGUgcGxhbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIHByb2plY3QuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgcHJvamVjdGVkIHBvaW50IG9uIHRoZSBwbGFuZS4KICAgIAkgKi8KICAgIAlwcm9qZWN0UG9pbnQoIHBvaW50LCB0YXJnZXQgKSB7CgogICAgCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLm5vcm1hbCwgLSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgdGhlIGludGVyc2VjdGlvbiBwb2ludCBvZiB0aGUgcGFzc2VkIGxpbmUgYW5kIHRoZSBwbGFuZS4gUmV0dXJucwogICAgCSAqIGBudWxsYCBpZiB0aGUgbGluZSBkb2VzIG5vdCBpbnRlcnNlY3QuIFJldHVybnMgdGhlIGxpbmUncyBzdGFydGluZyBwb2ludCBpZgogICAgCSAqIHRoZSBsaW5lIGlzIGNvcGxhbmFyIHdpdGggdGhlIHBsYW5lLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtMaW5lM30gbGluZSAtIFRoZSBsaW5lIHRvIGNvbXB1dGUgdGhlIGludGVyc2VjdGlvbiBmb3IuCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC4KICAgIAkgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGludGVyc2VjdGlvbiBwb2ludC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7CgogICAgCQljb25zdCBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKCBfdmVjdG9yMSApOwoKICAgIAkJY29uc3QgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoIGRpcmVjdGlvbiApOwoKICAgIAkJaWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHsKCiAgICAJCQkvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luCiAgICAJCQlpZiAoIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICkgPT09IDAgKSB7CgogICAgCQkJCXJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApOwoKICAgIAkJCX0KCiAgICAJCQkvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS4KICAgIAkJCXJldHVybiBudWxsOwoKICAgIAkJfQoKICAgIAkJY29uc3QgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yOwoKICAgIAkJaWYgKCB0IDwgMCB8fCB0ID4gMSApIHsKCiAgICAJCQlyZXR1cm4gbnVsbDsKCiAgICAJCX0KCiAgICAJCXJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApLmFkZFNjYWxlZFZlY3RvciggZGlyZWN0aW9uLCB0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGxpbmUgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggKHBhc3NlcyB0aHJvdWdoKSB0aGUgcGxhbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0xpbmUzfSBsaW5lIC0gVGhlIGxpbmUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBsaW5lIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBwbGFuZSBvciBub3QuCiAgICAJICovCiAgICAJaW50ZXJzZWN0c0xpbmUoIGxpbmUgKSB7CgogICAgCQkvLyBOb3RlOiB0aGlzIHRlc3RzIGlmIGEgbGluZSBpbnRlcnNlY3RzIHRoZSBwbGFuZSwgbm90IHdoZXRoZXIgaXQgKG9yIGl0cyBlbmQtcG9pbnRzKSBhcmUgY29wbGFuYXIgd2l0aCBpdC4KCiAgICAJCWNvbnN0IHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7CiAgICAJCWNvbnN0IGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTsKCiAgICAJCXJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IGludGVyc2VjdHMgd2l0aCB0aGUgcGxhbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBib3VuZGluZyBib3ggaW50ZXJzZWN0cyB3aXRoIHRoZSBwbGFuZSBvciBub3QuCiAgICAJICovCiAgICAJaW50ZXJzZWN0c0JveCggYm94ICkgewoKICAgIAkJcmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgc3BoZXJlIGludGVyc2VjdHMgd2l0aCB0aGUgcGxhbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIGJvdW5kaW5nIHNwaGVyZSB0byB0ZXN0LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lIG9yIG5vdC4KICAgIAkgKi8KICAgIAlpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7CgogICAgCQlyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSggdGhpcyApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBjb3BsYW5hciB2ZWN0b3IgdG8gdGhlIHBsYW5lLCBieSBjYWxjdWxhdGluZyB0aGUKICAgIAkgKiBwcm9qZWN0aW9uIG9mIHRoZSBub3JtYWwgYXQgdGhlIG9yaWdpbiBvbnRvIHRoZSBwbGFuZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuCiAgICAJICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNvcGxhbmFyIHBvaW50LgogICAgCSAqLwogICAgCWNvcGxhbmFyUG9pbnQoIHRhcmdldCApIHsKCiAgICAJCXJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmNvbnN0YW50ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQXBwbHkgYSA0eDQgbWF0cml4IHRvIHRoZSBwbGFuZS4gVGhlIG1hdHJpeCBtdXN0IGJlIGFuIGFmZmluZSwgaG9tb2dlbmVvdXMgdHJhbnNmb3JtLgogICAgCSAqCiAgICAJICogVGhlIG9wdGlvbmFsIG5vcm1hbCBtYXRyaXggY2FuIGJlIHByZS1jb21wdXRlZCBsaWtlIHNvOgogICAgCSAqIGBgYGpzCiAgICAJICogY29uc3Qgb3B0aW9uYWxOb3JtYWxNYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7CiAgICAJICogYGBgCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguCiAgICAJICogQHBhcmFtIHtNYXRyaXg0fSBbb3B0aW9uYWxOb3JtYWxNYXRyaXhdIC0gQSBwcmUtY29tcHV0ZWQgbm9ybWFsIG1hdHJpeC4KICAgIAkgKiBAcmV0dXJuIHtQbGFuZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBwbGFuZS4KICAgIAkgKi8KICAgIAlhcHBseU1hdHJpeDQoIG1hdHJpeCwgb3B0aW9uYWxOb3JtYWxNYXRyaXggKSB7CgogICAgCQljb25zdCBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7CgogICAgCQljb25zdCByZWZlcmVuY2VQb2ludCA9IHRoaXMuY29wbGFuYXJQb2ludCggX3ZlY3RvcjEgKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoKICAgIAkJY29uc3Qgbm9ybWFsID0gdGhpcy5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTsKCiAgICAJCXRoaXMuY29uc3RhbnQgPSAtIHJlZmVyZW5jZVBvaW50LmRvdCggbm9ybWFsICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUcmFuc2xhdGVzIHRoZSBwbGFuZSBieSB0aGUgZGlzdGFuY2UgZGVmaW5lZCBieSB0aGUgZ2l2ZW4gb2Zmc2V0IHZlY3Rvci4KICAgIAkgKiBOb3RlIHRoYXQgdGhpcyBvbmx5IGFmZmVjdHMgdGhlIHBsYW5lIGNvbnN0YW50IGFuZCB3aWxsIG5vdCBhZmZlY3QgdGhlIG5vcm1hbCB2ZWN0b3IuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IG9mZnNldCAtIFRoZSBvZmZzZXQgdmVjdG9yLgogICAgCSAqIEByZXR1cm4ge1BsYW5lfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBsYW5lLgogICAgCSAqLwogICAgCXRyYW5zbGF0ZSggb2Zmc2V0ICkgewoKICAgIAkJdGhpcy5jb25zdGFudCAtPSBvZmZzZXQuZG90KCB0aGlzLm5vcm1hbCApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBwbGFuZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1BsYW5lfSBwbGFuZSAtIFRoZSBwbGFuZSB0byB0ZXN0IGZvciBlcXVhbGl0eS4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcGxhbmUgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLgogICAgCSAqLwogICAgCWVxdWFscyggcGxhbmUgKSB7CgogICAgCQlyZXR1cm4gcGxhbmUubm9ybWFsLmVxdWFscyggdGhpcy5ub3JtYWwgKSAmJiAoIHBsYW5lLmNvbnN0YW50ID09PSB0aGlzLmNvbnN0YW50ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyBwbGFuZSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLgogICAgCSAqCiAgICAJICogQHJldHVybiB7UGxhbmV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAljbG9uZSgpIHsKCiAgICAJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCBfc3BoZXJlJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTsKICAgIGNvbnN0IF9kZWZhdWx0U3ByaXRlQ2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMiggMC41LCAwLjUgKTsKICAgIGNvbnN0IF92ZWN0b3IkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTsKCiAgICAvKioKICAgICAqIEZydXN0dW1zIGFyZSB1c2VkIHRvIGRldGVybWluZSB3aGF0IGlzIGluc2lkZSB0aGUgY2FtZXJhJ3MgZmllbGQgb2Ygdmlldy4KICAgICAqIFRoZXkgaGVscCBzcGVlZCB1cCB0aGUgcmVuZGVyaW5nIHByb2Nlc3MgLSBvYmplY3RzIHdoaWNoIGxpZSBvdXRzaWRlIGEgY2FtZXJhJ3MKICAgICAqIGZydXN0dW0gY2FuIHNhZmVseSBiZSBleGNsdWRlZCBmcm9tIHJlbmRlcmluZy4KICAgICAqCiAgICAgKiBUaGlzIGNsYXNzIGlzIG1haW5seSBpbnRlbmRlZCBmb3IgdXNlIGludGVybmFsbHkgYnkgYSByZW5kZXJlci4KICAgICAqLwogICAgY2xhc3MgRnJ1c3R1bSB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgZnJ1c3R1bS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwMF0gLSBUaGUgZmlyc3QgcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS4KICAgIAkgKiBAcGFyYW0ge1BsYW5lfSBbcDFdIC0gVGhlIHNlY29uZCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwMl0gLSBUaGUgdGhpcmQgcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS4KICAgIAkgKiBAcGFyYW0ge1BsYW5lfSBbcDNdIC0gVGhlIGZvdXJ0aCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwNF0gLSBUaGUgZmlmdGggcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS4KICAgIAkgKiBAcGFyYW0ge1BsYW5lfSBbcDVdIC0gVGhlIHNpeHRoIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHAwID0gbmV3IFBsYW5lKCksIHAxID0gbmV3IFBsYW5lKCksIHAyID0gbmV3IFBsYW5lKCksIHAzID0gbmV3IFBsYW5lKCksIHA0ID0gbmV3IFBsYW5lKCksIHA1ID0gbmV3IFBsYW5lKCkgKSB7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBhcnJheSBob2xkcyB0aGUgcGxhbmVzIHRoYXQgZW5jbG9zZSB0aGUgZnJ1c3R1bS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0FycmF5PFBsYW5lPn0KICAgIAkJICovCiAgICAJCXRoaXMucGxhbmVzID0gWyBwMCwgcDEsIHAyLCBwMywgcDQsIHA1IF07CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZnJ1c3R1bSBwbGFuZXMgYnkgY29weWluZyB0aGUgZ2l2ZW4gcGxhbmVzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtQbGFuZX0gW3AwXSAtIFRoZSBmaXJzdCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwMV0gLSBUaGUgc2Vjb25kIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uCiAgICAJICogQHBhcmFtIHtQbGFuZX0gW3AyXSAtIFRoZSB0aGlyZCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwM10gLSBUaGUgZm91cnRoIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uCiAgICAJICogQHBhcmFtIHtQbGFuZX0gW3A0XSAtIFRoZSBmaWZ0aCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLgogICAgCSAqIEBwYXJhbSB7UGxhbmV9IFtwNV0gLSBUaGUgc2l4dGggcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS4KICAgIAkgKiBAcmV0dXJuIHtGcnVzdHVtfSBBIHJlZmVyZW5jZSB0byB0aGlzIGZydXN0dW0uCiAgICAJICovCiAgICAJc2V0KCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkgewoKICAgIAkJY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7CgogICAgCQlwbGFuZXNbIDAgXS5jb3B5KCBwMCApOwogICAgCQlwbGFuZXNbIDEgXS5jb3B5KCBwMSApOwogICAgCQlwbGFuZXNbIDIgXS5jb3B5KCBwMiApOwogICAgCQlwbGFuZXNbIDMgXS5jb3B5KCBwMyApOwogICAgCQlwbGFuZXNbIDQgXS5jb3B5KCBwNCApOwogICAgCQlwbGFuZXNbIDUgXS5jb3B5KCBwNSApOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGZydXN0dW0gdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7RnJ1c3R1bX0gZnJ1c3R1bSAtIFRoZSBmcnVzdHVtIHRvIGNvcHkuCiAgICAJICogQHJldHVybiB7RnJ1c3R1bX0gQSByZWZlcmVuY2UgdG8gdGhpcyBmcnVzdHVtLgogICAgCSAqLwogICAgCWNvcHkoIGZydXN0dW0gKSB7CgogICAgCQljb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lczsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJcGxhbmVzWyBpIF0uY29weSggZnJ1c3R1bS5wbGFuZXNbIGkgXSApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgZnJ1c3R1bSBwbGFuZXMgZnJvbSB0aGUgZ2l2ZW4gcHJvamVjdGlvbiBtYXRyaXguCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgcHJvamVjdGlvbiBtYXRyaXguCiAgICAJICogQHBhcmFtIHsoV2ViR0xDb29yZGluYXRlU3lzdGVtfFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0pfSBjb29yZGluYXRlU3lzdGVtIC0gVGhlIGNvb3JkaW5hdGUgc3lzdGVtLgogICAgCSAqIEByZXR1cm4ge0ZydXN0dW19IEEgcmVmZXJlbmNlIHRvIHRoaXMgZnJ1c3R1bS4KICAgIAkgKi8KICAgIAlzZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggbSwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHsKCiAgICAJCWNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzOwogICAgCQljb25zdCBtZSA9IG0uZWxlbWVudHM7CiAgICAJCWNvbnN0IG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07CiAgICAJCWNvbnN0IG1lNCA9IG1lWyA0IF0sIG1lNSA9IG1lWyA1IF0sIG1lNiA9IG1lWyA2IF0sIG1lNyA9IG1lWyA3IF07CiAgICAJCWNvbnN0IG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdOwogICAgCQljb25zdCBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07CgogICAgCQlwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTsKICAgIAkJcGxhbmVzWyAxIF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUwLCBtZTcgKyBtZTQsIG1lMTEgKyBtZTgsIG1lMTUgKyBtZTEyICkubm9ybWFsaXplKCk7CiAgICAJCXBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpOwogICAgCQlwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTsKICAgIAkJcGxhbmVzWyA0IF0uc2V0Q29tcG9uZW50cyggbWUzIC0gbWUyLCBtZTcgLSBtZTYsIG1lMTEgLSBtZTEwLCBtZTE1IC0gbWUxNCApLm5vcm1hbGl6ZSgpOwoKICAgIAkJaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7CgogICAgCQkJcGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpOwoKICAgIAkJfSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHsKCiAgICAJCQlwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTIsIG1lNiwgbWUxMCwgbWUxNCApLm5vcm1hbGl6ZSgpOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICcgKyBjb29yZGluYXRlU3lzdGVtICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgM0Qgb2JqZWN0J3MgYm91bmRpbmcgc3BoZXJlIGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0uCiAgICAJICoKICAgIAkgKiBOb3RlIHRoYXQgdGhlIDNEIG9iamVjdCBtdXN0IGhhdmUgYSBnZW9tZXRyeSBzbyB0aGF0IHRoZSBib3VuZGluZyBzcGhlcmUgY2FuIGJlIGNhbGN1bGF0ZWQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRvIHRlc3QuCiAgICAJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgM0Qgb2JqZWN0J3MgYm91bmRpbmcgc3BoZXJlIGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0gb3Igbm90LgogICAgCSAqLwogICAgCWludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHsKCiAgICAJCWlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJaWYgKCBvYmplY3QuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBvYmplY3QuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7CgogICAgCQkJX3NwaGVyZSQzLmNvcHkoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5OwoKICAgIAkJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCiAgICAJCQlfc3BoZXJlJDMuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHNwcml0ZSBpcyBpbnRlcnNlY3RpbmcgdGhpcyBmcnVzdHVtLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtTcHJpdGV9IHNwcml0ZSAtIFRoZSBzcHJpdGUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzcHJpdGUgaXMgaW50ZXJzZWN0aW5nIHRoaXMgZnJ1c3R1bSBvciBub3QuCiAgICAJICovCiAgICAJaW50ZXJzZWN0c1Nwcml0ZSggc3ByaXRlICkgewoKICAgIAkJX3NwaGVyZSQzLmNlbnRlci5zZXQoIDAsIDAsIDAgKTsKCiAgICAJCWNvbnN0IG9mZnNldCA9IF9kZWZhdWx0U3ByaXRlQ2VudGVyLmRpc3RhbmNlVG8oIHNwcml0ZS5jZW50ZXIgKTsKCiAgICAJCV9zcGhlcmUkMy5yYWRpdXMgPSAwLjcwNzEwNjc4MTE4NjU0NzYgKyBvZmZzZXQ7CiAgICAJCV9zcGhlcmUkMy5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApOwoKICAgIAkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpcyBpbnRlcnNlY3RpbmcgdGhpcyBmcnVzdHVtLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBib3VuZGluZyBzcGhlcmUgdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3VuZGluZyBzcGhlcmUgaXMgaW50ZXJzZWN0aW5nIHRoaXMgZnJ1c3R1bSBvciBub3QuCiAgICAJICovCiAgICAJaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgewoKICAgIAkJY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7CiAgICAJCWNvbnN0IGNlbnRlciA9IHNwaGVyZS5jZW50ZXI7CiAgICAJCWNvbnN0IG5lZ1JhZGl1cyA9IC0gc3BoZXJlLnJhZGl1czsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJY29uc3QgZGlzdGFuY2UgPSBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIGNlbnRlciApOwoKICAgIAkJCWlmICggZGlzdGFuY2UgPCBuZWdSYWRpdXMgKSB7CgogICAgCQkJCXJldHVybiBmYWxzZTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXR1cm4gdHJ1ZTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0uCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC4KICAgIAkgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3VuZGluZyBib3ggaXMgaW50ZXJzZWN0aW5nIHRoaXMgZnJ1c3R1bSBvciBub3QuCiAgICAJICovCiAgICAJaW50ZXJzZWN0c0JveCggYm94ICkgewoKICAgIAkJY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKICAgIAkJCWNvbnN0IHBsYW5lID0gcGxhbmVzWyBpIF07CgogICAgCQkJLy8gY29ybmVyIGF0IG1heCBkaXN0YW5jZQoKICAgIAkJCV92ZWN0b3IkNi54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gYm94Lm1heC54IDogYm94Lm1pbi54OwogICAgCQkJX3ZlY3RvciQ2LnkgPSBwbGFuZS5ub3JtYWwueSA+IDAgPyBib3gubWF4LnkgOiBib3gubWluLnk7CiAgICAJCQlfdmVjdG9yJDYueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5tYXgueiA6IGJveC5taW4uejsKCiAgICAJCQlpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggX3ZlY3RvciQ2ICkgPCAwICkgewoKICAgIAkJCQlyZXR1cm4gZmFsc2U7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRydWU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHBvaW50IGxpZXMgd2l0aGluIHRoZSBmcnVzdHVtLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byB0ZXN0LgogICAgCSAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBvaW50IGxpZXMgd2l0aGluIHRoaXMgZnJ1c3R1bSBvciBub3QuCiAgICAJICovCiAgICAJY29udGFpbnNQb2ludCggcG9pbnQgKSB7CgogICAgCQljb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lczsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJaWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkgewoKICAgIAkJCQlyZXR1cm4gZmFsc2U7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRydWU7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmV0dXJucyBhIG5ldyBmcnVzdHVtIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuCiAgICAJICoKICAgIAkgKiBAcmV0dXJuIHtGcnVzdHVtfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIHRleHR1cmUgZm9yIHVzZSB3aXRoIGEgdmlkZW8uCiAgICAgKgogICAgICogYGBganMKICAgICAqIC8vIGFzc3VtaW5nIHlvdSBoYXZlIGNyZWF0ZWQgYSBIVE1MIHZpZGVvIGVsZW1lbnQgd2l0aCBpZD0idmlkZW8iCiAgICAgKiBjb25zdCB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAndmlkZW8nICk7CiAgICAgKiBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLlZpZGVvVGV4dHVyZSggdmlkZW8gKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIE5vdGU6IEFmdGVyIHRoZSBpbml0aWFsIHVzZSBvZiBhIHRleHR1cmUsIGl0cyBkaW1lbnNpb25zLCBmb3JtYXQsIGFuZCB0eXBlCiAgICAgKiBjYW5ub3QgYmUgY2hhbmdlZC4gSW5zdGVhZCwgY2FsbCB7QGxpbmsgVGV4dHVyZSNkaXNwb3NlfSBvbiB0aGUgdGV4dHVyZSBhbmQgaW5zdGFudGlhdGUgYSBuZXcgb25lLgogICAgICoKICAgICAqIEBhdWdtZW50cyBUZXh0dXJlCiAgICAgKi8KICAgIGNsYXNzIFZpZGVvVGV4dHVyZSBleHRlbmRzIFRleHR1cmUgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IHZpZGVvIHRleHR1cmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0hUTUxWaWRlb0VsZW1lbnR9IHZpZGVvIC0gVGhlIHZpZGVvIGVsZW1lbnQgdG8gdXNlIGFzIGEgZGF0YSBzb3VyY2UgZm9yIHRoZSB0ZXh0dXJlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbWFwcGluZz1UZXh0dXJlLkRFRkFVTFRfTUFQUElOR10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwVCB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttaW5GaWx0ZXI9TGluZWFyRmlsdGVyXSAtIFRoZSBtaW4gZmlsdGVyIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZm9ybWF0PVJHQkFGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIgPSBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlciA9IExpbmVhckZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkgewoKICAgIAkJc3VwZXIoIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzVmlkZW9UZXh0dXJlID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGBmYWxzZWAgYnkgZGVmYXVsdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlOwoKICAgIAkJY29uc3Qgc2NvcGUgPSB0aGlzOwoKICAgIAkJZnVuY3Rpb24gdXBkYXRlVmlkZW8oKSB7CgogICAgCQkJc2NvcGUubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgCQkJdmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayggdXBkYXRlVmlkZW8gKTsKCiAgICAJCX0KCiAgICAJCWlmICggJ3JlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2snIGluIHZpZGVvICkgewoKICAgIAkJCXZpZGVvLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2soIHVwZGF0ZVZpZGVvICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJY2xvbmUoKSB7CgogICAgCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuaW1hZ2UgKS5jb3B5KCB0aGlzICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHJlbmRlcmVyIGFuZCBzZXRzIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfQogICAgCSAqIHRvIGB0cnVlYCBldmVyeSB0aW1lIGEgbmV3IGZyYW1lIGlzIGF2YWlsYWJsZS4KICAgIAkgKgogICAgCSAqIE9ubHkgcmVsZXZhbnQgaWYgYHJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2tgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIuCiAgICAJICovCiAgICAJdXBkYXRlKCkgewoKICAgIAkJY29uc3QgdmlkZW8gPSB0aGlzLmltYWdlOwogICAgCQljb25zdCBoYXNWaWRlb0ZyYW1lQ2FsbGJhY2sgPSAncmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjaycgaW4gdmlkZW87CgogICAgCQlpZiAoIGhhc1ZpZGVvRnJhbWVDYWxsYmFjayA9PT0gZmFsc2UgJiYgdmlkZW8ucmVhZHlTdGF0ZSA+PSB2aWRlby5IQVZFX0NVUlJFTlRfREFUQSApIHsKCiAgICAJCQl0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSB0ZXh0dXJlIGZyb20gYSBjYW52YXMgZWxlbWVudC4KICAgICAqCiAgICAgKiBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyB0aGUgYmFzZSB0ZXh0dXJlIGNsYXNzLCBleGNlcHQgdGhhdCBpdCBzZXRzIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfQogICAgICogdG8gYHRydWVgIGltbWVkaWF0ZWx5IHNpbmNlIGEgY2FudmFzIGNhbiBkaXJlY3RseSBiZSB1c2VkIGZvciByZW5kZXJpbmcuCiAgICAgKgogICAgICogQGF1Z21lbnRzIFRleHR1cmUKICAgICAqLwogICAgY2xhc3MgQ2FudmFzVGV4dHVyZSBleHRlbmRzIFRleHR1cmUgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IHRleHR1cmUuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBbY2FudmFzXSAtIFRoZSBIVE1MIGNhbnZhcyBlbGVtZW50LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbWFwcGluZz1UZXh0dXJlLkRFRkFVTFRfTUFQUElOR10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwVCB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttaW5GaWx0ZXI9TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXSAtIFRoZSBtaW4gZmlsdGVyIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZm9ybWF0PVJHQkFGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHsKCiAgICAJCXN1cGVyKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuaXNDYW52YXNUZXh0dXJlID0gdHJ1ZTsKCiAgICAJCXRoaXMubmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBhdXRvbWF0aWNhbGx5IHNhdmUgdGhlIGRlcHRoIGluZm9ybWF0aW9uIG9mIGEKICAgICAqIHJlbmRlcmluZyBpbnRvIGEgdGV4dHVyZS4KICAgICAqCiAgICAgKiBAYXVnbWVudHMgVGV4dHVyZQogICAgICovCiAgICBjbGFzcyBEZXB0aFRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBkZXB0aCB0ZXh0dXJlLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEludFR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW21hcHBpbmc9VGV4dHVyZS5ERUZBVUxUX01BUFBJTkddIC0gVGhlIHRleHR1cmUgbWFwcGluZy4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBTPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBTIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFQ9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFQgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFttYWdGaWx0ZXI9TGluZWFyRmlsdGVyXSAtIFRoZSBtYWcgZmlsdGVyIHZhbHVlLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbWluRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWluIGZpbHRlciB2YWx1ZS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2FuaXNvdHJvcHk9VGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFldIC0gVGhlIGFuaXNvdHJvcHkgdmFsdWUuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtmb3JtYXQ9RGVwdGhGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgZGVwdGggb2YgdGhlIHRleHR1cmUuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIHR5cGUgPSBVbnNpZ25lZEludFR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlciwgbWluRmlsdGVyID0gTmVhcmVzdEZpbHRlciwgYW5pc290cm9weSwgZm9ybWF0ID0gRGVwdGhGb3JtYXQsIGRlcHRoID0gMSApIHsKCiAgICAJCWlmICggZm9ybWF0ICE9PSBEZXB0aEZvcm1hdCAmJiBmb3JtYXQgIT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHsKCiAgICAJCQl0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IGltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogZGVwdGggfTsKCiAgICAJCXN1cGVyKCBpbWFnZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc0RlcHRoVGV4dHVyZSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuCiAgICAJCSAqIHVwbG9hZGVkIHRvIHRoZSBHUFUuCiAgICAJCSAqCiAgICAJCSAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuZmxpcFkgPSBmYWxzZTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGBmYWxzZWAgYnkgZGVmYXVsdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIENvZGUgY29ycmVzcG9uZGluZyB0byB0aGUgZGVwdGggY29tcGFyZSBmdW5jdGlvbi4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez8oTmV2ZXJDb21wYXJlfExlc3NDb21wYXJlfEVxdWFsQ29tcGFyZXxMZXNzRXF1YWxDb21wYXJlfEdyZWF0ZXJDb21wYXJlfE5vdEVxdWFsQ29tcGFyZXxHcmVhdGVyRXF1YWxDb21wYXJlfEFsd2F5c0NvbXBhcmUpfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmNvbXBhcmVGdW5jdGlvbiA9IG51bGw7CgogICAgCX0KCgogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSApOwoKICAgIAkJdGhpcy5zb3VyY2UgPSBuZXcgU291cmNlKCBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmltYWdlICkgKTsgLy8gc2VlICMzMDU0MAogICAgCQl0aGlzLmNvbXBhcmVGdW5jdGlvbiA9IHNvdXJjZS5jb21wYXJlRnVuY3Rpb247CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAl0b0pTT04oIG1ldGEgKSB7CgogICAgCQljb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7CgogICAgCQlpZiAoIHRoaXMuY29tcGFyZUZ1bmN0aW9uICE9PSBudWxsICkgZGF0YS5jb21wYXJlRnVuY3Rpb24gPSB0aGlzLmNvbXBhcmVGdW5jdGlvbjsKCiAgICAJCXJldHVybiBkYXRhOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQSBnZW9tZXRyeSBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgcGxhbmUuCiAgICAgKgogICAgICogYGBganMKICAgICAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoIDEsIDEgKTsKICAgICAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmYwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZSB9ICk7CiAgICAgKiBjb25zdCBwbGFuZSA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKICAgICAqIHNjZW5lLmFkZCggcGxhbmUgKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeQogICAgICovCiAgICBjbGFzcyBQbGFuZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IHBsYW5lIGdlb21ldHJ5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBhbG9uZyB0aGUgWCBheGlzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0PTFdIC0gVGhlIGhlaWdodCBhbG9uZyB0aGUgWSBheGlzCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aFNlZ21lbnRzPTFdIC0gVGhlIG51bWJlciBvZiBzZWdtZW50cyBhbG9uZyB0aGUgWCBheGlzLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0U2VnbWVudHM9MV0gLSBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGFsb25nIHRoZSBZIGF4aXMuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSApIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQl0aGlzLnR5cGUgPSAnUGxhbmVHZW9tZXRyeSc7CgogICAgCQkvKioKICAgIAkJICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW4KICAgIAkJICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb24KICAgIAkJICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7T2JqZWN0fQogICAgCQkgKi8KICAgIAkJdGhpcy5wYXJhbWV0ZXJzID0gewogICAgCQkJd2lkdGg6IHdpZHRoLAogICAgCQkJaGVpZ2h0OiBoZWlnaHQsCiAgICAJCQl3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLAogICAgCQkJaGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzCiAgICAJCX07CgogICAgCQljb25zdCB3aWR0aF9oYWxmID0gd2lkdGggLyAyOwogICAgCQljb25zdCBoZWlnaHRfaGFsZiA9IGhlaWdodCAvIDI7CgogICAgCQljb25zdCBncmlkWCA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKTsKICAgIAkJY29uc3QgZ3JpZFkgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApOwoKICAgIAkJY29uc3QgZ3JpZFgxID0gZ3JpZFggKyAxOwogICAgCQljb25zdCBncmlkWTEgPSBncmlkWSArIDE7CgogICAgCQljb25zdCBzZWdtZW50X3dpZHRoID0gd2lkdGggLyBncmlkWDsKICAgIAkJY29uc3Qgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTsKCiAgICAJCS8vCgogICAgCQljb25zdCBpbmRpY2VzID0gW107CiAgICAJCWNvbnN0IHZlcnRpY2VzID0gW107CiAgICAJCWNvbnN0IG5vcm1hbHMgPSBbXTsKICAgIAkJY29uc3QgdXZzID0gW107CgogICAgCQlmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7CgogICAgCQkJY29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjsKCiAgICAJCQlmb3IgKCBsZXQgaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7CgogICAgCQkJCWNvbnN0IHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmOwoKICAgIAkJCQl2ZXJ0aWNlcy5wdXNoKCB4LCAtIHksIDAgKTsKCiAgICAJCQkJbm9ybWFscy5wdXNoKCAwLCAwLCAxICk7CgogICAgCQkJCXV2cy5wdXNoKCBpeCAvIGdyaWRYICk7CiAgICAJCQkJdXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkgewoKICAgIAkJCWZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkgewoKICAgIAkJCQljb25zdCBhID0gaXggKyBncmlkWDEgKiBpeTsKICAgIAkJCQljb25zdCBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApOwogICAgCQkJCWNvbnN0IGMgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTsKICAgIAkJCQljb25zdCBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5OwoKICAgIAkJCQlpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTsKICAgIAkJCQlpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CiAgICAJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwogICAgCQl0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTsKICAgIAkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSApOwoKICAgIAkJdGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlbgogICAgCSAqIEpTT04gb2JqZWN0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS4KICAgIAkgKiBAcmV0dXJuIHtQbGFuZUdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7CgogICAgCQlyZXR1cm4gbmV3IFBsYW5lR2VvbWV0cnkoIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0LCBkYXRhLndpZHRoU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMgKTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIEEgbWF0ZXJpYWwgZm9yIGRyYXdpbmcgZ2VvbWV0cnkgYnkgZGVwdGguIERlcHRoIGlzIGJhc2VkIG9mZiBvZiB0aGUgY2FtZXJhCiAgICAgKiBuZWFyIGFuZCBmYXIgcGxhbmUuIFdoaXRlIGlzIG5lYXJlc3QsIGJsYWNrIGlzIGZhcnRoZXN0LgogICAgICoKICAgICAqIEBhdWdtZW50cyBNYXRlcmlhbAogICAgICovCiAgICBjbGFzcyBNZXNoRGVwdGhNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIGRlcHRoIG1hdGVyaWFsLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIEFuIG9iamVjdCB3aXRoIG9uZSBvciBtb3JlIHByb3BlcnRpZXMKICAgIAkgKiBkZWZpbmluZyB0aGUgbWF0ZXJpYWwncyBhcHBlYXJhbmNlLiBBbnkgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsCiAgICAJICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkCiAgICAJICogaW4gaGVyZS4gQ29sb3IgdmFsdWVzIGNhbiBiZSBwYXNzZWQgYW55IHR5cGUgb2YgdmFsdWUgYWNjZXB0ZWQKICAgIAkgKiBieSB7QGxpbmsgQ29sb3Ijc2V0fS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHsKCiAgICAJCXN1cGVyKCk7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc01lc2hEZXB0aE1hdGVyaWFsID0gdHJ1ZTsKCiAgICAJCXRoaXMudHlwZSA9ICdNZXNoRGVwdGhNYXRlcmlhbCc7CgogICAgCQkvKioKICAgIAkJICogVHlwZSBmb3IgZGVwdGggcGFja2luZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUgeyhCYXNpY0RlcHRoUGFja2luZ3xSR0JBRGVwdGhQYWNraW5nfFJHQkRlcHRoUGFja2luZ3xSR0RlcHRoUGFja2luZyl9CiAgICAJCSAqIEBkZWZhdWx0IEJhc2ljRGVwdGhQYWNraW5nCiAgICAJCSAqLwogICAgCQl0aGlzLmRlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBjb2xvciBtYXAuIE1heSBvcHRpb25hbGx5IGluY2x1ZGUgYW4gYWxwaGEgY2hhbm5lbCwgdHlwaWNhbGx5IGNvbWJpbmVkCiAgICAJCSAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9UZXh0dXJlfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLm1hcCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogVGhlIGFscGhhIG1hcCBpcyBhIGdyYXlzY2FsZSB0ZXh0dXJlIHRoYXQgY29udHJvbHMgdGhlIG9wYWNpdHkgYWNyb3NzIHRoZQogICAgCQkgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLgogICAgCQkgKgogICAgCQkgKiBPbmx5IHRoZSBjb2xvciBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkLCBpZ25vcmluZyB0aGUgYWxwaGEgY2hhbm5lbCBpZiBvbmUKICAgIAkJICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWwKICAgIAkJICogd2hlbiBzYW1wbGluZyB0aGlzIHRleHR1cmUgZHVlIHRvIHRoZSBleHRyYSBiaXQgb2YgcHJlY2lzaW9uIHByb3ZpZGVkIGZvcgogICAgCQkgKiBncmVlbiBpbiBEWFQtY29tcHJlc3NlZCBhbmQgdW5jb21wcmVzc2VkIFJHQiA1NjUgZm9ybWF0cy4gTHVtaW5hbmNlLW9ubHkgYW5kCiAgICAJCSAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9UZXh0dXJlfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgZGlzcGxhY2VtZW50IG1hcCBhZmZlY3RzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVzaCdzIHZlcnRpY2VzLiBVbmxpa2UKICAgIAkJICogb3RoZXIgbWFwcyB3aGljaCBvbmx5IGFmZmVjdCB0aGUgbGlnaHQgYW5kIHNoYWRlIG9mIHRoZSBtYXRlcmlhbCB0aGUKICAgIAkJICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2UKICAgIAkJICogYWN0IGFzIHJlYWwgZ2VvbWV0cnkuIFRoZSBkaXNwbGFjZW1lbnQgdGV4dHVyZSBpcyBhbiBpbWFnZSB3aGVyZSB0aGUgdmFsdWUKICAgIAkJICogb2YgZWFjaCBwaXhlbCAod2hpdGUgYmVpbmcgdGhlIGhpZ2hlc3QpIGlzIG1hcHBlZCBhZ2FpbnN0LCBhbmQKICAgIAkJICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC4KICAgIAkJICoKICAgIAkJICogQHR5cGUgez9UZXh0dXJlfQogICAgCQkgKiBAZGVmYXVsdCBudWxsCiAgICAJCSAqLwogICAgCQl0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm8KICAgIAkJICogZGlzcGxhY2VtZW50LCBhbmQgd2hpdGUgaXMgbWF4aW11bSBkaXNwbGFjZW1lbnQpLiBXaXRob3V0IGEgZGlzcGxhY2VtZW50CiAgICAJCSAqIG1hcCBzZXQsIHRoaXMgdmFsdWUgaXMgbm90IGFwcGxpZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBvZmZzZXQgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAncyB2YWx1ZXMgb24gdGhlIG1lc2gncyB2ZXJ0aWNlcy4KICAgIAkJICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuCiAgICAJCSAqIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnQgbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMAogICAgCQkgKi8KICAgIAkJdGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDsKCiAgICAJCS8qKgogICAgCQkgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLndpcmVmcmFtZSA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS4KICAgIAkJICoKICAgIAkJICogV2ViR0wgYW5kIFdlYkdQVSBpZ25vcmUgdGhpcyBwcm9wZXJ0eSBhbmQgYWx3YXlzIHJlbmRlcgogICAgCQkgKiAxIHBpeGVsIHdpZGUgbGluZXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTsKCiAgICAJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgogICAgCX0KCiAgICAJY29weSggc291cmNlICkgewoKICAgIAkJc3VwZXIuY29weSggc291cmNlICk7CgogICAgCQl0aGlzLmRlcHRoUGFja2luZyA9IHNvdXJjZS5kZXB0aFBhY2tpbmc7CgogICAgCQl0aGlzLm1hcCA9IHNvdXJjZS5tYXA7CgogICAgCQl0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwOwoKICAgIAkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwOwogICAgCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlOwogICAgCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhczsKCiAgICAJCXRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTsKICAgIAkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoOwoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIG1hdGVyaWFsIHVzZWQgaW50ZXJuYWxseSBmb3IgaW1wbGVtZW50aW5nIHNoYWRvdyBtYXBwaW5nIHdpdGgKICAgICAqIHBvaW50IGxpZ2h0cy4KICAgICAqCiAgICAgKiBDYW4gYWxzbyBiZSB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgc2hhZG93IGNhc3Rpbmcgb2YgYW4gb2JqZWN0IGJ5IGFzc2lnbmluZwogICAgICogYW4gaW5zdGFuY2Ugb2YgYE1lc2hEaXN0YW5jZU1hdGVyaWFsYCB0byB7QGxpbmsgT2JqZWN0M0QjY3VzdG9tRGlzdGFuY2VNYXRlcmlhbH0uCiAgICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGVzIGRlbW9uc3RyYXRlcyB0aGlzIGFwcHJvYWNoIGluIG9yZGVyIHRvIGVuc3VyZQogICAgICogdHJhbnNwYXJlbnQgcGFydHMgb2Ygb2JqZWN0cyBkbyBubyBjYXN0IHNoYWRvd3MuCiAgICAgKgogICAgICogQGF1Z21lbnRzIE1hdGVyaWFsCiAgICAgKi8KICAgIGNsYXNzIE1lc2hEaXN0YW5jZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggZGlzdGFuY2UgbWF0ZXJpYWwuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gQW4gb2JqZWN0IHdpdGggb25lIG9yIG1vcmUgcHJvcGVydGllcwogICAgCSAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWwKICAgIAkgKiAoaW5jbHVkaW5nIGFueSBwcm9wZXJ0eSBmcm9tIGluaGVyaXRlZCBtYXRlcmlhbHMpIGNhbiBiZSBwYXNzZWQKICAgIAkgKiBpbiBoZXJlLiBDb2xvciB2YWx1ZXMgY2FuIGJlIHBhc3NlZCBhbnkgdHlwZSBvZiB2YWx1ZSBhY2NlcHRlZAogICAgCSAqIGJ5IHtAbGluayBDb2xvciNzZXR9LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkgewoKICAgIAkJc3VwZXIoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPSB0cnVlOwoKICAgIAkJdGhpcy50eXBlID0gJ01lc2hEaXN0YW5jZU1hdGVyaWFsJzsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZAogICAgCQkgKiB3aXRoIHtAbGluayBNYXRlcmlhbCN0cmFuc3BhcmVudH0gb3Ige0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/VGV4dHVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5tYXAgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBhbHBoYSBtYXAgaXMgYSBncmF5c2NhbGUgdGV4dHVyZSB0aGF0IGNvbnRyb2xzIHRoZSBvcGFjaXR5IGFjcm9zcyB0aGUKICAgIAkJICogc3VyZmFjZSAoYmxhY2s6IGZ1bGx5IHRyYW5zcGFyZW50OyB3aGl0ZTogZnVsbHkgb3BhcXVlKS4KICAgIAkJICoKICAgIAkJICogT25seSB0aGUgY29sb3Igb2YgdGhlIHRleHR1cmUgaXMgdXNlZCwgaWdub3JpbmcgdGhlIGFscGhhIGNoYW5uZWwgaWYgb25lCiAgICAJCSAqIGV4aXN0cy4gRm9yIFJHQiBhbmQgUkdCQSB0ZXh0dXJlcywgdGhlIHJlbmRlcmVyIHdpbGwgdXNlIHRoZSBncmVlbiBjaGFubmVsCiAgICAJCSAqIHdoZW4gc2FtcGxpbmcgdGhpcyB0ZXh0dXJlIGR1ZSB0byB0aGUgZXh0cmEgYml0IG9mIHByZWNpc2lvbiBwcm92aWRlZCBmb3IKICAgIAkJICogZ3JlZW4gaW4gRFhULWNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBSR0IgNTY1IGZvcm1hdHMuIEx1bWluYW5jZS1vbmx5IGFuZAogICAgCQkgKiBsdW1pbmFuY2UvYWxwaGEgdGV4dHVyZXMgd2lsbCBhbHNvIHN0aWxsIHdvcmsgYXMgZXhwZWN0ZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/VGV4dHVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogVGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgcG9zaXRpb24gb2YgdGhlIG1lc2gncyB2ZXJ0aWNlcy4gVW5saWtlCiAgICAJCSAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlCiAgICAJCSAqIGRpc3BsYWNlZCB2ZXJ0aWNlcyBjYW4gY2FzdCBzaGFkb3dzLCBibG9jayBvdGhlciBvYmplY3RzLCBhbmQgb3RoZXJ3aXNlCiAgICAJCSAqIGFjdCBhcyByZWFsIGdlb21ldHJ5LiBUaGUgZGlzcGxhY2VtZW50IHRleHR1cmUgaXMgYW4gaW1hZ2Ugd2hlcmUgdGhlIHZhbHVlCiAgICAJCSAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kCiAgICAJCSAqIHJlcG9zaXRpb25zLCB0aGUgdmVydGljZXMgb2YgdGhlIG1lc2guCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/VGV4dHVyZX0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEhvdyBtdWNoIHRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIG1lc2ggKHdoZXJlIGJsYWNrIGlzIG5vCiAgICAJCSAqIGRpc3BsYWNlbWVudCwgYW5kIHdoaXRlIGlzIG1heGltdW0gZGlzcGxhY2VtZW50KS4gV2l0aG91dCBhIGRpc3BsYWNlbWVudAogICAgCQkgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAwCiAgICAJCSAqLwogICAgCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuCiAgICAJCSAqIFRoZSBiaWFzIGlzIGFkZGVkIHRvIHRoZSBzY2FsZWQgc2FtcGxlIG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwLgogICAgCQkgKiBXaXRob3V0IGEgZGlzcGxhY2VtZW50IG1hcCBzZXQsIHRoaXMgdmFsdWUgaXMgbm90IGFwcGxpZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAKICAgIAkJICovCiAgICAJCXRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7CgogICAgCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSApIHsKCiAgICAJCXN1cGVyLmNvcHkoIHNvdXJjZSApOwoKICAgIAkJdGhpcy5tYXAgPSBzb3VyY2UubWFwOwoKICAgIAkJdGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDsKCiAgICAJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDsKICAgIAkJdGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTsKICAgIAkJdGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIEBjbGFzcwogICAgICogQGNsYXNzZGVzYyBBIHNpbXBsZSBjYWNoaW5nIHN5c3RlbSwgdXNlZCBpbnRlcm5hbGx5IGJ5IHtAbGluayBGaWxlTG9hZGVyfS4KICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nIGFjcm9zcyBhbGwgbG9hZGVycyB0aGF0IHVzZSB7QGxpbmsgRmlsZUxvYWRlcn0sIGFkZCBgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWUuYCBvbmNlIGluIHlvdXIgYXBwLgogICAgICogQGhpZGVjb25zdHJ1Y3RvcgogICAgICovCiAgICBjb25zdCBDYWNoZSA9IHsKCiAgICAJLyoqCiAgICAJICogV2hldGhlciBjYWNoaW5nIGlzIGVuYWJsZWQgb3Igbm90LgogICAgCSAqCiAgICAJICogQHN0YXRpYwogICAgCSAqIEB0eXBlIHtib29sZWFufQogICAgCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJICovCiAgICAJZW5hYmxlZDogZmFsc2UsCgogICAgCS8qKgogICAgCSAqIEEgZGljdGlvbmFyeSB0aGF0IGhvbGRzIGNhY2hlZCBmaWxlcy4KICAgIAkgKgogICAgCSAqIEBzdGF0aWMKICAgIAkgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxPYmplY3Q+fQogICAgCSAqLwogICAgCWZpbGVzOiB7fSwKCiAgICAJLyoqCiAgICAJICogQWRkcyBhIGNhY2hlIGVudHJ5IHdpdGggYSBrZXkgdG8gcmVmZXJlbmNlIHRoZSBmaWxlLiBJZiB0aGlzIGtleSBhbHJlYWR5CiAgICAJICogaG9sZHMgYSBmaWxlLCBpdCBpcyBvdmVyd3JpdHRlbi4KICAgIAkgKgogICAgCSAqIEBzdGF0aWMKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSB0byByZWZlcmVuY2UgdGhlIGNhY2hlZCBmaWxlLgogICAgCSAqIEBwYXJhbSB7T2JqZWN0fSBmaWxlIC0gIFRoZSBmaWxlIHRvIGJlIGNhY2hlZC4KICAgIAkgKi8KICAgIAlhZGQ6IGZ1bmN0aW9uICgga2V5LCBmaWxlICkgewoKICAgIAkJaWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuOwoKICAgIAkJLy8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdBZGRpbmcga2V5OicsIGtleSApOwoKICAgIAkJdGhpcy5maWxlc1sga2V5IF0gPSBmaWxlOwoKICAgIAl9LAoKICAgIAkvKioKICAgIAkgKiBHZXRzIHRoZSBjYWNoZWQgdmFsdWUgZm9yIHRoZSBnaXZlbiBrZXkuCiAgICAJICoKICAgIAkgKiBAc3RhdGljCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgdG8gcmVmZXJlbmNlIHRoZSBjYWNoZWQgZmlsZS4KICAgIAkgKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfSBUaGUgY2FjaGVkIGZpbGUuIElmIHRoZSBrZXkgZG9lcyBub3QgZXhpc3QgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuCiAgICAJICovCiAgICAJZ2V0OiBmdW5jdGlvbiAoIGtleSApIHsKCiAgICAJCWlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjsKCiAgICAJCS8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQ2hlY2tpbmcga2V5OicsIGtleSApOwoKICAgIAkJcmV0dXJuIHRoaXMuZmlsZXNbIGtleSBdOwoKICAgIAl9LAoKICAgIAkvKioKICAgIAkgKiBSZW1vdmVzIHRoZSBjYWNoZWQgZmlsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGtleS4KICAgIAkgKgogICAgCSAqIEBzdGF0aWMKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSB0byByZWZlcmVuY2UgdGhlIGNhY2hlZCBmaWxlLgogICAgCSAqLwogICAgCXJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7CgogICAgCQlkZWxldGUgdGhpcy5maWxlc1sga2V5IF07CgogICAgCX0sCgogICAgCS8qKgogICAgCSAqIFJlbW92ZSBhbGwgdmFsdWVzIGZyb20gdGhlIGNhY2hlLgogICAgCSAqCiAgICAJICogQHN0YXRpYwogICAgCSAqLwogICAgCWNsZWFyOiBmdW5jdGlvbiAoKSB7CgogICAgCQl0aGlzLmZpbGVzID0ge307CgogICAgCX0KCiAgICB9OwoKICAgIC8qKgogICAgICogSGFuZGxlcyBhbmQga2VlcHMgdHJhY2sgb2YgbG9hZGVkIGFuZCBwZW5kaW5nIGRhdGEuIEEgZGVmYXVsdCBnbG9iYWwKICAgICAqIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaXMgY3JlYXRlZCBhbmQgdXNlZCBieSBsb2FkZXJzIGlmIG5vdCBzdXBwbGllZAogICAgICogbWFudWFsbHkuCiAgICAgKgogICAgICogSW4gZ2VuZXJhbCB0aGF0IHNob3VsZCBiZSBzdWZmaWNpZW50LCBob3dldmVyIHRoZXJlIGFyZSB0aW1lcyB3aGVuIGl0IGNhbgogICAgICogYmUgdXNlZnVsIHRvIGhhdmUgc2VwYXJhdGUgbG9hZGVycyAtIGZvciBleGFtcGxlIGlmIHlvdSB3YW50IHRvIHNob3cKICAgICAqIHNlcGFyYXRlIGxvYWRpbmcgYmFycyBmb3Igb2JqZWN0cyBhbmQgdGV4dHVyZXMuCiAgICAgKgogICAgICogYGBganMKICAgICAqIGNvbnN0IG1hbmFnZXIgPSBuZXcgVEhSRUUuTG9hZGluZ01hbmFnZXIoKTsKICAgICAqIG1hbmFnZXIub25Mb2FkID0gKCkgPT4gY29uc29sZS5sb2coICdMb2FkaW5nIGNvbXBsZXRlIScgKTsKICAgICAqCiAgICAgKiBjb25zdCBsb2FkZXIxID0gbmV3IE9CSkxvYWRlciggbWFuYWdlciApOwogICAgICogY29uc3QgbG9hZGVyMiA9IG5ldyBDb2xsYWRhTG9hZGVyKCBtYW5hZ2VyICk7CiAgICAgKiBgYGAKICAgICAqLwogICAgY2xhc3MgTG9hZGluZ01hbmFnZXIgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGxvYWRpbmcgbWFuYWdlci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkxvYWRdIC0gRXhlY3V0ZXMgd2hlbiBhbGwgaXRlbXMgaGF2ZSBiZWVuIGxvYWRlZC4KICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25Qcm9ncmVzc10gLSBFeGVjdXRlcyB3aGVuIHNpbmdsZSBpdGVtcyBoYXZlIGJlZW4gbG9hZGVkLgogICAgCSAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSAtIEV4ZWN1dGVzIHdoZW4gYW4gZXJyb3Igb2NjdXJzLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgogICAgCQljb25zdCBzY29wZSA9IHRoaXM7CgogICAgCQlsZXQgaXNMb2FkaW5nID0gZmFsc2U7CiAgICAJCWxldCBpdGVtc0xvYWRlZCA9IDA7CiAgICAJCWxldCBpdGVtc1RvdGFsID0gMDsKICAgIAkJbGV0IHVybE1vZGlmaWVyID0gdW5kZWZpbmVkOwogICAgCQljb25zdCBoYW5kbGVycyA9IFtdOwoKICAgIAkJLy8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydAogICAgCQkvLyBpbiB0aGUgY29uc3RydWN0b3IKCiAgICAJCS8qKgogICAgCQkgKiBFeGVjdXRlcyB3aGVuIGFuIGl0ZW0gc3RhcnRzIGxvYWRpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtGdW5jdGlvbnx1bmRlZmluZWR9CiAgICAJCSAqIEBkZWZhdWx0IHVuZGVmaW5lZAogICAgCQkgKi8KICAgIAkJdGhpcy5vblN0YXJ0ID0gdW5kZWZpbmVkOwoKICAgIAkJLyoqCiAgICAJCSAqIEV4ZWN1dGVzIHdoZW4gYWxsIGl0ZW1zIGhhdmUgYmVlbiBsb2FkZWQuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtGdW5jdGlvbnx1bmRlZmluZWR9CiAgICAJCSAqIEBkZWZhdWx0IHVuZGVmaW5lZAogICAgCQkgKi8KICAgIAkJdGhpcy5vbkxvYWQgPSBvbkxvYWQ7CgogICAgCQkvKioKICAgIAkJICogRXhlY3V0ZXMgd2hlbiBzaW5nbGUgaXRlbXMgaGF2ZSBiZWVuIGxvYWRlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0Z1bmN0aW9ufHVuZGVmaW5lZH0KICAgIAkJICogQGRlZmF1bHQgdW5kZWZpbmVkCiAgICAJCSAqLwogICAgCQl0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzOwoKICAgIAkJLyoqCiAgICAJCSAqIEV4ZWN1dGVzIHdoZW4gYW4gZXJyb3Igb2NjdXJzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7RnVuY3Rpb258dW5kZWZpbmVkfQogICAgCQkgKiBAZGVmYXVsdCB1bmRlZmluZWQKICAgIAkJICovCiAgICAJCXRoaXMub25FcnJvciA9IG9uRXJyb3I7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IGFueSBsb2FkZXIgdXNpbmcgdGhlIG1hbmFnZXIgd2hlbiB0aGUgbG9hZGVyCiAgICAJCSAqIHN0YXJ0cyBsb2FkaW5nIGFuIGl0ZW0uCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGxvYWQuCiAgICAJCSAqLwogICAgCQl0aGlzLml0ZW1TdGFydCA9IGZ1bmN0aW9uICggdXJsICkgewoKICAgIAkJCWl0ZW1zVG90YWwgKys7CgogICAgCQkJaWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkgewoKICAgIAkJCQlpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCXNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpc0xvYWRpbmcgPSB0cnVlOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgYW55IGxvYWRlciB1c2luZyB0aGUgbWFuYWdlciB3aGVuIHRoZSBsb2FkZXIKICAgIAkJICogZW5kZWQgbG9hZGluZyBhbiBpdGVtLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCBvZiB0aGUgbG9hZGVkIGl0ZW0uCiAgICAJCSAqLwogICAgCQl0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHsKCiAgICAJCQlpdGVtc0xvYWRlZCArKzsKCiAgICAJCQlpZiAoIHNjb3BlLm9uUHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJc2NvcGUub25Qcm9ncmVzcyggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGl0ZW1zTG9hZGVkID09PSBpdGVtc1RvdGFsICkgewoKICAgIAkJCQlpc0xvYWRpbmcgPSBmYWxzZTsKCiAgICAJCQkJaWYgKCBzY29wZS5vbkxvYWQgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCXNjb3BlLm9uTG9hZCgpOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgYW55IGxvYWRlciB1c2luZyB0aGUgbWFuYWdlciB3aGVuIHRoZSBsb2FkZXIKICAgIAkJICogZW5jb3VudGVycyBhbiBlcnJvciB3aGVuIGxvYWRpbmcgYW4gaXRlbS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgb2YgdGhlIGl0ZW0gdGhhdCBwcm9kdWNlcyBhbiBlcnJvci4KICAgIAkJICovCiAgICAJCXRoaXMuaXRlbUVycm9yID0gZnVuY3Rpb24gKCB1cmwgKSB7CgogICAgCQkJaWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCXNjb3BlLm9uRXJyb3IoIHVybCApOwoKICAgIAkJCX0KCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogR2l2ZW4gYSBVUkwsIHVzZXMgdGhlIFVSTCBtb2RpZmllciBjYWxsYmFjayAoaWYgYW55KSBhbmQgcmV0dXJucyBhCiAgICAJCSAqIHJlc29sdmVkIFVSTC4gSWYgbm8gVVJMIG1vZGlmaWVyIGlzIHNldCwgcmV0dXJucyB0aGUgb3JpZ2luYWwgVVJMLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBsb2FkLgogICAgCQkgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBVUkwuCiAgICAJCSAqLwogICAgCQl0aGlzLnJlc29sdmVVUkwgPSBmdW5jdGlvbiAoIHVybCApIHsKCiAgICAJCQlpZiAoIHVybE1vZGlmaWVyICkgewoKICAgIAkJCQlyZXR1cm4gdXJsTW9kaWZpZXIoIHVybCApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gdXJsOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiBwcm92aWRlZCwgdGhlIGNhbGxiYWNrIHdpbGwgYmUgcGFzc2VkIGVhY2ggcmVzb3VyY2UgVVJMIGJlZm9yZSBhCiAgICAJCSAqIHJlcXVlc3QgaXMgc2VudC4gVGhlIGNhbGxiYWNrIG1heSByZXR1cm4gdGhlIG9yaWdpbmFsIFVSTCwgb3IgYSBuZXcgVVJMIHRvCiAgICAJCSAqIG92ZXJyaWRlIGxvYWRpbmcgYmVoYXZpb3IuIFRoaXMgYmVoYXZpb3IgY2FuIGJlIHVzZWQgdG8gbG9hZCBhc3NldHMgZnJvbQogICAgCQkgKiAuWklQIGZpbGVzLCBkcmFnLWFuZC1kcm9wIEFQSXMsIGFuZCBEYXRhIFVSSXMuCiAgICAJCSAqCiAgICAJCSAqIGBgYGpzCiAgICAJCSAqIGNvbnN0IGJsb2JzID0geydmaXNoLmdsdGYnOiBibG9iMSwgJ2RpZmZ1c2UucG5nJzogYmxvYjIsICdub3JtYWwucG5nJzogYmxvYjN9OwogICAgCQkgKgogICAgCQkgKiBjb25zdCBtYW5hZ2VyID0gbmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyKCk7CiAgICAJCSAqCiAgICAJCSAqIC8vIEluaXRpYWxpemUgbG9hZGluZyBtYW5hZ2VyIHdpdGggVVJMIGNhbGxiYWNrLgogICAgCQkgKiBjb25zdCBvYmplY3RVUkxzID0gW107CiAgICAJCSAqIG1hbmFnZXIuc2V0VVJMTW9kaWZpZXIoICggdXJsICkgPT4gewogICAgCQkgKgogICAgCQkgKiAJdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggYmxvYnNbIHVybCBdICk7CiAgICAJCSAqIAlvYmplY3RVUkxzLnB1c2goIHVybCApOwogICAgCQkgKiAJcmV0dXJuIHVybDsKICAgIAkJICoKICAgIAkJICogfSApOwogICAgCQkgKgogICAgCQkgKiAvLyBMb2FkIGFzIHVzdWFsLCB0aGVuIHJldm9rZSB0aGUgYmxvYiBVUkxzLgogICAgCQkgKiBjb25zdCBsb2FkZXIgPSBuZXcgR0xURkxvYWRlciggbWFuYWdlciApOwogICAgCQkgKiBsb2FkZXIubG9hZCggJ2Zpc2guZ2x0ZicsIChnbHRmKSA9PiB7CiAgICAJCSAqCiAgICAJCSAqIAlzY2VuZS5hZGQoIGdsdGYuc2NlbmUgKTsKICAgIAkJICogCW9iamVjdFVSTHMuZm9yRWFjaCggKCB1cmwgKSA9PiBVUkwucmV2b2tlT2JqZWN0VVJMKCB1cmwgKSApOwogICAgCQkgKgogICAgCQkgKiB9ICk7CiAgICAJCSAqIGBgYAogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyk6c3RyaW5nfSB0cmFuc2Zvcm0gLSBVUkwgbW9kaWZpZXIgY2FsbGJhY2suIENhbGxlZCB3aXRoIGFuIFVSTCBhbmQgbXVzdCByZXR1cm4gYSByZXNvbHZlZCBVUkwuCiAgICAJCSAqIEByZXR1cm4ge0xvYWRpbmdNYW5hZ2VyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGxvYWRpbmcgbWFuYWdlci4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAoIHRyYW5zZm9ybSApIHsKCiAgICAJCQl1cmxNb2RpZmllciA9IHRyYW5zZm9ybTsKCiAgICAJCQlyZXR1cm4gdGhpczsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmVnaXN0ZXJzIGEgbG9hZGVyIHdpdGggdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbi4gQ2FuIGJlIHVzZWQgdG8KICAgIAkJICogZGVmaW5lIHdoYXQgbG9hZGVyIHNob3VsZCBiZSB1c2VkIGluIG9yZGVyIHRvIGxvYWQgc3BlY2lmaWMgZmlsZXMuIEEKICAgIAkJICogdHlwaWNhbCB1c2UgY2FzZSBpcyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgbG9hZGVyIGZvciB0ZXh0dXJlcy4KICAgIAkJICoKICAgIAkJICogYGBganMKICAgIAkJICogLy8gYWRkIGhhbmRsZXIgZm9yIFRHQSB0ZXh0dXJlcwogICAgCQkgKiBtYW5hZ2VyLmFkZEhhbmRsZXIoIC9cLnRnYSQvaSwgbmV3IFRHQUxvYWRlcigpICk7CiAgICAJCSAqIGBgYAogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge3N0cmluZ30gcmVnZXggLSBBIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICAgIAkJICogQHBhcmFtIHtMb2FkZXJ9IGxvYWRlciAtIEEgbG9hZGVyIHRoYXQgc2hvdWxkIGhhbmRsZSBtYXRjaGVkIGNhc2VzLgogICAgCQkgKiBAcmV0dXJuIHtMb2FkaW5nTWFuYWdlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsb2FkaW5nIG1hbmFnZXIuCiAgICAJCSAqLwogICAgCQl0aGlzLmFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4LCBsb2FkZXIgKSB7CgogICAgCQkJaGFuZGxlcnMucHVzaCggcmVnZXgsIGxvYWRlciApOwoKICAgIAkJCXJldHVybiB0aGlzOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZW1vdmVzIHRoZSBsb2FkZXIgZm9yIHRoZSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24uCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7c3RyaW5nfSByZWdleCAtIEEgcmVndWxhciBleHByZXNzaW9uLgogICAgCQkgKiBAcmV0dXJuIHtMb2FkaW5nTWFuYWdlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsb2FkaW5nIG1hbmFnZXIuCiAgICAJCSAqLwogICAgCQl0aGlzLnJlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4ICkgewoKICAgIAkJCWNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZiggcmVnZXggKTsKCiAgICAJCQlpZiAoIGluZGV4ICE9PSAtMSApIHsKCiAgICAJCQkJaGFuZGxlcnMuc3BsaWNlKCBpbmRleCwgMiApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gdGhpczsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogQ2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIHJlZ2lzdGVyZWQgbG9hZGVyIGZvciB0aGUgZ2l2ZW4gZmlsZSBwYXRoLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSAtIFRoZSBmaWxlIHBhdGguCiAgICAJCSAqIEByZXR1cm4gez9Mb2FkZXJ9IFRoZSByZWdpc3RlcmVkIGxvYWRlci4gUmV0dXJucyBgbnVsbGAgaWYgbm8gbG9hZGVyIHdhcyBmb3VuZC4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0SGFuZGxlciA9IGZ1bmN0aW9uICggZmlsZSApIHsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7CgogICAgCQkJCWNvbnN0IHJlZ2V4ID0gaGFuZGxlcnNbIGkgXTsKICAgIAkJCQljb25zdCBsb2FkZXIgPSBoYW5kbGVyc1sgaSArIDEgXTsKCiAgICAJCQkJaWYgKCByZWdleC5nbG9iYWwgKSByZWdleC5sYXN0SW5kZXggPSAwOyAvLyBzZWUgIzE3OTIwCgogICAgCQkJCWlmICggcmVnZXgudGVzdCggZmlsZSApICkgewoKICAgIAkJCQkJcmV0dXJuIGxvYWRlcjsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gbnVsbDsKCiAgICAJCX07CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgZ2xvYmFsIGRlZmF1bHQgbG9hZGluZyBtYW5hZ2VyLgogICAgICoKICAgICAqIEBjb25zdGFudAogICAgICogQHR5cGUge0xvYWRpbmdNYW5hZ2VyfQogICAgICovCiAgICBjb25zdCBEZWZhdWx0TG9hZGluZ01hbmFnZXIgPSAvKkBfX1BVUkVfXyovIG5ldyBMb2FkaW5nTWFuYWdlcigpOwoKICAgIC8qKgogICAgICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgbG9hZGVycy4KICAgICAqCiAgICAgKiBAYWJzdHJhY3QKICAgICAqLwogICAgY2xhc3MgTG9hZGVyIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBsb2FkZXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBUaGUgbG9hZGluZyBtYW5hZ2VyLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBtYW5hZ2VyICkgewoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBsb2FkaW5nIG1hbmFnZXIuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtMb2FkaW5nTWFuYWdlcn0KICAgIAkJICogQGRlZmF1bHQgRGVmYXVsdExvYWRpbmdNYW5hZ2VyCiAgICAJCSAqLwogICAgCQl0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY3Jvc3NPcmlnaW4gc3RyaW5nIHRvIGltcGxlbWVudCBDT1JTIGZvciBsb2FkaW5nIHRoZSB1cmwgZnJvbSBhCiAgICAJCSAqIGRpZmZlcmVudCBkb21haW4gdGhhdCBhbGxvd3MgQ09SUy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge3N0cmluZ30KICAgIAkJICogQGRlZmF1bHQgJ2Fub255bW91cycKICAgIAkJICovCiAgICAJCXRoaXMuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJzsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRoZSBYTUxIdHRwUmVxdWVzdCB1c2VzIGNyZWRlbnRpYWxzLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogVGhlIGJhc2UgcGF0aCBmcm9tIHdoaWNoIHRoZSBhc3NldCB3aWxsIGJlIGxvYWRlZC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge3N0cmluZ30KICAgIAkJICovCiAgICAJCXRoaXMucGF0aCA9ICcnOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBiYXNlIHBhdGggZnJvbSB3aGljaCBhZGRpdGlvbmFsIHJlc291cmNlcyBsaWtlIHRleHR1cmVzIHdpbGwgYmUgbG9hZGVkLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7c3RyaW5nfQogICAgCQkgKi8KICAgIAkJdGhpcy5yZXNvdXJjZVBhdGggPSAnJzsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgW3JlcXVlc3QgaGVhZGVyXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L1JlcXVlc3RfaGVhZGVyfQogICAgCQkgKiB1c2VkIGluIEhUVFAgcmVxdWVzdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge09iamVjdDxzdHJpbmcsIGFueT59CiAgICAJCSAqLwogICAgCQl0aGlzLnJlcXVlc3RIZWFkZXIgPSB7fTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGlzIG1ldGhvZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBieSBhbGwgY29uY3JldGUgbG9hZGVycy4gSXQgaG9sZHMgdGhlCiAgICAJICogbG9naWMgZm9yIGxvYWRpbmcgYXNzZXRzIGZyb20gdGhlIGJhY2tlbmQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4KICAgIAkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkxvYWQgLSBFeGVjdXRlZCB3aGVuIHRoZSBsb2FkaW5nIHByb2Nlc3MgaGFzIGJlZW4gZmluaXNoZWQuCiAgICAJICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IFtvblByb2dyZXNzXSAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLgogICAgCSAqIEBwYXJhbSB7b25FcnJvckNhbGxiYWNrfSBbb25FcnJvcl0gLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci4KICAgIAkgKi8KICAgIAlsb2FkKCAvKiB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciAqLyApIHt9CgogICAgCS8qKgogICAgCSAqIEEgYXN5bmMgdmVyc2lvbiBvZiB7QGxpbmsgTG9hZGVyI2xvYWR9LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuCiAgICAJICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IFtvblByb2dyZXNzXSAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLgogICAgCSAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGFzc2V0IGhhcyBiZWVuIGxvYWRlZC4KICAgIAkgKi8KICAgIAlsb2FkQXN5bmMoIHVybCwgb25Qcm9ncmVzcyApIHsKCiAgICAJCWNvbnN0IHNjb3BlID0gdGhpczsKCiAgICAJCXJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7CgogICAgCQkJc2NvcGUubG9hZCggdXJsLCByZXNvbHZlLCBvblByb2dyZXNzLCByZWplY3QgKTsKCiAgICAJCX0gKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBUaGlzIG1ldGhvZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBieSBhbGwgY29uY3JldGUgbG9hZGVycy4gSXQgaG9sZHMgdGhlCiAgICAJICogbG9naWMgZm9yIHBhcnNpbmcgdGhlIGFzc2V0IGludG8gdGhyZWUuanMgZW50aXRpZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge2FueX0gZGF0YSAtIFRoZSBkYXRhIHRvIHBhcnNlLgogICAgCSAqLwogICAgCXBhcnNlKCAvKiBkYXRhICovICkge30KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgYGNyb3NzT3JpZ2luYCBTdHJpbmcgdG8gaW1wbGVtZW50IENPUlMgZm9yIGxvYWRpbmcgdGhlIFVSTAogICAgCSAqIGZyb20gYSBkaWZmZXJlbnQgZG9tYWluIHRoYXQgYWxsb3dzIENPUlMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gY3Jvc3NPcmlnaW4gLSBUaGUgYGNyb3NzT3JpZ2luYCB2YWx1ZS4KICAgIAkgKiBAcmV0dXJuIHtMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICkgewoKICAgIAkJdGhpcy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luOwogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBXaGV0aGVyIHRoZSBYTUxIdHRwUmVxdWVzdCB1c2VzIGNyZWRlbnRpYWxzIHN1Y2ggYXMgY29va2llcywgYXV0aG9yaXphdGlvbgogICAgCSAqIGhlYWRlcnMgb3IgVExTIGNsaWVudCBjZXJ0aWZpY2F0ZXMsIHNlZSBbWE1MSHR0cFJlcXVlc3Qud2l0aENyZWRlbnRpYWxzXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3Qvd2l0aENyZWRlbnRpYWxzfS4KICAgIAkgKgogICAgCSAqIE5vdGU6IFRoaXMgc2V0dGluZyBoYXMgbm8gZWZmZWN0IGlmIHlvdSBhcmUgbG9hZGluZyBmaWxlcyBsb2NhbGx5IG9yIGZyb20gdGhlIHNhbWUgZG9tYWluLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSBgd2l0aENyZWRlbnRpYWxzYCB2YWx1ZS4KICAgIAkgKiBAcmV0dXJuIHtMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0V2l0aENyZWRlbnRpYWxzKCB2YWx1ZSApIHsKCiAgICAJCXRoaXMud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7CiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGJhc2UgcGF0aCBmb3IgdGhlIGFzc2V0LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgYmFzZSBwYXRoLgogICAgCSAqIEByZXR1cm4ge0xvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS4KICAgIAkgKi8KICAgIAlzZXRQYXRoKCBwYXRoICkgewoKICAgIAkJdGhpcy5wYXRoID0gcGF0aDsKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogU2V0cyB0aGUgYmFzZSBwYXRoIGZvciBkZXBlbmRlbnQgcmVzb3VyY2VzIGxpa2UgdGV4dHVyZXMuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VQYXRoIC0gVGhlIHJlc291cmNlIHBhdGguCiAgICAJICogQHJldHVybiB7TG9hZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLgogICAgCSAqLwogICAgCXNldFJlc291cmNlUGF0aCggcmVzb3VyY2VQYXRoICkgewoKICAgIAkJdGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7CiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgdGhlIGdpdmVuIHJlcXVlc3QgaGVhZGVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RIZWFkZXIgLSBBIFtyZXF1ZXN0IGhlYWRlcl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9SZXF1ZXN0X2hlYWRlcn0KICAgIAkgKiBmb3IgY29uZmlndXJpbmcgdGhlIEhUVFAgcmVxdWVzdC4KICAgIAkgKiBAcmV0dXJuIHtMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuCiAgICAJICovCiAgICAJc2V0UmVxdWVzdEhlYWRlciggcmVxdWVzdEhlYWRlciApIHsKCiAgICAJCXRoaXMucmVxdWVzdEhlYWRlciA9IHJlcXVlc3RIZWFkZXI7CiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQ2FsbGJhY2sgZm9yIG9uUHJvZ3Jlc3MgaW4gbG9hZGVycy4KICAgICAqCiAgICAgKiBAY2FsbGJhY2sgb25Qcm9ncmVzc0NhbGxiYWNrCiAgICAgKiBAcGFyYW0ge1Byb2dyZXNzRXZlbnR9IGV2ZW50IC0gQW4gaW5zdGFuY2Ugb2YgYFByb2dyZXNzRXZlbnRgIHRoYXQgcmVwcmVzZW50cyB0aGUgY3VycmVudCBsb2FkaW5nIHN0YXR1cy4KICAgICAqLwoKICAgIC8qKgogICAgICogQ2FsbGJhY2sgZm9yIG9uRXJyb3IgaW4gbG9hZGVycy4KICAgICAqCiAgICAgKiBAY2FsbGJhY2sgb25FcnJvckNhbGxiYWNrCiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAtIFRoZSBlcnJvciB3aGljaCBvY2N1cnJlZCBkdXJpbmcgdGhlIGxvYWRpbmcgcHJvY2Vzcy4KICAgICAqLwoKICAgIC8qKgogICAgICogVGhlIGRlZmF1bHQgbWF0ZXJpYWwgbmFtZSB0aGF0IGlzIHVzZWQgYnkgbG9hZGVycwogICAgICogd2hlbiBjcmVhdGluZyBtYXRlcmlhbHMgZm9yIGxvYWRlZCAzRCBvYmplY3RzLgogICAgICoKICAgICAqIE5vdGU6IE5vdCBhbGwgbG9hZGVycyBtaWdodCBob25vciB0aGlzIHNldHRpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqIEBkZWZhdWx0ICdfX0RFRkFVTFQnCiAgICAgKi8KICAgIExvYWRlci5ERUZBVUxUX01BVEVSSUFMX05BTUUgPSAnX19ERUZBVUxUJzsKCiAgICBjb25zdCBfbG9hZGluZyA9IG5ldyBXZWFrTWFwKCk7CgogICAgLyoqCiAgICAgKiBBIGxvYWRlciBmb3IgbG9hZGluZyBpbWFnZXMuIFRoZSBjbGFzcyBsb2FkcyBpbWFnZXMgd2l0aCB0aGUgSFRNTCBgSW1hZ2VgIEFQSS4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkltYWdlTG9hZGVyKCk7CiAgICAgKiBjb25zdCBpbWFnZSA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICdpbWFnZS5wbmcnICk7CiAgICAgKiBgYGAKICAgICAqIFBsZWFzZSBub3RlIHRoYXQgYEltYWdlTG9hZGVyYCBoYXMgZHJvcHBlZCBzdXBwb3J0IGZvciBwcm9ncmVzcwogICAgICogZXZlbnRzIGluIGByODRgLiBGb3IgYW4gYEltYWdlTG9hZGVyYCB0aGF0IHN1cHBvcnRzIHByb2dyZXNzIGV2ZW50cywgc2VlCiAgICAgKiBbdGhpcyB0aHJlYWRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzEwNDM5I2lzc3VlY29tbWVudC0yNzU3ODU2Mzl9LgogICAgICoKICAgICAqIEBhdWdtZW50cyBMb2FkZXIKICAgICAqLwogICAgY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IGltYWdlIGxvYWRlci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIG1hbmFnZXIgKSB7CgogICAgCQlzdXBlciggbWFuYWdlciApOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzc2VzIHRoZSBsb2FkZWQgaW1hZ2UKICAgIAkgKiB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay4gVGhlIG1ldGhvZCBhbHNvIHJldHVybnMgYSBuZXcgYEltYWdlYCBvYmplY3Qgd2hpY2ggY2FuCiAgICAJICogZGlyZWN0bHkgYmUgdXNlZCBmb3IgdGV4dHVyZSBjcmVhdGlvbi4gSWYgeW91IGRvIGl0IHRoaXMgd2F5LCB0aGUgdGV4dHVyZQogICAgCSAqIG1heSBwb3AgdXAgaW4geW91ciBzY2VuZSBvbmNlIHRoZSByZXNwZWN0aXZlIGxvYWRpbmcgcHJvY2VzcyBpcyBmaW5pc2hlZC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgcGF0aC9VUkwgb2YgdGhlIGZpbGUgdG8gYmUgbG9hZGVkLiBUaGlzIGNhbiBhbHNvIGJlIGEgZGF0YSBVUkkuCiAgICAJICogQHBhcmFtIHtmdW5jdGlvbihJbWFnZSl9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC4KICAgIAkgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIFVuc3VwcG9ydGVkIGluIHRoaXMgbG9hZGVyLgogICAgCSAqIEBwYXJhbSB7b25FcnJvckNhbGxiYWNrfSBvbkVycm9yIC0gRXhlY3V0ZWQgd2hlbiBlcnJvcnMgb2NjdXIuCiAgICAJICogQHJldHVybiB7SW1hZ2V9IFRoZSBpbWFnZS4KICAgIAkgKi8KICAgIAlsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCiAgICAJCWlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7CgogICAgCQl1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7CgogICAgCQljb25zdCBzY29wZSA9IHRoaXM7CgogICAgCQljb25zdCBjYWNoZWQgPSBDYWNoZS5nZXQoIGBpbWFnZToke3VybH1gICk7CgogICAgCQlpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWlmICggY2FjaGVkLmNvbXBsZXRlID09PSB0cnVlICkgewoKICAgIAkJCQlzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7CgogICAgCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHsKCiAgICAJCQkJCWlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTsKCiAgICAJCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgogICAgCQkJCX0sIDAgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlsZXQgYXJyID0gX2xvYWRpbmcuZ2V0KCBjYWNoZWQgKTsKCiAgICAJCQkJaWYgKCBhcnIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCWFyciA9IFtdOwogICAgCQkJCQlfbG9hZGluZy5zZXQoIGNhY2hlZCwgYXJyICk7CgogICAgCQkJCX0KCiAgICAJCQkJYXJyLnB1c2goIHsgb25Mb2FkLCBvbkVycm9yIH0gKTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIGNhY2hlZDsKCiAgICAJCX0KCiAgICAJCWNvbnN0IGltYWdlID0gY3JlYXRlRWxlbWVudE5TKCAnaW1nJyApOwoKICAgIAkJZnVuY3Rpb24gb25JbWFnZUxvYWQoKSB7CgogICAgCQkJcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKCiAgICAJCQlpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApOwoKICAgIAkJCS8vCgogICAgCQkJY29uc3QgY2FsbGJhY2tzID0gX2xvYWRpbmcuZ2V0KCB0aGlzICkgfHwgW107CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTsKICAgIAkJCQlpZiAoIGNhbGxiYWNrLm9uTG9hZCApIGNhbGxiYWNrLm9uTG9hZCggdGhpcyApOwoKICAgIAkJCX0KCiAgICAJCQlfbG9hZGluZy5kZWxldGUoIHRoaXMgKTsKCiAgICAJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKICAgIAkJfQoKICAgIAkJZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHsKCiAgICAJCQlyZW1vdmVFdmVudExpc3RlbmVycygpOwoKICAgIAkJCWlmICggb25FcnJvciApIG9uRXJyb3IoIGV2ZW50ICk7CgogICAgCQkJQ2FjaGUucmVtb3ZlKCBgaW1hZ2U6JHt1cmx9YCApOwoKICAgIAkJCS8vCgogICAgCQkJY29uc3QgY2FsbGJhY2tzID0gX2xvYWRpbmcuZ2V0KCB0aGlzICkgfHwgW107CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTsKICAgIAkJCQlpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBldmVudCApOwoKICAgIAkJCX0KCiAgICAJCQlfbG9hZGluZy5kZWxldGUoIHRoaXMgKTsKCgogICAgCQkJc2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApOwogICAgCQkJc2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkgewoKICAgIAkJCWltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7CiAgICAJCQlpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7CgogICAgCQl9CgogICAgCQlpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApOwogICAgCQlpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7CgogICAgCQlpZiAoIHVybC5zbGljZSggMCwgNSApICE9PSAnZGF0YTonICkgewoKICAgIAkJCWlmICggdGhpcy5jcm9zc09yaWdpbiAhPT0gdW5kZWZpbmVkICkgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmNyb3NzT3JpZ2luOwoKICAgIAkJfQoKICAgIAkJQ2FjaGUuYWRkKCBgaW1hZ2U6JHt1cmx9YCwgaW1hZ2UgKTsKICAgIAkJc2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApOwoKICAgIAkJaW1hZ2Uuc3JjID0gdXJsOwoKICAgIAkJcmV0dXJuIGltYWdlOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQ2xhc3MgZm9yIGxvYWRpbmcgdGV4dHVyZXMuIEltYWdlcyBhcmUgaW50ZXJuYWxseQogICAgICogbG9hZGVkIHZpYSB7QGxpbmsgSW1hZ2VMb2FkZXJ9LgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpOwogICAgICogY29uc3QgdGV4dHVyZSA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICd0ZXh0dXJlcy9sYW5kX29jZWFuX2ljZV9jbG91ZF8yMDQ4LmpwZycgKTsKICAgICAqCiAgICAgKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBtYXA6dGV4dHVyZSB9ICk7CiAgICAgKiBgYGAKICAgICAqIFBsZWFzZSBub3RlIHRoYXQgYFRleHR1cmVMb2FkZXJgIGhhcyBkcm9wcGVkIHN1cHBvcnQgZm9yIHByb2dyZXNzCiAgICAgKiBldmVudHMgaW4gYHI4NGAuIEZvciBhIGBUZXh0dXJlTG9hZGVyYCB0aGF0IHN1cHBvcnRzIHByb2dyZXNzIGV2ZW50cywgc2VlCiAgICAgKiBbdGhpcyB0aHJlYWRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzEwNDM5I2lzc3VlY29tbWVudC0yOTMyNjAxNDV9LgogICAgICoKICAgICAqIEBhdWdtZW50cyBMb2FkZXIKICAgICAqLwogICAgY2xhc3MgVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7CgogICAgCS8qKgogICAgCSAqIENvbnN0cnVjdHMgYSBuZXcgdGV4dHVyZSBsb2FkZXIuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBUaGUgbG9hZGluZyBtYW5hZ2VyLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBtYW5hZ2VyICkgewoKICAgIAkJc3VwZXIoIG1hbmFnZXIgKTsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGZ1bGx5IGxvYWRlZCB0ZXh0dXJlCiAgICAJICogdG8gdGhlIGBvbkxvYWQoKWAgY2FsbGJhY2suIFRoZSBtZXRob2QgYWxzbyByZXR1cm5zIGEgbmV3IHRleHR1cmUgb2JqZWN0IHdoaWNoIGNhbgogICAgCSAqIGRpcmVjdGx5IGJlIHVzZWQgZm9yIG1hdGVyaWFsIGNyZWF0aW9uLiBJZiB5b3UgZG8gaXQgdGhpcyB3YXksIHRoZSB0ZXh0dXJlCiAgICAJICogbWF5IHBvcCB1cCBpbiB5b3VyIHNjZW5lIG9uY2UgdGhlIHJlc3BlY3RpdmUgbG9hZGluZyBwcm9jZXNzIGlzIGZpbmlzaGVkLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS4KICAgIAkgKiBAcGFyYW0ge2Z1bmN0aW9uKFRleHR1cmUpfSBvbkxvYWQgLSBFeGVjdXRlZCB3aGVuIHRoZSBsb2FkaW5nIHByb2Nlc3MgaGFzIGJlZW4gZmluaXNoZWQuCiAgICAJICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBVbnN1cHBvcnRlZCBpbiB0aGlzIGxvYWRlci4KICAgIAkgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLgogICAgCSAqIEByZXR1cm4ge1RleHR1cmV9IFRoZSB0ZXh0dXJlLgogICAgCSAqLwogICAgCWxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKICAgIAkJY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7CgogICAgCQljb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApOwogICAgCQlsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTsKICAgIAkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoKICAgIAkJbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHsKCiAgICAJCQl0ZXh0dXJlLmltYWdlID0gaW1hZ2U7CiAgICAJCQl0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCQlpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlvbkxvYWQoIHRleHR1cmUgKTsKCiAgICAJCQl9CgogICAgCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgogICAgCQlyZXR1cm4gdGV4dHVyZTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIENhbWVyYSB0aGF0IHVzZXMgW29ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PcnRob2dyYXBoaWNfcHJvamVjdGlvbn0uCiAgICAgKgogICAgICogSW4gdGhpcyBwcm9qZWN0aW9uIG1vZGUsIGFuIG9iamVjdCdzIHNpemUgaW4gdGhlIHJlbmRlcmVkIGltYWdlIHN0YXlzCiAgICAgKiBjb25zdGFudCByZWdhcmRsZXNzIG9mIGl0cyBkaXN0YW5jZSBmcm9tIHRoZSBjYW1lcmEuIFRoaXMgY2FuIGJlIHVzZWZ1bAogICAgICogZm9yIHJlbmRlcmluZyAyRCBzY2VuZXMgYW5kIFVJIGVsZW1lbnRzLCBhbW9uZ3N0IG90aGVyIHRoaW5ncy4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSggd2lkdGggLyAtIDIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgaGVpZ2h0IC8gLSAyLCAxLCAxMDAwICk7CiAgICAgKiBzY2VuZS5hZGQoIGNhbWVyYSApOwogICAgICogYGBgCiAgICAgKgogICAgICogQGF1Z21lbnRzIENhbWVyYQogICAgICovCiAgICBjbGFzcyBPcnRob2dyYXBoaWNDYW1lcmEgZXh0ZW5kcyBDYW1lcmEgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IG9ydGhvZ3JhcGhpYyBjYW1lcmEuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW2xlZnQ9LTFdIC0gVGhlIGxlZnQgcGxhbmUgb2YgdGhlIGNhbWVyYSdzIGZydXN0dW0uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtyaWdodD0xXSAtIFRoZSByaWdodCBwbGFuZSBvZiB0aGUgY2FtZXJhJ3MgZnJ1c3R1bS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW3RvcD0xXSAtIFRoZSB0b3AgcGxhbmUgb2YgdGhlIGNhbWVyYSdzIGZydXN0dW0uCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtib3R0b209LTFdIC0gVGhlIGJvdHRvbSBwbGFuZSBvZiB0aGUgY2FtZXJhJ3MgZnJ1c3R1bS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gW25lYXI9MC4xXSAtIFRoZSBjYW1lcmEncyBuZWFyIHBsYW5lLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbZmFyPTIwMDBdIC0gVGhlIGNhbWVyYSdzIGZhciBwbGFuZS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggbGVmdCA9IC0xLCByaWdodCA9IDEsIHRvcCA9IDEsIGJvdHRvbSA9IC0xLCBuZWFyID0gMC4xLCBmYXIgPSAyMDAwICkgewoKICAgIAkJc3VwZXIoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzT3J0aG9ncmFwaGljQ2FtZXJhID0gdHJ1ZTsKCiAgICAJCXRoaXMudHlwZSA9ICdPcnRob2dyYXBoaWNDYW1lcmEnOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSB6b29tIGZhY3RvciBvZiB0aGUgY2FtZXJhLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAxCiAgICAJCSAqLwogICAgCQl0aGlzLnpvb20gPSAxOwoKICAgIAkJLyoqCiAgICAJCSAqIFJlcHJlc2VudHMgdGhlIGZydXN0dW0gd2luZG93IHNwZWNpZmljYXRpb24uIFRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBlZGl0ZWQKICAgIAkJICogZGlyZWN0bHkgYnV0IHZpYSB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjc2V0Vmlld09mZnNldH0gYW5kIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNjbGVhclZpZXdPZmZzZXR9LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P09iamVjdH0KICAgIAkJICogQGRlZmF1bHQgbnVsbAogICAgCQkgKi8KICAgIAkJdGhpcy52aWV3ID0gbnVsbDsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgbGVmdCBwbGFuZSBvZiB0aGUgY2FtZXJhJ3MgZnJ1c3R1bS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgLTEKICAgIAkJICovCiAgICAJCXRoaXMubGVmdCA9IGxlZnQ7CgogICAgCQkvKioKICAgIAkJICogVGhlIHJpZ2h0IHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAxCiAgICAJCSAqLwogICAgCQl0aGlzLnJpZ2h0ID0gcmlnaHQ7CgogICAgCQkvKioKICAgIAkJICogVGhlIHRvcCBwbGFuZSBvZiB0aGUgY2FtZXJhJ3MgZnJ1c3R1bS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgMQogICAgCQkgKi8KICAgIAkJdGhpcy50b3AgPSB0b3A7CgogICAgCQkvKioKICAgIAkJICogVGhlIGJvdHRvbSBwbGFuZSBvZiB0aGUgY2FtZXJhJ3MgZnJ1c3R1bS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge251bWJlcn0KICAgIAkJICogQGRlZmF1bHQgLTEKICAgIAkJICovCiAgICAJCXRoaXMuYm90dG9tID0gYm90dG9tOwoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBjYW1lcmEncyBuZWFyIHBsYW5lLiBUaGUgdmFsaWQgcmFuZ2UgaXMgZ3JlYXRlciB0aGFuIGAwYAogICAgCQkgKiBhbmQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBPcnRob2dyYXBoaWNDYW1lcmEjZmFyfS4KICAgIAkJICoKICAgIAkJICogTm90ZSB0aGF0LCB1bmxpa2UgZm9yIHRoZSB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmF9LCBgMGAgaXMgYQogICAgCQkgKiB2YWxpZCB2YWx1ZSBmb3IgYW4gb3J0aG9ncmFwaGljIGNhbWVyYSdzIG5lYXIgcGxhbmUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDAuMQogICAgCQkgKi8KICAgIAkJdGhpcy5uZWFyID0gbmVhcjsKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgY2FtZXJhJ3MgZmFyIHBsYW5lLiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUKICAgIAkJICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgT3J0aG9ncmFwaGljQ2FtZXJhI25lYXJ9LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKiBAZGVmYXVsdCAyMDAwCiAgICAJCSAqLwogICAgCQl0aGlzLmZhciA9IGZhcjsKCiAgICAJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKICAgIAl9CgogICAgCWNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkgewoKICAgIAkJc3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTsKCiAgICAJCXRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0OwogICAgCQl0aGlzLnJpZ2h0ID0gc291cmNlLnJpZ2h0OwogICAgCQl0aGlzLnRvcCA9IHNvdXJjZS50b3A7CiAgICAJCXRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTsKICAgIAkJdGhpcy5uZWFyID0gc291cmNlLm5lYXI7CiAgICAJCXRoaXMuZmFyID0gc291cmNlLmZhcjsKCiAgICAJCXRoaXMuem9vbSA9IHNvdXJjZS56b29tOwogICAgCQl0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFNldHMgYW4gb2Zmc2V0IGluIGEgbGFyZ2VyIGZydXN0dW0uIFRoaXMgaXMgdXNlZnVsIGZvciBtdWx0aS13aW5kb3cgb3IKICAgIAkgKiBtdWx0aS1tb25pdG9yL211bHRpLW1hY2hpbmUgc2V0dXBzLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IGZ1bGxXaWR0aCAtIFRoZSBmdWxsIHdpZHRoIG9mIG11bHRpdmlldyBzZXR1cC4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gZnVsbEhlaWdodCAtIFRoZSBmdWxsIGhlaWdodCBvZiBtdWx0aXZpZXcgc2V0dXAuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHN1YmNhbWVyYS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2ZXJ0aWNhbCBvZmZzZXQgb2YgdGhlIHN1YmNhbWVyYS4KICAgIAkgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2Ygc3ViY2FtZXJhLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHN1YmNhbWVyYS4KICAgIAkgKiBAc2VlIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNzZXRWaWV3T2Zmc2V0fQogICAgCSAqLwogICAgCXNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHsKCiAgICAJCWlmICggdGhpcy52aWV3ID09PSBudWxsICkgewoKICAgIAkJCXRoaXMudmlldyA9IHsKICAgIAkJCQllbmFibGVkOiB0cnVlLAogICAgCQkJCWZ1bGxXaWR0aDogMSwKICAgIAkJCQlmdWxsSGVpZ2h0OiAxLAogICAgCQkJCW9mZnNldFg6IDAsCiAgICAJCQkJb2Zmc2V0WTogMCwKICAgIAkJCQl3aWR0aDogMSwKICAgIAkJCQloZWlnaHQ6IDEKICAgIAkJCX07CgogICAgCQl9CgogICAgCQl0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7CiAgICAJCXRoaXMudmlldy5mdWxsV2lkdGggPSBmdWxsV2lkdGg7CiAgICAJCXRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDsKICAgIAkJdGhpcy52aWV3Lm9mZnNldFggPSB4OwogICAgCQl0aGlzLnZpZXcub2Zmc2V0WSA9IHk7CiAgICAJCXRoaXMudmlldy53aWR0aCA9IHdpZHRoOwogICAgCQl0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0OwoKICAgIAkJdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUmVtb3ZlcyB0aGUgdmlldyBvZmZzZXQgZnJvbSB0aGUgcHJvamVjdGlvbiBtYXRyaXguCiAgICAJICovCiAgICAJY2xlYXJWaWV3T2Zmc2V0KCkgewoKICAgIAkJaWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7CgogICAgCQkJdGhpcy52aWV3LmVuYWJsZWQgPSBmYWxzZTsKCiAgICAJCX0KCiAgICAJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFVwZGF0ZXMgdGhlIGNhbWVyYSdzIHByb2plY3Rpb24gbWF0cml4LiBNdXN0IGJlIGNhbGxlZCBhZnRlciBhbnkgY2hhbmdlIG9mCiAgICAJICogY2FtZXJhIHByb3BlcnRpZXMuCiAgICAJICovCiAgICAJdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHsKCiAgICAJCWNvbnN0IGR4ID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyAoIDIgKiB0aGlzLnpvb20gKTsKICAgIAkJY29uc3QgZHkgPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvICggMiAqIHRoaXMuem9vbSApOwogICAgCQljb25zdCBjeCA9ICggdGhpcy5yaWdodCArIHRoaXMubGVmdCApIC8gMjsKICAgIAkJY29uc3QgY3kgPSAoIHRoaXMudG9wICsgdGhpcy5ib3R0b20gKSAvIDI7CgogICAgCQlsZXQgbGVmdCA9IGN4IC0gZHg7CiAgICAJCWxldCByaWdodCA9IGN4ICsgZHg7CiAgICAJCWxldCB0b3AgPSBjeSArIGR5OwogICAgCQlsZXQgYm90dG9tID0gY3kgLSBkeTsKCiAgICAJCWlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkgewoKICAgIAkJCWNvbnN0IHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCAvIHRoaXMuem9vbTsKICAgIAkJCWNvbnN0IHNjYWxlSCA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gdGhpcy52aWV3LmZ1bGxIZWlnaHQgLyB0aGlzLnpvb207CgogICAgCQkJbGVmdCArPSBzY2FsZVcgKiB0aGlzLnZpZXcub2Zmc2V0WDsKICAgIAkJCXJpZ2h0ID0gbGVmdCArIHNjYWxlVyAqIHRoaXMudmlldy53aWR0aDsKICAgIAkJCXRvcCAtPSBzY2FsZUggKiB0aGlzLnZpZXcub2Zmc2V0WTsKICAgIAkJCWJvdHRvbSA9IHRvcCAtIHNjYWxlSCAqIHRoaXMudmlldy5oZWlnaHQ7CgogICAgCQl9CgogICAgCQl0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCB0aGlzLm5lYXIsIHRoaXMuZmFyLCB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gKTsKCiAgICAJCXRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7CgogICAgCX0KCiAgICAJdG9KU09OKCBtZXRhICkgewoKICAgIAkJY29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApOwoKICAgIAkJZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTsKICAgIAkJZGF0YS5vYmplY3QubGVmdCA9IHRoaXMubGVmdDsKICAgIAkJZGF0YS5vYmplY3QucmlnaHQgPSB0aGlzLnJpZ2h0OwogICAgCQlkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDsKICAgIAkJZGF0YS5vYmplY3QuYm90dG9tID0gdGhpcy5ib3R0b207CiAgICAJCWRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7CiAgICAJCWRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyOwoKICAgIAkJaWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApOwoKICAgIAkJcmV0dXJuIGRhdGE7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIHR5cGUgb2YgY2FtZXJhIGNhbiBiZSB1c2VkIGluIG9yZGVyIHRvIGVmZmljaWVudGx5IHJlbmRlciBhIHNjZW5lIHdpdGggYQogICAgICogcHJlZGVmaW5lZCBzZXQgb2YgY2FtZXJhcy4gVGhpcyBpcyBhbiBpbXBvcnRhbnQgcGVyZm9ybWFuY2UgYXNwZWN0IGZvcgogICAgICogcmVuZGVyaW5nIFZSIHNjZW5lcy4KICAgICAqCiAgICAgKiBBbiBpbnN0YW5jZSBvZiBgQXJyYXlDYW1lcmFgIGFsd2F5cyBoYXMgYW4gYXJyYXkgb2Ygc3ViIGNhbWVyYXMuIEl0J3MgbWFuZGF0b3J5CiAgICAgKiB0byBkZWZpbmUgZm9yIGVhY2ggc3ViIGNhbWVyYSB0aGUgYHZpZXdwb3J0YCBwcm9wZXJ0eSB3aGljaCBkZXRlcm1pbmVzIHRoZQogICAgICogcGFydCBvZiB0aGUgdmlld3BvcnQgdGhhdCBpcyByZW5kZXJlZCB3aXRoIHRoaXMgY2FtZXJhLgogICAgICoKICAgICAqIEBhdWdtZW50cyBQZXJzcGVjdGl2ZUNhbWVyYQogICAgICovCiAgICBjbGFzcyBBcnJheUNhbWVyYSBleHRlbmRzIFBlcnNwZWN0aXZlQ2FtZXJhIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBhcnJheSBjYW1lcmEuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge0FycmF5PFBlcnNwZWN0aXZlQ2FtZXJhPn0gW2FycmF5PVtdXSAtIEFuIGFycmF5IG9mIHBlcnNwZWN0aXZlIHN1YiBjYW1lcmFzLgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCBhcnJheSA9IFtdICkgewoKICAgIAkJc3VwZXIoKTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEByZWFkb25seQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzQXJyYXlDYW1lcmEgPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgdGhpcyBjYW1lcmEgaXMgdXNlZCB3aXRoIG11bHRpdmlldyByZW5kZXJpbmcgb3Igbm90LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQHJlYWRvbmx5CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmlzTXVsdGlWaWV3Q2FtZXJhID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogQW4gYXJyYXkgb2YgcGVyc3BlY3RpdmUgc3ViIGNhbWVyYXMuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtBcnJheTxQZXJzcGVjdGl2ZUNhbWVyYT59CiAgICAJCSAqLwogICAgCQl0aGlzLmNhbWVyYXMgPSBhcnJheTsKCiAgICAJfQoKICAgIH0KCiAgICAvKioKICAgICAqIERldGVybWluZXMgaG93IG1hbnkgYnl0ZXMgbXVzdCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgdGV4dHVyZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRleHR1cmUuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgdGV4dHVyZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmb3JtYXQgLSBUaGUgdGV4dHVyZSdzIGZvcm1hdC4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIHRleHR1cmUncyB0eXBlLgogICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYnl0ZSBsZW5ndGguCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEJ5dGVMZW5ndGgoIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgdHlwZSApIHsKCiAgICAJY29uc3QgdHlwZUJ5dGVMZW5ndGggPSBnZXRUZXh0dXJlVHlwZUJ5dGVMZW5ndGgoIHR5cGUgKTsKCiAgICAJc3dpdGNoICggZm9ybWF0ICkgewoKICAgIAkJLy8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy9PcGVuR0wtUmVmcGFnZXMvZXMzLjAvaHRtbC9nbFRleEltYWdlMkQueGh0bWwKICAgIAkJY2FzZSBBbHBoYUZvcm1hdDoKICAgIAkJCXJldHVybiB3aWR0aCAqIGhlaWdodDsKICAgIAkJY2FzZSBSZWRGb3JtYXQ6CiAgICAJCQlyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoOwogICAgCQljYXNlIFJlZEludGVnZXJGb3JtYXQ6CiAgICAJCQlyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoOwogICAgCQljYXNlIFJHRm9ybWF0OgogICAgCQkJcmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDIgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7CiAgICAJCWNhc2UgUkdJbnRlZ2VyRm9ybWF0OgogICAgCQkJcmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDIgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7CiAgICAJCWNhc2UgUkdCRm9ybWF0OgogICAgCQkJcmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDMgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7CiAgICAJCWNhc2UgUkdCQUZvcm1hdDoKICAgIAkJCXJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiA0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoOwogICAgCQljYXNlIFJHQkFJbnRlZ2VyRm9ybWF0OgogICAgCQkJcmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDQgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7CgogICAgCQkvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNfc3JnYi8KICAgIAkJY2FzZSBSR0JfUzNUQ19EWFQxX0Zvcm1hdDoKICAgIAkJY2FzZSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogODsKICAgIAkJY2FzZSBSR0JBX1MzVENfRFhUM19Gb3JtYXQ6CiAgICAJCWNhc2UgUkdCQV9TM1RDX0RYVDVfRm9ybWF0OgogICAgCQkJcmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2OwoKICAgIAkJLy8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Yy8KICAgIAkJY2FzZSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdDoKICAgIAkJY2FzZSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gKCBNYXRoLm1heCggd2lkdGgsIDE2ICkgKiBNYXRoLm1heCggaGVpZ2h0LCA4ICkgKSAvIDQ7CiAgICAJCWNhc2UgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQ6CiAgICAJCWNhc2UgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0OgogICAgCQkJcmV0dXJuICggTWF0aC5tYXgoIHdpZHRoLCA4ICkgKiBNYXRoLm1heCggaGVpZ2h0LCA4ICkgKSAvIDI7CgogICAgCQkvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0Yy8KICAgIAkJY2FzZSBSR0JfRVRDMV9Gb3JtYXQ6CiAgICAJCWNhc2UgUkdCX0VUQzJfRm9ybWF0OgogICAgCQkJcmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDg7CiAgICAJCWNhc2UgUkdCQV9FVEMyX0VBQ19Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7CgogICAgCQkvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMvCiAgICAJCWNhc2UgUkdCQV9BU1RDXzR4NF9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDMgKSAvIDQgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzV4NF9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDQgKSAvIDUgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzV4NV9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDQgKSAvIDUgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDUgKSAvIDYgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDUgKSAvIDYgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNSApIC8gNiApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzh4NV9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDcgKSAvIDggKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNCApIC8gNSApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDcgKSAvIDggKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNSApIC8gNiApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzh4OF9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDcgKSAvIDggKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNyApIC8gOCApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzEweDVfRm9ybWF0OgogICAgCQkJcmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA5ICkgLyAxMCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA0ICkgLyA1ICkgKiAxNjsKICAgIAkJY2FzZSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDUgKSAvIDYgKSAqIDE2OwogICAgCQljYXNlIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdDoKICAgIAkJCXJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgOSApIC8gMTAgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNyApIC8gOCApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdDoKICAgIAkJCXJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgOSApIC8gMTAgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgOSApIC8gMTAgKSAqIDE2OwogICAgCQljYXNlIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDExICkgLyAxMiApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA5ICkgLyAxMCApICogMTY7CiAgICAJCWNhc2UgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdDoKICAgIAkJCXJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgMTEgKSAvIDEyICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDExICkgLyAxMiApICogMTY7CgogICAgCQkvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0Yy8KICAgIAkJY2FzZSBSR0JBX0JQVENfRm9ybWF0OgogICAgCQljYXNlIFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQ6CiAgICAJCWNhc2UgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0OgogICAgCQkJcmV0dXJuIE1hdGguY2VpbCggd2lkdGggLyA0ICkgKiBNYXRoLmNlaWwoIGhlaWdodCAvIDQgKSAqIDE2OwoKICAgIAkJLy8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX3JndGMvCiAgICAJCWNhc2UgUkVEX1JHVEMxX0Zvcm1hdDoKICAgIAkJY2FzZSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdDoKICAgIAkJCXJldHVybiBNYXRoLmNlaWwoIHdpZHRoIC8gNCApICogTWF0aC5jZWlsKCBoZWlnaHQgLyA0ICkgKiA4OwogICAgCQljYXNlIFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQ6CiAgICAJCWNhc2UgU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQ6CiAgICAJCQlyZXR1cm4gTWF0aC5jZWlsKCB3aWR0aCAvIDQgKSAqIE1hdGguY2VpbCggaGVpZ2h0IC8gNCApICogMTY7CgogICAgCX0KCiAgICAJdGhyb3cgbmV3IEVycm9yKAogICAgCQlgVW5hYmxlIHRvIGRldGVybWluZSB0ZXh0dXJlIGJ5dGUgbGVuZ3RoIGZvciAke2Zvcm1hdH0gZm9ybWF0LmAsCiAgICAJKTsKCiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VGV4dHVyZVR5cGVCeXRlTGVuZ3RoKCB0eXBlICkgewoKICAgIAlzd2l0Y2ggKCB0eXBlICkgewoKICAgIAkJY2FzZSBVbnNpZ25lZEJ5dGVUeXBlOgogICAgCQljYXNlIEJ5dGVUeXBlOgogICAgCQkJcmV0dXJuIHsgYnl0ZUxlbmd0aDogMSwgY29tcG9uZW50czogMSB9OwogICAgCQljYXNlIFVuc2lnbmVkU2hvcnRUeXBlOgogICAgCQljYXNlIFNob3J0VHlwZToKICAgIAkJY2FzZSBIYWxmRmxvYXRUeXBlOgogICAgCQkJcmV0dXJuIHsgYnl0ZUxlbmd0aDogMiwgY29tcG9uZW50czogMSB9OwogICAgCQljYXNlIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZToKICAgIAkJY2FzZSBVbnNpZ25lZFNob3J0NTU1MVR5cGU6CiAgICAJCQlyZXR1cm4geyBieXRlTGVuZ3RoOiAyLCBjb21wb25lbnRzOiA0IH07CiAgICAJCWNhc2UgVW5zaWduZWRJbnRUeXBlOgogICAgCQljYXNlIEludFR5cGU6CiAgICAJCWNhc2UgRmxvYXRUeXBlOgogICAgCQkJcmV0dXJuIHsgYnl0ZUxlbmd0aDogNCwgY29tcG9uZW50czogMSB9OwogICAgCQljYXNlIFVuc2lnbmVkSW50NTk5OVR5cGU6CiAgICAJCQlyZXR1cm4geyBieXRlTGVuZ3RoOiA0LCBjb21wb25lbnRzOiAzIH07CgogICAgCX0KCiAgICAJdGhyb3cgbmV3IEVycm9yKCBgVW5rbm93biB0ZXh0dXJlIHR5cGUgJHt0eXBlfS5gICk7CgogICAgfQoKICAgIGlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7CgogICAgCV9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdyZWdpc3RlcicsIHsgZGV0YWlsOiB7CiAgICAJCXJldmlzaW9uOiBSRVZJU0lPTiwKICAgIAl9IH0gKSApOwoKICAgIH0KCiAgICBpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkgewoKICAgIAlpZiAoIHdpbmRvdy5fX1RIUkVFX18gKSB7CgogICAgCQljb25zb2xlLndhcm4oICdXQVJOSU5HOiBNdWx0aXBsZSBpbnN0YW5jZXMgb2YgVGhyZWUuanMgYmVpbmcgaW1wb3J0ZWQuJyApOwoKICAgIAl9IGVsc2UgewoKICAgIAkJd2luZG93Ll9fVEhSRUVfXyA9IFJFVklTSU9OOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogQGxpY2Vuc2UKICAgICAqIENvcHlyaWdodCAyMDEwLTIwMjUgVGhyZWUuanMgQXV0aG9ycwogICAgICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVAogICAgICovCgogICAgZnVuY3Rpb24gV2ViR0xBbmltYXRpb24oKSB7CgogICAgCWxldCBjb250ZXh0ID0gbnVsbDsKICAgIAlsZXQgaXNBbmltYXRpbmcgPSBmYWxzZTsKICAgIAlsZXQgYW5pbWF0aW9uTG9vcCA9IG51bGw7CiAgICAJbGV0IHJlcXVlc3RJZCA9IG51bGw7CgogICAgCWZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkgewoKICAgIAkJYW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTsKCiAgICAJCXJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCXN0YXJ0OiBmdW5jdGlvbiAoKSB7CgogICAgCQkJaWYgKCBpc0FuaW1hdGluZyA9PT0gdHJ1ZSApIHJldHVybjsKICAgIAkJCWlmICggYW5pbWF0aW9uTG9vcCA9PT0gbnVsbCApIHJldHVybjsKCiAgICAJCQlyZXF1ZXN0SWQgPSBjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApOwoKICAgIAkJCWlzQW5pbWF0aW5nID0gdHJ1ZTsKCiAgICAJCX0sCgogICAgCQlzdG9wOiBmdW5jdGlvbiAoKSB7CgogICAgCQkJY29udGV4dC5jYW5jZWxBbmltYXRpb25GcmFtZSggcmVxdWVzdElkICk7CgogICAgCQkJaXNBbmltYXRpbmcgPSBmYWxzZTsKCiAgICAJCX0sCgogICAgCQlzZXRBbmltYXRpb25Mb29wOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKICAgIAkJCWFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjazsKCiAgICAJCX0sCgogICAgCQlzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKICAgIAkJCWNvbnRleHQgPSB2YWx1ZTsKCiAgICAJCX0KCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHsKCiAgICAJY29uc3QgYnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCWZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgewoKICAgIAkJY29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7CiAgICAJCWNvbnN0IHVzYWdlID0gYXR0cmlidXRlLnVzYWdlOwogICAgCQljb25zdCBzaXplID0gYXJyYXkuYnl0ZUxlbmd0aDsKCiAgICAJCWNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpOwoKICAgIAkJZ2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7CiAgICAJCWdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApOwoKICAgIAkJYXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTsKCiAgICAJCWxldCB0eXBlOwoKICAgIAkJaWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSApIHsKCiAgICAJCQl0eXBlID0gZ2wuRkxPQVQ7CgogICAgCQl9IGVsc2UgaWYgKCB0eXBlb2YgRmxvYXQxNkFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBhcnJheSBpbnN0YW5jZW9mIEZsb2F0MTZBcnJheSApIHsKCiAgICAJCQl0eXBlID0gZ2wuSEFMRl9GTE9BVDsKCiAgICAJCX0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7CgogICAgCQkJaWYgKCBhdHRyaWJ1dGUuaXNGbG9hdDE2QnVmZmVyQXR0cmlidXRlICkgewoKICAgIAkJCQl0eXBlID0gZ2wuSEFMRl9GTE9BVDsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQl0eXBlID0gZ2wuVU5TSUdORURfU0hPUlQ7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkgewoKICAgIAkJCXR5cGUgPSBnbC5TSE9SVDsKCiAgICAJCX0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7CgogICAgCQkJdHlwZSA9IGdsLlVOU0lHTkVEX0lOVDsKCiAgICAJCX0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIHsKCiAgICAJCQl0eXBlID0gZ2wuSU5UOwoKICAgIAkJfSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgKSB7CgogICAgCQkJdHlwZSA9IGdsLkJZVEU7CgogICAgCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7CgogICAgCQkJdHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7CgogICAgCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICkgewoKICAgIAkJCXR5cGUgPSBnbC5VTlNJR05FRF9CWVRFOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGJ1ZmZlciBkYXRhIGZvcm1hdDogJyArIGFycmF5ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gewogICAgCQkJYnVmZmVyOiBidWZmZXIsCiAgICAJCQl0eXBlOiB0eXBlLAogICAgCQkJYnl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCwKICAgIAkJCXZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uLAogICAgCQkJc2l6ZTogc2l6ZQogICAgCQl9OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHVwZGF0ZUJ1ZmZlciggYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7CgogICAgCQljb25zdCBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTsKICAgIAkJY29uc3QgdXBkYXRlUmFuZ2VzID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlczsKCiAgICAJCWdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlciApOwoKICAgIAkJaWYgKCB1cGRhdGVSYW5nZXMubGVuZ3RoID09PSAwICkgewoKICAgIAkJCS8vIE5vdCB1c2luZyB1cGRhdGUgcmFuZ2VzCiAgICAJCQlnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCAwLCBhcnJheSApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQkvLyBCZWZvcmUgYXBwbHlpbmcgdXBkYXRlIHJhbmdlcywgd2UgbWVyZ2UgYW55IGFkamFjZW50IC8gb3ZlcmxhcHBpbmcKICAgIAkJCS8vIHJhbmdlcyB0byByZWR1Y2UgbG9hZCBvbiBgZ2wuYnVmZmVyU3ViRGF0YWAuIEVtcGlyaWNhbGx5LCB0aGlzIGhhcyBsZWQKICAgIAkJCS8vIHRvIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBmb3IgYXBwbGljYXRpb25zIHdoaWNoIG1ha2UgaGVhdnkgdXNlIG9mCiAgICAJCQkvLyB1cGRhdGUgcmFuZ2VzLiBMaWtlbHkgZHVlIHRvIEdQVSBjb21tYW5kIG92ZXJoZWFkLgogICAgCQkJLy8KICAgIAkJCS8vIE5vdGUgdGhhdCB0byByZWR1Y2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGJldHdlZW4gZnJhbWVzLCB3ZSBtZXJnZSB0aGUKICAgIAkJCS8vIHVwZGF0ZSByYW5nZXMgaW4tcGxhY2UuIFRoaXMgaXMgc2FmZSBiZWNhdXNlIHRoaXMgbWV0aG9kIHdpbGwgY2xlYXIgdGhlCiAgICAJCQkvLyB1cGRhdGUgcmFuZ2VzIG9uY2UgdXBkYXRlZC4KCiAgICAJCQl1cGRhdGVSYW5nZXMuc29ydCggKCBhLCBiICkgPT4gYS5zdGFydCAtIGIuc3RhcnQgKTsKCiAgICAJCQkvLyBUbyBtZXJnZSB0aGUgdXBkYXRlIHJhbmdlcyBpbi1wbGFjZSwgd2Ugd29yayBmcm9tIGxlZnQgdG8gcmlnaHQgaW4gdGhlCiAgICAJCQkvLyBleGlzdGluZyB1cGRhdGVSYW5nZXMgYXJyYXksIG1lcmdpbmcgcmFuZ2VzLiBUaGlzIG1heSByZXN1bHQgaW4gYSBmaW5hbAogICAgCQkJLy8gYXJyYXkgd2hpY2ggaXMgc21hbGxlciB0aGFuIHRoZSBvcmlnaW5hbC4gVGhpcyBpbmRleCB0cmFja3MgdGhlIGxhc3QKICAgIAkJCS8vIGluZGV4IHJlcHJlc2VudGluZyBhIG1lcmdlZCByYW5nZSwgYW55IGRhdGEgYWZ0ZXIgdGhpcyBpbmRleCBjYW4gYmUKICAgIAkJCS8vIHRyaW1tZWQgb25jZSB0aGUgbWVyZ2UgYWxnb3JpdGhtIGlzIGNvbXBsZXRlZC4KICAgIAkJCWxldCBtZXJnZUluZGV4ID0gMDsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDE7IGkgPCB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQljb25zdCBwcmV2aW91c1JhbmdlID0gdXBkYXRlUmFuZ2VzWyBtZXJnZUluZGV4IF07CiAgICAJCQkJY29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTsKCiAgICAJCQkJLy8gV2UgYWRkIG9uZSBoZXJlIHRvIG1lcmdlIGFkamFjZW50IHJhbmdlcy4gVGhpcyBpcyBzYWZlIGJlY2F1c2UgcmFuZ2VzCiAgICAJCQkJLy8gb3BlcmF0ZSBvdmVyIHBvc2l0aXZlIGludGVnZXJzLgogICAgCQkJCWlmICggcmFuZ2Uuc3RhcnQgPD0gcHJldmlvdXNSYW5nZS5zdGFydCArIHByZXZpb3VzUmFuZ2UuY291bnQgKyAxICkgewoKICAgIAkJCQkJcHJldmlvdXNSYW5nZS5jb3VudCA9IE1hdGgubWF4KAogICAgCQkJCQkJcHJldmlvdXNSYW5nZS5jb3VudCwKICAgIAkJCQkJCXJhbmdlLnN0YXJ0ICsgcmFuZ2UuY291bnQgLSBwcmV2aW91c1JhbmdlLnN0YXJ0CiAgICAJCQkJCSk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQkrKyBtZXJnZUluZGV4OwogICAgCQkJCQl1cGRhdGVSYW5nZXNbIG1lcmdlSW5kZXggXSA9IHJhbmdlOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCS8vIFRyaW0gdGhlIGFycmF5IHRvIG9ubHkgY29udGFpbiB0aGUgbWVyZ2VkIHJhbmdlcy4KICAgIAkJCXVwZGF0ZVJhbmdlcy5sZW5ndGggPSBtZXJnZUluZGV4ICsgMTsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTsKCiAgICAJCQkJZ2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgcmFuZ2Uuc3RhcnQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCwKICAgIAkJCQkJYXJyYXksIHJhbmdlLnN0YXJ0LCByYW5nZS5jb3VudCApOwoKICAgIAkJCX0KCiAgICAJCQlhdHRyaWJ1dGUuY2xlYXJVcGRhdGVSYW5nZXMoKTsKCiAgICAJCX0KCiAgICAJCWF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7CgogICAgCX0KCiAgICAJLy8KCiAgICAJZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7CgogICAgCQlpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7CgogICAgCQlyZXR1cm4gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlbW92ZSggYXR0cmlidXRlICkgewoKICAgIAkJaWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhOwoKICAgIAkJY29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTsKCiAgICAJCWlmICggZGF0YSApIHsKCiAgICAJCQlnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7CgogICAgCQkJYnVmZmVycy5kZWxldGUoIGF0dHJpYnV0ZSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgewoKICAgIAkJaWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhOwoKICAgIAkJaWYgKCBhdHRyaWJ1dGUuaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHsKCiAgICAJCQljb25zdCBjYWNoZWQgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7CgogICAgCQkJaWYgKCAhIGNhY2hlZCB8fCBjYWNoZWQudmVyc2lvbiA8IGF0dHJpYnV0ZS52ZXJzaW9uICkgewoKICAgIAkJCQlidWZmZXJzLnNldCggYXR0cmlidXRlLCB7CiAgICAJCQkJCWJ1ZmZlcjogYXR0cmlidXRlLmJ1ZmZlciwKICAgIAkJCQkJdHlwZTogYXR0cmlidXRlLnR5cGUsCiAgICAJCQkJCWJ5dGVzUGVyRWxlbWVudDogYXR0cmlidXRlLmVsZW1lbnRTaXplLAogICAgCQkJCQl2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvbgogICAgCQkJCX0gKTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuOwoKICAgIAkJfQoKICAgIAkJY29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTsKCiAgICAJCWlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWJ1ZmZlcnMuc2V0KCBhdHRyaWJ1dGUsIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgKTsKCiAgICAJCX0gZWxzZSBpZiAoIGRhdGEudmVyc2lvbiA8IGF0dHJpYnV0ZS52ZXJzaW9uICkgewoKICAgIAkJCWlmICggZGF0YS5zaXplICE9PSBhdHRyaWJ1dGUuYXJyYXkuYnl0ZUxlbmd0aCApIHsKCiAgICAJCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBUaGUgc2l6ZSBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZVwncyBhcnJheSBidWZmZXIgZG9lcyBub3QgbWF0Y2ggdGhlIG9yaWdpbmFsIHNpemUuIFJlc2l6aW5nIGJ1ZmZlciBhdHRyaWJ1dGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyApOwoKICAgIAkJCX0KCiAgICAJCQl1cGRhdGVCdWZmZXIoIGRhdGEuYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKTsKCiAgICAJCQlkYXRhLnZlcnNpb24gPSBhdHRyaWJ1dGUudmVyc2lvbjsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlyZXR1cm4gewoKICAgIAkJZ2V0OiBnZXQsCiAgICAJCXJlbW92ZTogcmVtb3ZlLAogICAgCQl1cGRhdGU6IHVwZGF0ZQoKICAgIAl9OwoKICAgIH0KCiAgICB2YXIgYWxwaGFoYXNoX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFIQVNIXG5cdGlmICggZGlmZnVzZUNvbG9yLmEgPCBnZXRBbHBoYUhhc2hUaHJlc2hvbGQoIHZQb3NpdGlvbiApICkgZGlzY2FyZDtcbiNlbmRpZiI7CgogICAgdmFyIGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFIQVNIXG5cdGNvbnN0IGZsb2F0IEFMUEhBX0hBU0hfU0NBTEUgPSAwLjA1O1xuXHRmbG9hdCBoYXNoMkQoIHZlYzIgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGZyYWN0KCAxLjBlNCAqIHNpbiggMTcuMCAqIHZhbHVlLnggKyAwLjEgKiB2YWx1ZS55ICkgKiAoIDAuMSArIGFicyggc2luKCAxMy4wICogdmFsdWUueSArIHZhbHVlLnggKSApICkgKTtcblx0fVxuXHRmbG9hdCBoYXNoM0QoIHZlYzMgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGhhc2gyRCggdmVjMiggaGFzaDJEKCB2YWx1ZS54eSApLCB2YWx1ZS56ICkgKTtcblx0fVxuXHRmbG9hdCBnZXRBbHBoYUhhc2hUaHJlc2hvbGQoIHZlYzMgcG9zaXRpb24gKSB7XG5cdFx0ZmxvYXQgbWF4RGVyaXYgPSBtYXgoXG5cdFx0XHRsZW5ndGgoIGRGZHgoIHBvc2l0aW9uLnh5eiApICksXG5cdFx0XHRsZW5ndGgoIGRGZHkoIHBvc2l0aW9uLnh5eiApIClcblx0XHQpO1xuXHRcdGZsb2F0IHBpeFNjYWxlID0gMS4wIC8gKCBBTFBIQV9IQVNIX1NDQUxFICogbWF4RGVyaXYgKTtcblx0XHR2ZWMyIHBpeFNjYWxlcyA9IHZlYzIoXG5cdFx0XHRleHAyKCBmbG9vciggbG9nMiggcGl4U2NhbGUgKSApICksXG5cdFx0XHRleHAyKCBjZWlsKCBsb2cyKCBwaXhTY2FsZSApICkgKVxuXHRcdCk7XG5cdFx0dmVjMiBhbHBoYSA9IHZlYzIoXG5cdFx0XHRoYXNoM0QoIGZsb29yKCBwaXhTY2FsZXMueCAqIHBvc2l0aW9uLnh5eiApICksXG5cdFx0XHRoYXNoM0QoIGZsb29yKCBwaXhTY2FsZXMueSAqIHBvc2l0aW9uLnh5eiApIClcblx0XHQpO1xuXHRcdGZsb2F0IGxlcnBGYWN0b3IgPSBmcmFjdCggbG9nMiggcGl4U2NhbGUgKSApO1xuXHRcdGZsb2F0IHggPSAoIDEuMCAtIGxlcnBGYWN0b3IgKSAqIGFscGhhLnggKyBsZXJwRmFjdG9yICogYWxwaGEueTtcblx0XHRmbG9hdCBhID0gbWluKCBsZXJwRmFjdG9yLCAxLjAgLSBsZXJwRmFjdG9yICk7XG5cdFx0dmVjMyBjYXNlcyA9IHZlYzMoXG5cdFx0XHR4ICogeCAvICggMi4wICogYSAqICggMS4wIC0gYSApICksXG5cdFx0XHQoIHggLSAwLjUgKiBhICkgLyAoIDEuMCAtIGEgKSxcblx0XHRcdDEuMCAtICggKCAxLjAgLSB4ICkgKiAoIDEuMCAtIHggKSAvICggMi4wICogYSAqICggMS4wIC0gYSApICkgKVxuXHRcdCk7XG5cdFx0ZmxvYXQgdGhyZXNob2xkID0gKCB4IDwgKCAxLjAgLSBhICkgKVxuXHRcdFx0PyAoICggeCA8IGEgKSA/IGNhc2VzLnggOiBjYXNlcy55IClcblx0XHRcdDogY2FzZXMuejtcblx0XHRyZXR1cm4gY2xhbXAoIHRocmVzaG9sZCAsIDEuMGUtNiwgMS4wICk7XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIGFscGhhbWFwX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFNQVBcblx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdkFscGhhTWFwVXYgKS5nO1xuI2VuZGlmIjsKCiAgICB2YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0FMUEhBTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xuI2VuZGlmIjsKCiAgICB2YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFURVNUXG5cdCNpZmRlZiBBTFBIQV9UT19DT1ZFUkFHRVxuXHRkaWZmdXNlQ29sb3IuYSA9IHNtb290aHN0ZXAoIGFscGhhVGVzdCwgYWxwaGFUZXN0ICsgZndpZHRoKCBkaWZmdXNlQ29sb3IuYSApLCBkaWZmdXNlQ29sb3IuYSApO1xuXHRpZiAoIGRpZmZ1c2VDb2xvci5hID09IDAuMCApIGRpc2NhcmQ7XG5cdCNlbHNlXG5cdGlmICggZGlmZnVzZUNvbG9yLmEgPCBhbHBoYVRlc3QgKSBkaXNjYXJkO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgogICAgdmFyIGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFURVNUXG5cdHVuaWZvcm0gZmxvYXQgYWxwaGFUZXN0O1xuI2VuZGlmIjsKCiAgICB2YXIgYW9tYXBfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9BT01BUFxuXHRmbG9hdCBhbWJpZW50T2NjbHVzaW9uID0gKCB0ZXh0dXJlMkQoIGFvTWFwLCB2QW9NYXBVdiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcblx0I2lmIGRlZmluZWQoIFVTRV9DTEVBUkNPQVQgKSBcblx0XHRjbGVhcmNvYXRTcGVjdWxhckluZGlyZWN0ICo9IGFtYmllbnRPY2NsdXNpb247XG5cdCNlbmRpZlxuXHQjaWYgZGVmaW5lZCggVVNFX1NIRUVOICkgXG5cdFx0c2hlZW5TcGVjdWxhckluZGlyZWN0ICo9IGFtYmllbnRPY2NsdXNpb247XG5cdCNlbmRpZlxuXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFNUQU5EQVJEIClcblx0XHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIgKSApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwucm91Z2huZXNzICk7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0FPTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xuXHR1bmlmb3JtIGZsb2F0IGFvTWFwSW50ZW5zaXR5O1xuI2VuZGlmIjsKCiAgICB2YXIgYmF0Y2hpbmdfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9CQVRDSElOR1xuXHQjaWYgISBkZWZpbmVkKCBHTF9BTkdMRV9tdWx0aV9kcmF3IClcblx0I2RlZmluZSBnbF9EcmF3SUQgX2dsX0RyYXdJRFxuXHR1bmlmb3JtIGludCBfZ2xfRHJhd0lEO1xuXHQjZW5kaWZcblx0dW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgYmF0Y2hpbmdUZXh0dXJlO1xuXHR1bmlmb3JtIGhpZ2hwIHVzYW1wbGVyMkQgYmF0Y2hpbmdJZFRleHR1cmU7XG5cdG1hdDQgZ2V0QmF0Y2hpbmdNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XG5cdFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYmF0Y2hpbmdUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgaiA9IGludCggaSApICogNDtcblx0XHRpbnQgeCA9IGogJSBzaXplO1xuXHRcdGludCB5ID0gaiAvIHNpemU7XG5cdFx0dmVjNCB2MSA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApO1xuXHRcdHZlYzQgdjIgPSB0ZXhlbEZldGNoKCBiYXRjaGluZ1RleHR1cmUsIGl2ZWMyKCB4ICsgMSwgeSApLCAwICk7XG5cdFx0dmVjNCB2MyA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHggKyAyLCB5ICksIDAgKTtcblx0XHR2ZWM0IHY0ID0gdGV4ZWxGZXRjaCggYmF0Y2hpbmdUZXh0dXJlLCBpdmVjMiggeCArIDMsIHkgKSwgMCApO1xuXHRcdHJldHVybiBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xuXHR9XG5cdGZsb2F0IGdldEluZGlyZWN0SW5kZXgoIGNvbnN0IGluIGludCBpICkge1xuXHRcdGludCBzaXplID0gdGV4dHVyZVNpemUoIGJhdGNoaW5nSWRUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgeCA9IGkgJSBzaXplO1xuXHRcdGludCB5ID0gaSAvIHNpemU7XG5cdFx0cmV0dXJuIGZsb2F0KCB0ZXhlbEZldGNoKCBiYXRjaGluZ0lkVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApLnIgKTtcblx0fVxuI2VuZGlmXG4jaWZkZWYgVVNFX0JBVENISU5HX0NPTE9SXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGJhdGNoaW5nQ29sb3JUZXh0dXJlO1xuXHR2ZWMzIGdldEJhdGNoaW5nQ29sb3IoIGNvbnN0IGluIGZsb2F0IGkgKSB7XG5cdFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYmF0Y2hpbmdDb2xvclRleHR1cmUsIDAgKS54O1xuXHRcdGludCBqID0gaW50KCBpICk7XG5cdFx0aW50IHggPSBqICUgc2l6ZTtcblx0XHRpbnQgeSA9IGogLyBzaXplO1xuXHRcdHJldHVybiB0ZXhlbEZldGNoKCBiYXRjaGluZ0NvbG9yVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApLnJnYjtcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgYmF0Y2hpbmdfdmVydGV4ID0gIiNpZmRlZiBVU0VfQkFUQ0hJTkdcblx0bWF0NCBiYXRjaGluZ01hdHJpeCA9IGdldEJhdGNoaW5nTWF0cml4KCBnZXRJbmRpcmVjdEluZGV4KCBnbF9EcmF3SUQgKSApO1xuI2VuZGlmIjsKCiAgICB2YXIgYmVnaW5fdmVydGV4ID0gInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1xuI2lmZGVmIFVTRV9BTFBIQUhBU0hcblx0dlBvc2l0aW9uID0gdmVjMyggcG9zaXRpb24gKTtcbiNlbmRpZiI7CgogICAgdmFyIGJlZ2lubm9ybWFsX3ZlcnRleCA9ICJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xuI2lmZGVmIFVTRV9UQU5HRU5UXG5cdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XG4jZW5kaWYiOwoKICAgIHZhciBic2RmcyA9ICJmbG9hdCBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICkge1xuXHRyZXR1cm4gMC4yNTtcbn1cbmZsb2F0IERfQmxpbm5QaG9uZyggY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcblx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KCBkb3ROSCwgc2hpbmluZXNzICk7XG59XG52ZWMzIEJSREZfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MgKSB7XG5cdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XG5cdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcblx0ZmxvYXQgZG90VkggPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcblx0dmVjMyBGID0gRl9TY2hsaWNrKCBzcGVjdWxhckNvbG9yLCAxLjAsIGRvdFZIICk7XG5cdGZsb2F0IEcgPSBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICk7XG5cdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcblx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XG59IC8vIHZhbGlkYXRlZCI7CgogICAgdmFyIGlyaWRlc2NlbmNlX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0Vcblx0Y29uc3QgbWF0MyBYWVpfVE9fUkVDNzA5ID0gbWF0Myhcblx0XHQgMy4yNDA0NTQyLCAtMC45NjkyNjYwLCAgMC4wNTU2NDM0LFxuXHRcdC0xLjUzNzEzODUsICAxLjg3NjAxMDgsIC0wLjIwNDAyNTksXG5cdFx0LTAuNDk4NTMxNCwgIDAuMDQxNTU2MCwgIDEuMDU3MjI1MlxuXHQpO1xuXHR2ZWMzIEZyZXNuZWwwVG9Jb3IoIHZlYzMgZnJlc25lbDAgKSB7XG5cdFx0dmVjMyBzcXJ0RjAgPSBzcXJ0KCBmcmVzbmVsMCApO1xuXHRcdHJldHVybiAoIHZlYzMoIDEuMCApICsgc3FydEYwICkgLyAoIHZlYzMoIDEuMCApIC0gc3FydEYwICk7XG5cdH1cblx0dmVjMyBJb3JUb0ZyZXNuZWwwKCB2ZWMzIHRyYW5zbWl0dGVkSW9yLCBmbG9hdCBpbmNpZGVudElvciApIHtcblx0XHRyZXR1cm4gcG93MiggKCB0cmFuc21pdHRlZElvciAtIHZlYzMoIGluY2lkZW50SW9yICkgKSAvICggdHJhbnNtaXR0ZWRJb3IgKyB2ZWMzKCBpbmNpZGVudElvciApICkgKTtcblx0fVxuXHRmbG9hdCBJb3JUb0ZyZXNuZWwwKCBmbG9hdCB0cmFuc21pdHRlZElvciwgZmxvYXQgaW5jaWRlbnRJb3IgKSB7XG5cdFx0cmV0dXJuIHBvdzIoICggdHJhbnNtaXR0ZWRJb3IgLSBpbmNpZGVudElvciApIC8gKCB0cmFuc21pdHRlZElvciArIGluY2lkZW50SW9yICkpO1xuXHR9XG5cdHZlYzMgZXZhbFNlbnNpdGl2aXR5KCBmbG9hdCBPUEQsIHZlYzMgc2hpZnQgKSB7XG5cdFx0ZmxvYXQgcGhhc2UgPSAyLjAgKiBQSSAqIE9QRCAqIDEuMGUtOTtcblx0XHR2ZWMzIHZhbCA9IHZlYzMoIDUuNDg1NmUtMTMsIDQuNDIwMWUtMTMsIDUuMjQ4MWUtMTMgKTtcblx0XHR2ZWMzIHBvcyA9IHZlYzMoIDEuNjgxMGUrMDYsIDEuNzk1M2UrMDYsIDIuMjA4NGUrMDYgKTtcblx0XHR2ZWMzIHZhciA9IHZlYzMoIDQuMzI3OGUrMDksIDkuMzA0NmUrMDksIDYuNjEyMWUrMDkgKTtcblx0XHR2ZWMzIHh5eiA9IHZhbCAqIHNxcnQoIDIuMCAqIFBJICogdmFyICkgKiBjb3MoIHBvcyAqIHBoYXNlICsgc2hpZnQgKSAqIGV4cCggLSBwb3cyKCBwaGFzZSApICogdmFyICk7XG5cdFx0eHl6LnggKz0gOS43NDcwZS0xNCAqIHNxcnQoIDIuMCAqIFBJICogNC41MjgyZSswOSApICogY29zKCAyLjIzOTllKzA2ICogcGhhc2UgKyBzaGlmdFsgMCBdICkgKiBleHAoIC0gNC41MjgyZSswOSAqIHBvdzIoIHBoYXNlICkgKTtcblx0XHR4eXogLz0gMS4wNjg1ZS03O1xuXHRcdHZlYzMgcmdiID0gWFlaX1RPX1JFQzcwOSAqIHh5ejtcblx0XHRyZXR1cm4gcmdiO1xuXHR9XG5cdHZlYzMgZXZhbElyaWRlc2NlbmNlKCBmbG9hdCBvdXRzaWRlSU9SLCBmbG9hdCBldGEyLCBmbG9hdCBjb3NUaGV0YTEsIGZsb2F0IHRoaW5GaWxtVGhpY2tuZXNzLCB2ZWMzIGJhc2VGMCApIHtcblx0XHR2ZWMzIEk7XG5cdFx0ZmxvYXQgaXJpZGVzY2VuY2VJT1IgPSBtaXgoIG91dHNpZGVJT1IsIGV0YTIsIHNtb290aHN0ZXAoIDAuMCwgMC4wMywgdGhpbkZpbG1UaGlja25lc3MgKSApO1xuXHRcdGZsb2F0IHNpblRoZXRhMlNxID0gcG93Miggb3V0c2lkZUlPUiAvIGlyaWRlc2NlbmNlSU9SICkgKiAoIDEuMCAtIHBvdzIoIGNvc1RoZXRhMSApICk7XG5cdFx0ZmxvYXQgY29zVGhldGEyU3EgPSAxLjAgLSBzaW5UaGV0YTJTcTtcblx0XHRpZiAoIGNvc1RoZXRhMlNxIDwgMC4wICkge1xuXHRcdFx0cmV0dXJuIHZlYzMoIDEuMCApO1xuXHRcdH1cblx0XHRmbG9hdCBjb3NUaGV0YTIgPSBzcXJ0KCBjb3NUaGV0YTJTcSApO1xuXHRcdGZsb2F0IFIwID0gSW9yVG9GcmVzbmVsMCggaXJpZGVzY2VuY2VJT1IsIG91dHNpZGVJT1IgKTtcblx0XHRmbG9hdCBSMTIgPSBGX1NjaGxpY2soIFIwLCAxLjAsIGNvc1RoZXRhMSApO1xuXHRcdGZsb2F0IFQxMjEgPSAxLjAgLSBSMTI7XG5cdFx0ZmxvYXQgcGhpMTIgPSAwLjA7XG5cdFx0aWYgKCBpcmlkZXNjZW5jZUlPUiA8IG91dHNpZGVJT1IgKSBwaGkxMiA9IFBJO1xuXHRcdGZsb2F0IHBoaTIxID0gUEkgLSBwaGkxMjtcblx0XHR2ZWMzIGJhc2VJT1IgPSBGcmVzbmVsMFRvSW9yKCBjbGFtcCggYmFzZUYwLCAwLjAsIDAuOTk5OSApICk7XHRcdHZlYzMgUjEgPSBJb3JUb0ZyZXNuZWwwKCBiYXNlSU9SLCBpcmlkZXNjZW5jZUlPUiApO1xuXHRcdHZlYzMgUjIzID0gRl9TY2hsaWNrKCBSMSwgMS4wLCBjb3NUaGV0YTIgKTtcblx0XHR2ZWMzIHBoaTIzID0gdmVjMyggMC4wICk7XG5cdFx0aWYgKCBiYXNlSU9SWyAwIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAwIF0gPSBQSTtcblx0XHRpZiAoIGJhc2VJT1JbIDEgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDEgXSA9IFBJO1xuXHRcdGlmICggYmFzZUlPUlsgMiBdIDwgaXJpZGVzY2VuY2VJT1IgKSBwaGkyM1sgMiBdID0gUEk7XG5cdFx0ZmxvYXQgT1BEID0gMi4wICogaXJpZGVzY2VuY2VJT1IgKiB0aGluRmlsbVRoaWNrbmVzcyAqIGNvc1RoZXRhMjtcblx0XHR2ZWMzIHBoaSA9IHZlYzMoIHBoaTIxICkgKyBwaGkyMztcblx0XHR2ZWMzIFIxMjMgPSBjbGFtcCggUjEyICogUjIzLCAxZS01LCAwLjk5OTkgKTtcblx0XHR2ZWMzIHIxMjMgPSBzcXJ0KCBSMTIzICk7XG5cdFx0dmVjMyBScyA9IHBvdzIoIFQxMjEgKSAqIFIyMyAvICggdmVjMyggMS4wICkgLSBSMTIzICk7XG5cdFx0dmVjMyBDMCA9IFIxMiArIFJzO1xuXHRcdEkgPSBDMDtcblx0XHR2ZWMzIENtID0gUnMgLSBUMTIxO1xuXHRcdGZvciAoIGludCBtID0gMTsgbSA8PSAyOyArKyBtICkge1xuXHRcdFx0Q20gKj0gcjEyMztcblx0XHRcdHZlYzMgU20gPSAyLjAgKiBldmFsU2Vuc2l0aXZpdHkoIGZsb2F0KCBtICkgKiBPUEQsIGZsb2F0KCBtICkgKiBwaGkgKTtcblx0XHRcdEkgKz0gQ20gKiBTbTtcblx0XHR9XG5cdFx0cmV0dXJuIG1heCggSSwgdmVjMyggMC4wICkgKTtcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgYnVtcG1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQlVNUE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBidW1wTWFwO1xuXHR1bmlmb3JtIGZsb2F0IGJ1bXBTY2FsZTtcblx0dmVjMiBkSGR4eV9md2QoKSB7XG5cdFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZCdW1wTWFwVXYgKTtcblx0XHR2ZWMyIGRTVGR5ID0gZEZkeSggdkJ1bXBNYXBVdiApO1xuXHRcdGZsb2F0IEhsbCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdkJ1bXBNYXBVdiApLng7XG5cdFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2QnVtcE1hcFV2ICsgZFNUZHggKS54IC0gSGxsO1xuXHRcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdkJ1bXBNYXBVdiArIGRTVGR5ICkueCAtIEhsbDtcblx0XHRyZXR1cm4gdmVjMiggZEJ4LCBkQnkgKTtcblx0fVxuXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5LCBmbG9hdCBmYWNlRGlyZWN0aW9uICkge1xuXHRcdHZlYzMgdlNpZ21hWCA9IG5vcm1hbGl6ZSggZEZkeCggc3VyZl9wb3MueHl6ICkgKTtcblx0XHR2ZWMzIHZTaWdtYVkgPSBub3JtYWxpemUoIGRGZHkoIHN1cmZfcG9zLnh5eiApICk7XG5cdFx0dmVjMyB2TiA9IHN1cmZfbm9ybTtcblx0XHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XG5cdFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xuXHRcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICkgKiBmYWNlRGlyZWN0aW9uO1xuXHRcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xuXHRcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50ID0gIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxuXHR2ZWM0IHBsYW5lO1xuXHQjaWZkZWYgQUxQSEFfVE9fQ09WRVJBR0Vcblx0XHRmbG9hdCBkaXN0YW5jZVRvUGxhbmUsIGRpc3RhbmNlR3JhZGllbnQ7XG5cdFx0ZmxvYXQgY2xpcE9wYWNpdHkgPSAxLjA7XG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcblx0XHRcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcblx0XHRcdGRpc3RhbmNlVG9QbGFuZSA9IC0gZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSArIHBsYW5lLnc7XG5cdFx0XHRkaXN0YW5jZUdyYWRpZW50ID0gZndpZHRoKCBkaXN0YW5jZVRvUGxhbmUgKSAvIDIuMDtcblx0XHRcdGNsaXBPcGFjaXR5ICo9IHNtb290aHN0ZXAoIC0gZGlzdGFuY2VHcmFkaWVudCwgZGlzdGFuY2VHcmFkaWVudCwgZGlzdGFuY2VUb1BsYW5lICk7XG5cdFx0XHRpZiAoIGNsaXBPcGFjaXR5ID09IDAuMCApIGRpc2NhcmQ7XG5cdFx0fVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cdFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcblx0XHRcdGZsb2F0IHVuaW9uQ2xpcE9wYWNpdHkgPSAxLjA7XG5cdFx0XHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdFx0XHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XG5cdFx0XHRcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcblx0XHRcdFx0ZGlzdGFuY2VUb1BsYW5lID0gLSBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApICsgcGxhbmUudztcblx0XHRcdFx0ZGlzdGFuY2VHcmFkaWVudCA9IGZ3aWR0aCggZGlzdGFuY2VUb1BsYW5lICkgLyAyLjA7XG5cdFx0XHRcdHVuaW9uQ2xpcE9wYWNpdHkgKj0gMS4wIC0gc21vb3Roc3RlcCggLSBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZVRvUGxhbmUgKTtcblx0XHRcdH1cblx0XHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cdFx0XHRjbGlwT3BhY2l0eSAqPSAxLjAgLSB1bmlvbkNsaXBPcGFjaXR5O1xuXHRcdCNlbmRpZlxuXHRcdGRpZmZ1c2VDb2xvci5hICo9IGNsaXBPcGFjaXR5O1xuXHRcdGlmICggZGlmZnVzZUNvbG9yLmEgPT0gMC4wICkgZGlzY2FyZDtcblx0I2Vsc2Vcblx0XHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdFx0Zm9yICggaW50IGkgPSAwOyBpIDwgVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xuXHRcdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdFx0aWYgKCBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XG5cdFx0fVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cdFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcblx0XHRcdGJvb2wgY2xpcHBlZCA9IHRydWU7XG5cdFx0XHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XG5cdFx0XHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XG5cdFx0XHRcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcblx0XHRcdFx0Y2xpcHBlZCA9ICggZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xuXHRcdFx0fVxuXHRcdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblx0XHRcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XG5cdFx0I2VuZGlmXG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSAiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXG5cdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xuXHR1bmlmb3JtIHZlYzQgY2xpcHBpbmdQbGFuZXNbIE5VTV9DTElQUElOR19QTEFORVMgXTtcbiNlbmRpZiI7CgogICAgdmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCA9ICIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcblx0dmFyeWluZyB2ZWMzIHZDbGlwUG9zaXRpb247XG4jZW5kaWYiOwoKICAgIHZhciBjbGlwcGluZ19wbGFuZXNfdmVydGV4ID0gIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxuXHR2Q2xpcFBvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcbiNlbmRpZiI7CgogICAgdmFyIGNvbG9yX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXHRkaWZmdXNlQ29sb3IgKj0gdkNvbG9yO1xuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcblx0ZGlmZnVzZUNvbG9yLnJnYiAqPSB2Q29sb3I7XG4jZW5kaWYiOwoKICAgIHZhciBjb2xvcl9wYXJzX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXHR2YXJ5aW5nIHZlYzQgdkNvbG9yO1xuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcblx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcbiNlbmRpZiI7CgogICAgdmFyIGNvbG9yX3BhcnNfdmVydGV4ID0gIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXHR2YXJ5aW5nIHZlYzQgdkNvbG9yO1xuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0lOU1RBTkNJTkdfQ09MT1IgKSB8fCBkZWZpbmVkKCBVU0VfQkFUQ0hJTkdfQ09MT1IgKVxuXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuI2VuZGlmIjsKCiAgICB2YXIgY29sb3JfdmVydGV4ID0gIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxuXHR2Q29sb3IgPSB2ZWM0KCAxLjAgKTtcbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9JTlNUQU5DSU5HX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0JBVENISU5HX0NPTE9SIClcblx0dkNvbG9yID0gdmVjMyggMS4wICk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQ09MT1Jcblx0dkNvbG9yICo9IGNvbG9yO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdfQ09MT1Jcblx0dkNvbG9yLnh5eiAqPSBpbnN0YW5jZUNvbG9yLnh5ejtcbiNlbmRpZlxuI2lmZGVmIFVTRV9CQVRDSElOR19DT0xPUlxuXHR2ZWMzIGJhdGNoaW5nQ29sb3IgPSBnZXRCYXRjaGluZ0NvbG9yKCBnZXRJbmRpcmVjdEluZGV4KCBnbF9EcmF3SUQgKSApO1xuXHR2Q29sb3IueHl6ICo9IGJhdGNoaW5nQ29sb3IueHl6O1xuI2VuZGlmIjsKCiAgICB2YXIgY29tbW9uID0gIiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODk3OTNcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MTc5NTg2XG4jZGVmaW5lIFBJX0hBTEYgMS41NzA3OTYzMjY3OTQ4OTY2XG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxODM3OTA3XG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTQzMDkxODk1MzVcbiNkZWZpbmUgRVBTSUxPTiAxZS02XG4jaWZuZGVmIHNhdHVyYXRlXG4jZGVmaW5lIHNhdHVyYXRlKCBhICkgY2xhbXAoIGEsIDAuMCwgMS4wIClcbiNlbmRpZlxuI2RlZmluZSB3aGl0ZUNvbXBsZW1lbnQoIGEgKSAoIDEuMCAtIHNhdHVyYXRlKCBhICkgKVxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxudmVjMyBwb3cyKCBjb25zdCBpbiB2ZWMzIHggKSB7IHJldHVybiB4Kng7IH1cbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxuZmxvYXQgcG93NCggY29uc3QgaW4gZmxvYXQgeCApIHsgZmxvYXQgeDIgPSB4Kng7IHJldHVybiB4Mip4MjsgfVxuZmxvYXQgbWF4MyggY29uc3QgaW4gdmVjMyB2ICkgeyByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApOyB9XG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIHYgKSB7IHJldHVybiBkb3QoIHYsIHZlYzMoIDAuMzMzMzMzMyApICk7IH1cbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XG5cdGNvbnN0IGhpZ2hwIGZsb2F0IGEgPSAxMi45ODk4LCBiID0gNzguMjMzLCBjID0gNDM3NTguNTQ1Mztcblx0aGlnaHAgZmxvYXQgZHQgPSBkb3QoIHV2Lnh5LCB2ZWMyKCBhLGIgKSApLCBzbiA9IG1vZCggZHQsIFBJICk7XG5cdHJldHVybiBmcmFjdCggc2luKCBzbiApICogYyApO1xufVxuI2lmZGVmIEhJR0hfUFJFQ0lTSU9OXG5cdGZsb2F0IHByZWNpc2lvblNhZmVMZW5ndGgoIHZlYzMgdiApIHsgcmV0dXJuIGxlbmd0aCggdiApOyB9XG4jZWxzZVxuXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7XG5cdFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4MyggYWJzKCB2ICkgKTtcblx0XHRyZXR1cm4gbGVuZ3RoKCB2IC8gbWF4Q29tcG9uZW50ICkgKiBtYXhDb21wb25lbnQ7XG5cdH1cbiNlbmRpZlxuc3RydWN0IEluY2lkZW50TGlnaHQge1xuXHR2ZWMzIGNvbG9yO1xuXHR2ZWMzIGRpcmVjdGlvbjtcblx0Ym9vbCB2aXNpYmxlO1xufTtcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XG5cdHZlYzMgZGlyZWN0RGlmZnVzZTtcblx0dmVjMyBkaXJlY3RTcGVjdWxhcjtcblx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XG5cdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcbn07XG4jaWZkZWYgVVNFX0FMUEhBSEFTSFxuXHR2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO1xuI2VuZGlmXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xuXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcbn1cbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xuXHRyZXR1cm4gbm9ybWFsaXplKCAoIHZlYzQoIGRpciwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcbn1cbm1hdDMgdHJhbnNwb3NlTWF0MyggY29uc3QgaW4gbWF0MyBtICkge1xuXHRtYXQzIHRtcDtcblx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XG5cdHRtcFsgMSBdID0gdmVjMyggbVsgMCBdLnksIG1bIDEgXS55LCBtWyAyIF0ueSApO1xuXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcblx0cmV0dXJuIHRtcDtcbn1cbmJvb2wgaXNQZXJzcGVjdGl2ZU1hdHJpeCggbWF0NCBtICkge1xuXHRyZXR1cm4gbVsgMiBdWyAzIF0gPT0gLSAxLjA7XG59XG52ZWMyIGVxdWlyZWN0VXYoIGluIHZlYzMgZGlyICkge1xuXHRmbG9hdCB1ID0gYXRhbiggZGlyLnosIGRpci54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcblx0ZmxvYXQgdiA9IGFzaW4oIGNsYW1wKCBkaXIueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xuXHRyZXR1cm4gdmVjMiggdSwgdiApO1xufVxudmVjMyBCUkRGX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xuXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcbn1cbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xuXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtIDUuNTU0NzMgKiBkb3RWSCAtIDYuOTgzMTYgKSAqIGRvdFZIICk7XG5cdHJldHVybiBmMCAqICggMS4wIC0gZnJlc25lbCApICsgKCBmOTAgKiBmcmVzbmVsICk7XG59XG5mbG9hdCBGX1NjaGxpY2soIGNvbnN0IGluIGZsb2F0IGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xuXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtIDUuNTU0NzMgKiBkb3RWSCAtIDYuOTgzMTYgKSAqIGRvdFZIICk7XG5cdHJldHVybiBmMCAqICggMS4wIC0gZnJlc25lbCApICsgKCBmOTAgKiBmcmVzbmVsICk7XG59IC8vIHZhbGlkYXRlZCI7CgogICAgdmFyIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCA9ICIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXHQjZGVmaW5lIGN1YmVVVl9taW5NaXBMZXZlbCA0LjBcblx0I2RlZmluZSBjdWJlVVZfbWluVGlsZVNpemUgMTYuMFxuXHRmbG9hdCBnZXRGYWNlKCB2ZWMzIGRpcmVjdGlvbiApIHtcblx0XHR2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyggZGlyZWN0aW9uICk7XG5cdFx0ZmxvYXQgZmFjZSA9IC0gMS4wO1xuXHRcdGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueiApIHtcblx0XHRcdGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApXG5cdFx0XHRcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAuMCA6IDMuMDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkgKVxuXHRcdFx0XHRmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyLjAgOiA1LjA7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEuMCA6IDQuMDtcblx0XHR9XG5cdFx0cmV0dXJuIGZhY2U7XG5cdH1cblx0dmVjMiBnZXRVViggdmVjMyBkaXJlY3Rpb24sIGZsb2F0IGZhY2UgKSB7XG5cdFx0dmVjMiB1djtcblx0XHRpZiAoIGZhY2UgPT0gMC4wICkge1xuXHRcdFx0dXYgPSB2ZWMyKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcblx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDEuMCApIHtcblx0XHRcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgLSBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xuXHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMi4wICkge1xuXHRcdFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xuXHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkge1xuXHRcdFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApO1xuXHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNC4wICkge1xuXHRcdFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR1diA9IHZlYzIoIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCB1diArIDEuMCApO1xuXHR9XG5cdHZlYzMgYmlsaW5lYXJDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBtaXBJbnQgKSB7XG5cdFx0ZmxvYXQgZmFjZSA9IGdldEZhY2UoIGRpcmVjdGlvbiApO1xuXHRcdGZsb2F0IGZpbHRlckludCA9IG1heCggY3ViZVVWX21pbk1pcExldmVsIC0gbWlwSW50LCAwLjAgKTtcblx0XHRtaXBJbnQgPSBtYXgoIG1pcEludCwgY3ViZVVWX21pbk1pcExldmVsICk7XG5cdFx0ZmxvYXQgZmFjZVNpemUgPSBleHAyKCBtaXBJbnQgKTtcblx0XHRoaWdocCB2ZWMyIHV2ID0gZ2V0VVYoIGRpcmVjdGlvbiwgZmFjZSApICogKCBmYWNlU2l6ZSAtIDIuMCApICsgMS4wO1xuXHRcdGlmICggZmFjZSA+IDIuMCApIHtcblx0XHRcdHV2LnkgKz0gZmFjZVNpemU7XG5cdFx0XHRmYWNlIC09IDMuMDtcblx0XHR9XG5cdFx0dXYueCArPSBmYWNlICogZmFjZVNpemU7XG5cdFx0dXYueCArPSBmaWx0ZXJJbnQgKiAzLjAgKiBjdWJlVVZfbWluVGlsZVNpemU7XG5cdFx0dXYueSArPSA0LjAgKiAoIGV4cDIoIENVQkVVVl9NQVhfTUlQICkgLSBmYWNlU2l6ZSApO1xuXHRcdHV2LnggKj0gQ1VCRVVWX1RFWEVMX1dJRFRIO1xuXHRcdHV2LnkgKj0gQ1VCRVVWX1RFWEVMX0hFSUdIVDtcblx0XHQjaWZkZWYgdGV4dHVyZTJER3JhZEVYVFxuXHRcdFx0cmV0dXJuIHRleHR1cmUyREdyYWRFWFQoIGVudk1hcCwgdXYsIHZlYzIoIDAuMCApLCB2ZWMyKCAwLjAgKSApLnJnYjtcblx0XHQjZWxzZVxuXHRcdFx0cmV0dXJuIHRleHR1cmUyRCggZW52TWFwLCB1diApLnJnYjtcblx0XHQjZW5kaWZcblx0fVxuXHQjZGVmaW5lIGN1YmVVVl9yMCAxLjBcblx0I2RlZmluZSBjdWJlVVZfbTAgLSAyLjBcblx0I2RlZmluZSBjdWJlVVZfcjEgMC44XG5cdCNkZWZpbmUgY3ViZVVWX20xIC0gMS4wXG5cdCNkZWZpbmUgY3ViZVVWX3I0IDAuNFxuXHQjZGVmaW5lIGN1YmVVVl9tNCAyLjBcblx0I2RlZmluZSBjdWJlVVZfcjUgMC4zMDVcblx0I2RlZmluZSBjdWJlVVZfbTUgMy4wXG5cdCNkZWZpbmUgY3ViZVVWX3I2IDAuMjFcblx0I2RlZmluZSBjdWJlVVZfbTYgNC4wXG5cdGZsb2F0IHJvdWdobmVzc1RvTWlwKCBmbG9hdCByb3VnaG5lc3MgKSB7XG5cdFx0ZmxvYXQgbWlwID0gMC4wO1xuXHRcdGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yMSApIHtcblx0XHRcdG1pcCA9ICggY3ViZVVWX3IwIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tMSAtIGN1YmVVVl9tMCApIC8gKCBjdWJlVVZfcjAgLSBjdWJlVVZfcjEgKSArIGN1YmVVVl9tMDtcblx0XHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I0ICkge1xuXHRcdFx0bWlwID0gKCBjdWJlVVZfcjEgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX200IC0gY3ViZVVWX20xICkgLyAoIGN1YmVVVl9yMSAtIGN1YmVVVl9yNCApICsgY3ViZVVWX20xO1xuXHRcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjUgKSB7XG5cdFx0XHRtaXAgPSAoIGN1YmVVVl9yNCAtIHJvdWdobmVzcyApICogKCBjdWJlVVZfbTUgLSBjdWJlVVZfbTQgKSAvICggY3ViZVVWX3I0IC0gY3ViZVVWX3I1ICkgKyBjdWJlVVZfbTQ7XG5cdFx0fSBlbHNlIGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yNiApIHtcblx0XHRcdG1pcCA9ICggY3ViZVVWX3I1IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNiAtIGN1YmVVVl9tNSApIC8gKCBjdWJlVVZfcjUgLSBjdWJlVVZfcjYgKSArIGN1YmVVVl9tNTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWlwID0gLSAyLjAgKiBsb2cyKCAxLjE2ICogcm91Z2huZXNzICk7XHRcdH1cblx0XHRyZXR1cm4gbWlwO1xuXHR9XG5cdHZlYzQgdGV4dHVyZUN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBzYW1wbGVEaXIsIGZsb2F0IHJvdWdobmVzcyApIHtcblx0XHRmbG9hdCBtaXAgPSBjbGFtcCggcm91Z2huZXNzVG9NaXAoIHJvdWdobmVzcyApLCBjdWJlVVZfbTAsIENVQkVVVl9NQVhfTUlQICk7XG5cdFx0ZmxvYXQgbWlwRiA9IGZyYWN0KCBtaXAgKTtcblx0XHRmbG9hdCBtaXBJbnQgPSBmbG9vciggbWlwICk7XG5cdFx0dmVjMyBjb2xvcjAgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCApO1xuXHRcdGlmICggbWlwRiA9PSAwLjAgKSB7XG5cdFx0XHRyZXR1cm4gdmVjNCggY29sb3IwLCAxLjAgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmVjMyBjb2xvcjEgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCArIDEuMCApO1xuXHRcdFx0cmV0dXJuIHZlYzQoIG1peCggY29sb3IwLCBjb2xvcjEsIG1pcEYgKSwgMS4wICk7XG5cdFx0fVxuXHR9XG4jZW5kaWYiOwoKICAgIHZhciBkZWZhdWx0bm9ybWFsX3ZlcnRleCA9ICJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gb2JqZWN0Tm9ybWFsO1xuI2lmZGVmIFVTRV9UQU5HRU5UXG5cdHZlYzMgdHJhbnNmb3JtZWRUYW5nZW50ID0gb2JqZWN0VGFuZ2VudDtcbiNlbmRpZlxuI2lmZGVmIFVTRV9CQVRDSElOR1xuXHRtYXQzIGJtID0gbWF0MyggYmF0Y2hpbmdNYXRyaXggKTtcblx0dHJhbnNmb3JtZWROb3JtYWwgLz0gdmVjMyggZG90KCBibVsgMCBdLCBibVsgMCBdICksIGRvdCggYm1bIDEgXSwgYm1bIDEgXSApLCBkb3QoIGJtWyAyIF0sIGJtWyAyIF0gKSApO1xuXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IGJtICogdHJhbnNmb3JtZWROb3JtYWw7XG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdHRyYW5zZm9ybWVkVGFuZ2VudCA9IGJtICogdHJhbnNmb3JtZWRUYW5nZW50O1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HXG5cdG1hdDMgaW0gPSBtYXQzKCBpbnN0YW5jZU1hdHJpeCApO1xuXHR0cmFuc2Zvcm1lZE5vcm1hbCAvPSB2ZWMzKCBkb3QoIGltWyAwIF0sIGltWyAwIF0gKSwgZG90KCBpbVsgMSBdLCBpbVsgMSBdICksIGRvdCggaW1bIDIgXSwgaW1bIDIgXSApICk7XG5cdHRyYW5zZm9ybWVkTm9ybWFsID0gaW0gKiB0cmFuc2Zvcm1lZE5vcm1hbDtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gaW0gKiB0cmFuc2Zvcm1lZFRhbmdlbnQ7XG5cdCNlbmRpZlxuI2VuZGlmXG50cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIHRyYW5zZm9ybWVkTm9ybWFsO1xuI2lmZGVmIEZMSVBfU0lERURcblx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xuI2VuZGlmXG4jaWZkZWYgVVNFX1RBTkdFTlRcblx0dHJhbnNmb3JtZWRUYW5nZW50ID0gKCBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZFRhbmdlbnQsIDAuMCApICkueHl6O1xuXHQjaWZkZWYgRkxJUF9TSURFRFxuXHRcdHRyYW5zZm9ybWVkVGFuZ2VudCA9IC0gdHJhbnNmb3JtZWRUYW5nZW50O1xuXHQjZW5kaWZcbiNlbmRpZiI7CgogICAgdmFyIGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCA9ICIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXNwbGFjZW1lbnRNYXA7XG5cdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XG5cdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50QmlhcztcbiNlbmRpZiI7CgogICAgdmFyIGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcblx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICggdGV4dHVyZTJEKCBkaXNwbGFjZW1lbnRNYXAsIHZEaXNwbGFjZW1lbnRNYXBVdiApLnggKiBkaXNwbGFjZW1lbnRTY2FsZSArIGRpc3BsYWNlbWVudEJpYXMgKTtcbiNlbmRpZiI7CgogICAgdmFyIGVtaXNzaXZlbWFwX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcblx0dmVjNCBlbWlzc2l2ZUNvbG9yID0gdGV4dHVyZTJEKCBlbWlzc2l2ZU1hcCwgdkVtaXNzaXZlTWFwVXYgKTtcblx0I2lmZGVmIERFQ09ERV9WSURFT19URVhUVVJFX0VNSVNTSVZFXG5cdFx0ZW1pc3NpdmVDb2xvciA9IHNSR0JUcmFuc2ZlckVPVEYoIGVtaXNzaXZlQ29sb3IgKTtcblx0I2VuZGlmXG5cdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcbiNlbmRpZiI7CgogICAgdmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcbiNlbmRpZiI7CgogICAgdmFyIGNvbG9yc3BhY2VfZnJhZ21lbnQgPSAiZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7IjsKCiAgICB2YXIgY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50ID0gInZlYzQgTGluZWFyVHJhbnNmZXJPRVRGKCBpbiB2ZWM0IHZhbHVlICkge1xuXHRyZXR1cm4gdmFsdWU7XG59XG52ZWM0IHNSR0JUcmFuc2ZlckVPVEYoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHZhbHVlLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjA0MDQ1ICkgKSApICksIHZhbHVlLmEgKTtcbn1cbnZlYzQgc1JHQlRyYW5zZmVyT0VURiggaW4gdmVjNCB2YWx1ZSApIHtcblx0cmV0dXJuIHZlYzQoIG1peCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDAuNDE2NjYgKSApICogMS4wNTUgLSB2ZWMzKCAwLjA1NSApLCB2YWx1ZS5yZ2IgKiAxMi45MiwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjAwMzEzMDggKSApICkgKSwgdmFsdWUuYSApO1xufSI7CgogICAgdmFyIGVudm1hcF9mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0VOVk1BUFxuXHQjaWZkZWYgRU5WX1dPUkxEUE9TXG5cdFx0dmVjMyBjYW1lcmFUb0ZyYWc7XG5cdFx0aWYgKCBpc09ydGhvZ3JhcGhpYyApIHtcblx0XHRcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xuXHRcdH1cblx0XHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cdFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cblx0XHRcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIGNhbWVyYVRvRnJhZywgd29ybGROb3JtYWwgKTtcblx0XHQjZWxzZVxuXHRcdFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XG5cdFx0I2VuZGlmXG5cdCNlbHNlXG5cdFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XG5cdCNlbmRpZlxuXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxuXHRcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xuXHQjZWxzZVxuXHRcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcblx0I2VuZGlmXG5cdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcblx0XHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XG5cdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19NSVggKVxuXHRcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcblx0XHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xuXHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XG5cdHVuaWZvcm0gbWF0MyBlbnZNYXBSb3RhdGlvbjtcblx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcblx0XHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcblx0I2Vsc2Vcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XG5cdCNlbmRpZlxuXHRcbiNlbmRpZiI7CgogICAgdmFyIGVudm1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xuXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBMQU1CRVJUIClcblx0XHQjZGVmaW5lIEVOVl9XT1JMRFBPU1xuXHQjZW5kaWZcblx0I2lmZGVmIEVOVl9XT1JMRFBPU1xuXHRcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblx0XHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcblx0I2Vsc2Vcblx0XHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgZW52bWFwX3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIExBTUJFUlQgKVxuXHRcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXG5cdCNlbmRpZlxuXHQjaWZkZWYgRU5WX1dPUkxEUE9TXG5cdFx0XG5cdFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXHQjZWxzZVxuXHRcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcblx0XHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcblx0I2VuZGlmXG4jZW5kaWYiOwoKICAgIHZhciBlbnZtYXBfdmVydGV4ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdCNpZmRlZiBFTlZfV09STERQT1Ncblx0XHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xuXHQjZWxzZVxuXHRcdHZlYzMgY2FtZXJhVG9WZXJ0ZXg7XG5cdFx0aWYgKCBpc09ydGhvZ3JhcGhpYyApIHtcblx0XHRcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2ZWMzKCAtIHZpZXdNYXRyaXhbIDAgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDEgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDIgXVsgMiBdICkgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcblx0XHR9XG5cdFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cdFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cblx0XHRcdHZSZWZsZWN0ID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XG5cdFx0I2Vsc2Vcblx0XHRcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcblx0XHQjZW5kaWZcblx0I2VuZGlmXG4jZW5kaWYiOwoKICAgIHZhciBmb2dfdmVydGV4ID0gIiNpZmRlZiBVU0VfRk9HXG5cdHZGb2dEZXB0aCA9IC0gbXZQb3NpdGlvbi56O1xuI2VuZGlmIjsKCiAgICB2YXIgZm9nX3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfRk9HXG5cdHZhcnlpbmcgZmxvYXQgdkZvZ0RlcHRoO1xuI2VuZGlmIjsKCiAgICB2YXIgZm9nX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfRk9HXG5cdCNpZmRlZiBGT0dfRVhQMlxuXHRcdGZsb2F0IGZvZ0ZhY3RvciA9IDEuMCAtIGV4cCggLSBmb2dEZW5zaXR5ICogZm9nRGVuc2l0eSAqIHZGb2dEZXB0aCAqIHZGb2dEZXB0aCApO1xuXHQjZWxzZVxuXHRcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgdkZvZ0RlcHRoICk7XG5cdCNlbmRpZlxuXHRnbF9GcmFnQ29sb3IucmdiID0gbWl4KCBnbF9GcmFnQ29sb3IucmdiLCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XG4jZW5kaWYiOwoKICAgIHZhciBmb2dfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0ZPR1xuXHR1bmlmb3JtIHZlYzMgZm9nQ29sb3I7XG5cdHZhcnlpbmcgZmxvYXQgdkZvZ0RlcHRoO1xuXHQjaWZkZWYgRk9HX0VYUDJcblx0XHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XG5cdCNlbHNlXG5cdFx0dW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xuXHRcdHVuaWZvcm0gZmxvYXQgZm9nRmFyO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgogICAgdmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9HUkFESUVOVE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBncmFkaWVudE1hcDtcbiNlbmRpZlxudmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xuXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xuXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xuXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXG5cdFx0cmV0dXJuIHZlYzMoIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkuciApO1xuXHQjZWxzZVxuXHRcdHZlYzIgZncgPSBmd2lkdGgoIGNvb3JkICkgKiAwLjU7XG5cdFx0cmV0dXJuIG1peCggdmVjMyggMC43ICksIHZlYzMoIDEuMCApLCBzbW9vdGhzdGVwKCAwLjcgLSBmdy54LCAwLjcgKyBmdy54LCBjb29yZC54ICkgKTtcblx0I2VuZGlmXG59IjsKCiAgICB2YXIgbGlnaHRtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0xJR0hUTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGxpZ2h0TWFwO1xuXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xuI2VuZGlmIjsKCiAgICB2YXIgbGlnaHRzX2xhbWJlcnRfZnJhZ21lbnQgPSAiTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsO1xubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoOyI7CgogICAgdmFyIGxpZ2h0c19sYW1iZXJ0X3BhcnNfZnJhZ21lbnQgPSAidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5zdHJ1Y3QgTGFtYmVydE1hdGVyaWFsIHtcblx0dmVjMyBkaWZmdXNlQ29sb3I7XG5cdGZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XG59O1xudm9pZCBSRV9EaXJlY3RfTGFtYmVydCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcblx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbn1cbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xufVxuI2RlZmluZSBSRV9EaXJlY3RcdFx0XHRcdFJFX0RpcmVjdF9MYW1iZXJ0XG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVx0XHRSRV9JbmRpcmVjdERpZmZ1c2VfTGFtYmVydCI7CgogICAgdmFyIGxpZ2h0c19wYXJzX2JlZ2luID0gInVuaWZvcm0gYm9vbCByZWNlaXZlU2hhZG93O1xudW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xuI2lmIGRlZmluZWQoIFVTRV9MSUdIVF9QUk9CRVMgKVxuXHR1bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xuI2VuZGlmXG52ZWMzIHNoR2V0SXJyYWRpYW5jZUF0KCBpbiB2ZWMzIG5vcm1hbCwgaW4gdmVjMyBzaENvZWZmaWNpZW50c1sgOSBdICkge1xuXHRmbG9hdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXHR2ZWMzIHJlc3VsdCA9IHNoQ29lZmZpY2llbnRzWyAwIF0gKiAwLjg4NjIyNztcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAxIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHk7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6O1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA0IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB5O1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDUgXSAqIDIuMCAqIDAuNDI5MDQzICogeSAqIHo7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA3IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB6O1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDggXSAqIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICk7XG5cdHJldHVybiByZXN1bHQ7XG59XG52ZWMzIGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGxpZ2h0UHJvYmVbIDkgXSwgY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XG5cdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcblx0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBsaWdodFByb2JlICk7XG5cdHJldHVybiBpcnJhZGlhbmNlO1xufVxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xuXHR2ZWMzIGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcblx0cmV0dXJuIGlycmFkaWFuY2U7XG59XG5mbG9hdCBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcblx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xuXHRpZiAoIGN1dG9mZkRpc3RhbmNlID4gMC4wICkge1xuXHRcdGRpc3RhbmNlRmFsbG9mZiAqPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xuXHR9XG5cdHJldHVybiBkaXN0YW5jZUZhbGxvZmY7XG59XG5mbG9hdCBnZXRTcG90QXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IGNvbmVDb3NpbmUsIGNvbnN0IGluIGZsb2F0IHBlbnVtYnJhQ29zaW5lLCBjb25zdCBpbiBmbG9hdCBhbmdsZUNvc2luZSApIHtcblx0cmV0dXJuIHNtb290aHN0ZXAoIGNvbmVDb3NpbmUsIHBlbnVtYnJhQ29zaW5lLCBhbmdsZUNvc2luZSApO1xufVxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxuXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XG5cdFx0dmVjMyBkaXJlY3Rpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0fTtcblx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xuXHR2b2lkIGdldERpcmVjdGlvbmFsTGlnaHRJbmZvKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIG91dCBJbmNpZGVudExpZ2h0IGxpZ2h0ICkge1xuXHRcdGxpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcblx0XHRsaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcblx0XHRsaWdodC52aXNpYmxlID0gdHJ1ZTtcblx0fVxuI2VuZGlmXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcblx0c3RydWN0IFBvaW50TGlnaHQge1xuXHRcdHZlYzMgcG9zaXRpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0XHRmbG9hdCBkaXN0YW5jZTtcblx0XHRmbG9hdCBkZWNheTtcblx0fTtcblx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XG5cdHZvaWQgZ2V0UG9pbnRMaWdodEluZm8oIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBvdXQgSW5jaWRlbnRMaWdodCBsaWdodCApIHtcblx0XHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnlQb3NpdGlvbjtcblx0XHRsaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcblx0XHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XG5cdFx0bGlnaHQuY29sb3IgPSBwb2ludExpZ2h0LmNvbG9yO1xuXHRcdGxpZ2h0LmNvbG9yICo9IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIGxpZ2h0RGlzdGFuY2UsIHBvaW50TGlnaHQuZGlzdGFuY2UsIHBvaW50TGlnaHQuZGVjYXkgKTtcblx0XHRsaWdodC52aXNpYmxlID0gKCBsaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xuXHR9XG4jZW5kaWZcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXG5cdHN0cnVjdCBTcG90TGlnaHQge1xuXHRcdHZlYzMgcG9zaXRpb247XG5cdFx0dmVjMyBkaXJlY3Rpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0XHRmbG9hdCBkaXN0YW5jZTtcblx0XHRmbG9hdCBkZWNheTtcblx0XHRmbG9hdCBjb25lQ29zO1xuXHRcdGZsb2F0IHBlbnVtYnJhQ29zO1xuXHR9O1xuXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcblx0dm9pZCBnZXRTcG90TGlnaHRJbmZvKCBjb25zdCBpbiBTcG90TGlnaHQgc3BvdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIG91dCBJbmNpZGVudExpZ2h0IGxpZ2h0ICkge1xuXHRcdHZlYzMgbFZlY3RvciA9IHNwb3RMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5UG9zaXRpb247XG5cdFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XG5cdFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGxpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xuXHRcdGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbiggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcblx0XHRpZiAoIHNwb3RBdHRlbnVhdGlvbiA+IDAuMCApIHtcblx0XHRcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcblx0XHRcdGxpZ2h0LmNvbG9yID0gc3BvdExpZ2h0LmNvbG9yICogc3BvdEF0dGVudWF0aW9uO1xuXHRcdFx0bGlnaHQuY29sb3IgKj0gZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcblx0XHRcdGxpZ2h0LnZpc2libGUgPSAoIGxpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XG5cdFx0XHRsaWdodC52aXNpYmxlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG4jZW5kaWZcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcblx0c3RydWN0IFJlY3RBcmVhTGlnaHQge1xuXHRcdHZlYzMgY29sb3I7XG5cdFx0dmVjMyBwb3NpdGlvbjtcblx0XHR2ZWMzIGhhbGZXaWR0aDtcblx0XHR2ZWMzIGhhbGZIZWlnaHQ7XG5cdH07XG5cdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18xO1x0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XG5cdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcbiNlbmRpZlxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcblx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XG5cdFx0dmVjMyBkaXJlY3Rpb247XG5cdFx0dmVjMyBza3lDb2xvcjtcblx0XHR2ZWMzIGdyb3VuZENvbG9yO1xuXHR9O1xuXHR1bmlmb3JtIEhlbWlzcGhlcmVMaWdodCBoZW1pc3BoZXJlTGlnaHRzWyBOVU1fSEVNSV9MSUdIVFMgXTtcblx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcblx0XHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XG5cdFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcblx0XHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xuXHRcdHJldHVybiBpcnJhZGlhbmNlO1xuXHR9XG4jZW5kaWYiOwoKICAgIHZhciBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0VOVk1BUFxuXHR2ZWMzIGdldElCTElycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xuXHRcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cdFx0XHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cdFx0XHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHdvcmxkTm9ybWFsLCAxLjAgKTtcblx0XHRcdHJldHVybiBQSSAqIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcblx0XHQjZWxzZVxuXHRcdFx0cmV0dXJuIHZlYzMoIDAuMCApO1xuXHRcdCNlbmRpZlxuXHR9XG5cdHZlYzMgZ2V0SUJMUmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcblx0XHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXHRcdFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggLSB2aWV3RGlyLCBub3JtYWwgKTtcblx0XHRcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XG5cdFx0XHRyZWZsZWN0VmVjID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggcmVmbGVjdFZlYywgdmlld01hdHJpeCApO1xuXHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgZW52TWFwUm90YXRpb24gKiByZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcblx0XHRcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XG5cdFx0I2Vsc2Vcblx0XHRcdHJldHVybiB2ZWMzKCAwLjAgKTtcblx0XHQjZW5kaWZcblx0fVxuXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlcblx0XHR2ZWMzIGdldElCTEFuaXNvdHJvcHlSYWRpYW5jZSggY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiB2ZWMzIGJpdGFuZ2VudCwgY29uc3QgaW4gZmxvYXQgYW5pc290cm9weSApIHtcblx0XHRcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cdFx0XHRcdHZlYzMgYmVudE5vcm1hbCA9IGNyb3NzKCBiaXRhbmdlbnQsIHZpZXdEaXIgKTtcblx0XHRcdFx0YmVudE5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGJlbnROb3JtYWwsIGJpdGFuZ2VudCApICk7XG5cdFx0XHRcdGJlbnROb3JtYWwgPSBub3JtYWxpemUoIG1peCggYmVudE5vcm1hbCwgbm9ybWFsLCBwb3cyKCBwb3cyKCAxLjAgLSBhbmlzb3Ryb3B5ICogKCAxLjAgLSByb3VnaG5lc3MgKSApICkgKSApO1xuXHRcdFx0XHRyZXR1cm4gZ2V0SUJMUmFkaWFuY2UoIHZpZXdEaXIsIGJlbnROb3JtYWwsIHJvdWdobmVzcyApO1xuXHRcdFx0I2Vsc2Vcblx0XHRcdFx0cmV0dXJuIHZlYzMoIDAuMCApO1xuXHRcdFx0I2VuZGlmXG5cdFx0fVxuXHQjZW5kaWZcbiNlbmRpZiI7CgogICAgdmFyIGxpZ2h0c190b29uX2ZyYWdtZW50ID0gIlRvb25NYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7IjsKCiAgICB2YXIgbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCA9ICJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbnN0cnVjdCBUb29uTWF0ZXJpYWwge1xuXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcbn07XG52b2lkIFJFX0RpcmVjdF9Ub29uKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xufVxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfVG9vbiggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG59XG4jZGVmaW5lIFJFX0RpcmVjdFx0XHRcdFx0UkVfRGlyZWN0X1Rvb25cbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXHRcdFJFX0luZGlyZWN0RGlmZnVzZV9Ub29uIjsKCiAgICB2YXIgbGlnaHRzX3Bob25nX2ZyYWdtZW50ID0gIkJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XG5tYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyA9IHNoaW5pbmVzcztcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoOyI7CgogICAgdmFyIGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50ID0gInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XG5cdHZlYzMgZGlmZnVzZUNvbG9yO1xuXHR2ZWMzIHNwZWN1bGFyQ29sb3I7XG5cdGZsb2F0IHNwZWN1bGFyU2hpbmluZXNzO1xuXHRmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xufTtcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlOb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XG5cdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XG59XG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbn1cbiNkZWZpbmUgUkVfRGlyZWN0XHRcdFx0XHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcdFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmciOwoKICAgIHZhciBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQgPSAiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIDEuMCAtIG1ldGFsbmVzc0ZhY3RvciApO1xudmVjMyBkeHkgPSBtYXgoIGFicyggZEZkeCggbm9uUGVydHVyYmVkTm9ybWFsICkgKSwgYWJzKCBkRmR5KCBub25QZXJ0dXJiZWROb3JtYWwgKSApICk7XG5mbG9hdCBnZW9tZXRyeVJvdWdobmVzcyA9IG1heCggbWF4KCBkeHkueCwgZHh5LnkgKSwgZHh5LnogKTtcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1heCggcm91Z2huZXNzRmFjdG9yLCAwLjA1MjUgKTttYXRlcmlhbC5yb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XG5tYXRlcmlhbC5yb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLnJvdWdobmVzcywgMS4wICk7XG4jaWZkZWYgSU9SXG5cdG1hdGVyaWFsLmlvciA9IGlvcjtcblx0I2lmZGVmIFVTRV9TUEVDVUxBUlxuXHRcdGZsb2F0IHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yID0gc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0dmVjMyBzcGVjdWxhckNvbG9yRmFjdG9yID0gc3BlY3VsYXJDb2xvcjtcblx0XHQjaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXG5cdFx0XHRzcGVjdWxhckNvbG9yRmFjdG9yICo9IHRleHR1cmUyRCggc3BlY3VsYXJDb2xvck1hcCwgdlNwZWN1bGFyQ29sb3JNYXBVdiApLnJnYjtcblx0XHQjZW5kaWZcblx0XHQjaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgKj0gdGV4dHVyZTJEKCBzcGVjdWxhckludGVuc2l0eU1hcCwgdlNwZWN1bGFySW50ZW5zaXR5TWFwVXYgKS5hO1xuXHRcdCNlbmRpZlxuXHRcdG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gbWl4KCBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgMS4wLCBtZXRhbG5lc3NGYWN0b3IgKTtcblx0I2Vsc2Vcblx0XHRmbG9hdCBzcGVjdWxhckludGVuc2l0eUZhY3RvciA9IDEuMDtcblx0XHR2ZWMzIHNwZWN1bGFyQ29sb3JGYWN0b3IgPSB2ZWMzKCAxLjAgKTtcblx0XHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IDEuMDtcblx0I2VuZGlmXG5cdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIG1pbiggcG93MiggKCBtYXRlcmlhbC5pb3IgLSAxLjAgKSAvICggbWF0ZXJpYWwuaW9yICsgMS4wICkgKSAqIHNwZWN1bGFyQ29sb3JGYWN0b3IsIHZlYzMoIDEuMCApICkgKiBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XG4jZWxzZVxuXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCAwLjA0ICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xuXHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IDEuMDtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcblx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gY2xlYXJjb2F0O1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBjbGVhcmNvYXRSb3VnaG5lc3M7XG5cdG1hdGVyaWFsLmNsZWFyY29hdEYwID0gdmVjMyggMC4wNCApO1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRGOTAgPSAxLjA7XG5cdCNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXG5cdFx0bWF0ZXJpYWwuY2xlYXJjb2F0ICo9IHRleHR1cmUyRCggY2xlYXJjb2F0TWFwLCB2Q2xlYXJjb2F0TWFwVXYgKS54O1xuXHQjZW5kaWZcblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXG5cdFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICo9IHRleHR1cmUyRCggY2xlYXJjb2F0Um91Z2huZXNzTWFwLCB2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgKS55O1xuXHQjZW5kaWZcblx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmNsZWFyY29hdCApO1x0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWF4KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDAuMDUyNSApO1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XG5cdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAxLjAgKTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9ESVNQRVJTSU9OXG5cdG1hdGVyaWFsLmRpc3BlcnNpb24gPSBkaXNwZXJzaW9uO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gaXJpZGVzY2VuY2U7XG5cdG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SID0gaXJpZGVzY2VuY2VJT1I7XG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VNQVBcblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZSAqPSB0ZXh0dXJlMkQoIGlyaWRlc2NlbmNlTWFwLCB2SXJpZGVzY2VuY2VNYXBVdiApLnI7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxuXHRcdG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID0gKGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bSAtIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bSkgKiB0ZXh0dXJlMkQoIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLCB2SXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdiApLmcgKyBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XG5cdCNlbHNlXG5cdFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MgPSBpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW07XG5cdCNlbmRpZlxuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOXG5cdG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBzaGVlbkNvbG9yO1xuXHQjaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXG5cdFx0bWF0ZXJpYWwuc2hlZW5Db2xvciAqPSB0ZXh0dXJlMkQoIHNoZWVuQ29sb3JNYXAsIHZTaGVlbkNvbG9yTWFwVXYgKS5yZ2I7XG5cdCNlbmRpZlxuXHRtYXRlcmlhbC5zaGVlblJvdWdobmVzcyA9IGNsYW1wKCBzaGVlblJvdWdobmVzcywgMC4wNywgMS4wICk7XG5cdCNpZmRlZiBVU0VfU0hFRU5fUk9VR0hORVNTTUFQXG5cdFx0bWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKj0gdGV4dHVyZTJEKCBzaGVlblJvdWdobmVzc01hcCwgdlNoZWVuUm91Z2huZXNzTWFwVXYgKS5hO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9BTklTT1RST1BZXG5cdCNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxuXHRcdG1hdDIgYW5pc290cm9weU1hdCA9IG1hdDIoIGFuaXNvdHJvcHlWZWN0b3IueCwgYW5pc290cm9weVZlY3Rvci55LCAtIGFuaXNvdHJvcHlWZWN0b3IueSwgYW5pc290cm9weVZlY3Rvci54ICk7XG5cdFx0dmVjMyBhbmlzb3Ryb3B5UG9sYXIgPSB0ZXh0dXJlMkQoIGFuaXNvdHJvcHlNYXAsIHZBbmlzb3Ryb3B5TWFwVXYgKS5yZ2I7XG5cdFx0dmVjMiBhbmlzb3Ryb3B5ViA9IGFuaXNvdHJvcHlNYXQgKiBub3JtYWxpemUoIDIuMCAqIGFuaXNvdHJvcHlQb2xhci5yZyAtIHZlYzIoIDEuMCApICkgKiBhbmlzb3Ryb3B5UG9sYXIuYjtcblx0I2Vsc2Vcblx0XHR2ZWMyIGFuaXNvdHJvcHlWID0gYW5pc290cm9weVZlY3Rvcjtcblx0I2VuZGlmXG5cdG1hdGVyaWFsLmFuaXNvdHJvcHkgPSBsZW5ndGgoIGFuaXNvdHJvcHlWICk7XG5cdGlmKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID09IDAuMCApIHtcblx0XHRhbmlzb3Ryb3B5ViA9IHZlYzIoIDEuMCwgMC4wICk7XG5cdH0gZWxzZSB7XG5cdFx0YW5pc290cm9weVYgLz0gbWF0ZXJpYWwuYW5pc290cm9weTtcblx0XHRtYXRlcmlhbC5hbmlzb3Ryb3B5ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKTtcblx0fVxuXHRtYXRlcmlhbC5hbHBoYVQgPSBtaXgoIHBvdzIoIG1hdGVyaWFsLnJvdWdobmVzcyApLCAxLjAsIHBvdzIoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKSApO1xuXHRtYXRlcmlhbC5hbmlzb3Ryb3B5VCA9IHRiblsgMCBdICogYW5pc290cm9weVYueCArIHRiblsgMSBdICogYW5pc290cm9weVYueTtcblx0bWF0ZXJpYWwuYW5pc290cm9weUIgPSB0Ym5bIDEgXSAqIGFuaXNvdHJvcHlWLnggLSB0Ym5bIDAgXSAqIGFuaXNvdHJvcHlWLnk7XG4jZW5kaWYiOwoKICAgIHZhciBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9ICJzdHJ1Y3QgUGh5c2ljYWxNYXRlcmlhbCB7XG5cdHZlYzMgZGlmZnVzZUNvbG9yO1xuXHRmbG9hdCByb3VnaG5lc3M7XG5cdHZlYzMgc3BlY3VsYXJDb2xvcjtcblx0ZmxvYXQgc3BlY3VsYXJGOTA7XG5cdGZsb2F0IGRpc3BlcnNpb247XG5cdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cdFx0ZmxvYXQgY2xlYXJjb2F0O1xuXHRcdGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcblx0XHR2ZWMzIGNsZWFyY29hdEYwO1xuXHRcdGZsb2F0IGNsZWFyY29hdEY5MDtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0Vcblx0XHRmbG9hdCBpcmlkZXNjZW5jZTtcblx0XHRmbG9hdCBpcmlkZXNjZW5jZUlPUjtcblx0XHRmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzcztcblx0XHR2ZWMzIGlyaWRlc2NlbmNlRnJlc25lbDtcblx0XHR2ZWMzIGlyaWRlc2NlbmNlRjA7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX1NIRUVOXG5cdFx0dmVjMyBzaGVlbkNvbG9yO1xuXHRcdGZsb2F0IHNoZWVuUm91Z2huZXNzO1xuXHQjZW5kaWZcblx0I2lmZGVmIElPUlxuXHRcdGZsb2F0IGlvcjtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXG5cdFx0ZmxvYXQgdHJhbnNtaXNzaW9uO1xuXHRcdGZsb2F0IHRyYW5zbWlzc2lvbkFscGhhO1xuXHRcdGZsb2F0IHRoaWNrbmVzcztcblx0XHRmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdHZlYzMgYXR0ZW51YXRpb25Db2xvcjtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXHRcdGZsb2F0IGFuaXNvdHJvcHk7XG5cdFx0ZmxvYXQgYWxwaGFUO1xuXHRcdHZlYzMgYW5pc290cm9weVQ7XG5cdFx0dmVjMyBhbmlzb3Ryb3B5Qjtcblx0I2VuZGlmXG59O1xudmVjMyBjbGVhcmNvYXRTcGVjdWxhckRpcmVjdCA9IHZlYzMoIDAuMCApO1xudmVjMyBjbGVhcmNvYXRTcGVjdWxhckluZGlyZWN0ID0gdmVjMyggMC4wICk7XG52ZWMzIHNoZWVuU3BlY3VsYXJEaXJlY3QgPSB2ZWMzKCAwLjAgKTtcbnZlYzMgc2hlZW5TcGVjdWxhckluZGlyZWN0ID0gdmVjMygwLjAgKTtcbnZlYzMgU2NobGlja190b19GMCggY29uc3QgaW4gdmVjMyBmLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xuICAgIGZsb2F0IHggPSBjbGFtcCggMS4wIC0gZG90VkgsIDAuMCwgMS4wICk7XG4gICAgZmxvYXQgeDIgPSB4ICogeDtcbiAgICBmbG9hdCB4NSA9IGNsYW1wKCB4ICogeDIgKiB4MiwgMC4wLCAwLjk5OTkgKTtcbiAgICByZXR1cm4gKCBmIC0gdmVjMyggZjkwICkgKiB4NSApIC8gKCAxLjAgLSB4NSApO1xufVxuZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICkge1xuXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XG5cdGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcblx0ZmxvYXQgZ2wgPSBkb3ROViAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xuXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XG59XG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xuXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XG5cdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcblx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XG59XG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlcblx0ZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkX0FuaXNvdHJvcGljKCBjb25zdCBpbiBmbG9hdCBhbHBoYVQsIGNvbnN0IGluIGZsb2F0IGFscGhhQiwgY29uc3QgaW4gZmxvYXQgZG90VFYsIGNvbnN0IGluIGZsb2F0IGRvdEJWLCBjb25zdCBpbiBmbG9hdCBkb3RUTCwgY29uc3QgaW4gZmxvYXQgZG90QkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBkb3ROTCApIHtcblx0XHRmbG9hdCBndiA9IGRvdE5MICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUViwgYWxwaGFCICogZG90QlYsIGRvdE5WICkgKTtcblx0XHRmbG9hdCBnbCA9IGRvdE5WICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUTCwgYWxwaGFCICogZG90QkwsIGRvdE5MICkgKTtcblx0XHRmbG9hdCB2ID0gMC41IC8gKCBndiArIGdsICk7XG5cdFx0cmV0dXJuIHNhdHVyYXRlKHYpO1xuXHR9XG5cdGZsb2F0IERfR0dYX0FuaXNvdHJvcGljKCBjb25zdCBpbiBmbG9hdCBhbHBoYVQsIGNvbnN0IGluIGZsb2F0IGFscGhhQiwgY29uc3QgaW4gZmxvYXQgZG90TkgsIGNvbnN0IGluIGZsb2F0IGRvdFRILCBjb25zdCBpbiBmbG9hdCBkb3RCSCApIHtcblx0XHRmbG9hdCBhMiA9IGFscGhhVCAqIGFscGhhQjtcblx0XHRoaWdocCB2ZWMzIHYgPSB2ZWMzKCBhbHBoYUIgKiBkb3RUSCwgYWxwaGFUICogZG90QkgsIGEyICogZG90TkggKTtcblx0XHRoaWdocCBmbG9hdCB2MiA9IGRvdCggdiwgdiApO1xuXHRcdGZsb2F0IHcyID0gYTIgLyB2Mjtcblx0XHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyICogcG93MiAoIHcyICk7XG5cdH1cbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcblx0dmVjMyBCUkRGX0dHWF9DbGVhcmNvYXQoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwpIHtcblx0XHR2ZWMzIGYwID0gbWF0ZXJpYWwuY2xlYXJjb2F0RjA7XG5cdFx0ZmxvYXQgZjkwID0gbWF0ZXJpYWwuY2xlYXJjb2F0RjkwO1xuXHRcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcztcblx0XHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xuXHRcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XG5cdFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcblx0XHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xuXHRcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XG5cdFx0dmVjMyBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xuXHRcdGZsb2F0IFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcblx0XHRmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xuXHRcdHJldHVybiBGICogKCBWICogRCApO1xuXHR9XG4jZW5kaWZcbnZlYzMgQlJERl9HR1goIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwgKSB7XG5cdHZlYzMgZjAgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yO1xuXHRmbG9hdCBmOTAgPSBtYXRlcmlhbC5zcGVjdWxhckY5MDtcblx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xuXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xuXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcblx0ZmxvYXQgZG90VkggPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcblx0dmVjMyBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xuXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cdFx0RiA9IG1peCggRiwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCBtYXRlcmlhbC5pcmlkZXNjZW5jZSApO1xuXHQjZW5kaWZcblx0I2lmZGVmIFVTRV9BTklTT1RST1BZXG5cdFx0ZmxvYXQgZG90VEwgPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlULCBsaWdodERpciApO1xuXHRcdGZsb2F0IGRvdFRWID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5VCwgdmlld0RpciApO1xuXHRcdGZsb2F0IGRvdFRIID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5VCwgaGFsZkRpciApO1xuXHRcdGZsb2F0IGRvdEJMID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5QiwgbGlnaHREaXIgKTtcblx0XHRmbG9hdCBkb3RCViA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weUIsIHZpZXdEaXIgKTtcblx0XHRmbG9hdCBkb3RCSCA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weUIsIGhhbGZEaXIgKTtcblx0XHRmbG9hdCBWID0gVl9HR1hfU21pdGhDb3JyZWxhdGVkX0FuaXNvdHJvcGljKCBtYXRlcmlhbC5hbHBoYVQsIGFscGhhLCBkb3RUViwgZG90QlYsIGRvdFRMLCBkb3RCTCwgZG90TlYsIGRvdE5MICk7XG5cdFx0ZmxvYXQgRCA9IERfR0dYX0FuaXNvdHJvcGljKCBtYXRlcmlhbC5hbHBoYVQsIGFscGhhLCBkb3ROSCwgZG90VEgsIGRvdEJIICk7XG5cdCNlbHNlXG5cdFx0ZmxvYXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xuXHRcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XG5cdCNlbmRpZlxuXHRyZXR1cm4gRiAqICggViAqIEQgKTtcbn1cbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRjb25zdCBmbG9hdCBMVVRfU0laRSA9IDY0LjA7XG5cdGNvbnN0IGZsb2F0IExVVF9TQ0FMRSA9ICggTFVUX1NJWkUgLSAxLjAgKSAvIExVVF9TSVpFO1xuXHRjb25zdCBmbG9hdCBMVVRfQklBUyA9IDAuNSAvIExVVF9TSVpFO1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xuXHR2ZWMyIHV2ID0gdmVjMiggcm91Z2huZXNzLCBzcXJ0KCAxLjAgLSBkb3ROViApICk7XG5cdHV2ID0gdXYgKiBMVVRfU0NBTEUgKyBMVVRfQklBUztcblx0cmV0dXJuIHV2O1xufVxuZmxvYXQgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIGYgKSB7XG5cdGZsb2F0IGwgPSBsZW5ndGgoIGYgKTtcblx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xufVxudmVjMyBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgdjEsIGNvbnN0IGluIHZlYzMgdjIgKSB7XG5cdGZsb2F0IHggPSBkb3QoIHYxLCB2MiApO1xuXHRmbG9hdCB5ID0gYWJzKCB4ICk7XG5cdGZsb2F0IGEgPSAwLjg1NDM5ODUgKyAoIDAuNDk2NTE1NSArIDAuMDE0NTIwNiAqIHkgKSAqIHk7XG5cdGZsb2F0IGIgPSAzLjQxNzU5NDAgKyAoIDQuMTYxNjcyNCArIHkgKSAqIHk7XG5cdGZsb2F0IHYgPSBhIC8gYjtcblx0ZmxvYXQgdGhldGFfc2ludGhldGEgPSAoIHggPiAwLjAgKSA/IHYgOiAwLjUgKiBpbnZlcnNlc3FydCggbWF4KCAxLjAgLSB4ICogeCwgMWUtNyApICkgLSB2O1xuXHRyZXR1cm4gY3Jvc3MoIHYxLCB2MiApICogdGhldGFfc2ludGhldGE7XG59XG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcblx0dmVjMyB2MSA9IHJlY3RDb29yZHNbIDEgXSAtIHJlY3RDb29yZHNbIDAgXTtcblx0dmVjMyB2MiA9IHJlY3RDb29yZHNbIDMgXSAtIHJlY3RDb29yZHNbIDAgXTtcblx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcblx0aWYoIGRvdCggbGlnaHROb3JtYWwsIFAgLSByZWN0Q29vcmRzWyAwIF0gKSA8IDAuMCApIHJldHVybiB2ZWMzKCAwLjAgKTtcblx0dmVjMyBUMSwgVDI7XG5cdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XG5cdFQyID0gLSBjcm9zcyggTiwgVDEgKTtcblx0bWF0MyBtYXQgPSBtSW52ICogdHJhbnNwb3NlTWF0MyggbWF0MyggVDEsIFQyLCBOICkgKTtcblx0dmVjMyBjb29yZHNbIDQgXTtcblx0Y29vcmRzWyAwIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDAgXSAtIFAgKTtcblx0Y29vcmRzWyAxIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDEgXSAtIFAgKTtcblx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcblx0Y29vcmRzWyAzIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDMgXSAtIFAgKTtcblx0Y29vcmRzWyAwIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMCBdICk7XG5cdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xuXHRjb29yZHNbIDIgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAyIF0gKTtcblx0Y29vcmRzWyAzIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMyBdICk7XG5cdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xuXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAwIF0sIGNvb3Jkc1sgMSBdICk7XG5cdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDEgXSwgY29vcmRzWyAyIF0gKTtcblx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xuXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAzIF0sIGNvb3Jkc1sgMCBdICk7XG5cdGZsb2F0IHJlc3VsdCA9IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggdmVjdG9yRm9ybUZhY3RvciApO1xuXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XG59XG4jaWYgZGVmaW5lZCggVVNFX1NIRUVOIClcbmZsb2F0IERfQ2hhcmxpZSggZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBkb3ROSCApIHtcblx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcblx0ZmxvYXQgaW52QWxwaGEgPSAxLjAgLyBhbHBoYTtcblx0ZmxvYXQgY29zMmggPSBkb3ROSCAqIGRvdE5IO1xuXHRmbG9hdCBzaW4yaCA9IG1heCggMS4wIC0gY29zMmgsIDAuMDA3ODEyNSApO1xuXHRyZXR1cm4gKCAyLjAgKyBpbnZBbHBoYSApICogcG93KCBzaW4yaCwgaW52QWxwaGEgKiAwLjUgKSAvICggMi4wICogUEkgKTtcbn1cbmZsb2F0IFZfTmV1YmVsdCggZmxvYXQgZG90TlYsIGZsb2F0IGRvdE5MICkge1xuXHRyZXR1cm4gc2F0dXJhdGUoIDEuMCAvICggNC4wICogKCBkb3ROTCArIGRvdE5WIC0gZG90TkwgKiBkb3ROViApICkgKTtcbn1cbnZlYzMgQlJERl9TaGVlbiggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgdmVjMyBzaGVlbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGVlblJvdWdobmVzcyApIHtcblx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcblx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xuXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XG5cdGZsb2F0IEQgPSBEX0NoYXJsaWUoIHNoZWVuUm91Z2huZXNzLCBkb3ROSCApO1xuXHRmbG9hdCBWID0gVl9OZXViZWx0KCBkb3ROViwgZG90TkwgKTtcblx0cmV0dXJuIHNoZWVuQ29sb3IgKiAoIEQgKiBWICk7XG59XG4jZW5kaWZcbmZsb2F0IElCTFNoZWVuQlJERiggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdGZsb2F0IHIyID0gcm91Z2huZXNzICogcm91Z2huZXNzO1xuXHRmbG9hdCBhID0gcm91Z2huZXNzIDwgMC4yNSA/IC0zMzkuMiAqIHIyICsgMTYxLjQgKiByb3VnaG5lc3MgLSAyNS45IDogLTguNDggKiByMiArIDE0LjMgKiByb3VnaG5lc3MgLSA5Ljk1O1xuXHRmbG9hdCBiID0gcm91Z2huZXNzIDwgMC4yNSA/IDQ0LjAgKiByMiAtIDIzLjcgKiByb3VnaG5lc3MgKyAzLjI2IDogMS45NyAqIHIyIC0gMy4yNyAqIHJvdWdobmVzcyArIDAuNzI7XG5cdGZsb2F0IERHID0gZXhwKCBhICogZG90TlYgKyBiICkgKyAoIHJvdWdobmVzcyA8IDAuMjUgPyAwLjAgOiAwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSApO1xuXHRyZXR1cm4gc2F0dXJhdGUoIERHICogUkVDSVBST0NBTF9QSSApO1xufVxudmVjMiBERkdBcHByb3goIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcblx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xuXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcblx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XG5cdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XG5cdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xuXHR2ZWMyIGZhYiA9IHZlYzIoIC0gMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XG5cdHJldHVybiBmYWI7XG59XG52ZWMzIEVudmlyb25tZW50QlJERiggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcblx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XG59XG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFXG52b2lkIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgaXJpZGVzY2VuY2UsIGNvbnN0IGluIHZlYzMgaXJpZGVzY2VuY2VGMCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xuI2Vsc2VcbnZvaWQgY29tcHV0ZU11bHRpc2NhdHRlcmluZyggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xuI2VuZGlmXG5cdHZlYzIgZmFiID0gREZHQXBwcm94KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xuXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cdFx0dmVjMyBGciA9IG1peCggc3BlY3VsYXJDb2xvciwgaXJpZGVzY2VuY2VGMCwgaXJpZGVzY2VuY2UgKTtcblx0I2Vsc2Vcblx0XHR2ZWMzIEZyID0gc3BlY3VsYXJDb2xvcjtcblx0I2VuZGlmXG5cdHZlYzMgRnNzRXNzID0gRnIgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XG5cdGZsb2F0IEVzcyA9IGZhYi54ICsgZmFiLnk7XG5cdGZsb2F0IEVtcyA9IDEuMCAtIEVzcztcblx0dmVjMyBGYXZnID0gRnIgKyAoIDEuMCAtIEZyICkgKiAwLjA0NzYxOTtcdHZlYzMgRm1zID0gRnNzRXNzICogRmF2ZyAvICggMS4wIC0gRW1zICogRmF2ZyApO1xuXHRzaW5nbGVTY2F0dGVyICs9IEZzc0Vzcztcblx0bXVsdGlTY2F0dGVyICs9IEZtcyAqIEVtcztcbn1cbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcblx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cdFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeU5vcm1hbDtcblx0XHR2ZWMzIHZpZXdEaXIgPSBnZW9tZXRyeVZpZXdEaXI7XG5cdFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5UG9zaXRpb247XG5cdFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XG5cdFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcblx0XHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XG5cdFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcblx0XHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5yb3VnaG5lc3M7XG5cdFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XG5cdFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1x0XHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XG5cdFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xuXHRcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcblx0XHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xuXHRcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xuXHRcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xuXHRcdG1hdDMgbUludiA9IG1hdDMoXG5cdFx0XHR2ZWMzKCB0MS54LCAwLCB0MS55ICksXG5cdFx0XHR2ZWMzKCAgICAwLCAxLCAgICAwICksXG5cdFx0XHR2ZWMzKCB0MS56LCAwLCB0MS53IClcblx0XHQpO1xuXHRcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xuXHR9XG4jZW5kaWZcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcblx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcblx0XHRmbG9hdCBkb3ROTGNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XG5cdFx0dmVjMyBjY0lycmFkaWFuY2UgPSBkb3ROTGNjICogZGlyZWN0TGlnaHQuY29sb3I7XG5cdFx0Y2xlYXJjb2F0U3BlY3VsYXJEaXJlY3QgKz0gY2NJcnJhZGlhbmNlICogQlJERl9HR1hfQ2xlYXJjb2F0KCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsICk7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX1NIRUVOXG5cdFx0c2hlZW5TcGVjdWxhckRpcmVjdCArPSBpcnJhZGlhbmNlICogQlJERl9TaGVlbiggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5zaGVlbkNvbG9yLCBtYXRlcmlhbC5zaGVlblJvdWdobmVzcyApO1xuXHQjZW5kaWZcblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlOb3JtYWwsIG1hdGVyaWFsICk7XG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG59XG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xufVxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XG5cdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cdFx0Y2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCArPSBjbGVhcmNvYXRSYWRpYW5jZSAqIEVudmlyb25tZW50QlJERiggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuY2xlYXJjb2F0RjAsIG1hdGVyaWFsLmNsZWFyY29hdEY5MCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX1NIRUVOXG5cdFx0c2hlZW5TcGVjdWxhckluZGlyZWN0ICs9IGlycmFkaWFuY2UgKiBtYXRlcmlhbC5zaGVlbkNvbG9yICogSUJMU2hlZW5CUkRGKCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBtYXRlcmlhbC5zaGVlblJvdWdobmVzcyApO1xuXHQjZW5kaWZcblx0dmVjMyBzaW5nbGVTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XG5cdHZlYzMgbXVsdGlTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XG5cdHZlYzMgY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlID0gaXJyYWRpYW5jZSAqIFJFQ0lQUk9DQUxfUEk7XG5cdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0Vcblx0XHRjb21wdXRlTXVsdGlzY2F0dGVyaW5nSXJpZGVzY2VuY2UoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5pcmlkZXNjZW5jZSwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCBtYXRlcmlhbC5yb3VnaG5lc3MsIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZyApO1xuXHQjZWxzZVxuXHRcdGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MsIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZyApO1xuXHQjZW5kaWZcblx0dmVjMyB0b3RhbFNjYXR0ZXJpbmcgPSBzaW5nbGVTY2F0dGVyaW5nICsgbXVsdGlTY2F0dGVyaW5nO1xuXHR2ZWMzIGRpZmZ1c2UgPSBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiAoIDEuMCAtIG1heCggbWF4KCB0b3RhbFNjYXR0ZXJpbmcuciwgdG90YWxTY2F0dGVyaW5nLmcgKSwgdG90YWxTY2F0dGVyaW5nLmIgKSApO1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IHJhZGlhbmNlICogc2luZ2xlU2NhdHRlcmluZztcblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBkaWZmdXNlICogY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlO1xufVxuI2RlZmluZSBSRV9EaXJlY3RcdFx0XHRcdFJFX0RpcmVjdF9QaHlzaWNhbFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcdFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVx0XHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclx0XHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XG5cdHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XG59IjsKCiAgICB2YXIgbGlnaHRzX2ZyYWdtZW50X2JlZ2luID0gIlxudmVjMyBnZW9tZXRyeVBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xudmVjMyBnZW9tZXRyeU5vcm1hbCA9IG5vcm1hbDtcbnZlYzMgZ2VvbWV0cnlWaWV3RGlyID0gKCBpc09ydGhvZ3JhcGhpYyApID8gdmVjMyggMCwgMCwgMSApIDogbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XG52ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsID0gdmVjMyggMC4wICk7XG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxuXHRnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCA9IGNsZWFyY29hdE5vcm1hbDtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRVxuXHRmbG9hdCBkb3ROVmkgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGdlb21ldHJ5Vmlld0RpciApICk7XG5cdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MgPT0gMC4wICkge1xuXHRcdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gMC4wO1xuXHR9IGVsc2Uge1xuXHRcdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gc2F0dXJhdGUoIG1hdGVyaWFsLmlyaWRlc2NlbmNlICk7XG5cdH1cblx0aWYgKCBtYXRlcmlhbC5pcmlkZXNjZW5jZSA+IDAuMCApIHtcblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwgPSBldmFsSXJpZGVzY2VuY2UoIDEuMCwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VJT1IsIGRvdE5WaSwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcblx0XHRtYXRlcmlhbC5pcmlkZXNjZW5jZUYwID0gU2NobGlja190b19GMCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCAxLjAsIGRvdE5WaSApO1xuXHR9XG4jZW5kaWZcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXG5cdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcblx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcblx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93O1xuXHQjZW5kaWZcblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xuXHRcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xuXHRcdGdldFBvaW50TGlnaHRJbmZvKCBwb2ludExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBkaXJlY3RMaWdodCApO1xuXHRcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgKVxuXHRcdHBvaW50TGlnaHRTaGFkb3cgPSBwb2ludExpZ2h0U2hhZG93c1sgaSBdO1xuXHRcdGRpcmVjdExpZ2h0LmNvbG9yICo9ICggZGlyZWN0TGlnaHQudmlzaWJsZSAmJiByZWNlaXZlU2hhZG93ICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xuXHRcdCNlbmRpZlxuXHRcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblx0fVxuXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuI2VuZGlmXG4jaWYgKCBOVU1fU1BPVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcblx0U3BvdExpZ2h0IHNwb3RMaWdodDtcblx0dmVjNCBzcG90Q29sb3I7XG5cdHZlYzMgc3BvdExpZ2h0Q29vcmQ7XG5cdGJvb2wgaW5TcG90TGlnaHRNYXA7XG5cdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcblx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvdztcblx0I2VuZGlmXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xuXHRcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcblx0XHRnZXRTcG90TGlnaHRJbmZvKCBzcG90TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGRpcmVjdExpZ2h0ICk7XG5cdFx0I2lmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcblx0XHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIFVOUk9MTEVEX0xPT1BfSU5ERVhcblx0XHQjZWxpZiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcblx0XHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIE5VTV9TUE9UX0xJR0hUX01BUFNcblx0XHQjZWxzZVxuXHRcdCNkZWZpbmUgU1BPVF9MSUdIVF9NQVBfSU5ERVggKCBVTlJPTExFRF9MT09QX0lOREVYIC0gTlVNX1NQT1RfTElHSFRfU0hBRE9XUyArIE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcblx0XHQjZW5kaWZcblx0XHQjaWYgKCBTUE9UX0xJR0hUX01BUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX01BUFMgKVxuXHRcdFx0c3BvdExpZ2h0Q29vcmQgPSB2U3BvdExpZ2h0Q29vcmRbIGkgXS54eXogLyB2U3BvdExpZ2h0Q29vcmRbIGkgXS53O1xuXHRcdFx0aW5TcG90TGlnaHRNYXAgPSBhbGwoIGxlc3NUaGFuKCBhYnMoIHNwb3RMaWdodENvb3JkICogMi4gLSAxLiApLCB2ZWMzKCAxLjAgKSApICk7XG5cdFx0XHRzcG90Q29sb3IgPSB0ZXh0dXJlMkQoIHNwb3RMaWdodE1hcFsgU1BPVF9MSUdIVF9NQVBfSU5ERVggXSwgc3BvdExpZ2h0Q29vcmQueHkgKTtcblx0XHRcdGRpcmVjdExpZ2h0LmNvbG9yID0gaW5TcG90TGlnaHRNYXAgPyBkaXJlY3RMaWdodC5jb2xvciAqIHNwb3RDb2xvci5yZ2IgOiBkaXJlY3RMaWdodC5jb2xvcjtcblx0XHQjZW5kaWZcblx0XHQjdW5kZWYgU1BPVF9MSUdIVF9NQVBfSU5ERVhcblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxuXHRcdHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcblx0XHRkaXJlY3RMaWdodC5jb2xvciAqPSAoIGRpcmVjdExpZ2h0LnZpc2libGUgJiYgcmVjZWl2ZVNoYWRvdyApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93SW50ZW5zaXR5LCBzcG90TGlnaHRTaGFkb3cuc2hhZG93Qmlhcywgc3BvdExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlNwb3RMaWdodENvb3JkWyBpIF0gKSA6IDEuMDtcblx0XHQjZW5kaWZcblx0XHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcbiNlbmRpZlxuI2lmICggTlVNX0RJUl9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcblx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xuXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcblx0RGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0U2hhZG93O1xuXHQjZW5kaWZcblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcblx0XHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcblx0XHRnZXREaXJlY3Rpb25hbExpZ2h0SW5mbyggZGlyZWN0aW9uYWxMaWdodCwgZGlyZWN0TGlnaHQgKTtcblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXG5cdFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gKCBkaXJlY3RMaWdodC52aXNpYmxlICYmIHJlY2VpdmVTaGFkb3cgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xuXHRcdCNlbmRpZlxuXHRcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblx0fVxuXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuI2VuZGlmXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxuXHRSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQ7XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XG5cdFx0cmVjdEFyZWFMaWdodCA9IHJlY3RBcmVhTGlnaHRzWyBpIF07XG5cdFx0UkVfRGlyZWN0X1JlY3RBcmVhKCByZWN0QXJlYUxpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcbiNlbmRpZlxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXG5cdHZlYzMgaWJsSXJyYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xuXHQjaWYgZGVmaW5lZCggVVNFX0xJR0hUX1BST0JFUyApXG5cdFx0aXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggbGlnaHRQcm9iZSwgZ2VvbWV0cnlOb3JtYWwgKTtcblx0I2VuZGlmXG5cdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0XHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XG5cdFx0XHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnlOb3JtYWwgKTtcblx0XHR9XG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblx0I2VuZGlmXG4jZW5kaWZcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcblx0dmVjMyByYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIGNsZWFyY29hdFJhZGlhbmNlID0gdmVjMyggMC4wICk7XG4jZW5kaWYiOwoKICAgIHZhciBsaWdodHNfZnJhZ21lbnRfbWFwcyA9ICIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcblx0I2lmZGVmIFVTRV9MSUdIVE1BUFxuXHRcdHZlYzQgbGlnaHRNYXBUZXhlbCA9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZMaWdodE1hcFV2ICk7XG5cdFx0dmVjMyBsaWdodE1hcElycmFkaWFuY2UgPSBsaWdodE1hcFRleGVsLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xuXHRcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xuXHQjZW5kaWZcblx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxuXHRcdGlibElycmFkaWFuY2UgKz0gZ2V0SUJMSXJyYWRpYW5jZSggZ2VvbWV0cnlOb3JtYWwgKTtcblx0I2VuZGlmXG4jZW5kaWZcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXG5cdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxuXHRcdHJhZGlhbmNlICs9IGdldElCTEFuaXNvdHJvcHlSYWRpYW5jZSggZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwucm91Z2huZXNzLCBtYXRlcmlhbC5hbmlzb3Ryb3B5QiwgbWF0ZXJpYWwuYW5pc290cm9weSApO1xuXHQjZWxzZVxuXHRcdHJhZGlhbmNlICs9IGdldElCTFJhZGlhbmNlKCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cdFx0Y2xlYXJjb2F0UmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgogICAgdmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSAiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXG5cdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuI2VuZGlmXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXG5cdFJFX0luZGlyZWN0U3BlY3VsYXIoIHJhZGlhbmNlLCBpYmxJcnJhZGlhbmNlLCBjbGVhcmNvYXRSYWRpYW5jZSwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuI2VuZGlmIjsKCiAgICB2YXIgbG9nZGVwdGhidWZfZnJhZ21lbnQgPSAiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApXG5cdGdsX0ZyYWdEZXB0aCA9IHZJc1BlcnNwZWN0aXZlID09IDAuMCA/IGdsX0ZyYWdDb29yZC56IDogbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcbiNlbmRpZiI7CgogICAgdmFyIGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQgPSAiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApXG5cdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcblx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xuXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xuI2VuZGlmIjsKCiAgICB2YXIgbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxuXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XG5cdHZhcnlpbmcgZmxvYXQgdklzUGVyc3BlY3RpdmU7XG4jZW5kaWYiOwoKICAgIHZhciBsb2dkZXB0aGJ1Zl92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxuXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcblx0dklzUGVyc3BlY3RpdmUgPSBmbG9hdCggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICk7XG4jZW5kaWYiOwoKICAgIHZhciBtYXBfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9NQVBcblx0dmVjNCBzYW1wbGVkRGlmZnVzZUNvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZNYXBVdiApO1xuXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVcblx0XHRzYW1wbGVkRGlmZnVzZUNvbG9yID0gc1JHQlRyYW5zZmVyRU9URiggc2FtcGxlZERpZmZ1c2VDb2xvciApO1xuXHQjZW5kaWZcblx0ZGlmZnVzZUNvbG9yICo9IHNhbXBsZWREaWZmdXNlQ29sb3I7XG4jZW5kaWYiOwoKICAgIHZhciBtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX01BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XG4jZW5kaWYiOwoKICAgIHZhciBtYXBfcGFydGljbGVfZnJhZ21lbnQgPSAiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxuXHQjaWYgZGVmaW5lZCggVVNFX1BPSU5UU19VViApXG5cdFx0dmVjMiB1diA9IHZVdjtcblx0I2Vsc2Vcblx0XHR2ZWMyIHV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIGdsX1BvaW50Q29vcmQueCwgMS4wIC0gZ2xfUG9pbnRDb29yZC55LCAxICkgKS54eTtcblx0I2VuZGlmXG4jZW5kaWZcbiNpZmRlZiBVU0VfTUFQXG5cdGRpZmZ1c2VDb2xvciAqPSB0ZXh0dXJlMkQoIG1hcCwgdXYgKTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9BTFBIQU1BUFxuXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB1diApLmc7XG4jZW5kaWYiOwoKICAgIHZhciBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCA9ICIjaWYgZGVmaW5lZCggVVNFX1BPSU5UU19VViApXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG4jZWxzZVxuXHQjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApXG5cdFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9NQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xuI2VuZGlmIjsKCiAgICB2YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXG5cdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdk1ldGFsbmVzc01hcFV2ICk7XG5cdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xuI2VuZGlmIjsKCiAgICB2YXIgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xuI2VuZGlmIjsKCiAgICB2YXIgbW9ycGhpbnN0YW5jZV92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9JTlNUQU5DSU5HX01PUlBIXG5cdGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XG5cdGZsb2F0IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZSA9IHRleGVsRmV0Y2goIG1vcnBoVGV4dHVyZSwgaXZlYzIoIDAsIGdsX0luc3RhbmNlSUQgKSwgMCApLnI7XG5cdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcblx0XHRtb3JwaFRhcmdldEluZmx1ZW5jZXNbaV0gPSAgdGV4ZWxGZXRjaCggbW9ycGhUZXh0dXJlLCBpdmVjMiggaSArIDEsIGdsX0luc3RhbmNlSUQgKSwgMCApLnI7XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIG1vcnBoY29sb3JfdmVydGV4ID0gIiNpZiBkZWZpbmVkKCBVU0VfTU9SUEhDT0xPUlMgKVxuXHR2Q29sb3IgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XG5cdFx0I2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xuXHRcdCNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKS5yZ2IgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcblx0XHQjZW5kaWZcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgbW9ycGhub3JtYWxfdmVydGV4ID0gIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXG5cdG9iamVjdE5vcm1hbCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XG5cdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcblx0XHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIG9iamVjdE5vcm1hbCArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDEgKS54eXogKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcblx0I2lmbmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSFxuXHRcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xuXHRcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBNT1JQSFRBUkdFVFNfQ09VTlQgXTtcblx0I2VuZGlmXG5cdHVuaWZvcm0gc2FtcGxlcjJEQXJyYXkgbW9ycGhUYXJnZXRzVGV4dHVyZTtcblx0dW5pZm9ybSBpdmVjMiBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZTtcblx0dmVjNCBnZXRNb3JwaCggY29uc3QgaW4gaW50IHZlcnRleEluZGV4LCBjb25zdCBpbiBpbnQgbW9ycGhUYXJnZXRJbmRleCwgY29uc3QgaW4gaW50IG9mZnNldCApIHtcblx0XHRpbnQgdGV4ZWxJbmRleCA9IHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0O1xuXHRcdGludCB5ID0gdGV4ZWxJbmRleCAvIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XG5cdFx0aW50IHggPSB0ZXhlbEluZGV4IC0geSAqIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XG5cdFx0aXZlYzMgbW9ycGhVViA9IGl2ZWMzKCB4LCB5LCBtb3JwaFRhcmdldEluZGV4ICk7XG5cdFx0cmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcblx0fVxuI2VuZGlmIjsKCiAgICB2YXIgbW9ycGh0YXJnZXRfdmVydGV4ID0gIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXG5cdHRyYW5zZm9ybWVkICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTU9SUEhUQVJHRVRTX0NPVU5UOyBpICsrICkge1xuXHRcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgdHJhbnNmb3JtZWQgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAwICkueHl6ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIG5vcm1hbF9mcmFnbWVudF9iZWdpbiA9ICJmbG9hdCBmYWNlRGlyZWN0aW9uID0gZ2xfRnJvbnRGYWNpbmcgPyAxLjAgOiAtIDEuMDtcbiNpZmRlZiBGTEFUX1NIQURFRFxuXHR2ZWMzIGZkeCA9IGRGZHgoIHZWaWV3UG9zaXRpb24gKTtcblx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XG5cdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xuI2Vsc2Vcblx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHZOb3JtYWwgKTtcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdG5vcm1hbCAqPSBmYWNlRGlyZWN0aW9uO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmIGRlZmluZWQoIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFICkgfHwgZGVmaW5lZCggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU5JU09UUk9QWSApXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdG1hdDMgdGJuID0gbWF0Myggbm9ybWFsaXplKCB2VGFuZ2VudCApLCBub3JtYWxpemUoIHZCaXRhbmdlbnQgKSwgbm9ybWFsICk7XG5cdCNlbHNlXG5cdFx0bWF0MyB0Ym4gPSBnZXRUYW5nZW50RnJhbWUoIC0gdlZpZXdQb3NpdGlvbiwgbm9ybWFsLFxuXHRcdCNpZiBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcblx0XHRcdHZOb3JtYWxNYXBVdlxuXHRcdCNlbGlmIGRlZmluZWQoIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQIClcblx0XHRcdHZDbGVhcmNvYXROb3JtYWxNYXBVdlxuXHRcdCNlbHNlXG5cdFx0XHR2VXZcblx0XHQjZW5kaWZcblx0XHQpO1xuXHQjZW5kaWZcblx0I2lmIGRlZmluZWQoIERPVUJMRV9TSURFRCApICYmICEgZGVmaW5lZCggRkxBVF9TSEFERUQgKVxuXHRcdHRiblswXSAqPSBmYWNlRGlyZWN0aW9uO1xuXHRcdHRiblsxXSAqPSBmYWNlRGlyZWN0aW9uO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdG1hdDMgdGJuMiA9IG1hdDMoIG5vcm1hbGl6ZSggdlRhbmdlbnQgKSwgbm9ybWFsaXplKCB2Qml0YW5nZW50ICksIG5vcm1hbCApO1xuXHQjZWxzZVxuXHRcdG1hdDMgdGJuMiA9IGdldFRhbmdlbnRGcmFtZSggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIHZDbGVhcmNvYXROb3JtYWxNYXBVdiApO1xuXHQjZW5kaWZcblx0I2lmIGRlZmluZWQoIERPVUJMRV9TSURFRCApICYmICEgZGVmaW5lZCggRkxBVF9TSEFERUQgKVxuXHRcdHRibjJbMF0gKj0gZmFjZURpcmVjdGlvbjtcblx0XHR0Ym4yWzFdICo9IGZhY2VEaXJlY3Rpb247XG5cdCNlbmRpZlxuI2VuZGlmXG52ZWMzIG5vblBlcnR1cmJlZE5vcm1hbCA9IG5vcm1hbDsiOwoKICAgIHZhciBub3JtYWxfZnJhZ21lbnRfbWFwcyA9ICIjaWZkZWYgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRVxuXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdk5vcm1hbE1hcFV2ICkueHl6ICogMi4wIC0gMS4wO1xuXHQjaWZkZWYgRkxJUF9TSURFRFxuXHRcdG5vcm1hbCA9IC0gbm9ybWFsO1xuXHQjZW5kaWZcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XG5cdCNlbmRpZlxuXHRub3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1xuI2VsaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxuXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdk5vcm1hbE1hcFV2ICkueHl6ICogMi4wIC0gMS4wO1xuXHRtYXBOLnh5ICo9IG5vcm1hbFNjYWxlO1xuXHRub3JtYWwgPSBub3JtYWxpemUoIHRibiAqIG1hcE4gKTtcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcblx0bm9ybWFsID0gcGVydHVyYk5vcm1hbEFyYiggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpLCBmYWNlRGlyZWN0aW9uICk7XG4jZW5kaWYiOwoKICAgIHZhciBub3JtYWxfcGFyc19mcmFnbWVudCA9ICIjaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblx0XHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XG5cdFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgbm9ybWFsX3BhcnNfdmVydGV4ID0gIiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcblx0XHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcblx0I2VuZGlmXG4jZW5kaWYiOwoKICAgIHZhciBub3JtYWxfdmVydGV4ID0gIiNpZm5kZWYgRkxBVF9TSEFERURcblx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkVGFuZ2VudCApO1xuXHRcdHZCaXRhbmdlbnQgPSBub3JtYWxpemUoIGNyb3NzKCB2Tm9ybWFsLCB2VGFuZ2VudCApICogdGFuZ2VudC53ICk7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9OT1JNQUxNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xuXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XG4jZW5kaWZcbiNpZmRlZiBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFXG5cdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XG4jZW5kaWZcbiNpZiAhIGRlZmluZWQgKCBVU0VfVEFOR0VOVCApICYmICggZGVmaW5lZCAoIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFICkgfHwgZGVmaW5lZCAoIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKSApXG5cdG1hdDMgZ2V0VGFuZ2VudEZyYW1lKCB2ZWMzIGV5ZV9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIHV2ICkge1xuXHRcdHZlYzMgcTAgPSBkRmR4KCBleWVfcG9zLnh5eiApO1xuXHRcdHZlYzMgcTEgPSBkRmR5KCBleWVfcG9zLnh5eiApO1xuXHRcdHZlYzIgc3QwID0gZEZkeCggdXYuc3QgKTtcblx0XHR2ZWMyIHN0MSA9IGRGZHkoIHV2LnN0ICk7XG5cdFx0dmVjMyBOID0gc3VyZl9ub3JtO1xuXHRcdHZlYzMgcTFwZXJwID0gY3Jvc3MoIHExLCBOICk7XG5cdFx0dmVjMyBxMHBlcnAgPSBjcm9zcyggTiwgcTAgKTtcblx0XHR2ZWMzIFQgPSBxMXBlcnAgKiBzdDAueCArIHEwcGVycCAqIHN0MS54O1xuXHRcdHZlYzMgQiA9IHExcGVycCAqIHN0MC55ICsgcTBwZXJwICogc3QxLnk7XG5cdFx0ZmxvYXQgZGV0ID0gbWF4KCBkb3QoIFQsIFQgKSwgZG90KCBCLCBCICkgKTtcblx0XHRmbG9hdCBzY2FsZSA9ICggZGV0ID09IDAuMCApID8gMC4wIDogaW52ZXJzZXNxcnQoIGRldCApO1xuXHRcdHJldHVybiBtYXQzKCBUICogc2NhbGUsIEIgKiBzY2FsZSwgTiApO1xuXHR9XG4jZW5kaWYiOwoKICAgIHZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gIiNpZmRlZiBVU0VfQ0xFQVJDT0FUXG5cdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gbm9uUGVydHVyYmVkTm9ybWFsO1xuI2VuZGlmIjsKCiAgICB2YXIgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzID0gIiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxuXHR2ZWMzIGNsZWFyY29hdE1hcE4gPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE5vcm1hbE1hcCwgdkNsZWFyY29hdE5vcm1hbE1hcFV2ICkueHl6ICogMi4wIC0gMS4wO1xuXHRjbGVhcmNvYXRNYXBOLnh5ICo9IGNsZWFyY29hdE5vcm1hbFNjYWxlO1xuXHRjbGVhcmNvYXROb3JtYWwgPSBub3JtYWxpemUoIHRibjIgKiBjbGVhcmNvYXRNYXBOICk7XG4jZW5kaWYiOwoKICAgIHZhciBjbGVhcmNvYXRfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXRNYXA7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXROb3JtYWxNYXA7XG5cdHVuaWZvcm0gdmVjMiBjbGVhcmNvYXROb3JtYWxTY2FsZTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdFJvdWdobmVzc01hcDtcbiNlbmRpZiI7CgogICAgdmFyIGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBpcmlkZXNjZW5jZU1hcDtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XG4jZW5kaWYiOwoKICAgIHZhciBvcGFxdWVfZnJhZ21lbnQgPSAiI2lmZGVmIE9QQVFVRVxuZGlmZnVzZUNvbG9yLmEgPSAxLjA7XG4jZW5kaWZcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXG5kaWZmdXNlQ29sb3IuYSAqPSBtYXRlcmlhbC50cmFuc21pc3Npb25BbHBoYTtcbiNlbmRpZlxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTsiOwoKICAgIHZhciBwYWNraW5nID0gInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcblx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XG59XG52ZWMzIHVucGFja1JHQlRvTm9ybWFsKCBjb25zdCBpbiB2ZWMzIHJnYiApIHtcblx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XG59XG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO2NvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xuY29uc3QgZmxvYXQgSW52MjU1ID0gMS4gLyAyNTUuO1xuY29uc3QgdmVjNCBQYWNrRmFjdG9ycyA9IHZlYzQoIDEuMCwgMjU2LjAsIDI1Ni4wICogMjU2LjAsIDI1Ni4wICogMjU2LjAgKiAyNTYuMCApO1xuY29uc3QgdmVjMiBVbnBhY2tGYWN0b3JzMiA9IHZlYzIoIFVucGFja0Rvd25zY2FsZSwgMS4wIC8gUGFja0ZhY3RvcnMuZyApO1xuY29uc3QgdmVjMyBVbnBhY2tGYWN0b3JzMyA9IHZlYzMoIFVucGFja0Rvd25zY2FsZSAvIFBhY2tGYWN0b3JzLnJnLCAxLjAgLyBQYWNrRmFjdG9ycy5iICk7XG5jb25zdCB2ZWM0IFVucGFja0ZhY3RvcnM0ID0gdmVjNCggVW5wYWNrRG93bnNjYWxlIC8gUGFja0ZhY3RvcnMucmdiLCAxLjAgLyBQYWNrRmFjdG9ycy5hICk7XG52ZWM0IHBhY2tEZXB0aFRvUkdCQSggY29uc3QgaW4gZmxvYXQgdiApIHtcblx0aWYoIHYgPD0gMC4wIClcblx0XHRyZXR1cm4gdmVjNCggMC4sIDAuLCAwLiwgMC4gKTtcblx0aWYoIHYgPj0gMS4wIClcblx0XHRyZXR1cm4gdmVjNCggMS4sIDEuLCAxLiwgMS4gKTtcblx0ZmxvYXQgdnVmO1xuXHRmbG9hdCBhZiA9IG1vZGYoIHYgKiBQYWNrRmFjdG9ycy5hLCB2dWYgKTtcblx0ZmxvYXQgYmYgPSBtb2RmKCB2dWYgKiBTaGlmdFJpZ2h0OCwgdnVmICk7XG5cdGZsb2F0IGdmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xuXHRyZXR1cm4gdmVjNCggdnVmICogSW52MjU1LCBnZiAqIFBhY2tVcHNjYWxlLCBiZiAqIFBhY2tVcHNjYWxlLCBhZiApO1xufVxudmVjMyBwYWNrRGVwdGhUb1JHQiggY29uc3QgaW4gZmxvYXQgdiApIHtcblx0aWYoIHYgPD0gMC4wIClcblx0XHRyZXR1cm4gdmVjMyggMC4sIDAuLCAwLiApO1xuXHRpZiggdiA+PSAxLjAgKVxuXHRcdHJldHVybiB2ZWMzKCAxLiwgMS4sIDEuICk7XG5cdGZsb2F0IHZ1Zjtcblx0ZmxvYXQgYmYgPSBtb2RmKCB2ICogUGFja0ZhY3RvcnMuYiwgdnVmICk7XG5cdGZsb2F0IGdmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xuXHRyZXR1cm4gdmVjMyggdnVmICogSW52MjU1LCBnZiAqIFBhY2tVcHNjYWxlLCBiZiApO1xufVxudmVjMiBwYWNrRGVwdGhUb1JHKCBjb25zdCBpbiBmbG9hdCB2ICkge1xuXHRpZiggdiA8PSAwLjAgKVxuXHRcdHJldHVybiB2ZWMyKCAwLiwgMC4gKTtcblx0aWYoIHYgPj0gMS4wIClcblx0XHRyZXR1cm4gdmVjMiggMS4sIDEuICk7XG5cdGZsb2F0IHZ1Zjtcblx0ZmxvYXQgZ2YgPSBtb2RmKCB2ICogMjU2LiwgdnVmICk7XG5cdHJldHVybiB2ZWMyKCB2dWYgKiBJbnYyNTUsIGdmICk7XG59XG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xuXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzNCApO1xufVxuZmxvYXQgdW5wYWNrUkdCVG9EZXB0aCggY29uc3QgaW4gdmVjMyB2ICkge1xuXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzMyApO1xufVxuZmxvYXQgdW5wYWNrUkdUb0RlcHRoKCBjb25zdCBpbiB2ZWMyIHYgKSB7XG5cdHJldHVybiB2LnIgKiBVbnBhY2tGYWN0b3JzMi5yICsgdi5nICogVW5wYWNrRmFjdG9yczIuZztcbn1cbnZlYzQgcGFjazJIYWxmVG9SR0JBKCBjb25zdCBpbiB2ZWMyIHYgKSB7XG5cdHZlYzQgciA9IHZlYzQoIHYueCwgZnJhY3QoIHYueCAqIDI1NS4wICksIHYueSwgZnJhY3QoIHYueSAqIDI1NS4wICkgKTtcblx0cmV0dXJuIHZlYzQoIHIueCAtIHIueSAvIDI1NS4wLCByLnksIHIueiAtIHIudyAvIDI1NS4wLCByLncgKTtcbn1cbnZlYzIgdW5wYWNrUkdCQVRvMkhhbGYoIGNvbnN0IGluIHZlYzQgdiApIHtcblx0cmV0dXJuIHZlYzIoIHYueCArICggdi55IC8gMjU1LjAgKSwgdi56ICsgKCB2LncgLyAyNTUuMCApICk7XG59XG5mbG9hdCB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XG5cdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XG59XG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGRlcHRoLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XG5cdHJldHVybiBkZXB0aCAqICggbmVhciAtIGZhciApIC0gbmVhcjtcbn1cbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xuXHRyZXR1cm4gKCAoIG5lYXIgKyB2aWV3WiApICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogdmlld1ogKTtcbn1cbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBkZXB0aCwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xuXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogZGVwdGggLSBmYXIgKTtcbn0iOwoKICAgIHZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gIiNpZmRlZiBQUkVNVUxUSVBMSUVEX0FMUEhBXG5cdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XG4jZW5kaWYiOwoKICAgIHZhciBwcm9qZWN0X3ZlcnRleCA9ICJ2ZWM0IG12UG9zaXRpb24gPSB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XG4jaWZkZWYgVVNFX0JBVENISU5HXG5cdG12UG9zaXRpb24gPSBiYXRjaGluZ01hdHJpeCAqIG12UG9zaXRpb247XG4jZW5kaWZcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xuXHRtdlBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiBtdlBvc2l0aW9uO1xuI2VuZGlmXG5tdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogbXZQb3NpdGlvbjtcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247IjsKCiAgICB2YXIgZGl0aGVyaW5nX2ZyYWdtZW50ID0gIiNpZmRlZiBESVRIRVJJTkdcblx0Z2xfRnJhZ0NvbG9yLnJnYiA9IGRpdGhlcmluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xuI2VuZGlmIjsKCiAgICB2YXIgZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIERJVEhFUklOR1xuXHR2ZWMzIGRpdGhlcmluZyggdmVjMyBjb2xvciApIHtcblx0XHRmbG9hdCBncmlkX3Bvc2l0aW9uID0gcmFuZCggZ2xfRnJhZ0Nvb3JkLnh5ICk7XG5cdFx0dmVjMyBkaXRoZXJfc2hpZnRfUkdCID0gdmVjMyggMC4yNSAvIDI1NS4wLCAtMC4yNSAvIDI1NS4wLCAwLjI1IC8gMjU1LjAgKTtcblx0XHRkaXRoZXJfc2hpZnRfUkdCID0gbWl4KCAyLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCAtMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgZ3JpZF9wb3NpdGlvbiApO1xuXHRcdHJldHVybiBjb2xvciArIGRpdGhlcl9zaGlmdF9SR0I7XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIHJvdWdobmVzc21hcF9mcmFnbWVudCA9ICJmbG9hdCByb3VnaG5lc3NGYWN0b3IgPSByb3VnaG5lc3M7XG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxuXHR2ZWM0IHRleGVsUm91Z2huZXNzID0gdGV4dHVyZTJEKCByb3VnaG5lc3NNYXAsIHZSb3VnaG5lc3NNYXBVdiApO1xuXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcbiNlbmRpZiI7CgogICAgdmFyIHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcbiNlbmRpZiI7CgogICAgdmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZiBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwXG5cdHZhcnlpbmcgdmVjNCB2U3BvdExpZ2h0Q29vcmRbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xuI2VuZGlmXG4jaWYgTlVNX1NQT1RfTElHSFRfTUFQUyA+IDBcblx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdExpZ2h0TWFwWyBOVU1fU1BPVF9MSUdIVF9NQVBTIF07XG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XG5cdFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cge1xuXHRcdFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xuXHRcdFx0ZmxvYXQgc2hhZG93Qmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dSYWRpdXM7XG5cdFx0XHR2ZWMyIHNoYWRvd01hcFNpemU7XG5cdFx0fTtcblx0XHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHQjZW5kaWZcblx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHN0cnVjdCBTcG90TGlnaHRTaGFkb3cge1xuXHRcdFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xuXHRcdFx0ZmxvYXQgc2hhZG93Qmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dSYWRpdXM7XG5cdFx0XHR2ZWMyIHNoYWRvd01hcFNpemU7XG5cdFx0fTtcblx0XHR1bmlmb3JtIFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3dzWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgcG9pbnRTaGFkb3dNYXBbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cdFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHN0cnVjdCBQb2ludExpZ2h0U2hhZG93IHtcblx0XHRcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcblx0XHRcdGZsb2F0IHNoYWRvd0JpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xuXHRcdFx0dmVjMiBzaGFkb3dNYXBTaXplO1xuXHRcdFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcblx0XHRcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcblx0XHR9O1xuXHRcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblx0I2VuZGlmXG5cdGZsb2F0IHRleHR1cmUyRENvbXBhcmUoIHNhbXBsZXIyRCBkZXB0aHMsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKSB7XG5cdFx0cmV0dXJuIHN0ZXAoIGNvbXBhcmUsIHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIGRlcHRocywgdXYgKSApICk7XG5cdH1cblx0dmVjMiB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYgKSB7XG5cdFx0cmV0dXJuIHVucGFja1JHQkFUbzJIYWxmKCB0ZXh0dXJlMkQoIHNoYWRvdywgdXYgKSApO1xuXHR9XG5cdGZsb2F0IFZTTVNoYWRvdyAoc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApe1xuXHRcdGZsb2F0IG9jY2x1c2lvbiA9IDEuMDtcblx0XHR2ZWMyIGRpc3RyaWJ1dGlvbiA9IHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2hhZG93LCB1diApO1xuXHRcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggY29tcGFyZSAsIGRpc3RyaWJ1dGlvbi54ICk7XG5cdFx0aWYgKGhhcmRfc2hhZG93ICE9IDEuMCApIHtcblx0XHRcdGZsb2F0IGRpc3RhbmNlID0gY29tcGFyZSAtIGRpc3RyaWJ1dGlvbi54IDtcblx0XHRcdGZsb2F0IHZhcmlhbmNlID0gbWF4KCAwLjAwMDAwLCBkaXN0cmlidXRpb24ueSAqIGRpc3RyaWJ1dGlvbi55ICk7XG5cdFx0XHRmbG9hdCBzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IHZhcmlhbmNlIC8gKHZhcmlhbmNlICsgZGlzdGFuY2UgKiBkaXN0YW5jZSApO1x0XHRcdHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gY2xhbXAoICggc29mdG5lc3NfcHJvYmFiaWxpdHkgLSAwLjMgKSAvICggMC45NSAtIDAuMyApLCAwLjAsIDEuMCApO1x0XHRcdG9jY2x1c2lvbiA9IGNsYW1wKCBtYXgoIGhhcmRfc2hhZG93LCBzb2Z0bmVzc19wcm9iYWJpbGl0eSApLCAwLjAsIDEuMCApO1xuXHRcdH1cblx0XHRyZXR1cm4gb2NjbHVzaW9uO1xuXHR9XG5cdGZsb2F0IGdldFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dJbnRlbnNpdHksIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcblx0XHRmbG9hdCBzaGFkb3cgPSAxLjA7XG5cdFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XG5cdFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xuXHRcdGJvb2wgaW5GcnVzdHVtID0gc2hhZG93Q29vcmQueCA+PSAwLjAgJiYgc2hhZG93Q29vcmQueCA8PSAxLjAgJiYgc2hhZG93Q29vcmQueSA+PSAwLjAgJiYgc2hhZG93Q29vcmQueSA8PSAxLjA7XG5cdFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGluRnJ1c3R1bSAmJiBzaGFkb3dDb29yZC56IDw9IDEuMDtcblx0XHRpZiAoIGZydXN0dW1UZXN0ICkge1xuXHRcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxuXHRcdFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XG5cdFx0XHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcblx0XHRcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XG5cdFx0XHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHgyID0gZHgwIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHkyID0gZHkwIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHkzID0gZHkxIC8gMi4wO1xuXHRcdFx0c2hhZG93ID0gKFxuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MiApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkzICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXG5cdFx0XHQpICogKCAxLjAgLyAxNy4wICk7XG5cdFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxuXHRcdFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XG5cdFx0XHRmbG9hdCBkeCA9IHRleGVsU2l6ZS54O1xuXHRcdFx0ZmxvYXQgZHkgPSB0ZXhlbFNpemUueTtcblx0XHRcdHZlYzIgdXYgPSBzaGFkb3dDb29yZC54eTtcblx0XHRcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNoYWRvd01hcFNpemUgKyAwLjUgKTtcblx0XHRcdHV2IC09IGYgKiB0ZXhlbFNpemU7XG5cdFx0XHRzaGFkb3cgPSAoXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYsIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIGR5ICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB0ZXhlbFNpemUsIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCBmLnggKSArXG5cdFx0XHRcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgZi54ICkgK1xuXHRcdFx0XHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIC1keSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgZi55ICkgK1xuXHRcdFx0XHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0IGYueSApICtcblx0XHRcdFx0bWl4KCBtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAtZHgsIC1keSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdFx0XHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHRcdCAgZi54ICksXG5cdFx0XHRcdFx0IG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0XHRcdFx0ICB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0XHRcdCAgZi54ICksXG5cdFx0XHRcdFx0IGYueSApXG5cdFx0XHQpICogKCAxLjAgLyA5LjAgKTtcblx0XHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxuXHRcdFx0c2hhZG93ID0gVlNNU2hhZG93KCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XG5cdFx0I2Vsc2Vcblx0XHRcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcblx0XHQjZW5kaWZcblx0XHR9XG5cdFx0cmV0dXJuIG1peCggMS4wLCBzaGFkb3csIHNoYWRvd0ludGVuc2l0eSApO1xuXHR9XG5cdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcblx0XHR2ZWMzIGFic1YgPSBhYnMoIHYgKTtcblx0XHRmbG9hdCBzY2FsZVRvQ3ViZSA9IDEuMCAvIG1heCggYWJzVi54LCBtYXgoIGFic1YueSwgYWJzVi56ICkgKTtcblx0XHRhYnNWICo9IHNjYWxlVG9DdWJlO1xuXHRcdHYgKj0gc2NhbGVUb0N1YmUgKiAoIDEuMCAtIDIuMCAqIHRleGVsU2l6ZVkgKTtcblx0XHR2ZWMyIHBsYW5hciA9IHYueHk7XG5cdFx0ZmxvYXQgYWxtb3N0QVRleGVsID0gMS41ICogdGV4ZWxTaXplWTtcblx0XHRmbG9hdCBhbG1vc3RPbmUgPSAxLjAgLSBhbG1vc3RBVGV4ZWw7XG5cdFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xuXHRcdFx0aWYgKCB2LnogPiAwLjAgKVxuXHRcdFx0XHRwbGFuYXIueCA9IDQuMCAtIHYueDtcblx0XHR9IGVsc2UgaWYgKCBhYnNWLnggPj0gYWxtb3N0T25lICkge1xuXHRcdFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcblx0XHRcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcblx0XHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xuXHRcdFx0ZmxvYXQgc2lnblkgPSBzaWduKCB2LnkgKTtcblx0XHRcdHBsYW5hci54ID0gdi54ICsgMi4wICogc2lnblkgKyAyLjA7XG5cdFx0XHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xuXHRcdH1cblx0XHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XG5cdH1cblx0ZmxvYXQgZ2V0UG9pbnRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93SW50ZW5zaXR5LCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcblx0XHRmbG9hdCBzaGFkb3cgPSAxLjA7XG5cdFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XG5cdFx0XG5cdFx0ZmxvYXQgbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoID0gbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKTtcblx0XHRpZiAoIGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCAtIHNoYWRvd0NhbWVyYUZhciA8PSAwLjAgJiYgbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoIC0gc2hhZG93Q2FtZXJhTmVhciA+PSAwLjAgKSB7XG5cdFx0XHRmbG9hdCBkcCA9ICggbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XHRcdFx0ZHAgKz0gc2hhZG93Qmlhcztcblx0XHRcdHZlYzMgYmQzRCA9IG5vcm1hbGl6ZSggbGlnaHRUb1Bvc2l0aW9uICk7XG5cdFx0XHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xuXHRcdFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcblx0XHRcdFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xuXHRcdFx0XHRzaGFkb3cgPSAoXG5cdFx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXG5cdFx0XHRcdCkgKiAoIDEuMCAvIDkuMCApO1xuXHRcdFx0I2Vsc2Vcblx0XHRcdFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcblx0XHRcdCNlbmRpZlxuXHRcdH1cblx0XHRyZXR1cm4gbWl4KCAxLjAsIHNoYWRvdywgc2hhZG93SW50ZW5zaXR5ICk7XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIHNoYWRvd21hcF9wYXJzX3ZlcnRleCA9ICIjaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxuXHR1bmlmb3JtIG1hdDQgc3BvdExpZ2h0TWF0cml4WyBOVU1fU1BPVF9MSUdIVF9DT09SRFMgXTtcblx0dmFyeWluZyB2ZWM0IHZTcG90TGlnaHRDb29yZFsgTlVNX1NQT1RfTElHSFRfQ09PUkRTIF07XG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBtYXQ0IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IHtcblx0XHRcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcblx0XHRcdGZsb2F0IHNoYWRvd0JpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xuXHRcdFx0dmVjMiBzaGFkb3dNYXBTaXplO1xuXHRcdH07XG5cdFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblx0I2VuZGlmXG5cdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxuXHRcdHN0cnVjdCBTcG90TGlnaHRTaGFkb3cge1xuXHRcdFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xuXHRcdFx0ZmxvYXQgc2hhZG93Qmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XG5cdFx0XHRmbG9hdCBzaGFkb3dSYWRpdXM7XG5cdFx0XHR2ZWMyIHNoYWRvd01hcFNpemU7XG5cdFx0fTtcblx0XHR1bmlmb3JtIFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3dzWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBtYXQ0IHBvaW50U2hhZG93TWF0cml4WyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblx0XHRzdHJ1Y3QgUG9pbnRMaWdodFNoYWRvdyB7XG5cdFx0XHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XG5cdFx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcblx0XHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHRcdGZsb2F0IHNoYWRvd0NhbWVyYU5lYXI7XG5cdFx0XHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XG5cdFx0fTtcblx0XHR1bmlmb3JtIFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvd3NbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cdCNlbmRpZlxuI2VuZGlmIjsKCiAgICB2YXIgc2hhZG93bWFwX3ZlcnRleCA9ICIjaWYgKCBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwIHx8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMCApICkgfHwgKCBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwIClcblx0dmVjMyBzaGFkb3dXb3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XG5cdHZlYzQgc2hhZG93V29ybGRQb3NpdGlvbjtcbiNlbmRpZlxuI2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKVxuXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0XHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cdFx0XHRzaGFkb3dXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbiArIHZlYzQoIHNoYWRvd1dvcmxkTm9ybWFsICogZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzLCAwICk7XG5cdFx0XHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XG5cdFx0fVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xuXHRcdFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIHBvaW50TGlnaHRTaGFkb3dzWyBpIF0uc2hhZG93Tm9ybWFsQmlhcywgMCApO1xuXHRcdFx0dlBvaW50U2hhZG93Q29vcmRbIGkgXSA9IHBvaW50U2hhZG93TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xuXHRcdH1cblx0XHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXHQjZW5kaWZcbiNlbmRpZlxuI2lmIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDBcblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVF9DT09SRFM7IGkgKysgKSB7XG5cdFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XG5cdFx0I2lmICggZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcblx0XHRcdHNoYWRvd1dvcmxkUG9zaXRpb24ueHl6ICs9IHNoYWRvd1dvcmxkTm9ybWFsICogc3BvdExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXM7XG5cdFx0I2VuZGlmXG5cdFx0dlNwb3RMaWdodENvb3JkWyBpIF0gPSBzcG90TGlnaHRNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcbiNlbmRpZiI7CgogICAgdmFyIHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCA9ICJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xuXHRmbG9hdCBzaGFkb3cgPSAxLjA7XG5cdCNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cdFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dJbnRlbnNpdHksIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcblx0fVxuXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxuXHQjZW5kaWZcblx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHQ7XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcblx0XHRzcG90TGlnaHQgPSBzcG90TGlnaHRTaGFkb3dzWyBpIF07XG5cdFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dJbnRlbnNpdHksIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdExpZ2h0Q29vcmRbIGkgXSApIDogMS4wO1xuXHR9XG5cdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcblx0XHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcblx0XHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93SW50ZW5zaXR5LCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XG5cdH1cblx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcblx0I2VuZGlmXG5cdCNlbmRpZlxuXHRyZXR1cm4gc2hhZG93O1xufSI7CgogICAgdmFyIHNraW5iYXNlX3ZlcnRleCA9ICIjaWZkZWYgVVNFX1NLSU5OSU5HXG5cdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xuXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcblx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XG5cdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xuI2VuZGlmIjsKCiAgICB2YXIgc2tpbm5pbmdfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9TS0lOTklOR1xuXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeDtcblx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXhJbnZlcnNlO1xuXHR1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcblx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xuXHRcdGludCBzaXplID0gdGV4dHVyZVNpemUoIGJvbmVUZXh0dXJlLCAwICkueDtcblx0XHRpbnQgaiA9IGludCggaSApICogNDtcblx0XHRpbnQgeCA9IGogJSBzaXplO1xuXHRcdGludCB5ID0gaiAvIHNpemU7XG5cdFx0dmVjNCB2MSA9IHRleGVsRmV0Y2goIGJvbmVUZXh0dXJlLCBpdmVjMiggeCwgeSApLCAwICk7XG5cdFx0dmVjNCB2MiA9IHRleGVsRmV0Y2goIGJvbmVUZXh0dXJlLCBpdmVjMiggeCArIDEsIHkgKSwgMCApO1xuXHRcdHZlYzQgdjMgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHggKyAyLCB5ICksIDAgKTtcblx0XHR2ZWM0IHY0ID0gdGV4ZWxGZXRjaCggYm9uZVRleHR1cmUsIGl2ZWMyKCB4ICsgMywgeSApLCAwICk7XG5cdFx0cmV0dXJuIG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XG5cdH1cbiNlbmRpZiI7CgogICAgdmFyIHNraW5uaW5nX3ZlcnRleCA9ICIjaWZkZWYgVVNFX1NLSU5OSU5HXG5cdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XG5cdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xuXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcblx0c2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnk7XG5cdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xuXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcblx0dHJhbnNmb3JtZWQgPSAoIGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbm5lZCApLnh5ejtcbiNlbmRpZiI7CgogICAgdmFyIHNraW5ub3JtYWxfdmVydGV4ID0gIiNpZmRlZiBVU0VfU0tJTk5JTkdcblx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XG5cdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XG5cdHNraW5NYXRyaXggPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xuXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcblx0I2VuZGlmXG4jZW5kaWYiOwoKICAgIHZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9ICJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxuXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2U3BlY3VsYXJNYXBVdiApO1xuXHRzcGVjdWxhclN0cmVuZ3RoID0gdGV4ZWxTcGVjdWxhci5yO1xuI2Vsc2Vcblx0c3BlY3VsYXJTdHJlbmd0aCA9IDEuMDtcbiNlbmRpZiI7CgogICAgdmFyIHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDtcbiNlbmRpZiI7CgogICAgdmFyIHRvbmVtYXBwaW5nX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBUT05FX01BUFBJTkcgKVxuXHRnbF9GcmFnQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcbiNlbmRpZiI7CgogICAgdmFyIHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQgPSAiI2lmbmRlZiBzYXR1cmF0ZVxuI2RlZmluZSBzYXR1cmF0ZSggYSApIGNsYW1wKCBhLCAwLjAsIDEuMCApXG4jZW5kaWZcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cdHJldHVybiBzYXR1cmF0ZSggdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yICk7XG59XG52ZWMzIFJlaW5oYXJkVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XG5cdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xufVxudmVjMyBDaW5lb25Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcblx0Y29sb3IgPSBtYXgoIHZlYzMoIDAuMCApLCBjb2xvciAtIDAuMDA0ICk7XG5cdHJldHVybiBwb3coICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMC41ICkgKSAvICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMS43ICkgKyAwLjA2ICksIHZlYzMoIDIuMiApICk7XG59XG52ZWMzIFJSVEFuZE9EVEZpdCggdmVjMyB2ICkge1xuXHR2ZWMzIGEgPSB2ICogKCB2ICsgMC4wMjQ1Nzg2ICkgLSAwLjAwMDA5MDUzNztcblx0dmVjMyBiID0gdiAqICggMC45ODM3MjkgKiB2ICsgMC40MzI5NTEwICkgKyAwLjIzODA4MTtcblx0cmV0dXJuIGEgLyBiO1xufVxudmVjMyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XG5cdGNvbnN0IG1hdDMgQUNFU0lucHV0TWF0ID0gbWF0Myhcblx0XHR2ZWMzKCAwLjU5NzE5LCAwLjA3NjAwLCAwLjAyODQwICksXHRcdHZlYzMoIDAuMzU0NTgsIDAuOTA4MzQsIDAuMTMzODMgKSxcblx0XHR2ZWMzKCAwLjA0ODIzLCAwLjAxNTY2LCAwLjgzNzc3IClcblx0KTtcblx0Y29uc3QgbWF0MyBBQ0VTT3V0cHV0TWF0ID0gbWF0Myhcblx0XHR2ZWMzKCAgMS42MDQ3NSwgLTAuMTAyMDgsIC0wLjAwMzI3ICksXHRcdHZlYzMoIC0wLjUzMTA4LCAgMS4xMDgxMywgLTAuMDcyNzYgKSxcblx0XHR2ZWMzKCAtMC4wNzM2NywgLTAuMDA2MDUsICAxLjA3NjAyIClcblx0KTtcblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZSAvIDAuNjtcblx0Y29sb3IgPSBBQ0VTSW5wdXRNYXQgKiBjb2xvcjtcblx0Y29sb3IgPSBSUlRBbmRPRFRGaXQoIGNvbG9yICk7XG5cdGNvbG9yID0gQUNFU091dHB1dE1hdCAqIGNvbG9yO1xuXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yICk7XG59XG5jb25zdCBtYXQzIExJTkVBUl9SRUMyMDIwX1RPX0xJTkVBUl9TUkdCID0gbWF0Myhcblx0dmVjMyggMS42NjA1LCAtIDAuMTI0NiwgLSAwLjAxODIgKSxcblx0dmVjMyggLSAwLjU4NzYsIDEuMTMyOSwgLSAwLjEwMDYgKSxcblx0dmVjMyggLSAwLjA3MjgsIC0gMC4wMDgzLCAxLjExODcgKVxuKTtcbmNvbnN0IG1hdDMgTElORUFSX1NSR0JfVE9fTElORUFSX1JFQzIwMjAgPSBtYXQzKFxuXHR2ZWMzKCAwLjYyNzQsIDAuMDY5MSwgMC4wMTY0ICksXG5cdHZlYzMoIDAuMzI5MywgMC45MTk1LCAwLjA4ODAgKSxcblx0dmVjMyggMC4wNDMzLCAwLjAxMTMsIDAuODk1NiApXG4pO1xudmVjMyBhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3goIHZlYzMgeCApIHtcblx0dmVjMyB4MiA9IHggKiB4O1xuXHR2ZWMzIHg0ID0geDIgKiB4Mjtcblx0cmV0dXJuICsgMTUuNSAqIHg0ICogeDJcblx0XHQtIDQwLjE0ICogeDQgKiB4XG5cdFx0KyAzMS45NiAqIHg0XG5cdFx0LSA2Ljg2OCAqIHgyICogeFxuXHRcdCsgMC40Mjk4ICogeDJcblx0XHQrIDAuMTE5MSAqIHhcblx0XHQtIDAuMDAyMzI7XG59XG52ZWMzIEFnWFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb25zdCBtYXQzIEFnWEluc2V0TWF0cml4ID0gbWF0Myhcblx0XHR2ZWMzKCAwLjg1NjYyNzE1MzMxNTk4MywgMC4xMzczMTg5NzI5Mjk4NDcsIDAuMTExODk4MjEyOTk5OTUgKSxcblx0XHR2ZWMzKCAwLjA5NTEyMTI0MDUzODE1ODgsIDAuNzYxMjQxOTkwNjAyNTkxLCAwLjA3Njc5OTQxODYwMzE5MDMgKSxcblx0XHR2ZWMzKCAwLjA0ODI1MTYwNjE0NTg1ODMsIDAuMTAxNDM5MDM2NDY3NTYyLCAwLjgxMTMwMjM2ODM5Njg1OSApXG5cdCk7XG5cdGNvbnN0IG1hdDMgQWdYT3V0c2V0TWF0cml4ID0gbWF0Myhcblx0XHR2ZWMzKCAxLjEyNzEwMDU4MTgxNDQzNjgsIC0gMC4xNDEzMjk3NjM0OTg0MzgzLCAtIDAuMTQxMzI5NzYzNDk4NDM4MjYgKSxcblx0XHR2ZWMzKCAtIDAuMTEwNjA2NjQzMDk2NjAzMjMsIDEuMTU3ODIzNzAyMjE2MjcyLCAtIDAuMTEwNjA2NjQzMDk2NjAyOTQgKSxcblx0XHR2ZWMzKCAtIDAuMDE2NDkzOTM4NzE3ODM0NTczLCAtIDAuMDE2NDkzOTM4NzE3ODM0MjU3LCAxLjI1MTkzNjQwNjU5NTA0MDUgKVxuXHQpO1xuXHRjb25zdCBmbG9hdCBBZ3hNaW5FdiA9IC0gMTIuNDczOTM7XHRjb25zdCBmbG9hdCBBZ3hNYXhFdiA9IDQuMDI2MDY5O1xuXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRjb2xvciA9IExJTkVBUl9TUkdCX1RPX0xJTkVBUl9SRUMyMDIwICogY29sb3I7XG5cdGNvbG9yID0gQWdYSW5zZXRNYXRyaXggKiBjb2xvcjtcblx0Y29sb3IgPSBtYXgoIGNvbG9yLCAxZS0xMCApO1x0Y29sb3IgPSBsb2cyKCBjb2xvciApO1xuXHRjb2xvciA9ICggY29sb3IgLSBBZ3hNaW5FdiApIC8gKCBBZ3hNYXhFdiAtIEFneE1pbkV2ICk7XG5cdGNvbG9yID0gY2xhbXAoIGNvbG9yLCAwLjAsIDEuMCApO1xuXHRjb2xvciA9IGFneERlZmF1bHRDb250cmFzdEFwcHJveCggY29sb3IgKTtcblx0Y29sb3IgPSBBZ1hPdXRzZXRNYXRyaXggKiBjb2xvcjtcblx0Y29sb3IgPSBwb3coIG1heCggdmVjMyggMC4wICksIGNvbG9yICksIHZlYzMoIDIuMiApICk7XG5cdGNvbG9yID0gTElORUFSX1JFQzIwMjBfVE9fTElORUFSX1NSR0IgKiBjb2xvcjtcblx0Y29sb3IgPSBjbGFtcCggY29sb3IsIDAuMCwgMS4wICk7XG5cdHJldHVybiBjb2xvcjtcbn1cbnZlYzMgTmV1dHJhbFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb25zdCBmbG9hdCBTdGFydENvbXByZXNzaW9uID0gMC44IC0gMC4wNDtcblx0Y29uc3QgZmxvYXQgRGVzYXR1cmF0aW9uID0gMC4xNTtcblx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcblx0ZmxvYXQgeCA9IG1pbiggY29sb3IuciwgbWluKCBjb2xvci5nLCBjb2xvci5iICkgKTtcblx0ZmxvYXQgb2Zmc2V0ID0geCA8IDAuMDggPyB4IC0gNi4yNSAqIHggKiB4IDogMC4wNDtcblx0Y29sb3IgLT0gb2Zmc2V0O1xuXHRmbG9hdCBwZWFrID0gbWF4KCBjb2xvci5yLCBtYXgoIGNvbG9yLmcsIGNvbG9yLmIgKSApO1xuXHRpZiAoIHBlYWsgPCBTdGFydENvbXByZXNzaW9uICkgcmV0dXJuIGNvbG9yO1xuXHRmbG9hdCBkID0gMS4gLSBTdGFydENvbXByZXNzaW9uO1xuXHRmbG9hdCBuZXdQZWFrID0gMS4gLSBkICogZCAvICggcGVhayArIGQgLSBTdGFydENvbXByZXNzaW9uICk7XG5cdGNvbG9yICo9IG5ld1BlYWsgLyBwZWFrO1xuXHRmbG9hdCBnID0gMS4gLSAxLiAvICggRGVzYXR1cmF0aW9uICogKCBwZWFrIC0gbmV3UGVhayApICsgMS4gKTtcblx0cmV0dXJuIG1peCggY29sb3IsIHZlYzMoIG5ld1BlYWsgKSwgZyApO1xufVxudmVjMyBDdXN0b21Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHsgcmV0dXJuIGNvbG9yOyB9IjsKCiAgICB2YXIgdHJhbnNtaXNzaW9uX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXG5cdG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA9IHRyYW5zbWlzc2lvbjtcblx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSAxLjA7XG5cdG1hdGVyaWFsLnRoaWNrbmVzcyA9IHRoaWNrbmVzcztcblx0bWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSA9IGF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3IgPSBhdHRlbnVhdGlvbkNvbG9yO1xuXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxuXHRcdG1hdGVyaWFsLnRyYW5zbWlzc2lvbiAqPSB0ZXh0dXJlMkQoIHRyYW5zbWlzc2lvbk1hcCwgdlRyYW5zbWlzc2lvbk1hcFV2ICkucjtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXG5cdFx0bWF0ZXJpYWwudGhpY2tuZXNzICo9IHRleHR1cmUyRCggdGhpY2tuZXNzTWFwLCB2VGhpY2tuZXNzTWFwVXYgKS5nO1xuXHQjZW5kaWZcblx0dmVjMyBwb3MgPSB2V29ybGRQb3NpdGlvbjtcblx0dmVjMyB2ID0gbm9ybWFsaXplKCBjYW1lcmFQb3NpdGlvbiAtIHBvcyApO1xuXHR2ZWMzIG4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcblx0dmVjNCB0cmFuc21pdHRlZCA9IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oXG5cdFx0biwgdiwgbWF0ZXJpYWwucm91Z2huZXNzLCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLFxuXHRcdHBvcywgbW9kZWxNYXRyaXgsIHZpZXdNYXRyaXgsIHByb2plY3Rpb25NYXRyaXgsIG1hdGVyaWFsLmRpc3BlcnNpb24sIG1hdGVyaWFsLmlvciwgbWF0ZXJpYWwudGhpY2tuZXNzLFxuXHRcdG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3IsIG1hdGVyaWFsLmF0dGVudWF0aW9uRGlzdGFuY2UgKTtcblx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSBtaXgoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhLCB0cmFuc21pdHRlZC5hLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcblx0dG90YWxEaWZmdXNlID0gbWl4KCB0b3RhbERpZmZ1c2UsIHRyYW5zbWl0dGVkLnJnYiwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uICk7XG4jZW5kaWYiOwoKICAgIHZhciB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxuXHR1bmlmb3JtIGZsb2F0IHRyYW5zbWlzc2lvbjtcblx0dW5pZm9ybSBmbG9hdCB0aGlja25lc3M7XG5cdHVuaWZvcm0gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0dW5pZm9ybSB2ZWMzIGF0dGVudWF0aW9uQ29sb3I7XG5cdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdHJhbnNtaXNzaW9uTWFwO1xuXHQjZW5kaWZcblx0I2lmZGVmIFVTRV9USElDS05FU1NNQVBcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0aGlja25lc3NNYXA7XG5cdCNlbmRpZlxuXHR1bmlmb3JtIHZlYzIgdHJhbnNtaXNzaW9uU2FtcGxlclNpemU7XG5cdHVuaWZvcm0gc2FtcGxlcjJEIHRyYW5zbWlzc2lvblNhbXBsZXJNYXA7XG5cdHVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcblx0dW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG5cdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblx0ZmxvYXQgdzAoIGZsb2F0IGEgKSB7XG5cdFx0cmV0dXJuICggMS4wIC8gNi4wICkgKiAoIGEgKiAoIGEgKiAoIC0gYSArIDMuMCApIC0gMy4wICkgKyAxLjAgKTtcblx0fVxuXHRmbG9hdCB3MSggZmxvYXQgYSApIHtcblx0XHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqICBhICogKCAzLjAgKiBhIC0gNi4wICkgKyA0LjAgKTtcblx0fVxuXHRmbG9hdCB3MiggZmxvYXQgYSApe1xuXHRcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogKCBhICogKCAtIDMuMCAqIGEgKyAzLjAgKSArIDMuMCApICsgMS4wICk7XG5cdH1cblx0ZmxvYXQgdzMoIGZsb2F0IGEgKSB7XG5cdFx0cmV0dXJuICggMS4wIC8gNi4wICkgKiAoIGEgKiBhICogYSApO1xuXHR9XG5cdGZsb2F0IGcwKCBmbG9hdCBhICkge1xuXHRcdHJldHVybiB3MCggYSApICsgdzEoIGEgKTtcblx0fVxuXHRmbG9hdCBnMSggZmxvYXQgYSApIHtcblx0XHRyZXR1cm4gdzIoIGEgKSArIHczKCBhICk7XG5cdH1cblx0ZmxvYXQgaDAoIGZsb2F0IGEgKSB7XG5cdFx0cmV0dXJuIC0gMS4wICsgdzEoIGEgKSAvICggdzAoIGEgKSArIHcxKCBhICkgKTtcblx0fVxuXHRmbG9hdCBoMSggZmxvYXQgYSApIHtcblx0XHRyZXR1cm4gMS4wICsgdzMoIGEgKSAvICggdzIoIGEgKSArIHczKCBhICkgKTtcblx0fVxuXHR2ZWM0IGJpY3ViaWMoIHNhbXBsZXIyRCB0ZXgsIHZlYzIgdXYsIHZlYzQgdGV4ZWxTaXplLCBmbG9hdCBsb2QgKSB7XG5cdFx0dXYgPSB1diAqIHRleGVsU2l6ZS56dyArIDAuNTtcblx0XHR2ZWMyIGl1diA9IGZsb29yKCB1diApO1xuXHRcdHZlYzIgZnV2ID0gZnJhY3QoIHV2ICk7XG5cdFx0ZmxvYXQgZzB4ID0gZzAoIGZ1di54ICk7XG5cdFx0ZmxvYXQgZzF4ID0gZzEoIGZ1di54ICk7XG5cdFx0ZmxvYXQgaDB4ID0gaDAoIGZ1di54ICk7XG5cdFx0ZmxvYXQgaDF4ID0gaDEoIGZ1di54ICk7XG5cdFx0ZmxvYXQgaDB5ID0gaDAoIGZ1di55ICk7XG5cdFx0ZmxvYXQgaDF5ID0gaDEoIGZ1di55ICk7XG5cdFx0dmVjMiBwMCA9ICggdmVjMiggaXV2LnggKyBoMHgsIGl1di55ICsgaDB5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcblx0XHR2ZWMyIHAxID0gKCB2ZWMyKCBpdXYueCArIGgxeCwgaXV2LnkgKyBoMHkgKSAtIDAuNSApICogdGV4ZWxTaXplLnh5O1xuXHRcdHZlYzIgcDIgPSAoIHZlYzIoIGl1di54ICsgaDB4LCBpdXYueSArIGgxeSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XG5cdFx0dmVjMiBwMyA9ICggdmVjMiggaXV2LnggKyBoMXgsIGl1di55ICsgaDF5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcblx0XHRyZXR1cm4gZzAoIGZ1di55ICkgKiAoIGcweCAqIHRleHR1cmVMb2QoIHRleCwgcDAsIGxvZCApICsgZzF4ICogdGV4dHVyZUxvZCggdGV4LCBwMSwgbG9kICkgKSArXG5cdFx0XHRnMSggZnV2LnkgKSAqICggZzB4ICogdGV4dHVyZUxvZCggdGV4LCBwMiwgbG9kICkgKyBnMXggKiB0ZXh0dXJlTG9kKCB0ZXgsIHAzLCBsb2QgKSApO1xuXHR9XG5cdHZlYzQgdGV4dHVyZUJpY3ViaWMoIHNhbXBsZXIyRCBzYW1wbGVyLCB2ZWMyIHV2LCBmbG9hdCBsb2QgKSB7XG5cdFx0dmVjMiBmTG9kU2l6ZSA9IHZlYzIoIHRleHR1cmVTaXplKCBzYW1wbGVyLCBpbnQoIGxvZCApICkgKTtcblx0XHR2ZWMyIGNMb2RTaXplID0gdmVjMiggdGV4dHVyZVNpemUoIHNhbXBsZXIsIGludCggbG9kICsgMS4wICkgKSApO1xuXHRcdHZlYzIgZkxvZFNpemVJbnYgPSAxLjAgLyBmTG9kU2l6ZTtcblx0XHR2ZWMyIGNMb2RTaXplSW52ID0gMS4wIC8gY0xvZFNpemU7XG5cdFx0dmVjNCBmU2FtcGxlID0gYmljdWJpYyggc2FtcGxlciwgdXYsIHZlYzQoIGZMb2RTaXplSW52LCBmTG9kU2l6ZSApLCBmbG9vciggbG9kICkgKTtcblx0XHR2ZWM0IGNTYW1wbGUgPSBiaWN1YmljKCBzYW1wbGVyLCB1diwgdmVjNCggY0xvZFNpemVJbnYsIGNMb2RTaXplICksIGNlaWwoIGxvZCApICk7XG5cdFx0cmV0dXJuIG1peCggZlNhbXBsZSwgY1NhbXBsZSwgZnJhY3QoIGxvZCApICk7XG5cdH1cblx0dmVjMyBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCB0aGlja25lc3MsIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gbWF0NCBtb2RlbE1hdHJpeCApIHtcblx0XHR2ZWMzIHJlZnJhY3Rpb25WZWN0b3IgPSByZWZyYWN0KCAtIHYsIG5vcm1hbGl6ZSggbiApLCAxLjAgLyBpb3IgKTtcblx0XHR2ZWMzIG1vZGVsU2NhbGU7XG5cdFx0bW9kZWxTY2FsZS54ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMCBdLnh5eiApICk7XG5cdFx0bW9kZWxTY2FsZS55ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMSBdLnh5eiApICk7XG5cdFx0bW9kZWxTY2FsZS56ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMiBdLnh5eiApICk7XG5cdFx0cmV0dXJuIG5vcm1hbGl6ZSggcmVmcmFjdGlvblZlY3RvciApICogdGhpY2tuZXNzICogbW9kZWxTY2FsZTtcblx0fVxuXHRmbG9hdCBhcHBseUlvclRvUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGlvciApIHtcblx0XHRyZXR1cm4gcm91Z2huZXNzICogY2xhbXAoIGlvciAqIDIuMCAtIDIuMCwgMC4wLCAxLjAgKTtcblx0fVxuXHR2ZWM0IGdldFRyYW5zbWlzc2lvblNhbXBsZSggY29uc3QgaW4gdmVjMiBmcmFnQ29vcmQsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgaW9yICkge1xuXHRcdGZsb2F0IGxvZCA9IGxvZzIoIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnggKSAqIGFwcGx5SW9yVG9Sb3VnaG5lc3MoIHJvdWdobmVzcywgaW9yICk7XG5cdFx0cmV0dXJuIHRleHR1cmVCaWN1YmljKCB0cmFuc21pc3Npb25TYW1wbGVyTWFwLCBmcmFnQ29vcmQueHksIGxvZCApO1xuXHR9XG5cdHZlYzMgdm9sdW1lQXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IHRyYW5zbWlzc2lvbkRpc3RhbmNlLCBjb25zdCBpbiB2ZWMzIGF0dGVudWF0aW9uQ29sb3IsIGNvbnN0IGluIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2UgKSB7XG5cdFx0aWYgKCBpc2luZiggYXR0ZW51YXRpb25EaXN0YW5jZSApICkge1xuXHRcdFx0cmV0dXJuIHZlYzMoIDEuMCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2ZWMzIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgPSAtbG9nKCBhdHRlbnVhdGlvbkNvbG9yICkgLyBhdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdFx0dmVjMyB0cmFuc21pdHRhbmNlID0gZXhwKCAtIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgKiB0cmFuc21pc3Npb25EaXN0YW5jZSApO1x0XHRcdHJldHVybiB0cmFuc21pdHRhbmNlO1xuXHRcdH1cblx0fVxuXHR2ZWM0IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yLFxuXHRcdGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIHZlYzMgcG9zaXRpb24sIGNvbnN0IGluIG1hdDQgbW9kZWxNYXRyaXgsXG5cdFx0Y29uc3QgaW4gbWF0NCB2aWV3TWF0cml4LCBjb25zdCBpbiBtYXQ0IHByb2pNYXRyaXgsIGNvbnN0IGluIGZsb2F0IGRpc3BlcnNpb24sIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gZmxvYXQgdGhpY2tuZXNzLFxuXHRcdGNvbnN0IGluIHZlYzMgYXR0ZW51YXRpb25Db2xvciwgY29uc3QgaW4gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZSApIHtcblx0XHR2ZWM0IHRyYW5zbWl0dGVkTGlnaHQ7XG5cdFx0dmVjMyB0cmFuc21pdHRhbmNlO1xuXHRcdCNpZmRlZiBVU0VfRElTUEVSU0lPTlxuXHRcdFx0ZmxvYXQgaGFsZlNwcmVhZCA9ICggaW9yIC0gMS4wICkgKiAwLjAyNSAqIGRpc3BlcnNpb247XG5cdFx0XHR2ZWMzIGlvcnMgPSB2ZWMzKCBpb3IgLSBoYWxmU3ByZWFkLCBpb3IsIGlvciArIGhhbGZTcHJlYWQgKTtcblx0XHRcdGZvciAoIGludCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cdFx0XHRcdHZlYzMgdHJhbnNtaXNzaW9uUmF5ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvcnNbIGkgXSwgbW9kZWxNYXRyaXggKTtcblx0XHRcdFx0dmVjMyByZWZyYWN0ZWRSYXlFeGl0ID0gcG9zaXRpb24gKyB0cmFuc21pc3Npb25SYXk7XG5cdFx0XHRcdHZlYzQgbmRjUG9zID0gcHJvak1hdHJpeCAqIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZyYWN0ZWRSYXlFeGl0LCAxLjAgKTtcblx0XHRcdFx0dmVjMiByZWZyYWN0aW9uQ29vcmRzID0gbmRjUG9zLnh5IC8gbmRjUG9zLnc7XG5cdFx0XHRcdHJlZnJhY3Rpb25Db29yZHMgKz0gMS4wO1xuXHRcdFx0XHRyZWZyYWN0aW9uQ29vcmRzIC89IDIuMDtcblx0XHRcdFx0dmVjNCB0cmFuc21pc3Npb25TYW1wbGUgPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yc1sgaSBdICk7XG5cdFx0XHRcdHRyYW5zbWl0dGVkTGlnaHRbIGkgXSA9IHRyYW5zbWlzc2lvblNhbXBsZVsgaSBdO1xuXHRcdFx0XHR0cmFuc21pdHRlZExpZ2h0LmEgKz0gdHJhbnNtaXNzaW9uU2FtcGxlLmE7XG5cdFx0XHRcdHRyYW5zbWl0dGFuY2VbIGkgXSA9IGRpZmZ1c2VDb2xvclsgaSBdICogdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKVsgaSBdO1xuXHRcdFx0fVxuXHRcdFx0dHJhbnNtaXR0ZWRMaWdodC5hIC89IDMuMDtcblx0XHQjZWxzZVxuXHRcdFx0dmVjMyB0cmFuc21pc3Npb25SYXkgPSBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIG4sIHYsIHRoaWNrbmVzcywgaW9yLCBtb2RlbE1hdHJpeCApO1xuXHRcdFx0dmVjMyByZWZyYWN0ZWRSYXlFeGl0ID0gcG9zaXRpb24gKyB0cmFuc21pc3Npb25SYXk7XG5cdFx0XHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XG5cdFx0XHR2ZWMyIHJlZnJhY3Rpb25Db29yZHMgPSBuZGNQb3MueHkgLyBuZGNQb3Mudztcblx0XHRcdHJlZnJhY3Rpb25Db29yZHMgKz0gMS4wO1xuXHRcdFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XG5cdFx0XHR0cmFuc21pdHRlZExpZ2h0ID0gZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCByZWZyYWN0aW9uQ29vcmRzLCByb3VnaG5lc3MsIGlvciApO1xuXHRcdFx0dHJhbnNtaXR0YW5jZSA9IGRpZmZ1c2VDb2xvciAqIHZvbHVtZUF0dGVudWF0aW9uKCBsZW5ndGgoIHRyYW5zbWlzc2lvblJheSApLCBhdHRlbnVhdGlvbkNvbG9yLCBhdHRlbnVhdGlvbkRpc3RhbmNlICk7XG5cdFx0I2VuZGlmXG5cdFx0dmVjMyBhdHRlbnVhdGVkQ29sb3IgPSB0cmFuc21pdHRhbmNlICogdHJhbnNtaXR0ZWRMaWdodC5yZ2I7XG5cdFx0dmVjMyBGID0gRW52aXJvbm1lbnRCUkRGKCBuLCB2LCBzcGVjdWxhckNvbG9yLCBzcGVjdWxhckY5MCwgcm91Z2huZXNzICk7XG5cdFx0ZmxvYXQgdHJhbnNtaXR0YW5jZUZhY3RvciA9ICggdHJhbnNtaXR0YW5jZS5yICsgdHJhbnNtaXR0YW5jZS5nICsgdHJhbnNtaXR0YW5jZS5iICkgLyAzLjA7XG5cdFx0cmV0dXJuIHZlYzQoICggMS4wIC0gRiApICogYXR0ZW51YXRlZENvbG9yLCAxLjAgLSAoIDEuMCAtIHRyYW5zbWl0dGVkTGlnaHQuYSApICogdHJhbnNtaXR0YW5jZUZhY3RvciApO1xuXHR9XG4jZW5kaWYiOwoKICAgIHZhciB1dl9wYXJzX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBVU0VfVVYgKSB8fCBkZWZpbmVkKCBVU0VfQU5JU09UUk9QWSApXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfTUFQXG5cdHZhcnlpbmcgdmVjMiB2TWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblx0dmFyeWluZyB2ZWMyIHZBbHBoYU1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0xJR0hUTUFQXG5cdHZhcnlpbmcgdmVjMiB2TGlnaHRNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9BT01BUFxuXHR2YXJ5aW5nIHZlYzIgdkFvTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQlVNUE1BUFxuXHR2YXJ5aW5nIHZlYzIgdkJ1bXBNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9OT1JNQUxNQVBcblx0dmFyeWluZyB2ZWMyIHZOb3JtYWxNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxuXHR2YXJ5aW5nIHZlYzIgdkVtaXNzaXZlTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXG5cdHZhcnlpbmcgdmVjMiB2TWV0YWxuZXNzTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXG5cdHZhcnlpbmcgdmVjMiB2Um91Z2huZXNzTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxuXHR2YXJ5aW5nIHZlYzIgdkFuaXNvdHJvcHlNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcblx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Tm9ybWFsTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxuXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdFJvdWdobmVzc01hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXG5cdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVBcblx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXG5cdHZhcnlpbmcgdmVjMiB2U2hlZW5Db2xvck1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxuXHR2YXJ5aW5nIHZlYzIgdlNoZWVuUm91Z2huZXNzTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcblx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhck1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXG5cdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJDb2xvck1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFySW50ZW5zaXR5TWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXG5cdHVuaWZvcm0gbWF0MyB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2VHJhbnNtaXNzaW9uTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXG5cdHVuaWZvcm0gbWF0MyB0aGlja25lc3NNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2VGhpY2tuZXNzTWFwVXY7XG4jZW5kaWYiOwoKICAgIHZhciB1dl9wYXJzX3ZlcnRleCA9ICIjaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxuXHR2YXJ5aW5nIHZlYzIgdlV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX01BUFxuXHR1bmlmb3JtIG1hdDMgbWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdk1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cdHVuaWZvcm0gbWF0MyBhbHBoYU1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZBbHBoYU1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0xJR0hUTUFQXG5cdHVuaWZvcm0gbWF0MyBsaWdodE1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZMaWdodE1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0FPTUFQXG5cdHVuaWZvcm0gbWF0MyBhb01hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZBb01hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0JVTVBNQVBcblx0dW5pZm9ybSBtYXQzIGJ1bXBNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2QnVtcE1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxuXHR1bmlmb3JtIG1hdDMgbm9ybWFsTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdk5vcm1hbE1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXHR1bmlmb3JtIG1hdDMgZGlzcGxhY2VtZW50TWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdkRpc3BsYWNlbWVudE1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cdHVuaWZvcm0gbWF0MyBlbWlzc2l2ZU1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZFbWlzc2l2ZU1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxuXHR1bmlmb3JtIG1hdDMgbWV0YWxuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdk1ldGFsbmVzc01hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxuXHR1bmlmb3JtIG1hdDMgcm91Z2huZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdlJvdWdobmVzc01hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcblx0dW5pZm9ybSBtYXQzIGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2QW5pc290cm9weU1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxuXHR1bmlmb3JtIG1hdDMgY2xlYXJjb2F0TWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcblx0dW5pZm9ybSBtYXQzIGNsZWFyY29hdE5vcm1hbE1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXROb3JtYWxNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXG5cdHVuaWZvcm0gbWF0MyBjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hFRU5fQ09MT1JNQVBcblx0dW5pZm9ybSBtYXQzIHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U2hlZW5Db2xvck1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxuXHR1bmlmb3JtIG1hdDMgc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U2hlZW5Sb3VnaG5lc3NNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxuXHR1bmlmb3JtIG1hdDMgaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVBcblx0dW5pZm9ybSBtYXQzIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcblx0dW5pZm9ybSBtYXQzIHNwZWN1bGFyTWFwVHJhbnNmb3JtO1xuXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFyTWFwVXY7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU1BFQ1VMQVJfQ09MT1JNQVBcblx0dW5pZm9ybSBtYXQzIHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJDb2xvck1hcFV2O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXHR1bmlmb3JtIG1hdDMgc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm07XG5cdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcblx0dW5pZm9ybSBtYXQzIHRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZUcmFuc21pc3Npb25NYXBVdjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9USElDS05FU1NNQVBcblx0dW5pZm9ybSBtYXQzIHRoaWNrbmVzc01hcFRyYW5zZm9ybTtcblx0dmFyeWluZyB2ZWMyIHZUaGlja25lc3NNYXBVdjtcbiNlbmRpZiI7CgogICAgdmFyIHV2X3ZlcnRleCA9ICIjaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxuXHR2VXYgPSB2ZWMzKCB1diwgMSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX01BUFxuXHR2TWFwVXYgPSAoIG1hcFRyYW5zZm9ybSAqIHZlYzMoIE1BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblx0dkFscGhhTWFwVXYgPSAoIGFscGhhTWFwVHJhbnNmb3JtICogdmVjMyggQUxQSEFNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0xJR0hUTUFQXG5cdHZMaWdodE1hcFV2ID0gKCBsaWdodE1hcFRyYW5zZm9ybSAqIHZlYzMoIExJR0hUTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9BT01BUFxuXHR2QW9NYXBVdiA9ICggYW9NYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBT01BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQlVNUE1BUFxuXHR2QnVtcE1hcFV2ID0gKCBidW1wTWFwVHJhbnNmb3JtICogdmVjMyggQlVNUE1BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfTk9STUFMTUFQXG5cdHZOb3JtYWxNYXBVdiA9ICggbm9ybWFsTWFwVHJhbnNmb3JtICogdmVjMyggTk9STUFMTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcblx0dkRpc3BsYWNlbWVudE1hcFV2ID0gKCBkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBESVNQTEFDRU1FTlRNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXG5cdHZFbWlzc2l2ZU1hcFV2ID0gKCBlbWlzc2l2ZU1hcFRyYW5zZm9ybSAqIHZlYzMoIEVNSVNTSVZFTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcblx0dk1ldGFsbmVzc01hcFV2ID0gKCBtZXRhbG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBNRVRBTE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxuXHR2Um91Z2huZXNzTWFwVXYgPSAoIHJvdWdobmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIFJPVUdITkVTU01BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxuXHR2QW5pc290cm9weU1hcFV2ID0gKCBhbmlzb3Ryb3B5TWFwVHJhbnNmb3JtICogdmVjMyggQU5JU09UUk9QWU1BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXG5cdHZDbGVhcmNvYXRNYXBVdiA9ICggY2xlYXJjb2F0TWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cdHZDbGVhcmNvYXROb3JtYWxNYXBVdiA9ICggY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUX05PUk1BTE1BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxuXHR2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgPSAoIGNsZWFyY29hdFJvdWdobmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIENMRUFSQ09BVF9ST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXG5cdHZJcmlkZXNjZW5jZU1hcFV2ID0gKCBpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybSAqIHZlYzMoIElSSURFU0NFTkNFTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVBcblx0dklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYgPSAoIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtICogdmVjMyggSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxuXHR2U2hlZW5Db2xvck1hcFV2ID0gKCBzaGVlbkNvbG9yTWFwVHJhbnNmb3JtICogdmVjMyggU0hFRU5fQ09MT1JNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxuXHR2U2hlZW5Sb3VnaG5lc3NNYXBVdiA9ICggc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTSEVFTl9ST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXG5cdHZTcGVjdWxhck1hcFV2ID0gKCBzcGVjdWxhck1hcFRyYW5zZm9ybSAqIHZlYzMoIFNQRUNVTEFSTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxuXHR2U3BlY3VsYXJDb2xvck1hcFV2ID0gKCBzcGVjdWxhckNvbG9yTWFwVHJhbnNmb3JtICogdmVjMyggU1BFQ1VMQVJfQ09MT1JNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXHR2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdiA9ICggc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUl9JTlRFTlNJVFlNQVBfVVYsIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxuXHR2VHJhbnNtaXNzaW9uTWFwVXYgPSAoIHRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybSAqIHZlYzMoIFRSQU5TTUlTU0lPTk1BUF9VViwgMSApICkueHk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXG5cdHZUaGlja25lc3NNYXBVdiA9ICggdGhpY2tuZXNzTWFwVHJhbnNmb3JtICogdmVjMyggVEhJQ0tORVNTTUFQX1VWLCAxICkgKS54eTtcbiNlbmRpZiI7CgogICAgdmFyIHdvcmxkcG9zX3ZlcnRleCA9ICIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKSB8fCBkZWZpbmVkICggVVNFX1RSQU5TTUlTU0lPTiApIHx8IE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDBcblx0dmVjNCB3b3JsZFBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xuXHQjaWZkZWYgVVNFX0JBVENISU5HXG5cdFx0d29ybGRQb3NpdGlvbiA9IGJhdGNoaW5nTWF0cml4ICogd29ybGRQb3NpdGlvbjtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xuXHRcdHdvcmxkUG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIHdvcmxkUG9zaXRpb247XG5cdCNlbmRpZlxuXHR3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xuI2VuZGlmIjsKCiAgICBjb25zdCB2ZXJ0ZXgkaCA9ICJ2YXJ5aW5nIHZlYzIgdlV2O1xudW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xudm9pZCBtYWluKCkge1xuXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xuXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLnh5LCAxLjAsIDEuMCApO1xufSI7CgogICAgY29uc3QgZnJhZ21lbnQkaCA9ICJ1bmlmb3JtIHNhbXBsZXIyRCB0MkQ7XG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRJbnRlbnNpdHk7XG52YXJ5aW5nIHZlYzIgdlV2O1xudm9pZCBtYWluKCkge1xuXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKCB0MkQsIHZVdiApO1xuXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVcblx0XHR0ZXhDb2xvciA9IHZlYzQoIG1peCggcG93KCB0ZXhDb2xvci5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzKCAwLjA1MjEzMjcwMTQgKSwgdmVjMyggMi40ICkgKSwgdGV4Q29sb3IucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB0ZXhDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgdGV4Q29sb3IudyApO1xuXHQjZW5kaWZcblx0dGV4Q29sb3IucmdiICo9IGJhY2tncm91bmRJbnRlbnNpdHk7XG5cdGdsX0ZyYWdDb2xvciA9IHRleENvbG9yO1xuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxufSI7CgogICAgY29uc3QgdmVydGV4JGcgPSAidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG52b2lkIG1haW4oKSB7XG5cdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCRnID0gIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXG5cdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xuI2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcbiNlbmRpZlxudW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xudW5pZm9ybSBmbG9hdCBiYWNrZ3JvdW5kQmx1cnJpbmVzcztcbnVuaWZvcm0gZmxvYXQgYmFja2dyb3VuZEludGVuc2l0eTtcbnVuaWZvcm0gbWF0MyBiYWNrZ3JvdW5kUm90YXRpb247XG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcblx0XHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgYmFja2dyb3VuZFJvdGF0aW9uICogdmVjMyggZmxpcEVudk1hcCAqIHZXb3JsZERpcmVjdGlvbi54LCB2V29ybGREaXJlY3Rpb24ueXogKSApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcblx0XHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBiYWNrZ3JvdW5kUm90YXRpb24gKiB2V29ybGREaXJlY3Rpb24sIGJhY2tncm91bmRCbHVycmluZXNzICk7XG5cdCNlbHNlXG5cdFx0dmVjNCB0ZXhDb2xvciA9IHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHQjZW5kaWZcblx0dGV4Q29sb3IucmdiICo9IGJhY2tncm91bmRJbnRlbnNpdHk7XG5cdGdsX0ZyYWdDb2xvciA9IHRleENvbG9yO1xuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxufSI7CgogICAgY29uc3QgdmVydGV4JGYgPSAidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG52b2lkIG1haW4oKSB7XG5cdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCRmID0gInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XG51bmlmb3JtIGZsb2F0IHRGbGlwO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcbnZvaWQgbWFpbigpIHtcblx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcblx0Z2xfRnJhZ0NvbG9yID0gdGV4Q29sb3I7XG5cdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG59IjsKCiAgICBjb25zdCB2ZXJ0ZXgkZSA9ICIjaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXHRcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dkhpZ2hQcmVjaXNpb25aVyA9IGdsX1Bvc2l0aW9uLnp3O1xufSI7CgogICAgY29uc3QgZnJhZ21lbnQkZSA9ICIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXG5cdHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNlbmRpZlxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxudmFyeWluZyB2ZWMyIHZIaWdoUHJlY2lzaW9uWlc7XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcblx0XHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0ZmxvYXQgZnJhZ0Nvb3JkWiA9IDAuNSAqIHZIaWdoUHJlY2lzaW9uWldbMF0gLyB2SGlnaFByZWNpc2lvblpXWzFdICsgMC41O1xuXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXG5cdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyggMS4wIC0gZnJhZ0Nvb3JkWiApLCBvcGFjaXR5ICk7XG5cdCNlbGlmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMVxuXHRcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZnJhZ0Nvb3JkWiApO1xuXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDJcblx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrRGVwdGhUb1JHQiggZnJhZ0Nvb3JkWiApLCAxLjAgKTtcblx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAzXG5cdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja0RlcHRoVG9SRyggZnJhZ0Nvb3JkWiApLCAwLjAsIDEuMCApO1xuXHQjZW5kaWZcbn0iOwoKICAgIGNvbnN0IHZlcnRleCRkID0gIiNkZWZpbmUgRElTVEFOQ0VcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXHRcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcbn0iOwoKICAgIGNvbnN0IGZyYWdtZW50JGQgPSAiI2RlZmluZSBESVNUQU5DRVxudW5pZm9ybSB2ZWMzIHJlZmVyZW5jZVBvc2l0aW9uO1xudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbiAoKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xuXHRkaXN0ID0gKCBkaXN0IC0gbmVhckRpc3RhbmNlICkgLyAoIGZhckRpc3RhbmNlIC0gbmVhckRpc3RhbmNlICk7XG5cdGRpc3QgPSBzYXR1cmF0ZSggZGlzdCApO1xuXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcbn0iOwoKICAgIGNvbnN0IHZlcnRleCRjID0gInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG4jaW5jbHVkZSA8Y29tbW9uPlxudm9pZCBtYWluKCkge1xuXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCRjID0gInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG4jaW5jbHVkZSA8Y29tbW9uPlxudm9pZCBtYWluKCkge1xuXHR2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7XG5cdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcblx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG59IjsKCiAgICBjb25zdCB2ZXJ0ZXgkYiA9ICJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xuYXR0cmlidXRlIGZsb2F0IGxpbmVEaXN0YW5jZTtcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCRiID0gInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcbnVuaWZvcm0gZmxvYXQgdG90YWxTaXplO1xudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xuXHRcdGRpc2NhcmQ7XG5cdH1cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcblx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XG59IjsKCiAgICBjb25zdCB2ZXJ0ZXgkYSA9ICIjaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2lmIGRlZmluZWQgKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCAoIFVTRV9TS0lOTklORyApXG5cdFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2VuZGlmXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKICAgIGNvbnN0IGZyYWdtZW50JGEgPSAidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHQjaWZkZWYgVVNFX0xJR0hUTUFQXG5cdFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdkxpZ2h0TWFwVXYgKTtcblx0XHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eSAqIFJFQ0lQUk9DQUxfUEk7XG5cdCNlbHNlXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZlYzMoIDEuMCApO1xuXHQjZW5kaWZcblx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gZGlmZnVzZUNvbG9yLnJnYjtcblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IHZlcnRleCQ5ID0gIiNkZWZpbmUgTEFNQkVSVFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCQ5ID0gIiNkZWZpbmUgTEFNQkVSVFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJzZGZzPlxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XG5cdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cblx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IHZlcnRleCQ4ID0gIiNkZWZpbmUgTUFUQ0FQXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG5cdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xufSI7CgogICAgY29uc3QgZnJhZ21lbnQkOCA9ICIjZGVmaW5lIE1BVENBUFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIHNhbXBsZXIyRCBtYXRjYXA7XG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cdHZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xuXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XG5cdHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7XG5cdHZlYzIgdXYgPSB2ZWMyKCBkb3QoIHgsIG5vcm1hbCApLCBkb3QoIHksIG5vcm1hbCApICkgKiAwLjQ5NSArIDAuNTtcblx0I2lmZGVmIFVTRV9NQVRDQVBcblx0XHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XG5cdCNlbHNlXG5cdFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIHZlYzMoIG1peCggMC4yLCAwLjgsIHV2LnkgKSApLCAxLjAgKTtcblx0I2VuZGlmXG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxufSI7CgogICAgY29uc3QgdmVydGV4JDcgPSAiI2RlZmluZSBOT1JNQUxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxuXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNlbmRpZlxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSApXG5cdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuI2VuZGlmXG59IjsKCiAgICBjb25zdCBmcmFnbWVudCQ3ID0gIiNkZWZpbmUgTk9STUFMXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFIClcblx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jZW5kaWZcbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMC4wLCAwLjAsIDAuMCwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgZGlmZnVzZUNvbG9yLmEgKTtcblx0I2lmZGVmIE9QQVFVRVxuXHRcdGdsX0ZyYWdDb2xvci5hID0gMS4wO1xuXHQjZW5kaWZcbn0iOwoKICAgIGNvbnN0IHZlcnRleCQ2ID0gIiNkZWZpbmUgUEhPTkdcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxufSI7CgogICAgY29uc3QgZnJhZ21lbnQkNiA9ICIjZGVmaW5lIFBIT05HXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcbnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcblx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxpZ2h0c19waG9uZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cblx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IHZlcnRleCQ1ID0gIiNkZWZpbmUgU1RBTkRBUkRcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cblx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cblx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcbiNlbmRpZlxufSI7CgogICAgY29uc3QgZnJhZ21lbnQkNSA9ICIjZGVmaW5lIFNUQU5EQVJEXG4jaWZkZWYgUEhZU0lDQUxcblx0I2RlZmluZSBJT1Jcblx0I2RlZmluZSBVU0VfU1BFQ1VMQVJcbiNlbmRpZlxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2lmZGVmIElPUlxuXHR1bmlmb3JtIGZsb2F0IGlvcjtcbiNlbmRpZlxuI2lmZGVmIFVTRV9TUEVDVUxBUlxuXHR1bmlmb3JtIGZsb2F0IHNwZWN1bGFySW50ZW5zaXR5O1xuXHR1bmlmb3JtIHZlYzMgc3BlY3VsYXJDb2xvcjtcblx0I2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyQ29sb3JNYXA7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcblx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXQ7XG5cdHVuaWZvcm0gZmxvYXQgY2xlYXJjb2F0Um91Z2huZXNzO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0RJU1BFUlNJT05cblx0dW5pZm9ybSBmbG9hdCBkaXNwZXJzaW9uO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFXG5cdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2U7XG5cdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2VJT1I7XG5cdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtO1xuXHR1bmlmb3JtIGZsb2F0IGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTtcbiNlbmRpZlxuI2lmZGVmIFVTRV9TSEVFTlxuXHR1bmlmb3JtIHZlYzMgc2hlZW5Db2xvcjtcblx0dW5pZm9ybSBmbG9hdCBzaGVlblJvdWdobmVzcztcblx0I2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuQ29sb3JNYXA7XG5cdCNlbmRpZlxuXHQjaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuUm91Z2huZXNzTWFwO1xuXHQjZW5kaWZcbiNlbmRpZlxuI2lmZGVmIFVTRV9BTklTT1RST1BZXG5cdHVuaWZvcm0gdmVjMiBhbmlzb3Ryb3B5VmVjdG9yO1xuXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCBhbmlzb3Ryb3B5TWFwO1xuXHQjZW5kaWZcbiNlbmRpZlxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8aXJpZGVzY2VuY2VfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8aXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcblx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1ldGFsbmVzc21hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cdHZlYzMgdG90YWxEaWZmdXNlID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcblx0dmVjMyB0b3RhbFNwZWN1bGFyID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyO1xuXHQjaW5jbHVkZSA8dHJhbnNtaXNzaW9uX2ZyYWdtZW50PlxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB0b3RhbERpZmZ1c2UgKyB0b3RhbFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuXHQjaWZkZWYgVVNFX1NIRUVOXG5cdFx0ZmxvYXQgc2hlZW5FbmVyZ3lDb21wID0gMS4wIC0gMC4xNTcgKiBtYXgzKCBtYXRlcmlhbC5zaGVlbkNvbG9yICk7XG5cdFx0b3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiBzaGVlbkVuZXJneUNvbXAgKyBzaGVlblNwZWN1bGFyRGlyZWN0ICsgc2hlZW5TcGVjdWxhckluZGlyZWN0O1xuXHQjZW5kaWZcblx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcblx0XHRmbG9hdCBkb3ROVmNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5Vmlld0RpciApICk7XG5cdFx0dmVjMyBGY2MgPSBGX1NjaGxpY2soIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIGRvdE5WY2MgKTtcblx0XHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqICggMS4wIC0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogRmNjICkgKyAoIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICsgY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCApICogbWF0ZXJpYWwuY2xlYXJjb2F0O1xuXHQjZW5kaWZcblx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG59IjsKCiAgICBjb25zdCB2ZXJ0ZXgkNCA9ICIjZGVmaW5lIFRPT05cbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKICAgIGNvbnN0IGZyYWdtZW50JDQgPSAiI2RlZmluZSBUT09OXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJzZGZzPlxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGxpZ2h0c190b29uX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxufSI7CgogICAgY29uc3QgdmVydGV4JDMgPSAidW5pZm9ybSBmbG9hdCBzaXplO1xudW5pZm9ybSBmbG9hdCBzY2FsZTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbiNpZmRlZiBVU0VfUE9JTlRTX1VWXG5cdHZhcnlpbmcgdmVjMiB2VXY7XG5cdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcbiNlbmRpZlxudm9pZCBtYWluKCkge1xuXHQjaWZkZWYgVVNFX1BPSU5UU19VVlxuXHRcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHRnbF9Qb2ludFNpemUgPSBzaXplO1xuXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxuXHRcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcblx0XHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCQzID0gInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX3BhcnRpY2xlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XG5cdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IHZlcnRleCQyID0gIiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG59IjsKCiAgICBjb25zdCBmcmFnbWVudCQyID0gInVuaWZvcm0gdmVjMyBjb2xvcjtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IHZlcnRleCQxID0gInVuaWZvcm0gZmxvYXQgcm90YXRpb247XG51bmlmb3JtIHZlYzIgY2VudGVyO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXhbIDMgXTtcblx0dmVjMiBzY2FsZSA9IHZlYzIoIGxlbmd0aCggbW9kZWxNYXRyaXhbIDAgXS54eXogKSwgbGVuZ3RoKCBtb2RlbE1hdHJpeFsgMSBdLnh5eiApICk7XG5cdCNpZm5kZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxuXHRcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcblx0XHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcblx0I2VuZGlmXG5cdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XG5cdHZlYzIgcm90YXRlZFBvc2l0aW9uO1xuXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XG5cdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcblx0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKICAgIGNvbnN0IGZyYWdtZW50JDEgPSAidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxuXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcblx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cbn0iOwoKICAgIGNvbnN0IFNoYWRlckNodW5rID0gewogICAgCWFscGhhaGFzaF9mcmFnbWVudDogYWxwaGFoYXNoX2ZyYWdtZW50LAogICAgCWFscGhhaGFzaF9wYXJzX2ZyYWdtZW50OiBhbHBoYWhhc2hfcGFyc19mcmFnbWVudCwKICAgIAlhbHBoYW1hcF9mcmFnbWVudDogYWxwaGFtYXBfZnJhZ21lbnQsCiAgICAJYWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCwKICAgIAlhbHBoYXRlc3RfZnJhZ21lbnQ6IGFscGhhdGVzdF9mcmFnbWVudCwKICAgIAlhbHBoYXRlc3RfcGFyc19mcmFnbWVudDogYWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQsCiAgICAJYW9tYXBfZnJhZ21lbnQ6IGFvbWFwX2ZyYWdtZW50LAogICAgCWFvbWFwX3BhcnNfZnJhZ21lbnQ6IGFvbWFwX3BhcnNfZnJhZ21lbnQsCiAgICAJYmF0Y2hpbmdfcGFyc192ZXJ0ZXg6IGJhdGNoaW5nX3BhcnNfdmVydGV4LAogICAgCWJhdGNoaW5nX3ZlcnRleDogYmF0Y2hpbmdfdmVydGV4LAogICAgCWJlZ2luX3ZlcnRleDogYmVnaW5fdmVydGV4LAogICAgCWJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LAogICAgCWJzZGZzOiBic2RmcywKICAgIAlpcmlkZXNjZW5jZV9mcmFnbWVudDogaXJpZGVzY2VuY2VfZnJhZ21lbnQsCiAgICAJYnVtcG1hcF9wYXJzX2ZyYWdtZW50OiBidW1wbWFwX3BhcnNfZnJhZ21lbnQsCiAgICAJY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsCiAgICAJY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LAogICAgCWNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4LAogICAgCWNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsCiAgICAJY29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LAogICAgCWNvbG9yX3BhcnNfZnJhZ21lbnQ6IGNvbG9yX3BhcnNfZnJhZ21lbnQsCiAgICAJY29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LAogICAgCWNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LAogICAgCWNvbW1vbjogY29tbW9uLAogICAgCWN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LAogICAgCWRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCwKICAgIAlkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCwKICAgIAlkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LAogICAgCWVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCwKICAgIAllbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50LAogICAgCWNvbG9yc3BhY2VfZnJhZ21lbnQ6IGNvbG9yc3BhY2VfZnJhZ21lbnQsCiAgICAJY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50OiBjb2xvcnNwYWNlX3BhcnNfZnJhZ21lbnQsCiAgICAJZW52bWFwX2ZyYWdtZW50OiBlbnZtYXBfZnJhZ21lbnQsCiAgICAJZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQsCiAgICAJZW52bWFwX3BhcnNfZnJhZ21lbnQ6IGVudm1hcF9wYXJzX2ZyYWdtZW50LAogICAgCWVudm1hcF9wYXJzX3ZlcnRleDogZW52bWFwX3BhcnNfdmVydGV4LAogICAgCWVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCwKICAgIAllbnZtYXBfdmVydGV4OiBlbnZtYXBfdmVydGV4LAogICAgCWZvZ192ZXJ0ZXg6IGZvZ192ZXJ0ZXgsCiAgICAJZm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsCiAgICAJZm9nX2ZyYWdtZW50OiBmb2dfZnJhZ21lbnQsCiAgICAJZm9nX3BhcnNfZnJhZ21lbnQ6IGZvZ19wYXJzX2ZyYWdtZW50LAogICAgCWdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsCiAgICAJbGlnaHRtYXBfcGFyc19mcmFnbWVudDogbGlnaHRtYXBfcGFyc19mcmFnbWVudCwKICAgIAlsaWdodHNfbGFtYmVydF9mcmFnbWVudDogbGlnaHRzX2xhbWJlcnRfZnJhZ21lbnQsCiAgICAJbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudDogbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCwKICAgIAlsaWdodHNfcGFyc19iZWdpbjogbGlnaHRzX3BhcnNfYmVnaW4sCiAgICAJbGlnaHRzX3Rvb25fZnJhZ21lbnQ6IGxpZ2h0c190b29uX2ZyYWdtZW50LAogICAgCWxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQsCiAgICAJbGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsCiAgICAJbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50LAogICAgCWxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LAogICAgCWxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCwKICAgIAlsaWdodHNfZnJhZ21lbnRfYmVnaW46IGxpZ2h0c19mcmFnbWVudF9iZWdpbiwKICAgIAlsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsCiAgICAJbGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCwKICAgIAlsb2dkZXB0aGJ1Zl9mcmFnbWVudDogbG9nZGVwdGhidWZfZnJhZ21lbnQsCiAgICAJbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCwKICAgIAlsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsCiAgICAJbG9nZGVwdGhidWZfdmVydGV4OiBsb2dkZXB0aGJ1Zl92ZXJ0ZXgsCiAgICAJbWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsCiAgICAJbWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LAogICAgCW1hcF9wYXJ0aWNsZV9mcmFnbWVudDogbWFwX3BhcnRpY2xlX2ZyYWdtZW50LAogICAgCW1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCwKICAgIAltZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCwKICAgIAltZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudDogbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQsCiAgICAJbW9ycGhpbnN0YW5jZV92ZXJ0ZXg6IG1vcnBoaW5zdGFuY2VfdmVydGV4LAogICAgCW1vcnBoY29sb3JfdmVydGV4OiBtb3JwaGNvbG9yX3ZlcnRleCwKICAgIAltb3JwaG5vcm1hbF92ZXJ0ZXg6IG1vcnBobm9ybWFsX3ZlcnRleCwKICAgIAltb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsCiAgICAJbW9ycGh0YXJnZXRfdmVydGV4OiBtb3JwaHRhcmdldF92ZXJ0ZXgsCiAgICAJbm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBub3JtYWxfZnJhZ21lbnRfYmVnaW4sCiAgICAJbm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLAogICAgCW5vcm1hbF9wYXJzX2ZyYWdtZW50OiBub3JtYWxfcGFyc19mcmFnbWVudCwKICAgIAlub3JtYWxfcGFyc192ZXJ0ZXg6IG5vcm1hbF9wYXJzX3ZlcnRleCwKICAgIAlub3JtYWxfdmVydGV4OiBub3JtYWxfdmVydGV4LAogICAgCW5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50OiBub3JtYWxtYXBfcGFyc19mcmFnbWVudCwKICAgIAljbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luLAogICAgCWNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLAogICAgCWNsZWFyY29hdF9wYXJzX2ZyYWdtZW50OiBjbGVhcmNvYXRfcGFyc19mcmFnbWVudCwKICAgIAlpcmlkZXNjZW5jZV9wYXJzX2ZyYWdtZW50OiBpcmlkZXNjZW5jZV9wYXJzX2ZyYWdtZW50LAogICAgCW9wYXF1ZV9mcmFnbWVudDogb3BhcXVlX2ZyYWdtZW50LAogICAgCXBhY2tpbmc6IHBhY2tpbmcsCiAgICAJcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudDogcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCwKICAgIAlwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsCiAgICAJZGl0aGVyaW5nX2ZyYWdtZW50OiBkaXRoZXJpbmdfZnJhZ21lbnQsCiAgICAJZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ6IGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50LAogICAgCXJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LAogICAgCXJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCwKICAgIAlzaGFkb3dtYXBfcGFyc19mcmFnbWVudDogc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsCiAgICAJc2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsCiAgICAJc2hhZG93bWFwX3ZlcnRleDogc2hhZG93bWFwX3ZlcnRleCwKICAgIAlzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCwKICAgIAlza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCwKICAgIAlza2lubmluZ19wYXJzX3ZlcnRleDogc2tpbm5pbmdfcGFyc192ZXJ0ZXgsCiAgICAJc2tpbm5pbmdfdmVydGV4OiBza2lubmluZ192ZXJ0ZXgsCiAgICAJc2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LAogICAgCXNwZWN1bGFybWFwX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9mcmFnbWVudCwKICAgIAlzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50LAogICAgCXRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCwKICAgIAl0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50OiB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50LAogICAgCXRyYW5zbWlzc2lvbl9mcmFnbWVudDogdHJhbnNtaXNzaW9uX2ZyYWdtZW50LAogICAgCXRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCwKICAgIAl1dl9wYXJzX2ZyYWdtZW50OiB1dl9wYXJzX2ZyYWdtZW50LAogICAgCXV2X3BhcnNfdmVydGV4OiB1dl9wYXJzX3ZlcnRleCwKICAgIAl1dl92ZXJ0ZXg6IHV2X3ZlcnRleCwKICAgIAl3b3JsZHBvc192ZXJ0ZXg6IHdvcmxkcG9zX3ZlcnRleCwKCiAgICAJYmFja2dyb3VuZF92ZXJ0OiB2ZXJ0ZXgkaCwKICAgIAliYWNrZ3JvdW5kX2ZyYWc6IGZyYWdtZW50JGgsCiAgICAJYmFja2dyb3VuZEN1YmVfdmVydDogdmVydGV4JGcsCiAgICAJYmFja2dyb3VuZEN1YmVfZnJhZzogZnJhZ21lbnQkZywKICAgIAljdWJlX3ZlcnQ6IHZlcnRleCRmLAogICAgCWN1YmVfZnJhZzogZnJhZ21lbnQkZiwKICAgIAlkZXB0aF92ZXJ0OiB2ZXJ0ZXgkZSwKICAgIAlkZXB0aF9mcmFnOiBmcmFnbWVudCRlLAogICAgCWRpc3RhbmNlUkdCQV92ZXJ0OiB2ZXJ0ZXgkZCwKICAgIAlkaXN0YW5jZVJHQkFfZnJhZzogZnJhZ21lbnQkZCwKICAgIAllcXVpcmVjdF92ZXJ0OiB2ZXJ0ZXgkYywKICAgIAllcXVpcmVjdF9mcmFnOiBmcmFnbWVudCRjLAogICAgCWxpbmVkYXNoZWRfdmVydDogdmVydGV4JGIsCiAgICAJbGluZWRhc2hlZF9mcmFnOiBmcmFnbWVudCRiLAogICAgCW1lc2hiYXNpY192ZXJ0OiB2ZXJ0ZXgkYSwKICAgIAltZXNoYmFzaWNfZnJhZzogZnJhZ21lbnQkYSwKICAgIAltZXNobGFtYmVydF92ZXJ0OiB2ZXJ0ZXgkOSwKICAgIAltZXNobGFtYmVydF9mcmFnOiBmcmFnbWVudCQ5LAogICAgCW1lc2htYXRjYXBfdmVydDogdmVydGV4JDgsCiAgICAJbWVzaG1hdGNhcF9mcmFnOiBmcmFnbWVudCQ4LAogICAgCW1lc2hub3JtYWxfdmVydDogdmVydGV4JDcsCiAgICAJbWVzaG5vcm1hbF9mcmFnOiBmcmFnbWVudCQ3LAogICAgCW1lc2hwaG9uZ192ZXJ0OiB2ZXJ0ZXgkNiwKICAgIAltZXNocGhvbmdfZnJhZzogZnJhZ21lbnQkNiwKICAgIAltZXNocGh5c2ljYWxfdmVydDogdmVydGV4JDUsCiAgICAJbWVzaHBoeXNpY2FsX2ZyYWc6IGZyYWdtZW50JDUsCiAgICAJbWVzaHRvb25fdmVydDogdmVydGV4JDQsCiAgICAJbWVzaHRvb25fZnJhZzogZnJhZ21lbnQkNCwKICAgIAlwb2ludHNfdmVydDogdmVydGV4JDMsCiAgICAJcG9pbnRzX2ZyYWc6IGZyYWdtZW50JDMsCiAgICAJc2hhZG93X3ZlcnQ6IHZlcnRleCQyLAogICAgCXNoYWRvd19mcmFnOiBmcmFnbWVudCQyLAogICAgCXNwcml0ZV92ZXJ0OiB2ZXJ0ZXgkMSwKICAgIAlzcHJpdGVfZnJhZzogZnJhZ21lbnQkMQogICAgfTsKCiAgICAvLyBVbmlmb3JtcyBsaWJyYXJ5IGZvciBzaGFyZWQgd2ViZ2wgc2hhZGVycwogICAgY29uc3QgVW5pZm9ybXNMaWIgPSB7CgogICAgCWNvbW1vbjogewoKICAgIAkJZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSwKICAgIAkJb3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sCgogICAgCQltYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJbWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKCiAgICAJCWFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCWFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKCiAgICAJCWFscGhhVGVzdDogeyB2YWx1ZTogMCB9CgogICAgCX0sCgogICAgCXNwZWN1bGFybWFwOiB7CgogICAgCQlzcGVjdWxhck1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQlzcGVjdWxhck1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0KCiAgICAJfSwKCiAgICAJZW52bWFwOiB7CgogICAgCQllbnZNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJZW52TWFwUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQlmbGlwRW52TWFwOiB7IHZhbHVlOiAtMSB9LAogICAgCQlyZWZsZWN0aXZpdHk6IHsgdmFsdWU6IDEuMCB9LCAvLyBiYXNpYywgbGFtYmVydCwgcGhvbmcKICAgIAkJaW9yOiB7IHZhbHVlOiAxLjUgfSwgLy8gcGh5c2ljYWwKICAgIAkJcmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH0sIC8vIGJhc2ljLCBsYW1iZXJ0LCBwaG9uZwoKICAgIAl9LAoKICAgIAlhb21hcDogewoKICAgIAkJYW9NYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJYW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSwKICAgIAkJYW9NYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9CgogICAgCX0sCgogICAgCWxpZ2h0bWFwOiB7CgogICAgCQlsaWdodE1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQlsaWdodE1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9LAogICAgCQlsaWdodE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0KCiAgICAJfSwKCiAgICAJYnVtcG1hcDogewoKICAgIAkJYnVtcE1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQlidW1wTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJYnVtcFNjYWxlOiB7IHZhbHVlOiAxIH0KCiAgICAJfSwKCiAgICAJbm9ybWFsbWFwOiB7CgogICAgCQlub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJbm9ybWFsTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJbm9ybWFsU2NhbGU6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoIDEsIDEgKSB9CgogICAgCX0sCgogICAgCWRpc3BsYWNlbWVudG1hcDogewoKICAgIAkJZGlzcGxhY2VtZW50TWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCWRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCWRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sCiAgICAJCWRpc3BsYWNlbWVudEJpYXM6IHsgdmFsdWU6IDAgfQoKICAgIAl9LAoKICAgIAllbWlzc2l2ZW1hcDogewoKICAgIAkJZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJZW1pc3NpdmVNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9CgogICAgCX0sCgogICAgCW1ldGFsbmVzc21hcDogewoKICAgIAkJbWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCW1ldGFsbmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0KCiAgICAJfSwKCiAgICAJcm91Z2huZXNzbWFwOiB7CgogICAgCQlyb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJcm91Z2huZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfQoKICAgIAl9LAoKICAgIAlncmFkaWVudG1hcDogewoKICAgIAkJZ3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfQoKICAgIAl9LAoKICAgIAlmb2c6IHsKCiAgICAJCWZvZ0RlbnNpdHk6IHsgdmFsdWU6IDAuMDAwMjUgfSwKICAgIAkJZm9nTmVhcjogeyB2YWx1ZTogMSB9LAogICAgCQlmb2dGYXI6IHsgdmFsdWU6IDIwMDAgfSwKICAgIAkJZm9nQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweGZmZmZmZiApIH0KCiAgICAJfSwKCiAgICAJbGlnaHRzOiB7CgogICAgCQlhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSwKCiAgICAJCWxpZ2h0UHJvYmU6IHsgdmFsdWU6IFtdIH0sCgogICAgCQlkaXJlY3Rpb25hbExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCWRpcmVjdGlvbjoge30sCiAgICAJCQljb2xvcjoge30KICAgIAkJfSB9LAoKICAgIAkJZGlyZWN0aW9uYWxMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CiAgICAJCQlzaGFkb3dJbnRlbnNpdHk6IDEsCiAgICAJCQlzaGFkb3dCaWFzOiB7fSwKICAgIAkJCXNoYWRvd05vcm1hbEJpYXM6IHt9LAogICAgCQkJc2hhZG93UmFkaXVzOiB7fSwKICAgIAkJCXNoYWRvd01hcFNpemU6IHt9CiAgICAJCX0gfSwKCiAgICAJCWRpcmVjdGlvbmFsU2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LAogICAgCQlkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSwKCiAgICAJCXNwb3RMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CiAgICAJCQljb2xvcjoge30sCiAgICAJCQlwb3NpdGlvbjoge30sCiAgICAJCQlkaXJlY3Rpb246IHt9LAogICAgCQkJZGlzdGFuY2U6IHt9LAogICAgCQkJY29uZUNvczoge30sCiAgICAJCQlwZW51bWJyYUNvczoge30sCiAgICAJCQlkZWNheToge30KICAgIAkJfSB9LAoKICAgIAkJc3BvdExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCXNoYWRvd0ludGVuc2l0eTogMSwKICAgIAkJCXNoYWRvd0JpYXM6IHt9LAogICAgCQkJc2hhZG93Tm9ybWFsQmlhczoge30sCiAgICAJCQlzaGFkb3dSYWRpdXM6IHt9LAogICAgCQkJc2hhZG93TWFwU2l6ZToge30KICAgIAkJfSB9LAoKICAgIAkJc3BvdExpZ2h0TWFwOiB7IHZhbHVlOiBbXSB9LAogICAgCQlzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LAogICAgCQlzcG90TGlnaHRNYXRyaXg6IHsgdmFsdWU6IFtdIH0sCgogICAgCQlwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCWNvbG9yOiB7fSwKICAgIAkJCXBvc2l0aW9uOiB7fSwKICAgIAkJCWRlY2F5OiB7fSwKICAgIAkJCWRpc3RhbmNlOiB7fQogICAgCQl9IH0sCgogICAgCQlwb2ludExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCXNoYWRvd0ludGVuc2l0eTogMSwKICAgIAkJCXNoYWRvd0JpYXM6IHt9LAogICAgCQkJc2hhZG93Tm9ybWFsQmlhczoge30sCiAgICAJCQlzaGFkb3dSYWRpdXM6IHt9LAogICAgCQkJc2hhZG93TWFwU2l6ZToge30sCiAgICAJCQlzaGFkb3dDYW1lcmFOZWFyOiB7fSwKICAgIAkJCXNoYWRvd0NhbWVyYUZhcjoge30KICAgIAkJfSB9LAoKICAgIAkJcG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sCiAgICAJCXBvaW50U2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LAoKICAgIAkJaGVtaXNwaGVyZUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCWRpcmVjdGlvbjoge30sCiAgICAJCQlza3lDb2xvcjoge30sCiAgICAJCQlncm91bmRDb2xvcjoge30KICAgIAkJfSB9LAoKICAgIAkJLy8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgQlJERiBkYXRhIG5lZWRzIHRvIGJlIG1vdmVkIGZyb20gZXhhbXBsZSB0byBtYWluIHNyYwogICAgCQlyZWN0QXJlYUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHsKICAgIAkJCWNvbG9yOiB7fSwKICAgIAkJCXBvc2l0aW9uOiB7fSwKICAgIAkJCXdpZHRoOiB7fSwKICAgIAkJCWhlaWdodDoge30KICAgIAkJfSB9LAoKICAgIAkJbHRjXzE6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJbHRjXzI6IHsgdmFsdWU6IG51bGwgfQoKICAgIAl9LAoKICAgIAlwb2ludHM6IHsKCiAgICAJCWRpZmZ1c2U6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweGZmZmZmZiApIH0sCiAgICAJCW9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LAogICAgCQlzaXplOiB7IHZhbHVlOiAxLjAgfSwKICAgIAkJc2NhbGU6IHsgdmFsdWU6IDEuMCB9LAogICAgCQltYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJYWxwaGFNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJYWxwaGFNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQlhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfSwKICAgIAkJdXZUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9CgogICAgCX0sCgogICAgCXNwcml0ZTogewoKICAgIAkJZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSwKICAgIAkJb3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sCiAgICAJCWNlbnRlcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LAogICAgCQlyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sCiAgICAJCW1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQltYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQlhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQlhbHBoYU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCWFscGhhVGVzdDogeyB2YWx1ZTogMCB9CgogICAgCX0KCiAgICB9OwoKICAgIGNvbnN0IFNoYWRlckxpYiA9IHsKCiAgICAJYmFzaWM6IHsKCiAgICAJCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJCVVuaWZvcm1zTGliLmNvbW1vbiwKICAgIAkJCVVuaWZvcm1zTGliLnNwZWN1bGFybWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZW52bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuYW9tYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5saWdodG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmZvZwogICAgCQldICksCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY192ZXJ0LAogICAgCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX2ZyYWcKCiAgICAJfSwKCiAgICAJbGFtYmVydDogewoKICAgIAkJdW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggWwogICAgCQkJVW5pZm9ybXNMaWIuY29tbW9uLAogICAgCQkJVW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5lbnZtYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5hb21hcCwKICAgIAkJCVVuaWZvcm1zTGliLmxpZ2h0bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5idW1wbWFwLAogICAgCQkJVW5pZm9ybXNMaWIubm9ybWFsbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nLAogICAgCQkJVW5pZm9ybXNMaWIubGlnaHRzLAogICAgCQkJewogICAgCQkJCWVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9CiAgICAJCQl9CiAgICAJCV0gKSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X2ZyYWcKCiAgICAJfSwKCiAgICAJcGhvbmc6IHsKCiAgICAJCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJCVVuaWZvcm1zTGliLmNvbW1vbiwKICAgIAkJCVVuaWZvcm1zTGliLnNwZWN1bGFybWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZW52bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuYW9tYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5saWdodG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmZvZywKICAgIAkJCVVuaWZvcm1zTGliLmxpZ2h0cywKICAgIAkJCXsKICAgIAkJCQllbWlzc2l2ZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSwKICAgIAkJCQlzcGVjdWxhcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MTExMTExICkgfSwKICAgIAkJCQlzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH0KICAgIAkJCX0KICAgIAkJXSApLAoKICAgIAkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ19mcmFnCgogICAgCX0sCgogICAgCXN0YW5kYXJkOiB7CgogICAgCQl1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbCiAgICAJCQlVbmlmb3Jtc0xpYi5jb21tb24sCiAgICAJCQlVbmlmb3Jtc0xpYi5lbnZtYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5hb21hcCwKICAgIAkJCVVuaWZvcm1zTGliLmxpZ2h0bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5idW1wbWFwLAogICAgCQkJVW5pZm9ybXNMaWIubm9ybWFsbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLAogICAgCQkJVW5pZm9ybXNMaWIucm91Z2huZXNzbWFwLAogICAgCQkJVW5pZm9ybXNMaWIubWV0YWxuZXNzbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nLAogICAgCQkJVW5pZm9ybXNMaWIubGlnaHRzLAogICAgCQkJewogICAgCQkJCWVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LAogICAgCQkJCXJvdWdobmVzczogeyB2YWx1ZTogMS4wIH0sCiAgICAJCQkJbWV0YWxuZXNzOiB7IHZhbHVlOiAwLjAgfSwKICAgIAkJCQllbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfQogICAgCQkJfQogICAgCQldICksCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LAogICAgCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWcKCiAgICAJfSwKCiAgICAJdG9vbjogewoKICAgIAkJdW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggWwogICAgCQkJVW5pZm9ybXNMaWIuY29tbW9uLAogICAgCQkJVW5pZm9ybXNMaWIuYW9tYXAsCiAgICAJCQlVbmlmb3Jtc0xpYi5saWdodG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmdyYWRpZW50bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nLAogICAgCQkJVW5pZm9ybXNMaWIubGlnaHRzLAogICAgCQkJewogICAgCQkJCWVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9CiAgICAJCQl9CiAgICAJCV0gKSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHRvb25fdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX2ZyYWcKCiAgICAJfSwKCiAgICAJbWF0Y2FwOiB7CgogICAgCQl1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbCiAgICAJCQlVbmlmb3Jtc0xpYi5jb21tb24sCiAgICAJCQlVbmlmb3Jtc0xpYi5idW1wbWFwLAogICAgCQkJVW5pZm9ybXNMaWIubm9ybWFsbWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nLAogICAgCQkJewogICAgCQkJCW1hdGNhcDogeyB2YWx1ZTogbnVsbCB9CiAgICAJCQl9CiAgICAJCV0gKSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF92ZXJ0LAogICAgCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF9mcmFnCgogICAgCX0sCgogICAgCXBvaW50czogewoKICAgIAkJdW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggWwogICAgCQkJVW5pZm9ybXNMaWIucG9pbnRzLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nCiAgICAJCV0gKSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsucG9pbnRzX3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZwoKICAgIAl9LAoKICAgIAlkYXNoZWQ6IHsKCiAgICAJCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJCVVuaWZvcm1zTGliLmNvbW1vbiwKICAgIAkJCVVuaWZvcm1zTGliLmZvZywKICAgIAkJCXsKICAgIAkJCQlzY2FsZTogeyB2YWx1ZTogMSB9LAogICAgCQkJCWRhc2hTaXplOiB7IHZhbHVlOiAxIH0sCiAgICAJCQkJdG90YWxTaXplOiB7IHZhbHVlOiAyIH0KICAgIAkJCX0KICAgIAkJXSApLAoKICAgIAkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWcKCiAgICAJfSwKCiAgICAJZGVwdGg6IHsKCiAgICAJCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJCVVuaWZvcm1zTGliLmNvbW1vbiwKICAgIAkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcAogICAgCQldICksCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRlcHRoX3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnCgogICAgCX0sCgogICAgCW5vcm1hbDogewoKICAgIAkJdW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggWwogICAgCQkJVW5pZm9ybXNMaWIuY29tbW9uLAogICAgCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKICAgIAkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKICAgIAkJCXsKICAgIAkJCQlvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfQogICAgCQkJfQogICAgCQldICksCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hub3JtYWxfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hub3JtYWxfZnJhZwoKICAgIAl9LAoKICAgIAlzcHJpdGU6IHsKCiAgICAJCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJCVVuaWZvcm1zTGliLnNwcml0ZSwKICAgIAkJCVVuaWZvcm1zTGliLmZvZwogICAgCQldICksCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LAogICAgCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX2ZyYWcKCiAgICAJfSwKCiAgICAJYmFja2dyb3VuZDogewoKICAgIAkJdW5pZm9ybXM6IHsKICAgIAkJCXV2VHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJCXQyRDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJYmFja2dyb3VuZEludGVuc2l0eTogeyB2YWx1ZTogMSB9CiAgICAJCX0sCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfZnJhZwoKICAgIAl9LAoKICAgIAliYWNrZ3JvdW5kQ3ViZTogewoKICAgIAkJdW5pZm9ybXM6IHsKICAgIAkJCWVudk1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJZmxpcEVudk1hcDogeyB2YWx1ZTogLTEgfSwKICAgIAkJCWJhY2tncm91bmRCbHVycmluZXNzOiB7IHZhbHVlOiAwIH0sCiAgICAJCQliYWNrZ3JvdW5kSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0sCiAgICAJCQliYWNrZ3JvdW5kUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9CiAgICAJCX0sCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRDdWJlX3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kQ3ViZV9mcmFnCgogICAgCX0sCgogICAgCWN1YmU6IHsKCiAgICAJCXVuaWZvcm1zOiB7CiAgICAJCQl0Q3ViZTogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJdEZsaXA6IHsgdmFsdWU6IC0xIH0sCiAgICAJCQlvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfQogICAgCQl9LAoKICAgIAkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWcKCiAgICAJfSwKCiAgICAJZXF1aXJlY3Q6IHsKCiAgICAJCXVuaWZvcm1zOiB7CiAgICAJCQl0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJfSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X2ZyYWcKCiAgICAJfSwKCiAgICAJZGlzdGFuY2VSR0JBOiB7CgogICAgCQl1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbCiAgICAJCQlVbmlmb3Jtc0xpYi5jb21tb24sCiAgICAJCQlVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsCiAgICAJCQl7CiAgICAJCQkJcmVmZXJlbmNlUG9zaXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSB9LAogICAgCQkJCW5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LAogICAgCQkJCWZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH0KICAgIAkJCX0KICAgIAkJXSApLAoKICAgIAkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCwKICAgIAkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV9mcmFnCgogICAgCX0sCgogICAgCXNoYWRvdzogewoKICAgIAkJdW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggWwogICAgCQkJVW5pZm9ybXNMaWIubGlnaHRzLAogICAgCQkJVW5pZm9ybXNMaWIuZm9nLAogICAgCQkJewogICAgCQkJCWNvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMCApIH0sCiAgICAJCQkJb3BhY2l0eTogeyB2YWx1ZTogMS4wIH0KICAgIAkJCX0sCiAgICAJCV0gKSwKCiAgICAJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsCiAgICAJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfZnJhZwoKICAgIAl9CgogICAgfTsKCiAgICBTaGFkZXJMaWIucGh5c2ljYWwgPSB7CgogICAgCXVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFsKICAgIAkJU2hhZGVyTGliLnN0YW5kYXJkLnVuaWZvcm1zLAogICAgCQl7CiAgICAJCQljbGVhcmNvYXQ6IHsgdmFsdWU6IDAgfSwKICAgIAkJCWNsZWFyY29hdE1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJY2xlYXJjb2F0TWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJCWNsZWFyY29hdE5vcm1hbE1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJCWNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfSwKICAgIAkJCWNsZWFyY29hdFJvdWdobmVzczogeyB2YWx1ZTogMCB9LAogICAgCQkJY2xlYXJjb2F0Um91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQljbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQkJZGlzcGVyc2lvbjogeyB2YWx1ZTogMCB9LAogICAgCQkJaXJpZGVzY2VuY2U6IHsgdmFsdWU6IDAgfSwKICAgIAkJCWlyaWRlc2NlbmNlTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQlpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCQlpcmlkZXNjZW5jZUlPUjogeyB2YWx1ZTogMS4zIH0sCiAgICAJCQlpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW06IHsgdmFsdWU6IDEwMCB9LAogICAgCQkJaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtOiB7IHZhbHVlOiA0MDAgfSwKICAgIAkJCWlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQlpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCQlzaGVlbjogeyB2YWx1ZTogMCB9LAogICAgCQkJc2hlZW5Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSwKICAgIAkJCXNoZWVuQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCXNoZWVuQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQkJc2hlZW5Sb3VnaG5lc3M6IHsgdmFsdWU6IDEgfSwKICAgIAkJCXNoZWVuUm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQlzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCQl0cmFuc21pc3Npb246IHsgdmFsdWU6IDAgfSwKICAgIAkJCXRyYW5zbWlzc2lvbk1hcDogeyB2YWx1ZTogbnVsbCB9LAogICAgCQkJdHJhbnNtaXNzaW9uTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSwKICAgIAkJCXRyYW5zbWlzc2lvblNhbXBsZXJTaXplOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSwKICAgIAkJCXRyYW5zbWlzc2lvblNhbXBsZXJNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCXRoaWNrbmVzczogeyB2YWx1ZTogMCB9LAogICAgCQkJdGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQl0aGlja25lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQkJYXR0ZW51YXRpb25EaXN0YW5jZTogeyB2YWx1ZTogMCB9LAogICAgCQkJYXR0ZW51YXRpb25Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSwKICAgIAkJCXNwZWN1bGFyQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAxLCAxLCAxICkgfSwKICAgIAkJCXNwZWN1bGFyQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCXNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQkJc3BlY3VsYXJJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSwKICAgIAkJCXNwZWN1bGFySW50ZW5zaXR5TWFwOiB7IHZhbHVlOiBudWxsIH0sCiAgICAJCQlzcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sCiAgICAJCQlhbmlzb3Ryb3B5VmVjdG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSwKICAgIAkJCWFuaXNvdHJvcHlNYXA6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCWFuaXNvdHJvcHlNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LAogICAgCQl9CiAgICAJXSApLAoKICAgIAl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LAogICAgCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZwoKICAgIH07CgogICAgY29uc3QgX3JnYiA9IHsgcjogMCwgYjogMCwgZzogMCB9OwogICAgY29uc3QgX2UxJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBFdWxlcigpOwogICAgY29uc3QgX20xJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7CgogICAgZnVuY3Rpb24gV2ViR0xCYWNrZ3JvdW5kKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIHN0YXRlLCBvYmplY3RzLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkgewoKICAgIAljb25zdCBjbGVhckNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApOwogICAgCWxldCBjbGVhckFscGhhID0gYWxwaGEgPT09IHRydWUgPyAwIDogMTsKCiAgICAJbGV0IHBsYW5lTWVzaDsKICAgIAlsZXQgYm94TWVzaDsKCiAgICAJbGV0IGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDsKICAgIAlsZXQgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDsKICAgIAlsZXQgY3VycmVudFRvbmVtYXBwaW5nID0gbnVsbDsKCiAgICAJZnVuY3Rpb24gZ2V0QmFja2dyb3VuZCggc2NlbmUgKSB7CgogICAgCQlsZXQgYmFja2dyb3VuZCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5iYWNrZ3JvdW5kIDogbnVsbDsKCiAgICAJCWlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHsKCiAgICAJCQljb25zdCB1c2VQTVJFTSA9IHNjZW5lLmJhY2tncm91bmRCbHVycmluZXNzID4gMDsgLy8gdXNlIFBNUkVNIGlmIHRoZSB1c2VyIHdhbnRzIHRvIGJsdXIgdGhlIGJhY2tncm91bmQKICAgIAkJCWJhY2tncm91bmQgPSAoIHVzZVBNUkVNID8gY3ViZXV2bWFwcyA6IGN1YmVtYXBzICkuZ2V0KCBiYWNrZ3JvdW5kICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gYmFja2dyb3VuZDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXIoIHNjZW5lICkgewoKICAgIAkJbGV0IGZvcmNlQ2xlYXIgPSBmYWxzZTsKICAgIAkJY29uc3QgYmFja2dyb3VuZCA9IGdldEJhY2tncm91bmQoIHNjZW5lICk7CgogICAgCQlpZiAoIGJhY2tncm91bmQgPT09IG51bGwgKSB7CgogICAgCQkJc2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTsKCiAgICAJCX0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yICkgewoKICAgIAkJCXNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7CiAgICAJCQlmb3JjZUNsZWFyID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IGVudmlyb25tZW50QmxlbmRNb2RlID0gcmVuZGVyZXIueHIuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUoKTsKCiAgICAJCWlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScgKSB7CgogICAgCQkJc3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggMCwgMCwgMCwgMSwgcHJlbXVsdGlwbGllZEFscGhhICk7CgogICAgCQl9IGVsc2UgaWYgKCBlbnZpcm9ubWVudEJsZW5kTW9kZSA9PT0gJ2FscGhhLWJsZW5kJyApIHsKCiAgICAJCQlzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAwLCAwLCAwLCAwLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTsKCiAgICAJCX0KCiAgICAJCWlmICggcmVuZGVyZXIuYXV0b0NsZWFyIHx8IGZvcmNlQ2xlYXIgKSB7CgogICAgCQkJLy8gYnVmZmVycyBtaWdodCBub3QgYmUgd3JpdGFibGUgd2hpY2ggaXMgcmVxdWlyZWQgdG8gZW5zdXJlIGEgY29ycmVjdCBjbGVhcgoKICAgIAkJCXN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApOwogICAgCQkJc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCB0cnVlICk7CiAgICAJCQlzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIHRydWUgKTsKCiAgICAJCQlyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gYWRkVG9SZW5kZXJMaXN0KCByZW5kZXJMaXN0LCBzY2VuZSApIHsKCiAgICAJCWNvbnN0IGJhY2tncm91bmQgPSBnZXRCYWNrZ3JvdW5kKCBzY2VuZSApOwoKICAgIAkJaWYgKCBiYWNrZ3JvdW5kICYmICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSApIHsKCiAgICAJCQlpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJYm94TWVzaCA9IG5ldyBNZXNoKAogICAgCQkJCQluZXcgQm94R2VvbWV0cnkoIDEsIDEsIDEgKSwKICAgIAkJCQkJbmV3IFNoYWRlck1hdGVyaWFsKCB7CiAgICAJCQkJCQluYW1lOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsCiAgICAJCQkJCQl1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmJhY2tncm91bmRDdWJlLnVuaWZvcm1zICksCiAgICAJCQkJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kQ3ViZS52ZXJ0ZXhTaGFkZXIsCiAgICAJCQkJCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmRDdWJlLmZyYWdtZW50U2hhZGVyLAogICAgCQkJCQkJc2lkZTogQmFja1NpZGUsCiAgICAJCQkJCQlkZXB0aFRlc3Q6IGZhbHNlLAogICAgCQkJCQkJZGVwdGhXcml0ZTogZmFsc2UsCiAgICAJCQkJCQlmb2c6IGZhbHNlLAogICAgCQkJCQkJYWxsb3dPdmVycmlkZTogZmFsc2UKICAgIAkJCQkJfSApCiAgICAJCQkJKTsKCiAgICAJCQkJYm94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7CiAgICAJCQkJYm94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICd1dicgKTsKCiAgICAJCQkJYm94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7CgogICAgCQkJCQl0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7CgogICAgCQkJCX07CgogICAgCQkJCS8vIGFkZCAiZW52TWFwIiBtYXRlcmlhbCBwcm9wZXJ0eSBzbyB0aGUgcmVuZGVyZXIgY2FuIGV2YWx1YXRlIGl0IGxpa2UgZm9yIGJ1aWx0LWluIG1hdGVyaWFscwogICAgCQkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggYm94TWVzaC5tYXRlcmlhbCwgJ2Vudk1hcCcsIHsKCiAgICAJCQkJCWdldDogZnVuY3Rpb24gKCkgewoKICAgIAkJCQkJCXJldHVybiB0aGlzLnVuaWZvcm1zLmVudk1hcC52YWx1ZTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfSApOwoKICAgIAkJCQlvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApOwoKICAgIAkJCX0KCiAgICAJCQlfZTEkMS5jb3B5KCBzY2VuZS5iYWNrZ3JvdW5kUm90YXRpb24gKTsKCiAgICAJCQkvLyBhY2NvbW1vZGF0ZSBsZWZ0LWhhbmRlZCBmcmFtZQogICAgCQkJX2UxJDEueCAqPSAtMTsgX2UxJDEueSAqPSAtMTsgX2UxJDEueiAqPSAtMTsKCiAgICAJCQlpZiAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSAmJiBiYWNrZ3JvdW5kLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSB7CgogICAgCQkJCS8vIGVudmlyb25tZW50IG1hcHMgd2hpY2ggYXJlIG5vdCBjdWJlIHJlbmRlciB0YXJnZXRzIG9yIFBNUkVNcyBmb2xsb3cgYSBkaWZmZXJlbnQgY29udmVudGlvbgogICAgCQkJCV9lMSQxLnkgKj0gLTE7CiAgICAJCQkJX2UxJDEueiAqPSAtMTsKCiAgICAJCQl9CgogICAgCQkJYm94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBiYWNrZ3JvdW5kOwogICAgCQkJYm94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgJiYgYmFja2dyb3VuZC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtMSA6IDE7CiAgICAJCQlib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRCbHVycmluZXNzLnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEJsdXJyaW5lc3M7CiAgICAJCQlib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5iYWNrZ3JvdW5kSW50ZW5zaXR5OwogICAgCQkJYm94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kUm90YXRpb24udmFsdWUuc2V0RnJvbU1hdHJpeDQoIF9tMSQxLm1ha2VSb3RhdGlvbkZyb21FdWxlciggX2UxJDEgKSApOwogICAgCQkJYm94TWVzaC5tYXRlcmlhbC50b25lTWFwcGVkID0gQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBiYWNrZ3JvdW5kLmNvbG9yU3BhY2UgKSAhPT0gU1JHQlRyYW5zZmVyOwoKICAgIAkJCWlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHwKICAgIAkJCQljdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fAogICAgCQkJCWN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7CgogICAgCQkJCWJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCQljdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7CiAgICAJCQkJY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uOwogICAgCQkJCWN1cnJlbnRUb25lbWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nOwoKICAgIAkJCX0KCiAgICAJCQlib3hNZXNoLmxheWVycy5lbmFibGVBbGwoKTsKCiAgICAJCQkvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdAogICAgCQkJcmVuZGVyTGlzdC51bnNoaWZ0KCBib3hNZXNoLCBib3hNZXNoLmdlb21ldHJ5LCBib3hNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7CgogICAgCQl9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkgewoKICAgIAkJCWlmICggcGxhbmVNZXNoID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCXBsYW5lTWVzaCA9IG5ldyBNZXNoKAogICAgCQkJCQluZXcgUGxhbmVHZW9tZXRyeSggMiwgMiApLAogICAgCQkJCQluZXcgU2hhZGVyTWF0ZXJpYWwoIHsKICAgIAkJCQkJCW5hbWU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLAogICAgCQkJCQkJdW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kLnVuaWZvcm1zICksCiAgICAJCQkJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLnZlcnRleFNoYWRlciwKICAgIAkJCQkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC5mcmFnbWVudFNoYWRlciwKICAgIAkJCQkJCXNpZGU6IEZyb250U2lkZSwKICAgIAkJCQkJCWRlcHRoVGVzdDogZmFsc2UsCiAgICAJCQkJCQlkZXB0aFdyaXRlOiBmYWxzZSwKICAgIAkJCQkJCWZvZzogZmFsc2UsCiAgICAJCQkJCQlhbGxvd092ZXJyaWRlOiBmYWxzZQogICAgCQkJCQl9ICkKICAgIAkJCQkpOwoKICAgIAkJCQlwbGFuZU1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbm9ybWFsJyApOwoKICAgIAkJCQkvLyBhZGQgIm1hcCIgbWF0ZXJpYWwgcHJvcGVydHkgc28gdGhlIHJlbmRlcmVyIGNhbiBldmFsdWF0ZSBpdCBsaWtlIGZvciBidWlsdC1pbiBtYXRlcmlhbHMKICAgIAkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHsKCiAgICAJCQkJCWdldDogZnVuY3Rpb24gKCkgewoKICAgIAkJCQkJCXJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfSApOwoKICAgIAkJCQlvYmplY3RzLnVwZGF0ZSggcGxhbmVNZXNoICk7CgogICAgCQkJfQoKICAgIAkJCXBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50MkQudmFsdWUgPSBiYWNrZ3JvdW5kOwogICAgCQkJcGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLmJhY2tncm91bmRJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5iYWNrZ3JvdW5kSW50ZW5zaXR5OwogICAgCQkJcGxhbmVNZXNoLm1hdGVyaWFsLnRvbmVNYXBwZWQgPSBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGJhY2tncm91bmQuY29sb3JTcGFjZSApICE9PSBTUkdCVHJhbnNmZXI7CgogICAgCQkJaWYgKCBiYWNrZ3JvdW5kLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7CgogICAgCQkJCWJhY2tncm91bmQudXBkYXRlTWF0cml4KCk7CgogICAgCQkJfQoKICAgIAkJCXBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBiYWNrZ3JvdW5kLm1hdHJpeCApOwoKICAgIAkJCWlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHwKICAgIAkJCQljdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fAogICAgCQkJCWN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7CgogICAgCQkJCXBsYW5lTWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQkJCWN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDsKICAgIAkJCQljdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSBiYWNrZ3JvdW5kLnZlcnNpb247CiAgICAJCQkJY3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7CgogICAgCQkJfQoKICAgIAkJCXBsYW5lTWVzaC5sYXllcnMuZW5hYmxlQWxsKCk7CgogICAgCQkJLy8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3QKICAgIAkJCXJlbmRlckxpc3QudW5zaGlmdCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHNldENsZWFyKCBjb2xvciwgYWxwaGEgKSB7CgogICAgCQljb2xvci5nZXRSR0IoIF9yZ2IsIGdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UoIHJlbmRlcmVyICkgKTsKCiAgICAJCXN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIF9yZ2IuciwgX3JnYi5nLCBfcmdiLmIsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBkaXNwb3NlKCkgewoKICAgIAkJaWYgKCBib3hNZXNoICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJYm94TWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7CiAgICAJCQlib3hNZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTsKCiAgICAJCQlib3hNZXNoID0gdW5kZWZpbmVkOwoKICAgIAkJfQoKICAgIAkJaWYgKCBwbGFuZU1lc2ggIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlwbGFuZU1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpOwogICAgCQkJcGxhbmVNZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTsKCiAgICAJCQlwbGFuZU1lc2ggPSB1bmRlZmluZWQ7CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCWdldENsZWFyQ29sb3I6IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gY2xlYXJDb2xvcjsKCiAgICAJCX0sCiAgICAJCXNldENsZWFyQ29sb3I6IGZ1bmN0aW9uICggY29sb3IsIGFscGhhID0gMSApIHsKCiAgICAJCQljbGVhckNvbG9yLnNldCggY29sb3IgKTsKICAgIAkJCWNsZWFyQWxwaGEgPSBhbHBoYTsKICAgIAkJCXNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7CgogICAgCQl9LAogICAgCQlnZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIGNsZWFyQWxwaGE7CgogICAgCQl9LAogICAgCQlzZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoIGFscGhhICkgewoKICAgIAkJCWNsZWFyQWxwaGEgPSBhbHBoYTsKICAgIAkJCXNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7CgogICAgCQl9LAogICAgCQlyZW5kZXI6IHJlbmRlciwKICAgIAkJYWRkVG9SZW5kZXJMaXN0OiBhZGRUb1JlbmRlckxpc3QsCiAgICAJCWRpc3Bvc2U6IGRpc3Bvc2UKCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xCaW5kaW5nU3RhdGVzKCBnbCwgYXR0cmlidXRlcyApIHsKCiAgICAJY29uc3QgbWF4VmVydGV4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1ZFUlRFWF9BVFRSSUJTICk7CgogICAgCWNvbnN0IGJpbmRpbmdTdGF0ZXMgPSB7fTsKCiAgICAJY29uc3QgZGVmYXVsdFN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBudWxsICk7CiAgICAJbGV0IGN1cnJlbnRTdGF0ZSA9IGRlZmF1bHRTdGF0ZTsKICAgIAlsZXQgZm9yY2VVcGRhdGUgPSBmYWxzZTsKCiAgICAJZnVuY3Rpb24gc2V0dXAoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5LCBpbmRleCApIHsKCiAgICAJCWxldCB1cGRhdGVCdWZmZXJzID0gZmFsc2U7CgogICAgCQljb25zdCBzdGF0ZSA9IGdldEJpbmRpbmdTdGF0ZSggZ2VvbWV0cnksIHByb2dyYW0sIG1hdGVyaWFsICk7CgogICAgCQlpZiAoIGN1cnJlbnRTdGF0ZSAhPT0gc3RhdGUgKSB7CgogICAgCQkJY3VycmVudFN0YXRlID0gc3RhdGU7CiAgICAJCQliaW5kVmVydGV4QXJyYXlPYmplY3QoIGN1cnJlbnRTdGF0ZS5vYmplY3QgKTsKCiAgICAJCX0KCiAgICAJCXVwZGF0ZUJ1ZmZlcnMgPSBuZWVkc1VwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSwgaW5kZXggKTsKCiAgICAJCWlmICggdXBkYXRlQnVmZmVycyApIHNhdmVDYWNoZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSwgaW5kZXggKTsKCiAgICAJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgogICAgCQkJYXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiApOwoKICAgIAkJfQoKICAgIAkJaWYgKCB1cGRhdGVCdWZmZXJzIHx8IGZvcmNlVXBkYXRlICkgewoKICAgIAkJCWZvcmNlVXBkYXRlID0gZmFsc2U7CgogICAgCQkJc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApOwoKICAgIAkJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgogICAgCQkJCWdsLmJpbmRCdWZmZXIoIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBhdHRyaWJ1dGVzLmdldCggaW5kZXggKS5idWZmZXIgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSB7CgogICAgCQlyZXR1cm4gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBiaW5kVmVydGV4QXJyYXlPYmplY3QoIHZhbyApIHsKCiAgICAJCXJldHVybiBnbC5iaW5kVmVydGV4QXJyYXkoIHZhbyApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7CgogICAgCQlyZXR1cm4gZ2wuZGVsZXRlVmVydGV4QXJyYXkoIHZhbyApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldEJpbmRpbmdTdGF0ZSggZ2VvbWV0cnksIHByb2dyYW0sIG1hdGVyaWFsICkgewoKICAgIAkJY29uc3Qgd2lyZWZyYW1lID0gKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKTsKCiAgICAJCWxldCBwcm9ncmFtTWFwID0gYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXTsKCiAgICAJCWlmICggcHJvZ3JhbU1hcCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXByb2dyYW1NYXAgPSB7fTsKICAgIAkJCWJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPSBwcm9ncmFtTWFwOwoKICAgIAkJfQoKICAgIAkJbGV0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdOwoKICAgIAkJaWYgKCBzdGF0ZU1hcCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXN0YXRlTWFwID0ge307CiAgICAJCQlwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF0gPSBzdGF0ZU1hcDsKCiAgICAJCX0KCiAgICAJCWxldCBzdGF0ZSA9IHN0YXRlTWFwWyB3aXJlZnJhbWUgXTsKCiAgICAJCWlmICggc3RhdGUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlzdGF0ZSA9IGNyZWF0ZUJpbmRpbmdTdGF0ZSggY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSApOwogICAgCQkJc3RhdGVNYXBbIHdpcmVmcmFtZSBdID0gc3RhdGU7CgogICAgCQl9CgogICAgCQlyZXR1cm4gc3RhdGU7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gY3JlYXRlQmluZGluZ1N0YXRlKCB2YW8gKSB7CgogICAgCQljb25zdCBuZXdBdHRyaWJ1dGVzID0gW107CiAgICAJCWNvbnN0IGVuYWJsZWRBdHRyaWJ1dGVzID0gW107CiAgICAJCWNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gW107CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzOyBpICsrICkgewoKICAgIAkJCW5ld0F0dHJpYnV0ZXNbIGkgXSA9IDA7CiAgICAJCQllbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDsKICAgIAkJCWF0dHJpYnV0ZURpdmlzb3JzWyBpIF0gPSAwOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHsKCiAgICAJCQkvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbiBub24tVkFPIHN1cHBvcnQgYnJvd3NlcgogICAgCQkJZ2VvbWV0cnk6IG51bGwsCiAgICAJCQlwcm9ncmFtOiBudWxsLAogICAgCQkJd2lyZWZyYW1lOiBmYWxzZSwKCiAgICAJCQluZXdBdHRyaWJ1dGVzOiBuZXdBdHRyaWJ1dGVzLAogICAgCQkJZW5hYmxlZEF0dHJpYnV0ZXM6IGVuYWJsZWRBdHRyaWJ1dGVzLAogICAgCQkJYXR0cmlidXRlRGl2aXNvcnM6IGF0dHJpYnV0ZURpdmlzb3JzLAogICAgCQkJb2JqZWN0OiB2YW8sCiAgICAJCQlhdHRyaWJ1dGVzOiB7fSwKICAgIAkJCWluZGV4OiBudWxsCgogICAgCQl9OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIG5lZWRzVXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApIHsKCiAgICAJCWNvbnN0IGNhY2hlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuYXR0cmlidXRlczsKICAgIAkJY29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKCiAgICAJCWxldCBhdHRyaWJ1dGVzTnVtID0gMDsKCiAgICAJCWNvbnN0IHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7CgogICAgCQlmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkgewoKICAgIAkJCWNvbnN0IHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdOwoKICAgIAkJCWlmICggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiA+PSAwICkgewoKICAgIAkJCQljb25zdCBjYWNoZWRBdHRyaWJ1dGUgPSBjYWNoZWRBdHRyaWJ1dGVzWyBuYW1lIF07CiAgICAJCQkJbGV0IGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07CgogICAgCQkJCWlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCWlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZU1hdHJpeDsKICAgIAkJCQkJaWYgKCBuYW1lID09PSAnaW5zdGFuY2VDb2xvcicgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZUNvbG9yOwoKICAgIAkJCQl9CgogICAgCQkJCWlmICggY2FjaGVkQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdHJ1ZTsKCiAgICAJCQkJaWYgKCBjYWNoZWRBdHRyaWJ1dGUuYXR0cmlidXRlICE9PSBnZW9tZXRyeUF0dHJpYnV0ZSApIHJldHVybiB0cnVlOwoKICAgIAkJCQlpZiAoIGdlb21ldHJ5QXR0cmlidXRlICYmIGNhY2hlZEF0dHJpYnV0ZS5kYXRhICE9PSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhICkgcmV0dXJuIHRydWU7CgogICAgCQkJCWF0dHJpYnV0ZXNOdW0gKys7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCBjdXJyZW50U3RhdGUuYXR0cmlidXRlc051bSAhPT0gYXR0cmlidXRlc051bSApIHJldHVybiB0cnVlOwoKICAgIAkJaWYgKCBjdXJyZW50U3RhdGUuaW5kZXggIT09IGluZGV4ICkgcmV0dXJuIHRydWU7CgogICAgCQlyZXR1cm4gZmFsc2U7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gc2F2ZUNhY2hlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApIHsKCiAgICAJCWNvbnN0IGNhY2hlID0ge307CiAgICAJCWNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgCQlsZXQgYXR0cmlidXRlc051bSA9IDA7CgogICAgCQljb25zdCBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpOwoKICAgIAkJZm9yICggY29uc3QgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHsKCiAgICAJCQljb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTsKCiAgICAJCQlpZiAoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gPj0gMCApIHsKCiAgICAJCQkJbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTsKCiAgICAJCQkJaWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCWlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBhdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VNYXRyaXg7CiAgICAJCQkJCWlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgYXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7CgogICAgCQkJCX0KCiAgICAJCQkJY29uc3QgZGF0YSA9IHt9OwogICAgCQkJCWRhdGEuYXR0cmlidXRlID0gYXR0cmlidXRlOwoKICAgIAkJCQlpZiAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuZGF0YSApIHsKCiAgICAJCQkJCWRhdGEuZGF0YSA9IGF0dHJpYnV0ZS5kYXRhOwoKICAgIAkJCQl9CgogICAgCQkJCWNhY2hlWyBuYW1lIF0gPSBkYXRhOwoKICAgIAkJCQlhdHRyaWJ1dGVzTnVtICsrOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzID0gY2FjaGU7CiAgICAJCWN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtID0gYXR0cmlidXRlc051bTsKCiAgICAJCWN1cnJlbnRTdGF0ZS5pbmRleCA9IGluZGV4OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGluaXRBdHRyaWJ1dGVzKCkgewoKICAgIAkJY29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBpbCA9IG5ld0F0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJbmV3QXR0cmlidXRlc1sgaSBdID0gMDsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHsKCiAgICAJCWVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgMCApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApIHsKCiAgICAJCWNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlczsKICAgIAkJY29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuZW5hYmxlZEF0dHJpYnV0ZXM7CiAgICAJCWNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gY3VycmVudFN0YXRlLmF0dHJpYnV0ZURpdmlzb3JzOwoKICAgIAkJbmV3QXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxOwoKICAgIAkJaWYgKCBlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPT09IDAgKSB7CgogICAgCQkJZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoIGF0dHJpYnV0ZSApOwogICAgCQkJZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTsKCiAgICAJCX0KCiAgICAJCWlmICggYXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdICE9PSBtZXNoUGVyQXR0cmlidXRlICkgewoKICAgIAkJCWdsLnZlcnRleEF0dHJpYkRpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApOwogICAgCQkJYXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdID0gbWVzaFBlckF0dHJpYnV0ZTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpIHsKCiAgICAJCWNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlczsKICAgIAkJY29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuZW5hYmxlZEF0dHJpYnV0ZXM7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJaWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdICE9PSBuZXdBdHRyaWJ1dGVzWyBpIF0gKSB7CgogICAgCQkJCWdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApOwogICAgCQkJCWVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB2ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQsIGludGVnZXIgKSB7CgogICAgCQlpZiAoIGludGVnZXIgPT09IHRydWUgKSB7CgogICAgCQkJZ2wudmVydGV4QXR0cmliSVBvaW50ZXIoIGluZGV4LCBzaXplLCB0eXBlLCBzdHJpZGUsIG9mZnNldCApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICkgewoKICAgIAkJaW5pdEF0dHJpYnV0ZXMoKTsKCiAgICAJCWNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CgogICAgCQljb25zdCBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpOwoKICAgIAkJY29uc3QgbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzID0gbWF0ZXJpYWwuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlczsKCiAgICAJCWZvciAoIGNvbnN0IG5hbWUgaW4gcHJvZ3JhbUF0dHJpYnV0ZXMgKSB7CgogICAgCQkJY29uc3QgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07CgogICAgCQkJaWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7CgogICAgCQkJCWxldCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdOwoKICAgIAkJCQlpZiAoIGdlb21ldHJ5QXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQlpZiAoIG5hbWUgPT09ICdpbnN0YW5jZU1hdHJpeCcgJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4ICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VNYXRyaXg7CiAgICAJCQkJCWlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VDb2xvcjsKCiAgICAJCQkJfQoKICAgIAkJCQlpZiAoIGdlb21ldHJ5QXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQljb25zdCBub3JtYWxpemVkID0gZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZDsKICAgIAkJCQkJY29uc3Qgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplOwoKICAgIAkJCQkJY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5QXR0cmlidXRlICk7CgogICAgCQkJCQkvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmUKCiAgICAJCQkJCWlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTsKCiAgICAJCQkJCWNvbnN0IGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7CiAgICAJCQkJCWNvbnN0IHR5cGUgPSBhdHRyaWJ1dGUudHlwZTsKICAgIAkJCQkJY29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gYXR0cmlidXRlLmJ5dGVzUGVyRWxlbWVudDsKCiAgICAJCQkJCS8vIGNoZWNrIGZvciBpbnRlZ2VyIGF0dHJpYnV0ZXMKCiAgICAJCQkJCWNvbnN0IGludGVnZXIgPSAoIHR5cGUgPT09IGdsLklOVCB8fCB0eXBlID09PSBnbC5VTlNJR05FRF9JTlQgfHwgZ2VvbWV0cnlBdHRyaWJ1dGUuZ3B1VHlwZSA9PT0gSW50VHlwZSApOwoKICAgIAkJCQkJaWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgewoKICAgIAkJCQkJCWNvbnN0IGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhOwogICAgCQkJCQkJY29uc3Qgc3RyaWRlID0gZGF0YS5zdHJpZGU7CiAgICAJCQkJCQljb25zdCBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7CgogICAgCQkJCQkJaWYgKCBkYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgKSB7CgogICAgCQkJCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkgewoKICAgIAkJCQkJCQkJZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJCWlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJCQkJZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgKiBkYXRhLmNvdW50OwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7CgogICAgCQkJCQkJCQllbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9CgogICAgCQkJCQkJZ2wuYmluZEJ1ZmZlciggZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIgKTsKCiAgICAJCQkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHsKCiAgICAJCQkJCQkJdmVydGV4QXR0cmliUG9pbnRlcigKICAgIAkJCQkJCQkJcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksCiAgICAJCQkJCQkJCXNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSwKICAgIAkJCQkJCQkJdHlwZSwKICAgIAkJCQkJCQkJbm9ybWFsaXplZCwKICAgIAkJCQkJCQkJc3RyaWRlICogYnl0ZXNQZXJFbGVtZW50LAogICAgCQkJCQkJCQkoIG9mZnNldCArICggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICkgKiBieXRlc1BlckVsZW1lbnQsCiAgICAJCQkJCQkJCWludGVnZXIKICAgIAkJCQkJCQkpOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJaWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHsKCiAgICAJCQkJCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7CgogICAgCQkJCQkJCQllbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSwgZ2VvbWV0cnlBdHRyaWJ1dGUubWVzaFBlckF0dHJpYnV0ZSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJCWlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJCQkJZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHsKCiAgICAJCQkJCQkJCWVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGkgKTsKCiAgICAJCQkJCQkJfQoKICAgIAkJCQkJCX0KCiAgICAJCQkJCQlnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlciApOwoKICAgIAkJCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkgewoKICAgIAkJCQkJCQl2ZXJ0ZXhBdHRyaWJQb2ludGVyKAogICAgCQkJCQkJCQlwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSwKICAgIAkJCQkJCQkJc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLAogICAgCQkJCQkJCQl0eXBlLAogICAgCQkJCQkJCQlub3JtYWxpemVkLAogICAgCQkJCQkJCQlzaXplICogYnl0ZXNQZXJFbGVtZW50LAogICAgCQkJCQkJCQkoIHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSApICogaSAqIGJ5dGVzUGVyRWxlbWVudCwKICAgIAkJCQkJCQkJaW50ZWdlcgogICAgCQkJCQkJCSk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCWNvbnN0IHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07CgogICAgCQkJCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQkJc3dpdGNoICggdmFsdWUubGVuZ3RoICkgewoKICAgIAkJCQkJCQljYXNlIDI6CiAgICAJCQkJCQkJCWdsLnZlcnRleEF0dHJpYjJmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTsKICAgIAkJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJCWNhc2UgMzoKICAgIAkJCQkJCQkJZ2wudmVydGV4QXR0cmliM2Z2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApOwogICAgCQkJCQkJCQlicmVhazsKCiAgICAJCQkJCQkJY2FzZSA0OgogICAgCQkJCQkJCQlnbC52ZXJ0ZXhBdHRyaWI0ZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7CiAgICAJCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCQlkZWZhdWx0OgogICAgCQkJCQkJCQlnbC52ZXJ0ZXhBdHRyaWIxZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBkaXNwb3NlKCkgewoKICAgIAkJcmVzZXQoKTsKCiAgICAJCWZvciAoIGNvbnN0IGdlb21ldHJ5SWQgaW4gYmluZGluZ1N0YXRlcyApIHsKCiAgICAJCQljb25zdCBwcm9ncmFtTWFwID0gYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnlJZCBdOwoKICAgIAkJCWZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkgewoKICAgIAkJCQljb25zdCBzdGF0ZU1hcCA9IHByb2dyYW1NYXBbIHByb2dyYW1JZCBdOwoKICAgIAkJCQlmb3IgKCBjb25zdCB3aXJlZnJhbWUgaW4gc3RhdGVNYXAgKSB7CgogICAgCQkJCQlkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApOwoKICAgIAkJCQkJZGVsZXRlIHN0YXRlTWFwWyB3aXJlZnJhbWUgXTsKCiAgICAJCQkJfQoKICAgIAkJCQlkZWxldGUgcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07CgogICAgCQkJfQoKICAgIAkJCWRlbGV0ZSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVsZWFzZVN0YXRlc09mR2VvbWV0cnkoIGdlb21ldHJ5ICkgewoKICAgIAkJaWYgKCBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdID09PSB1bmRlZmluZWQgKSByZXR1cm47CgogICAgCQljb25zdCBwcm9ncmFtTWFwID0gYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXTsKCiAgICAJCWZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkgewoKICAgIAkJCWNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07CgogICAgCQkJZm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkgewoKICAgIAkJCQlkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApOwoKICAgIAkJCQlkZWxldGUgc3RhdGVNYXBbIHdpcmVmcmFtZSBdOwoKICAgIAkJCX0KCiAgICAJCQlkZWxldGUgcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07CgogICAgCQl9CgogICAgCQlkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZWxlYXNlU3RhdGVzT2ZQcm9ncmFtKCBwcm9ncmFtICkgewoKICAgIAkJZm9yICggY29uc3QgZ2VvbWV0cnlJZCBpbiBiaW5kaW5nU3RhdGVzICkgewoKICAgIAkJCWNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07CgogICAgCQkJaWYgKCBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlOwoKICAgIAkJCWNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdOwoKICAgIAkJCWZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHsKCiAgICAJCQkJZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHN0YXRlTWFwWyB3aXJlZnJhbWUgXS5vYmplY3QgKTsKCiAgICAJCQkJZGVsZXRlIHN0YXRlTWFwWyB3aXJlZnJhbWUgXTsKCiAgICAJCQl9CgogICAgCQkJZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZXNldCgpIHsKCiAgICAJCXJlc2V0RGVmYXVsdFN0YXRlKCk7CiAgICAJCWZvcmNlVXBkYXRlID0gdHJ1ZTsKCiAgICAJCWlmICggY3VycmVudFN0YXRlID09PSBkZWZhdWx0U3RhdGUgKSByZXR1cm47CgogICAgCQljdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7CiAgICAJCWJpbmRWZXJ0ZXhBcnJheU9iamVjdCggY3VycmVudFN0YXRlLm9iamVjdCApOwoKICAgIAl9CgogICAgCS8vIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5CgogICAgCWZ1bmN0aW9uIHJlc2V0RGVmYXVsdFN0YXRlKCkgewoKICAgIAkJZGVmYXVsdFN0YXRlLmdlb21ldHJ5ID0gbnVsbDsKICAgIAkJZGVmYXVsdFN0YXRlLnByb2dyYW0gPSBudWxsOwogICAgCQlkZWZhdWx0U3RhdGUud2lyZWZyYW1lID0gZmFsc2U7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCXNldHVwOiBzZXR1cCwKICAgIAkJcmVzZXQ6IHJlc2V0LAogICAgCQlyZXNldERlZmF1bHRTdGF0ZTogcmVzZXREZWZhdWx0U3RhdGUsCiAgICAJCWRpc3Bvc2U6IGRpc3Bvc2UsCiAgICAJCXJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5OiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSwKICAgIAkJcmVsZWFzZVN0YXRlc09mUHJvZ3JhbTogcmVsZWFzZVN0YXRlc09mUHJvZ3JhbSwKCiAgICAJCWluaXRBdHRyaWJ1dGVzOiBpbml0QXR0cmlidXRlcywKICAgIAkJZW5hYmxlQXR0cmlidXRlOiBlbmFibGVBdHRyaWJ1dGUsCiAgICAJCWRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcwoKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbyApIHsKCiAgICAJbGV0IG1vZGU7CgogICAgCWZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkgewoKICAgIAkJbW9kZSA9IHZhbHVlOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkgewoKICAgIAkJZ2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7CgogICAgCQlpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIDEgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkgewoKICAgIAkJaWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47CgogICAgCQlnbC5kcmF3QXJyYXlzSW5zdGFuY2VkKCBtb2RlLCBzdGFydCwgY291bnQsIHByaW1jb3VudCApOwoKICAgIAkJaW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBwcmltY291bnQgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXJNdWx0aURyYXcoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQgKSB7CgogICAgCQlpZiAoIGRyYXdDb3VudCA9PT0gMCApIHJldHVybjsKCiAgICAJCWNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlfZHJhdycgKTsKICAgIAkJZXh0ZW5zaW9uLm11bHRpRHJhd0FycmF5c1dFQkdMKCBtb2RlLCBzdGFydHMsIDAsIGNvdW50cywgMCwgZHJhd0NvdW50ICk7CgogICAgCQlsZXQgZWxlbWVudENvdW50ID0gMDsKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkgewoKICAgIAkJCWVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXTsKCiAgICAJCX0KCiAgICAJCWluZm8udXBkYXRlKCBlbGVtZW50Q291bnQsIG1vZGUsIDEgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHsKCiAgICAJCWlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuOwoKICAgIAkJY29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApOwoKICAgIAkJaWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgc3RhcnRzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJcmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlleHRlbnNpb24ubXVsdGlEcmF3QXJyYXlzSW5zdGFuY2VkV0VCR0woIG1vZGUsIHN0YXJ0cywgMCwgY291bnRzLCAwLCBwcmltY291bnQsIDAsIGRyYXdDb3VudCApOwoKICAgIAkJCWxldCBlbGVtZW50Q291bnQgPSAwOwogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkgewoKICAgIAkJCQllbGVtZW50Q291bnQgKz0gY291bnRzWyBpIF0gKiBwcmltY291bnRbIGkgXTsKCiAgICAJCQl9CgogICAgCQkJaW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8vCgogICAgCXRoaXMuc2V0TW9kZSA9IHNldE1vZGU7CiAgICAJdGhpcy5yZW5kZXIgPSByZW5kZXI7CiAgICAJdGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7CiAgICAJdGhpcy5yZW5kZXJNdWx0aURyYXcgPSByZW5kZXJNdWx0aURyYXc7CiAgICAJdGhpcy5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgPSByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXM7CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgdXRpbHMgKSB7CgogICAgCWxldCBtYXhBbmlzb3Ryb3B5OwoKICAgIAlmdW5jdGlvbiBnZXRNYXhBbmlzb3Ryb3B5KCkgewoKICAgIAkJaWYgKCBtYXhBbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gbWF4QW5pc290cm9weTsKCiAgICAJCWlmICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgPT09IHRydWUgKSB7CgogICAgCQkJY29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7CgogICAgCQkJbWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQltYXhBbmlzb3Ryb3B5ID0gMDsKCiAgICAJCX0KCiAgICAJCXJldHVybiBtYXhBbmlzb3Ryb3B5OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHRleHR1cmVGb3JtYXRSZWFkYWJsZSggdGV4dHVyZUZvcm1hdCApIHsKCiAgICAJCWlmICggdGV4dHVyZUZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICkgIT09IGdsLmdldFBhcmFtZXRlciggZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQgKSApIHsKCiAgICAJCQlyZXR1cm4gZmFsc2U7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdHJ1ZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiB0ZXh0dXJlVHlwZVJlYWRhYmxlKCB0ZXh0dXJlVHlwZSApIHsKCiAgICAJCWNvbnN0IGhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0ID0gKCB0ZXh0dXJlVHlwZSA9PT0gSGFsZkZsb2F0VHlwZSApICYmICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApICk7CgogICAgCQlpZiAoIHRleHR1cmVUeXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICkgIT09IGdsLmdldFBhcmFtZXRlciggZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFICkgJiYgLy8gRWRnZSBhbmQgQ2hyb21lIE1hYyA8IDUyICgjOTUxMykKICAgIAkJCXRleHR1cmVUeXBlICE9PSBGbG9hdFR5cGUgJiYgISBoYWxmRmxvYXRTdXBwb3J0ZWRCeUV4dCApIHsKCiAgICAJCQlyZXR1cm4gZmFsc2U7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdHJ1ZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHsKCiAgICAJCWlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkgewoKICAgIAkJCWlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5WRVJURVhfU0hBREVSLCBnbC5ISUdIX0ZMT0FUICkucHJlY2lzaW9uID4gMCAmJgogICAgCQkJCWdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0ZMT0FUICkucHJlY2lzaW9uID4gMCApIHsKCiAgICAJCQkJcmV0dXJuICdoaWdocCc7CgogICAgCQkJfQoKICAgIAkJCXByZWNpc2lvbiA9ICdtZWRpdW1wJzsKCiAgICAJCX0KCiAgICAJCWlmICggcHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7CgogICAgCQkJaWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLlZFUlRFWF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCApLnByZWNpc2lvbiA+IDAgJiYKICAgIAkJCQlnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLkZSQUdNRU5UX1NIQURFUiwgZ2wuTUVESVVNX0ZMT0FUICkucHJlY2lzaW9uID4gMCApIHsKCiAgICAJCQkJcmV0dXJuICdtZWRpdW1wJzsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXR1cm4gJ2xvd3AnOwoKICAgIAl9CgogICAgCWxldCBwcmVjaXNpb24gPSBwYXJhbWV0ZXJzLnByZWNpc2lvbiAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVjaXNpb24gOiAnaGlnaHAnOwogICAgCWNvbnN0IG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7CgogICAgCWlmICggbWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24gKSB7CgogICAgCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOicsIHByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgbWF4UHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7CiAgICAJCXByZWNpc2lvbiA9IG1heFByZWNpc2lvbjsKCiAgICAJfQoKICAgIAljb25zdCBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlOwogICAgCWNvbnN0IHJldmVyc2VEZXB0aEJ1ZmZlciA9IHBhcmFtZXRlcnMucmV2ZXJzZURlcHRoQnVmZmVyID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NsaXBfY29udHJvbCcgKTsKCiAgICAJY29uc3QgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTICk7CiAgICAJY29uc3QgbWF4VmVydGV4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyApOwogICAgCWNvbnN0IG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVEVYVFVSRV9TSVpFICk7CiAgICAJY29uc3QgbWF4Q3ViZW1hcFNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUgKTsKCiAgICAJY29uc3QgbWF4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1ZFUlRFWF9BVFRSSUJTICk7CiAgICAJY29uc3QgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTICk7CiAgICAJY29uc3QgbWF4VmFyeWluZ3MgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WQVJZSU5HX1ZFQ1RPUlMgKTsKICAgIAljb25zdCBtYXhGcmFnbWVudFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTICk7CgogICAgCWNvbnN0IHZlcnRleFRleHR1cmVzID0gbWF4VmVydGV4VGV4dHVyZXMgPiAwOwoKICAgIAljb25zdCBtYXhTYW1wbGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfU0FNUExFUyApOwoKICAgIAlyZXR1cm4gewoKICAgIAkJaXNXZWJHTDI6IHRydWUsIC8vIGtlZXBpbmcgdGhpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKCiAgICAJCWdldE1heEFuaXNvdHJvcHk6IGdldE1heEFuaXNvdHJvcHksCiAgICAJCWdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLAoKICAgIAkJdGV4dHVyZUZvcm1hdFJlYWRhYmxlOiB0ZXh0dXJlRm9ybWF0UmVhZGFibGUsCiAgICAJCXRleHR1cmVUeXBlUmVhZGFibGU6IHRleHR1cmVUeXBlUmVhZGFibGUsCgogICAgCQlwcmVjaXNpb246IHByZWNpc2lvbiwKICAgIAkJbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciwKICAgIAkJcmV2ZXJzZURlcHRoQnVmZmVyOiByZXZlcnNlRGVwdGhCdWZmZXIsCgogICAgCQltYXhUZXh0dXJlczogbWF4VGV4dHVyZXMsCiAgICAJCW1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcywKICAgIAkJbWF4VGV4dHVyZVNpemU6IG1heFRleHR1cmVTaXplLAogICAgCQltYXhDdWJlbWFwU2l6ZTogbWF4Q3ViZW1hcFNpemUsCgogICAgCQltYXhBdHRyaWJ1dGVzOiBtYXhBdHRyaWJ1dGVzLAogICAgCQltYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsCiAgICAJCW1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncywKICAgIAkJbWF4RnJhZ21lbnRVbmlmb3JtczogbWF4RnJhZ21lbnRVbmlmb3JtcywKCiAgICAJCXZlcnRleFRleHR1cmVzOiB2ZXJ0ZXhUZXh0dXJlcywKCiAgICAJCW1heFNhbXBsZXM6IG1heFNhbXBsZXMKCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApIHsKCiAgICAJY29uc3Qgc2NvcGUgPSB0aGlzOwoKICAgIAlsZXQgZ2xvYmFsU3RhdGUgPSBudWxsLAogICAgCQludW1HbG9iYWxQbGFuZXMgPSAwLAogICAgCQlsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLAogICAgCQlyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7CgogICAgCWNvbnN0IHBsYW5lID0gbmV3IFBsYW5lKCksCiAgICAJCXZpZXdOb3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLAoKICAgIAkJdW5pZm9ybSA9IHsgdmFsdWU6IG51bGwsIG5lZWRzVXBkYXRlOiBmYWxzZSB9OwoKICAgIAl0aGlzLnVuaWZvcm0gPSB1bmlmb3JtOwogICAgCXRoaXMubnVtUGxhbmVzID0gMDsKICAgIAl0aGlzLm51bUludGVyc2VjdGlvbiA9IDA7CgogICAgCXRoaXMuaW5pdCA9IGZ1bmN0aW9uICggcGxhbmVzLCBlbmFibGVMb2NhbENsaXBwaW5nICkgewoKICAgIAkJY29uc3QgZW5hYmxlZCA9CiAgICAJCQlwbGFuZXMubGVuZ3RoICE9PSAwIHx8CiAgICAJCQllbmFibGVMb2NhbENsaXBwaW5nIHx8CiAgICAJCQkvLyBlbmFibGUgc3RhdGUgb2YgcHJldmlvdXMgZnJhbWUgLSB0aGUgY2xpcHBpbmcgY29kZSBoYXMgdG8KICAgIAkJCS8vIHJ1biBhbm90aGVyIGZyYW1lIGluIG9yZGVyIHRvIHJlc2V0IHRoZSBzdGF0ZToKICAgIAkJCW51bUdsb2JhbFBsYW5lcyAhPT0gMCB8fAogICAgCQkJbG9jYWxDbGlwcGluZ0VuYWJsZWQ7CgogICAgCQlsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGVuYWJsZUxvY2FsQ2xpcHBpbmc7CgogICAgCQludW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoOwoKICAgIAkJcmV0dXJuIGVuYWJsZWQ7CgogICAgCX07CgogICAgCXRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkgewoKICAgIAkJcmVuZGVyaW5nU2hhZG93cyA9IHRydWU7CiAgICAJCXByb2plY3RQbGFuZXMoIG51bGwgKTsKCiAgICAJfTsKCiAgICAJdGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkgewoKICAgIAkJcmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlOwoKICAgIAl9OwoKICAgIAl0aGlzLnNldEdsb2JhbFN0YXRlID0gZnVuY3Rpb24gKCBwbGFuZXMsIGNhbWVyYSApIHsKCiAgICAJCWdsb2JhbFN0YXRlID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIDAgKTsKCiAgICAJfTsKCiAgICAJdGhpcy5zZXRTdGF0ZSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKSB7CgogICAgCQljb25zdCBwbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcywKICAgIAkJCWNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLAogICAgCQkJY2xpcFNoYWRvd3MgPSBtYXRlcmlhbC5jbGlwU2hhZG93czsKCiAgICAJCWNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApOwoKICAgIAkJaWYgKCAhIGxvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IHBsYW5lcyA9PT0gbnVsbCB8fCBwbGFuZXMubGVuZ3RoID09PSAwIHx8IHJlbmRlcmluZ1NoYWRvd3MgJiYgISBjbGlwU2hhZG93cyApIHsKCiAgICAJCQkvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nCgogICAgCQkJaWYgKCByZW5kZXJpbmdTaGFkb3dzICkgewoKICAgIAkJCQkvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZwoKICAgIAkJCQlwcm9qZWN0UGxhbmVzKCBudWxsICk7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJcmVzZXRHbG9iYWxTdGF0ZSgpOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSB7CgogICAgCQkJY29uc3Qgbkdsb2JhbCA9IHJlbmRlcmluZ1NoYWRvd3MgPyAwIDogbnVtR2xvYmFsUGxhbmVzLAogICAgCQkJCWxHbG9iYWwgPSBuR2xvYmFsICogNDsKCiAgICAJCQlsZXQgZHN0QXJyYXkgPSBtYXRlcmlhbFByb3BlcnRpZXMuY2xpcHBpbmdTdGF0ZSB8fCBudWxsOwoKICAgIAkJCXVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTsgLy8gZW5zdXJlIHVuaXF1ZSBzdGF0ZQoKICAgIAkJCWRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGxHbG9iYWwsIHVzZUNhY2hlICk7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpICE9PSBsR2xvYmFsOyArKyBpICkgewoKICAgIAkJCQlkc3RBcnJheVsgaSBdID0gZ2xvYmFsU3RhdGVbIGkgXTsKCiAgICAJCQl9CgogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLmNsaXBwaW5nU3RhdGUgPSBkc3RBcnJheTsKICAgIAkJCXRoaXMubnVtSW50ZXJzZWN0aW9uID0gY2xpcEludGVyc2VjdGlvbiA/IHRoaXMubnVtUGxhbmVzIDogMDsKICAgIAkJCXRoaXMubnVtUGxhbmVzICs9IG5HbG9iYWw7CgogICAgCQl9CgoKICAgIAl9OwoKICAgIAlmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkgewoKICAgIAkJaWYgKCB1bmlmb3JtLnZhbHVlICE9PSBnbG9iYWxTdGF0ZSApIHsKCiAgICAJCQl1bmlmb3JtLnZhbHVlID0gZ2xvYmFsU3RhdGU7CiAgICAJCQl1bmlmb3JtLm5lZWRzVXBkYXRlID0gbnVtR2xvYmFsUGxhbmVzID4gMDsKCiAgICAJCX0KCiAgICAJCXNjb3BlLm51bVBsYW5lcyA9IG51bUdsb2JhbFBsYW5lczsKICAgIAkJc2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgZHN0T2Zmc2V0LCBza2lwVHJhbnNmb3JtICkgewoKICAgIAkJY29uc3QgblBsYW5lcyA9IHBsYW5lcyAhPT0gbnVsbCA/IHBsYW5lcy5sZW5ndGggOiAwOwogICAgCQlsZXQgZHN0QXJyYXkgPSBudWxsOwoKICAgIAkJaWYgKCBuUGxhbmVzICE9PSAwICkgewoKICAgIAkJCWRzdEFycmF5ID0gdW5pZm9ybS52YWx1ZTsKCiAgICAJCQlpZiAoIHNraXBUcmFuc2Zvcm0gIT09IHRydWUgfHwgZHN0QXJyYXkgPT09IG51bGwgKSB7CgogICAgCQkJCWNvbnN0IGZsYXRTaXplID0gZHN0T2Zmc2V0ICsgblBsYW5lcyAqIDQsCiAgICAJCQkJCXZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlOwoKICAgIAkJCQl2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApOwoKICAgIAkJCQlpZiAoIGRzdEFycmF5ID09PSBudWxsIHx8IGRzdEFycmF5Lmxlbmd0aCA8IGZsYXRTaXplICkgewoKICAgIAkJCQkJZHN0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBmbGF0U2l6ZSApOwoKICAgIAkJCQl9CgogICAgCQkJCWZvciAoIGxldCBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7CgogICAgCQkJCQlwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApOwoKICAgIAkJCQkJcGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApOwogICAgCQkJCQlkc3RBcnJheVsgaTQgKyAzIF0gPSBwbGFuZS5jb25zdGFudDsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQl1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7CiAgICAJCQl1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCXNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7CiAgICAJCXNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7CgogICAgCQlyZXR1cm4gZHN0QXJyYXk7CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xDdWJlTWFwcyggcmVuZGVyZXIgKSB7CgogICAgCWxldCBjdWJlbWFwcyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCWZ1bmN0aW9uIG1hcFRleHR1cmVNYXBwaW5nKCB0ZXh0dXJlLCBtYXBwaW5nICkgewoKICAgIAkJaWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyApIHsKCiAgICAJCQl0ZXh0dXJlLm1hcHBpbmcgPSBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7CgogICAgCQl9IGVsc2UgaWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHsKCiAgICAJCQl0ZXh0dXJlLm1hcHBpbmcgPSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGV4dHVyZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7CgogICAgCQlpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgKSB7CgogICAgCQkJY29uc3QgbWFwcGluZyA9IHRleHR1cmUubWFwcGluZzsKCiAgICAJCQlpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICkgewoKICAgIAkJCQlpZiAoIGN1YmVtYXBzLmhhcyggdGV4dHVyZSApICkgewoKICAgIAkJCQkJY29uc3QgY3ViZW1hcCA9IGN1YmVtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7CiAgICAJCQkJCXJldHVybiBtYXBUZXh0dXJlTWFwcGluZyggY3ViZW1hcCwgdGV4dHVyZS5tYXBwaW5nICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQljb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7CgogICAgCQkJCQlpZiAoIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB7CgogICAgCQkJCQkJY29uc3QgcmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMQ3ViZVJlbmRlclRhcmdldCggaW1hZ2UuaGVpZ2h0ICk7CiAgICAJCQkJCQlyZW5kZXJUYXJnZXQuZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICk7CiAgICAJCQkJCQljdWJlbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApOwoKICAgIAkJCQkJCXRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7CgogICAgCQkJCQkJcmV0dXJuIG1hcFRleHR1cmVNYXBwaW5nKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgdGV4dHVyZS5tYXBwaW5nICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCS8vIGltYWdlIG5vdCB5ZXQgcmVhZHkuIHRyeSB0aGUgY29udmVyc2lvbiBuZXh0IGZyYW1lCgogICAgCQkJCQkJcmV0dXJuIG51bGw7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGV4dHVyZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHsKCiAgICAJCWNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7CgogICAgCQl0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApOwoKICAgIAkJY29uc3QgY3ViZW1hcCA9IGN1YmVtYXBzLmdldCggdGV4dHVyZSApOwoKICAgIAkJaWYgKCBjdWJlbWFwICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY3ViZW1hcHMuZGVsZXRlKCB0ZXh0dXJlICk7CiAgICAJCQljdWJlbWFwLmRpc3Bvc2UoKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBkaXNwb3NlKCkgewoKICAgIAkJY3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAl9CgogICAgCXJldHVybiB7CiAgICAJCWdldDogZ2V0LAogICAgCQlkaXNwb3NlOiBkaXNwb3NlCiAgICAJfTsKCiAgICB9CgogICAgY29uc3QgTE9EX01JTiA9IDQ7CgogICAgLy8gVGhlIHN0YW5kYXJkIGRldmlhdGlvbnMgKHJhZGlhbnMpIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0cmEgbWlwcy4gVGhlc2UgYXJlCiAgICAvLyBjaG9zZW4gdG8gYXBwcm94aW1hdGUgYSBUcm93YnJpZGdlLVJlaXR6IGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiB0aW1lcyB0aGUKICAgIC8vIGdlb21ldHJpYyBzaGFkb3dpbmcgZnVuY3Rpb24uIFRoZXNlIHNpZ21hIHZhbHVlcyBzcXVhcmVkIG11c3QgbWF0Y2ggdGhlCiAgICAvLyB2YXJpYW5jZSAjZGVmaW5lcyBpbiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQuZ2xzbC5qcy4KICAgIGNvbnN0IEVYVFJBX0xPRF9TSUdNQSA9IFsgMC4xMjUsIDAuMjE1LCAwLjM1LCAwLjQ0NiwgMC41MjYsIDAuNTgyIF07CgogICAgLy8gVGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBibHVyIGZvciBsb29wLiBTbWFsbGVyIHNpZ21hcyB3aWxsIHVzZSBmZXdlcgogICAgLy8gc2FtcGxlcyBhbmQgZXhpdCBlYXJseSwgYnV0IG5vdCByZWNvbXBpbGUgdGhlIHNoYWRlci4KICAgIGNvbnN0IE1BWF9TQU1QTEVTID0gMjA7CgogICAgY29uc3QgX2ZsYXRDYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoKTsKICAgIGNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTsKICAgIGxldCBfb2xkVGFyZ2V0ID0gbnVsbDsKICAgIGxldCBfb2xkQWN0aXZlQ3ViZUZhY2UgPSAwOwogICAgbGV0IF9vbGRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7CiAgICBsZXQgX29sZFhyRW5hYmxlZCA9IGZhbHNlOwoKICAgIC8vIEdvbGRlbiBSYXRpbwogICAgY29uc3QgUEhJID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7CiAgICBjb25zdCBJTlZfUEhJID0gMSAvIFBISTsKCiAgICAvLyBWZXJ0aWNlcyBvZiBhIGRvZGVjYWhlZHJvbiAoZXhjZXB0IHRoZSBvcHBvc2l0ZXMsIHdoaWNoIHJlcHJlc2VudCB0aGUKICAgIC8vIHNhbWUgYXhpcyksIHVzZWQgYXMgYXhpcyBkaXJlY3Rpb25zIGV2ZW5seSBzcHJlYWQgb24gYSBzcGhlcmUuCiAgICBjb25zdCBfYXhpc0RpcmVjdGlvbnMgPSBbCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBQSEksIElOVl9QSEksIDAgKSwKICAgIAkvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCBQSEksIElOVl9QSEksIDAgKSwKICAgIAkvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIElOVl9QSEksIDAsIFBISSApLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIElOVl9QSEksIDAsIFBISSApLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgLSBJTlZfUEhJICksCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgUEhJLCBJTlZfUEhJICksCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLTEsIDEsIC0xICksCiAgICAJLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgLTEgKSwKICAgIAkvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtMSwgMSwgMSApLAogICAgCS8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKSBdOwoKICAgIGNvbnN0IF9vcmlnaW4gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7CgogICAgLyoqCiAgICAgKiBUaGlzIGNsYXNzIGdlbmVyYXRlcyBhIFByZWZpbHRlcmVkLCBNaXBtYXBwZWQgUmFkaWFuY2UgRW52aXJvbm1lbnQgTWFwCiAgICAgKiAoUE1SRU0pIGZyb20gYSBjdWJlTWFwIGVudmlyb25tZW50IHRleHR1cmUuIFRoaXMgYWxsb3dzIGRpZmZlcmVudCBsZXZlbHMgb2YKICAgICAqIGJsdXIgdG8gYmUgcXVpY2tseSBhY2Nlc3NlZCBiYXNlZCBvbiBtYXRlcmlhbCByb3VnaG5lc3MuIEl0IGlzIHBhY2tlZCBpbnRvIGEKICAgICAqIHNwZWNpYWwgQ3ViZVVWIGZvcm1hdCB0aGF0IGFsbG93cyB1cyB0byBwZXJmb3JtIGN1c3RvbSBpbnRlcnBvbGF0aW9uIHNvIHRoYXQKICAgICAqIHdlIGNhbiBzdXBwb3J0IG5vbmxpbmVhciBmb3JtYXRzIHN1Y2ggYXMgUkdCRS4gVW5saWtlIGEgdHJhZGl0aW9uYWwgbWlwbWFwCiAgICAgKiBjaGFpbiwgaXQgb25seSBnb2VzIGRvd24gdG8gdGhlIExPRF9NSU4gbGV2ZWwgKGFib3ZlKSwgYW5kIHRoZW4gY3JlYXRlcyBleHRyYQogICAgICogZXZlbiBtb3JlIGZpbHRlcmVkICdtaXBzJyBhdCB0aGUgc2FtZSBMT0RfTUlOIHJlc29sdXRpb24sIGFzc29jaWF0ZWQgd2l0aAogICAgICogaGlnaGVyIHJvdWdobmVzcyBsZXZlbHMuIEluIHRoaXMgd2F5IHdlIG1haW50YWluIHJlc29sdXRpb24gdG8gc21vb3RobHkKICAgICAqIGludGVycG9sYXRlIGRpZmZ1c2UgbGlnaHRpbmcgd2hpbGUgbGltaXRpbmcgc2FtcGxpbmcgY29tcHV0YXRpb24uCiAgICAgKgogICAgICogUGFwZXI6IEZhc3QsIEFjY3VyYXRlIEltYWdlLUJhc2VkIExpZ2h0aW5nOgogICAgICoge0BsaW5rIGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMTV5OHJfVXBLbFU5U3ZWNElMYjBDM3FDUGVjUzhwdkx6L3ZpZXd9CiAgICAqLwogICAgY2xhc3MgUE1SRU1HZW5lcmF0b3IgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IFBNUkVNIGdlbmVyYXRvci4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuCiAgICAJICovCiAgICAJY29uc3RydWN0b3IoIHJlbmRlcmVyICkgewoKICAgIAkJdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjsKICAgIAkJdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBudWxsOwoKICAgIAkJdGhpcy5fbG9kTWF4ID0gMDsKICAgIAkJdGhpcy5fY3ViZVNpemUgPSAwOwogICAgCQl0aGlzLl9sb2RQbGFuZXMgPSBbXTsKICAgIAkJdGhpcy5fc2l6ZUxvZHMgPSBbXTsKICAgIAkJdGhpcy5fc2lnbWFzID0gW107CgogICAgCQl0aGlzLl9ibHVyTWF0ZXJpYWwgPSBudWxsOwogICAgCQl0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBudWxsOwogICAgCQl0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gbnVsbDsKCiAgICAJCXRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fYmx1ck1hdGVyaWFsICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhIHN1cHBsaWVkIFNjZW5lLCB3aGljaCBjYW4gYmUgZmFzdGVyIHRoYW4gdXNpbmcgYW4KICAgIAkgKiBpbWFnZSBpZiBuZXR3b3JraW5nIGJhbmR3aWR0aCBpcyBsb3cuIE9wdGlvbmFsIHNpZ21hIHNwZWNpZmllcyBhIGJsdXIgcmFkaXVzCiAgICAJICogaW4gcmFkaWFucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBzY2VuZSBiZWZvcmUgUE1SRU0gZ2VuZXJhdGlvbi4gT3B0aW9uYWwgbmVhcgogICAgCSAqIGFuZCBmYXIgcGxhbmVzIGVuc3VyZSB0aGUgc2NlbmUgaXMgcmVuZGVyZWQgaW4gaXRzIGVudGlyZXR5LgogICAgCSAqCiAgICAJICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUgdG8gYmUgY2FwdHVyZWQuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtzaWdtYT0wXSAtIFRoZSBibHVyIHJhZGl1cyBpbiByYWRpYW5zLgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBbbmVhcj0wLjFdIC0gVGhlIG5lYXIgcGxhbmUgZGlzdGFuY2UuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtmYXI9MTAwXSAtIFRoZSBmYXIgcGxhbmUgZGlzdGFuY2UuCiAgICAJICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAJICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNpemU9MjU2XSAtIFRoZSB0ZXh0dXJlIHNpemUgb2YgdGhlIFBNUkVNLgogICAgCSAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbnMucmVuZGVyVGFyZ2V0PW9yaWdpbl0gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGludGVybmFsIGN1YmUgY2FtZXJhIHRoYXQgcmVuZGVycyB0aGUgc2NlbmUuCiAgICAJICogQHJldHVybiB7V2ViR0xSZW5kZXJUYXJnZXR9IFRoZSByZXN1bHRpbmcgUE1SRU0uCiAgICAJICovCiAgICAJZnJvbVNjZW5lKCBzY2VuZSwgc2lnbWEgPSAwLCBuZWFyID0gMC4xLCBmYXIgPSAxMDAsIG9wdGlvbnMgPSB7fSApIHsKCiAgICAJCWNvbnN0IHsKICAgIAkJCXNpemUgPSAyNTYsCiAgICAJCQlwb3NpdGlvbiA9IF9vcmlnaW4sCiAgICAJCX0gPSBvcHRpb25zOwoKICAgIAkJX29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpOwogICAgCQlfb2xkQWN0aXZlQ3ViZUZhY2UgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpOwogICAgCQlfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpOwogICAgCQlfb2xkWHJFbmFibGVkID0gdGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZDsKCiAgICAJCXRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQgPSBmYWxzZTsKCiAgICAJCXRoaXMuX3NldFNpemUoIHNpemUgKTsKCiAgICAJCWNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpOwogICAgCQljdWJlVVZSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgPSB0cnVlOwoKICAgIAkJdGhpcy5fc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0LCBwb3NpdGlvbiApOwoKICAgIAkJaWYgKCBzaWdtYSA+IDAgKSB7CgogICAgCQkJdGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCBzaWdtYSApOwoKICAgIAkJfQoKICAgIAkJdGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7CiAgICAJCXRoaXMuX2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApOwoKICAgIAkJcmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDsKCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGFuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUgogICAgCSAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGltYWdlIHNpemUgaXMgMWsgKDEwMjQgeCA1MTIpLAogICAgCSAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7VGV4dHVyZX0gZXF1aXJlY3Rhbmd1bGFyIC0gVGhlIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlIHRvIGJlIGNvbnZlcnRlZC4KICAgIAkgKiBAcGFyYW0gez9XZWJHTFJlbmRlclRhcmdldH0gW3JlbmRlclRhcmdldD1udWxsXSAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHVzZS4KICAgIAkgKiBAcmV0dXJuIHtXZWJHTFJlbmRlclRhcmdldH0gVGhlIHJlc3VsdGluZyBQTVJFTS4KICAgIAkgKi8KICAgIAlmcm9tRXF1aXJlY3Rhbmd1bGFyKCBlcXVpcmVjdGFuZ3VsYXIsIHJlbmRlclRhcmdldCA9IG51bGwgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5fZnJvbVRleHR1cmUoIGVxdWlyZWN0YW5ndWxhciwgcmVuZGVyVGFyZ2V0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBjdWJlbWFwIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSCiAgICAJICogb3IgSERSLiBUaGUgaWRlYWwgaW5wdXQgY3ViZSBzaXplIGlzIDI1NiB4IDI1NiwKICAgIAkgKiBhcyB0aGlzIG1hdGNoZXMgYmVzdCB3aXRoIHRoZSAyNTYgeCAyNTYgY3ViZW1hcCBvdXRwdXQuCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1RleHR1cmV9IGN1YmVtYXAgLSBUaGUgY3ViZW1hcCB0ZXh0dXJlIHRvIGJlIGNvbnZlcnRlZC4KICAgIAkgKiBAcGFyYW0gez9XZWJHTFJlbmRlclRhcmdldH0gW3JlbmRlclRhcmdldD1udWxsXSAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHVzZS4KICAgIAkgKiBAcmV0dXJuIHtXZWJHTFJlbmRlclRhcmdldH0gVGhlIHJlc3VsdGluZyBQTVJFTS4KICAgIAkgKi8KICAgIAlmcm9tQ3ViZW1hcCggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHsKCiAgICAJCXJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ICk7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUHJlLWNvbXBpbGVzIHRoZSBjdWJlbWFwIHNoYWRlci4gWW91IGNhbiBnZXQgZmFzdGVyIHN0YXJ0LXVwIGJ5IGludm9raW5nIHRoaXMgbWV0aG9kIGR1cmluZwogICAgCSAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS4KICAgIAkgKi8KICAgIAljb21waWxlQ3ViZW1hcFNoYWRlcigpIHsKCiAgICAJCWlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkgewoKICAgIAkJCXRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoKTsKICAgIAkJCXRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogUHJlLWNvbXBpbGVzIHRoZSBlcXVpcmVjdGFuZ3VsYXIgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nCiAgICAJICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LgogICAgCSAqLwogICAgCWNvbXBpbGVFcXVpcmVjdGFuZ3VsYXJTaGFkZXIoKSB7CgogICAgCQlpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPT09IG51bGwgKSB7CgogICAgCQkJdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IF9nZXRFcXVpcmVjdE1hdGVyaWFsKCk7CiAgICAJCQl0aGlzLl9jb21waWxlTWF0ZXJpYWwoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvKioKICAgIAkgKiBEaXNwb3NlcyBvZiB0aGUgUE1SRU1HZW5lcmF0b3IncyBpbnRlcm5hbCBtZW1vcnkuIE5vdGUgdGhhdCBQTVJFTUdlbmVyYXRvciBpcyBhIHN0YXRpYyBjbGFzcywKICAgIAkgKiBzbyB5b3Ugc2hvdWxkIG5vdCBuZWVkIG1vcmUgdGhhbiBvbmUgUE1SRU1HZW5lcmF0b3Igb2JqZWN0LiBJZiB5b3UgZG8sIGNhbGxpbmcgZGlzcG9zZSgpIG9uCiAgICAJICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLgogICAgCSAqLwogICAgCWRpc3Bvc2UoKSB7CgogICAgCQl0aGlzLl9kaXNwb3NlKCk7CgogICAgCQlpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2N1YmVtYXBNYXRlcmlhbC5kaXNwb3NlKCk7CiAgICAJCWlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwuZGlzcG9zZSgpOwoKICAgIAl9CgogICAgCS8vIHByaXZhdGUgaW50ZXJmYWNlCgogICAgCV9zZXRTaXplKCBjdWJlU2l6ZSApIHsKCiAgICAJCXRoaXMuX2xvZE1heCA9IE1hdGguZmxvb3IoIE1hdGgubG9nMiggY3ViZVNpemUgKSApOwogICAgCQl0aGlzLl9jdWJlU2l6ZSA9IE1hdGgucG93KCAyLCB0aGlzLl9sb2RNYXggKTsKCiAgICAJfQoKICAgIAlfZGlzcG9zZSgpIHsKCiAgICAJCWlmICggdGhpcy5fYmx1ck1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fYmx1ck1hdGVyaWFsLmRpc3Bvc2UoKTsKCiAgICAJCWlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldC5kaXNwb3NlKCk7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCXRoaXMuX2xvZFBsYW5lc1sgaSBdLmRpc3Bvc2UoKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlfY2xlYW51cCggb3V0cHV0VGFyZ2V0ICkgewoKICAgIAkJdGhpcy5fcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBfb2xkVGFyZ2V0LCBfb2xkQWN0aXZlQ3ViZUZhY2UsIF9vbGRBY3RpdmVNaXBtYXBMZXZlbCApOwogICAgCQl0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkID0gX29sZFhyRW5hYmxlZDsKCiAgICAJCW91dHB1dFRhcmdldC5zY2lzc29yVGVzdCA9IGZhbHNlOwogICAgCQlfc2V0Vmlld3BvcnQoIG91dHB1dFRhcmdldCwgMCwgMCwgb3V0cHV0VGFyZ2V0LndpZHRoLCBvdXRwdXRUYXJnZXQuaGVpZ2h0ICk7CgogICAgCX0KCiAgICAJX2Zyb21UZXh0dXJlKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKSB7CgogICAgCQlpZiAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICkgewoKICAgIAkJCXRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSAwID8gMTYgOiAoIHRleHR1cmUuaW1hZ2VbIDAgXS53aWR0aCB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaW1hZ2Uud2lkdGggKSApOwoKICAgIAkJfSBlbHNlIHsgLy8gRXF1aXJlY3Rhbmd1bGFyCgogICAgCQkJdGhpcy5fc2V0U2l6ZSggdGV4dHVyZS5pbWFnZS53aWR0aCAvIDQgKTsKCiAgICAJCX0KCiAgICAJCV9vbGRUYXJnZXQgPSB0aGlzLl9yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTsKICAgIAkJX29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTsKICAgIAkJX29sZEFjdGl2ZU1pcG1hcExldmVsID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTsKICAgIAkJX29sZFhyRW5hYmxlZCA9IHRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQ7CgogICAgCQl0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkID0gZmFsc2U7CgogICAgCQljb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQgfHwgdGhpcy5fYWxsb2NhdGVUYXJnZXRzKCk7CiAgICAJCXRoaXMuX3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7CiAgICAJCXRoaXMuX2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApOwogICAgCQl0aGlzLl9jbGVhbnVwKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTsKCiAgICAJCXJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7CgogICAgCX0KCiAgICAJX2FsbG9jYXRlVGFyZ2V0cygpIHsKCiAgICAJCWNvbnN0IHdpZHRoID0gMyAqIE1hdGgubWF4KCB0aGlzLl9jdWJlU2l6ZSwgMTYgKiA3ICk7CiAgICAJCWNvbnN0IGhlaWdodCA9IDQgKiB0aGlzLl9jdWJlU2l6ZTsKCiAgICAJCWNvbnN0IHBhcmFtcyA9IHsKICAgIAkJCW1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLAogICAgCQkJbWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsCiAgICAJCQlnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLAogICAgCQkJdHlwZTogSGFsZkZsb2F0VHlwZSwKICAgIAkJCWZvcm1hdDogUkdCQUZvcm1hdCwKICAgIAkJCWNvbG9yU3BhY2U6IExpbmVhclNSR0JDb2xvclNwYWNlLAogICAgCQkJZGVwdGhCdWZmZXI6IGZhbHNlCiAgICAJCX07CgogICAgCQljb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTsKCiAgICAJCWlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmhlaWdodCAhPT0gaGVpZ2h0ICkgewoKICAgIAkJCWlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7CgogICAgCQkJCXRoaXMuX2Rpc3Bvc2UoKTsKCiAgICAJCQl9CgogICAgCQkJdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTsKCiAgICAJCQljb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7CiAgICAJCQkoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoIF9sb2RNYXggKSApOwoKICAgIAkJCXRoaXMuX2JsdXJNYXRlcmlhbCA9IF9nZXRCbHVyU2hhZGVyKCBfbG9kTWF4LCB3aWR0aCwgaGVpZ2h0ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0OwoKICAgIAl9CgogICAgCV9jb21waWxlTWF0ZXJpYWwoIG1hdGVyaWFsICkgewoKICAgIAkJY29uc3QgdG1wTWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKTsKICAgIAkJdGhpcy5fcmVuZGVyZXIuY29tcGlsZSggdG1wTWVzaCwgX2ZsYXRDYW1lcmEgKTsKCiAgICAJfQoKICAgIAlfc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0LCBwb3NpdGlvbiApIHsKCiAgICAJCWNvbnN0IGZvdiA9IDkwOwogICAgCQljb25zdCBhc3BlY3QgPSAxOwogICAgCQljb25zdCBjdWJlQ2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7CiAgICAJCWNvbnN0IHVwU2lnbiA9IFsgMSwgLTEsIDEsIDEsIDEsIDEgXTsKICAgIAkJY29uc3QgZm9yd2FyZFNpZ24gPSBbIDEsIDEsIDEsIC0xLCAtMSwgLTEgXTsKICAgIAkJY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjsKCiAgICAJCWNvbnN0IG9yaWdpbmFsQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyOwogICAgCQljb25zdCB0b25lTWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nOwogICAgCQlyZW5kZXJlci5nZXRDbGVhckNvbG9yKCBfY2xlYXJDb2xvciApOwoKICAgIAkJcmVuZGVyZXIudG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nOwogICAgCQlyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTsKCiAgICAJCWNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggewogICAgCQkJbmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLAogICAgCQkJc2lkZTogQmFja1NpZGUsCiAgICAJCQlkZXB0aFdyaXRlOiBmYWxzZSwKICAgIAkJCWRlcHRoVGVzdDogZmFsc2UsCiAgICAJCX0gKTsKCiAgICAJCWNvbnN0IGJhY2tncm91bmRCb3ggPSBuZXcgTWVzaCggbmV3IEJveEdlb21ldHJ5KCksIGJhY2tncm91bmRNYXRlcmlhbCApOwoKICAgIAkJbGV0IHVzZVNvbGlkQ29sb3IgPSBmYWxzZTsKICAgIAkJY29uc3QgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7CgogICAgCQlpZiAoIGJhY2tncm91bmQgKSB7CgogICAgCQkJaWYgKCBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7CgogICAgCQkJCWJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBiYWNrZ3JvdW5kICk7CiAgICAJCQkJc2NlbmUuYmFja2dyb3VuZCA9IG51bGw7CiAgICAJCQkJdXNlU29saWRDb2xvciA9IHRydWU7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQliYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggX2NsZWFyQ29sb3IgKTsKICAgIAkJCXVzZVNvbGlkQ29sb3IgPSB0cnVlOwoKICAgIAkJfQoKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCiAgICAJCQljb25zdCBjb2wgPSBpICUgMzsKCiAgICAJCQlpZiAoIGNvbCA9PT0gMCApIHsKCiAgICAJCQkJY3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7CiAgICAJCQkJY3ViZUNhbWVyYS5wb3NpdGlvbi5zZXQoIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTsKICAgIAkJCQljdWJlQ2FtZXJhLmxvb2tBdCggcG9zaXRpb24ueCArIGZvcndhcmRTaWduWyBpIF0sIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTsKCiAgICAJCQl9IGVsc2UgaWYgKCBjb2wgPT09IDEgKSB7CgogICAgCQkJCWN1YmVDYW1lcmEudXAuc2V0KCAwLCAwLCB1cFNpZ25bIGkgXSApOwogICAgCQkJCWN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7CiAgICAJCQkJY3ViZUNhbWVyYS5sb29rQXQoIHBvc2l0aW9uLngsIHBvc2l0aW9uLnkgKyBmb3J3YXJkU2lnblsgaSBdLCBwb3NpdGlvbi56ICk7CgoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWN1YmVDYW1lcmEudXAuc2V0KCAwLCB1cFNpZ25bIGkgXSwgMCApOwogICAgCQkJCWN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7CiAgICAJCQkJY3ViZUNhbWVyYS5sb29rQXQoIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKyBmb3J3YXJkU2lnblsgaSBdICk7CgogICAgCQkJfQoKICAgIAkJCWNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTsKCiAgICAJCQlfc2V0Vmlld3BvcnQoIGN1YmVVVlJlbmRlclRhcmdldCwgY29sICogc2l6ZSwgaSA+IDIgPyBzaXplIDogMCwgc2l6ZSwgc2l6ZSApOwoKICAgIAkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7CgogICAgCQkJaWYgKCB1c2VTb2xpZENvbG9yICkgewoKICAgIAkJCQlyZW5kZXJlci5yZW5kZXIoIGJhY2tncm91bmRCb3gsIGN1YmVDYW1lcmEgKTsKCiAgICAJCQl9CgogICAgCQkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY3ViZUNhbWVyYSApOwoKICAgIAkJfQoKICAgIAkJYmFja2dyb3VuZEJveC5nZW9tZXRyeS5kaXNwb3NlKCk7CiAgICAJCWJhY2tncm91bmRCb3gubWF0ZXJpYWwuZGlzcG9zZSgpOwoKICAgIAkJcmVuZGVyZXIudG9uZU1hcHBpbmcgPSB0b25lTWFwcGluZzsKICAgIAkJcmVuZGVyZXIuYXV0b0NsZWFyID0gb3JpZ2luYWxBdXRvQ2xlYXI7CiAgICAJCXNjZW5lLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kOwoKICAgIAl9CgogICAgCV90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApIHsKCiAgICAJCWNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7CgogICAgCQljb25zdCBpc0N1YmVUZXh0dXJlID0gKCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApOwoKICAgIAkJaWYgKCBpc0N1YmVUZXh0dXJlICkgewoKICAgIAkJCWlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkgewoKICAgIAkJCQl0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCk7CgogICAgCQkJfQoKICAgIAkJCXRoaXMuX2N1YmVtYXBNYXRlcmlhbC51bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCB0ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0xIDogMTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkgewoKICAgIAkJCQl0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQljb25zdCBtYXRlcmlhbCA9IGlzQ3ViZVRleHR1cmUgPyB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgOiB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsOwogICAgCQljb25zdCBtZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApOwoKICAgIAkJY29uc3QgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtczsKCiAgICAJCXVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGV4dHVyZTsKCiAgICAJCWNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTsKCiAgICAJCV9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCAzICogc2l6ZSwgMiAqIHNpemUgKTsKCiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7CiAgICAJCXJlbmRlcmVyLnJlbmRlciggbWVzaCwgX2ZsYXRDYW1lcmEgKTsKCiAgICAJfQoKICAgIAlfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjsKICAgIAkJY29uc3QgYXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyOwogICAgCQlyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTsKICAgIAkJY29uc3QgbiA9IHRoaXMuX2xvZFBsYW5lcy5sZW5ndGg7CgogICAgCQlmb3IgKCBsZXQgaSA9IDE7IGkgPCBuOyBpICsrICkgewoKICAgIAkJCWNvbnN0IHNpZ21hID0gTWF0aC5zcXJ0KCB0aGlzLl9zaWdtYXNbIGkgXSAqIHRoaXMuX3NpZ21hc1sgaSBdIC0gdGhpcy5fc2lnbWFzWyBpIC0gMSBdICogdGhpcy5fc2lnbWFzWyBpIC0gMSBdICk7CgogICAgCQkJY29uc3QgcG9sZUF4aXMgPSBfYXhpc0RpcmVjdGlvbnNbICggbiAtIGkgLSAxICkgJSBfYXhpc0RpcmVjdGlvbnMubGVuZ3RoIF07CgogICAgCQkJdGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCBpIC0gMSwgaSwgc2lnbWEsIHBvbGVBeGlzICk7CgogICAgCQl9CgogICAgCQlyZW5kZXJlci5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogVGhpcyBpcyBhIHR3by1wYXNzIEdhdXNzaWFuIGJsdXIgZm9yIGEgY3ViZW1hcC4gTm9ybWFsbHkgdGhpcyBpcyBkb25lCiAgICAJICogdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5LCBidXQgdGhpcyBicmVha3MgZG93biBvbiBhIGN1YmUuIEhlcmUgd2UgYXBwbHkKICAgIAkgKiB0aGUgYmx1ciBsYXRpdHVkaW5hbGx5IChhcm91bmQgdGhlIHBvbGVzKSwgYW5kIHRoZW4gbG9uZ2l0dWRpbmFsbHkgKHRvd2FyZHMKICAgIAkgKiB0aGUgcG9sZXMpIHRvIGFwcHJveGltYXRlIHRoZSBvcnRob2dvbmFsbHktc2VwYXJhYmxlIGJsdXIuIEl0IGlzIGxlYXN0CiAgICAJICogYWNjdXJhdGUgYXQgdGhlIHBvbGVzLCBidXQgc3RpbGwgZG9lcyBhIGRlY2VudCBqb2IuCiAgICAJICoKICAgIAkgKiBAcHJpdmF0ZQogICAgCSAqIEBwYXJhbSB7V2ViR0xSZW5kZXJUYXJnZXR9IGN1YmVVVlJlbmRlclRhcmdldAogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBsb2RJbgogICAgCSAqIEBwYXJhbSB7bnVtYmVyfSBsb2RPdXQKICAgIAkgKiBAcGFyYW0ge251bWJlcn0gc2lnbWEKICAgIAkgKiBAcGFyYW0ge1ZlY3RvcjN9IFtwb2xlQXhpc10KICAgIAkgKi8KICAgIAlfYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCBsb2RJbiwgbG9kT3V0LCBzaWdtYSwgcG9sZUF4aXMgKSB7CgogICAgCQljb25zdCBwaW5nUG9uZ1JlbmRlclRhcmdldCA9IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0OwoKICAgIAkJdGhpcy5faGFsZkJsdXIoCiAgICAJCQljdWJlVVZSZW5kZXJUYXJnZXQsCiAgICAJCQlwaW5nUG9uZ1JlbmRlclRhcmdldCwKICAgIAkJCWxvZEluLAogICAgCQkJbG9kT3V0LAogICAgCQkJc2lnbWEsCiAgICAJCQknbGF0aXR1ZGluYWwnLAogICAgCQkJcG9sZUF4aXMgKTsKCiAgICAJCXRoaXMuX2hhbGZCbHVyKAogICAgCQkJcGluZ1BvbmdSZW5kZXJUYXJnZXQsCiAgICAJCQljdWJlVVZSZW5kZXJUYXJnZXQsCiAgICAJCQlsb2RPdXQsCiAgICAJCQlsb2RPdXQsCiAgICAJCQlzaWdtYSwKICAgIAkJCSdsb25naXR1ZGluYWwnLAogICAgCQkJcG9sZUF4aXMgKTsKCiAgICAJfQoKICAgIAlfaGFsZkJsdXIoIHRhcmdldEluLCB0YXJnZXRPdXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hUmFkaWFucywgZGlyZWN0aW9uLCBwb2xlQXhpcyApIHsKCiAgICAJCWNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7CiAgICAJCWNvbnN0IGJsdXJNYXRlcmlhbCA9IHRoaXMuX2JsdXJNYXRlcmlhbDsKCiAgICAJCWlmICggZGlyZWN0aW9uICE9PSAnbGF0aXR1ZGluYWwnICYmIGRpcmVjdGlvbiAhPT0gJ2xvbmdpdHVkaW5hbCcgKSB7CgogICAgCQkJY29uc29sZS5lcnJvcigKICAgIAkJCQknYmx1ciBkaXJlY3Rpb24gbXVzdCBiZSBlaXRoZXIgbGF0aXR1ZGluYWwgb3IgbG9uZ2l0dWRpbmFsIScgKTsKCiAgICAJCX0KCiAgICAJCS8vIE51bWJlciBvZiBzdGFuZGFyZCBkZXZpYXRpb25zIGF0IHdoaWNoIHRvIGN1dCBvZmYgdGhlIGRpc2NyZXRlIGFwcHJveGltYXRpb24uCiAgICAJCWNvbnN0IFNUQU5EQVJEX0RFVklBVElPTlMgPSAzOwoKICAgIAkJY29uc3QgYmx1ck1lc2ggPSBuZXcgTWVzaCggdGhpcy5fbG9kUGxhbmVzWyBsb2RPdXQgXSwgYmx1ck1hdGVyaWFsICk7CiAgICAJCWNvbnN0IGJsdXJVbmlmb3JtcyA9IGJsdXJNYXRlcmlhbC51bmlmb3JtczsKCiAgICAJCWNvbnN0IHBpeGVscyA9IHRoaXMuX3NpemVMb2RzWyBsb2RJbiBdIC0gMTsKICAgIAkJY29uc3QgcmFkaWFuc1BlclBpeGVsID0gaXNGaW5pdGUoIHNpZ21hUmFkaWFucyApID8gTWF0aC5QSSAvICggMiAqIHBpeGVscyApIDogMiAqIE1hdGguUEkgLyAoIDIgKiBNQVhfU0FNUExFUyAtIDEgKTsKICAgIAkJY29uc3Qgc2lnbWFQaXhlbHMgPSBzaWdtYVJhZGlhbnMgLyByYWRpYW5zUGVyUGl4ZWw7CiAgICAJCWNvbnN0IHNhbXBsZXMgPSBpc0Zpbml0ZSggc2lnbWFSYWRpYW5zICkgPyAxICsgTWF0aC5mbG9vciggU1RBTkRBUkRfREVWSUFUSU9OUyAqIHNpZ21hUGl4ZWxzICkgOiBNQVhfU0FNUExFUzsKCiAgICAJCWlmICggc2FtcGxlcyA+IE1BWF9TQU1QTEVTICkgewoKICAgIAkJCWNvbnNvbGUud2FybiggYHNpZ21hUmFkaWFucywgJHsKCQkJCXNpZ21hUmFkaWFuc30sIGlzIHRvbyBsYXJnZSBhbmQgd2lsbCBjbGlwLCBhcyBpdCByZXF1ZXN0ZWQgJHsKCQkJCXNhbXBsZXN9IHNhbXBsZXMgd2hlbiB0aGUgbWF4aW11bSBpcyBzZXQgdG8gJHtNQVhfU0FNUExFU31gICk7CgogICAgCQl9CgogICAgCQljb25zdCB3ZWlnaHRzID0gW107CiAgICAJCWxldCBzdW0gPSAwOwoKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgTUFYX1NBTVBMRVM7ICsrIGkgKSB7CgogICAgCQkJY29uc3QgeCA9IGkgLyBzaWdtYVBpeGVsczsKICAgIAkJCWNvbnN0IHdlaWdodCA9IE1hdGguZXhwKCAtIHggKiB4IC8gMiApOwogICAgCQkJd2VpZ2h0cy5wdXNoKCB3ZWlnaHQgKTsKCiAgICAJCQlpZiAoIGkgPT09IDAgKSB7CgogICAgCQkJCXN1bSArPSB3ZWlnaHQ7CgogICAgCQkJfSBlbHNlIGlmICggaSA8IHNhbXBsZXMgKSB7CgogICAgCQkJCXN1bSArPSAyICogd2VpZ2h0OwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IHdlaWdodHMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCXdlaWdodHNbIGkgXSA9IHdlaWdodHNbIGkgXSAvIHN1bTsKCiAgICAJCX0KCiAgICAJCWJsdXJVbmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRhcmdldEluLnRleHR1cmU7CiAgICAJCWJsdXJVbmlmb3Jtc1sgJ3NhbXBsZXMnIF0udmFsdWUgPSBzYW1wbGVzOwogICAgCQlibHVyVW5pZm9ybXNbICd3ZWlnaHRzJyBdLnZhbHVlID0gd2VpZ2h0czsKICAgIAkJYmx1clVuaWZvcm1zWyAnbGF0aXR1ZGluYWwnIF0udmFsdWUgPSBkaXJlY3Rpb24gPT09ICdsYXRpdHVkaW5hbCc7CgogICAgCQlpZiAoIHBvbGVBeGlzICkgewoKICAgIAkJCWJsdXJVbmlmb3Jtc1sgJ3BvbGVBeGlzJyBdLnZhbHVlID0gcG9sZUF4aXM7CgogICAgCQl9CgogICAgCQljb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7CiAgICAJCWJsdXJVbmlmb3Jtc1sgJ2RUaGV0YScgXS52YWx1ZSA9IHJhZGlhbnNQZXJQaXhlbDsKICAgIAkJYmx1clVuaWZvcm1zWyAnbWlwSW50JyBdLnZhbHVlID0gX2xvZE1heCAtIGxvZEluOwoKICAgIAkJY29uc3Qgb3V0cHV0U2l6ZSA9IHRoaXMuX3NpemVMb2RzWyBsb2RPdXQgXTsKICAgIAkJY29uc3QgeCA9IDMgKiBvdXRwdXRTaXplICogKCBsb2RPdXQgPiBfbG9kTWF4IC0gTE9EX01JTiA/IGxvZE91dCAtIF9sb2RNYXggKyBMT0RfTUlOIDogMCApOwogICAgCQljb25zdCB5ID0gNCAqICggdGhpcy5fY3ViZVNpemUgLSBvdXRwdXRTaXplICk7CgogICAgCQlfc2V0Vmlld3BvcnQoIHRhcmdldE91dCwgeCwgeSwgMyAqIG91dHB1dFNpemUsIDIgKiBvdXRwdXRTaXplICk7CiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGFyZ2V0T3V0ICk7CiAgICAJCXJlbmRlcmVyLnJlbmRlciggYmx1ck1lc2gsIF9mbGF0Q2FtZXJhICk7CgogICAgCX0KCiAgICB9CgoKCiAgICBmdW5jdGlvbiBfY3JlYXRlUGxhbmVzKCBsb2RNYXggKSB7CgogICAgCWNvbnN0IGxvZFBsYW5lcyA9IFtdOwogICAgCWNvbnN0IHNpemVMb2RzID0gW107CiAgICAJY29uc3Qgc2lnbWFzID0gW107CgogICAgCWxldCBsb2QgPSBsb2RNYXg7CgogICAgCWNvbnN0IHRvdGFsTG9kcyA9IGxvZE1heCAtIExPRF9NSU4gKyAxICsgRVhUUkFfTE9EX1NJR01BLmxlbmd0aDsKCiAgICAJZm9yICggbGV0IGkgPSAwOyBpIDwgdG90YWxMb2RzOyBpICsrICkgewoKICAgIAkJY29uc3Qgc2l6ZUxvZCA9IE1hdGgucG93KCAyLCBsb2QgKTsKICAgIAkJc2l6ZUxvZHMucHVzaCggc2l6ZUxvZCApOwogICAgCQlsZXQgc2lnbWEgPSAxLjAgLyBzaXplTG9kOwoKICAgIAkJaWYgKCBpID4gbG9kTWF4IC0gTE9EX01JTiApIHsKCiAgICAJCQlzaWdtYSA9IEVYVFJBX0xPRF9TSUdNQVsgaSAtIGxvZE1heCArIExPRF9NSU4gLSAxIF07CgogICAgCQl9IGVsc2UgaWYgKCBpID09PSAwICkgewoKICAgIAkJCXNpZ21hID0gMDsKCiAgICAJCX0KCiAgICAJCXNpZ21hcy5wdXNoKCBzaWdtYSApOwoKICAgIAkJY29uc3QgdGV4ZWxTaXplID0gMS4wIC8gKCBzaXplTG9kIC0gMiApOwogICAgCQljb25zdCBtaW4gPSAtIHRleGVsU2l6ZTsKICAgIAkJY29uc3QgbWF4ID0gMSArIHRleGVsU2l6ZTsKICAgIAkJY29uc3QgdXYxID0gWyBtaW4sIG1pbiwgbWF4LCBtaW4sIG1heCwgbWF4LCBtaW4sIG1pbiwgbWF4LCBtYXgsIG1pbiwgbWF4IF07CgogICAgCQljb25zdCBjdWJlRmFjZXMgPSA2OwogICAgCQljb25zdCB2ZXJ0aWNlcyA9IDY7CiAgICAJCWNvbnN0IHBvc2l0aW9uU2l6ZSA9IDM7CiAgICAJCWNvbnN0IHV2U2l6ZSA9IDI7CiAgICAJCWNvbnN0IGZhY2VJbmRleFNpemUgPSAxOwoKICAgIAkJY29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApOwogICAgCQljb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkoIHV2U2l6ZSAqIHZlcnRpY2VzICogY3ViZUZhY2VzICk7CiAgICAJCWNvbnN0IGZhY2VJbmRleCA9IG5ldyBGbG9hdDMyQXJyYXkoIGZhY2VJbmRleFNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApOwoKICAgIAkJZm9yICggbGV0IGZhY2UgPSAwOyBmYWNlIDwgY3ViZUZhY2VzOyBmYWNlICsrICkgewoKICAgIAkJCWNvbnN0IHggPSAoIGZhY2UgJSAzICkgKiAyIC8gMyAtIDE7CiAgICAJCQljb25zdCB5ID0gZmFjZSA+IDIgPyAwIDogLTE7CiAgICAJCQljb25zdCBjb29yZGluYXRlcyA9IFsKICAgIAkJCQl4LCB5LCAwLAogICAgCQkJCXggKyAyIC8gMywgeSwgMCwKICAgIAkJCQl4ICsgMiAvIDMsIHkgKyAxLCAwLAogICAgCQkJCXgsIHksIDAsCiAgICAJCQkJeCArIDIgLyAzLCB5ICsgMSwgMCwKICAgIAkJCQl4LCB5ICsgMSwgMAogICAgCQkJXTsKICAgIAkJCXBvc2l0aW9uLnNldCggY29vcmRpbmF0ZXMsIHBvc2l0aW9uU2l6ZSAqIHZlcnRpY2VzICogZmFjZSApOwogICAgCQkJdXYuc2V0KCB1djEsIHV2U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApOwogICAgCQkJY29uc3QgZmlsbCA9IFsgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSBdOwogICAgCQkJZmFjZUluZGV4LnNldCggZmlsbCwgZmFjZUluZGV4U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgcGxhbmVzID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CiAgICAJCXBsYW5lcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBwb3NpdGlvblNpemUgKSApOwogICAgCQlwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTsKICAgIAkJcGxhbmVzLnNldEF0dHJpYnV0ZSggJ2ZhY2VJbmRleCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGZhY2VJbmRleCwgZmFjZUluZGV4U2l6ZSApICk7CiAgICAJCWxvZFBsYW5lcy5wdXNoKCBwbGFuZXMgKTsKCiAgICAJCWlmICggbG9kID4gTE9EX01JTiApIHsKCiAgICAJCQlsb2QgLS07CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIHsgbG9kUGxhbmVzLCBzaXplTG9kcywgc2lnbWFzIH07CgogICAgfQoKICAgIGZ1bmN0aW9uIF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApIHsKCiAgICAJY29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTsKICAgIAljdWJlVVZSZW5kZXJUYXJnZXQudGV4dHVyZS5tYXBwaW5nID0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc7CiAgICAJY3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9ICdQTVJFTS5jdWJlVXYnOwogICAgCWN1YmVVVlJlbmRlclRhcmdldC5zY2lzc29yVGVzdCA9IHRydWU7CiAgICAJcmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDsKCiAgICB9CgogICAgZnVuY3Rpb24gX3NldFZpZXdwb3J0KCB0YXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7CgogICAgCXRhcmdldC52aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTsKICAgIAl0YXJnZXQuc2Npc3Nvci5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gX2dldEJsdXJTaGFkZXIoIGxvZE1heCwgd2lkdGgsIGhlaWdodCApIHsKCiAgICAJY29uc3Qgd2VpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkoIE1BWF9TQU1QTEVTICk7CiAgICAJY29uc3QgcG9sZUF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApOwogICAgCWNvbnN0IHNoYWRlck1hdGVyaWFsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7CgogICAgCQluYW1lOiAnU3BoZXJpY2FsR2F1c3NpYW5CbHVyJywKCiAgICAJCWRlZmluZXM6IHsKICAgIAkJCSduJzogTUFYX1NBTVBMRVMsCiAgICAJCQknQ1VCRVVWX1RFWEVMX1dJRFRIJzogMS4wIC8gd2lkdGgsCiAgICAJCQknQ1VCRVVWX1RFWEVMX0hFSUdIVCc6IDEuMCAvIGhlaWdodCwKICAgIAkJCSdDVUJFVVZfTUFYX01JUCc6IGAke2xvZE1heH0uMGAsCiAgICAJCX0sCgogICAgCQl1bmlmb3JtczogewogICAgCQkJJ2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCSdzYW1wbGVzJzogeyB2YWx1ZTogMSB9LAogICAgCQkJJ3dlaWdodHMnOiB7IHZhbHVlOiB3ZWlnaHRzIH0sCiAgICAJCQknbGF0aXR1ZGluYWwnOiB7IHZhbHVlOiBmYWxzZSB9LAogICAgCQkJJ2RUaGV0YSc6IHsgdmFsdWU6IDAgfSwKICAgIAkJCSdtaXBJbnQnOiB7IHZhbHVlOiAwIH0sCiAgICAJCQkncG9sZUF4aXMnOiB7IHZhbHVlOiBwb2xlQXhpcyB9CiAgICAJCX0sCgogICAgCQl2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSwKCiAgICAJCWZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYAoKCQkJcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CgkJCXByZWNpc2lvbiBtZWRpdW1wIGludDsKCgkJCXZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uOwoKCQkJdW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwOwoJCQl1bmlmb3JtIGludCBzYW1wbGVzOwoJCQl1bmlmb3JtIGZsb2F0IHdlaWdodHNbIG4gXTsKCQkJdW5pZm9ybSBib29sIGxhdGl0dWRpbmFsOwoJCQl1bmlmb3JtIGZsb2F0IGRUaGV0YTsKCQkJdW5pZm9ybSBmbG9hdCBtaXBJbnQ7CgkJCXVuaWZvcm0gdmVjMyBwb2xlQXhpczsKCgkJCSNkZWZpbmUgRU5WTUFQX1RZUEVfQ1VCRV9VVgoJCQkjaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PgoKCQkJdmVjMyBnZXRTYW1wbGUoIGZsb2F0IHRoZXRhLCB2ZWMzIGF4aXMgKSB7CgoJCQkJZmxvYXQgY29zVGhldGEgPSBjb3MoIHRoZXRhICk7CgkJCQkvLyBSb2RyaWd1ZXMnIGF4aXMtYW5nbGUgcm90YXRpb24KCQkJCXZlYzMgc2FtcGxlRGlyZWN0aW9uID0gdk91dHB1dERpcmVjdGlvbiAqIGNvc1RoZXRhCgkJCQkJKyBjcm9zcyggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogc2luKCB0aGV0YSApCgkJCQkJKyBheGlzICogZG90KCBheGlzLCB2T3V0cHV0RGlyZWN0aW9uICkgKiAoIDEuMCAtIGNvc1RoZXRhICk7CgoJCQkJcmV0dXJuIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50ICk7CgoJCQl9CgoJCQl2b2lkIG1haW4oKSB7CgoJCQkJdmVjMyBheGlzID0gbGF0aXR1ZGluYWwgPyBwb2xlQXhpcyA6IGNyb3NzKCBwb2xlQXhpcywgdk91dHB1dERpcmVjdGlvbiApOwoKCQkJCWlmICggYWxsKCBlcXVhbCggYXhpcywgdmVjMyggMC4wICkgKSApICkgewoKCQkJCQlheGlzID0gdmVjMyggdk91dHB1dERpcmVjdGlvbi56LCAwLjAsIC0gdk91dHB1dERpcmVjdGlvbi54ICk7CgoJCQkJfQoKCQkJCWF4aXMgPSBub3JtYWxpemUoIGF4aXMgKTsKCgkJCQlnbF9GcmFnQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTsKCQkJCWdsX0ZyYWdDb2xvci5yZ2IgKz0gd2VpZ2h0c1sgMCBdICogZ2V0U2FtcGxlKCAwLjAsIGF4aXMgKTsKCgkJCQlmb3IgKCBpbnQgaSA9IDE7IGkgPCBuOyBpKysgKSB7CgoJCQkJCWlmICggaSA+PSBzYW1wbGVzICkgewoKCQkJCQkJYnJlYWs7CgoJCQkJCX0KCgkJCQkJZmxvYXQgdGhldGEgPSBkVGhldGEgKiBmbG9hdCggaSApOwoJCQkJCWdsX0ZyYWdDb2xvci5yZ2IgKz0gd2VpZ2h0c1sgaSBdICogZ2V0U2FtcGxlKCAtMS4wICogdGhldGEsIGF4aXMgKTsKCQkJCQlnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggdGhldGEsIGF4aXMgKTsKCgkJCQl9CgoJCQl9CgkJYCwKCiAgICAJCWJsZW5kaW5nOiBOb0JsZW5kaW5nLAogICAgCQlkZXB0aFRlc3Q6IGZhbHNlLAogICAgCQlkZXB0aFdyaXRlOiBmYWxzZQoKICAgIAl9ICk7CgogICAgCXJldHVybiBzaGFkZXJNYXRlcmlhbDsKCiAgICB9CgogICAgZnVuY3Rpb24gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKSB7CgogICAgCXJldHVybiBuZXcgU2hhZGVyTWF0ZXJpYWwoIHsKCiAgICAJCW5hbWU6ICdFcXVpcmVjdGFuZ3VsYXJUb0N1YmVVVicsCgogICAgCQl1bmlmb3JtczogewogICAgCQkJJ2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfQogICAgCQl9LAoKICAgIAkJdmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksCgogICAgCQlmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2AKCgkJCXByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwoJCQlwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CgoJCQl2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjsKCgkJCXVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDsKCgkJCSNpbmNsdWRlIDxjb21tb24+CgoJCQl2b2lkIG1haW4oKSB7CgoJCQkJdmVjMyBvdXRwdXREaXJlY3Rpb24gPSBub3JtYWxpemUoIHZPdXRwdXREaXJlY3Rpb24gKTsKCQkJCXZlYzIgdXYgPSBlcXVpcmVjdFV2KCBvdXRwdXREaXJlY3Rpb24gKTsKCgkJCQlnbF9GcmFnQ29sb3IgPSB2ZWM0KCB0ZXh0dXJlMkQgKCBlbnZNYXAsIHV2ICkucmdiLCAxLjAgKTsKCgkJCX0KCQlgLAoKICAgIAkJYmxlbmRpbmc6IE5vQmxlbmRpbmcsCiAgICAJCWRlcHRoVGVzdDogZmFsc2UsCiAgICAJCWRlcHRoV3JpdGU6IGZhbHNlCgogICAgCX0gKTsKCiAgICB9CgogICAgZnVuY3Rpb24gX2dldEN1YmVtYXBNYXRlcmlhbCgpIHsKCiAgICAJcmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCggewoKICAgIAkJbmFtZTogJ0N1YmVtYXBUb0N1YmVVVicsCgogICAgCQl1bmlmb3JtczogewogICAgCQkJJ2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCSdmbGlwRW52TWFwJzogeyB2YWx1ZTogLTEgfQogICAgCQl9LAoKICAgIAkJdmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksCgogICAgCQlmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2AKCgkJCXByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwoJCQlwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CgoJCQl1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7CgoJCQl2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjsKCgkJCXVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwOwoKCQkJdm9pZCBtYWluKCkgewoKCQkJCWdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiB2T3V0cHV0RGlyZWN0aW9uLngsIHZPdXRwdXREaXJlY3Rpb24ueXogKSApOwoKCQkJfQoJCWAsCgogICAgCQlibGVuZGluZzogTm9CbGVuZGluZywKICAgIAkJZGVwdGhUZXN0OiBmYWxzZSwKICAgIAkJZGVwdGhXcml0ZTogZmFsc2UKCiAgICAJfSApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCkgewoKICAgIAlyZXR1cm4gLyogZ2xzbCAqL2AKCgkJcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CgkJcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKCQlhdHRyaWJ1dGUgZmxvYXQgZmFjZUluZGV4OwoKCQl2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjsKCgkJLy8gUkggY29vcmRpbmF0ZSBzeXN0ZW07IFBNUkVNIGZhY2UtaW5kZXhpbmcgY29udmVudGlvbgoJCXZlYzMgZ2V0RGlyZWN0aW9uKCB2ZWMyIHV2LCBmbG9hdCBmYWNlICkgewoKCQkJdXYgPSAyLjAgKiB1diAtIDEuMDsKCgkJCXZlYzMgZGlyZWN0aW9uID0gdmVjMyggdXYsIDEuMCApOwoKCQkJaWYgKCBmYWNlID09IDAuMCApIHsKCgkJCQlkaXJlY3Rpb24gPSBkaXJlY3Rpb24uenl4OyAvLyAoIDEsIHYsIHUgKSBwb3MgeAoKCQkJfSBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7CgoJCQkJZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTsKCQkJCWRpcmVjdGlvbi54eiAqPSAtMS4wOyAvLyAoIC11LCAxLCAtdiApIHBvcyB5CgoJCQl9IGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHsKCgkJCQlkaXJlY3Rpb24ueCAqPSAtMS4wOyAvLyAoIC11LCB2LCAxICkgcG9zIHoKCgkJCX0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkgewoKCQkJCWRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7CgkJCQlkaXJlY3Rpb24ueHogKj0gLTEuMDsgLy8gKCAtMSwgdiwgLXUgKSBuZWcgeAoKCQkJfSBlbHNlIGlmICggZmFjZSA9PSA0LjAgKSB7CgoJCQkJZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTsKCQkJCWRpcmVjdGlvbi54eSAqPSAtMS4wOyAvLyAoIC11LCAtMSwgdiApIG5lZyB5CgoJCQl9IGVsc2UgaWYgKCBmYWNlID09IDUuMCApIHsKCgkJCQlkaXJlY3Rpb24ueiAqPSAtMS4wOyAvLyAoIHUsIHYsIC0xICkgbmVnIHoKCgkJCX0KCgkJCXJldHVybiBkaXJlY3Rpb247CgoJCX0KCgkJdm9pZCBtYWluKCkgewoKCQkJdk91dHB1dERpcmVjdGlvbiA9IGdldERpcmVjdGlvbiggdXYsIGZhY2VJbmRleCApOwoJCQlnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsKCgkJfQoJYDsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xDdWJlVVZNYXBzKCByZW5kZXJlciApIHsKCiAgICAJbGV0IGN1YmVVVm1hcHMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAlsZXQgcG1yZW1HZW5lcmF0b3IgPSBudWxsOwoKICAgIAlmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7CgogICAgCQlpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgKSB7CgogICAgCQkJY29uc3QgbWFwcGluZyA9IHRleHR1cmUubWFwcGluZzsKCiAgICAJCQljb25zdCBpc0VxdWlyZWN0TWFwID0gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApOwogICAgCQkJY29uc3QgaXNDdWJlTWFwID0gKCBtYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgbWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7CgogICAgCQkJLy8gZXF1aXJlY3QvY3ViZSBtYXAgdG8gY3ViZVVWIGNvbnZlcnNpb24KCiAgICAJCQlpZiAoIGlzRXF1aXJlY3RNYXAgfHwgaXNDdWJlTWFwICkgewoKICAgIAkJCQlsZXQgcmVuZGVyVGFyZ2V0ID0gY3ViZVVWbWFwcy5nZXQoIHRleHR1cmUgKTsKCiAgICAJCQkJY29uc3QgY3VycmVudFBNUkVNVmVyc2lvbiA9IHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkID8gcmVuZGVyVGFyZ2V0LnRleHR1cmUucG1yZW1WZXJzaW9uIDogMDsKCiAgICAJCQkJaWYgKCB0ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSAmJiB0ZXh0dXJlLnBtcmVtVmVyc2lvbiAhPT0gY3VycmVudFBNUkVNVmVyc2lvbiApIHsKCiAgICAJCQkJCWlmICggcG1yZW1HZW5lcmF0b3IgPT09IG51bGwgKSBwbXJlbUdlbmVyYXRvciA9IG5ldyBQTVJFTUdlbmVyYXRvciggcmVuZGVyZXIgKTsKCiAgICAJCQkJCXJlbmRlclRhcmdldCA9IGlzRXF1aXJlY3RNYXAgPyBwbXJlbUdlbmVyYXRvci5mcm9tRXF1aXJlY3Rhbmd1bGFyKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTsKICAgIAkJCQkJcmVuZGVyVGFyZ2V0LnRleHR1cmUucG1yZW1WZXJzaW9uID0gdGV4dHVyZS5wbXJlbVZlcnNpb247CgogICAgCQkJCQljdWJlVVZtYXBzLnNldCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7CgogICAgCQkJCQlyZXR1cm4gcmVuZGVyVGFyZ2V0LnRleHR1cmU7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJCXJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJY29uc3QgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlOwoKICAgIAkJCQkJCWlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHsKCiAgICAJCQkJCQkJaWYgKCBwbXJlbUdlbmVyYXRvciA9PT0gbnVsbCApIHBtcmVtR2VuZXJhdG9yID0gbmV3IFBNUkVNR2VuZXJhdG9yKCByZW5kZXJlciApOwoKICAgIAkJCQkJCQlyZW5kZXJUYXJnZXQgPSBpc0VxdWlyZWN0TWFwID8gcG1yZW1HZW5lcmF0b3IuZnJvbUVxdWlyZWN0YW5ndWxhciggdGV4dHVyZSApIDogcG1yZW1HZW5lcmF0b3IuZnJvbUN1YmVtYXAoIHRleHR1cmUgKTsKICAgIAkJCQkJCQlyZW5kZXJUYXJnZXQudGV4dHVyZS5wbXJlbVZlcnNpb24gPSB0ZXh0dXJlLnBtcmVtVmVyc2lvbjsKCiAgICAJCQkJCQkJY3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApOwoKICAgIAkJCQkJCQl0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApOwoKICAgIAkJCQkJCQlyZXR1cm4gcmVuZGVyVGFyZ2V0LnRleHR1cmU7CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJLy8gaW1hZ2Ugbm90IHlldCByZWFkeS4gdHJ5IHRoZSBjb252ZXJzaW9uIG5leHQgZnJhbWUKCiAgICAJCQkJCQkJcmV0dXJuIG51bGw7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRleHR1cmU7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHsKCiAgICAJCWxldCBjb3VudCA9IDA7CiAgICAJCWNvbnN0IGxlbmd0aCA9IDY7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7CgogICAgCQkJaWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKzsKCiAgICAJCX0KCiAgICAJCXJldHVybiBjb3VudCA9PT0gbGVuZ3RoOwoKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHsKCiAgICAJCWNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7CgogICAgCQl0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApOwoKICAgIAkJY29uc3QgY3ViZW1hcFVWID0gY3ViZVVWbWFwcy5nZXQoIHRleHR1cmUgKTsKCiAgICAJCWlmICggY3ViZW1hcFVWICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJY3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTsKICAgIAkJCWN1YmVtYXBVVi5kaXNwb3NlKCk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZGlzcG9zZSgpIHsKCiAgICAJCWN1YmVVVm1hcHMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAkJaWYgKCBwbXJlbUdlbmVyYXRvciAhPT0gbnVsbCApIHsKCiAgICAJCQlwbXJlbUdlbmVyYXRvci5kaXNwb3NlKCk7CiAgICAJCQlwbXJlbUdlbmVyYXRvciA9IG51bGw7CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIHsKICAgIAkJZ2V0OiBnZXQsCiAgICAJCWRpc3Bvc2U6IGRpc3Bvc2UKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTEV4dGVuc2lvbnMoIGdsICkgewoKICAgIAljb25zdCBleHRlbnNpb25zID0ge307CgogICAgCWZ1bmN0aW9uIGdldEV4dGVuc2lvbiggbmFtZSApIHsKCiAgICAJCWlmICggZXh0ZW5zaW9uc1sgbmFtZSBdICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJcmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTsKCiAgICAJCX0KCiAgICAJCWxldCBleHRlbnNpb247CgogICAgCQlzd2l0Y2ggKCBuYW1lICkgewoKICAgIAkJCWNhc2UgJ1dFQkdMX2RlcHRoX3RleHR1cmUnOgogICAgCQkJCWV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmUnICk7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJzoKICAgIAkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJzoKICAgIAkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Yyc6CiAgICAJCQkJZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJZGVmYXVsdDoKICAgIAkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oIG5hbWUgKTsKCiAgICAJCX0KCiAgICAJCWV4dGVuc2lvbnNbIG5hbWUgXSA9IGV4dGVuc2lvbjsKCiAgICAJCXJldHVybiBleHRlbnNpb247CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCWhhczogZnVuY3Rpb24gKCBuYW1lICkgewoKICAgIAkJCXJldHVybiBnZXRFeHRlbnNpb24oIG5hbWUgKSAhPT0gbnVsbDsKCiAgICAJCX0sCgogICAgCQlpbml0OiBmdW5jdGlvbiAoKSB7CgogICAgCQkJZ2V0RXh0ZW5zaW9uKCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKTsKICAgIAkJCWdldEV4dGVuc2lvbiggJ1dFQkdMX2NsaXBfY3VsbF9kaXN0YW5jZScgKTsKICAgIAkJCWdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTsKICAgIAkJCWdldEV4dGVuc2lvbiggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKTsKICAgIAkJCWdldEV4dGVuc2lvbiggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKTsKICAgIAkJCWdldEV4dGVuc2lvbiggJ1dFQkdMX3JlbmRlcl9zaGFyZWRfZXhwb25lbnQnICk7CgogICAgCQl9LAoKICAgIAkJZ2V0OiBmdW5jdGlvbiAoIG5hbWUgKSB7CgogICAgCQkJY29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7CgogICAgCQkJaWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7CgogICAgCQkJCXdhcm5PbmNlKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIGV4dGVuc2lvbjsKCiAgICAJCX0KCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbywgYmluZGluZ1N0YXRlcyApIHsKCiAgICAJY29uc3QgZ2VvbWV0cmllcyA9IHt9OwogICAgCWNvbnN0IHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAlmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZSggZXZlbnQgKSB7CgogICAgCQljb25zdCBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDsKCiAgICAJCWlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7CgogICAgCQkJYXR0cmlidXRlcy5yZW1vdmUoIGdlb21ldHJ5LmluZGV4ICk7CgogICAgCQl9CgogICAgCQlmb3IgKCBjb25zdCBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7CgogICAgCQkJYXR0cmlidXRlcy5yZW1vdmUoIGdlb21ldHJ5LmF0dHJpYnV0ZXNbIG5hbWUgXSApOwoKICAgIAkJfQoKICAgIAkJZ2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApOwoKICAgIAkJZGVsZXRlIGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF07CgogICAgCQljb25zdCBhdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTsKCiAgICAJCWlmICggYXR0cmlidXRlICkgewoKICAgIAkJCWF0dHJpYnV0ZXMucmVtb3ZlKCBhdHRyaWJ1dGUgKTsKICAgIAkJCXdpcmVmcmFtZUF0dHJpYnV0ZXMuZGVsZXRlKCBnZW9tZXRyeSApOwoKICAgIAkJfQoKICAgIAkJYmluZGluZ1N0YXRlcy5yZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKTsKCiAgICAJCWlmICggZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSApIHsKCiAgICAJCQlkZWxldGUgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQ7CgogICAgCQl9CgogICAgCQkvLwoKICAgIAkJaW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXQoIG9iamVjdCwgZ2VvbWV0cnkgKSB7CgogICAgCQlpZiAoIGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF0gPT09IHRydWUgKSByZXR1cm4gZ2VvbWV0cnk7CgogICAgCQlnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7CgogICAgCQlnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdID0gdHJ1ZTsKCiAgICAJCWluZm8ubWVtb3J5Lmdlb21ldHJpZXMgKys7CgogICAgCQlyZXR1cm4gZ2VvbWV0cnk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHsKCiAgICAJCWNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CgogICAgCQkvLyBVcGRhdGluZyBpbmRleCBidWZmZXIgaW4gVkFPIG5vdy4gU2VlIFdlYkdMQmluZGluZ1N0YXRlcy4KCiAgICAJCWZvciAoIGNvbnN0IG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkgewoKICAgIAkJCWF0dHJpYnV0ZXMudXBkYXRlKCBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXSwgZ2wuQVJSQVlfQlVGRkVSICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHsKCiAgICAJCWNvbnN0IGluZGljZXMgPSBbXTsKCiAgICAJCWNvbnN0IGdlb21ldHJ5SW5kZXggPSBnZW9tZXRyeS5pbmRleDsKICAgIAkJY29uc3QgZ2VvbWV0cnlQb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CiAgICAJCWxldCB2ZXJzaW9uID0gMDsKCiAgICAJCWlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHsKCiAgICAJCQljb25zdCBhcnJheSA9IGdlb21ldHJ5SW5kZXguYXJyYXk7CiAgICAJCQl2ZXJzaW9uID0gZ2VvbWV0cnlJbmRleC52ZXJzaW9uOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHsKCiAgICAJCQkJY29uc3QgYSA9IGFycmF5WyBpICsgMCBdOwogICAgCQkJCWNvbnN0IGIgPSBhcnJheVsgaSArIDEgXTsKICAgIAkJCQljb25zdCBjID0gYXJyYXlbIGkgKyAyIF07CgogICAgCQkJCWluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSBpZiAoIGdlb21ldHJ5UG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQljb25zdCBhcnJheSA9IGdlb21ldHJ5UG9zaXRpb24uYXJyYXk7CiAgICAJCQl2ZXJzaW9uID0gZ2VvbWV0cnlQb3NpdGlvbi52ZXJzaW9uOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHsKCiAgICAJCQkJY29uc3QgYSA9IGkgKyAwOwogICAgCQkJCWNvbnN0IGIgPSBpICsgMTsKICAgIAkJCQljb25zdCBjID0gaSArIDI7CgogICAgCQkJCWluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSB7CgogICAgCQkJcmV0dXJuOwoKICAgIAkJfQoKICAgIAkJY29uc3QgYXR0cmlidXRlID0gbmV3ICggYXJyYXlOZWVkc1VpbnQzMiggaW5kaWNlcyApID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTsKICAgIAkJYXR0cmlidXRlLnZlcnNpb24gPSB2ZXJzaW9uOwoKICAgIAkJLy8gVXBkYXRpbmcgaW5kZXggYnVmZmVyIGluIFZBTyBub3cuIFNlZSBXZWJHTEJpbmRpbmdTdGF0ZXMKCiAgICAJCS8vCgogICAgCQljb25zdCBwcmV2aW91c0F0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApOwoKICAgIAkJaWYgKCBwcmV2aW91c0F0dHJpYnV0ZSApIGF0dHJpYnV0ZXMucmVtb3ZlKCBwcmV2aW91c0F0dHJpYnV0ZSApOwoKICAgIAkJLy8KCiAgICAJCXdpcmVmcmFtZUF0dHJpYnV0ZXMuc2V0KCBnZW9tZXRyeSwgYXR0cmlidXRlICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHsKCiAgICAJCWNvbnN0IGN1cnJlbnRBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTsKCiAgICAJCWlmICggY3VycmVudEF0dHJpYnV0ZSApIHsKCiAgICAJCQljb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7CgogICAgCQkJaWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkgewoKICAgIAkJCQkvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lCgogICAgCQkJCWlmICggY3VycmVudEF0dHJpYnV0ZS52ZXJzaW9uIDwgZ2VvbWV0cnlJbmRleC52ZXJzaW9uICkgewoKICAgIAkJCQkJdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCWdldDogZ2V0LAogICAgCQl1cGRhdGU6IHVwZGF0ZSwKCiAgICAJCWdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlCgogICAgCX07CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbyApIHsKCiAgICAJbGV0IG1vZGU7CgogICAgCWZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkgewoKICAgIAkJbW9kZSA9IHZhbHVlOwoKICAgIAl9CgogICAgCWxldCB0eXBlLCBieXRlc1BlckVsZW1lbnQ7CgogICAgCWZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHsKCiAgICAJCXR5cGUgPSB2YWx1ZS50eXBlOwogICAgCQlieXRlc1BlckVsZW1lbnQgPSB2YWx1ZS5ieXRlc1BlckVsZW1lbnQ7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7CgogICAgCQlnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApOwoKICAgIAkJaW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCAxICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBzdGFydCwgY291bnQsIHByaW1jb3VudCApIHsKCiAgICAJCWlmICggcHJpbWNvdW50ID09PSAwICkgcmV0dXJuOwoKICAgIAkJZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQsIHByaW1jb3VudCApOwoKICAgIAkJaW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBwcmltY291bnQgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXJNdWx0aURyYXcoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQgKSB7CgogICAgCQlpZiAoIGRyYXdDb3VudCA9PT0gMCApIHJldHVybjsKCiAgICAJCWNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlfZHJhdycgKTsKICAgIAkJZXh0ZW5zaW9uLm11bHRpRHJhd0VsZW1lbnRzV0VCR0woIG1vZGUsIGNvdW50cywgMCwgdHlwZSwgc3RhcnRzLCAwLCBkcmF3Q291bnQgKTsKCiAgICAJCWxldCBlbGVtZW50Q291bnQgPSAwOwogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7CgogICAgCQkJZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdOwoKICAgIAkJfQoKICAgIAkJaW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApOwoKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHsKCiAgICAJCWlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuOwoKICAgIAkJY29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApOwoKICAgIAkJaWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgc3RhcnRzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJcmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlleHRlbnNpb24ubXVsdGlEcmF3RWxlbWVudHNJbnN0YW5jZWRXRUJHTCggbW9kZSwgY291bnRzLCAwLCB0eXBlLCBzdGFydHMsIDAsIHByaW1jb3VudCwgMCwgZHJhd0NvdW50ICk7CgogICAgCQkJbGV0IGVsZW1lbnRDb3VudCA9IDA7CiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7CgogICAgCQkJCWVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXSAqIHByaW1jb3VudFsgaSBdOwoKICAgIAkJCX0KCiAgICAJCQlpbmZvLnVwZGF0ZSggZWxlbWVudENvdW50LCBtb2RlLCAxICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLy8KCiAgICAJdGhpcy5zZXRNb2RlID0gc2V0TW9kZTsKICAgIAl0aGlzLnNldEluZGV4ID0gc2V0SW5kZXg7CiAgICAJdGhpcy5yZW5kZXIgPSByZW5kZXI7CiAgICAJdGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7CiAgICAJdGhpcy5yZW5kZXJNdWx0aURyYXcgPSByZW5kZXJNdWx0aURyYXc7CiAgICAJdGhpcy5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgPSByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXM7CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMSW5mbyggZ2wgKSB7CgogICAgCWNvbnN0IG1lbW9yeSA9IHsKICAgIAkJZ2VvbWV0cmllczogMCwKICAgIAkJdGV4dHVyZXM6IDAKICAgIAl9OwoKICAgIAljb25zdCByZW5kZXIgPSB7CiAgICAJCWZyYW1lOiAwLAogICAgCQljYWxsczogMCwKICAgIAkJdHJpYW5nbGVzOiAwLAogICAgCQlwb2ludHM6IDAsCiAgICAJCWxpbmVzOiAwCiAgICAJfTsKCiAgICAJZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHsKCiAgICAJCXJlbmRlci5jYWxscyArKzsKCiAgICAJCXN3aXRjaCAoIG1vZGUgKSB7CgogICAgCQkJY2FzZSBnbC5UUklBTkdMRVM6CiAgICAJCQkJcmVuZGVyLnRyaWFuZ2xlcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDMgKTsKICAgIAkJCQlicmVhazsKCiAgICAJCQljYXNlIGdsLkxJTkVTOgogICAgCQkJCXJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDIgKTsKICAgIAkJCQlicmVhazsKCiAgICAJCQljYXNlIGdsLkxJTkVfU1RSSVA6CiAgICAJCQkJcmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC0gMSApOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgZ2wuTElORV9MT09QOgogICAgCQkJCXJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJY2FzZSBnbC5QT0lOVFM6CiAgICAJCQkJcmVuZGVyLnBvaW50cyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7CiAgICAJCQkJYnJlYWs7CgogICAgCQkJZGVmYXVsdDoKICAgIAkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmZvOiBVbmtub3duIGRyYXcgbW9kZTonLCBtb2RlICk7CiAgICAJCQkJYnJlYWs7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVzZXQoKSB7CgogICAgCQlyZW5kZXIuY2FsbHMgPSAwOwogICAgCQlyZW5kZXIudHJpYW5nbGVzID0gMDsKICAgIAkJcmVuZGVyLnBvaW50cyA9IDA7CiAgICAJCXJlbmRlci5saW5lcyA9IDA7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKICAgIAkJbWVtb3J5OiBtZW1vcnksCiAgICAJCXJlbmRlcjogcmVuZGVyLAogICAgCQlwcm9ncmFtczogbnVsbCwKICAgIAkJYXV0b1Jlc2V0OiB0cnVlLAogICAgCQlyZXNldDogcmVzZXQsCiAgICAJCXVwZGF0ZTogdXBkYXRlCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xNb3JwaHRhcmdldHMoIGdsLCBjYXBhYmlsaXRpZXMsIHRleHR1cmVzICkgewoKICAgIAljb25zdCBtb3JwaFRleHR1cmVzID0gbmV3IFdlYWtNYXAoKTsKICAgIAljb25zdCBtb3JwaCA9IG5ldyBWZWN0b3I0KCk7CgogICAgCWZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSApIHsKCiAgICAJCWNvbnN0IG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzOwoKICAgIAkJLy8gdGhlIGZvbGxvd2luZyBlbmNvZGVzIG1vcnBoIHRhcmdldHMgaW50byBhbiBhcnJheSBvZiBkYXRhIHRleHR1cmVzLiBFYWNoIGxheWVyIHJlcHJlc2VudHMgYSBzaW5nbGUgbW9ycGggdGFyZ2V0LgoKICAgIAkJY29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7CiAgICAJCWNvbnN0IG1vcnBoVGFyZ2V0c0NvdW50ID0gKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgPyBtb3JwaEF0dHJpYnV0ZS5sZW5ndGggOiAwOwoKICAgIAkJbGV0IGVudHJ5ID0gbW9ycGhUZXh0dXJlcy5nZXQoIGdlb21ldHJ5ICk7CgogICAgCQlpZiAoIGVudHJ5ID09PSB1bmRlZmluZWQgfHwgZW50cnkuY291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkgewoKICAgIAkJCWlmICggZW50cnkgIT09IHVuZGVmaW5lZCApIGVudHJ5LnRleHR1cmUuZGlzcG9zZSgpOwoKICAgIAkJCWNvbnN0IGhhc01vcnBoUG9zaXRpb24gPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZDsKICAgIAkJCWNvbnN0IGhhc01vcnBoTm9ybWFscyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZDsKICAgIAkJCWNvbnN0IGhhc01vcnBoQ29sb3JzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQ7CgogICAgCQkJY29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IFtdOwogICAgCQkJY29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBbXTsKICAgIAkJCWNvbnN0IG1vcnBoQ29sb3JzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yIHx8IFtdOwoKICAgIAkJCWxldCB2ZXJ0ZXhEYXRhQ291bnQgPSAwOwoKICAgIAkJCWlmICggaGFzTW9ycGhQb3NpdGlvbiA9PT0gdHJ1ZSApIHZlcnRleERhdGFDb3VudCA9IDE7CiAgICAJCQlpZiAoIGhhc01vcnBoTm9ybWFscyA9PT0gdHJ1ZSApIHZlcnRleERhdGFDb3VudCA9IDI7CiAgICAJCQlpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMzsKCiAgICAJCQlsZXQgd2lkdGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ICogdmVydGV4RGF0YUNvdW50OwogICAgCQkJbGV0IGhlaWdodCA9IDE7CgogICAgCQkJaWYgKCB3aWR0aCA+IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApIHsKCiAgICAJCQkJaGVpZ2h0ID0gTWF0aC5jZWlsKCB3aWR0aCAvIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApOwogICAgCQkJCXdpZHRoID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplOwoKICAgIAkJCX0KCiAgICAJCQljb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApOwoKICAgIAkJCWNvbnN0IHRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBtb3JwaFRhcmdldHNDb3VudCApOwogICAgCQkJdGV4dHVyZS50eXBlID0gRmxvYXRUeXBlOwogICAgCQkJdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQkJLy8gZmlsbCBidWZmZXIKCiAgICAJCQljb25zdCB2ZXJ0ZXhEYXRhU3RyaWRlID0gdmVydGV4RGF0YUNvdW50ICogNDsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNDb3VudDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTsKICAgIAkJCQljb25zdCBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaSBdOwogICAgCQkJCWNvbnN0IG1vcnBoQ29sb3IgPSBtb3JwaENvbG9yc1sgaSBdOwoKICAgIAkJCQljb25zdCBvZmZzZXQgPSB3aWR0aCAqIGhlaWdodCAqIDQgKiBpOwoKICAgIAkJCQlmb3IgKCBsZXQgaiA9IDA7IGogPCBtb3JwaFRhcmdldC5jb3VudDsgaiArKyApIHsKCiAgICAJCQkJCWNvbnN0IHN0cmlkZSA9IGogKiB2ZXJ0ZXhEYXRhU3RyaWRlOwoKICAgIAkJCQkJaWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgewoKICAgIAkJCQkJCW1vcnBoLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoVGFyZ2V0LCBqICk7CgogICAgCQkJCQkJYnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAwIF0gPSBtb3JwaC54OwogICAgCQkJCQkJYnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAxIF0gPSBtb3JwaC55OwogICAgCQkJCQkJYnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAyIF0gPSBtb3JwaC56OwogICAgCQkJCQkJYnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAzIF0gPSAwOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJaWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB7CgogICAgCQkJCQkJbW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhOb3JtYWwsIGogKTsKCiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDQgXSA9IG1vcnBoLng7CiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDUgXSA9IG1vcnBoLnk7CiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDYgXSA9IG1vcnBoLno7CiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDcgXSA9IDA7CgogICAgCQkJCQl9CgogICAgCQkJCQlpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkgewoKICAgIAkJCQkJCW1vcnBoLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQ29sb3IsIGogKTsKCiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDggXSA9IG1vcnBoLng7CiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDkgXSA9IG1vcnBoLnk7CiAgICAJCQkJCQlidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEwIF0gPSBtb3JwaC56OwogICAgCQkJCQkJYnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAxMSBdID0gKCBtb3JwaENvbG9yLml0ZW1TaXplID09PSA0ICkgPyBtb3JwaC53IDogMTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQllbnRyeSA9IHsKICAgIAkJCQljb3VudDogbW9ycGhUYXJnZXRzQ291bnQsCiAgICAJCQkJdGV4dHVyZTogdGV4dHVyZSwKICAgIAkJCQlzaXplOiBuZXcgVmVjdG9yMiggd2lkdGgsIGhlaWdodCApCiAgICAJCQl9OwoKICAgIAkJCW1vcnBoVGV4dHVyZXMuc2V0KCBnZW9tZXRyeSwgZW50cnkgKTsKCiAgICAJCQlmdW5jdGlvbiBkaXNwb3NlVGV4dHVyZSgpIHsKCiAgICAJCQkJdGV4dHVyZS5kaXNwb3NlKCk7CgogICAgCQkJCW1vcnBoVGV4dHVyZXMuZGVsZXRlKCBnZW9tZXRyeSApOwoKICAgIAkJCQlnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7CgogICAgCQkJfQoKICAgIAkJCWdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgZGlzcG9zZVRleHR1cmUgKTsKCiAgICAJCX0KCiAgICAJCS8vCiAgICAJCWlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QubW9ycGhUZXh0dXJlICE9PSBudWxsICkgewoKICAgIAkJCXByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRleHR1cmUnLCBvYmplY3QubW9ycGhUZXh0dXJlLCB0ZXh0dXJlcyApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlsZXQgbW9ycGhJbmZsdWVuY2VzU3VtID0gMDsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJbW9ycGhJbmZsdWVuY2VzU3VtICs9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTsKCiAgICAJCQl9CgogICAgCQkJY29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTsKCgogICAgCQkJcHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApOwogICAgCQkJcHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG9iamVjdEluZmx1ZW5jZXMgKTsKCiAgICAJCX0KCiAgICAJCXByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldHNUZXh0dXJlJywgZW50cnkudGV4dHVyZSwgdGV4dHVyZXMgKTsKICAgIAkJcHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmVTaXplJywgZW50cnkuc2l6ZSApOwoKICAgIAl9CgogICAgCXJldHVybiB7CgogICAgCQl1cGRhdGU6IHVwZGF0ZQoKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTE9iamVjdHMoIGdsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvICkgewoKICAgIAlsZXQgdXBkYXRlTWFwID0gbmV3IFdlYWtNYXAoKTsKCiAgICAJZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7CgogICAgCQljb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lOwoKICAgIAkJY29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7CiAgICAJCWNvbnN0IGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllcy5nZXQoIG9iamVjdCwgZ2VvbWV0cnkgKTsKCiAgICAJCS8vIFVwZGF0ZSBvbmNlIHBlciBmcmFtZQoKICAgIAkJaWYgKCB1cGRhdGVNYXAuZ2V0KCBidWZmZXJnZW9tZXRyeSApICE9PSBmcmFtZSApIHsKCiAgICAJCQlnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTsKCiAgICAJCQl1cGRhdGVNYXAuc2V0KCBidWZmZXJnZW9tZXRyeSwgZnJhbWUgKTsKCiAgICAJCX0KCiAgICAJCWlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCApIHsKCiAgICAJCQlpZiAoIG9iamVjdC5oYXNFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UgKSA9PT0gZmFsc2UgKSB7CgogICAgCQkJCW9iamVjdC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UgKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCB1cGRhdGVNYXAuZ2V0KCBvYmplY3QgKSAhPT0gZnJhbWUgKSB7CgogICAgCQkJCWF0dHJpYnV0ZXMudXBkYXRlKCBvYmplY3QuaW5zdGFuY2VNYXRyaXgsIGdsLkFSUkFZX0JVRkZFUiApOwoKICAgIAkJCQlpZiAoIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgewoKICAgIAkJCQkJYXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZUNvbG9yLCBnbC5BUlJBWV9CVUZGRVIgKTsKCiAgICAJCQkJfQoKICAgIAkJCQl1cGRhdGVNYXAuc2V0KCBvYmplY3QsIGZyYW1lICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHsKCiAgICAJCQljb25zdCBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjsKCiAgICAJCQlpZiAoIHVwZGF0ZU1hcC5nZXQoIHNrZWxldG9uICkgIT09IGZyYW1lICkgewoKICAgIAkJCQlza2VsZXRvbi51cGRhdGUoKTsKCiAgICAJCQkJdXBkYXRlTWFwLnNldCggc2tlbGV0b24sIGZyYW1lICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIGJ1ZmZlcmdlb21ldHJ5OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRpc3Bvc2UoKSB7CgogICAgCQl1cGRhdGVNYXAgPSBuZXcgV2Vha01hcCgpOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UoIGV2ZW50ICkgewoKICAgIAkJY29uc3QgaW5zdGFuY2VkTWVzaCA9IGV2ZW50LnRhcmdldDsKCiAgICAJCWluc3RhbmNlZE1lc2gucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7CgogICAgCQlhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZU1hdHJpeCApOwoKICAgIAkJaWYgKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZUNvbG9yICk7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCXVwZGF0ZTogdXBkYXRlLAogICAgCQlkaXNwb3NlOiBkaXNwb3NlCgogICAgCX07CgogICAgfQoKICAgIC8qKgogICAgICogVW5pZm9ybXMgb2YgYSBwcm9ncmFtLgogICAgICogVGhvc2UgZm9ybSBhIHRyZWUgc3RydWN0dXJlIHdpdGggYSBzcGVjaWFsIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHRoZSByb290LAogICAgICogd2hpY2ggeW91IGdldCBieSBjYWxsaW5nICduZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKScuCiAgICAgKgogICAgICoKICAgICAqIFByb3BlcnRpZXMgb2YgaW5uZXIgbm9kZXMgaW5jbHVkaW5nIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOgogICAgICoKICAgICAqIC5zZXEgLSBhcnJheSBvZiBuZXN0ZWQgdW5pZm9ybXMKICAgICAqIC5tYXAgLSBuZXN0ZWQgdW5pZm9ybXMgYnkgbmFtZQogICAgICoKICAgICAqCiAgICAgKiBNZXRob2RzIG9mIGFsbCBub2RlcyBleGNlcHQgdGhlIHRvcC1sZXZlbCBjb250YWluZXI6CiAgICAgKgogICAgICogLnNldFZhbHVlKCBnbCwgdmFsdWUsIFt0ZXh0dXJlc10gKQogICAgICoKICAgICAqIAkJdXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocykKICAgICAqICAJdGhlICd0ZXh0dXJlcycgcGFyYW1ldGVyIGlzIG5lZWRlZCBmb3Igc2FtcGxlciB1bmlmb3JtcwogICAgICoKICAgICAqCiAgICAgKiBTdGF0aWMgbWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOgogICAgICoKICAgICAqIC51cGxvYWQoIGdsLCBzZXEsIHZhbHVlcywgdGV4dHVyZXMgKQogICAgICoKICAgICAqIAkJc2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZScKICAgICAqCiAgICAgKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXEKICAgICAqCiAgICAgKiAJCWZpbHRlcnMgJ3NlcScgZW50cmllcyB3aXRoIGNvcnJlc3BvbmRpbmcgZW50cnkgaW4gdmFsdWVzCiAgICAgKgogICAgICoKICAgICAqIE1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKToKICAgICAqCiAgICAgKiAuc2V0VmFsdWUoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKQogICAgICoKICAgICAqIAkJc2V0cyB1bmlmb3JtIHdpdGggIG5hbWUgJ25hbWUnIHRvICd2YWx1ZScKICAgICAqCiAgICAgKiAuc2V0T3B0aW9uYWwoIGdsLCBvYmosIHByb3AgKQogICAgICoKICAgICAqIAkJbGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0CiAgICAgKgogICAgICovCgoKICAgIGNvbnN0IGVtcHR5VGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFRleHR1cmUoKTsKCiAgICBjb25zdCBlbXB0eVNoYWRvd1RleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEZXB0aFRleHR1cmUoIDEsIDEgKTsKCiAgICBjb25zdCBlbXB0eUFycmF5VGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IERhdGFBcnJheVRleHR1cmUoKTsKICAgIGNvbnN0IGVtcHR5M2RUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgRGF0YTNEVGV4dHVyZSgpOwogICAgY29uc3QgZW1wdHlDdWJlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmVUZXh0dXJlKCk7CgogICAgLy8gLS0tIFV0aWxpdGllcyAtLS0KCiAgICAvLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSkKCiAgICBjb25zdCBhcnJheUNhY2hlRjMyID0gW107CiAgICBjb25zdCBhcnJheUNhY2hlSTMyID0gW107CgogICAgLy8gRmxvYXQzMkFycmF5IGNhY2hlcyB1c2VkIGZvciB1cGxvYWRpbmcgTWF0cml4IHVuaWZvcm1zCgogICAgY29uc3QgbWF0NGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggMTYgKTsKICAgIGNvbnN0IG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDkgKTsKICAgIGNvbnN0IG1hdDJhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDQgKTsKCiAgICAvLyBGbGF0dGVuaW5nIGZvciBhcnJheXMgb2YgdmVjdG9ycyBhbmQgbWF0cmljZXMKCiAgICBmdW5jdGlvbiBmbGF0dGVuKCBhcnJheSwgbkJsb2NrcywgYmxvY2tTaXplICkgewoKICAgIAljb25zdCBmaXJzdEVsZW0gPSBhcnJheVsgMCBdOwoKICAgIAlpZiAoIGZpcnN0RWxlbSA8PSAwIHx8IGZpcnN0RWxlbSA+IDAgKSByZXR1cm4gYXJyYXk7CiAgICAJLy8gdW5vcHRpbWl6ZWQ6ICEgaXNOYU4oIGZpcnN0RWxlbSApCiAgICAJLy8gc2VlIGh0dHA6Ly9qYWNrc29uZHVuc3Rhbi5jb20vYXJ0aWNsZXMvOTgzCgogICAgCWNvbnN0IG4gPSBuQmxvY2tzICogYmxvY2tTaXplOwogICAgCWxldCByID0gYXJyYXlDYWNoZUYzMlsgbiBdOwoKICAgIAlpZiAoIHIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCXIgPSBuZXcgRmxvYXQzMkFycmF5KCBuICk7CiAgICAJCWFycmF5Q2FjaGVGMzJbIG4gXSA9IHI7CgogICAgCX0KCiAgICAJaWYgKCBuQmxvY2tzICE9PSAwICkgewoKICAgIAkJZmlyc3RFbGVtLnRvQXJyYXkoIHIsIDAgKTsKCiAgICAJCWZvciAoIGxldCBpID0gMSwgb2Zmc2V0ID0gMDsgaSAhPT0gbkJsb2NrczsgKysgaSApIHsKCiAgICAJCQlvZmZzZXQgKz0gYmxvY2tTaXplOwogICAgCQkJYXJyYXlbIGkgXS50b0FycmF5KCByLCBvZmZzZXQgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlyZXR1cm4gcjsKCiAgICB9CgogICAgZnVuY3Rpb24gYXJyYXlzRXF1YWwoIGEsIGIgKSB7CgogICAgCWlmICggYS5sZW5ndGggIT09IGIubGVuZ3RoICkgcmV0dXJuIGZhbHNlOwoKICAgIAlmb3IgKCBsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQlpZiAoIGFbIGkgXSAhPT0gYlsgaSBdICkgcmV0dXJuIGZhbHNlOwoKICAgIAl9CgogICAgCXJldHVybiB0cnVlOwoKICAgIH0KCiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7CgogICAgCWZvciAoIGxldCBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCWFbIGkgXSA9IGJbIGkgXTsKCiAgICAJfQoKICAgIH0KCiAgICAvLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvbgoKICAgIGZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICkgewoKICAgIAlsZXQgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTsKCiAgICAJaWYgKCByID09PSB1bmRlZmluZWQgKSB7CgogICAgCQlyID0gbmV3IEludDMyQXJyYXkoIG4gKTsKICAgIAkJYXJyYXlDYWNoZUkzMlsgbiBdID0gcjsKCiAgICAJfQoKICAgIAlmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7CgogICAgCQlyWyBpIF0gPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7CgogICAgCX0KCiAgICAJcmV0dXJuIHI7CgogICAgfQoKICAgIC8vIC0tLSBTZXR0ZXJzIC0tLQoKICAgIC8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaAogICAgLy8gYW5kIHRoaXMgd2F5IHRoZWlyIG5hbWVzIG1pbmlmeS4KCiAgICAvLyBTaW5nbGUgc2NhbGFyCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMWYoIGdsLCB2ICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjsKCiAgICAJZ2wudW5pZm9ybTFmKCB0aGlzLmFkZHIsIHYgKTsKCiAgICAJY2FjaGVbIDAgXSA9IHY7CgogICAgfQoKICAgIC8vIFNpbmdsZSBmbG9hdCB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjJmKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkgewoKICAgIAkJCWdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjNmKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHsKCiAgICAJCQlnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwogICAgCQkJY2FjaGVbIDIgXSA9IHYuejsKCiAgICAJCX0KCiAgICAJfSBlbHNlIGlmICggdi5yICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQlpZiAoIGNhY2hlWyAwIF0gIT09IHYuciB8fCBjYWNoZVsgMSBdICE9PSB2LmcgfHwgY2FjaGVbIDIgXSAhPT0gdi5iICkgewoKICAgIAkJCWdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LnIsIHYuZywgdi5iICk7CgogICAgCQkJY2FjaGVbIDAgXSA9IHYucjsKICAgIAkJCWNhY2hlWyAxIF0gPSB2Lmc7CiAgICAJCQljYWNoZVsgMiBdID0gdi5iOwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm0zZnYoIHRoaXMuYWRkciwgdiApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjRmKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7CgogICAgCQkJZ2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwogICAgCQkJY2FjaGVbIDIgXSA9IHYuejsKICAgIAkJCWNhY2hlWyAzIF0gPSB2Lnc7CgogICAgCQl9CgogICAgCX0gZWxzZSB7CgogICAgCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuOwoKICAgIAkJZ2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7CgogICAgCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgogICAgCX0KCiAgICB9CgogICAgLy8gU2luZ2xlIG1hdHJpeCAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLk1hdHJpeE4pCgogICAgZnVuY3Rpb24gc2V0VmFsdWVNMiggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIAljb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7CgogICAgCWlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47CgogICAgCQlnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7CgogICAgCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgogICAgCX0gZWxzZSB7CgogICAgCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjsKCiAgICAJCW1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7CgogICAgCQlnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVNMyggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIAljb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7CgogICAgCWlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47CgogICAgCQlnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7CgogICAgCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgogICAgCX0gZWxzZSB7CgogICAgCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjsKCiAgICAJCW1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7CgogICAgCQlnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVNNCggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIAljb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7CgogICAgCWlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47CgogICAgCQlnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7CgogICAgCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgogICAgCX0gZWxzZSB7CgogICAgCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjsKCiAgICAJCW1hdDRhcnJheS5zZXQoIGVsZW1lbnRzICk7CgogICAgCQlnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQ0YXJyYXkgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7CgogICAgCX0KCiAgICB9CgogICAgLy8gU2luZ2xlIGludGVnZXIgLyBib29sZWFuCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMWkoIGdsLCB2ICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjsKCiAgICAJZ2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHYgKTsKCiAgICAJY2FjaGVbIDAgXSA9IHY7CgogICAgfQoKICAgIC8vIFNpbmdsZSBpbnRlZ2VyIC8gYm9vbGVhbiB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkgewoKICAgIAkJCWdsLnVuaWZvcm0yaSggdGhpcy5hZGRyLCB2LngsIHYueSApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjNpKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHsKCiAgICAJCQlnbC51bmlmb3JtM2koIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwogICAgCQkJY2FjaGVbIDIgXSA9IHYuejsKCiAgICAJCX0KCiAgICAJfSBlbHNlIHsKCiAgICAJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47CgogICAgCQlnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCiAgICAJfQoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKCiAgICAJaWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCWlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogfHwgY2FjaGVbIDMgXSAhPT0gdi53ICkgewoKICAgIAkJCWdsLnVuaWZvcm00aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTsKCiAgICAJCQljYWNoZVsgMCBdID0gdi54OwogICAgCQkJY2FjaGVbIDEgXSA9IHYueTsKICAgIAkJCWNhY2hlWyAyIF0gPSB2Lno7CiAgICAJCQljYWNoZVsgMyBdID0gdi53OwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKICAgIAl9CgogICAgfQoKICAgIC8vIFNpbmdsZSB1bnNpZ25lZCBpbnRlZ2VyCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMXVpKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47CgogICAgCWdsLnVuaWZvcm0xdWkoIHRoaXMuYWRkciwgdiApOwoKICAgIAljYWNoZVsgMCBdID0gdjsKCiAgICB9CgogICAgLy8gU2luZ2xlIHVuc2lnbmVkIGludGVnZXIgdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuVmVjdG9yTikKCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVYydWkoIGdsLCB2ICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQlpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7CgogICAgCQkJZ2wudW5pZm9ybTJ1aSggdGhpcy5hZGRyLCB2LngsIHYueSApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm0ydWl2KCB0aGlzLmFkZHIsIHYgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCiAgICAJfQoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVYzdWkoIGdsLCB2ICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQlpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56ICkgewoKICAgIAkJCWdsLnVuaWZvcm0zdWkoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApOwoKICAgIAkJCWNhY2hlWyAwIF0gPSB2Lng7CiAgICAJCQljYWNoZVsgMSBdID0gdi55OwogICAgCQkJY2FjaGVbIDIgXSA9IHYuejsKCiAgICAJCX0KCiAgICAJfSBlbHNlIHsKCiAgICAJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47CgogICAgCQlnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7CgogICAgCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVWNHVpKCBnbCwgdiApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7CgogICAgCQkJZ2wudW5pZm9ybTR1aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTsKCiAgICAJCQljYWNoZVsgMCBdID0gdi54OwogICAgCQkJY2FjaGVbIDEgXSA9IHYueTsKICAgIAkJCWNhY2hlWyAyIF0gPSB2Lno7CiAgICAJCQljYWNoZVsgMyBdID0gdi53OwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjsKCiAgICAJCWdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCiAgICAJfQoKICAgIH0KCgogICAgLy8gU2luZ2xlIHRleHR1cmUgKDJEIC8gQ3ViZSkKCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgdGV4dHVyZXMgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIAljb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKICAgIAlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgogICAgCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwogICAgCQljYWNoZVsgMCBdID0gdW5pdDsKCiAgICAJfQoKICAgIAlsZXQgZW1wdHlUZXh0dXJlMkQ7CgogICAgCWlmICggdGhpcy50eXBlID09PSBnbC5TQU1QTEVSXzJEX1NIQURPVyApIHsKCiAgICAJCWVtcHR5U2hhZG93VGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gPSBMZXNzRXF1YWxDb21wYXJlOyAvLyAjMjg2NzAKICAgIAkJZW1wdHlUZXh0dXJlMkQgPSBlbXB0eVNoYWRvd1RleHR1cmU7CgogICAgCX0gZWxzZSB7CgogICAgCQllbXB0eVRleHR1cmUyRCA9IGVtcHR5VGV4dHVyZTsKCiAgICAJfQoKICAgIAl0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHYgfHwgZW1wdHlUZXh0dXJlMkQsIHVuaXQgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVUM0QxKCBnbCwgdiwgdGV4dHVyZXMgKSB7CgogICAgCWNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIAljb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKICAgIAlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgogICAgCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwogICAgCQljYWNoZVsgMCBdID0gdW5pdDsKCiAgICAJfQoKICAgIAl0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHkzZFRleHR1cmUsIHVuaXQgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CiAgICAJY29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTsKCiAgICAJaWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkgewoKICAgIAkJZ2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTsKICAgIAkJY2FjaGVbIDAgXSA9IHVuaXQ7CgogICAgCX0KCiAgICAJdGV4dHVyZXMuc2V0VGV4dHVyZUN1YmUoIHYgfHwgZW1wdHlDdWJlVGV4dHVyZSwgdW5pdCApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5MSggZ2wsIHYsIHRleHR1cmVzICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CiAgICAJY29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTsKCiAgICAJaWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkgewoKICAgIAkJZ2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTsKICAgIAkJY2FjaGVbIDAgXSA9IHVuaXQ7CgogICAgCX0KCiAgICAJdGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHYgfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXQgKTsKCiAgICB9CgogICAgLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgdGhlIHNpbmd1bGFyIGNhc2UKCiAgICBmdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHsKCiAgICAJc3dpdGNoICggdHlwZSApIHsKCiAgICAJCWNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWVWMWY7IC8vIEZMT0FUCiAgICAJCWNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmY7IC8vIF9WRUMyCiAgICAJCWNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzCiAgICAJCWNhc2UgMHg4YjUyOiByZXR1cm4gc2V0VmFsdWVWNGY7IC8vIF9WRUM0CgogICAgCQljYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTI7IC8vIF9NQVQyCiAgICAJCWNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNMzsgLy8gX01BVDMKICAgIAkJY2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNAoKICAgIAkJY2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTAogICAgCQljYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZVYyaTsgLy8gX1ZFQzIKICAgIAkJY2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2k7IC8vIF9WRUMzCiAgICAJCWNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNAoKICAgIAkJY2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWk7IC8vIFVJTlQKICAgIAkJY2FzZSAweDhkYzY6IHJldHVybiBzZXRWYWx1ZVYydWk7IC8vIF9WRUMyCiAgICAJCWNhc2UgMHg4ZGM3OiByZXR1cm4gc2V0VmFsdWVWM3VpOyAvLyBfVkVDMwogICAgCQljYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aTsgLy8gX1ZFQzQKCiAgICAJCWNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJECiAgICAJCWNhc2UgMHg4ZDY2OiAvLyBTQU1QTEVSX0VYVEVSTkFMX09FUwogICAgCQljYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkQKICAgIAkJY2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJECiAgICAJCWNhc2UgMHg4YjYyOiAvLyBTQU1QTEVSXzJEX1NIQURPVwogICAgCQkJcmV0dXJuIHNldFZhbHVlVDE7CgogICAgCQljYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRAogICAgCQljYXNlIDB4OGRjYjogLy8gSU5UX1NBTVBMRVJfM0QKICAgIAkJY2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNECiAgICAJCQlyZXR1cm4gc2V0VmFsdWVUM0QxOwoKICAgIAkJY2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRQogICAgCQljYXNlIDB4OGRjYzogLy8gSU5UX1NBTVBMRVJfQ1VCRQogICAgCQljYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRQogICAgCQljYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPVwogICAgCQkJcmV0dXJuIHNldFZhbHVlVDY7CgogICAgCQljYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWQogICAgCQljYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVkKICAgIAkJY2FzZSAweDhkZDc6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZCiAgICAJCWNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPVwogICAgCQkJcmV0dXJuIHNldFZhbHVlVDJEQXJyYXkxOwoKICAgIAl9CgogICAgfQoKCiAgICAvLyBBcnJheSBvZiBzY2FsYXJzCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMWZBcnJheSggZ2wsIHYgKSB7CgogICAgCWdsLnVuaWZvcm0xZnYoIHRoaXMuYWRkciwgdiApOwoKICAgIH0KCiAgICAvLyBBcnJheSBvZiB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuVmVjdG9yTikKCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVYyZkFycmF5KCBnbCwgdiApIHsKCiAgICAJY29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApOwoKICAgIAlnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIGRhdGEgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVWM2ZBcnJheSggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDMgKTsKCiAgICAJZ2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjRmQXJyYXkoIGdsLCB2ICkgewoKICAgIAljb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7CgogICAgCWdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgZGF0YSApOwoKICAgIH0KCiAgICAvLyBBcnJheSBvZiBtYXRyaWNlcyAoZnJvbSBmbGF0IGFycmF5IG9yIGFycmF5IG9mIFRIUkVFLk1hdHJpeE4pCgogICAgZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHsKCiAgICAJY29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApOwoKICAgIAlnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlTTNBcnJheSggZ2wsIHYgKSB7CgogICAgCWNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDkgKTsKCiAgICAJZ2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZU00QXJyYXkoIGdsLCB2ICkgewoKICAgIAljb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAxNiApOwoKICAgIAlnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7CgogICAgfQoKICAgIC8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMWlBcnJheSggZ2wsIHYgKSB7CgogICAgCWdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApOwoKICAgIH0KCiAgICAvLyBBcnJheSBvZiBpbnRlZ2VyIC8gYm9vbGVhbiB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkpCgogICAgZnVuY3Rpb24gc2V0VmFsdWVWMmlBcnJheSggZ2wsIHYgKSB7CgogICAgCWdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KCBnbCwgdiApIHsKCiAgICAJZ2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjRpQXJyYXkoIGdsLCB2ICkgewoKICAgIAlnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTsKCiAgICB9CgogICAgLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlcgoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjF1aUFycmF5KCBnbCwgdiApIHsKCiAgICAJZ2wudW5pZm9ybTF1aXYoIHRoaXMuYWRkciwgdiApOwoKICAgIH0KCiAgICAvLyBBcnJheSBvZiB1bnNpZ25lZCBpbnRlZ2VyIHZlY3RvcnMgKGZyb20gZmxhdCBhcnJheSkKCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVYydWlBcnJheSggZ2wsIHYgKSB7CgogICAgCWdsLnVuaWZvcm0ydWl2KCB0aGlzLmFkZHIsIHYgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVWM3VpQXJyYXkoIGdsLCB2ICkgewoKICAgIAlnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVjR1aUFycmF5KCBnbCwgdiApIHsKCiAgICAJZ2wudW5pZm9ybTR1aXYoIHRoaXMuYWRkciwgdiApOwoKICAgIH0KCgogICAgLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gM0QgLyBDdWJlIC8gMkRBcnJheSkKCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVQxQXJyYXkoIGdsLCB2LCB0ZXh0dXJlcyApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAljb25zdCBuID0gdi5sZW5ndGg7CgogICAgCWNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTsKCiAgICAJaWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHsKCiAgICAJCWdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7CgogICAgCX0KCiAgICAJZm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkgewoKICAgIAkJdGV4dHVyZXMuc2V0VGV4dHVyZTJEKCB2WyBpIF0gfHwgZW1wdHlUZXh0dXJlLCB1bml0c1sgaSBdICk7CgogICAgCX0KCiAgICB9CgogICAgZnVuY3Rpb24gc2V0VmFsdWVUM0RBcnJheSggZ2wsIHYsIHRleHR1cmVzICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWNvbnN0IG4gPSB2Lmxlbmd0aDsKCiAgICAJY29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApOwoKICAgIAlpZiAoICEgYXJyYXlzRXF1YWwoIGNhY2hlLCB1bml0cyApICkgewoKICAgIAkJZ2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTsKCiAgICAJfQoKICAgIAlmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7CgogICAgCQl0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHZbIGkgXSB8fCBlbXB0eTNkVGV4dHVyZSwgdW5pdHNbIGkgXSApOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbHVlVDZBcnJheSggZ2wsIHYsIHRleHR1cmVzICkgewoKICAgIAljb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7CgogICAgCWNvbnN0IG4gPSB2Lmxlbmd0aDsKCiAgICAJY29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApOwoKICAgIAlpZiAoICEgYXJyYXlzRXF1YWwoIGNhY2hlLCB1bml0cyApICkgewoKICAgIAkJZ2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApOwoKICAgIAkJY29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTsKCiAgICAJfQoKICAgIAlmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7CgogICAgCQl0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTsKCiAgICAJfQoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5QXJyYXkoIGdsLCB2LCB0ZXh0dXJlcyApIHsKCiAgICAJY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlOwoKICAgIAljb25zdCBuID0gdi5sZW5ndGg7CgogICAgCWNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTsKCiAgICAJaWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHsKCiAgICAJCWdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTsKCiAgICAJCWNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7CgogICAgCX0KCiAgICAJZm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkgewoKICAgIAkJdGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHZbIGkgXSB8fCBlbXB0eUFycmF5VGV4dHVyZSwgdW5pdHNbIGkgXSApOwoKICAgIAl9CgogICAgfQoKCiAgICAvLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXkKCiAgICBmdW5jdGlvbiBnZXRQdXJlQXJyYXlTZXR0ZXIoIHR5cGUgKSB7CgogICAgCXN3aXRjaCAoIHR5cGUgKSB7CgogICAgCQljYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUCiAgICAJCWNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmZBcnJheTsgLy8gX1ZFQzIKICAgIAkJY2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZkFycmF5OyAvLyBfVkVDMwogICAgCQljYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0CgogICAgCQljYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDIKICAgIAkJY2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzCiAgICAJCWNhc2UgMHg4YjVjOiByZXR1cm4gc2V0VmFsdWVNNEFycmF5OyAvLyBfTUFUNAoKICAgIAkJY2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWlBcnJheTsgLy8gSU5ULCBCT09MCiAgICAJCWNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyCiAgICAJCWNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpQXJyYXk7IC8vIF9WRUMzCiAgICAJCWNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpQXJyYXk7IC8vIF9WRUM0CgogICAgCQljYXNlIDB4MTQwNTogcmV0dXJuIHNldFZhbHVlVjF1aUFycmF5OyAvLyBVSU5UCiAgICAJCWNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpQXJyYXk7IC8vIF9WRUMyCiAgICAJCWNhc2UgMHg4ZGM3OiByZXR1cm4gc2V0VmFsdWVWM3VpQXJyYXk7IC8vIF9WRUMzCiAgICAJCWNhc2UgMHg4ZGM4OiByZXR1cm4gc2V0VmFsdWVWNHVpQXJyYXk7IC8vIF9WRUM0CgogICAgCQljYXNlIDB4OGI1ZTogLy8gU0FNUExFUl8yRAogICAgCQljYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVMKICAgIAkJY2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJECiAgICAJCWNhc2UgMHg4ZGQyOiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8yRAogICAgCQljYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1cKICAgIAkJCXJldHVybiBzZXRWYWx1ZVQxQXJyYXk7CgogICAgCQljYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRAogICAgCQljYXNlIDB4OGRjYjogLy8gSU5UX1NBTVBMRVJfM0QKICAgIAkJY2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNECiAgICAJCQlyZXR1cm4gc2V0VmFsdWVUM0RBcnJheTsKCiAgICAJCWNhc2UgMHg4YjYwOiAvLyBTQU1QTEVSX0NVQkUKICAgIAkJY2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkUKICAgIAkJY2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkUKICAgIAkJY2FzZSAweDhkYzU6IC8vIFNBTVBMRVJfQ1VCRV9TSEFET1cKICAgIAkJCXJldHVybiBzZXRWYWx1ZVQ2QXJyYXk7CgogICAgCQljYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWQogICAgCQljYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVkKICAgIAkJY2FzZSAweDhkZDc6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZCiAgICAJCWNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPVwogICAgCQkJcmV0dXJuIHNldFZhbHVlVDJEQXJyYXlBcnJheTsKCiAgICAJfQoKICAgIH0KCiAgICAvLyAtLS0gVW5pZm9ybSBDbGFzc2VzIC0tLQoKICAgIGNsYXNzIFNpbmdsZVVuaWZvcm0gewoKICAgIAljb25zdHJ1Y3RvciggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7CgogICAgCQl0aGlzLmlkID0gaWQ7CiAgICAJCXRoaXMuYWRkciA9IGFkZHI7CiAgICAJCXRoaXMuY2FjaGUgPSBbXTsKICAgIAkJdGhpcy50eXBlID0gYWN0aXZlSW5mby50eXBlOwogICAgCQl0aGlzLnNldFZhbHVlID0gZ2V0U2luZ3VsYXJTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApOwoKICAgIAkJLy8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVRwoKICAgIAl9CgogICAgfQoKICAgIGNsYXNzIFB1cmVBcnJheVVuaWZvcm0gewoKICAgIAljb25zdHJ1Y3RvciggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7CgogICAgCQl0aGlzLmlkID0gaWQ7CiAgICAJCXRoaXMuYWRkciA9IGFkZHI7CiAgICAJCXRoaXMuY2FjaGUgPSBbXTsKICAgIAkJdGhpcy50eXBlID0gYWN0aXZlSW5mby50eXBlOwogICAgCQl0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7CiAgICAJCXRoaXMuc2V0VmFsdWUgPSBnZXRQdXJlQXJyYXlTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApOwoKICAgIAkJLy8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVRwoKICAgIAl9CgogICAgfQoKICAgIGNsYXNzIFN0cnVjdHVyZWRVbmlmb3JtIHsKCiAgICAJY29uc3RydWN0b3IoIGlkICkgewoKICAgIAkJdGhpcy5pZCA9IGlkOwoKICAgIAkJdGhpcy5zZXEgPSBbXTsKICAgIAkJdGhpcy5tYXAgPSB7fTsKCiAgICAJfQoKICAgIAlzZXRWYWx1ZSggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApIHsKCiAgICAJCWNvbnN0IHNlcSA9IHRoaXMuc2VxOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCiAgICAJCQljb25zdCB1ID0gc2VxWyBpIF07CiAgICAJCQl1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgdGV4dHVyZXMgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIH0KCiAgICAvLyAtLS0gVG9wLWxldmVsIC0tLQoKICAgIC8vIFBhcnNlciAtIGJ1aWxkcyB1cCB0aGUgcHJvcGVydHkgdHJlZSBmcm9tIHRoZSBwYXRoIHN0cmluZ3MKCiAgICBjb25zdCBSZVBhdGhQYXJ0ID0gLyhcdyspKFxdKT8oXFt8XC4pPy9nOwoKICAgIC8vIGV4dHJhY3RzCiAgICAvLyAJLSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpCiAgICAvLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KQogICAgLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpCiAgICAvLwogICAgLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmQKICAgIC8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzCiAgICAvLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy4KCiAgICBmdW5jdGlvbiBhZGRVbmlmb3JtKCBjb250YWluZXIsIHVuaWZvcm1PYmplY3QgKSB7CgogICAgCWNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApOwogICAgCWNvbnRhaW5lci5tYXBbIHVuaWZvcm1PYmplY3QuaWQgXSA9IHVuaWZvcm1PYmplY3Q7CgogICAgfQoKICAgIGZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkgewoKICAgIAljb25zdCBwYXRoID0gYWN0aXZlSW5mby5uYW1lLAogICAgCQlwYXRoTGVuZ3RoID0gcGF0aC5sZW5ndGg7CgogICAgCS8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW4KICAgIAlSZVBhdGhQYXJ0Lmxhc3RJbmRleCA9IDA7CgogICAgCXdoaWxlICggdHJ1ZSApIHsKCiAgICAJCWNvbnN0IG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksCiAgICAJCQltYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4OwoKICAgIAkJbGV0IGlkID0gbWF0Y2hbIDEgXTsKICAgIAkJY29uc3QgaWRJc0luZGV4ID0gbWF0Y2hbIDIgXSA9PT0gJ10nLAogICAgCQkJc3Vic2NyaXB0ID0gbWF0Y2hbIDMgXTsKCiAgICAJCWlmICggaWRJc0luZGV4ICkgaWQgPSBpZCB8IDA7IC8vIGNvbnZlcnQgdG8gaW50ZWdlcgoKICAgIAkJaWYgKCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBzdWJzY3JpcHQgPT09ICdbJyAmJiBtYXRjaEVuZCArIDIgPT09IHBhdGhMZW5ndGggKSB7CgogICAgCQkJLy8gYmFyZSBuYW1lIG9yICJwdXJlIiBib3R0b20tbGV2ZWwgYXJyYXkgIlswXSIgc3VmZml4CgogICAgCQkJYWRkVW5pZm9ybSggY29udGFpbmVyLCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCA/CiAgICAJCQkJbmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOgogICAgCQkJCW5ldyBQdXJlQXJyYXlVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApICk7CgogICAgCQkJYnJlYWs7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCS8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdAoKICAgIAkJCWNvbnN0IG1hcCA9IGNvbnRhaW5lci5tYXA7CiAgICAJCQlsZXQgbmV4dCA9IG1hcFsgaWQgXTsKCiAgICAJCQlpZiAoIG5leHQgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJbmV4dCA9IG5ldyBTdHJ1Y3R1cmVkVW5pZm9ybSggaWQgKTsKICAgIAkJCQlhZGRVbmlmb3JtKCBjb250YWluZXIsIG5leHQgKTsKCiAgICAJCQl9CgogICAgCQkJY29udGFpbmVyID0gbmV4dDsKCiAgICAJCX0KCiAgICAJfQoKICAgIH0KCiAgICAvLyBSb290IENvbnRhaW5lcgoKICAgIGNsYXNzIFdlYkdMVW5pZm9ybXMgewoKICAgIAljb25zdHJ1Y3RvciggZ2wsIHByb2dyYW0gKSB7CgogICAgCQl0aGlzLnNlcSA9IFtdOwogICAgCQl0aGlzLm1hcCA9IHt9OwoKICAgIAkJY29uc3QgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyApOwoKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgbjsgKysgaSApIHsKCiAgICAJCQljb25zdCBpbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSggcHJvZ3JhbSwgaSApLAogICAgCQkJCWFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApOwoKICAgIAkJCXBhcnNlVW5pZm9ybSggaW5mbywgYWRkciwgdGhpcyApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCXNldFZhbHVlKCBnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzICkgewoKICAgIAkJY29uc3QgdSA9IHRoaXMubWFwWyBuYW1lIF07CgogICAgCQlpZiAoIHUgIT09IHVuZGVmaW5lZCApIHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTsKCiAgICAJfQoKICAgIAlzZXRPcHRpb25hbCggZ2wsIG9iamVjdCwgbmFtZSApIHsKCiAgICAJCWNvbnN0IHYgPSBvYmplY3RbIG5hbWUgXTsKCiAgICAJCWlmICggdiAhPT0gdW5kZWZpbmVkICkgdGhpcy5zZXRWYWx1ZSggZ2wsIG5hbWUsIHYgKTsKCiAgICAJfQoKICAgIAlzdGF0aWMgdXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzICkgewoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCiAgICAJCQljb25zdCB1ID0gc2VxWyBpIF0sCiAgICAJCQkJdiA9IHZhbHVlc1sgdS5pZCBdOwoKICAgIAkJCWlmICggdi5uZWVkc1VwZGF0ZSAhPT0gZmFsc2UgKSB7CgogICAgCQkJCS8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWQKICAgIAkJCQl1LnNldFZhbHVlKCBnbCwgdi52YWx1ZSwgdGV4dHVyZXMgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCX0KCiAgICAJc3RhdGljIHNlcVdpdGhWYWx1ZSggc2VxLCB2YWx1ZXMgKSB7CgogICAgCQljb25zdCByID0gW107CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKICAgIAkJCWNvbnN0IHUgPSBzZXFbIGkgXTsKICAgIAkJCWlmICggdS5pZCBpbiB2YWx1ZXMgKSByLnB1c2goIHUgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiByOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMU2hhZGVyKCBnbCwgdHlwZSwgc3RyaW5nICkgewoKICAgIAljb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoIHR5cGUgKTsKCiAgICAJZ2wuc2hhZGVyU291cmNlKCBzaGFkZXIsIHN0cmluZyApOwogICAgCWdsLmNvbXBpbGVTaGFkZXIoIHNoYWRlciApOwoKICAgIAlyZXR1cm4gc2hhZGVyOwoKICAgIH0KCiAgICAvLyBGcm9tIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvS0hSX3BhcmFsbGVsX3NoYWRlcl9jb21waWxlLwogICAgY29uc3QgQ09NUExFVElPTl9TVEFUVVNfS0hSID0gMHg5MUIxOwoKICAgIGxldCBwcm9ncmFtSWRDb3VudCA9IDA7CgogICAgZnVuY3Rpb24gaGFuZGxlU291cmNlKCBzdHJpbmcsIGVycm9yTGluZSApIHsKCiAgICAJY29uc3QgbGluZXMgPSBzdHJpbmcuc3BsaXQoICdcbicgKTsKICAgIAljb25zdCBsaW5lczIgPSBbXTsKCiAgICAJY29uc3QgZnJvbSA9IE1hdGgubWF4KCBlcnJvckxpbmUgLSA2LCAwICk7CiAgICAJY29uc3QgdG8gPSBNYXRoLm1pbiggZXJyb3JMaW5lICsgNiwgbGluZXMubGVuZ3RoICk7CgogICAgCWZvciAoIGxldCBpID0gZnJvbTsgaSA8IHRvOyBpICsrICkgewoKICAgIAkJY29uc3QgbGluZSA9IGkgKyAxOwogICAgCQlsaW5lczIucHVzaCggYCR7bGluZSA9PT0gZXJyb3JMaW5lID8gJz4nIDogJyAnfSAke2xpbmV9OiAke2xpbmVzWyBpIF19YCApOwoKICAgIAl9CgogICAgCXJldHVybiBsaW5lczIuam9pbiggJ1xuJyApOwoKICAgIH0KCiAgICBjb25zdCBfbTAgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCk7CgogICAgZnVuY3Rpb24gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBjb2xvclNwYWNlICkgewoKICAgIAlDb2xvck1hbmFnZW1lbnQuX2dldE1hdHJpeCggX20wLCBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UsIGNvbG9yU3BhY2UgKTsKCiAgICAJY29uc3QgZW5jb2RpbmdNYXRyaXggPSBgbWF0MyggJHsgX20wLmVsZW1lbnRzLm1hcCggKCB2ICkgPT4gdi50b0ZpeGVkKCA0ICkgKSB9IClgOwoKICAgIAlzd2l0Y2ggKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKSApIHsKCiAgICAJCWNhc2UgTGluZWFyVHJhbnNmZXI6CiAgICAJCQlyZXR1cm4gWyBlbmNvZGluZ01hdHJpeCwgJ0xpbmVhclRyYW5zZmVyT0VURicgXTsKCiAgICAJCWNhc2UgU1JHQlRyYW5zZmVyOgogICAgCQkJcmV0dXJuIFsgZW5jb2RpbmdNYXRyaXgsICdzUkdCVHJhbnNmZXJPRVRGJyBdOwoKICAgIAkJZGVmYXVsdDoKICAgIAkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogVW5zdXBwb3J0ZWQgY29sb3Igc3BhY2U6ICcsIGNvbG9yU3BhY2UgKTsKICAgIAkJCXJldHVybiBbIGVuY29kaW5nTWF0cml4LCAnTGluZWFyVHJhbnNmZXJPRVRGJyBdOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIGdldFNoYWRlckVycm9ycyggZ2wsIHNoYWRlciwgdHlwZSApIHsKCiAgICAJY29uc3Qgc3RhdHVzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKCBzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTICk7CiAgICAJY29uc3QgZXJyb3JzID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpOwoKICAgIAlpZiAoIHN0YXR1cyAmJiBlcnJvcnMgPT09ICcnICkgcmV0dXJuICcnOwoKICAgIAljb25zdCBlcnJvck1hdGNoZXMgPSAvRVJST1I6IDA6KFxkKykvLmV4ZWMoIGVycm9ycyApOwogICAgCWlmICggZXJyb3JNYXRjaGVzICkgewoKICAgIAkJLy8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb24KICAgIAkJLy8gY29uc29sZS5sb2coICcqKicgKyB0eXBlICsgJyoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBzaGFkZXIgKSApOwoKICAgIAkJY29uc3QgZXJyb3JMaW5lID0gcGFyc2VJbnQoIGVycm9yTWF0Y2hlc1sgMSBdICk7CiAgICAJCXJldHVybiB0eXBlLnRvVXBwZXJDYXNlKCkgKyAnXG5cbicgKyBlcnJvcnMgKyAnXG5cbicgKyBoYW5kbGVTb3VyY2UoIGdsLmdldFNoYWRlclNvdXJjZSggc2hhZGVyICksIGVycm9yTGluZSApOwoKICAgIAl9IGVsc2UgewoKICAgIAkJcmV0dXJuIGVycm9yczsKCiAgICAJfQoKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgY29sb3JTcGFjZSApIHsKCiAgICAJY29uc3QgY29tcG9uZW50cyA9IGdldEVuY29kaW5nQ29tcG9uZW50cyggY29sb3JTcGFjZSApOwoKICAgIAlyZXR1cm4gWwoKICAgIAkJYHZlYzQgJHtmdW5jdGlvbk5hbWV9KCB2ZWM0IHZhbHVlICkge2AsCgogICAgCQlgCXJldHVybiAke2NvbXBvbmVudHNbIDEgXX0oIHZlYzQoIHZhbHVlLnJnYiAqICR7Y29tcG9uZW50c1sgMCBdfSwgdmFsdWUuYSApICk7YCwKCiAgICAJCSd9JywKCiAgICAJXS5qb2luKCAnXG4nICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7CgogICAgCWxldCB0b25lTWFwcGluZ05hbWU7CgogICAgCXN3aXRjaCAoIHRvbmVNYXBwaW5nICkgewoKICAgIAkJY2FzZSBMaW5lYXJUb25lTWFwcGluZzoKICAgIAkJCXRvbmVNYXBwaW5nTmFtZSA9ICdMaW5lYXInOwogICAgCQkJYnJlYWs7CgogICAgCQljYXNlIFJlaW5oYXJkVG9uZU1hcHBpbmc6CiAgICAJCQl0b25lTWFwcGluZ05hbWUgPSAnUmVpbmhhcmQnOwogICAgCQkJYnJlYWs7CgogICAgCQljYXNlIENpbmVvblRvbmVNYXBwaW5nOgogICAgCQkJdG9uZU1hcHBpbmdOYW1lID0gJ0NpbmVvbic7CiAgICAJCQlicmVhazsKCiAgICAJCWNhc2UgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nOgogICAgCQkJdG9uZU1hcHBpbmdOYW1lID0gJ0FDRVNGaWxtaWMnOwogICAgCQkJYnJlYWs7CgogICAgCQljYXNlIEFnWFRvbmVNYXBwaW5nOgogICAgCQkJdG9uZU1hcHBpbmdOYW1lID0gJ0FnWCc7CiAgICAJCQlicmVhazsKCiAgICAJCWNhc2UgTmV1dHJhbFRvbmVNYXBwaW5nOgogICAgCQkJdG9uZU1hcHBpbmdOYW1lID0gJ05ldXRyYWwnOwogICAgCQkJYnJlYWs7CgogICAgCQljYXNlIEN1c3RvbVRvbmVNYXBwaW5nOgogICAgCQkJdG9uZU1hcHBpbmdOYW1lID0gJ0N1c3RvbSc7CiAgICAJCQlicmVhazsKCiAgICAJCWRlZmF1bHQ6CiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IFVuc3VwcG9ydGVkIHRvbmVNYXBwaW5nOicsIHRvbmVNYXBwaW5nICk7CiAgICAJCQl0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJzsKCiAgICAJfQoKICAgIAlyZXR1cm4gJ3ZlYzMgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzMgY29sb3IgKSB7IHJldHVybiAnICsgdG9uZU1hcHBpbmdOYW1lICsgJ1RvbmVNYXBwaW5nKCBjb2xvciApOyB9JzsKCiAgICB9CgogICAgY29uc3QgX3YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpOwoKICAgIGZ1bmN0aW9uIGdldEx1bWluYW5jZUZ1bmN0aW9uKCkgewoKICAgIAlDb2xvck1hbmFnZW1lbnQuZ2V0THVtaW5hbmNlQ29lZmZpY2llbnRzKCBfdjAgKTsKCiAgICAJY29uc3QgciA9IF92MC54LnRvRml4ZWQoIDQgKTsKICAgIAljb25zdCBnID0gX3YwLnkudG9GaXhlZCggNCApOwogICAgCWNvbnN0IGIgPSBfdjAuei50b0ZpeGVkKCA0ICk7CgogICAgCXJldHVybiBbCgogICAgCQknZmxvYXQgbHVtaW5hbmNlKCBjb25zdCBpbiB2ZWMzIHJnYiApIHsnLAoKICAgIAkJYAljb25zdCB2ZWMzIHdlaWdodHMgPSB2ZWMzKCAkeyByIH0sICR7IGcgfSwgJHsgYiB9ICk7YCwKCiAgICAJCScJcmV0dXJuIGRvdCggd2VpZ2h0cywgcmdiICk7JywKCiAgICAJCSd9JwoKICAgIAldLmpvaW4oICdcbicgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gZ2VuZXJhdGVWZXJ0ZXhFeHRlbnNpb25zKCBwYXJhbWV0ZXJzICkgewoKICAgIAljb25zdCBjaHVua3MgPSBbCiAgICAJCXBhcmFtZXRlcnMuZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSA/ICcjZXh0ZW5zaW9uIEdMX0FOR0xFX2NsaXBfY3VsbF9kaXN0YW5jZSA6IHJlcXVpcmUnIDogJycsCiAgICAJCXBhcmFtZXRlcnMuZXh0ZW5zaW9uTXVsdGlEcmF3ID8gJyNleHRlbnNpb24gR0xfQU5HTEVfbXVsdGlfZHJhdyA6IHJlcXVpcmUnIDogJycsCiAgICAJXTsKCiAgICAJcmV0dXJuIGNodW5rcy5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcbicgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gZ2VuZXJhdGVEZWZpbmVzKCBkZWZpbmVzICkgewoKICAgIAljb25zdCBjaHVua3MgPSBbXTsKCiAgICAJZm9yICggY29uc3QgbmFtZSBpbiBkZWZpbmVzICkgewoKICAgIAkJY29uc3QgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07CgogICAgCQlpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlOwoKICAgIAkJY2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTsKCiAgICAJfQoKICAgIAlyZXR1cm4gY2h1bmtzLmpvaW4oICdcbicgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkgewoKICAgIAljb25zdCBhdHRyaWJ1dGVzID0ge307CgogICAgCWNvbnN0IG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyApOwoKICAgIAlmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyBpICsrICkgewoKICAgIAkJY29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApOwogICAgCQljb25zdCBuYW1lID0gaW5mby5uYW1lOwoKICAgIAkJbGV0IGxvY2F0aW9uU2l6ZSA9IDE7CiAgICAJCWlmICggaW5mby50eXBlID09PSBnbC5GTE9BVF9NQVQyICkgbG9jYXRpb25TaXplID0gMjsKICAgIAkJaWYgKCBpbmZvLnR5cGUgPT09IGdsLkZMT0FUX01BVDMgKSBsb2NhdGlvblNpemUgPSAzOwogICAgCQlpZiAoIGluZm8udHlwZSA9PT0gZ2wuRkxPQVRfTUFUNCApIGxvY2F0aW9uU2l6ZSA9IDQ7CgogICAgCQkvLyBjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUHJvZ3JhbTogQUNUSVZFIFZFUlRFWCBBVFRSSUJVVEU6JywgbmFtZSwgaSApOwoKICAgIAkJYXR0cmlidXRlc1sgbmFtZSBdID0gewogICAgCQkJdHlwZTogaW5mby50eXBlLAogICAgCQkJbG9jYXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICksCiAgICAJCQlsb2NhdGlvblNpemU6IGxvY2F0aW9uU2l6ZQogICAgCQl9OwoKICAgIAl9CgogICAgCXJldHVybiBhdHRyaWJ1dGVzOwoKICAgIH0KCiAgICBmdW5jdGlvbiBmaWx0ZXJFbXB0eUxpbmUoIHN0cmluZyApIHsKCiAgICAJcmV0dXJuIHN0cmluZyAhPT0gJyc7CgogICAgfQoKICAgIGZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHsKCiAgICAJY29uc3QgbnVtU3BvdExpZ2h0Q29vcmRzID0gcGFyYW1ldGVycy5udW1TcG90TGlnaHRTaGFkb3dzICsgcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzIC0gcGFyYW1ldGVycy5udW1TcG90TGlnaHRTaGFkb3dzV2l0aE1hcHM7CgogICAgCXJldHVybiBzdHJpbmcKICAgIAkJLnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cyApCiAgICAJCS5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0cyApCiAgICAJCS5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfTUFQUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodE1hcHMgKQogICAgCQkucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUX0NPT1JEUy9nLCBudW1TcG90TGlnaHRDb29yZHMgKQogICAgCQkucmVwbGFjZSggL05VTV9SRUNUX0FSRUFfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMgKQogICAgCQkucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApCiAgICAJCS5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApCiAgICAJCS5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICkKICAgIAkJLnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVF9TSEFET1dTX1dJVEhfTUFQUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyApCiAgICAJCS5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKQogICAgCQkucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodFNoYWRvd3MgKTsKCiAgICB9CgogICAgZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7CgogICAgCXJldHVybiBzdHJpbmcKICAgIAkJLnJlcGxhY2UoIC9OVU1fQ0xJUFBJTkdfUExBTkVTL2csIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgKQogICAgCQkucmVwbGFjZSggL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAoIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgLSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb24gKSApOwoKICAgIH0KCiAgICAvLyBSZXNvbHZlIEluY2x1ZGVzCgogICAgY29uc3QgaW5jbHVkZVBhdHRlcm4gPSAvXlsgXHRdKiNpbmNsdWRlICs8KFtcd1xkLi9dKyk+L2dtOwoKICAgIGZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyggc3RyaW5nICkgewoKICAgIAlyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIgKTsKCiAgICB9CgogICAgY29uc3Qgc2hhZGVyQ2h1bmtNYXAgPSBuZXcgTWFwKCk7CgogICAgZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHsKCiAgICAJbGV0IHN0cmluZyA9IFNoYWRlckNodW5rWyBpbmNsdWRlIF07CgogICAgCWlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSB7CgogICAgCQljb25zdCBuZXdJbmNsdWRlID0gc2hhZGVyQ2h1bmtNYXAuZ2V0KCBpbmNsdWRlICk7CgogICAgCQlpZiAoIG5ld0luY2x1ZGUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlzdHJpbmcgPSBTaGFkZXJDaHVua1sgbmV3SW5jbHVkZSBdOwogICAgCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2hhZGVyIGNodW5rICIlcyIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlICIlcyIgaW5zdGVhZC4nLCBpbmNsdWRlLCBuZXdJbmNsdWRlICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXRocm93IG5ldyBFcnJvciggJ0NhbiBub3QgcmVzb2x2ZSAjaW5jbHVkZSA8JyArIGluY2x1ZGUgKyAnPicgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlyZXR1cm4gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKTsKCiAgICB9CgogICAgLy8gVW5yb2xsIExvb3BzCgogICAgY29uc3QgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxzK2ZvclxzKlwoXHMqaW50XHMraVxzKj1ccyooXGQrKVxzKjtccyppXHMqPFxzKihcZCspXHMqO1xzKmlccypcK1wrXHMqXClccyp7KFtcc1xTXSs/KX1ccysjcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nOwoKICAgIGZ1bmN0aW9uIHVucm9sbExvb3BzKCBzdHJpbmcgKSB7CgogICAgCXJldHVybiBzdHJpbmcucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApOwoKICAgIH0KCiAgICBmdW5jdGlvbiBsb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICkgewoKICAgIAlsZXQgc3RyaW5nID0gJyc7CgogICAgCWZvciAoIGxldCBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7CgogICAgCQlzdHJpbmcgKz0gc25pcHBldAogICAgCQkJLnJlcGxhY2UoIC9cW1xzKmlccypcXS9nLCAnWyAnICsgaSArICcgXScgKQogICAgCQkJLnJlcGxhY2UoIC9VTlJPTExFRF9MT09QX0lOREVYL2csIGkgKTsKCiAgICAJfQoKICAgIAlyZXR1cm4gc3RyaW5nOwoKICAgIH0KCiAgICAvLwoKICAgIGZ1bmN0aW9uIGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICkgewoKICAgIAlsZXQgcHJlY2lzaW9uc3RyaW5nID0gYHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBmbG9hdDsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpbnQ7CglwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjJEOwoJcHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXJDdWJlOwoJcHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIzRDsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkRBcnJheTsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkRTaGFkb3c7CglwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlckN1YmVTaGFkb3c7CglwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjJEQXJyYXlTaGFkb3c7CglwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXIyRDsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlcjNEOwoJcHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IGlzYW1wbGVyQ3ViZTsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlcjJEQXJyYXk7CglwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gdXNhbXBsZXIyRDsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlcjNEOwoJcHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHVzYW1wbGVyQ3ViZTsKCXByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlcjJEQXJyYXk7CglgOwoKICAgIAlpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnaGlnaHAnICkgewoKICAgIAkJcHJlY2lzaW9uc3RyaW5nICs9ICdcbiNkZWZpbmUgSElHSF9QUkVDSVNJT04nOwoKICAgIAl9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ21lZGl1bXAnICkgewoKICAgIAkJcHJlY2lzaW9uc3RyaW5nICs9ICdcbiNkZWZpbmUgTUVESVVNX1BSRUNJU0lPTic7CgogICAgCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnbG93cCcgKSB7CgogICAgCQlwcmVjaXNpb25zdHJpbmcgKz0gJ1xuI2RlZmluZSBMT1dfUFJFQ0lTSU9OJzsKCiAgICAJfQoKICAgIAlyZXR1cm4gcHJlY2lzaW9uc3RyaW5nOwoKICAgIH0KCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgogICAgCWxldCBzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX0JBU0lDJzsKCiAgICAJaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHsKCiAgICAJCXNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJzsKCiAgICAJfSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkgewoKICAgIAkJc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7CgogICAgCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gVlNNU2hhZG93TWFwICkgewoKICAgIAkJc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9WU00nOwoKICAgIAl9CgogICAgCXJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lOwoKICAgIH0KCiAgICBmdW5jdGlvbiBnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgogICAgCWxldCBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnOwoKICAgIAlpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkgewoKICAgIAkJc3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkgewoKICAgIAkJCWNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOgogICAgCQkJY2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6CiAgICAJCQkJZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJzsKICAgIAkJCQlicmVhazsKCiAgICAJCQljYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOgogICAgCQkJCWVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRV9VVic7CiAgICAJCQkJYnJlYWs7CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIGVudk1hcFR5cGVEZWZpbmU7CgogICAgfQoKICAgIGZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApIHsKCiAgICAJbGV0IGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGTEVDVElPTic7CgogICAgCWlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7CgogICAgCQlzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7CgogICAgCQkJY2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6CgogICAgCQkJCWVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7CiAgICAJCQkJYnJlYWs7CgogICAgCQl9CgogICAgCX0KCiAgICAJcmV0dXJuIGVudk1hcE1vZGVEZWZpbmU7CgogICAgfQoKICAgIGZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgogICAgCWxldCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7CgogICAgCWlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7CgogICAgCQlzd2l0Y2ggKCBwYXJhbWV0ZXJzLmNvbWJpbmUgKSB7CgogICAgCQkJY2FzZSBNdWx0aXBseU9wZXJhdGlvbjoKICAgIAkJCQllbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFknOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgTWl4T3BlcmF0aW9uOgogICAgCQkJCWVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NSVgnOwogICAgCQkJCWJyZWFrOwoKICAgIAkJCWNhc2UgQWRkT3BlcmF0aW9uOgogICAgCQkJCWVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19BREQnOwogICAgCQkJCWJyZWFrOwoKICAgIAkJfQoKICAgIAl9CgogICAgCXJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTsKCiAgICB9CgogICAgZnVuY3Rpb24gZ2VuZXJhdGVDdWJlVVZTaXplKCBwYXJhbWV0ZXJzICkgewoKICAgIAljb25zdCBpbWFnZUhlaWdodCA9IHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0OwoKICAgIAlpZiAoIGltYWdlSGVpZ2h0ID09PSBudWxsICkgcmV0dXJuIG51bGw7CgogICAgCWNvbnN0IG1heE1pcCA9IE1hdGgubG9nMiggaW1hZ2VIZWlnaHQgKSAtIDI7CgogICAgCWNvbnN0IHRleGVsSGVpZ2h0ID0gMS4wIC8gaW1hZ2VIZWlnaHQ7CgogICAgCWNvbnN0IHRleGVsV2lkdGggPSAxLjAgLyAoIDMgKiBNYXRoLm1heCggTWF0aC5wb3coIDIsIG1heE1pcCApLCA3ICogMTYgKSApOwoKICAgIAlyZXR1cm4geyB0ZXhlbFdpZHRoLCB0ZXhlbEhlaWdodCwgbWF4TWlwIH07CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGNhY2hlS2V5LCBwYXJhbWV0ZXJzLCBiaW5kaW5nU3RhdGVzICkgewoKICAgIAkvLyBUT0RPIFNlbmQgdGhpcyBldmVudCB0byBUaHJlZS5qcyBEZXZUb29scwogICAgCS8vIGNvbnNvbGUubG9nKCAnV2ViR0xQcm9ncmFtJywgY2FjaGVLZXkgKTsKCiAgICAJY29uc3QgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7CgogICAgCWNvbnN0IGRlZmluZXMgPSBwYXJhbWV0ZXJzLmRlZmluZXM7CgogICAgCWxldCB2ZXJ0ZXhTaGFkZXIgPSBwYXJhbWV0ZXJzLnZlcnRleFNoYWRlcjsKICAgIAlsZXQgZnJhZ21lbnRTaGFkZXIgPSBwYXJhbWV0ZXJzLmZyYWdtZW50U2hhZGVyOwoKICAgIAljb25zdCBzaGFkb3dNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVTaGFkb3dNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICk7CiAgICAJY29uc3QgZW52TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApOwogICAgCWNvbnN0IGVudk1hcE1vZGVEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKTsKICAgIAljb25zdCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9IGdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUoIHBhcmFtZXRlcnMgKTsKICAgIAljb25zdCBlbnZNYXBDdWJlVVZTaXplID0gZ2VuZXJhdGVDdWJlVVZTaXplKCBwYXJhbWV0ZXJzICk7CgogICAgCWNvbnN0IGN1c3RvbVZlcnRleEV4dGVuc2lvbnMgPSBnZW5lcmF0ZVZlcnRleEV4dGVuc2lvbnMoIHBhcmFtZXRlcnMgKTsKCiAgICAJY29uc3QgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApOwoKICAgIAljb25zdCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpOwoKICAgIAlsZXQgcHJlZml4VmVydGV4LCBwcmVmaXhGcmFnbWVudDsKICAgIAlsZXQgdmVyc2lvblN0cmluZyA9IHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPyAnI3ZlcnNpb24gJyArIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gKyAnXG4nIDogJyc7CgogICAgCWlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICkgewoKICAgIAkJcHJlZml4VmVydGV4ID0gWwoKICAgIAkJCScjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsCiAgICAJCQknI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLAoKICAgIAkJCWN1c3RvbURlZmluZXMKCiAgICAJCV0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXG4nICk7CgogICAgCQlpZiAoIHByZWZpeFZlcnRleC5sZW5ndGggPiAwICkgewoKICAgIAkJCXByZWZpeFZlcnRleCArPSAnXG4nOwoKICAgIAkJfQoKICAgIAkJcHJlZml4RnJhZ21lbnQgPSBbCgogICAgCQkJJyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSwKICAgIAkJCScjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsCgogICAgCQkJY3VzdG9tRGVmaW5lcwoKICAgIAkJXS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcbicgKTsKCiAgICAJCWlmICggcHJlZml4RnJhZ21lbnQubGVuZ3RoID4gMCApIHsKCiAgICAJCQlwcmVmaXhGcmFnbWVudCArPSAnXG4nOwoKICAgIAkJfQoKICAgIAl9IGVsc2UgewoKICAgIAkJcHJlZml4VmVydGV4ID0gWwoKICAgIAkJCWdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksCgogICAgCQkJJyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSwKICAgIAkJCScjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsCgogICAgCQkJY3VzdG9tRGVmaW5lcywKCiAgICAJCQlwYXJhbWV0ZXJzLmV4dGVuc2lvbkNsaXBDdWxsRGlzdGFuY2UgPyAnI2RlZmluZSBVU0VfQ0xJUF9ESVNUQU5DRScgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYmF0Y2hpbmcgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkcnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmJhdGNoaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkdfQ09MT1InIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmluc3RhbmNpbmcgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lORycgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0lOU1RBTkNJTkdfQ09MT1InIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmluc3RhbmNpbmdNb3JwaCA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HX01PUlBIJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMubWFwID8gJyNkZWZpbmUgVVNFX01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcE1vZGVEZWZpbmUgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLm5vcm1hbE1hcE9iamVjdFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRScgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMubm9ybWFsTWFwVGFuZ2VudFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmRpc3BsYWNlbWVudE1hcCA/ICcjZGVmaW5lIFVTRV9ESVNQTEFDRU1FTlRNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuYW5pc290cm9weSA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwID8gJyNkZWZpbmUgVVNFX0FOSVNPVFJPUFlNQVAnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRU1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfQ09MT1JNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCcgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5hbHBoYUhhc2ggPyAnI2RlZmluZSBVU0VfQUxQSEFIQVNIJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMudHJhbnNtaXNzaW9uID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTicgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTk1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMudGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX1RISUNLTkVTU01BUCcgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fQ09MT1JNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX1JPVUdITkVTU01BUCcgOiAnJywKCiAgICAJCQkvLwoKICAgIAkJCXBhcmFtZXRlcnMubWFwVXYgPyAnI2RlZmluZSBNQVBfVVYgJyArIHBhcmFtZXRlcnMubWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYWxwaGFNYXBVdiA/ICcjZGVmaW5lIEFMUEhBTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmFscGhhTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMubGlnaHRNYXBVdiA/ICcjZGVmaW5lIExJR0hUTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmxpZ2h0TWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYW9NYXBVdiA/ICcjZGVmaW5lIEFPTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmFvTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuZW1pc3NpdmVNYXBVdiA/ICcjZGVmaW5lIEVNSVNTSVZFTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYnVtcE1hcFV2ID8gJyNkZWZpbmUgQlVNUE1BUF9VViAnICsgcGFyYW1ldGVycy5idW1wTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMubm9ybWFsTWFwVXYgPyAnI2RlZmluZSBOT1JNQUxNQVBfVVYgJyArIHBhcmFtZXRlcnMubm9ybWFsTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgPyAnI2RlZmluZSBESVNQTEFDRU1FTlRNQVBfVVYgJyArIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ID8gJyNkZWZpbmUgTUVUQUxORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2IDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2ID8gJyNkZWZpbmUgUk9VR0hORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2IDogJycsCgogICAgCQkJcGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwVXYgPyAnI2RlZmluZSBBTklTT1RST1BZTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmFuaXNvdHJvcHlNYXBVdiA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwVXYgPyAnI2RlZmluZSBDTEVBUkNPQVRNQVBfVVYgJyArIHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgPyAnI2RlZmluZSBDTEVBUkNPQVRfTk9STUFMTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcFV2IDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2ID8gJyNkZWZpbmUgQ0xFQVJDT0FUX1JPVUdITkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuaXJpZGVzY2VuY2VNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFX1RISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2IDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgPyAnI2RlZmluZSBTSEVFTl9DT0xPUk1BUF9VViAnICsgcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXBVdiA/ICcjZGVmaW5lIFNIRUVOX1JPVUdITkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5zaGVlblJvdWdobmVzc01hcFV2IDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zcGVjdWxhck1hcFV2ID8gJyNkZWZpbmUgU1BFQ1VMQVJNQVBfVVYgJyArIHBhcmFtZXRlcnMuc3BlY3VsYXJNYXBVdiA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwVXYgPyAnI2RlZmluZSBTUEVDVUxBUl9DT0xPUk1BUF9VViAnICsgcGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwVXYgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXBVdiA/ICcjZGVmaW5lIFNQRUNVTEFSX0lOVEVOU0lUWU1BUF9VViAnICsgcGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcFV2IDogJycsCgogICAgCQkJcGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA/ICcjZGVmaW5lIFRSQU5TTUlTU0lPTk1BUF9VViAnICsgcGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA6ICcnLAogICAgCQkJcGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIFRISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA6ICcnLAoKICAgIAkJCS8vCgogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnZlcnRleEFscGhhcyA/ICcjZGVmaW5lIFVTRV9DT0xPUl9BTFBIQScgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMudmVydGV4VXYxcyA/ICcjZGVmaW5lIFVTRV9VVjEnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnZlcnRleFV2MnMgPyAnI2RlZmluZSBVU0VfVVYyJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhVdjNzID8gJyNkZWZpbmUgVVNFX1VWMycgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLnBvaW50c1V2cyA/ICcjZGVmaW5lIFVTRV9QT0lOVFNfVVYnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuc2tpbm5pbmcgPyAnI2RlZmluZSBVU0VfU0tJTk5JTkcnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLAogICAgCQkJKCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzICkgPyAnI2RlZmluZSBVU0VfTU9SUEhDT0xPUlMnIDogJycsCiAgICAJCQkoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfVEVYVFVSRV9TVFJJREUgJyArIHBhcmFtZXRlcnMubW9ycGhUZXh0dXJlU3RyaWRlIDogJycsCiAgICAJCQkoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfQ09VTlQgJyArIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMubnVtTGlnaHRQcm9iZXMgPiAwID8gJyNkZWZpbmUgVVNFX0xJR0hUX1BST0JFUycgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnJldmVyc2VEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9SRVZFUlNFREVQVEhCVUYnIDogJycsCgogICAgCQkJJ3VuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDsnLAogICAgCQkJJ3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7JywKICAgIAkJCSd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLAogICAgCQkJJ3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsCiAgICAJCQkndW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDsnLAogICAgCQkJJ3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjsnLAogICAgCQkJJ3VuaWZvcm0gYm9vbCBpc09ydGhvZ3JhcGhpYzsnLAoKICAgIAkJCScjaWZkZWYgVVNFX0lOU1RBTkNJTkcnLAoKICAgIAkJCScJYXR0cmlidXRlIG1hdDQgaW5zdGFuY2VNYXRyaXg7JywKCiAgICAJCQknI2VuZGlmJywKCiAgICAJCQknI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SJywKCiAgICAJCQknCWF0dHJpYnV0ZSB2ZWMzIGluc3RhbmNlQ29sb3I7JywKCiAgICAJCQknI2VuZGlmJywKCiAgICAJCQknI2lmZGVmIFVTRV9JTlNUQU5DSU5HX01PUlBIJywKCiAgICAJCQknCXVuaWZvcm0gc2FtcGxlcjJEIG1vcnBoVGV4dHVyZTsnLAoKICAgIAkJCScjZW5kaWYnLAoKICAgIAkJCSdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnLAogICAgCQkJJ2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDsnLAogICAgCQkJJ2F0dHJpYnV0ZSB2ZWMyIHV2OycsCgogICAgCQkJJyNpZmRlZiBVU0VfVVYxJywKCiAgICAJCQknCWF0dHJpYnV0ZSB2ZWMyIHV2MTsnLAoKICAgIAkJCScjZW5kaWYnLAoKICAgIAkJCScjaWZkZWYgVVNFX1VWMicsCgogICAgCQkJJwlhdHRyaWJ1dGUgdmVjMiB1djI7JywKCiAgICAJCQknI2VuZGlmJywKCiAgICAJCQknI2lmZGVmIFVTRV9VVjMnLAoKICAgIAkJCScJYXR0cmlidXRlIHZlYzIgdXYzOycsCgogICAgCQkJJyNlbmRpZicsCgogICAgCQkJJyNpZmRlZiBVU0VfVEFOR0VOVCcsCgogICAgCQkJJwlhdHRyaWJ1dGUgdmVjNCB0YW5nZW50OycsCgogICAgCQkJJyNlbmRpZicsCgogICAgCQkJJyNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKScsCgogICAgCQkJJwlhdHRyaWJ1dGUgdmVjNCBjb2xvcjsnLAoKICAgIAkJCScjZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKScsCgogICAgCQkJJwlhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLAoKICAgIAkJCScjZW5kaWYnLAoKICAgIAkJCScjaWZkZWYgVVNFX1NLSU5OSU5HJywKCiAgICAJCQknCWF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDsnLAogICAgCQkJJwlhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0OycsCgogICAgCQkJJyNlbmRpZicsCgogICAgCQkJJ1xuJwoKICAgIAkJXS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcbicgKTsKCiAgICAJCXByZWZpeEZyYWdtZW50ID0gWwoKICAgIAkJCWdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksCgogICAgCQkJJyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSwKICAgIAkJCScjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsCgogICAgCQkJY3VzdG9tRGVmaW5lcywKCiAgICAJCQlwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIgPyAnI2RlZmluZSBGT0dfRVhQMicgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLmFscGhhVG9Db3ZlcmFnZSA/ICcjZGVmaW5lIEFMUEhBX1RPX0NPVkVSQUdFJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5tYXRjYXAgPyAnI2RlZmluZSBVU0VfTUFUQ0FQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwVHlwZURlZmluZSA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwQmxlbmRpbmdEZWZpbmUgOiAnJywKICAgIAkJCWVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfVEVYRUxfV0lEVEggJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxXaWR0aCA6ICcnLAogICAgCQkJZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9URVhFTF9IRUlHSFQgJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxIZWlnaHQgOiAnJywKICAgIAkJCWVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfTUFYX01JUCAnICsgZW52TWFwQ3ViZVVWU2l6ZS5tYXhNaXAgKyAnLjAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5ub3JtYWxNYXBPYmplY3RTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfT0JKRUNUU1BBQ0UnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLmFuaXNvdHJvcHkgPyAnI2RlZmluZSBVU0VfQU5JU09UUk9QWScgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuYW5pc290cm9weU1hcCA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZTUFQJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0ID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVE1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuZGlzcGVyc2lvbiA/ICcjZGVmaW5lIFVTRV9ESVNQRVJTSU9OJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuaXJpZGVzY2VuY2UgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0UnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVAnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc3BlY3VsYXJDb2xvck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUl9DT0xPUk1BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfSU5URU5TSVRZTUFQJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBVU0VfQUxQSEFURVNUJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5hbHBoYUhhc2ggPyAnI2RlZmluZSBVU0VfQUxQSEFIQVNIJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuc2hlZW4gPyAnI2RlZmluZSBVU0VfU0hFRU4nIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fQ09MT1JNQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX1JPVUdITkVTU01BUCcgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT04nIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcCA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT05NQVAnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9USElDS05FU1NNQVAnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgfHwgcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgfHwgcGFyYW1ldGVycy5iYXRjaGluZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLnZlcnRleFV2MXMgPyAnI2RlZmluZSBVU0VfVVYxJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy52ZXJ0ZXhVdjJzID8gJyNkZWZpbmUgVVNFX1VWMicgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMudmVydGV4VXYzcyA/ICcjZGVmaW5lIFVTRV9VVjMnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5wb2ludHNVdnMgPyAnI2RlZmluZSBVU0VfUE9JTlRTX1VWJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsCiAgICAJCQlwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsCgogICAgCQkJcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgPyAnI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMubnVtTGlnaHRQcm9iZXMgPiAwID8gJyNkZWZpbmUgVVNFX0xJR0hUX1BST0JFUycgOiAnJywKCiAgICAJCQlwYXJhbWV0ZXJzLmRlY29kZVZpZGVvVGV4dHVyZSA/ICcjZGVmaW5lIERFQ09ERV9WSURFT19URVhUVVJFJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5kZWNvZGVWaWRlb1RleHR1cmVFbWlzc2l2ZSA/ICcjZGVmaW5lIERFQ09ERV9WSURFT19URVhUVVJFX0VNSVNTSVZFJyA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJywKICAgIAkJCXBhcmFtZXRlcnMucmV2ZXJzZURlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX1JFVkVSU0VERVBUSEJVRicgOiAnJywKCiAgICAJCQkndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7JywKICAgIAkJCSd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JywKICAgIAkJCSd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JywKCiAgICAJCQkoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/ICcjZGVmaW5lIFRPTkVfTUFQUElORycgOiAnJywKICAgIAkJCSggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gU2hhZGVyQ2h1bmtbICd0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdG9uZU1hcHBpbmcoKSBmdW5jdGlvbiBkZWZpbmVkIGJlbG93CiAgICAJCQkoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oICd0b25lTWFwcGluZycsIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKSA6ICcnLAoKICAgIAkJCXBhcmFtZXRlcnMuZGl0aGVyaW5nID8gJyNkZWZpbmUgRElUSEVSSU5HJyA6ICcnLAogICAgCQkJcGFyYW1ldGVycy5vcGFxdWUgPyAnI2RlZmluZSBPUEFRVUUnIDogJycsCgogICAgCQkJU2hhZGVyQ2h1bmtbICdjb2xvcnNwYWNlX3BhcnNfZnJhZ21lbnQnIF0sIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93CiAgICAJCQlnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oICdsaW5lYXJUb091dHB1dFRleGVsJywgcGFyYW1ldGVycy5vdXRwdXRDb2xvclNwYWNlICksCiAgICAJCQlnZXRMdW1pbmFuY2VGdW5jdGlvbigpLAoKICAgIAkJCXBhcmFtZXRlcnMudXNlRGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgOiAnJywKCiAgICAJCQknXG4nCgogICAgCQldLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xuJyApOwoKICAgIAl9CgogICAgCXZlcnRleFNoYWRlciA9IHJlc29sdmVJbmNsdWRlcyggdmVydGV4U2hhZGVyICk7CiAgICAJdmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7CiAgICAJdmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTsKCiAgICAJZnJhZ21lbnRTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7CiAgICAJZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApOwogICAgCWZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApOwoKICAgIAl2ZXJ0ZXhTaGFkZXIgPSB1bnJvbGxMb29wcyggdmVydGV4U2hhZGVyICk7CiAgICAJZnJhZ21lbnRTaGFkZXIgPSB1bnJvbGxMb29wcyggZnJhZ21lbnRTaGFkZXIgKTsKCiAgICAJaWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgIT09IHRydWUgKSB7CgogICAgCQkvLyBHTFNMIDMuMCBjb252ZXJzaW9uIGZvciBidWlsdC1pbiBtYXRlcmlhbHMgYW5kIFNoYWRlck1hdGVyaWFsCgogICAgCQl2ZXJzaW9uU3RyaW5nID0gJyN2ZXJzaW9uIDMwMCBlc1xuJzsKCiAgICAJCXByZWZpeFZlcnRleCA9IFsKICAgIAkJCWN1c3RvbVZlcnRleEV4dGVuc2lvbnMsCiAgICAJCQknI2RlZmluZSBhdHRyaWJ1dGUgaW4nLAogICAgCQkJJyNkZWZpbmUgdmFyeWluZyBvdXQnLAogICAgCQkJJyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnCiAgICAJCV0uam9pbiggJ1xuJyApICsgJ1xuJyArIHByZWZpeFZlcnRleDsKCiAgICAJCXByZWZpeEZyYWdtZW50ID0gWwogICAgCQkJJyNkZWZpbmUgdmFyeWluZyBpbicsCiAgICAJCQkoIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPT09IEdMU0wzICkgPyAnJyA6ICdsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7JywKICAgIAkJCSggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsCiAgICAJCQknI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJywKICAgIAkJCScjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJywKICAgIAkJCScjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLAogICAgCQkJJyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsCiAgICAJCQknI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsCiAgICAJCQknI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJywKICAgIAkJCScjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLAogICAgCQkJJyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsCiAgICAJCQknI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLAogICAgCQkJJyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJwogICAgCQldLmpvaW4oICdcbicgKSArICdcbicgKyBwcmVmaXhGcmFnbWVudDsKCiAgICAJfQoKICAgIAljb25zdCB2ZXJ0ZXhHbHNsID0gdmVyc2lvblN0cmluZyArIHByZWZpeFZlcnRleCArIHZlcnRleFNoYWRlcjsKICAgIAljb25zdCBmcmFnbWVudEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjsKCiAgICAJLy8gY29uc29sZS5sb2coICcqVkVSVEVYKicsIHZlcnRleEdsc2wgKTsKICAgIAkvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTsKCiAgICAJY29uc3QgZ2xWZXJ0ZXhTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHZlcnRleEdsc2wgKTsKICAgIAljb25zdCBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50R2xzbCApOwoKICAgIAlnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyICk7CiAgICAJZ2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7CgogICAgCS8vIEZvcmNlIGEgcGFydGljdWxhciBhdHRyaWJ1dGUgdG8gaW5kZXggMC4KCiAgICAJaWYgKCBwYXJhbWV0ZXJzLmluZGV4MEF0dHJpYnV0ZU5hbWUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCWdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICk7CgogICAgCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID09PSB0cnVlICkgewoKICAgIAkJLy8gcHJvZ3JhbXMgd2l0aCBtb3JwaFRhcmdldHMgZGlzcGxhY2UgcG9zaXRpb24gb3V0IG9mIGF0dHJpYnV0ZSAwCiAgICAJCWdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgJ3Bvc2l0aW9uJyApOwoKICAgIAl9CgogICAgCWdsLmxpbmtQcm9ncmFtKCBwcm9ncmFtICk7CgogICAgCWZ1bmN0aW9uIG9uRmlyc3RVc2UoIHNlbGYgKSB7CgogICAgCQkvLyBjaGVjayBmb3IgbGluayBlcnJvcnMKICAgIAkJaWYgKCByZW5kZXJlci5kZWJ1Zy5jaGVja1NoYWRlckVycm9ycyApIHsKCiAgICAJCQljb25zdCBwcm9ncmFtTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coIHByb2dyYW0gKS50cmltKCk7CiAgICAJCQljb25zdCB2ZXJ0ZXhMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbFZlcnRleFNoYWRlciApLnRyaW0oKTsKICAgIAkJCWNvbnN0IGZyYWdtZW50TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xGcmFnbWVudFNoYWRlciApLnRyaW0oKTsKCiAgICAJCQlsZXQgcnVubmFibGUgPSB0cnVlOwogICAgCQkJbGV0IGhhdmVEaWFnbm9zdGljcyA9IHRydWU7CgogICAgCQkJaWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyApID09PSBmYWxzZSApIHsKCiAgICAJCQkJcnVubmFibGUgPSBmYWxzZTsKCiAgICAJCQkJaWYgKCB0eXBlb2YgcmVuZGVyZXIuZGVidWcub25TaGFkZXJFcnJvciA9PT0gJ2Z1bmN0aW9uJyApIHsKCiAgICAJCQkJCXJlbmRlcmVyLmRlYnVnLm9uU2hhZGVyRXJyb3IoIGdsLCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciwgZ2xGcmFnbWVudFNoYWRlciApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJLy8gZGVmYXVsdCBlcnJvciByZXBvcnRpbmcKCiAgICAJCQkJCWNvbnN0IHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApOwogICAgCQkJCQljb25zdCBmcmFnbWVudEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsRnJhZ21lbnRTaGFkZXIsICdmcmFnbWVudCcgKTsKCiAgICAJCQkJCWNvbnNvbGUuZXJyb3IoCiAgICAJCQkJCQknVEhSRUUuV2ViR0xQcm9ncmFtOiBTaGFkZXIgRXJyb3IgJyArIGdsLmdldEVycm9yKCkgKyAnIC0gJyArCiAgICAJCQkJCQknVkFMSURBVEVfU1RBVFVTICcgKyBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5WQUxJREFURV9TVEFUVVMgKSArICdcblxuJyArCiAgICAJCQkJCQknTWF0ZXJpYWwgTmFtZTogJyArIHNlbGYubmFtZSArICdcbicgKwogICAgCQkJCQkJJ01hdGVyaWFsIFR5cGU6ICcgKyBzZWxmLnR5cGUgKyAnXG5cbicgKwogICAgCQkJCQkJJ1Byb2dyYW0gSW5mbyBMb2c6ICcgKyBwcm9ncmFtTG9nICsgJ1xuJyArCiAgICAJCQkJCQl2ZXJ0ZXhFcnJvcnMgKyAnXG4nICsKICAgIAkJCQkJCWZyYWdtZW50RXJyb3JzCiAgICAJCQkJCSk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCBwcm9ncmFtTG9nICE9PSAnJyApIHsKCiAgICAJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBQcm9ncmFtIEluZm8gTG9nOicsIHByb2dyYW1Mb2cgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCB2ZXJ0ZXhMb2cgPT09ICcnIHx8IGZyYWdtZW50TG9nID09PSAnJyApIHsKCiAgICAJCQkJaGF2ZURpYWdub3N0aWNzID0gZmFsc2U7CgogICAgCQkJfQoKICAgIAkJCWlmICggaGF2ZURpYWdub3N0aWNzICkgewoKICAgIAkJCQlzZWxmLmRpYWdub3N0aWNzID0gewoKICAgIAkJCQkJcnVubmFibGU6IHJ1bm5hYmxlLAoKICAgIAkJCQkJcHJvZ3JhbUxvZzogcHJvZ3JhbUxvZywKCiAgICAJCQkJCXZlcnRleFNoYWRlcjogewoKICAgIAkJCQkJCWxvZzogdmVydGV4TG9nLAogICAgCQkJCQkJcHJlZml4OiBwcmVmaXhWZXJ0ZXgKCiAgICAJCQkJCX0sCgogICAgCQkJCQlmcmFnbWVudFNoYWRlcjogewoKICAgIAkJCQkJCWxvZzogZnJhZ21lbnRMb2csCiAgICAJCQkJCQlwcmVmaXg6IHByZWZpeEZyYWdtZW50CgogICAgCQkJCQl9CgogICAgCQkJCX07CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8gQ2xlYW4gdXAKCiAgICAJCS8vIENyYXNoZXMgaW4gaU9TOSBhbmQgaU9TMTAuICMxODQwMgogICAgCQkvLyBnbC5kZXRhY2hTaGFkZXIoIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyICk7CiAgICAJCS8vIGdsLmRldGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xGcmFnbWVudFNoYWRlciApOwoKICAgIAkJZ2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApOwogICAgCQlnbC5kZWxldGVTaGFkZXIoIGdsRnJhZ21lbnRTaGFkZXIgKTsKCiAgICAJCWNhY2hlZFVuaWZvcm1zID0gbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICk7CiAgICAJCWNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTsKCiAgICAJfQoKICAgIAkvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnMKCiAgICAJbGV0IGNhY2hlZFVuaWZvcm1zOwoKICAgIAl0aGlzLmdldFVuaWZvcm1zID0gZnVuY3Rpb24gKCkgewoKICAgIAkJaWYgKCBjYWNoZWRVbmlmb3JtcyA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCS8vIFBvcHVsYXRlcyBjYWNoZWRVbmlmb3JtcyBhbmQgY2FjaGVkQXR0cmlidXRlcwogICAgCQkJb25GaXJzdFVzZSggdGhpcyApOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIGNhY2hlZFVuaWZvcm1zOwoKICAgIAl9OwoKICAgIAkvLyBzZXQgdXAgY2FjaGluZyBmb3IgYXR0cmlidXRlIGxvY2F0aW9ucwoKICAgIAlsZXQgY2FjaGVkQXR0cmlidXRlczsKCiAgICAJdGhpcy5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkgewoKICAgIAkJaWYgKCBjYWNoZWRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJLy8gUG9wdWxhdGVzIGNhY2hlZEF0dHJpYnV0ZXMgYW5kIGNhY2hlZFVuaWZvcm1zCiAgICAJCQlvbkZpcnN0VXNlKCB0aGlzICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gY2FjaGVkQXR0cmlidXRlczsKCiAgICAJfTsKCiAgICAJLy8gaW5kaWNhdGUgd2hlbiB0aGUgcHJvZ3JhbSBpcyByZWFkeSB0byBiZSB1c2VkLiBpZiB0aGUgS0hSX3BhcmFsbGVsX3NoYWRlcl9jb21waWxlIGV4dGVuc2lvbiBpc24ndCBzdXBwb3J0ZWQsCiAgICAJLy8gZmxhZyB0aGUgcHJvZ3JhbSBhcyByZWFkeSBpbW1lZGlhdGVseS4gSXQgbWF5IGNhdXNlIGEgc3RhbGwgd2hlbiBpdCdzIGZpcnN0IHVzZWQuCgogICAgCWxldCBwcm9ncmFtUmVhZHkgPSAoIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25QYXJhbGxlbFNoYWRlckNvbXBpbGUgPT09IGZhbHNlICk7CgogICAgCXRoaXMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCWlmICggcHJvZ3JhbVJlYWR5ID09PSBmYWxzZSApIHsKCiAgICAJCQlwcm9ncmFtUmVhZHkgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBDT01QTEVUSU9OX1NUQVRVU19LSFIgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBwcm9ncmFtUmVhZHk7CgogICAgCX07CgogICAgCS8vIGZyZWUgcmVzb3VyY2UKCiAgICAJdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkgewoKICAgIAkJYmluZGluZ1N0YXRlcy5yZWxlYXNlU3RhdGVzT2ZQcm9ncmFtKCB0aGlzICk7CgogICAgCQlnbC5kZWxldGVQcm9ncmFtKCBwcm9ncmFtICk7CiAgICAJCXRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDsKCiAgICAJfTsKCiAgICAJLy8KCiAgICAJdGhpcy50eXBlID0gcGFyYW1ldGVycy5zaGFkZXJUeXBlOwogICAgCXRoaXMubmFtZSA9IHBhcmFtZXRlcnMuc2hhZGVyTmFtZTsKICAgIAl0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQgKys7CiAgICAJdGhpcy5jYWNoZUtleSA9IGNhY2hlS2V5OwogICAgCXRoaXMudXNlZFRpbWVzID0gMTsKICAgIAl0aGlzLnByb2dyYW0gPSBwcm9ncmFtOwogICAgCXRoaXMudmVydGV4U2hhZGVyID0gZ2xWZXJ0ZXhTaGFkZXI7CiAgICAJdGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7CgogICAgCXJldHVybiB0aGlzOwoKICAgIH0KCiAgICBsZXQgX2lkID0gMDsKCiAgICBjbGFzcyBXZWJHTFNoYWRlckNhY2hlIHsKCiAgICAJY29uc3RydWN0b3IoKSB7CgogICAgCQl0aGlzLnNoYWRlckNhY2hlID0gbmV3IE1hcCgpOwogICAgCQl0aGlzLm1hdGVyaWFsQ2FjaGUgPSBuZXcgTWFwKCk7CgogICAgCX0KCiAgICAJdXBkYXRlKCBtYXRlcmlhbCApIHsKCiAgICAJCWNvbnN0IHZlcnRleFNoYWRlciA9IG1hdGVyaWFsLnZlcnRleFNoYWRlcjsKICAgIAkJY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjsKCiAgICAJCWNvbnN0IHZlcnRleFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIHZlcnRleFNoYWRlciApOwogICAgCQljb25zdCBmcmFnbWVudFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIGZyYWdtZW50U2hhZGVyICk7CgogICAgCQljb25zdCBtYXRlcmlhbFNoYWRlcnMgPSB0aGlzLl9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsKCBtYXRlcmlhbCApOwoKICAgIAkJaWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHsKCiAgICAJCQltYXRlcmlhbFNoYWRlcnMuYWRkKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApOwogICAgCQkJdmVydGV4U2hhZGVyU3RhZ2UudXNlZFRpbWVzICsrOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCBmcmFnbWVudFNoYWRlclN0YWdlICkgPT09IGZhbHNlICkgewoKICAgIAkJCW1hdGVyaWFsU2hhZGVycy5hZGQoIGZyYWdtZW50U2hhZGVyU3RhZ2UgKTsKICAgIAkJCWZyYWdtZW50U2hhZGVyU3RhZ2UudXNlZFRpbWVzICsrOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIHRoaXM7CgogICAgCX0KCiAgICAJcmVtb3ZlKCBtYXRlcmlhbCApIHsKCiAgICAJCWNvbnN0IG1hdGVyaWFsU2hhZGVycyA9IHRoaXMubWF0ZXJpYWxDYWNoZS5nZXQoIG1hdGVyaWFsICk7CgogICAgCQlmb3IgKCBjb25zdCBzaGFkZXJTdGFnZSBvZiBtYXRlcmlhbFNoYWRlcnMgKSB7CgogICAgCQkJc2hhZGVyU3RhZ2UudXNlZFRpbWVzIC0tOwoKICAgIAkJCWlmICggc2hhZGVyU3RhZ2UudXNlZFRpbWVzID09PSAwICkgdGhpcy5zaGFkZXJDYWNoZS5kZWxldGUoIHNoYWRlclN0YWdlLmNvZGUgKTsKCiAgICAJCX0KCiAgICAJCXRoaXMubWF0ZXJpYWxDYWNoZS5kZWxldGUoIG1hdGVyaWFsICk7CgogICAgCQlyZXR1cm4gdGhpczsKCiAgICAJfQoKICAgIAlnZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKSB7CgogICAgCQlyZXR1cm4gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIG1hdGVyaWFsLnZlcnRleFNoYWRlciApLmlkOwoKICAgIAl9CgogICAgCWdldEZyYWdtZW50U2hhZGVySUQoIG1hdGVyaWFsICkgewoKICAgIAkJcmV0dXJuIHRoaXMuX2dldFNoYWRlclN0YWdlKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApLmlkOwoKICAgIAl9CgogICAgCWRpc3Bvc2UoKSB7CgogICAgCQl0aGlzLnNoYWRlckNhY2hlLmNsZWFyKCk7CiAgICAJCXRoaXMubWF0ZXJpYWxDYWNoZS5jbGVhcigpOwoKICAgIAl9CgogICAgCV9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsKCBtYXRlcmlhbCApIHsKCiAgICAJCWNvbnN0IGNhY2hlID0gdGhpcy5tYXRlcmlhbENhY2hlOwogICAgCQlsZXQgc2V0ID0gY2FjaGUuZ2V0KCBtYXRlcmlhbCApOwoKICAgIAkJaWYgKCBzZXQgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlzZXQgPSBuZXcgU2V0KCk7CiAgICAJCQljYWNoZS5zZXQoIG1hdGVyaWFsLCBzZXQgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBzZXQ7CgogICAgCX0KCiAgICAJX2dldFNoYWRlclN0YWdlKCBjb2RlICkgewoKICAgIAkJY29uc3QgY2FjaGUgPSB0aGlzLnNoYWRlckNhY2hlOwogICAgCQlsZXQgc3RhZ2UgPSBjYWNoZS5nZXQoIGNvZGUgKTsKCiAgICAJCWlmICggc3RhZ2UgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlzdGFnZSA9IG5ldyBXZWJHTFNoYWRlclN0YWdlKCBjb2RlICk7CiAgICAJCQljYWNoZS5zZXQoIGNvZGUsIHN0YWdlICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gc3RhZ2U7CgogICAgCX0KCiAgICB9CgogICAgY2xhc3MgV2ViR0xTaGFkZXJTdGFnZSB7CgogICAgCWNvbnN0cnVjdG9yKCBjb2RlICkgewoKICAgIAkJdGhpcy5pZCA9IF9pZCArKzsKCiAgICAJCXRoaXMuY29kZSA9IGNvZGU7CiAgICAJCXRoaXMudXNlZFRpbWVzID0gMDsKCiAgICAJfQoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTFByb2dyYW1zKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKSB7CgogICAgCWNvbnN0IF9wcm9ncmFtTGF5ZXJzID0gbmV3IExheWVycygpOwogICAgCWNvbnN0IF9jdXN0b21TaGFkZXJzID0gbmV3IFdlYkdMU2hhZGVyQ2FjaGUoKTsKICAgIAljb25zdCBfYWN0aXZlQ2hhbm5lbHMgPSBuZXcgU2V0KCk7CiAgICAJY29uc3QgcHJvZ3JhbXMgPSBbXTsKCiAgICAJY29uc3QgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyOwogICAgCWNvbnN0IFNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyA9IGNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlczsKCiAgICAJbGV0IHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247CgogICAgCWNvbnN0IHNoYWRlcklEcyA9IHsKICAgIAkJTWVzaERlcHRoTWF0ZXJpYWw6ICdkZXB0aCcsCiAgICAJCU1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJywKICAgIAkJTWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJywKICAgIAkJTWVzaEJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsCiAgICAJCU1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0JywKICAgIAkJTWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsCiAgICAJCU1lc2hUb29uTWF0ZXJpYWw6ICd0b29uJywKICAgIAkJTWVzaFN0YW5kYXJkTWF0ZXJpYWw6ICdwaHlzaWNhbCcsCiAgICAJCU1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLAogICAgCQlNZXNoTWF0Y2FwTWF0ZXJpYWw6ICdtYXRjYXAnLAogICAgCQlMaW5lQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJywKICAgIAkJTGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJywKICAgIAkJUG9pbnRzTWF0ZXJpYWw6ICdwb2ludHMnLAogICAgCQlTaGFkb3dNYXRlcmlhbDogJ3NoYWRvdycsCiAgICAJCVNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJwogICAgCX07CgogICAgCWZ1bmN0aW9uIGdldENoYW5uZWwoIHZhbHVlICkgewoKICAgIAkJX2FjdGl2ZUNoYW5uZWxzLmFkZCggdmFsdWUgKTsKCiAgICAJCWlmICggdmFsdWUgPT09IDAgKSByZXR1cm4gJ3V2JzsKCiAgICAJCXJldHVybiBgdXYkeyB2YWx1ZSB9YDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLCBzaGFkb3dzLCBzY2VuZSwgb2JqZWN0ICkgewoKICAgIAkJY29uc3QgZm9nID0gc2NlbmUuZm9nOwogICAgCQljb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTsKICAgIAkJY29uc3QgZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsOwoKICAgIAkJY29uc3QgZW52TWFwID0gKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gY3ViZXV2bWFwcyA6IGN1YmVtYXBzICkuZ2V0KCBtYXRlcmlhbC5lbnZNYXAgfHwgZW52aXJvbm1lbnQgKTsKICAgIAkJY29uc3QgZW52TWFwQ3ViZVVWSGVpZ2h0ID0gKCAhISBlbnZNYXAgKSAmJiAoIGVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApID8gZW52TWFwLmltYWdlLmhlaWdodCA6IG51bGw7CgogICAgCQljb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdOwoKICAgIAkJLy8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmUKICAgIAkJLy8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldCkKCiAgICAJCWlmICggbWF0ZXJpYWwucHJlY2lzaW9uICE9PSBudWxsICkgewoKICAgIAkJCXByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5nZXRNYXhQcmVjaXNpb24oIG1hdGVyaWFsLnByZWNpc2lvbiApOwoKICAgIAkJCWlmICggcHJlY2lzaW9uICE9PSBtYXRlcmlhbC5wcmVjaXNpb24gKSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbS5nZXRQYXJhbWV0ZXJzOicsIG1hdGVyaWFsLnByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgcHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8KCiAgICAJCWNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yOwogICAgCQljb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDsKCiAgICAJCWxldCBtb3JwaFRleHR1cmVTdHJpZGUgPSAwOwoKICAgIAkJaWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDE7CiAgICAJCWlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMjsKICAgIAkJaWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDM7CgogICAgCQkvLwoKICAgIAkJbGV0IHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXI7CiAgICAJCWxldCBjdXN0b21WZXJ0ZXhTaGFkZXJJRCwgY3VzdG9tRnJhZ21lbnRTaGFkZXJJRDsKCiAgICAJCWlmICggc2hhZGVySUQgKSB7CgogICAgCQkJY29uc3Qgc2hhZGVyID0gU2hhZGVyTGliWyBzaGFkZXJJRCBdOwoKICAgIAkJCXZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7CiAgICAJCQlmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJdmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyOwogICAgCQkJZnJhZ21lbnRTaGFkZXIgPSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjsKCiAgICAJCQlfY3VzdG9tU2hhZGVycy51cGRhdGUoIG1hdGVyaWFsICk7CgogICAgCQkJY3VzdG9tVmVydGV4U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKTsKICAgIAkJCWN1c3RvbUZyYWdtZW50U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApOwoKICAgIAkJfQoKICAgIAkJY29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpOwogICAgCQljb25zdCByZXZlcnNlRGVwdGhCdWZmZXIgPSByZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLmdldFJldmVyc2VkKCk7CgogICAgCQljb25zdCBJU19JTlNUQU5DRURNRVNIID0gb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZTsKICAgIAkJY29uc3QgSVNfQkFUQ0hFRE1FU0ggPSBvYmplY3QuaXNCYXRjaGVkTWVzaCA9PT0gdHJ1ZTsKCiAgICAJCWNvbnN0IEhBU19NQVAgPSAhISBtYXRlcmlhbC5tYXA7CiAgICAJCWNvbnN0IEhBU19NQVRDQVAgPSAhISBtYXRlcmlhbC5tYXRjYXA7CiAgICAJCWNvbnN0IEhBU19FTlZNQVAgPSAhISBlbnZNYXA7CiAgICAJCWNvbnN0IEhBU19BT01BUCA9ICEhIG1hdGVyaWFsLmFvTWFwOwogICAgCQljb25zdCBIQVNfTElHSFRNQVAgPSAhISBtYXRlcmlhbC5saWdodE1hcDsKICAgIAkJY29uc3QgSEFTX0JVTVBNQVAgPSAhISBtYXRlcmlhbC5idW1wTWFwOwogICAgCQljb25zdCBIQVNfTk9STUFMTUFQID0gISEgbWF0ZXJpYWwubm9ybWFsTWFwOwogICAgCQljb25zdCBIQVNfRElTUExBQ0VNRU5UTUFQID0gISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwOwogICAgCQljb25zdCBIQVNfRU1JU1NJVkVNQVAgPSAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcDsKCiAgICAJCWNvbnN0IEhBU19NRVRBTE5FU1NNQVAgPSAhISBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7CiAgICAJCWNvbnN0IEhBU19ST1VHSE5FU1NNQVAgPSAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7CgogICAgCQljb25zdCBIQVNfQU5JU09UUk9QWSA9IG1hdGVyaWFsLmFuaXNvdHJvcHkgPiAwOwogICAgCQljb25zdCBIQVNfQ0xFQVJDT0FUID0gbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMDsKICAgIAkJY29uc3QgSEFTX0RJU1BFUlNJT04gPSBtYXRlcmlhbC5kaXNwZXJzaW9uID4gMDsKICAgIAkJY29uc3QgSEFTX0lSSURFU0NFTkNFID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPiAwOwogICAgCQljb25zdCBIQVNfU0hFRU4gPSBtYXRlcmlhbC5zaGVlbiA+IDA7CiAgICAJCWNvbnN0IEhBU19UUkFOU01JU1NJT04gPSBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwOwoKICAgIAkJY29uc3QgSEFTX0FOSVNPVFJPUFlNQVAgPSBIQVNfQU5JU09UUk9QWSAmJiAhISBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwOwoKICAgIAkJY29uc3QgSEFTX0NMRUFSQ09BVE1BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0TWFwOwogICAgCQljb25zdCBIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwOwogICAgCQljb25zdCBIQVNfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwOwoKICAgIAkJY29uc3QgSEFTX0lSSURFU0NFTkNFTUFQID0gSEFTX0lSSURFU0NFTkNFICYmICEhIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwOwogICAgCQljb25zdCBIQVNfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQID0gSEFTX0lSSURFU0NFTkNFICYmICEhIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwOwoKICAgIAkJY29uc3QgSEFTX1NIRUVOX0NPTE9STUFQID0gSEFTX1NIRUVOICYmICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7CiAgICAJCWNvbnN0IEhBU19TSEVFTl9ST1VHSE5FU1NNQVAgPSBIQVNfU0hFRU4gJiYgISEgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7CgogICAgCQljb25zdCBIQVNfU1BFQ1VMQVJNQVAgPSAhISBtYXRlcmlhbC5zcGVjdWxhck1hcDsKICAgIAkJY29uc3QgSEFTX1NQRUNVTEFSX0NPTE9STUFQID0gISEgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcDsKICAgIAkJY29uc3QgSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwOwoKICAgIAkJY29uc3QgSEFTX1RSQU5TTUlTU0lPTk1BUCA9IEhBU19UUkFOU01JU1NJT04gJiYgISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwOwogICAgCQljb25zdCBIQVNfVEhJQ0tORVNTTUFQID0gSEFTX1RSQU5TTUlTU0lPTiAmJiAhISBtYXRlcmlhbC50aGlja25lc3NNYXA7CgogICAgCQljb25zdCBIQVNfR1JBRElFTlRNQVAgPSAhISBtYXRlcmlhbC5ncmFkaWVudE1hcDsKCiAgICAJCWNvbnN0IEhBU19BTFBIQU1BUCA9ICEhIG1hdGVyaWFsLmFscGhhTWFwOwoKICAgIAkJY29uc3QgSEFTX0FMUEhBVEVTVCA9IG1hdGVyaWFsLmFscGhhVGVzdCA+IDA7CgogICAgCQljb25zdCBIQVNfQUxQSEFIQVNIID0gISEgbWF0ZXJpYWwuYWxwaGFIYXNoOwoKICAgIAkJY29uc3QgSEFTX0VYVEVOU0lPTlMgPSAhISBtYXRlcmlhbC5leHRlbnNpb25zOwoKICAgIAkJbGV0IHRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZzsKCiAgICAJCWlmICggbWF0ZXJpYWwudG9uZU1hcHBlZCApIHsKCiAgICAJCQlpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkgewoKICAgIAkJCQl0b25lTWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWNvbnN0IHBhcmFtZXRlcnMgPSB7CgogICAgCQkJc2hhZGVySUQ6IHNoYWRlcklELAogICAgCQkJc2hhZGVyVHlwZTogbWF0ZXJpYWwudHlwZSwKICAgIAkJCXNoYWRlck5hbWU6IG1hdGVyaWFsLm5hbWUsCgogICAgCQkJdmVydGV4U2hhZGVyOiB2ZXJ0ZXhTaGFkZXIsCiAgICAJCQlmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRTaGFkZXIsCiAgICAJCQlkZWZpbmVzOiBtYXRlcmlhbC5kZWZpbmVzLAoKICAgIAkJCWN1c3RvbVZlcnRleFNoYWRlcklEOiBjdXN0b21WZXJ0ZXhTaGFkZXJJRCwKICAgIAkJCWN1c3RvbUZyYWdtZW50U2hhZGVySUQ6IGN1c3RvbUZyYWdtZW50U2hhZGVySUQsCgogICAgCQkJaXNSYXdTaGFkZXJNYXRlcmlhbDogbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCA9PT0gdHJ1ZSwKICAgIAkJCWdsc2xWZXJzaW9uOiBtYXRlcmlhbC5nbHNsVmVyc2lvbiwKCiAgICAJCQlwcmVjaXNpb246IHByZWNpc2lvbiwKCiAgICAJCQliYXRjaGluZzogSVNfQkFUQ0hFRE1FU0gsCiAgICAJCQliYXRjaGluZ0NvbG9yOiBJU19CQVRDSEVETUVTSCAmJiBvYmplY3QuX2NvbG9yc1RleHR1cmUgIT09IG51bGwsCiAgICAJCQlpbnN0YW5jaW5nOiBJU19JTlNUQU5DRURNRVNILAogICAgCQkJaW5zdGFuY2luZ0NvbG9yOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsLAogICAgCQkJaW5zdGFuY2luZ01vcnBoOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5tb3JwaFRleHR1cmUgIT09IG51bGwsCgogICAgCQkJc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTLAogICAgCQkJb3V0cHV0Q29sb3JTcGFjZTogKCBjdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlIDogKCBjdXJyZW50UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgPyBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuY29sb3JTcGFjZSA6IExpbmVhclNSR0JDb2xvclNwYWNlICksCiAgICAJCQlhbHBoYVRvQ292ZXJhZ2U6ICEhIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSwKCiAgICAJCQltYXA6IEhBU19NQVAsCiAgICAJCQltYXRjYXA6IEhBU19NQVRDQVAsCiAgICAJCQllbnZNYXA6IEhBU19FTlZNQVAsCiAgICAJCQllbnZNYXBNb2RlOiBIQVNfRU5WTUFQICYmIGVudk1hcC5tYXBwaW5nLAogICAgCQkJZW52TWFwQ3ViZVVWSGVpZ2h0OiBlbnZNYXBDdWJlVVZIZWlnaHQsCiAgICAJCQlhb01hcDogSEFTX0FPTUFQLAogICAgCQkJbGlnaHRNYXA6IEhBU19MSUdIVE1BUCwKICAgIAkJCWJ1bXBNYXA6IEhBU19CVU1QTUFQLAogICAgCQkJbm9ybWFsTWFwOiBIQVNfTk9STUFMTUFQLAogICAgCQkJZGlzcGxhY2VtZW50TWFwOiBTVVBQT1JUU19WRVJURVhfVEVYVFVSRVMgJiYgSEFTX0RJU1BMQUNFTUVOVE1BUCwKICAgIAkJCWVtaXNzaXZlTWFwOiBIQVNfRU1JU1NJVkVNQVAsCgogICAgCQkJbm9ybWFsTWFwT2JqZWN0U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gT2JqZWN0U3BhY2VOb3JtYWxNYXAsCiAgICAJCQlub3JtYWxNYXBUYW5nZW50U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwLAoKICAgIAkJCW1ldGFsbmVzc01hcDogSEFTX01FVEFMTkVTU01BUCwKICAgIAkJCXJvdWdobmVzc01hcDogSEFTX1JPVUdITkVTU01BUCwKCiAgICAJCQlhbmlzb3Ryb3B5OiBIQVNfQU5JU09UUk9QWSwKICAgIAkJCWFuaXNvdHJvcHlNYXA6IEhBU19BTklTT1RST1BZTUFQLAoKICAgIAkJCWNsZWFyY29hdDogSEFTX0NMRUFSQ09BVCwKICAgIAkJCWNsZWFyY29hdE1hcDogSEFTX0NMRUFSQ09BVE1BUCwKICAgIAkJCWNsZWFyY29hdE5vcm1hbE1hcDogSEFTX0NMRUFSQ09BVF9OT1JNQUxNQVAsCiAgICAJCQljbGVhcmNvYXRSb3VnaG5lc3NNYXA6IEhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQLAoKICAgIAkJCWRpc3BlcnNpb246IEhBU19ESVNQRVJTSU9OLAoKICAgIAkJCWlyaWRlc2NlbmNlOiBIQVNfSVJJREVTQ0VOQ0UsCiAgICAJCQlpcmlkZXNjZW5jZU1hcDogSEFTX0lSSURFU0NFTkNFTUFQLAogICAgCQkJaXJpZGVzY2VuY2VUaGlja25lc3NNYXA6IEhBU19JUklERVNDRU5DRV9USElDS05FU1NNQVAsCgogICAgCQkJc2hlZW46IEhBU19TSEVFTiwKICAgIAkJCXNoZWVuQ29sb3JNYXA6IEhBU19TSEVFTl9DT0xPUk1BUCwKICAgIAkJCXNoZWVuUm91Z2huZXNzTWFwOiBIQVNfU0hFRU5fUk9VR0hORVNTTUFQLAoKICAgIAkJCXNwZWN1bGFyTWFwOiBIQVNfU1BFQ1VMQVJNQVAsCiAgICAJCQlzcGVjdWxhckNvbG9yTWFwOiBIQVNfU1BFQ1VMQVJfQ09MT1JNQVAsCiAgICAJCQlzcGVjdWxhckludGVuc2l0eU1hcDogSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCwKCiAgICAJCQl0cmFuc21pc3Npb246IEhBU19UUkFOU01JU1NJT04sCiAgICAJCQl0cmFuc21pc3Npb25NYXA6IEhBU19UUkFOU01JU1NJT05NQVAsCiAgICAJCQl0aGlja25lc3NNYXA6IEhBU19USElDS05FU1NNQVAsCgogICAgCQkJZ3JhZGllbnRNYXA6IEhBU19HUkFESUVOVE1BUCwKCiAgICAJCQlvcGFxdWU6IG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSAmJiBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSBmYWxzZSwKCiAgICAJCQlhbHBoYU1hcDogSEFTX0FMUEhBTUFQLAogICAgCQkJYWxwaGFUZXN0OiBIQVNfQUxQSEFURVNULAogICAgCQkJYWxwaGFIYXNoOiBIQVNfQUxQSEFIQVNILAoKICAgIAkJCWNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsCgogICAgCQkJLy8KCiAgICAJCQltYXBVdjogSEFTX01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5tYXAuY2hhbm5lbCApLAogICAgCQkJYW9NYXBVdjogSEFTX0FPTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmFvTWFwLmNoYW5uZWwgKSwKICAgIAkJCWxpZ2h0TWFwVXY6IEhBU19MSUdIVE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5saWdodE1hcC5jaGFubmVsICksCiAgICAJCQlidW1wTWFwVXY6IEhBU19CVU1QTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmJ1bXBNYXAuY2hhbm5lbCApLAogICAgCQkJbm9ybWFsTWFwVXY6IEhBU19OT1JNQUxNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwubm9ybWFsTWFwLmNoYW5uZWwgKSwKICAgIAkJCWRpc3BsYWNlbWVudE1hcFV2OiBIQVNfRElTUExBQ0VNRU5UTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcC5jaGFubmVsICksCiAgICAJCQllbWlzc2l2ZU1hcFV2OiBIQVNfRU1JU1NJVkVNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuZW1pc3NpdmVNYXAuY2hhbm5lbCApLAoKICAgIAkJCW1ldGFsbmVzc01hcFV2OiBIQVNfTUVUQUxORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm1ldGFsbmVzc01hcC5jaGFubmVsICksCiAgICAJCQlyb3VnaG5lc3NNYXBVdjogSEFTX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAuY2hhbm5lbCApLAoKICAgIAkJCWFuaXNvdHJvcHlNYXBVdjogSEFTX0FOSVNPVFJPUFlNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYW5pc290cm9weU1hcC5jaGFubmVsICksCgogICAgCQkJY2xlYXJjb2F0TWFwVXY6IEhBU19DTEVBUkNPQVRNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuY2xlYXJjb2F0TWFwLmNoYW5uZWwgKSwKICAgIAkJCWNsZWFyY29hdE5vcm1hbE1hcFV2OiBIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAuY2hhbm5lbCApLAogICAgCQkJY2xlYXJjb2F0Um91Z2huZXNzTWFwVXY6IEhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcC5jaGFubmVsICksCgogICAgCQkJaXJpZGVzY2VuY2VNYXBVdjogSEFTX0lSSURFU0NFTkNFTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwLmNoYW5uZWwgKSwKICAgIAkJCWlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY6IEhBU19JUklERVNDRU5DRV9USElDS05FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAuY2hhbm5lbCApLAoKICAgIAkJCXNoZWVuQ29sb3JNYXBVdjogSEFTX1NIRUVOX0NPTE9STUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAuY2hhbm5lbCApLAogICAgCQkJc2hlZW5Sb3VnaG5lc3NNYXBVdjogSEFTX1NIRUVOX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcC5jaGFubmVsICksCgogICAgCQkJc3BlY3VsYXJNYXBVdjogSEFTX1NQRUNVTEFSTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNwZWN1bGFyTWFwLmNoYW5uZWwgKSwKICAgIAkJCXNwZWN1bGFyQ29sb3JNYXBVdjogSEFTX1NQRUNVTEFSX0NPTE9STUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAuY2hhbm5lbCApLAogICAgCQkJc3BlY3VsYXJJbnRlbnNpdHlNYXBVdjogSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcC5jaGFubmVsICksCgogICAgCQkJdHJhbnNtaXNzaW9uTWFwVXY6IEhBU19UUkFOU01JU1NJT05NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLmNoYW5uZWwgKSwKICAgIAkJCXRoaWNrbmVzc01hcFV2OiBIQVNfVEhJQ0tORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnRoaWNrbmVzc01hcC5jaGFubmVsICksCgogICAgCQkJYWxwaGFNYXBVdjogSEFTX0FMUEhBTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmFscGhhTWFwLmNoYW5uZWwgKSwKCiAgICAJCQkvLwoKICAgIAkJCXZlcnRleFRhbmdlbnRzOiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgJiYgKCBIQVNfTk9STUFMTUFQIHx8IEhBU19BTklTT1RST1BZICksCiAgICAJCQl2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycywKICAgIAkJCXZlcnRleEFscGhhczogbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNCwKCiAgICAJCQlwb2ludHNVdnM6IG9iamVjdC5pc1BvaW50cyA9PT0gdHJ1ZSAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2ICYmICggSEFTX01BUCB8fCBIQVNfQUxQSEFNQVAgKSwKCiAgICAJCQlmb2c6ICEhIGZvZywKICAgIAkJCXVzZUZvZzogbWF0ZXJpYWwuZm9nID09PSB0cnVlLAogICAgCQkJZm9nRXhwMjogKCAhISBmb2cgJiYgZm9nLmlzRm9nRXhwMiApLAoKICAgIAkJCWZsYXRTaGFkaW5nOiAoIG1hdGVyaWFsLmZsYXRTaGFkaW5nID09PSB0cnVlICYmIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gZmFsc2UgKSwKCiAgICAJCQlzaXplQXR0ZW51YXRpb246IG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9PT0gdHJ1ZSwKICAgIAkJCWxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIsCiAgICAJCQlyZXZlcnNlRGVwdGhCdWZmZXI6IHJldmVyc2VEZXB0aEJ1ZmZlciwKCiAgICAJCQlza2lubmluZzogb2JqZWN0LmlzU2tpbm5lZE1lc2ggPT09IHRydWUsCgogICAgCQkJbW9ycGhUYXJnZXRzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCwKICAgIAkJCW1vcnBoTm9ybWFsczogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkLAogICAgCQkJbW9ycGhDb2xvcnM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkLAogICAgCQkJbW9ycGhUYXJnZXRzQ291bnQ6IG1vcnBoVGFyZ2V0c0NvdW50LAogICAgCQkJbW9ycGhUZXh0dXJlU3RyaWRlOiBtb3JwaFRleHR1cmVTdHJpZGUsCgogICAgCQkJbnVtRGlyTGlnaHRzOiBsaWdodHMuZGlyZWN0aW9uYWwubGVuZ3RoLAogICAgCQkJbnVtUG9pbnRMaWdodHM6IGxpZ2h0cy5wb2ludC5sZW5ndGgsCiAgICAJCQludW1TcG90TGlnaHRzOiBsaWdodHMuc3BvdC5sZW5ndGgsCiAgICAJCQludW1TcG90TGlnaHRNYXBzOiBsaWdodHMuc3BvdExpZ2h0TWFwLmxlbmd0aCwKICAgIAkJCW51bVJlY3RBcmVhTGlnaHRzOiBsaWdodHMucmVjdEFyZWEubGVuZ3RoLAogICAgCQkJbnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLAoKICAgIAkJCW51bURpckxpZ2h0U2hhZG93czogbGlnaHRzLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCwKICAgIAkJCW51bVBvaW50TGlnaHRTaGFkb3dzOiBsaWdodHMucG9pbnRTaGFkb3dNYXAubGVuZ3RoLAogICAgCQkJbnVtU3BvdExpZ2h0U2hhZG93czogbGlnaHRzLnNwb3RTaGFkb3dNYXAubGVuZ3RoLAogICAgCQkJbnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzOiBsaWdodHMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzLAoKICAgIAkJCW51bUxpZ2h0UHJvYmVzOiBsaWdodHMubnVtTGlnaHRQcm9iZXMsCgogICAgCQkJbnVtQ2xpcHBpbmdQbGFuZXM6IGNsaXBwaW5nLm51bVBsYW5lcywKICAgIAkJCW51bUNsaXBJbnRlcnNlY3Rpb246IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbiwKCiAgICAJCQlkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZywKCiAgICAJCQlzaGFkb3dNYXBFbmFibGVkOiByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCAmJiBzaGFkb3dzLmxlbmd0aCA+IDAsCiAgICAJCQlzaGFkb3dNYXBUeXBlOiByZW5kZXJlci5zaGFkb3dNYXAudHlwZSwKCiAgICAJCQl0b25lTWFwcGluZzogdG9uZU1hcHBpbmcsCgogICAgCQkJZGVjb2RlVmlkZW9UZXh0dXJlOiBIQVNfTUFQICYmICggbWF0ZXJpYWwubWFwLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgJiYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIG1hdGVyaWFsLm1hcC5jb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApLAogICAgCQkJZGVjb2RlVmlkZW9UZXh0dXJlRW1pc3NpdmU6IEhBU19FTUlTU0lWRU1BUCAmJiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgJiYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmNvbG9yU3BhY2UgKSA9PT0gU1JHQlRyYW5zZmVyICksCgogICAgCQkJcHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsCgogICAgCQkJZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsCiAgICAJCQlmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLAoKICAgIAkJCXVzZURlcHRoUGFja2luZzogbWF0ZXJpYWwuZGVwdGhQYWNraW5nID49IDAsCiAgICAJCQlkZXB0aFBhY2tpbmc6IG1hdGVyaWFsLmRlcHRoUGFja2luZyB8fCAwLAoKICAgIAkJCWluZGV4MEF0dHJpYnV0ZU5hbWU6IG1hdGVyaWFsLmluZGV4MEF0dHJpYnV0ZU5hbWUsCgogICAgCQkJZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZTogSEFTX0VYVEVOU0lPTlMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5jbGlwQ3VsbERpc3RhbmNlID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApLAogICAgCQkJZXh0ZW5zaW9uTXVsdGlEcmF3OiAoIEhBU19FWFRFTlNJT05TICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMubXVsdGlEcmF3ID09PSB0cnVlIHx8IElTX0JBVENIRURNRVNIICkgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApLAoKICAgIAkJCXJlbmRlcmVyRXh0ZW5zaW9uUGFyYWxsZWxTaGFkZXJDb21waWxlOiBleHRlbnNpb25zLmhhcyggJ0tIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZScgKSwKCiAgICAJCQljdXN0b21Qcm9ncmFtQ2FjaGVLZXk6IG1hdGVyaWFsLmN1c3RvbVByb2dyYW1DYWNoZUtleSgpCgogICAgCQl9OwoKICAgIAkJLy8gdGhlIHVzYWdlIG9mIGdldENoYW5uZWwoKSBkZXRlcm1pbmVzIHRoZSBhY3RpdmUgdGV4dHVyZSBjaGFubmVscyBmb3IgdGhpcyBzaGFkZXIKCiAgICAJCXBhcmFtZXRlcnMudmVydGV4VXYxcyA9IF9hY3RpdmVDaGFubmVscy5oYXMoIDEgKTsKICAgIAkJcGFyYW1ldGVycy52ZXJ0ZXhVdjJzID0gX2FjdGl2ZUNoYW5uZWxzLmhhcyggMiApOwogICAgCQlwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPSBfYWN0aXZlQ2hhbm5lbHMuaGFzKCAzICk7CgogICAgCQlfYWN0aXZlQ2hhbm5lbHMuY2xlYXIoKTsKCiAgICAJCXJldHVybiBwYXJhbWV0ZXJzOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldFByb2dyYW1DYWNoZUtleSggcGFyYW1ldGVycyApIHsKCiAgICAJCWNvbnN0IGFycmF5ID0gW107CgogICAgCQlpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgKSB7CgogICAgCQkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGFkZXJJRCApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVZlcnRleFNoYWRlcklEICk7CiAgICAJCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbUZyYWdtZW50U2hhZGVySUQgKTsKCiAgICAJCX0KCiAgICAJCWlmICggcGFyYW1ldGVycy5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJZm9yICggY29uc3QgbmFtZSBpbiBwYXJhbWV0ZXJzLmRlZmluZXMgKSB7CgogICAgCQkJCWFycmF5LnB1c2goIG5hbWUgKTsKICAgIAkJCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmRlZmluZXNbIG5hbWUgXSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsID09PSBmYWxzZSApIHsKCiAgICAJCQlnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApOwogICAgCQkJZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICk7CiAgICAJCQlhcnJheS5wdXNoKCByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlICk7CgogICAgCQl9CgogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVByb2dyYW1DYWNoZUtleSApOwoKICAgIAkJcmV0dXJuIGFycmF5LmpvaW4oKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApIHsKCiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMucHJlY2lzaW9uICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZSApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5lbnZNYXBDdWJlVVZIZWlnaHQgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5tYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmFscGhhTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5saWdodE1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW9NYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmJ1bXBNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5lbWlzc2l2ZU1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5yb3VnaG5lc3NNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmFuaXNvdHJvcHlNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcFV2ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwVXYgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy50aGlja25lc3NNYXBVdiApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmNvbWJpbmUgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5mb2dFeHAyICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2l6ZUF0dGVudWF0aW9uICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaEF0dHJpYnV0ZUNvdW50ICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRzICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodHMgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRzICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0TWFwcyApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUhlbWlMaWdodHMgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0U2hhZG93cyApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRTaGFkb3dzICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUxpZ2h0UHJvYmVzICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSApOwogICAgCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgKTsKICAgIAkJYXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICk7CiAgICAJCWFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICkgewoKICAgIAkJX3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpOwoKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5pbnN0YW5jaW5nICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMiApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMubWF0Y2FwICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNCApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCA2ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5ub3JtYWxNYXBUYW5nZW50U3BhY2UgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCA3ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5jbGVhcmNvYXQgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCA4ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5pcmlkZXNjZW5jZSApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDkgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmFscGhhVGVzdCApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEwICk7CiAgICAJCWlmICggcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMudmVydGV4QWxwaGFzICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLnZlcnRleFV2MXMgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMyApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMudmVydGV4VXYycyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE0ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy52ZXJ0ZXhVdjNzICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmFuaXNvdHJvcHkgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNyApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuYWxwaGFIYXNoICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmJhdGNoaW5nICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTkgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmRpc3BlcnNpb24gKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIxICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5ncmFkaWVudE1hcCApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIyICk7CgogICAgCQlhcnJheS5wdXNoKCBfcHJvZ3JhbUxheWVycy5tYXNrICk7CiAgICAJCV9wcm9ncmFtTGF5ZXJzLmRpc2FibGVBbGwoKTsKCiAgICAJCWlmICggcGFyYW1ldGVycy5mb2cgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7CiAgICAJCWlmICggcGFyYW1ldGVycy51c2VGb2cgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5mbGF0U2hhZGluZyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAzICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5yZXZlcnNlRGVwdGhCdWZmZXIgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5za2lubmluZyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDYgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEwICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5kb3VibGVTaWRlZCApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDExICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5mbGlwU2lkZWQgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMiApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMudXNlRGVwdGhQYWNraW5nICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTMgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLmRpdGhlcmluZyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE0ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy50cmFuc21pc3Npb24gKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuc2hlZW4gKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMub3BhcXVlICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTsKICAgIAkJaWYgKCBwYXJhbWV0ZXJzLnBvaW50c1V2cyApCiAgICAJCQlfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE4ICk7CiAgICAJCWlmICggcGFyYW1ldGVycy5kZWNvZGVWaWRlb1RleHR1cmUgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlRW1pc3NpdmUgKQogICAgCQkJX3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApOwogICAgCQlpZiAoIHBhcmFtZXRlcnMuYWxwaGFUb0NvdmVyYWdlICkKICAgIAkJCV9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjEgKTsKCiAgICAJCWFycmF5LnB1c2goIF9wcm9ncmFtTGF5ZXJzLm1hc2sgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRVbmlmb3JtcyggbWF0ZXJpYWwgKSB7CgogICAgCQljb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdOwogICAgCQlsZXQgdW5pZm9ybXM7CgogICAgCQlpZiAoIHNoYWRlcklEICkgewoKICAgIAkJCWNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTsKICAgIAkJCXVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7CgogICAgCQl9CgogICAgCQlyZXR1cm4gdW5pZm9ybXM7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gYWNxdWlyZVByb2dyYW0oIHBhcmFtZXRlcnMsIGNhY2hlS2V5ICkgewoKICAgIAkJbGV0IHByb2dyYW07CgogICAgCQkvLyBDaGVjayBpZiBjb2RlIGhhcyBiZWVuIGFscmVhZHkgY29tcGlsZWQKICAgIAkJZm9yICggbGV0IHAgPSAwLCBwbCA9IHByb2dyYW1zLmxlbmd0aDsgcCA8IHBsOyBwICsrICkgewoKICAgIAkJCWNvbnN0IHByZWV4aXN0aW5nUHJvZ3JhbSA9IHByb2dyYW1zWyBwIF07CgogICAgCQkJaWYgKCBwcmVleGlzdGluZ1Byb2dyYW0uY2FjaGVLZXkgPT09IGNhY2hlS2V5ICkgewoKICAgIAkJCQlwcm9ncmFtID0gcHJlZXhpc3RpbmdQcm9ncmFtOwogICAgCQkJCSsrIHByb2dyYW0udXNlZFRpbWVzOwoKICAgIAkJCQlicmVhazsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlwcm9ncmFtID0gbmV3IFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGNhY2hlS2V5LCBwYXJhbWV0ZXJzLCBiaW5kaW5nU3RhdGVzICk7CiAgICAJCQlwcm9ncmFtcy5wdXNoKCBwcm9ncmFtICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gcHJvZ3JhbTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZWxlYXNlUHJvZ3JhbSggcHJvZ3JhbSApIHsKCiAgICAJCWlmICggLS0gcHJvZ3JhbS51c2VkVGltZXMgPT09IDAgKSB7CgogICAgCQkJLy8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldAogICAgCQkJY29uc3QgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTsKICAgIAkJCXByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdOwogICAgCQkJcHJvZ3JhbXMucG9wKCk7CgogICAgCQkJLy8gRnJlZSBXZWJHTCByZXNvdXJjZXMKICAgIAkJCXByb2dyYW0uZGVzdHJveSgpOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlbGVhc2VTaGFkZXJDYWNoZSggbWF0ZXJpYWwgKSB7CgogICAgCQlfY3VzdG9tU2hhZGVycy5yZW1vdmUoIG1hdGVyaWFsICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZGlzcG9zZSgpIHsKCiAgICAJCV9jdXN0b21TaGFkZXJzLmRpc3Bvc2UoKTsKCiAgICAJfQoKICAgIAlyZXR1cm4gewogICAgCQlnZXRQYXJhbWV0ZXJzOiBnZXRQYXJhbWV0ZXJzLAogICAgCQlnZXRQcm9ncmFtQ2FjaGVLZXk6IGdldFByb2dyYW1DYWNoZUtleSwKICAgIAkJZ2V0VW5pZm9ybXM6IGdldFVuaWZvcm1zLAogICAgCQlhY3F1aXJlUHJvZ3JhbTogYWNxdWlyZVByb2dyYW0sCiAgICAJCXJlbGVhc2VQcm9ncmFtOiByZWxlYXNlUHJvZ3JhbSwKICAgIAkJcmVsZWFzZVNoYWRlckNhY2hlOiByZWxlYXNlU2hhZGVyQ2FjaGUsCiAgICAJCS8vIEV4cG9zZWQgZm9yIHJlc291cmNlIG1vbml0b3JpbmcgJiBlcnJvciBmZWVkYmFjayB2aWEgcmVuZGVyZXIuaW5mbzoKICAgIAkJcHJvZ3JhbXM6IHByb2dyYW1zLAogICAgCQlkaXNwb3NlOiBkaXNwb3NlCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xQcm9wZXJ0aWVzKCkgewoKICAgIAlsZXQgcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCWZ1bmN0aW9uIGhhcyggb2JqZWN0ICkgewoKICAgIAkJcmV0dXJuIHByb3BlcnRpZXMuaGFzKCBvYmplY3QgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXQoIG9iamVjdCApIHsKCiAgICAJCWxldCBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7CgogICAgCQlpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCW1hcCA9IHt9OwogICAgCQkJcHJvcGVydGllcy5zZXQoIG9iamVjdCwgbWFwICk7CgogICAgCQl9CgogICAgCQlyZXR1cm4gbWFwOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlbW92ZSggb2JqZWN0ICkgewoKICAgIAkJcHJvcGVydGllcy5kZWxldGUoIG9iamVjdCApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkgewoKICAgIAkJcHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRpc3Bvc2UoKSB7CgogICAgCQlwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTsKCiAgICAJfQoKICAgIAlyZXR1cm4gewogICAgCQloYXM6IGhhcywKICAgIAkJZ2V0OiBnZXQsCiAgICAJCXJlbW92ZTogcmVtb3ZlLAogICAgCQl1cGRhdGU6IHVwZGF0ZSwKICAgIAkJZGlzcG9zZTogZGlzcG9zZQogICAgCX07CgogICAgfQoKICAgIGZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkgewoKICAgIAlpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkgewoKICAgIAkJcmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjsKCiAgICAJfSBlbHNlIGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHsKCiAgICAJCXJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjsKCiAgICAJfSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHsKCiAgICAJCXJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDsKCiAgICAJfSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7CgogICAgCQlyZXR1cm4gYS56IC0gYi56OwoKICAgIAl9IGVsc2UgewoKICAgIAkJcmV0dXJuIGEuaWQgLSBiLmlkOwoKICAgIAl9CgogICAgfQoKICAgIGZ1bmN0aW9uIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSggYSwgYiApIHsKCiAgICAJaWYgKCBhLmdyb3VwT3JkZXIgIT09IGIuZ3JvdXBPcmRlciApIHsKCiAgICAJCXJldHVybiBhLmdyb3VwT3JkZXIgLSBiLmdyb3VwT3JkZXI7CgogICAgCX0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7CgogICAgCQlyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7CgogICAgCX0gZWxzZSBpZiAoIGEueiAhPT0gYi56ICkgewoKICAgIAkJcmV0dXJuIGIueiAtIGEuejsKCiAgICAJfSBlbHNlIHsKCiAgICAJCXJldHVybiBhLmlkIC0gYi5pZDsKCiAgICAJfQoKICAgIH0KCgogICAgZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkgewoKICAgIAljb25zdCByZW5kZXJJdGVtcyA9IFtdOwogICAgCWxldCByZW5kZXJJdGVtc0luZGV4ID0gMDsKCiAgICAJY29uc3Qgb3BhcXVlID0gW107CiAgICAJY29uc3QgdHJhbnNtaXNzaXZlID0gW107CiAgICAJY29uc3QgdHJhbnNwYXJlbnQgPSBbXTsKCiAgICAJZnVuY3Rpb24gaW5pdCgpIHsKCiAgICAJCXJlbmRlckl0ZW1zSW5kZXggPSAwOwoKICAgIAkJb3BhcXVlLmxlbmd0aCA9IDA7CiAgICAJCXRyYW5zbWlzc2l2ZS5sZW5ndGggPSAwOwogICAgCQl0cmFuc3BhcmVudC5sZW5ndGggPSAwOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7CgogICAgCQlsZXQgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF07CgogICAgCQlpZiAoIHJlbmRlckl0ZW0gPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlyZW5kZXJJdGVtID0gewogICAgCQkJCWlkOiBvYmplY3QuaWQsCiAgICAJCQkJb2JqZWN0OiBvYmplY3QsCiAgICAJCQkJZ2VvbWV0cnk6IGdlb21ldHJ5LAogICAgCQkJCW1hdGVyaWFsOiBtYXRlcmlhbCwKICAgIAkJCQlncm91cE9yZGVyOiBncm91cE9yZGVyLAogICAgCQkJCXJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsCiAgICAJCQkJejogeiwKICAgIAkJCQlncm91cDogZ3JvdXAKICAgIAkJCX07CgogICAgCQkJcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXJlbmRlckl0ZW0uaWQgPSBvYmplY3QuaWQ7CiAgICAJCQlyZW5kZXJJdGVtLm9iamVjdCA9IG9iamVjdDsKICAgIAkJCXJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBnZW9tZXRyeTsKICAgIAkJCXJlbmRlckl0ZW0ubWF0ZXJpYWwgPSBtYXRlcmlhbDsKICAgIAkJCXJlbmRlckl0ZW0uZ3JvdXBPcmRlciA9IGdyb3VwT3JkZXI7CiAgICAJCQlyZW5kZXJJdGVtLnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyOwogICAgCQkJcmVuZGVySXRlbS56ID0gejsKICAgIAkJCXJlbmRlckl0ZW0uZ3JvdXAgPSBncm91cDsKCiAgICAJCX0KCiAgICAJCXJlbmRlckl0ZW1zSW5kZXggKys7CgogICAgCQlyZXR1cm4gcmVuZGVySXRlbTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBwdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7CgogICAgCQljb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApOwoKICAgIAkJaWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7CgogICAgCQkJdHJhbnNtaXNzaXZlLnB1c2goIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkgewoKICAgIAkJCXRyYW5zcGFyZW50LnB1c2goIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJb3BhcXVlLnB1c2goIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7CgogICAgCQljb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApOwoKICAgIAkJaWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7CgogICAgCQkJdHJhbnNtaXNzaXZlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkgewoKICAgIAkJCXRyYW5zcGFyZW50LnVuc2hpZnQoIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJb3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBzb3J0KCBjdXN0b21PcGFxdWVTb3J0LCBjdXN0b21UcmFuc3BhcmVudFNvcnQgKSB7CgogICAgCQlpZiAoIG9wYXF1ZS5sZW5ndGggPiAxICkgb3BhcXVlLnNvcnQoIGN1c3RvbU9wYXF1ZVNvcnQgfHwgcGFpbnRlclNvcnRTdGFibGUgKTsKICAgIAkJaWYgKCB0cmFuc21pc3NpdmUubGVuZ3RoID4gMSApIHRyYW5zbWlzc2l2ZS5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7CiAgICAJCWlmICggdHJhbnNwYXJlbnQubGVuZ3RoID4gMSApIHRyYW5zcGFyZW50LnNvcnQoIGN1c3RvbVRyYW5zcGFyZW50U29ydCB8fCByZXZlcnNlUGFpbnRlclNvcnRTdGFibGUgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBmaW5pc2goKSB7CgogICAgCQkvLyBDbGVhciByZWZlcmVuY2VzIGZyb20gaW5hY3RpdmUgcmVuZGVySXRlbXMgaW4gdGhlIGxpc3QKCiAgICAJCWZvciAoIGxldCBpID0gcmVuZGVySXRlbXNJbmRleCwgaWwgPSByZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQljb25zdCByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIGkgXTsKCiAgICAJCQlpZiAoIHJlbmRlckl0ZW0uaWQgPT09IG51bGwgKSBicmVhazsKCiAgICAJCQlyZW5kZXJJdGVtLmlkID0gbnVsbDsKICAgIAkJCXJlbmRlckl0ZW0ub2JqZWN0ID0gbnVsbDsKICAgIAkJCXJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBudWxsOwogICAgCQkJcmVuZGVySXRlbS5tYXRlcmlhbCA9IG51bGw7CiAgICAJCQlyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlyZXR1cm4gewoKICAgIAkJb3BhcXVlOiBvcGFxdWUsCiAgICAJCXRyYW5zbWlzc2l2ZTogdHJhbnNtaXNzaXZlLAogICAgCQl0cmFuc3BhcmVudDogdHJhbnNwYXJlbnQsCgogICAgCQlpbml0OiBpbml0LAogICAgCQlwdXNoOiBwdXNoLAogICAgCQl1bnNoaWZ0OiB1bnNoaWZ0LAogICAgCQlmaW5pc2g6IGZpbmlzaCwKCiAgICAJCXNvcnQ6IHNvcnQKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkgewoKICAgIAlsZXQgbGlzdHMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAlmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggKSB7CgogICAgCQljb25zdCBsaXN0QXJyYXkgPSBsaXN0cy5nZXQoIHNjZW5lICk7CiAgICAJCWxldCBsaXN0OwoKICAgIAkJaWYgKCBsaXN0QXJyYXkgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpOwogICAgCQkJbGlzdHMuc2V0KCBzY2VuZSwgWyBsaXN0IF0gKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCByZW5kZXJDYWxsRGVwdGggPj0gbGlzdEFycmF5Lmxlbmd0aCApIHsKCiAgICAJCQkJbGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTsKICAgIAkJCQlsaXN0QXJyYXkucHVzaCggbGlzdCApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWxpc3QgPSBsaXN0QXJyYXlbIHJlbmRlckNhbGxEZXB0aCBdOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiBsaXN0OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRpc3Bvc2UoKSB7CgogICAgCQlsaXN0cyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKICAgIAkJZ2V0OiBnZXQsCiAgICAJCWRpc3Bvc2U6IGRpc3Bvc2UKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBVbmlmb3Jtc0NhY2hlKCkgewoKICAgIAljb25zdCBsaWdodHMgPSB7fTsKCiAgICAJcmV0dXJuIHsKCiAgICAJCWdldDogZnVuY3Rpb24gKCBsaWdodCApIHsKCiAgICAJCQlpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlyZXR1cm4gbGlnaHRzWyBsaWdodC5pZCBdOwoKICAgIAkJCX0KCiAgICAJCQlsZXQgdW5pZm9ybXM7CgogICAgCQkJc3dpdGNoICggbGlnaHQudHlwZSApIHsKCiAgICAJCQkJY2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6CiAgICAJCQkJCXVuaWZvcm1zID0gewogICAgCQkJCQkJZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLAogICAgCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpCiAgICAJCQkJCX07CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlICdTcG90TGlnaHQnOgogICAgCQkJCQl1bmlmb3JtcyA9IHsKICAgIAkJCQkJCXBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLAogICAgCQkJCQkJZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLAogICAgCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpLAogICAgCQkJCQkJZGlzdGFuY2U6IDAsCiAgICAJCQkJCQljb25lQ29zOiAwLAogICAgCQkJCQkJcGVudW1icmFDb3M6IDAsCiAgICAJCQkJCQlkZWNheTogMAogICAgCQkJCQl9OwogICAgCQkJCQlicmVhazsKCiAgICAJCQkJY2FzZSAnUG9pbnRMaWdodCc6CiAgICAJCQkJCXVuaWZvcm1zID0gewogICAgCQkJCQkJcG9zaXRpb246IG5ldyBWZWN0b3IzKCksCiAgICAJCQkJCQljb2xvcjogbmV3IENvbG9yKCksCiAgICAJCQkJCQlkaXN0YW5jZTogMCwKICAgIAkJCQkJCWRlY2F5OiAwCiAgICAJCQkJCX07CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlICdIZW1pc3BoZXJlTGlnaHQnOgogICAgCQkJCQl1bmlmb3JtcyA9IHsKICAgIAkJCQkJCWRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSwKICAgIAkJCQkJCXNreUNvbG9yOiBuZXcgQ29sb3IoKSwKICAgIAkJCQkJCWdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKQogICAgCQkJCQl9OwogICAgCQkJCQlicmVhazsKCiAgICAJCQkJY2FzZSAnUmVjdEFyZWFMaWdodCc6CiAgICAJCQkJCXVuaWZvcm1zID0gewogICAgCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpLAogICAgCQkJCQkJcG9zaXRpb246IG5ldyBWZWN0b3IzKCksCiAgICAJCQkJCQloYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksCiAgICAJCQkJCQloYWxmSGVpZ2h0OiBuZXcgVmVjdG9yMygpCiAgICAJCQkJCX07CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCX0KCiAgICAJCQlsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtczsKCiAgICAJCQlyZXR1cm4gdW5pZm9ybXM7CgogICAgCQl9CgogICAgCX07CgogICAgfQoKICAgIGZ1bmN0aW9uIFNoYWRvd1VuaWZvcm1zQ2FjaGUoKSB7CgogICAgCWNvbnN0IGxpZ2h0cyA9IHt9OwoKICAgIAlyZXR1cm4gewoKICAgIAkJZ2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkgewoKICAgIAkJCWlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCXJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07CgogICAgCQkJfQoKICAgIAkJCWxldCB1bmlmb3JtczsKCiAgICAJCQlzd2l0Y2ggKCBsaWdodC50eXBlICkgewoKICAgIAkJCQljYXNlICdEaXJlY3Rpb25hbExpZ2h0JzoKICAgIAkJCQkJdW5pZm9ybXMgPSB7CiAgICAJCQkJCQlzaGFkb3dJbnRlbnNpdHk6IDEsCiAgICAJCQkJCQlzaGFkb3dCaWFzOiAwLAogICAgCQkJCQkJc2hhZG93Tm9ybWFsQmlhczogMCwKICAgIAkJCQkJCXNoYWRvd1JhZGl1czogMSwKICAgIAkJCQkJCXNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCkKICAgIAkJCQkJfTsKICAgIAkJCQkJYnJlYWs7CgogICAgCQkJCWNhc2UgJ1Nwb3RMaWdodCc6CiAgICAJCQkJCXVuaWZvcm1zID0gewogICAgCQkJCQkJc2hhZG93SW50ZW5zaXR5OiAxLAogICAgCQkJCQkJc2hhZG93QmlhczogMCwKICAgIAkJCQkJCXNoYWRvd05vcm1hbEJpYXM6IDAsCiAgICAJCQkJCQlzaGFkb3dSYWRpdXM6IDEsCiAgICAJCQkJCQlzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpCiAgICAJCQkJCX07CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQljYXNlICdQb2ludExpZ2h0JzoKICAgIAkJCQkJdW5pZm9ybXMgPSB7CiAgICAJCQkJCQlzaGFkb3dJbnRlbnNpdHk6IDEsCiAgICAJCQkJCQlzaGFkb3dCaWFzOiAwLAogICAgCQkJCQkJc2hhZG93Tm9ybWFsQmlhczogMCwKICAgIAkJCQkJCXNoYWRvd1JhZGl1czogMSwKICAgIAkJCQkJCXNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCksCiAgICAJCQkJCQlzaGFkb3dDYW1lcmFOZWFyOiAxLAogICAgCQkJCQkJc2hhZG93Q2FtZXJhRmFyOiAxMDAwCiAgICAJCQkJCX07CiAgICAJCQkJCWJyZWFrOwoKICAgIAkJCQkvLyBUT0RPIChhYmVsbmF0aW9uKTogc2V0IFJlY3RBcmVhTGlnaHQgc2hhZG93IHVuaWZvcm1zCgogICAgCQkJfQoKICAgIAkJCWxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zOwoKICAgIAkJCXJldHVybiB1bmlmb3JtczsKCiAgICAJCX0KCiAgICAJfTsKCiAgICB9CgoKCiAgICBsZXQgbmV4dFZlcnNpb24gPSAwOwoKICAgIGZ1bmN0aW9uIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCggbGlnaHRBLCBsaWdodEIgKSB7CgogICAgCXJldHVybiAoIGxpZ2h0Qi5jYXN0U2hhZG93ID8gMiA6IDAgKSAtICggbGlnaHRBLmNhc3RTaGFkb3cgPyAyIDogMCApICsgKCBsaWdodEIubWFwID8gMSA6IDAgKSAtICggbGlnaHRBLm1hcCA/IDEgOiAwICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMTGlnaHRzKCBleHRlbnNpb25zICkgewoKICAgIAljb25zdCBjYWNoZSA9IG5ldyBVbmlmb3Jtc0NhY2hlKCk7CgogICAgCWNvbnN0IHNoYWRvd0NhY2hlID0gU2hhZG93VW5pZm9ybXNDYWNoZSgpOwoKICAgIAljb25zdCBzdGF0ZSA9IHsKCiAgICAJCXZlcnNpb246IDAsCgogICAgCQloYXNoOiB7CiAgICAJCQlkaXJlY3Rpb25hbExlbmd0aDogLTEsCiAgICAJCQlwb2ludExlbmd0aDogLTEsCiAgICAJCQlzcG90TGVuZ3RoOiAtMSwKICAgIAkJCXJlY3RBcmVhTGVuZ3RoOiAtMSwKICAgIAkJCWhlbWlMZW5ndGg6IC0xLAoKICAgIAkJCW51bURpcmVjdGlvbmFsU2hhZG93czogLTEsCiAgICAJCQludW1Qb2ludFNoYWRvd3M6IC0xLAogICAgCQkJbnVtU3BvdFNoYWRvd3M6IC0xLAogICAgCQkJbnVtU3BvdE1hcHM6IC0xLAoKICAgIAkJCW51bUxpZ2h0UHJvYmVzOiAtMQogICAgCQl9LAoKICAgIAkJYW1iaWVudDogWyAwLCAwLCAwIF0sCiAgICAJCXByb2JlOiBbXSwKICAgIAkJZGlyZWN0aW9uYWw6IFtdLAogICAgCQlkaXJlY3Rpb25hbFNoYWRvdzogW10sCiAgICAJCWRpcmVjdGlvbmFsU2hhZG93TWFwOiBbXSwKICAgIAkJZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IFtdLAogICAgCQlzcG90OiBbXSwKICAgIAkJc3BvdExpZ2h0TWFwOiBbXSwKICAgIAkJc3BvdFNoYWRvdzogW10sCiAgICAJCXNwb3RTaGFkb3dNYXA6IFtdLAogICAgCQlzcG90TGlnaHRNYXRyaXg6IFtdLAogICAgCQlyZWN0QXJlYTogW10sCiAgICAJCXJlY3RBcmVhTFRDMTogbnVsbCwKICAgIAkJcmVjdEFyZWFMVEMyOiBudWxsLAogICAgCQlwb2ludDogW10sCiAgICAJCXBvaW50U2hhZG93OiBbXSwKICAgIAkJcG9pbnRTaGFkb3dNYXA6IFtdLAogICAgCQlwb2ludFNoYWRvd01hdHJpeDogW10sCiAgICAJCWhlbWk6IFtdLAogICAgCQludW1TcG90TGlnaHRTaGFkb3dzV2l0aE1hcHM6IDAsCiAgICAJCW51bUxpZ2h0UHJvYmVzOiAwCgogICAgCX07CgogICAgCWZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZS5wdXNoKCBuZXcgVmVjdG9yMygpICk7CgogICAgCWNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpOwogICAgCWNvbnN0IG1hdHJpeDQgPSBuZXcgTWF0cml4NCgpOwogICAgCWNvbnN0IG1hdHJpeDQyID0gbmV3IE1hdHJpeDQoKTsKCiAgICAJZnVuY3Rpb24gc2V0dXAoIGxpZ2h0cyApIHsKCiAgICAJCWxldCByID0gMCwgZyA9IDAsIGIgPSAwOwoKICAgIAkJZm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHN0YXRlLnByb2JlWyBpIF0uc2V0KCAwLCAwLCAwICk7CgogICAgCQlsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwOwogICAgCQlsZXQgcG9pbnRMZW5ndGggPSAwOwogICAgCQlsZXQgc3BvdExlbmd0aCA9IDA7CiAgICAJCWxldCByZWN0QXJlYUxlbmd0aCA9IDA7CiAgICAJCWxldCBoZW1pTGVuZ3RoID0gMDsKCiAgICAJCWxldCBudW1EaXJlY3Rpb25hbFNoYWRvd3MgPSAwOwogICAgCQlsZXQgbnVtUG9pbnRTaGFkb3dzID0gMDsKICAgIAkJbGV0IG51bVNwb3RTaGFkb3dzID0gMDsKICAgIAkJbGV0IG51bVNwb3RNYXBzID0gMDsKICAgIAkJbGV0IG51bVNwb3RTaGFkb3dzV2l0aE1hcHMgPSAwOwoKICAgIAkJbGV0IG51bUxpZ2h0UHJvYmVzID0gMDsKCiAgICAJCS8vIG9yZGVyaW5nIDogW3NoYWRvdyBjYXN0aW5nICsgbWFwIHRleHR1cmluZywgbWFwIHRleHR1cmluZywgc2hhZG93IGNhc3RpbmcsIG5vbmUgXQogICAgCQlsaWdodHMuc29ydCggc2hhZG93Q2FzdGluZ0FuZFRleHR1cmluZ0xpZ2h0c0ZpcnN0ICk7CgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQljb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdOwoKICAgIAkJCWNvbnN0IGNvbG9yID0gbGlnaHQuY29sb3I7CiAgICAJCQljb25zdCBpbnRlbnNpdHkgPSBsaWdodC5pbnRlbnNpdHk7CiAgICAJCQljb25zdCBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlOwoKICAgIAkJCWNvbnN0IHNoYWRvd01hcCA9ICggbGlnaHQuc2hhZG93ICYmIGxpZ2h0LnNoYWRvdy5tYXAgKSA/IGxpZ2h0LnNoYWRvdy5tYXAudGV4dHVyZSA6IG51bGw7CgogICAgCQkJaWYgKCBsaWdodC5pc0FtYmllbnRMaWdodCApIHsKCiAgICAJCQkJciArPSBjb2xvci5yICogaW50ZW5zaXR5OwogICAgCQkJCWcgKz0gY29sb3IuZyAqIGludGVuc2l0eTsKICAgIAkJCQliICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7CgogICAgCQkJfSBlbHNlIGlmICggbGlnaHQuaXNMaWdodFByb2JlICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaiA9IDA7IGogPCA5OyBqICsrICkgewoKICAgIAkJCQkJc3RhdGUucHJvYmVbIGogXS5hZGRTY2FsZWRWZWN0b3IoIGxpZ2h0LnNoLmNvZWZmaWNpZW50c1sgaiBdLCBpbnRlbnNpdHkgKTsKCiAgICAJCQkJfQoKICAgIAkJCQludW1MaWdodFByb2JlcyArKzsKCiAgICAJCQl9IGVsc2UgaWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7CgogICAgCQkJCWNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApOwoKICAgIAkJCQl1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTsKCiAgICAJCQkJaWYgKCBsaWdodC5jYXN0U2hhZG93ICkgewoKICAgIAkJCQkJY29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93OwoKICAgIAkJCQkJY29uc3Qgc2hhZG93VW5pZm9ybXMgPSBzaGFkb3dDYWNoZS5nZXQoIGxpZ2h0ICk7CgogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dJbnRlbnNpdHkgPSBzaGFkb3cuaW50ZW5zaXR5OwogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7CiAgICAJCQkJCXNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhczsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1czsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplOwoKICAgIAkJCQkJc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3JtczsKICAgIAkJCQkJc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7CiAgICAJCQkJCXN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDsKCiAgICAJCQkJCW51bURpcmVjdGlvbmFsU2hhZG93cyArKzsKCiAgICAJCQkJfQoKICAgIAkJCQlzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zOwoKICAgIAkJCQlkaXJlY3Rpb25hbExlbmd0aCArKzsKCiAgICAJCQl9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7CgogICAgCQkJCXVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTsKCiAgICAJCQkJdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7CiAgICAJCQkJdW5pZm9ybXMuZGlzdGFuY2UgPSBkaXN0YW5jZTsKCiAgICAJCQkJdW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApOwogICAgCQkJCXVuaWZvcm1zLnBlbnVtYnJhQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICogKCAxIC0gbGlnaHQucGVudW1icmEgKSApOwogICAgCQkJCXVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7CgogICAgCQkJCXN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXSA9IHVuaWZvcm1zOwoKICAgIAkJCQljb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7CgogICAgCQkJCWlmICggbGlnaHQubWFwICkgewoKICAgIAkJCQkJc3RhdGUuc3BvdExpZ2h0TWFwWyBudW1TcG90TWFwcyBdID0gbGlnaHQubWFwOwogICAgCQkJCQludW1TcG90TWFwcyArKzsKCiAgICAJCQkJCS8vIG1ha2Ugc3VyZSB0aGUgbGlnaHRNYXRyaXggaXMgdXAgdG8gZGF0ZQogICAgCQkJCQkvLyBUT0RPIDogZG8gaXQgaWYgcmVxdWlyZWQgb25seQogICAgCQkJCQlzaGFkb3cudXBkYXRlTWF0cmljZXMoIGxpZ2h0ICk7CgogICAgCQkJCQlpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSBudW1TcG90U2hhZG93c1dpdGhNYXBzICsrOwoKICAgIAkJCQl9CgogICAgCQkJCXN0YXRlLnNwb3RMaWdodE1hdHJpeFsgc3BvdExlbmd0aCBdID0gc2hhZG93Lm1hdHJpeDsKCiAgICAJCQkJaWYgKCBsaWdodC5jYXN0U2hhZG93ICkgewoKICAgIAkJCQkJY29uc3Qgc2hhZG93VW5pZm9ybXMgPSBzaGFkb3dDYWNoZS5nZXQoIGxpZ2h0ICk7CgogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dJbnRlbnNpdHkgPSBzaGFkb3cuaW50ZW5zaXR5OwogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7CiAgICAJCQkJCXNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhczsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1czsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplOwoKICAgIAkJCQkJc3RhdGUuc3BvdFNoYWRvd1sgc3BvdExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7CiAgICAJCQkJCXN0YXRlLnNwb3RTaGFkb3dNYXBbIHNwb3RMZW5ndGggXSA9IHNoYWRvd01hcDsKCiAgICAJCQkJCW51bVNwb3RTaGFkb3dzICsrOwoKICAgIAkJCQl9CgogICAgCQkJCXNwb3RMZW5ndGggKys7CgogICAgCQkJfSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkgewoKICAgIAkJCQljb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTsKCiAgICAJCQkJdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7CgogICAgCQkJCXVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApOwogICAgCQkJCXVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7CgogICAgCQkJCXN0YXRlLnJlY3RBcmVhWyByZWN0QXJlYUxlbmd0aCBdID0gdW5pZm9ybXM7CgogICAgCQkJCXJlY3RBcmVhTGVuZ3RoICsrOwoKICAgIAkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7CgogICAgCQkJCXVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApOwogICAgCQkJCXVuaWZvcm1zLmRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7CiAgICAJCQkJdW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTsKCiAgICAJCQkJaWYgKCBsaWdodC5jYXN0U2hhZG93ICkgewoKICAgIAkJCQkJY29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93OwoKICAgIAkJCQkJY29uc3Qgc2hhZG93VW5pZm9ybXMgPSBzaGFkb3dDYWNoZS5nZXQoIGxpZ2h0ICk7CgogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dJbnRlbnNpdHkgPSBzaGFkb3cuaW50ZW5zaXR5OwogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7CiAgICAJCQkJCXNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhczsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1czsKICAgIAkJCQkJc2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplOwogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dDYW1lcmFOZWFyID0gc2hhZG93LmNhbWVyYS5uZWFyOwogICAgCQkJCQlzaGFkb3dVbmlmb3Jtcy5zaGFkb3dDYW1lcmFGYXIgPSBzaGFkb3cuY2FtZXJhLmZhcjsKCiAgICAJCQkJCXN0YXRlLnBvaW50U2hhZG93WyBwb2ludExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7CiAgICAJCQkJCXN0YXRlLnBvaW50U2hhZG93TWFwWyBwb2ludExlbmd0aCBdID0gc2hhZG93TWFwOwogICAgCQkJCQlzdGF0ZS5wb2ludFNoYWRvd01hdHJpeFsgcG9pbnRMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7CgogICAgCQkJCQludW1Qb2ludFNoYWRvd3MgKys7CgogICAgCQkJCX0KCiAgICAJCQkJc3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtczsKCiAgICAJCQkJcG9pbnRMZW5ndGggKys7CgogICAgCQkJfSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7CgogICAgCQkJCWNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApOwoKICAgIAkJCQl1bmlmb3Jtcy5za3lDb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTsKICAgIAkJCQl1bmlmb3Jtcy5ncm91bmRDb2xvci5jb3B5KCBsaWdodC5ncm91bmRDb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTsKCiAgICAJCQkJc3RhdGUuaGVtaVsgaGVtaUxlbmd0aCBdID0gdW5pZm9ybXM7CgogICAgCQkJCWhlbWlMZW5ndGggKys7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCByZWN0QXJlYUxlbmd0aCA+IDAgKSB7CgogICAgCQkJaWYgKCBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJc3RhdGUucmVjdEFyZWFMVEMxID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzE7CiAgICAJCQkJc3RhdGUucmVjdEFyZWFMVEMyID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzI7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJc3RhdGUucmVjdEFyZWFMVEMxID0gVW5pZm9ybXNMaWIuTFRDX0hBTEZfMTsKICAgIAkJCQlzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8yOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXN0YXRlLmFtYmllbnRbIDAgXSA9IHI7CiAgICAJCXN0YXRlLmFtYmllbnRbIDEgXSA9IGc7CiAgICAJCXN0YXRlLmFtYmllbnRbIDIgXSA9IGI7CgogICAgCQljb25zdCBoYXNoID0gc3RhdGUuaGFzaDsKCiAgICAJCWlmICggaGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gZGlyZWN0aW9uYWxMZW5ndGggfHwKICAgIAkJCWhhc2gucG9pbnRMZW5ndGggIT09IHBvaW50TGVuZ3RoIHx8CiAgICAJCQloYXNoLnNwb3RMZW5ndGggIT09IHNwb3RMZW5ndGggfHwKICAgIAkJCWhhc2gucmVjdEFyZWFMZW5ndGggIT09IHJlY3RBcmVhTGVuZ3RoIHx8CiAgICAJCQloYXNoLmhlbWlMZW5ndGggIT09IGhlbWlMZW5ndGggfHwKICAgIAkJCWhhc2gubnVtRGlyZWN0aW9uYWxTaGFkb3dzICE9PSBudW1EaXJlY3Rpb25hbFNoYWRvd3MgfHwKICAgIAkJCWhhc2gubnVtUG9pbnRTaGFkb3dzICE9PSBudW1Qb2ludFNoYWRvd3MgfHwKICAgIAkJCWhhc2gubnVtU3BvdFNoYWRvd3MgIT09IG51bVNwb3RTaGFkb3dzIHx8CiAgICAJCQloYXNoLm51bVNwb3RNYXBzICE9PSBudW1TcG90TWFwcyB8fAogICAgCQkJaGFzaC5udW1MaWdodFByb2JlcyAhPT0gbnVtTGlnaHRQcm9iZXMgKSB7CgogICAgCQkJc3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7CiAgICAJCQlzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7CiAgICAJCQlzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDsKICAgIAkJCXN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoOwogICAgCQkJc3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoOwoKICAgIAkJCXN0YXRlLmRpcmVjdGlvbmFsU2hhZG93Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93czsKICAgIAkJCXN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93czsKICAgIAkJCXN0YXRlLnBvaW50U2hhZG93Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93czsKICAgIAkJCXN0YXRlLnBvaW50U2hhZG93TWFwLmxlbmd0aCA9IG51bVBvaW50U2hhZG93czsKICAgIAkJCXN0YXRlLnNwb3RTaGFkb3cubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7CiAgICAJCQlzdGF0ZS5zcG90U2hhZG93TWFwLmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzOwogICAgCQkJc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzOwogICAgCQkJc3RhdGUucG9pbnRTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtUG9pbnRTaGFkb3dzOwogICAgCQkJc3RhdGUuc3BvdExpZ2h0TWF0cml4Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzICsgbnVtU3BvdE1hcHMgLSBudW1TcG90U2hhZG93c1dpdGhNYXBzOwogICAgCQkJc3RhdGUuc3BvdExpZ2h0TWFwLmxlbmd0aCA9IG51bVNwb3RNYXBzOwogICAgCQkJc3RhdGUubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzID0gbnVtU3BvdFNoYWRvd3NXaXRoTWFwczsKICAgIAkJCXN0YXRlLm51bUxpZ2h0UHJvYmVzID0gbnVtTGlnaHRQcm9iZXM7CgogICAgCQkJaGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoOwogICAgCQkJaGFzaC5wb2ludExlbmd0aCA9IHBvaW50TGVuZ3RoOwogICAgCQkJaGFzaC5zcG90TGVuZ3RoID0gc3BvdExlbmd0aDsKICAgIAkJCWhhc2gucmVjdEFyZWFMZW5ndGggPSByZWN0QXJlYUxlbmd0aDsKICAgIAkJCWhhc2guaGVtaUxlbmd0aCA9IGhlbWlMZW5ndGg7CgogICAgCQkJaGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7CiAgICAJCQloYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93czsKICAgIAkJCWhhc2gubnVtU3BvdFNoYWRvd3MgPSBudW1TcG90U2hhZG93czsKICAgIAkJCWhhc2gubnVtU3BvdE1hcHMgPSBudW1TcG90TWFwczsKCiAgICAJCQloYXNoLm51bUxpZ2h0UHJvYmVzID0gbnVtTGlnaHRQcm9iZXM7CgogICAgCQkJc3RhdGUudmVyc2lvbiA9IG5leHRWZXJzaW9uICsrOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHNldHVwVmlldyggbGlnaHRzLCBjYW1lcmEgKSB7CgogICAgCQlsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwOwogICAgCQlsZXQgcG9pbnRMZW5ndGggPSAwOwogICAgCQlsZXQgc3BvdExlbmd0aCA9IDA7CiAgICAJCWxldCByZWN0QXJlYUxlbmd0aCA9IDA7CiAgICAJCWxldCBoZW1pTGVuZ3RoID0gMDsKCiAgICAJCWNvbnN0IHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTsKCiAgICAJCQlpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXTsKCiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTsKICAgIAkJCQl2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApOwogICAgCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTsKCiAgICAJCQkJZGlyZWN0aW9uYWxMZW5ndGggKys7CgogICAgCQkJfSBlbHNlIGlmICggbGlnaHQuaXNTcG90TGlnaHQgKSB7CgogICAgCQkJCWNvbnN0IHVuaWZvcm1zID0gc3RhdGUuc3BvdFsgc3BvdExlbmd0aCBdOwoKICAgIAkJCQl1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQkJdW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7CgogICAgCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQkJdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApOwogICAgCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTsKICAgIAkJCQl1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7CgogICAgCQkJCXNwb3RMZW5ndGggKys7CgogICAgCQkJfSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkgewoKICAgIAkJCQljb25zdCB1bmlmb3JtcyA9IHN0YXRlLnJlY3RBcmVhWyByZWN0QXJlYUxlbmd0aCBdOwoKICAgIAkJCQl1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQkJdW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7CgogICAgCQkJCS8vIGV4dHJhY3QgbG9jYWwgcm90YXRpb24gb2YgbGlnaHQgdG8gZGVyaXZlIHdpZHRoL2hlaWdodCBoYWxmIHZlY3RvcnMKICAgIAkJCQltYXRyaXg0Mi5pZGVudGl0eSgpOwogICAgCQkJCW1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTsKICAgIAkJCQltYXRyaXg0LnByZW11bHRpcGx5KCB2aWV3TWF0cml4ICk7CiAgICAJCQkJbWF0cml4NDIuZXh0cmFjdFJvdGF0aW9uKCBtYXRyaXg0ICk7CgogICAgCQkJCXVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApOwogICAgCQkJCXVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7CgogICAgCQkJCXVuaWZvcm1zLmhhbGZXaWR0aC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7CiAgICAJCQkJdW5pZm9ybXMuaGFsZkhlaWdodC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7CgogICAgCQkJCXJlY3RBcmVhTGVuZ3RoICsrOwoKICAgIAkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5wb2ludFsgcG9pbnRMZW5ndGggXTsKCiAgICAJCQkJdW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwogICAgCQkJCXVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApOwoKICAgIAkJCQlwb2ludExlbmd0aCArKzsKCiAgICAJCQl9IGVsc2UgaWYgKCBsaWdodC5pc0hlbWlzcGhlcmVMaWdodCApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF07CgogICAgCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApOwoKICAgIAkJCQloZW1pTGVuZ3RoICsrOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAlyZXR1cm4gewogICAgCQlzZXR1cDogc2V0dXAsCiAgICAJCXNldHVwVmlldzogc2V0dXBWaWV3LAogICAgCQlzdGF0ZTogc3RhdGUKICAgIAl9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCBleHRlbnNpb25zICkgewoKICAgIAljb25zdCBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoIGV4dGVuc2lvbnMgKTsKCiAgICAJY29uc3QgbGlnaHRzQXJyYXkgPSBbXTsKICAgIAljb25zdCBzaGFkb3dzQXJyYXkgPSBbXTsKCiAgICAJZnVuY3Rpb24gaW5pdCggY2FtZXJhICkgewoKICAgIAkJc3RhdGUuY2FtZXJhID0gY2FtZXJhOwoKICAgIAkJbGlnaHRzQXJyYXkubGVuZ3RoID0gMDsKICAgIAkJc2hhZG93c0FycmF5Lmxlbmd0aCA9IDA7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcHVzaExpZ2h0KCBsaWdodCApIHsKCiAgICAJCWxpZ2h0c0FycmF5LnB1c2goIGxpZ2h0ICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7CgogICAgCQlzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBzZXR1cExpZ2h0cygpIHsKCiAgICAJCWxpZ2h0cy5zZXR1cCggbGlnaHRzQXJyYXkgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBzZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApIHsKCiAgICAJCWxpZ2h0cy5zZXR1cFZpZXcoIGxpZ2h0c0FycmF5LCBjYW1lcmEgKTsKCiAgICAJfQoKICAgIAljb25zdCBzdGF0ZSA9IHsKICAgIAkJbGlnaHRzQXJyYXk6IGxpZ2h0c0FycmF5LAogICAgCQlzaGFkb3dzQXJyYXk6IHNoYWRvd3NBcnJheSwKCiAgICAJCWNhbWVyYTogbnVsbCwKCiAgICAJCWxpZ2h0czogbGlnaHRzLAoKICAgIAkJdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0OiB7fQogICAgCX07CgogICAgCXJldHVybiB7CiAgICAJCWluaXQ6IGluaXQsCiAgICAJCXN0YXRlOiBzdGF0ZSwKICAgIAkJc2V0dXBMaWdodHM6IHNldHVwTGlnaHRzLAogICAgCQlzZXR1cExpZ2h0c1ZpZXc6IHNldHVwTGlnaHRzVmlldywKCiAgICAJCXB1c2hMaWdodDogcHVzaExpZ2h0LAogICAgCQlwdXNoU2hhZG93OiBwdXNoU2hhZG93CiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZXMoIGV4dGVuc2lvbnMgKSB7CgogICAgCWxldCByZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpOwoKICAgIAlmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggPSAwICkgewoKICAgIAkJY29uc3QgcmVuZGVyU3RhdGVBcnJheSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICk7CiAgICAJCWxldCByZW5kZXJTdGF0ZTsKCiAgICAJCWlmICggcmVuZGVyU3RhdGVBcnJheSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTsKICAgIAkJCXJlbmRlclN0YXRlcy5zZXQoIHNjZW5lLCBbIHJlbmRlclN0YXRlIF0gKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCByZW5kZXJDYWxsRGVwdGggPj0gcmVuZGVyU3RhdGVBcnJheS5sZW5ndGggKSB7CgogICAgCQkJCXJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTsKICAgIAkJCQlyZW5kZXJTdGF0ZUFycmF5LnB1c2goIHJlbmRlclN0YXRlICk7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJcmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZUFycmF5WyByZW5kZXJDYWxsRGVwdGggXTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXR1cm4gcmVuZGVyU3RhdGU7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZGlzcG9zZSgpIHsKCiAgICAJCXJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCX0KCiAgICAJcmV0dXJuIHsKICAgIAkJZ2V0OiBnZXQsCiAgICAJCWRpc3Bvc2U6IGRpc3Bvc2UKICAgIAl9OwoKICAgIH0KCiAgICBjb25zdCB2ZXJ0ZXggPSAidm9pZCBtYWluKCkge1xuXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcbn0iOwoKICAgIGNvbnN0IGZyYWdtZW50ID0gInVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd19wYXNzO1xudW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XG51bmlmb3JtIGZsb2F0IHJhZGl1cztcbiNpbmNsdWRlIDxwYWNraW5nPlxudm9pZCBtYWluKCkge1xuXHRjb25zdCBmbG9hdCBzYW1wbGVzID0gZmxvYXQoIFZTTV9TQU1QTEVTICk7XG5cdGZsb2F0IG1lYW4gPSAwLjA7XG5cdGZsb2F0IHNxdWFyZWRfbWVhbiA9IDAuMDtcblx0ZmxvYXQgdXZTdHJpZGUgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IDIuMCAvICggc2FtcGxlcyAtIDEuMCApO1xuXHRmbG9hdCB1dlN0YXJ0ID0gc2FtcGxlcyA8PSAxLjAgPyAwLjAgOiAtIDEuMDtcblx0Zm9yICggZmxvYXQgaSA9IDAuMDsgaSA8IHNhbXBsZXM7IGkgKysgKSB7XG5cdFx0ZmxvYXQgdXZPZmZzZXQgPSB1dlN0YXJ0ICsgaSAqIHV2U3RyaWRlO1xuXHRcdCNpZmRlZiBIT1JJWk9OVEFMX1BBU1Ncblx0XHRcdHZlYzIgZGlzdHJpYnV0aW9uID0gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93X3Bhc3MsICggZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMiggdXZPZmZzZXQsIDAuMCApICogcmFkaXVzICkgLyByZXNvbHV0aW9uICkgKTtcblx0XHRcdG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XG5cdFx0XHRzcXVhcmVkX21lYW4gKz0gZGlzdHJpYnV0aW9uLnkgKiBkaXN0cmlidXRpb24ueSArIGRpc3RyaWJ1dGlvbi54ICogZGlzdHJpYnV0aW9uLng7XG5cdFx0I2Vsc2Vcblx0XHRcdGZsb2F0IGRlcHRoID0gdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggc2hhZG93X3Bhc3MsICggZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMiggMC4wLCB1dk9mZnNldCApICogcmFkaXVzICkgLyByZXNvbHV0aW9uICkgKTtcblx0XHRcdG1lYW4gKz0gZGVwdGg7XG5cdFx0XHRzcXVhcmVkX21lYW4gKz0gZGVwdGggKiBkZXB0aDtcblx0XHQjZW5kaWZcblx0fVxuXHRtZWFuID0gbWVhbiAvIHNhbXBsZXM7XG5cdHNxdWFyZWRfbWVhbiA9IHNxdWFyZWRfbWVhbiAvIHNhbXBsZXM7XG5cdGZsb2F0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiApO1xuXHRnbF9GcmFnQ29sb3IgPSBwYWNrMkhhbGZUb1JHQkEoIHZlYzIoIG1lYW4sIHN0ZF9kZXYgKSApO1xufSI7CgogICAgZnVuY3Rpb24gV2ViR0xTaGFkb3dNYXAoIHJlbmRlcmVyLCBvYmplY3RzLCBjYXBhYmlsaXRpZXMgKSB7CgogICAgCWxldCBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7CgogICAgCWNvbnN0IF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSwKICAgIAkJX3ZpZXdwb3J0U2l6ZSA9IG5ldyBWZWN0b3IyKCksCgogICAgCQlfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLAoKICAgIAkJX2RlcHRoTWF0ZXJpYWwgPSBuZXcgTWVzaERlcHRoTWF0ZXJpYWwoIHsgZGVwdGhQYWNraW5nOiBSR0JBRGVwdGhQYWNraW5nIH0gKSwKICAgIAkJX2Rpc3RhbmNlTWF0ZXJpYWwgPSBuZXcgTWVzaERpc3RhbmNlTWF0ZXJpYWwoKSwKCiAgICAJCV9tYXRlcmlhbENhY2hlID0ge30sCgogICAgCQlfbWF4VGV4dHVyZVNpemUgPSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemU7CgogICAgCWNvbnN0IHNoYWRvd1NpZGUgPSB7IFsgRnJvbnRTaWRlIF06IEJhY2tTaWRlLCBbIEJhY2tTaWRlIF06IEZyb250U2lkZSwgWyBEb3VibGVTaWRlIF06IERvdWJsZVNpZGUgfTsKCiAgICAJY29uc3Qgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCggewogICAgCQlkZWZpbmVzOiB7CiAgICAJCQlWU01fU0FNUExFUzogOAogICAgCQl9LAogICAgCQl1bmlmb3JtczogewogICAgCQkJc2hhZG93X3Bhc3M6IHsgdmFsdWU6IG51bGwgfSwKICAgIAkJCXJlc29sdXRpb246IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCkgfSwKICAgIAkJCXJhZGl1czogeyB2YWx1ZTogNC4wIH0KICAgIAkJfSwKCiAgICAJCXZlcnRleFNoYWRlcjogdmVydGV4LAogICAgCQlmcmFnbWVudFNoYWRlcjogZnJhZ21lbnQKCiAgICAJfSApOwoKICAgIAljb25zdCBzaGFkb3dNYXRlcmlhbEhvcml6b250YWwgPSBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmNsb25lKCk7CiAgICAJc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLmRlZmluZXMuSE9SSVpPTlRBTF9QQVNTID0gMTsKCiAgICAJY29uc3QgZnVsbFNjcmVlblRyaSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwogICAgCWZ1bGxTY3JlZW5Ucmkuc2V0QXR0cmlidXRlKAogICAgCQkncG9zaXRpb24nLAogICAgCQluZXcgQnVmZmVyQXR0cmlidXRlKAogICAgCQkJbmV3IEZsb2F0MzJBcnJheSggWyAtMSwgLTEsIDAuNSwgMywgLTEsIDAuNSwgLTEsIDMsIDAuNSBdICksCiAgICAJCQkzCiAgICAJCSkKICAgIAkpOwoKICAgIAljb25zdCBmdWxsU2NyZWVuTWVzaCA9IG5ldyBNZXNoKCBmdWxsU2NyZWVuVHJpLCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsICk7CgogICAgCWNvbnN0IHNjb3BlID0gdGhpczsKCiAgICAJdGhpcy5lbmFibGVkID0gZmFsc2U7CgogICAgCXRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7CiAgICAJdGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlOwoKICAgIAl0aGlzLnR5cGUgPSBQQ0ZTaGFkb3dNYXA7CiAgICAJbGV0IF9wcmV2aW91c1R5cGUgPSB0aGlzLnR5cGU7CgogICAgCXRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBsaWdodHMsIHNjZW5lLCBjYW1lcmEgKSB7CgogICAgCQlpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuOwogICAgCQlpZiAoIHNjb3BlLmF1dG9VcGRhdGUgPT09IGZhbHNlICYmIHNjb3BlLm5lZWRzVXBkYXRlID09PSBmYWxzZSApIHJldHVybjsKCiAgICAJCWlmICggbGlnaHRzLmxlbmd0aCA9PT0gMCApIHJldHVybjsKCiAgICAJCWNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTsKICAgIAkJY29uc3QgYWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpOwogICAgCQljb25zdCBhY3RpdmVNaXBtYXBMZXZlbCA9IHJlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7CgogICAgCQljb25zdCBfc3RhdGUgPSByZW5kZXJlci5zdGF0ZTsKCiAgICAJCS8vIFNldCBHTCBzdGF0ZSBmb3IgZGVwdGggbWFwLgogICAgCQlfc3RhdGUuc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTsKICAgIAkJX3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTsKICAgIAkJX3N0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApOwogICAgCQlfc3RhdGUuc2V0U2Npc3NvclRlc3QoIGZhbHNlICk7CgogICAgCQkvLyBjaGVjayBmb3Igc2hhZG93IG1hcCB0eXBlIGNoYW5nZXMKCiAgICAJCWNvbnN0IHRvVlNNID0gKCBfcHJldmlvdXNUeXBlICE9PSBWU01TaGFkb3dNYXAgJiYgdGhpcy50eXBlID09PSBWU01TaGFkb3dNYXAgKTsKICAgIAkJY29uc3QgZnJvbVZTTSA9ICggX3ByZXZpb3VzVHlwZSA9PT0gVlNNU2hhZG93TWFwICYmIHRoaXMudHlwZSAhPT0gVlNNU2hhZG93TWFwICk7CgogICAgCQkvLyByZW5kZXIgZGVwdGggbWFwCgogICAgCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCWNvbnN0IGxpZ2h0ID0gbGlnaHRzWyBpIF07CiAgICAJCQljb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7CgogICAgCQkJaWYgKCBzaGFkb3cgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicgKTsKICAgIAkJCQljb250aW51ZTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBzaGFkb3cuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2hhZG93Lm5lZWRzVXBkYXRlID09PSBmYWxzZSApIGNvbnRpbnVlOwoKICAgIAkJCV9zaGFkb3dNYXBTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7CgogICAgCQkJY29uc3Qgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpOwoKICAgIAkJCV9zaGFkb3dNYXBTaXplLm11bHRpcGx5KCBzaGFkb3dGcmFtZUV4dGVudHMgKTsKCiAgICAJCQlfdmlld3BvcnRTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7CgogICAgCQkJaWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplIHx8IF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7CgogICAgCQkJCWlmICggX3NoYWRvd01hcFNpemUueCA+IF9tYXhUZXh0dXJlU2l6ZSApIHsKCiAgICAJCQkJCV92aWV3cG9ydFNpemUueCA9IE1hdGguZmxvb3IoIF9tYXhUZXh0dXJlU2l6ZSAvIHNoYWRvd0ZyYW1lRXh0ZW50cy54ICk7CiAgICAJCQkJCV9zaGFkb3dNYXBTaXplLnggPSBfdmlld3BvcnRTaXplLnggKiBzaGFkb3dGcmFtZUV4dGVudHMueDsKICAgIAkJCQkJc2hhZG93Lm1hcFNpemUueCA9IF92aWV3cG9ydFNpemUueDsKCiAgICAJCQkJfQoKICAgIAkJCQlpZiAoIF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7CgogICAgCQkJCQlfdmlld3BvcnRTaXplLnkgPSBNYXRoLmZsb29yKCBfbWF4VGV4dHVyZVNpemUgLyBzaGFkb3dGcmFtZUV4dGVudHMueSApOwogICAgCQkJCQlfc2hhZG93TWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55ICogc2hhZG93RnJhbWVFeHRlbnRzLnk7CiAgICAJCQkJCXNoYWRvdy5tYXBTaXplLnkgPSBfdmlld3BvcnRTaXplLnk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJaWYgKCBzaGFkb3cubWFwID09PSBudWxsIHx8IHRvVlNNID09PSB0cnVlIHx8IGZyb21WU00gPT09IHRydWUgKSB7CgogICAgCQkJCWNvbnN0IHBhcnMgPSAoIHRoaXMudHlwZSAhPT0gVlNNU2hhZG93TWFwICkgPyB7IG1pbkZpbHRlcjogTmVhcmVzdEZpbHRlciwgbWFnRmlsdGVyOiBOZWFyZXN0RmlsdGVyIH0gOiB7fTsKCiAgICAJCQkJaWYgKCBzaGFkb3cubWFwICE9PSBudWxsICkgewoKICAgIAkJCQkJc2hhZG93Lm1hcC5kaXNwb3NlKCk7CgogICAgCQkJCX0KCiAgICAJCQkJc2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApOwogICAgCQkJCXNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArICcuc2hhZG93TWFwJzsKCiAgICAJCQkJc2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgogICAgCQkJfQoKICAgIAkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApOwogICAgCQkJcmVuZGVyZXIuY2xlYXIoKTsKCiAgICAJCQljb25zdCB2aWV3cG9ydENvdW50ID0gc2hhZG93LmdldFZpZXdwb3J0Q291bnQoKTsKCiAgICAJCQlmb3IgKCBsZXQgdnAgPSAwOyB2cCA8IHZpZXdwb3J0Q291bnQ7IHZwICsrICkgewoKICAgIAkJCQljb25zdCB2aWV3cG9ydCA9IHNoYWRvdy5nZXRWaWV3cG9ydCggdnAgKTsKCiAgICAJCQkJX3ZpZXdwb3J0LnNldCgKICAgIAkJCQkJX3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueCwKICAgIAkJCQkJX3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQueSwKICAgIAkJCQkJX3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueiwKICAgIAkJCQkJX3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQudwogICAgCQkJCSk7CgogICAgCQkJCV9zdGF0ZS52aWV3cG9ydCggX3ZpZXdwb3J0ICk7CgogICAgCQkJCXNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZwICk7CgogICAgCQkJCV9mcnVzdHVtID0gc2hhZG93LmdldEZydXN0dW0oKTsKCiAgICAJCQkJcmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBsaWdodCwgdGhpcy50eXBlICk7CgogICAgCQkJfQoKICAgIAkJCS8vIGRvIGJsdXIgcGFzcyBmb3IgVlNNCgogICAgCQkJaWYgKCBzaGFkb3cuaXNQb2ludExpZ2h0U2hhZG93ICE9PSB0cnVlICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICkgewoKICAgIAkJCQlWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApOwoKICAgIAkJCX0KCiAgICAJCQlzaGFkb3cubmVlZHNVcGRhdGUgPSBmYWxzZTsKCiAgICAJCX0KCiAgICAJCV9wcmV2aW91c1R5cGUgPSB0aGlzLnR5cGU7CgogICAgCQlzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlOwoKICAgIAkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTsKCiAgICAJfTsKCiAgICAJZnVuY3Rpb24gVlNNUGFzcyggc2hhZG93LCBjYW1lcmEgKSB7CgogICAgCQljb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBmdWxsU2NyZWVuTWVzaCApOwoKICAgIAkJaWYgKCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgIT09IHNoYWRvdy5ibHVyU2FtcGxlcyApIHsKCiAgICAJCQlzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7CiAgICAJCQlzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5WU01fU0FNUExFUyA9IHNoYWRvdy5ibHVyU2FtcGxlczsKCiAgICAJCQlzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIAkJCXNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgogICAgCQl9CgogICAgCQlpZiAoIHNoYWRvdy5tYXBQYXNzID09PSBudWxsICkgewoKICAgIAkJCXNoYWRvdy5tYXBQYXNzID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55ICk7CgogICAgCQl9CgogICAgCQkvLyB2ZXJ0aWNhbCBwYXNzCgogICAgCQlzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcC50ZXh0dXJlOwogICAgCQlzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUgPSBzaGFkb3cubWFwU2l6ZTsKICAgIAkJc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzOwogICAgCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXBQYXNzICk7CiAgICAJCXJlbmRlcmVyLmNsZWFyKCk7CiAgICAJCXJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTsKCiAgICAJCS8vIGhvcml6b250YWwgcGFzcwoKICAgIAkJc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcFBhc3MudGV4dHVyZTsKICAgIAkJc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUgPSBzaGFkb3cubWFwU2l6ZTsKICAgIAkJc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHNoYWRvdy5yYWRpdXM7CiAgICAJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApOwogICAgCQlyZW5kZXJlci5jbGVhcigpOwogICAgCQlyZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBsaWdodCwgdHlwZSApIHsKCiAgICAJCWxldCByZXN1bHQgPSBudWxsOwoKICAgIAkJY29uc3QgY3VzdG9tTWF0ZXJpYWwgPSAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSApID8gb2JqZWN0LmN1c3RvbURpc3RhbmNlTWF0ZXJpYWwgOiBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDsKCiAgICAJCWlmICggY3VzdG9tTWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJcmVzdWx0ID0gKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgKSA/IF9kaXN0YW5jZU1hdGVyaWFsIDogX2RlcHRoTWF0ZXJpYWw7CgogICAgCQkJaWYgKCAoIHJlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmIG1hdGVyaWFsLmNsaXBTaGFkb3dzID09PSB0cnVlICYmIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzICkgJiYgbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSAwICkgfHwKICAgIAkJCQkoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCAmJiBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gMCApIHx8CiAgICAJCQkJKCBtYXRlcmlhbC5hbHBoYU1hcCAmJiBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkgfHwKICAgIAkJCQkoIG1hdGVyaWFsLm1hcCAmJiBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkgfHwKICAgIAkJCQkoIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZSApICkgewoKICAgIAkJCQkvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZQogICAgCQkJCS8vIGFwcHJvcHJpYXRlIHN0YXRlCgogICAgCQkJCWNvbnN0IGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7CgogICAgCQkJCWxldCBtYXRlcmlhbHNGb3JWYXJpYW50ID0gX21hdGVyaWFsQ2FjaGVbIGtleUEgXTsKCiAgICAJCQkJaWYgKCBtYXRlcmlhbHNGb3JWYXJpYW50ID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQltYXRlcmlhbHNGb3JWYXJpYW50ID0ge307CiAgICAJCQkJCV9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50OwoKICAgIAkJCQl9CgogICAgCQkJCWxldCBjYWNoZWRNYXRlcmlhbCA9IG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXTsKCiAgICAJCQkJaWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJY2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTsKICAgIAkJCQkJbWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdID0gY2FjaGVkTWF0ZXJpYWw7CiAgICAJCQkJCW1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlyZXN1bHQgPSBjYWNoZWRNYXRlcmlhbDsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7CiAgICAJCXJlc3VsdC53aXJlZnJhbWUgPSBtYXRlcmlhbC53aXJlZnJhbWU7CgogICAgCQlpZiAoIHR5cGUgPT09IFZTTVNoYWRvd01hcCApIHsKCiAgICAJCQlyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IG1hdGVyaWFsLnNpZGU7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCXJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9PSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogc2hhZG93U2lkZVsgbWF0ZXJpYWwuc2lkZSBdOwoKICAgIAkJfQoKICAgIAkJcmVzdWx0LmFscGhhTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7CiAgICAJCXJlc3VsdC5hbHBoYVRlc3QgPSAoIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZSApID8gMC41IDogbWF0ZXJpYWwuYWxwaGFUZXN0OyAvLyBhcHByb3hpbWF0ZSBhbHBoYVRvQ292ZXJhZ2UgYnkgdXNpbmcgYSBmaXhlZCBhbHBoYVRlc3QgdmFsdWUKICAgIAkJcmVzdWx0Lm1hcCA9IG1hdGVyaWFsLm1hcDsKCiAgICAJCXJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzOwogICAgCQlyZXN1bHQuY2xpcHBpbmdQbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lczsKICAgIAkJcmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uOwoKICAgIAkJcmVzdWx0LmRpc3BsYWNlbWVudE1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDsKICAgIAkJcmVzdWx0LmRpc3BsYWNlbWVudFNjYWxlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7CiAgICAJCXJlc3VsdC5kaXNwbGFjZW1lbnRCaWFzID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhczsKCiAgICAJCXJlc3VsdC53aXJlZnJhbWVMaW5ld2lkdGggPSBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGg7CiAgICAJCXJlc3VsdC5saW5ld2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7CgogICAgCQlpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSAmJiByZXN1bHQuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9PT0gdHJ1ZSApIHsKCiAgICAJCQljb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggcmVzdWx0ICk7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMubGlnaHQgPSBsaWdodDsKCiAgICAJCX0KCiAgICAJCXJldHVybiByZXN1bHQ7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApIHsKCiAgICAJCWlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuOwoKICAgIAkJY29uc3QgdmlzaWJsZSA9IG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApOwoKICAgIAkJaWYgKCB2aXNpYmxlICYmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApICkgewoKICAgIAkJCWlmICggKCBvYmplY3QuY2FzdFNoYWRvdyB8fCAoIG9iamVjdC5yZWNlaXZlU2hhZG93ICYmIHR5cGUgPT09IFZTTVNoYWRvd01hcCApICkgJiYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkgKSB7CgogICAgCQkJCW9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgogICAgCQkJCWNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApOwogICAgCQkJCWNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsOwoKICAgIAkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7CgogICAgCQkJCQljb25zdCBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7CgogICAgCQkJCQlmb3IgKCBsZXQgayA9IDAsIGtsID0gZ3JvdXBzLmxlbmd0aDsgayA8IGtsOyBrICsrICkgewoKICAgIAkJCQkJCWNvbnN0IGdyb3VwID0gZ3JvdXBzWyBrIF07CiAgICAJCQkJCQljb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTsKCiAgICAJCQkJCQlpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkgewoKICAgIAkJCQkJCQljb25zdCBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgdHlwZSApOwoKICAgIAkJCQkJCQlvYmplY3Qub25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgZ3JvdXAgKTsKCiAgICAJCQkJCQkJcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7CgogICAgCQkJCQkJCW9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkgewoKICAgIAkJCQkJY29uc3QgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICk7CgogICAgCQkJCQlvYmplY3Qub25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgbnVsbCApOwoKICAgIAkJCQkJcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTsKCiAgICAJCQkJCW9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG51bGwgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQlyZW5kZXJPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIG9uTWF0ZXJpYWxEaXNwb3NlKCBldmVudCApIHsKCiAgICAJCWNvbnN0IG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0OwoKICAgIAkJbWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApOwoKICAgIAkJLy8gbWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgdW5pcXVlIGRpc3RhbmNlL2RlcHRoIG1hdGVyaWFscyB1c2VkIGZvciBzaGFkb3cgbWFwIHJlbmRlcmluZwoKICAgIAkJZm9yICggY29uc3QgaWQgaW4gX21hdGVyaWFsQ2FjaGUgKSB7CgogICAgCQkJY29uc3QgY2FjaGUgPSBfbWF0ZXJpYWxDYWNoZVsgaWQgXTsKCiAgICAJCQljb25zdCB1dWlkID0gZXZlbnQudGFyZ2V0LnV1aWQ7CgogICAgCQkJaWYgKCB1dWlkIGluIGNhY2hlICkgewoKICAgIAkJCQljb25zdCBzaGFkb3dNYXRlcmlhbCA9IGNhY2hlWyB1dWlkIF07CiAgICAJCQkJc2hhZG93TWF0ZXJpYWwuZGlzcG9zZSgpOwogICAgCQkJCWRlbGV0ZSBjYWNoZVsgdXVpZCBdOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIH0KCiAgICBjb25zdCByZXZlcnNlZEZ1bmNzID0gewogICAgCVsgTmV2ZXJEZXB0aCBdOiBBbHdheXNEZXB0aCwKICAgIAlbIExlc3NEZXB0aCBdOiBHcmVhdGVyRGVwdGgsCiAgICAJWyBFcXVhbERlcHRoIF06IE5vdEVxdWFsRGVwdGgsCiAgICAJWyBMZXNzRXF1YWxEZXB0aCBdOiBHcmVhdGVyRXF1YWxEZXB0aCwKCiAgICAJWyBBbHdheXNEZXB0aCBdOiBOZXZlckRlcHRoLAogICAgCVsgR3JlYXRlckRlcHRoIF06IExlc3NEZXB0aCwKICAgIAlbIE5vdEVxdWFsRGVwdGggXTogRXF1YWxEZXB0aCwKICAgIAlbIEdyZWF0ZXJFcXVhbERlcHRoIF06IExlc3NFcXVhbERlcHRoLAogICAgfTsKCiAgICBmdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucyApIHsKCiAgICAJZnVuY3Rpb24gQ29sb3JCdWZmZXIoKSB7CgogICAgCQlsZXQgbG9ja2VkID0gZmFsc2U7CgogICAgCQljb25zdCBjb2xvciA9IG5ldyBWZWN0b3I0KCk7CiAgICAJCWxldCBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDsKICAgIAkJY29uc3QgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApOwoKICAgIAkJcmV0dXJuIHsKCiAgICAJCQlzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHsKCiAgICAJCQkJaWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7CgogICAgCQkJCQlnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApOwogICAgCQkJCQljdXJyZW50Q29sb3JNYXNrID0gY29sb3JNYXNrOwoKICAgIAkJCQl9CgogICAgCQkJfSwKCiAgICAJCQlzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHsKCiAgICAJCQkJbG9ja2VkID0gbG9jazsKCiAgICAJCQl9LAoKICAgIAkJCXNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHsKCiAgICAJCQkJaWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7CgogICAgCQkJCQlyICo9IGE7IGcgKj0gYTsgYiAqPSBhOwoKICAgIAkJCQl9CgogICAgCQkJCWNvbG9yLnNldCggciwgZywgYiwgYSApOwoKICAgIAkJCQlpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7CgogICAgCQkJCQlnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7CiAgICAJCQkJCWN1cnJlbnRDb2xvckNsZWFyLmNvcHkoIGNvbG9yICk7CgogICAgCQkJCX0KCiAgICAJCQl9LAoKICAgIAkJCXJlc2V0OiBmdW5jdGlvbiAoKSB7CgogICAgCQkJCWxvY2tlZCA9IGZhbHNlOwoKICAgIAkJCQljdXJyZW50Q29sb3JNYXNrID0gbnVsbDsKICAgIAkJCQljdXJyZW50Q29sb3JDbGVhci5zZXQoIC0xLCAwLCAwLCAwICk7IC8vIHNldCB0byBpbnZhbGlkIHN0YXRlCgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBEZXB0aEJ1ZmZlcigpIHsKCiAgICAJCWxldCBsb2NrZWQgPSBmYWxzZTsKCiAgICAJCWxldCBjdXJyZW50UmV2ZXJzZWQgPSBmYWxzZTsKICAgIAkJbGV0IGN1cnJlbnREZXB0aE1hc2sgPSBudWxsOwogICAgCQlsZXQgY3VycmVudERlcHRoRnVuYyA9IG51bGw7CiAgICAJCWxldCBjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7CgogICAgCQlyZXR1cm4gewoKICAgIAkJCXNldFJldmVyc2VkOiBmdW5jdGlvbiAoIHJldmVyc2VkICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRSZXZlcnNlZCAhPT0gcmV2ZXJzZWQgKSB7CgogICAgCQkJCQljb25zdCBleHQgPSBleHRlbnNpb25zLmdldCggJ0VYVF9jbGlwX2NvbnRyb2wnICk7CgogICAgCQkJCQlpZiAoIHJldmVyc2VkICkgewoKICAgIAkJCQkJCWV4dC5jbGlwQ29udHJvbEVYVCggZXh0LkxPV0VSX0xFRlRfRVhULCBleHQuWkVST19UT19PTkVfRVhUICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCWV4dC5jbGlwQ29udHJvbEVYVCggZXh0LkxPV0VSX0xFRlRfRVhULCBleHQuTkVHQVRJVkVfT05FX1RPX09ORV9FWFQgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWN1cnJlbnRSZXZlcnNlZCA9IHJldmVyc2VkOwoKICAgIAkJCQkJY29uc3Qgb2xkRGVwdGggPSBjdXJyZW50RGVwdGhDbGVhcjsKICAgIAkJCQkJY3VycmVudERlcHRoQ2xlYXIgPSBudWxsOwogICAgCQkJCQl0aGlzLnNldENsZWFyKCBvbGREZXB0aCApOwoKICAgIAkJCQl9CgogICAgCQkJfSwKCiAgICAJCQlnZXRSZXZlcnNlZDogZnVuY3Rpb24gKCkgewoKICAgIAkJCQlyZXR1cm4gY3VycmVudFJldmVyc2VkOwoKICAgIAkJCX0sCgogICAgCQkJc2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7CgogICAgCQkJCWlmICggZGVwdGhUZXN0ICkgewoKICAgIAkJCQkJZW5hYmxlKCBnbC5ERVBUSF9URVNUICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlkaXNhYmxlKCBnbC5ERVBUSF9URVNUICk7CgogICAgCQkJCX0KCiAgICAJCQl9LAoKICAgIAkJCXNldE1hc2s6IGZ1bmN0aW9uICggZGVwdGhNYXNrICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHsKCiAgICAJCQkJCWdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7CiAgICAJCQkJCWN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7CgogICAgCQkJCX0KCiAgICAJCQl9LAoKICAgIAkJCXNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRSZXZlcnNlZCApIGRlcHRoRnVuYyA9IHJldmVyc2VkRnVuY3NbIGRlcHRoRnVuYyBdOwoKICAgIAkJCQlpZiAoIGN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHsKCiAgICAJCQkJCXN3aXRjaCAoIGRlcHRoRnVuYyApIHsKCiAgICAJCQkJCQljYXNlIE5ldmVyRGVwdGg6CgogICAgCQkJCQkJCWdsLmRlcHRoRnVuYyggZ2wuTkVWRVIgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQljYXNlIEFsd2F5c0RlcHRoOgoKICAgIAkJCQkJCQlnbC5kZXB0aEZ1bmMoIGdsLkFMV0FZUyApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWNhc2UgTGVzc0RlcHRoOgoKICAgIAkJCQkJCQlnbC5kZXB0aEZ1bmMoIGdsLkxFU1MgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQljYXNlIExlc3NFcXVhbERlcHRoOgoKICAgIAkJCQkJCQlnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWNhc2UgRXF1YWxEZXB0aDoKCiAgICAJCQkJCQkJZ2wuZGVwdGhGdW5jKCBnbC5FUVVBTCApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWNhc2UgR3JlYXRlckVxdWFsRGVwdGg6CgogICAgCQkJCQkJCWdsLmRlcHRoRnVuYyggZ2wuR0VRVUFMICk7CiAgICAJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJY2FzZSBHcmVhdGVyRGVwdGg6CgogICAgCQkJCQkJCWdsLmRlcHRoRnVuYyggZ2wuR1JFQVRFUiApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWNhc2UgTm90RXF1YWxEZXB0aDoKCiAgICAJCQkJCQkJZ2wuZGVwdGhGdW5jKCBnbC5OT1RFUVVBTCApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWRlZmF1bHQ6CgogICAgCQkJCQkJCWdsLmRlcHRoRnVuYyggZ2wuTEVRVUFMICk7CgogICAgCQkJCQl9CgogICAgCQkJCQljdXJyZW50RGVwdGhGdW5jID0gZGVwdGhGdW5jOwoKICAgIAkJCQl9CgogICAgCQkJfSwKCiAgICAJCQlzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHsKCiAgICAJCQkJbG9ja2VkID0gbG9jazsKCiAgICAJCQl9LAoKICAgIAkJCXNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnREZXB0aENsZWFyICE9PSBkZXB0aCApIHsKCiAgICAJCQkJCWlmICggY3VycmVudFJldmVyc2VkICkgewoKICAgIAkJCQkJCWRlcHRoID0gMSAtIGRlcHRoOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJZ2wuY2xlYXJEZXB0aCggZGVwdGggKTsKICAgIAkJCQkJY3VycmVudERlcHRoQ2xlYXIgPSBkZXB0aDsKCiAgICAJCQkJfQoKICAgIAkJCX0sCgogICAgCQkJcmVzZXQ6IGZ1bmN0aW9uICgpIHsKCiAgICAJCQkJbG9ja2VkID0gZmFsc2U7CgogICAgCQkJCWN1cnJlbnREZXB0aE1hc2sgPSBudWxsOwogICAgCQkJCWN1cnJlbnREZXB0aEZ1bmMgPSBudWxsOwogICAgCQkJCWN1cnJlbnREZXB0aENsZWFyID0gbnVsbDsKICAgIAkJCQljdXJyZW50UmV2ZXJzZWQgPSBmYWxzZTsKCiAgICAJCQl9CgogICAgCQl9OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIFN0ZW5jaWxCdWZmZXIoKSB7CgogICAgCQlsZXQgbG9ja2VkID0gZmFsc2U7CgogICAgCQlsZXQgY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDsKICAgIAkJbGV0IGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7CiAgICAJCWxldCBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7CiAgICAJCWxldCBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDsKICAgIAkJbGV0IGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7CiAgICAJCWxldCBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDsKICAgIAkJbGV0IGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsOwogICAgCQlsZXQgY3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7CgogICAgCQlyZXR1cm4gewoKICAgIAkJCXNldFRlc3Q6IGZ1bmN0aW9uICggc3RlbmNpbFRlc3QgKSB7CgogICAgCQkJCWlmICggISBsb2NrZWQgKSB7CgogICAgCQkJCQlpZiAoIHN0ZW5jaWxUZXN0ICkgewoKICAgIAkJCQkJCWVuYWJsZSggZ2wuU1RFTkNJTF9URVNUICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCWRpc2FibGUoIGdsLlNURU5DSUxfVEVTVCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfSwKCiAgICAJCQlzZXRNYXNrOiBmdW5jdGlvbiAoIHN0ZW5jaWxNYXNrICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRTdGVuY2lsTWFzayAhPT0gc3RlbmNpbE1hc2sgJiYgISBsb2NrZWQgKSB7CgogICAgCQkJCQlnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTsKICAgIAkJCQkJY3VycmVudFN0ZW5jaWxNYXNrID0gc3RlbmNpbE1hc2s7CgogICAgCQkJCX0KCiAgICAJCQl9LAoKICAgIAkJCXNldEZ1bmM6IGZ1bmN0aW9uICggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRTdGVuY2lsRnVuYyAhPT0gc3RlbmNpbEZ1bmMgfHwKICAgIAkJCQkgICAgIGN1cnJlbnRTdGVuY2lsUmVmICE9PSBzdGVuY2lsUmVmIHx8CiAgICAJCQkJICAgICBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrICE9PSBzdGVuY2lsTWFzayApIHsKCiAgICAJCQkJCWdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTsKCiAgICAJCQkJCWN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jOwogICAgCQkJCQljdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7CiAgICAJCQkJCWN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBzdGVuY2lsTWFzazsKCiAgICAJCQkJfQoKICAgIAkJCX0sCgogICAgCQkJc2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRTdGVuY2lsRmFpbCAhPT0gc3RlbmNpbEZhaWwgfHwKICAgIAkJCQkgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fAogICAgCQkJCSAgICAgY3VycmVudFN0ZW5jaWxaUGFzcyAhPT0gc3RlbmNpbFpQYXNzICkgewoKICAgIAkJCQkJZ2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTsKCiAgICAJCQkJCWN1cnJlbnRTdGVuY2lsRmFpbCA9IHN0ZW5jaWxGYWlsOwogICAgCQkJCQljdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsOwogICAgCQkJCQljdXJyZW50U3RlbmNpbFpQYXNzID0gc3RlbmNpbFpQYXNzOwoKICAgIAkJCQl9CgogICAgCQkJfSwKCiAgICAJCQlzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHsKCiAgICAJCQkJbG9ja2VkID0gbG9jazsKCiAgICAJCQl9LAoKICAgIAkJCXNldENsZWFyOiBmdW5jdGlvbiAoIHN0ZW5jaWwgKSB7CgogICAgCQkJCWlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHsKCiAgICAJCQkJCWdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApOwogICAgCQkJCQljdXJyZW50U3RlbmNpbENsZWFyID0gc3RlbmNpbDsKCiAgICAJCQkJfQoKICAgIAkJCX0sCgogICAgCQkJcmVzZXQ6IGZ1bmN0aW9uICgpIHsKCiAgICAJCQkJbG9ja2VkID0gZmFsc2U7CgogICAgCQkJCWN1cnJlbnRTdGVuY2lsTWFzayA9IG51bGw7CiAgICAJCQkJY3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDsKICAgIAkJCQljdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7CiAgICAJCQkJY3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IG51bGw7CiAgICAJCQkJY3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDsKICAgIAkJCQljdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDsKICAgIAkJCQljdXJyZW50U3RlbmNpbFpQYXNzID0gbnVsbDsKICAgIAkJCQljdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDsKCiAgICAJCQl9CgogICAgCQl9OwoKICAgIAl9CgogICAgCS8vCgogICAgCWNvbnN0IGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7CiAgICAJY29uc3QgZGVwdGhCdWZmZXIgPSBuZXcgRGVwdGhCdWZmZXIoKTsKICAgIAljb25zdCBzdGVuY2lsQnVmZmVyID0gbmV3IFN0ZW5jaWxCdWZmZXIoKTsKCiAgICAJY29uc3QgdWJvQmluZGluZ3MgPSBuZXcgV2Vha01hcCgpOwogICAgCWNvbnN0IHVib1Byb2dyYW1NYXAgPSBuZXcgV2Vha01hcCgpOwoKICAgIAlsZXQgZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9OwoKICAgIAlsZXQgY3VycmVudEJvdW5kRnJhbWVidWZmZXJzID0ge307CiAgICAJbGV0IGN1cnJlbnREcmF3YnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7CiAgICAJbGV0IGRlZmF1bHREcmF3YnVmZmVycyA9IFtdOwoKICAgIAlsZXQgY3VycmVudFByb2dyYW0gPSBudWxsOwoKICAgIAlsZXQgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgCWxldCBjdXJyZW50QmxlbmRpbmcgPSBudWxsOwogICAgCWxldCBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRCbGVuZERzdCA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsOwogICAgCWxldCBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDsKICAgIAlsZXQgY3VycmVudEJsZW5kQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTsKICAgIAlsZXQgY3VycmVudEJsZW5kQWxwaGEgPSAwOwogICAgCWxldCBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTsKCiAgICAJbGV0IGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsOwogICAgCWxldCBjdXJyZW50Q3VsbEZhY2UgPSBudWxsOwoKICAgIAlsZXQgY3VycmVudExpbmVXaWR0aCA9IG51bGw7CgogICAgCWxldCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsOwoKICAgIAljb25zdCBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTsKCiAgICAJbGV0IGxpbmVXaWR0aEF2YWlsYWJsZSA9IGZhbHNlOwogICAgCWxldCB2ZXJzaW9uID0gMDsKICAgIAljb25zdCBnbFZlcnNpb24gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlZFUlNJT04gKTsKCiAgICAJaWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ1dlYkdMJyApICE9PSAtMSApIHsKCiAgICAJCXZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMIChcZCkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTsKICAgIAkJbGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApOwoKICAgIAl9IGVsc2UgaWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ09wZW5HTCBFUycgKSAhPT0gLTEgKSB7CgogICAgCQl2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15PcGVuR0wgRVMgKFxkKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApOwogICAgCQlsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMi4wICk7CgogICAgCX0KCiAgICAJbGV0IGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7CiAgICAJbGV0IGN1cnJlbnRCb3VuZFRleHR1cmVzID0ge307CgogICAgCWNvbnN0IHNjaXNzb3JQYXJhbSA9IGdsLmdldFBhcmFtZXRlciggZ2wuU0NJU1NPUl9CT1ggKTsKICAgIAljb25zdCB2aWV3cG9ydFBhcmFtID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5WSUVXUE9SVCApOwoKICAgIAljb25zdCBjdXJyZW50U2Npc3NvciA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCBzY2lzc29yUGFyYW0gKTsKICAgIAljb25zdCBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggdmlld3BvcnRQYXJhbSApOwoKICAgIAlmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKCB0eXBlLCB0YXJnZXQsIGNvdW50LCBkaW1lbnNpb25zICkgewoKICAgIAkJY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KCA0ICk7IC8vIDQgaXMgcmVxdWlyZWQgdG8gbWF0Y2ggZGVmYXVsdCB1bnBhY2sgYWxpZ25tZW50IG9mIDQuCiAgICAJCWNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7CgogICAgCQlnbC5iaW5kVGV4dHVyZSggdHlwZSwgdGV4dHVyZSApOwogICAgCQlnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QgKTsKICAgIAkJZ2wudGV4UGFyYW1ldGVyaSggdHlwZSwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUICk7CgogICAgCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHsKCiAgICAJCQlpZiAoIHR5cGUgPT09IGdsLlRFWFRVUkVfM0QgfHwgdHlwZSA9PT0gZ2wuVEVYVFVSRV8yRF9BUlJBWSApIHsKCiAgICAJCQkJZ2wudGV4SW1hZ2UzRCggdGFyZ2V0LCAwLCBnbC5SR0JBLCAxLCAxLCBkaW1lbnNpb25zLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhICk7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJZ2wudGV4SW1hZ2UyRCggdGFyZ2V0ICsgaSwgMCwgZ2wuUkdCQSwgMSwgMSwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiB0ZXh0dXJlOwoKICAgIAl9CgogICAgCWNvbnN0IGVtcHR5VGV4dHVyZXMgPSB7fTsKICAgIAllbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFXzJEIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFXzJELCAxICk7CiAgICAJZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV9DVUJFX01BUCBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV9DVUJFX01BUCwgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLCA2ICk7CiAgICAJZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV8yRF9BUlJBWSBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgZ2wuVEVYVFVSRV8yRF9BUlJBWSwgMSwgMSApOwogICAgCWVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfM0QgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfM0QsIDEsIDEgKTsKCiAgICAJLy8gaW5pdAoKICAgIAljb2xvckJ1ZmZlci5zZXRDbGVhciggMCwgMCwgMCwgMSApOwogICAgCWRlcHRoQnVmZmVyLnNldENsZWFyKCAxICk7CiAgICAJc3RlbmNpbEJ1ZmZlci5zZXRDbGVhciggMCApOwoKICAgIAllbmFibGUoIGdsLkRFUFRIX1RFU1QgKTsKICAgIAlkZXB0aEJ1ZmZlci5zZXRGdW5jKCBMZXNzRXF1YWxEZXB0aCApOwoKICAgIAlzZXRGbGlwU2lkZWQoIGZhbHNlICk7CiAgICAJc2V0Q3VsbEZhY2UoIEN1bGxGYWNlQmFjayApOwogICAgCWVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7CgogICAgCXNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7CgogICAgCS8vCgogICAgCWZ1bmN0aW9uIGVuYWJsZSggaWQgKSB7CgogICAgCQlpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IHRydWUgKSB7CgogICAgCQkJZ2wuZW5hYmxlKCBpZCApOwogICAgCQkJZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IHRydWU7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZGlzYWJsZSggaWQgKSB7CgogICAgCQlpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IGZhbHNlICkgewoKICAgIAkJCWdsLmRpc2FibGUoIGlkICk7CiAgICAJCQllbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gZmFsc2U7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gYmluZEZyYW1lYnVmZmVyKCB0YXJnZXQsIGZyYW1lYnVmZmVyICkgewoKICAgIAkJaWYgKCBjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdICE9PSBmcmFtZWJ1ZmZlciApIHsKCiAgICAJCQlnbC5iaW5kRnJhbWVidWZmZXIoIHRhcmdldCwgZnJhbWVidWZmZXIgKTsKCiAgICAJCQljdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdID0gZnJhbWVidWZmZXI7CgogICAgCQkJLy8gZ2wuRFJBV19GUkFNRUJVRkZFUiBpcyBlcXVpdmFsZW50IHRvIGdsLkZSQU1FQlVGRkVSCgogICAgCQkJaWYgKCB0YXJnZXQgPT09IGdsLkRSQVdfRlJBTUVCVUZGRVIgKSB7CgogICAgCQkJCWN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgZ2wuRlJBTUVCVUZGRVIgXSA9IGZyYW1lYnVmZmVyOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHRhcmdldCA9PT0gZ2wuRlJBTUVCVUZGRVIgKSB7CgogICAgCQkJCWN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgZ2wuRFJBV19GUkFNRUJVRkZFUiBdID0gZnJhbWVidWZmZXI7CgogICAgCQkJfQoKICAgIAkJCXJldHVybiB0cnVlOwoKICAgIAkJfQoKICAgIAkJcmV0dXJuIGZhbHNlOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRyYXdCdWZmZXJzKCByZW5kZXJUYXJnZXQsIGZyYW1lYnVmZmVyICkgewoKICAgIAkJbGV0IGRyYXdCdWZmZXJzID0gZGVmYXVsdERyYXdidWZmZXJzOwoKICAgIAkJbGV0IG5lZWRzVXBkYXRlID0gZmFsc2U7CgogICAgCQlpZiAoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCQlkcmF3QnVmZmVycyA9IGN1cnJlbnREcmF3YnVmZmVycy5nZXQoIGZyYW1lYnVmZmVyICk7CgogICAgCQkJaWYgKCBkcmF3QnVmZmVycyA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlkcmF3QnVmZmVycyA9IFtdOwogICAgCQkJCWN1cnJlbnREcmF3YnVmZmVycy5zZXQoIGZyYW1lYnVmZmVyLCBkcmF3QnVmZmVycyApOwoKICAgIAkJCX0KCiAgICAJCQljb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlczsKCiAgICAJCQlpZiAoIGRyYXdCdWZmZXJzLmxlbmd0aCAhPT0gdGV4dHVyZXMubGVuZ3RoIHx8IGRyYXdCdWZmZXJzWyAwIF0gIT09IGdsLkNPTE9SX0FUVEFDSE1FTlQwICkgewoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQlkcmF3QnVmZmVyc1sgaSBdID0gZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpOwoKICAgIAkJCQl9CgogICAgCQkJCWRyYXdCdWZmZXJzLmxlbmd0aCA9IHRleHR1cmVzLmxlbmd0aDsKCiAgICAJCQkJbmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCBkcmF3QnVmZmVyc1sgMCBdICE9PSBnbC5CQUNLICkgewoKICAgIAkJCQlkcmF3QnVmZmVyc1sgMCBdID0gZ2wuQkFDSzsKCiAgICAJCQkJbmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWlmICggbmVlZHNVcGRhdGUgKSB7CgogICAgCQkJZ2wuZHJhd0J1ZmZlcnMoIGRyYXdCdWZmZXJzICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXNlUHJvZ3JhbSggcHJvZ3JhbSApIHsKCiAgICAJCWlmICggY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7CgogICAgCQkJZ2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApOwoKICAgIAkJCWN1cnJlbnRQcm9ncmFtID0gcHJvZ3JhbTsKCiAgICAJCQlyZXR1cm4gdHJ1ZTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBmYWxzZTsKCiAgICAJfQoKICAgIAljb25zdCBlcXVhdGlvblRvR0wgPSB7CiAgICAJCVsgQWRkRXF1YXRpb24gXTogZ2wuRlVOQ19BREQsCiAgICAJCVsgU3VidHJhY3RFcXVhdGlvbiBdOiBnbC5GVU5DX1NVQlRSQUNULAogICAgCQlbIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIF06IGdsLkZVTkNfUkVWRVJTRV9TVUJUUkFDVAogICAgCX07CgogICAgCWVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IGdsLk1JTjsKICAgIAllcXVhdGlvblRvR0xbIE1heEVxdWF0aW9uIF0gPSBnbC5NQVg7CgogICAgCWNvbnN0IGZhY3RvclRvR0wgPSB7CiAgICAJCVsgWmVyb0ZhY3RvciBdOiBnbC5aRVJPLAogICAgCQlbIE9uZUZhY3RvciBdOiBnbC5PTkUsCiAgICAJCVsgU3JjQ29sb3JGYWN0b3IgXTogZ2wuU1JDX0NPTE9SLAogICAgCQlbIFNyY0FscGhhRmFjdG9yIF06IGdsLlNSQ19BTFBIQSwKICAgIAkJWyBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIF06IGdsLlNSQ19BTFBIQV9TQVRVUkFURSwKICAgIAkJWyBEc3RDb2xvckZhY3RvciBdOiBnbC5EU1RfQ09MT1IsCiAgICAJCVsgRHN0QWxwaGFGYWN0b3IgXTogZ2wuRFNUX0FMUEhBLAogICAgCQlbIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgXTogZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwKICAgIAkJWyBPbmVNaW51c1NyY0FscGhhRmFjdG9yIF06IGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsCiAgICAJCVsgT25lTWludXNEc3RDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfRFNUX0NPTE9SLAogICAgCQlbIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX0RTVF9BTFBIQSwKICAgIAkJWyBDb25zdGFudENvbG9yRmFjdG9yIF06IGdsLkNPTlNUQU5UX0NPTE9SLAogICAgCQlbIE9uZU1pbnVzQ29uc3RhbnRDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1IsCiAgICAJCVsgQ29uc3RhbnRBbHBoYUZhY3RvciBdOiBnbC5DT05TVEFOVF9BTFBIQSwKICAgIAkJWyBPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBCiAgICAJfTsKCiAgICAJZnVuY3Rpb24gc2V0QmxlbmRpbmcoIGJsZW5kaW5nLCBibGVuZEVxdWF0aW9uLCBibGVuZFNyYywgYmxlbmREc3QsIGJsZW5kRXF1YXRpb25BbHBoYSwgYmxlbmRTcmNBbHBoYSwgYmxlbmREc3RBbHBoYSwgYmxlbmRDb2xvciwgYmxlbmRBbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkgewoKICAgIAkJaWYgKCBibGVuZGluZyA9PT0gTm9CbGVuZGluZyApIHsKCiAgICAJCQlpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPT09IHRydWUgKSB7CgogICAgCQkJCWRpc2FibGUoIGdsLkJMRU5EICk7CiAgICAJCQkJY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm47CgogICAgCQl9CgogICAgCQlpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPT09IGZhbHNlICkgewoKICAgIAkJCWVuYWJsZSggZ2wuQkxFTkQgKTsKICAgIAkJCWN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlOwoKICAgIAkJfQoKICAgIAkJaWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7CgogICAgCQkJaWYgKCBibGVuZGluZyAhPT0gY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gY3VycmVudFByZW11bHRpcGxlZEFscGhhICkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbiApIHsKCiAgICAJCQkJCWdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7CgogICAgCQkJCQljdXJyZW50QmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uOwogICAgCQkJCQljdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7CgogICAgCQkJCQlzd2l0Y2ggKCBibGVuZGluZyApIHsKCiAgICAJCQkJCQljYXNlIE5vcm1hbEJsZW5kaW5nOgogICAgCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJCWNhc2UgQWRkaXRpdmVCbGVuZGluZzoKICAgIAkJCQkJCQlnbC5ibGVuZEZ1bmMoIGdsLk9ORSwgZ2wuT05FICk7CiAgICAJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJY2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOgogICAgCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5PTkUgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQljYXNlIE11bHRpcGx5QmxlbmRpbmc6CiAgICAJCQkJCQkJZ2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLkRTVF9DT0xPUiwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuWkVSTywgZ2wuT05FICk7CiAgICAJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJZGVmYXVsdDoKICAgIAkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCX0KCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCXN3aXRjaCAoIGJsZW5kaW5nICkgewoKICAgIAkJCQkJCWNhc2UgTm9ybWFsQmxlbmRpbmc6CiAgICAJCQkJCQkJZ2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBICk7CiAgICAJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJY2FzZSBBZGRpdGl2ZUJsZW5kaW5nOgogICAgCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQljYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6CiAgICAJCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IFN1YnRyYWN0aXZlQmxlbmRpbmcgcmVxdWlyZXMgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZScgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQljYXNlIE11bHRpcGx5QmxlbmRpbmc6CiAgICAJCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IE11bHRpcGx5QmxlbmRpbmcgcmVxdWlyZXMgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZScgKTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQlkZWZhdWx0OgogICAgCQkJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApOwogICAgCQkJCQkJCWJyZWFrOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJCWN1cnJlbnRCbGVuZFNyYyA9IG51bGw7CiAgICAJCQkJY3VycmVudEJsZW5kRHN0ID0gbnVsbDsKICAgIAkJCQljdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7CiAgICAJCQkJY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsOwogICAgCQkJCWN1cnJlbnRCbGVuZENvbG9yLnNldCggMCwgMCwgMCApOwogICAgCQkJCWN1cnJlbnRCbGVuZEFscGhhID0gMDsKCiAgICAJCQkJY3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7CiAgICAJCQkJY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gcHJlbXVsdGlwbGllZEFscGhhOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm47CgogICAgCQl9CgogICAgCQkvLyBjdXN0b20gYmxlbmRpbmcKCiAgICAJCWJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uOwogICAgCQlibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYzsKICAgIAkJYmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGEgfHwgYmxlbmREc3Q7CgogICAgCQlpZiAoIGJsZW5kRXF1YXRpb24gIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uIHx8IGJsZW5kRXF1YXRpb25BbHBoYSAhPT0gY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSApIHsKCiAgICAJCQlnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbiBdLCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb25BbHBoYSBdICk7CgogICAgCQkJY3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uOwogICAgCQkJY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTsKCiAgICAJCX0KCiAgICAJCWlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkgewoKICAgIAkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBmYWN0b3JUb0dMWyBibGVuZFNyYyBdLCBmYWN0b3JUb0dMWyBibGVuZERzdCBdLCBmYWN0b3JUb0dMWyBibGVuZFNyY0FscGhhIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0QWxwaGEgXSApOwoKICAgIAkJCWN1cnJlbnRCbGVuZFNyYyA9IGJsZW5kU3JjOwogICAgCQkJY3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7CiAgICAJCQljdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7CiAgICAJCQljdXJyZW50QmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGE7CgogICAgCQl9CgogICAgCQlpZiAoIGJsZW5kQ29sb3IuZXF1YWxzKCBjdXJyZW50QmxlbmRDb2xvciApID09PSBmYWxzZSB8fCBibGVuZEFscGhhICE9PSBjdXJyZW50QmxlbmRBbHBoYSApIHsKCiAgICAJCQlnbC5ibGVuZENvbG9yKCBibGVuZENvbG9yLnIsIGJsZW5kQ29sb3IuZywgYmxlbmRDb2xvci5iLCBibGVuZEFscGhhICk7CgogICAgCQkJY3VycmVudEJsZW5kQ29sb3IuY29weSggYmxlbmRDb2xvciApOwogICAgCQkJY3VycmVudEJsZW5kQWxwaGEgPSBibGVuZEFscGhhOwoKICAgIAkJfQoKICAgIAkJY3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7CiAgICAJCWN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKSB7CgogICAgCQltYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlCiAgICAJCQk/IGRpc2FibGUoIGdsLkNVTExfRkFDRSApCiAgICAJCQk6IGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7CgogICAgCQlsZXQgZmxpcFNpZGVkID0gKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApOwogICAgCQlpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7CgogICAgCQlzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApOwoKICAgIAkJKCBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlICkKICAgIAkJCT8gc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKQogICAgCQkJOiBzZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5ibGVuZENvbG9yLCBtYXRlcmlhbC5ibGVuZEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTsKCiAgICAJCWRlcHRoQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLmRlcHRoRnVuYyApOwogICAgCQlkZXB0aEJ1ZmZlci5zZXRUZXN0KCBtYXRlcmlhbC5kZXB0aFRlc3QgKTsKICAgIAkJZGVwdGhCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuZGVwdGhXcml0ZSApOwogICAgCQljb2xvckJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5jb2xvcldyaXRlICk7CgogICAgCQljb25zdCBzdGVuY2lsV3JpdGUgPSBtYXRlcmlhbC5zdGVuY2lsV3JpdGU7CiAgICAJCXN0ZW5jaWxCdWZmZXIuc2V0VGVzdCggc3RlbmNpbFdyaXRlICk7CiAgICAJCWlmICggc3RlbmNpbFdyaXRlICkgewoKICAgIAkJCXN0ZW5jaWxCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayApOwogICAgCQkJc3RlbmNpbEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrICk7CiAgICAJCQlzdGVuY2lsQnVmZmVyLnNldE9wKCBtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgKTsKCiAgICAJCX0KCiAgICAJCXNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApOwoKICAgIAkJbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSB0cnVlCiAgICAJCQk/IGVuYWJsZSggZ2wuU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFICkKICAgIAkJCTogZGlzYWJsZSggZ2wuU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFICk7CgogICAgCX0KCiAgICAJLy8KCiAgICAJZnVuY3Rpb24gc2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKSB7CgogICAgCQlpZiAoIGN1cnJlbnRGbGlwU2lkZWQgIT09IGZsaXBTaWRlZCApIHsKCiAgICAJCQlpZiAoIGZsaXBTaWRlZCApIHsKCiAgICAJCQkJZ2wuZnJvbnRGYWNlKCBnbC5DVyApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWdsLmZyb250RmFjZSggZ2wuQ0NXICk7CgogICAgCQkJfQoKICAgIAkJCWN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gc2V0Q3VsbEZhY2UoIGN1bGxGYWNlICkgewoKICAgIAkJaWYgKCBjdWxsRmFjZSAhPT0gQ3VsbEZhY2VOb25lICkgewoKICAgIAkJCWVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7CgogICAgCQkJaWYgKCBjdWxsRmFjZSAhPT0gY3VycmVudEN1bGxGYWNlICkgewoKICAgIAkJCQlpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7CgogICAgCQkJCQlnbC5jdWxsRmFjZSggZ2wuQkFDSyApOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCApIHsKCiAgICAJCQkJCWdsLmN1bGxGYWNlKCBnbC5GUk9OVCApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJZ2wuY3VsbEZhY2UoIGdsLkZST05UX0FORF9CQUNLICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWRpc2FibGUoIGdsLkNVTExfRkFDRSApOwoKICAgIAkJfQoKICAgIAkJY3VycmVudEN1bGxGYWNlID0gY3VsbEZhY2U7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHsKCiAgICAJCWlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7CgogICAgCQkJaWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSBnbC5saW5lV2lkdGgoIHdpZHRoICk7CgogICAgCQkJY3VycmVudExpbmVXaWR0aCA9IHdpZHRoOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7CgogICAgCQlpZiAoIHBvbHlnb25PZmZzZXQgKSB7CgogICAgCQkJZW5hYmxlKCBnbC5QT0xZR09OX09GRlNFVF9GSUxMICk7CgogICAgCQkJaWYgKCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuaXRzICkgewoKICAgIAkJCQlnbC5wb2x5Z29uT2Zmc2V0KCBmYWN0b3IsIHVuaXRzICk7CgogICAgCQkJCWN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yOwogICAgCQkJCWN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSB1bml0czsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7CgogICAgCQlpZiAoIHNjaXNzb3JUZXN0ICkgewoKICAgIAkJCWVuYWJsZSggZ2wuU0NJU1NPUl9URVNUICk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWRpc2FibGUoIGdsLlNDSVNTT1JfVEVTVCApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8vIHRleHR1cmUKCiAgICAJZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkgewoKICAgIAkJaWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxOwoKICAgIAkJaWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHsKCiAgICAJCQlnbC5hY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKTsKICAgIAkJCWN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUsIHdlYmdsU2xvdCApIHsKCiAgICAJCWlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJaWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgPT09IG51bGwgKSB7CgogICAgCQkJCXdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXdlYmdsU2xvdCA9IGN1cnJlbnRUZXh0dXJlU2xvdDsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlsZXQgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIHdlYmdsU2xvdCBdOwoKICAgIAkJaWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlib3VuZFRleHR1cmUgPSB7IHR5cGU6IHVuZGVmaW5lZCwgdGV4dHVyZTogdW5kZWZpbmVkIH07CiAgICAJCQljdXJyZW50Qm91bmRUZXh0dXJlc1sgd2ViZ2xTbG90IF0gPSBib3VuZFRleHR1cmU7CgogICAgCQl9CgogICAgCQlpZiAoIGJvdW5kVGV4dHVyZS50eXBlICE9PSB3ZWJnbFR5cGUgfHwgYm91bmRUZXh0dXJlLnRleHR1cmUgIT09IHdlYmdsVGV4dHVyZSApIHsKCiAgICAJCQlpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCAhPT0gd2ViZ2xTbG90ICkgewoKICAgIAkJCQlnbC5hY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKTsKICAgIAkJCQljdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7CgogICAgCQkJfQoKICAgIAkJCWdsLmJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSB8fCBlbXB0eVRleHR1cmVzWyB3ZWJnbFR5cGUgXSApOwoKICAgIAkJCWJvdW5kVGV4dHVyZS50eXBlID0gd2ViZ2xUeXBlOwogICAgCQkJYm91bmRUZXh0dXJlLnRleHR1cmUgPSB3ZWJnbFRleHR1cmU7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdW5iaW5kVGV4dHVyZSgpIHsKCiAgICAJCWNvbnN0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTsKCiAgICAJCWlmICggYm91bmRUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgYm91bmRUZXh0dXJlLnR5cGUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlnbC5iaW5kVGV4dHVyZSggYm91bmRUZXh0dXJlLnR5cGUsIG51bGwgKTsKCiAgICAJCQlib3VuZFRleHR1cmUudHlwZSA9IHVuZGVmaW5lZDsKICAgIAkJCWJvdW5kVGV4dHVyZS50ZXh0dXJlID0gdW5kZWZpbmVkOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRCggLi4uYXJndW1lbnRzICk7CgogICAgCQl9IGNhdGNoICggZXJyb3IgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBjb21wcmVzc2VkVGV4SW1hZ2UzRCgpIHsKCiAgICAJCXRyeSB7CgogICAgCQkJZ2wuY29tcHJlc3NlZFRleEltYWdlM0QoIC4uLmFyZ3VtZW50cyApOwoKICAgIAkJfSBjYXRjaCAoIGVycm9yICkgewoKICAgIAkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdGV4U3ViSW1hZ2UyRCgpIHsKCiAgICAJCXRyeSB7CgogICAgCQkJZ2wudGV4U3ViSW1hZ2UyRCggLi4uYXJndW1lbnRzICk7CgogICAgCQl9IGNhdGNoICggZXJyb3IgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB0ZXhTdWJJbWFnZTNEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC50ZXhTdWJJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTsKCiAgICAJCX0gY2F0Y2ggKCBlcnJvciApIHsKCiAgICAJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggLi4uYXJndW1lbnRzICk7CgogICAgCQl9IGNhdGNoICggZXJyb3IgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCgpIHsKCiAgICAJCXRyeSB7CgogICAgCQkJZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIC4uLmFyZ3VtZW50cyApOwoKICAgIAkJfSBjYXRjaCAoIGVycm9yICkgewoKICAgIAkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdGV4U3RvcmFnZTJEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC50ZXhTdG9yYWdlMkQoIC4uLmFyZ3VtZW50cyApOwoKICAgIAkJfSBjYXRjaCAoIGVycm9yICkgewoKICAgIAkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdGV4U3RvcmFnZTNEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC50ZXhTdG9yYWdlM0QoIC4uLmFyZ3VtZW50cyApOwoKICAgIAkJfSBjYXRjaCAoIGVycm9yICkgewoKICAgIAkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHsKCiAgICAJCXRyeSB7CgogICAgCQkJZ2wudGV4SW1hZ2UyRCggLi4uYXJndW1lbnRzICk7CgogICAgCQl9IGNhdGNoICggZXJyb3IgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB0ZXhJbWFnZTNEKCkgewoKICAgIAkJdHJ5IHsKCiAgICAJCQlnbC50ZXhJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTsKCiAgICAJCX0gY2F0Y2ggKCBlcnJvciApIHsKCiAgICAJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8vCgogICAgCWZ1bmN0aW9uIHNjaXNzb3IoIHNjaXNzb3IgKSB7CgogICAgCQlpZiAoIGN1cnJlbnRTY2lzc29yLmVxdWFscyggc2Npc3NvciApID09PSBmYWxzZSApIHsKCiAgICAJCQlnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTsKICAgIAkJCWN1cnJlbnRTY2lzc29yLmNvcHkoIHNjaXNzb3IgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB2aWV3cG9ydCggdmlld3BvcnQgKSB7CgogICAgCQlpZiAoIGN1cnJlbnRWaWV3cG9ydC5lcXVhbHMoIHZpZXdwb3J0ICkgPT09IGZhbHNlICkgewoKICAgIAkJCWdsLnZpZXdwb3J0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC56LCB2aWV3cG9ydC53ICk7CiAgICAJCQljdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB1cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkgewoKICAgIAkJbGV0IG1hcHBpbmcgPSB1Ym9Qcm9ncmFtTWFwLmdldCggcHJvZ3JhbSApOwoKICAgIAkJaWYgKCBtYXBwaW5nID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJbWFwcGluZyA9IG5ldyBXZWFrTWFwKCk7CgogICAgCQkJdWJvUHJvZ3JhbU1hcC5zZXQoIHByb2dyYW0sIG1hcHBpbmcgKTsKCiAgICAJCX0KCiAgICAJCWxldCBibG9ja0luZGV4ID0gbWFwcGluZy5nZXQoIHVuaWZvcm1zR3JvdXAgKTsKCiAgICAJCWlmICggYmxvY2tJbmRleCA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCWJsb2NrSW5kZXggPSBnbC5nZXRVbmlmb3JtQmxvY2tJbmRleCggcHJvZ3JhbSwgdW5pZm9ybXNHcm91cC5uYW1lICk7CgogICAgCQkJbWFwcGluZy5zZXQoIHVuaWZvcm1zR3JvdXAsIGJsb2NrSW5kZXggKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiB1bmlmb3JtQmxvY2tCaW5kaW5nKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkgewoKICAgIAkJY29uc3QgbWFwcGluZyA9IHVib1Byb2dyYW1NYXAuZ2V0KCBwcm9ncmFtICk7CiAgICAJCWNvbnN0IGJsb2NrSW5kZXggPSBtYXBwaW5nLmdldCggdW5pZm9ybXNHcm91cCApOwoKICAgIAkJaWYgKCB1Ym9CaW5kaW5ncy5nZXQoIHByb2dyYW0gKSAhPT0gYmxvY2tJbmRleCApIHsKCiAgICAJCQkvLyBiaW5kIHNoYWRlciBzcGVjaWZpYyBibG9jayBpbmRleCB0byBnbG9iYWwgYmxvY2sgcG9pbnQKICAgIAkJCWdsLnVuaWZvcm1CbG9ja0JpbmRpbmcoIHByb2dyYW0sIGJsb2NrSW5kZXgsIHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCApOwoKICAgIAkJCXVib0JpbmRpbmdzLnNldCggcHJvZ3JhbSwgYmxvY2tJbmRleCApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8vCgogICAgCWZ1bmN0aW9uIHJlc2V0KCkgewoKICAgIAkJLy8gcmVzZXQgc3RhdGUKCiAgICAJCWdsLmRpc2FibGUoIGdsLkJMRU5EICk7CiAgICAJCWdsLmRpc2FibGUoIGdsLkNVTExfRkFDRSApOwogICAgCQlnbC5kaXNhYmxlKCBnbC5ERVBUSF9URVNUICk7CiAgICAJCWdsLmRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTsKICAgIAkJZ2wuZGlzYWJsZSggZ2wuU0NJU1NPUl9URVNUICk7CiAgICAJCWdsLmRpc2FibGUoIGdsLlNURU5DSUxfVEVTVCApOwogICAgCQlnbC5kaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTsKCiAgICAJCWdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7CiAgICAJCWdsLmJsZW5kRnVuYyggZ2wuT05FLCBnbC5aRVJPICk7CiAgICAJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5PTkUsIGdsLlpFUk8sIGdsLk9ORSwgZ2wuWkVSTyApOwogICAgCQlnbC5ibGVuZENvbG9yKCAwLCAwLCAwLCAwICk7CgogICAgCQlnbC5jb2xvck1hc2soIHRydWUsIHRydWUsIHRydWUsIHRydWUgKTsKICAgIAkJZ2wuY2xlYXJDb2xvciggMCwgMCwgMCwgMCApOwoKICAgIAkJZ2wuZGVwdGhNYXNrKCB0cnVlICk7CiAgICAJCWdsLmRlcHRoRnVuYyggZ2wuTEVTUyApOwoKICAgIAkJZGVwdGhCdWZmZXIuc2V0UmV2ZXJzZWQoIGZhbHNlICk7CgogICAgCQlnbC5jbGVhckRlcHRoKCAxICk7CgogICAgCQlnbC5zdGVuY2lsTWFzayggMHhmZmZmZmZmZiApOwogICAgCQlnbC5zdGVuY2lsRnVuYyggZ2wuQUxXQVlTLCAwLCAweGZmZmZmZmZmICk7CiAgICAJCWdsLnN0ZW5jaWxPcCggZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuS0VFUCApOwogICAgCQlnbC5jbGVhclN0ZW5jaWwoIDAgKTsKCiAgICAJCWdsLmN1bGxGYWNlKCBnbC5CQUNLICk7CiAgICAJCWdsLmZyb250RmFjZSggZ2wuQ0NXICk7CgogICAgCQlnbC5wb2x5Z29uT2Zmc2V0KCAwLCAwICk7CgogICAgCQlnbC5hY3RpdmVUZXh0dXJlKCBnbC5URVhUVVJFMCApOwoKICAgIAkJZ2wuYmluZEZyYW1lYnVmZmVyKCBnbC5GUkFNRUJVRkZFUiwgbnVsbCApOwogICAgCQlnbC5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTsKICAgIAkJZ2wuYmluZEZyYW1lYnVmZmVyKCBnbC5SRUFEX0ZSQU1FQlVGRkVSLCBudWxsICk7CgogICAgCQlnbC51c2VQcm9ncmFtKCBudWxsICk7CgogICAgCQlnbC5saW5lV2lkdGgoIDEgKTsKCiAgICAJCWdsLnNjaXNzb3IoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApOwogICAgCQlnbC52aWV3cG9ydCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7CgogICAgCQkvLyByZXNldCBpbnRlcm5hbHMKCiAgICAJCWVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTsKCiAgICAJCWN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7CiAgICAJCWN1cnJlbnRCb3VuZFRleHR1cmVzID0ge307CgogICAgCQljdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnMgPSB7fTsKICAgIAkJY3VycmVudERyYXdidWZmZXJzID0gbmV3IFdlYWtNYXAoKTsKICAgIAkJZGVmYXVsdERyYXdidWZmZXJzID0gW107CgogICAgCQljdXJyZW50UHJvZ3JhbSA9IG51bGw7CgogICAgCQljdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7CiAgICAJCWN1cnJlbnRCbGVuZGluZyA9IG51bGw7CiAgICAJCWN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDsKICAgIAkJY3VycmVudEJsZW5kU3JjID0gbnVsbDsKICAgIAkJY3VycmVudEJsZW5kRHN0ID0gbnVsbDsKICAgIAkJY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7CiAgICAJCWN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDsKICAgIAkJY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsOwogICAgCQljdXJyZW50QmxlbmRDb2xvciA9IG5ldyBDb2xvciggMCwgMCwgMCApOwogICAgCQljdXJyZW50QmxlbmRBbHBoYSA9IDA7CiAgICAJCWN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlOwoKICAgIAkJY3VycmVudEZsaXBTaWRlZCA9IG51bGw7CiAgICAJCWN1cnJlbnRDdWxsRmFjZSA9IG51bGw7CgogICAgCQljdXJyZW50TGluZVdpZHRoID0gbnVsbDsKCiAgICAJCWN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDsKICAgIAkJY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7CgogICAgCQljdXJyZW50U2Npc3Nvci5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApOwogICAgCQljdXJyZW50Vmlld3BvcnQuc2V0KCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTsKCiAgICAJCWNvbG9yQnVmZmVyLnJlc2V0KCk7CiAgICAJCWRlcHRoQnVmZmVyLnJlc2V0KCk7CiAgICAJCXN0ZW5jaWxCdWZmZXIucmVzZXQoKTsKCiAgICAJfQoKICAgIAlyZXR1cm4gewoKICAgIAkJYnVmZmVyczogewogICAgCQkJY29sb3I6IGNvbG9yQnVmZmVyLAogICAgCQkJZGVwdGg6IGRlcHRoQnVmZmVyLAogICAgCQkJc3RlbmNpbDogc3RlbmNpbEJ1ZmZlcgogICAgCQl9LAoKICAgIAkJZW5hYmxlOiBlbmFibGUsCiAgICAJCWRpc2FibGU6IGRpc2FibGUsCgogICAgCQliaW5kRnJhbWVidWZmZXI6IGJpbmRGcmFtZWJ1ZmZlciwKICAgIAkJZHJhd0J1ZmZlcnM6IGRyYXdCdWZmZXJzLAoKICAgIAkJdXNlUHJvZ3JhbTogdXNlUHJvZ3JhbSwKCiAgICAJCXNldEJsZW5kaW5nOiBzZXRCbGVuZGluZywKICAgIAkJc2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLAoKICAgIAkJc2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsCiAgICAJCXNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSwKCiAgICAJCXNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLAogICAgCQlzZXRQb2x5Z29uT2Zmc2V0OiBzZXRQb2x5Z29uT2Zmc2V0LAoKICAgIAkJc2V0U2Npc3NvclRlc3Q6IHNldFNjaXNzb3JUZXN0LAoKICAgIAkJYWN0aXZlVGV4dHVyZTogYWN0aXZlVGV4dHVyZSwKICAgIAkJYmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLAogICAgCQl1bmJpbmRUZXh0dXJlOiB1bmJpbmRUZXh0dXJlLAogICAgCQljb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsCiAgICAJCWNvbXByZXNzZWRUZXhJbWFnZTNEOiBjb21wcmVzc2VkVGV4SW1hZ2UzRCwKICAgIAkJdGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCwKICAgIAkJdGV4SW1hZ2UzRDogdGV4SW1hZ2UzRCwKCiAgICAJCXVwZGF0ZVVCT01hcHBpbmc6IHVwZGF0ZVVCT01hcHBpbmcsCiAgICAJCXVuaWZvcm1CbG9ja0JpbmRpbmc6IHVuaWZvcm1CbG9ja0JpbmRpbmcsCgogICAgCQl0ZXhTdG9yYWdlMkQ6IHRleFN0b3JhZ2UyRCwKICAgIAkJdGV4U3RvcmFnZTNEOiB0ZXhTdG9yYWdlM0QsCiAgICAJCXRleFN1YkltYWdlMkQ6IHRleFN1YkltYWdlMkQsCiAgICAJCXRleFN1YkltYWdlM0Q6IHRleFN1YkltYWdlM0QsCiAgICAJCWNvbXByZXNzZWRUZXhTdWJJbWFnZTJEOiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCwKICAgIAkJY29tcHJlc3NlZFRleFN1YkltYWdlM0Q6IGNvbXByZXNzZWRUZXhTdWJJbWFnZTNELAoKICAgIAkJc2Npc3Nvcjogc2Npc3NvciwKICAgIAkJdmlld3BvcnQ6IHZpZXdwb3J0LAoKICAgIAkJcmVzZXQ6IHJlc2V0CgogICAgCX07CgogICAgfQoKICAgIGZ1bmN0aW9uIFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKSB7CgogICAgCWNvbnN0IG11bHRpc2FtcGxlZFJUVEV4dCA9IGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID8gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgOiBudWxsOwogICAgCWNvbnN0IHN1cHBvcnRzSW52YWxpZGF0ZUZyYW1lYnVmZmVyID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxzZSA6IC9PY3VsdXNCcm93c2VyL2cudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoKICAgIAljb25zdCBfaW1hZ2VEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoKTsKICAgIAljb25zdCBfdmlkZW9UZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7CiAgICAJbGV0IF9jYW52YXM7CgogICAgCWNvbnN0IF9zb3VyY2VzID0gbmV3IFdlYWtNYXAoKTsgLy8gbWFwcyBXZWJnbFRleHR1cmUgb2JqZWN0cyB0byBpbnN0YW5jZXMgb2YgU291cmNlCgogICAgCS8vIGNvcmRvdmEgaU9TIChhcyBvZiA1LjApIHN0aWxsIHVzZXMgVUlXZWJWaWV3LCB3aGljaCBwcm92aWRlcyBPZmZzY3JlZW5DYW52YXMsCiAgICAJLy8gYWxzbyBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgid2ViZ2wiKSwgYnV0IG5vdCBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgiMmQiKSEKICAgIAkvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtYXkgb25seSBpbXBsZW1lbnQgT2Zmc2NyZWVuQ2FudmFzIHBhcnRpYWxseSAoZS5nLiBsYWNraW5nIDJkKS4KCiAgICAJbGV0IHVzZU9mZnNjcmVlbkNhbnZhcyA9IGZhbHNlOwoKICAgIAl0cnkgewoKICAgIAkJdXNlT2Zmc2NyZWVuQ2FudmFzID0gdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcKICAgIAkJCS8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wYXQvY29tcGF0CiAgICAJCQkmJiAoIG5ldyBPZmZzY3JlZW5DYW52YXMoIDEsIDEgKS5nZXRDb250ZXh0KCAnMmQnICkgKSAhPT0gbnVsbDsKCiAgICAJfSBjYXRjaCAoIGVyciApIHsKCiAgICAJCS8vIElnbm9yZSBhbnkgZXJyb3JzCgogICAgCX0KCiAgICAJZnVuY3Rpb24gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgewoKICAgIAkJLy8gVXNlIE9mZnNjcmVlbkNhbnZhcyB3aGVuIGF2YWlsYWJsZS4gU3BlY2lhbGx5IG5lZWRlZCBpbiB3ZWIgd29ya2VycwoKICAgIAkJcmV0dXJuIHVzZU9mZnNjcmVlbkNhbnZhcyA/CiAgICAJCQkvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdAogICAgCQkJbmV3IE9mZnNjcmVlbkNhbnZhcyggd2lkdGgsIGhlaWdodCApIDogY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlc2l6ZUltYWdlKCBpbWFnZSwgbmVlZHNOZXdDYW52YXMsIG1heFNpemUgKSB7CgogICAgCQlsZXQgc2NhbGUgPSAxOwoKICAgIAkJY29uc3QgZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIGltYWdlICk7CgogICAgCQkvLyBoYW5kbGUgY2FzZSBpZiB0ZXh0dXJlIGV4Y2VlZHMgbWF4IHNpemUKCiAgICAJCWlmICggZGltZW5zaW9ucy53aWR0aCA+IG1heFNpemUgfHwgZGltZW5zaW9ucy5oZWlnaHQgPiBtYXhTaXplICkgewoKICAgIAkJCXNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApOwoKICAgIAkJfQoKICAgIAkJLy8gb25seSBwZXJmb3JtIHJlc2l6ZSBpZiBuZWNlc3NhcnkKCiAgICAJCWlmICggc2NhbGUgPCAxICkgewoKICAgIAkJCS8vIG9ubHkgcGVyZm9ybSByZXNpemUgZm9yIGNlcnRhaW4gaW1hZ2UgdHlwZXMKCiAgICAJCQlpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8CiAgICAJCQkJKCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fAogICAgCQkJCSggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgfHwKICAgIAkJCQkoIHR5cGVvZiBWaWRlb0ZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIFZpZGVvRnJhbWUgKSApIHsKCiAgICAJCQkJY29uc3Qgd2lkdGggPSBNYXRoLmZsb29yKCBzY2FsZSAqIGRpbWVuc2lvbnMud2lkdGggKTsKICAgIAkJCQljb25zdCBoZWlnaHQgPSBNYXRoLmZsb29yKCBzY2FsZSAqIGRpbWVuc2lvbnMuaGVpZ2h0ICk7CgogICAgCQkJCWlmICggX2NhbnZhcyA9PT0gdW5kZWZpbmVkICkgX2NhbnZhcyA9IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApOwoKICAgIAkJCQkvLyBjdWJlIHRleHR1cmVzIGNhbid0IHJldXNlIHRoZSBzYW1lIGNhbnZhcwoKICAgIAkJCQljb25zdCBjYW52YXMgPSBuZWVkc05ld0NhbnZhcyA/IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIDogX2NhbnZhczsKCiAgICAJCQkJY2FudmFzLndpZHRoID0gd2lkdGg7CiAgICAJCQkJY2FudmFzLmhlaWdodCA9IGhlaWdodDsKCiAgICAJCQkJY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7CiAgICAJCQkJY29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7CgogICAgCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaGFzIGJlZW4gcmVzaXplZCBmcm9tICgnICsgZGltZW5zaW9ucy53aWR0aCArICd4JyArIGRpbWVuc2lvbnMuaGVpZ2h0ICsgJykgdG8gKCcgKyB3aWR0aCArICd4JyArIGhlaWdodCArICcpLicgKTsKCiAgICAJCQkJcmV0dXJuIGNhbnZhczsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlpZiAoICdkYXRhJyBpbiBpbWFnZSApIHsKCiAgICAJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBkaW1lbnNpb25zLndpZHRoICsgJ3gnICsgZGltZW5zaW9ucy5oZWlnaHQgKyAnKS4nICk7CgogICAgCQkJCX0KCiAgICAJCQkJcmV0dXJuIGltYWdlOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiBpbWFnZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSB7CgogICAgCQlyZXR1cm4gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApIHsKCiAgICAJCV9nbC5nZW5lcmF0ZU1pcG1hcCggdGFyZ2V0ICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSggdGV4dHVyZSApIHsKCiAgICAJCWlmICggdGV4dHVyZS5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApIHJldHVybiBfZ2wuVEVYVFVSRV9DVUJFX01BUDsKICAgIAkJaWYgKCB0ZXh0dXJlLmlzV2ViR0wzRFJlbmRlclRhcmdldCApIHJldHVybiBfZ2wuVEVYVFVSRV8zRDsKICAgIAkJaWYgKCB0ZXh0dXJlLmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHJldHVybiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTsKICAgIAkJcmV0dXJuIF9nbC5URVhUVVJFXzJEOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBpbnRlcm5hbEZvcm1hdE5hbWUsIGdsRm9ybWF0LCBnbFR5cGUsIGNvbG9yU3BhY2UsIGZvcmNlTGluZWFyVHJhbnNmZXIgPSBmYWxzZSApIHsKCiAgICAJCWlmICggaW50ZXJuYWxGb3JtYXROYW1lICE9PSBudWxsICkgewoKICAgIAkJCWlmICggX2dsWyBpbnRlcm5hbEZvcm1hdE5hbWUgXSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIF9nbFsgaW50ZXJuYWxGb3JtYXROYW1lIF07CgogICAgCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byB1c2Ugbm9uLWV4aXN0aW5nIFdlYkdMIGludGVybmFsIGZvcm1hdCBcJycgKyBpbnRlcm5hbEZvcm1hdE5hbWUgKyAnXCcnICk7CgogICAgCQl9CgogICAgCQlsZXQgaW50ZXJuYWxGb3JtYXQgPSBnbEZvcm1hdDsKCiAgICAJCWlmICggZ2xGb3JtYXQgPT09IF9nbC5SRUQgKSB7CgogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIzMkY7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTZGOwogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjg7CgogICAgCQl9CgogICAgCQlpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkVEX0lOVEVHRVIgKSB7CgogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjhVSTsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTZVSTsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMyVUk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SOEk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjE2STsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMySTsKCiAgICAJCX0KCiAgICAJCWlmICggZ2xGb3JtYXQgPT09IF9nbC5SRyApIHsKCiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkczMkY7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzE2RjsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHODsKCiAgICAJCX0KCiAgICAJCWlmICggZ2xGb3JtYXQgPT09IF9nbC5SR19JTlRFR0VSICkgewoKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHOFVJOwogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMTZVSTsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkczMlVJOwogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkc4STsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzE2STsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkczMkk7CgogICAgCQl9CgogICAgCQlpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCX0lOVEVHRVIgKSB7CgogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCOFVJOwogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjE2VUk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMyVUk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0I4STsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0IxNkk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMySTsKCiAgICAJCX0KCiAgICAJCWlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JBX0lOVEVHRVIgKSB7CgogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQThVSTsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBMTZVSTsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTMyVUk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBOEk7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTE2STsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTMySTsKCiAgICAJCX0KCiAgICAJCWlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0IgKSB7CgogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9JTlRfNV85XzlfOV9SRVYgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0I5X0U1OwoKICAgIAkJfQoKICAgIAkJaWYgKCBnbEZvcm1hdCA9PT0gX2dsLlJHQkEgKSB7CgogICAgCQkJY29uc3QgdHJhbnNmZXIgPSBmb3JjZUxpbmVhclRyYW5zZmVyID8gTGluZWFyVHJhbnNmZXIgOiBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKTsKCiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTMyRjsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkExNkY7CiAgICAJCQlpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9ICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gX2dsLlNSR0I4X0FMUEhBOCA6IF9nbC5SR0JBODsKICAgIAkJCWlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkE0OwogICAgCQkJaWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCNV9BMTsKCiAgICAJCX0KCiAgICAJCWlmICggaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SMTZGIHx8IGludGVybmFsRm9ybWF0ID09PSBfZ2wuUjMyRiB8fAogICAgCQkJaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SRzE2RiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlJHMzJGIHx8CiAgICAJCQlpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlJHQkExNkYgfHwgaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SR0JBMzJGICkgewoKICAgIAkJCWV4dGVuc2lvbnMuZ2V0KCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBpbnRlcm5hbEZvcm1hdDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCB1c2VTdGVuY2lsLCBkZXB0aFR5cGUgKSB7CgogICAgCQlsZXQgZ2xJbnRlcm5hbEZvcm1hdDsKICAgIAkJaWYgKCB1c2VTdGVuY2lsICkgewoKICAgIAkJCWlmICggZGVwdGhUeXBlID09PSBudWxsIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkgewoKICAgIAkJCQlnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIMjRfU1RFTkNJTDg7CgogICAgCQkJfSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBGbG9hdFR5cGUgKSB7CgogICAgCQkJCWdsSW50ZXJuYWxGb3JtYXQgPSBfZ2wuREVQVEgzMkZfU1RFTkNJTDg7CgogICAgCQkJfSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHsKCiAgICAJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSDI0X1NURU5DSUw4OwogICAgCQkJCWNvbnNvbGUud2FybiggJ0RlcHRoVGV4dHVyZTogMTYgYml0IGRlcHRoIGF0dGFjaG1lbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHN0ZW5jaWwuIFVzaW5nIDI0LWJpdCBhdHRhY2htZW50LicgKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWlmICggZGVwdGhUeXBlID09PSBudWxsIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkgewoKICAgIAkJCQlnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDI0OwoKICAgIAkJCX0gZWxzZSBpZiAoIGRlcHRoVHlwZSA9PT0gRmxvYXRUeXBlICkgewoKICAgIAkJCQlnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDMyRjsKCiAgICAJCQl9IGVsc2UgaWYgKCBkZXB0aFR5cGUgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgewoKICAgIAkJCQlnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDE2OwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiBnbEludGVybmFsRm9ybWF0OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKSB7CgogICAgCQlpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApID09PSB0cnVlIHx8ICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkgKSB7CgogICAgCQkJcmV0dXJuIE1hdGgubG9nMiggTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKSApICsgMTsKCiAgICAJCX0gZWxzZSBpZiAoIHRleHR1cmUubWlwbWFwcyAhPT0gdW5kZWZpbmVkICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkgewoKICAgIAkJCS8vIHVzZXItZGVmaW5lZCBtaXBtYXBzCgogICAgCQkJcmV0dXJuIHRleHR1cmUubWlwbWFwcy5sZW5ndGg7CgogICAgCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgJiYgQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICkgewoKICAgIAkJCXJldHVybiBpbWFnZS5taXBtYXBzLmxlbmd0aDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJLy8gdGV4dHVyZSB3aXRob3V0IG1pcG1hcHMgKG9ubHkgYmFzZSBsZXZlbCkKCiAgICAJCQlyZXR1cm4gMTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAkvLwoKICAgIAlmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHsKCiAgICAJCWNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7CgogICAgCQl0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApOwoKICAgIAkJZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKTsKCiAgICAJCWlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHsKCiAgICAJCQlfdmlkZW9UZXh0dXJlcy5kZWxldGUoIHRleHR1cmUgKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBvblJlbmRlclRhcmdldERpc3Bvc2UoIGV2ZW50ICkgewoKICAgIAkJY29uc3QgcmVuZGVyVGFyZ2V0ID0gZXZlbnQudGFyZ2V0OwoKICAgIAkJcmVuZGVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlICk7CgogICAgCQlkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJfQoKICAgIAkvLwoKICAgIAlmdW5jdGlvbiBkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApIHsKCiAgICAJCWNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTsKCiAgICAJCWlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPT09IHVuZGVmaW5lZCApIHJldHVybjsKCiAgICAJCS8vIGNoZWNrIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIHJlbW92ZSB0aGUgV2ViR0xUZXh0dXJlIG9iamVjdAoKICAgIAkJY29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7CiAgICAJCWNvbnN0IHdlYmdsVGV4dHVyZXMgPSBfc291cmNlcy5nZXQoIHNvdXJjZSApOwoKICAgIAkJaWYgKCB3ZWJnbFRleHR1cmVzICkgewoKICAgIAkJCWNvbnN0IHdlYmdsVGV4dHVyZSA9IHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTsKICAgIAkJCXdlYmdsVGV4dHVyZS51c2VkVGltZXMgLS07CgogICAgCQkJLy8gdGhlIFdlYkdMVGV4dHVyZSBvYmplY3QgaXMgbm90IHVzZWQgYW55bW9yZSwgcmVtb3ZlIGl0CgogICAgCQkJaWYgKCB3ZWJnbFRleHR1cmUudXNlZFRpbWVzID09PSAwICkgewoKICAgIAkJCQlkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICk7CgogICAgCQkJfQoKICAgIAkJCS8vIHJlbW92ZSB0aGUgd2VhayBtYXAgZW50cnkgaWYgbm8gV2ViR0xUZXh0dXJlIHVzZXMgdGhlIHNvdXJjZSBhbnltb3JlCgogICAgCQkJaWYgKCBPYmplY3Qua2V5cyggd2ViZ2xUZXh0dXJlcyApLmxlbmd0aCA9PT0gMCApIHsKCiAgICAJCQkJX3NvdXJjZXMuZGVsZXRlKCBzb3VyY2UgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZSApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKSB7CgogICAgCQljb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7CiAgICAJCV9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoKICAgIAkJY29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7CiAgICAJCWNvbnN0IHdlYmdsVGV4dHVyZXMgPSBfc291cmNlcy5nZXQoIHNvdXJjZSApOwogICAgCQlkZWxldGUgd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdOwoKICAgIAkJaW5mby5tZW1vcnkudGV4dHVyZXMgLS07CgogICAgCX0KCiAgICAJZnVuY3Rpb24gZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApIHsKCiAgICAJCQlyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTsKCiAgICAJCQlwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKSB7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCiAgICAJCQkJaWYgKCBBcnJheS5pc0FycmF5KCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICkgKSB7CgogICAgCQkJCQlmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0ubGVuZ3RoOyBsZXZlbCArKyApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXVsgbGV2ZWwgXSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJX2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWlmICggQXJyYXkuaXNBcnJheSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKSApIHsKCiAgICAJCQkJZm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlci5sZW5ndGg7IGxldmVsICsrICkgX2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgbGV2ZWwgXSApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCV9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyICk7CiAgICAJCQlpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICkgX2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApOwoKICAgIAkJCWlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgKSB7CgogICAgCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJCWlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyICkgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgKTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzOwoKICAgIAkJZm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCWNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTsKCiAgICAJCQlpZiAoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICkgewoKICAgIAkJCQlfZ2wuZGVsZXRlVGV4dHVyZSggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTsKCiAgICAJCQkJaW5mby5tZW1vcnkudGV4dHVyZXMgLS07CgogICAgCQkJfQoKICAgIAkJCXByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlc1sgaSBdICk7CgogICAgCQl9CgogICAgCQlwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0ICk7CgogICAgCX0KCiAgICAJLy8KCiAgICAJbGV0IHRleHR1cmVVbml0cyA9IDA7CgogICAgCWZ1bmN0aW9uIHJlc2V0VGV4dHVyZVVuaXRzKCkgewoKICAgIAkJdGV4dHVyZVVuaXRzID0gMDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBhbGxvY2F0ZVRleHR1cmVVbml0KCkgewoKICAgIAkJY29uc3QgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdHM7CgogICAgCQlpZiAoIHRleHR1cmVVbml0ID49IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApIHsKCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBUcnlpbmcgdG8gdXNlICcgKyB0ZXh0dXJlVW5pdCArICcgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5ICcgKyBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKTsKCiAgICAJCX0KCiAgICAJCXRleHR1cmVVbml0cyArPSAxOwoKICAgIAkJcmV0dXJuIHRleHR1cmVVbml0OwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApIHsKCiAgICAJCWNvbnN0IGFycmF5ID0gW107CgogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBTICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUud3JhcFQgKTsKICAgIAkJYXJyYXkucHVzaCggdGV4dHVyZS53cmFwUiB8fCAwICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUubWFnRmlsdGVyICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUubWluRmlsdGVyICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUuYW5pc290cm9weSApOwogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLmludGVybmFsRm9ybWF0ICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUuZm9ybWF0ICk7CiAgICAJCWFycmF5LnB1c2goIHRleHR1cmUudHlwZSApOwogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApOwogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTsKICAgIAkJYXJyYXkucHVzaCggdGV4dHVyZS5mbGlwWSApOwogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApOwogICAgCQlhcnJheS5wdXNoKCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTsKCiAgICAJCXJldHVybiBhcnJheS5qb2luKCk7CgogICAgCX0KCiAgICAJLy8KCiAgICAJZnVuY3Rpb24gc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICkgewoKICAgIAkJY29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICk7CgogICAgCQlpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSAmJiB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkgewoKICAgIAkJCWNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTsKCiAgICAJCQlpZiAoIGltYWdlID09PSBudWxsICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBubyBpbWFnZSBkYXRhIGZvdW5kLicgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCBpbWFnZS5jb21wbGV0ZSA9PT0gZmFsc2UgKSB7CgogICAgCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTsKICAgIAkJCQlyZXR1cm47CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJc3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJELCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHNldFRleHR1cmUyREFycmF5KCB0ZXh0dXJlLCBzbG90ICkgewoKICAgIAkJY29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkgewoKICAgIAkJCXVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7CiAgICAJCQlyZXR1cm47CgogICAgCQl9CgogICAgCQlzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkRfQVJSQVksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gc2V0VGV4dHVyZTNEKCB0ZXh0dXJlLCBzbG90ICkgewoKICAgIAkJY29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkgewoKICAgIAkJCXVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7CiAgICAJCQlyZXR1cm47CgogICAgCQl9CgogICAgCQlzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfM0QsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7CgogICAgCQljb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7CgogICAgCQlpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7CgogICAgCQkJdXBsb2FkQ3ViZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7CiAgICAJCQlyZXR1cm47CgogICAgCQl9CgogICAgCQlzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7CgogICAgCX0KCiAgICAJY29uc3Qgd3JhcHBpbmdUb0dMID0gewogICAgCQlbIFJlcGVhdFdyYXBwaW5nIF06IF9nbC5SRVBFQVQsCiAgICAJCVsgQ2xhbXBUb0VkZ2VXcmFwcGluZyBdOiBfZ2wuQ0xBTVBfVE9fRURHRSwKICAgIAkJWyBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIF06IF9nbC5NSVJST1JFRF9SRVBFQVQKICAgIAl9OwoKICAgIAljb25zdCBmaWx0ZXJUb0dMID0gewogICAgCQlbIE5lYXJlc3RGaWx0ZXIgXTogX2dsLk5FQVJFU1QsCiAgICAJCVsgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogX2dsLk5FQVJFU1RfTUlQTUFQX05FQVJFU1QsCiAgICAJCVsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSLAoKICAgIAkJWyBMaW5lYXJGaWx0ZXIgXTogX2dsLkxJTkVBUiwKICAgIAkJWyBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIF06IF9nbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QsCiAgICAJCVsgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIF06IF9nbC5MSU5FQVJfTUlQTUFQX0xJTkVBUgogICAgCX07CgogICAgCWNvbnN0IGNvbXBhcmVUb0dMID0gewogICAgCQlbIE5ldmVyQ29tcGFyZSBdOiBfZ2wuTkVWRVIsCiAgICAJCVsgQWx3YXlzQ29tcGFyZSBdOiBfZ2wuQUxXQVlTLAogICAgCQlbIExlc3NDb21wYXJlIF06IF9nbC5MRVNTLAogICAgCQlbIExlc3NFcXVhbENvbXBhcmUgXTogX2dsLkxFUVVBTCwKICAgIAkJWyBFcXVhbENvbXBhcmUgXTogX2dsLkVRVUFMLAogICAgCQlbIEdyZWF0ZXJFcXVhbENvbXBhcmUgXTogX2dsLkdFUVVBTCwKICAgIAkJWyBHcmVhdGVyQ29tcGFyZSBdOiBfZ2wuR1JFQVRFUiwKICAgIAkJWyBOb3RFcXVhbENvbXBhcmUgXTogX2dsLk5PVEVRVUFMCiAgICAJfTsKCiAgICAJZnVuY3Rpb24gc2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlICkgewoKICAgIAkJaWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gZmFsc2UgJiYKICAgIAkJCSggdGV4dHVyZS5tYWdGaWx0ZXIgPT09IExpbmVhckZpbHRlciB8fCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciB8fCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciB8fCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIHx8CiAgICAJCQl0ZXh0dXJlLm1pbkZpbHRlciA9PT0gTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IHRleHR1cmUubWluRmlsdGVyID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgKSApIHsKCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVbmFibGUgdG8gdXNlIGxpbmVhciBmaWx0ZXJpbmcgd2l0aCBmbG9hdGluZyBwb2ludCB0ZXh0dXJlcy4gT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UuJyApOwoKICAgIAkJfQoKICAgIAkJX2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUyBdICk7CiAgICAJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9ULCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFQgXSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlVHlwZSA9PT0gX2dsLlRFWFRVUkVfM0QgfHwgdGV4dHVyZVR5cGUgPT09IF9nbC5URVhUVVJFXzJEX0FSUkFZICkgewoKICAgIAkJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9SLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApOwoKICAgIAkJfQoKICAgIAkJX2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7CiAgICAJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZmlsdGVyVG9HTFsgdGV4dHVyZS5taW5GaWx0ZXIgXSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiApIHsKCiAgICAJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIF9nbC5URVhUVVJFX0NPTVBBUkVfTU9ERSwgX2dsLkNPTVBBUkVfUkVGX1RPX1RFWFRVUkUgKTsKICAgIAkJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlVG9HTFsgdGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gXSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHsKCiAgICAJCQlpZiAoIHRleHR1cmUubWFnRmlsdGVyID09PSBOZWFyZXN0RmlsdGVyICkgcmV0dXJuOwogICAgCQkJaWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyICkgcmV0dXJuOwogICAgCQkJaWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gZmFsc2UgKSByZXR1cm47IC8vIHZlcmlmeSBleHRlbnNpb24KCiAgICAJCQlpZiAoIHRleHR1cmUuYW5pc290cm9weSA+IDEgfHwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ICkgewoKICAgIAkJCQljb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTsKICAgIAkJCQlfZ2wudGV4UGFyYW1ldGVyZiggdGV4dHVyZVR5cGUsIGV4dGVuc2lvbi5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgTWF0aC5taW4oIHRleHR1cmUuYW5pc290cm9weSwgY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKSApICk7CiAgICAJCQkJcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5OwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKSB7CgogICAgCQlsZXQgZm9yY2VVcGxvYWQgPSBmYWxzZTsKCiAgICAJCWlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7CgogICAgCQkJdGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTsKCiAgICAJCX0KCiAgICAJCS8vIGNyZWF0ZSBTb3VyY2UgPC0+IFdlYkdMVGV4dHVyZXMgbWFwcGluZyBpZiBuZWNlc3NhcnkKCiAgICAJCWNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlOwogICAgCQlsZXQgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7CgogICAgCQlpZiAoIHdlYmdsVGV4dHVyZXMgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQl3ZWJnbFRleHR1cmVzID0ge307CiAgICAJCQlfc291cmNlcy5zZXQoIHNvdXJjZSwgd2ViZ2xUZXh0dXJlcyApOwoKICAgIAkJfQoKICAgIAkJLy8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIFdlYkdMVGV4dHVyZSBvYmplY3QgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHBhcmFtZXRlcnMKCiAgICAJCWNvbnN0IHRleHR1cmVDYWNoZUtleSA9IGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApOwoKICAgIAkJaWYgKCB0ZXh0dXJlQ2FjaGVLZXkgIT09IHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgKSB7CgogICAgCQkJLy8gaWYgbm90LCBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgV2ViR0xUZXh0dXJlCgogICAgCQkJaWYgKCB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkvLyBjcmVhdGUgbmV3IGVudHJ5CgogICAgCQkJCXdlYmdsVGV4dHVyZXNbIHRleHR1cmVDYWNoZUtleSBdID0gewogICAgCQkJCQl0ZXh0dXJlOiBfZ2wuY3JlYXRlVGV4dHVyZSgpLAogICAgCQkJCQl1c2VkVGltZXM6IDAKICAgIAkJCQl9OwoKICAgIAkJCQlpbmZvLm1lbW9yeS50ZXh0dXJlcyArKzsKCiAgICAJCQkJLy8gd2hlbiBhIG5ldyBpbnN0YW5jZSBvZiBXZWJHTFRleHR1cmUgd2FzIGNyZWF0ZWQsIGEgdGV4dHVyZSB1cGxvYWQgaXMgcmVxdWlyZWQKICAgIAkJCQkvLyBldmVuIGlmIHRoZSBpbWFnZSBjb250ZW50cyBhcmUgaWRlbnRpY2FsCgogICAgCQkJCWZvcmNlVXBsb2FkID0gdHJ1ZTsKCiAgICAJCQl9CgogICAgCQkJd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udXNlZFRpbWVzICsrOwoKICAgIAkJCS8vIGV2ZXJ5IHRpbWUgdGhlIHRleHR1cmUgY2FjaGUga2V5IGNoYW5nZXMsIGl0J3MgbmVjZXNzYXJ5IHRvIGNoZWNrIGlmIGFuIGluc3RhbmNlIG9mCiAgICAJCQkvLyBXZWJHTFRleHR1cmUgY2FuIGJlIGRlbGV0ZWQgaW4gb3JkZXIgdG8gYXZvaWQgYSBtZW1vcnkgbGVhay4KCiAgICAJCQljb25zdCB3ZWJnbFRleHR1cmUgPSB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF07CgogICAgCQkJaWYgKCB3ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdLnVzZWRUaW1lcyAtLTsKCiAgICAJCQkJaWYgKCB3ZWJnbFRleHR1cmUudXNlZFRpbWVzID09PSAwICkgewoKICAgIAkJCQkJZGVsZXRlVGV4dHVyZSggdGV4dHVyZSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCS8vIHN0b3JlIHJlZmVyZW5jZXMgdG8gY2FjaGUga2V5IGFuZCBXZWJHTFRleHR1cmUgb2JqZWN0CgogICAgCQkJdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSA9IHRleHR1cmVDYWNoZUtleTsKICAgIAkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udGV4dHVyZTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBmb3JjZVVwbG9hZDsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBnZXRSb3coIGluZGV4LCByb3dMZW5ndGgsIGNvbXBvbmVudFN0cmlkZSApIHsKCiAgICAJCXJldHVybiBNYXRoLmZsb29yKCBNYXRoLmZsb29yKCBpbmRleCAvIGNvbXBvbmVudFN0cmlkZSApIC8gcm93TGVuZ3RoICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBkYXRlVGV4dHVyZSggdGV4dHVyZSwgaW1hZ2UsIGdsRm9ybWF0LCBnbFR5cGUgKSB7CgogICAgCQljb25zdCBjb21wb25lbnRTdHJpZGUgPSA0OyAvLyBvbmx5IFJHQkEgc3VwcG9ydGVkCgogICAgCQljb25zdCB1cGRhdGVSYW5nZXMgPSB0ZXh0dXJlLnVwZGF0ZVJhbmdlczsKCiAgICAJCWlmICggdXBkYXRlUmFuZ2VzLmxlbmd0aCA9PT0gMCApIHsKCiAgICAJCQlzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQkvLyBCZWZvcmUgYXBwbHlpbmcgdXBkYXRlIHJhbmdlcywgd2UgbWVyZ2UgYW55IGFkamFjZW50IC8gb3ZlcmxhcHBpbmcKICAgIAkJCS8vIHJhbmdlcyB0byByZWR1Y2UgbG9hZCBvbiBgZ2wudGV4U3ViSW1hZ2UyRGAuIEVtcGlyaWNhbGx5LCB0aGlzIGhhcyBsZWQKICAgIAkJCS8vIHRvIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBmb3IgYXBwbGljYXRpb25zIHdoaWNoIG1ha2UgaGVhdnkgdXNlIG9mCiAgICAJCQkvLyB1cGRhdGUgcmFuZ2VzLiBMaWtlbHkgZHVlIHRvIEdQVSBjb21tYW5kIG92ZXJoZWFkLgogICAgCQkJLy8KICAgIAkJCS8vIE5vdGUgdGhhdCB0byByZWR1Y2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGJldHdlZW4gZnJhbWVzLCB3ZSBtZXJnZSB0aGUKICAgIAkJCS8vIHVwZGF0ZSByYW5nZXMgaW4tcGxhY2UuIFRoaXMgaXMgc2FmZSBiZWNhdXNlIHRoaXMgbWV0aG9kIHdpbGwgY2xlYXIgdGhlCiAgICAJCQkvLyB1cGRhdGUgcmFuZ2VzIG9uY2UgdXBkYXRlZC4KCiAgICAJCQl1cGRhdGVSYW5nZXMuc29ydCggKCBhLCBiICkgPT4gYS5zdGFydCAtIGIuc3RhcnQgKTsKCiAgICAJCQkvLyBUbyBtZXJnZSB0aGUgdXBkYXRlIHJhbmdlcyBpbi1wbGFjZSwgd2Ugd29yayBmcm9tIGxlZnQgdG8gcmlnaHQgaW4gdGhlCiAgICAJCQkvLyBleGlzdGluZyB1cGRhdGVSYW5nZXMgYXJyYXksIG1lcmdpbmcgcmFuZ2VzLiBUaGlzIG1heSByZXN1bHQgaW4gYSBmaW5hbAogICAgCQkJLy8gYXJyYXkgd2hpY2ggaXMgc21hbGxlciB0aGFuIHRoZSBvcmlnaW5hbC4gVGhpcyBpbmRleCB0cmFja3MgdGhlIGxhc3QKICAgIAkJCS8vIGluZGV4IHJlcHJlc2VudGluZyBhIG1lcmdlZCByYW5nZSwgYW55IGRhdGEgYWZ0ZXIgdGhpcyBpbmRleCBjYW4gYmUKICAgIAkJCS8vIHRyaW1tZWQgb25jZSB0aGUgbWVyZ2UgYWxnb3JpdGhtIGlzIGNvbXBsZXRlZC4KICAgIAkJCWxldCBtZXJnZUluZGV4ID0gMDsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDE7IGkgPCB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQljb25zdCBwcmV2aW91c1JhbmdlID0gdXBkYXRlUmFuZ2VzWyBtZXJnZUluZGV4IF07CiAgICAJCQkJY29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTsKCiAgICAJCQkJLy8gT25seSBtZXJnZSBpZiBpbiB0aGUgc2FtZSByb3cgYW5kIG92ZXJsYXBwaW5nL2FkamFjZW50CiAgICAJCQkJY29uc3QgcHJldmlvdXNFbmQgPSBwcmV2aW91c1JhbmdlLnN0YXJ0ICsgcHJldmlvdXNSYW5nZS5jb3VudDsKICAgIAkJCQljb25zdCBjdXJyZW50Um93ID0gZ2V0Um93KCByYW5nZS5zdGFydCwgaW1hZ2Uud2lkdGgsIGNvbXBvbmVudFN0cmlkZSApOwogICAgCQkJCWNvbnN0IHByZXZpb3VzUm93ID0gZ2V0Um93KCBwcmV2aW91c1JhbmdlLnN0YXJ0LCBpbWFnZS53aWR0aCwgY29tcG9uZW50U3RyaWRlICk7CgogICAgCQkJCS8vIFdlIGFkZCBvbmUgaGVyZSB0byBtZXJnZSBhZGphY2VudCByYW5nZXMuIFRoaXMgaXMgc2FmZSBiZWNhdXNlIHJhbmdlcwogICAgCQkJCS8vIG9wZXJhdGUgb3ZlciBwb3NpdGl2ZSBpbnRlZ2Vycy4KICAgIAkJCQlpZiAoCiAgICAJCQkJCXJhbmdlLnN0YXJ0IDw9IHByZXZpb3VzRW5kICsgMSAmJgogICAgCQkJCQljdXJyZW50Um93ID09PSBwcmV2aW91c1JvdyAmJgogICAgCQkJCQlnZXRSb3coIHJhbmdlLnN0YXJ0ICsgcmFuZ2UuY291bnQgLSAxLCBpbWFnZS53aWR0aCwgY29tcG9uZW50U3RyaWRlICkgPT09IGN1cnJlbnRSb3cgLy8gZW5zdXJlIHJhbmdlIGRvZXNuJ3Qgc3BpbGwKICAgIAkJCQkpIHsKCiAgICAJCQkJCXByZXZpb3VzUmFuZ2UuY291bnQgPSBNYXRoLm1heCgKICAgIAkJCQkJCXByZXZpb3VzUmFuZ2UuY291bnQsCiAgICAJCQkJCQlyYW5nZS5zdGFydCArIHJhbmdlLmNvdW50IC0gcHJldmlvdXNSYW5nZS5zdGFydAogICAgCQkJCQkpOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJKysgbWVyZ2VJbmRleDsKICAgIAkJCQkJdXBkYXRlUmFuZ2VzWyBtZXJnZUluZGV4IF0gPSByYW5nZTsKCiAgICAJCQkJfQoKCiAgICAJCQl9CgogICAgCQkJLy8gVHJpbSB0aGUgYXJyYXkgdG8gb25seSBjb250YWluIHRoZSBtZXJnZWQgcmFuZ2VzLgogICAgCQkJdXBkYXRlUmFuZ2VzLmxlbmd0aCA9IG1lcmdlSW5kZXggKyAxOwoKICAgIAkJCWNvbnN0IGN1cnJlbnRVbnBhY2tSb3dMZW4gPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1JPV19MRU5HVEggKTsKICAgIAkJCWNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1BJWEVMUyApOwogICAgCQkJY29uc3QgY3VycmVudFVucGFja1NraXBSb3dzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1JPV1MgKTsKCiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgaW1hZ2Uud2lkdGggKTsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTsKCiAgICAJCQkJY29uc3QgcGl4ZWxTdGFydCA9IE1hdGguZmxvb3IoIHJhbmdlLnN0YXJ0IC8gY29tcG9uZW50U3RyaWRlICk7CiAgICAJCQkJY29uc3QgcGl4ZWxDb3VudCA9IE1hdGguY2VpbCggcmFuZ2UuY291bnQgLyBjb21wb25lbnRTdHJpZGUgKTsKCiAgICAJCQkJY29uc3QgeCA9IHBpeGVsU3RhcnQgJSBpbWFnZS53aWR0aDsKICAgIAkJCQljb25zdCB5ID0gTWF0aC5mbG9vciggcGl4ZWxTdGFydCAvIGltYWdlLndpZHRoICk7CgogICAgCQkJCS8vIEFzc3VtZXMgdXBkYXRlIHJhbmdlcyByZWZlciB0byBjb250aWd1b3VzIG1lbW9yeQogICAgCQkJCWNvbnN0IHdpZHRoID0gcGl4ZWxDb3VudDsKICAgIAkJCQljb25zdCBoZWlnaHQgPSAxOwoKICAgIAkJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIHggKTsKICAgIAkJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCB5ICk7CgogICAgCQkJCXN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7CgogICAgCQkJfQoKICAgIAkJCXRleHR1cmUuY2xlYXJVcGRhdGVSYW5nZXMoKTsKCiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgY3VycmVudFVucGFja1Jvd0xlbiApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgY3VycmVudFVucGFja1NraXBSb3dzICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKSB7CgogICAgCQlsZXQgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8yRDsKCiAgICAJCWlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzJEX0FSUkFZOwogICAgCQlpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8zRDsKCiAgICAJCWNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7CiAgICAJCWNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlOwoKICAgIAkJc3RhdGUuYmluZFRleHR1cmUoIHRleHR1cmVUeXBlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApOwoKICAgIAkJY29uc3Qgc291cmNlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBzb3VyY2UgKTsKCiAgICAJCWlmICggc291cmNlLnZlcnNpb24gIT09IHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uIHx8IGZvcmNlVXBsb2FkID09PSB0cnVlICkgewoKICAgIAkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTsKCiAgICAJCQljb25zdCB3b3JraW5nUHJpbWFyaWVzID0gQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICk7CiAgICAJCQljb25zdCB0ZXh0dXJlUHJpbWFyaWVzID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgPyBudWxsIDogQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggdGV4dHVyZS5jb2xvclNwYWNlICk7CiAgICAJCQljb25zdCB1bnBhY2tDb252ZXJzaW9uID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgfHwgd29ya2luZ1ByaW1hcmllcyA9PT0gdGV4dHVyZVByaW1hcmllcyA/IF9nbC5OT05FIDogX2dsLkJST1dTRVJfREVGQVVMVF9XRUJHTDsKCiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0ZXh0dXJlLmZsaXBZICk7CiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wsIHVucGFja0NvbnZlcnNpb24gKTsKCiAgICAJCQlsZXQgaW1hZ2UgPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZSwgZmFsc2UsIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApOwogICAgCQkJaW1hZ2UgPSB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBpbWFnZSApOwoKICAgIAkJCWNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApOwoKICAgIAkJCWNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApOwogICAgCQkJbGV0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlLCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICk7CgogICAgCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlICk7CgogICAgCQkJbGV0IG1pcG1hcDsKICAgIAkJCWNvbnN0IG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7CgogICAgCQkJY29uc3QgdXNlVGV4U3RvcmFnZSA9ICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSAhPT0gdHJ1ZSApOwogICAgCQkJY29uc3QgYWxsb2NhdGVNZW1vcnkgPSAoIHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID09PSB1bmRlZmluZWQgKSB8fCAoIGZvcmNlVXBsb2FkID09PSB0cnVlICk7CiAgICAJCQljb25zdCBkYXRhUmVhZHkgPSBzb3VyY2UuZGF0YVJlYWR5OwogICAgCQkJY29uc3QgbGV2ZWxzID0gZ2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCBpbWFnZSApOwoKICAgIAkJCWlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHsKCiAgICAJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRGVwdGhGb3JtYXQoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQsIHRleHR1cmUudHlwZSApOwoKICAgIAkJCQkvLwoKICAgIAkJCQlpZiAoIGFsbG9jYXRlTWVtb3J5ICkgewoKICAgIAkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJCXN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZSApIHsKCiAgICAJCQkJLy8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGUKICAgIAkJCQkvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHMKICAgIAkJCQkvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHMKCiAgICAJCQkJaWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgKSB7CgogICAgCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7CgogICAgCQkJCQkJc3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKICAgIAkJCQkJCW1pcG1hcCA9IG1pcG1hcHNbIGkgXTsKCiAgICAJCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgKSB7CgogICAgCQkJCQkJCWlmICggZGF0YVJlYWR5ICkgewoKICAgIAkJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTsKCiAgICAJCQkJCQkJfQoKICAgIAkJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQkJdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQlpZiAoIGFsbG9jYXRlTWVtb3J5ICkgewoKICAgIAkJCQkJCQlzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCXVwZGF0ZVRleHR1cmUoIHRleHR1cmUsIGltYWdlLCBnbEZvcm1hdCwgZ2xUeXBlICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkgewoKICAgIAkJCQlpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkgewoKICAgIAkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkgewoKICAgIAkJCQkJCXN0YXRlLnRleFN0b3JhZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwc1sgMCBdLndpZHRoLCBtaXBtYXBzWyAwIF0uaGVpZ2h0LCBpbWFnZS5kZXB0aCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQkJbWlwbWFwID0gbWlwbWFwc1sgaSBdOwoKICAgIAkJCQkJCWlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgKSB7CgogICAgCQkJCQkJCWlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7CgogICAgCQkJCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgKSB7CgogICAgCQkJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQkJCWlmICggdGV4dHVyZS5sYXllclVwZGF0ZXMuc2l6ZSA+IDAgKSB7CgogICAgCQkJCQkJCQkJCQljb25zdCBsYXllckJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTsKCiAgICAJCQkJCQkJCQkJCWZvciAoIGNvbnN0IGxheWVySW5kZXggb2YgdGV4dHVyZS5sYXllclVwZGF0ZXMgKSB7CgogICAgCQkJCQkJCQkJCQkJY29uc3QgbGF5ZXJEYXRhID0gbWlwbWFwLmRhdGEuc3ViYXJyYXkoCiAgICAJCQkJCQkJCQkJCQkJbGF5ZXJJbmRleCAqIGxheWVyQnl0ZUxlbmd0aCAvIG1pcG1hcC5kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULAogICAgCQkJCQkJCQkJCQkJCSggbGF5ZXJJbmRleCArIDEgKSAqIGxheWVyQnl0ZUxlbmd0aCAvIG1pcG1hcC5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UCiAgICAJCQkJCQkJCQkJCQkpOwogICAgCQkJCQkJCQkJCQkJc3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCBsYXllckluZGV4LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDEsIGdsRm9ybWF0LCBsYXllckRhdGEgKTsKCiAgICAJCQkJCQkJCQkJCX0KCiAgICAJCQkJCQkJCQkJCXRleHR1cmUuY2xlYXJMYXllclVwZGF0ZXMoKTsKCiAgICAJCQkJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCQkJCXN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJCQkJCX0KCiAgICAJCQkJCQkJCQl9CgogICAgCQkJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQkJCXN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgbWlwbWFwLmRhdGEsIDAsIDAgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC51cGxvYWRUZXh0dXJlKCknICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgKSB7CgogICAgCQkJCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQkJCQlzdGF0ZS50ZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCXN0YXRlLnRleEltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkgewoKICAgIAkJCQkJCXN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwc1sgMCBdLndpZHRoLCBtaXBtYXBzWyAwIF0uaGVpZ2h0ICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlmb3IgKCBsZXQgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJCQltaXBtYXAgPSBtaXBtYXBzWyBpIF07CgogICAgCQkJCQkJaWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHsKCiAgICAJCQkJCQkJaWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHsKCiAgICAJCQkJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQkJCQkJc3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBtaXBtYXAuZGF0YSApOwoKICAgIAkJCQkJCQkJCX0KCiAgICAJCQkJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJCQkJc3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJCQl9CgogICAgCQkJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSApIHsKCiAgICAJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJaWYgKCBhbGxvY2F0ZU1lbW9yeSApIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhTdG9yYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQlpZiAoIHRleHR1cmUubGF5ZXJVcGRhdGVzLnNpemUgPiAwICkgewoKICAgIAkJCQkJCQljb25zdCBsYXllckJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS50eXBlICk7CgogICAgCQkJCQkJCWZvciAoIGNvbnN0IGxheWVySW5kZXggb2YgdGV4dHVyZS5sYXllclVwZGF0ZXMgKSB7CgogICAgCQkJCQkJCQljb25zdCBsYXllckRhdGEgPSBpbWFnZS5kYXRhLnN1YmFycmF5KAogICAgCQkJCQkJCQkJbGF5ZXJJbmRleCAqIGxheWVyQnl0ZUxlbmd0aCAvIGltYWdlLmRhdGEuQllURVNfUEVSX0VMRU1FTlQsCiAgICAJCQkJCQkJCQkoIGxheWVySW5kZXggKyAxICkgKiBsYXllckJ5dGVMZW5ndGggLyBpbWFnZS5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UCiAgICAJCQkJCQkJCSk7CiAgICAJCQkJCQkJCXN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCAwLCAwLCAwLCBsYXllckluZGV4LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAxLCBnbEZvcm1hdCwgZ2xUeXBlLCBsYXllckRhdGEgKTsKCiAgICAJCQkJCQkJfQoKICAgIAkJCQkJCQl0ZXh0dXJlLmNsZWFyTGF5ZXJVcGRhdGVzKCk7CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJc3RhdGUudGV4SW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHsKCiAgICAJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJaWYgKCBhbGxvY2F0ZU1lbW9yeSApIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhTdG9yYWdlM0QoIF9nbC5URVhUVVJFXzNELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8zRCwgMCwgMCwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCXN0YXRlLnRleEltYWdlM0QoIF9nbC5URVhUVVJFXzNELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSApIHsKCiAgICAJCQkJaWYgKCBhbGxvY2F0ZU1lbW9yeSApIHsKCiAgICAJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJbGV0IHdpZHRoID0gaW1hZ2Uud2lkdGgsIGhlaWdodCA9IGltYWdlLmhlaWdodDsKCiAgICAJCQkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZXZlbHM7IGkgKysgKSB7CgogICAgCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7CgogICAgCQkJCQkJCXdpZHRoID4+PSAxOwogICAgCQkJCQkJCWhlaWdodCA+Pj0gMTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQkvLyByZWd1bGFyIFRleHR1cmUgKGltYWdlLCB2aWRlbywgY2FudmFzKQoKICAgIAkJCQkvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZQogICAgCQkJCS8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwcwogICAgCQkJCS8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVscwoKICAgIAkJCQlpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCApIHsKCiAgICAJCQkJCWlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHsKCiAgICAJCQkJCQljb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggbWlwbWFwc1sgMCBdICk7CgogICAgCQkJCQkJc3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJZm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgogICAgCQkJCQkJbWlwbWFwID0gbWlwbWFwc1sgaSBdOwoKICAgIAkJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQlzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQkJdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQlpZiAoIGFsbG9jYXRlTWVtb3J5ICkgewoKICAgIAkJCQkJCQljb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKTsKCiAgICAJCQkJCQkJc3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkgewoKICAgIAkJCQlnZW5lcmF0ZU1pcG1hcCggdGV4dHVyZVR5cGUgKTsKCiAgICAJCQl9CgogICAgCQkJc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gPSBzb3VyY2UudmVyc2lvbjsKCiAgICAJCQlpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7CgogICAgCQl9CgogICAgCQl0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBsb2FkQ3ViZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkgewoKICAgIAkJaWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCAhPT0gNiApIHJldHVybjsKCiAgICAJCWNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7CiAgICAJCWNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlOwoKICAgIAkJc3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApOwoKICAgIAkJY29uc3Qgc291cmNlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBzb3VyY2UgKTsKCiAgICAJCWlmICggc291cmNlLnZlcnNpb24gIT09IHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uIHx8IGZvcmNlVXBsb2FkID09PSB0cnVlICkgewoKICAgIAkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTsKCiAgICAJCQljb25zdCB3b3JraW5nUHJpbWFyaWVzID0gQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICk7CiAgICAJCQljb25zdCB0ZXh0dXJlUHJpbWFyaWVzID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgPyBudWxsIDogQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggdGV4dHVyZS5jb2xvclNwYWNlICk7CiAgICAJCQljb25zdCB1bnBhY2tDb252ZXJzaW9uID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgfHwgd29ya2luZ1ByaW1hcmllcyA9PT0gdGV4dHVyZVByaW1hcmllcyA/IF9nbC5OT05FIDogX2dsLkJST1dTRVJfREVGQVVMVF9XRUJHTDsKCiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0ZXh0dXJlLmZsaXBZICk7CiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wsIHVucGFja0NvbnZlcnNpb24gKTsKCiAgICAJCQljb25zdCBpc0NvbXByZXNzZWQgPSAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaXNDb21wcmVzc2VkVGV4dHVyZSApOwogICAgCQkJY29uc3QgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7CgogICAgCQkJY29uc3QgY3ViZUltYWdlID0gW107CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCiAgICAJCQkJaWYgKCAhIGlzQ29tcHJlc3NlZCAmJiAhIGlzRGF0YVRleHR1cmUgKSB7CgogICAgCQkJCQljdWJlSW1hZ2VbIGkgXSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlWyBpIF0sIHRydWUsIGNhcGFiaWxpdGllcy5tYXhDdWJlbWFwU2l6ZSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJY3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdOwoKICAgIAkJCQl9CgogICAgCQkJCWN1YmVJbWFnZVsgaSBdID0gdmVyaWZ5Q29sb3JTcGFjZSggdGV4dHVyZSwgY3ViZUltYWdlWyBpIF0gKTsKCiAgICAJCQl9CgogICAgCQkJY29uc3QgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSwKICAgIAkJCQlnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKSwKICAgIAkJCQlnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSwKICAgIAkJCQlnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApOwoKICAgIAkJCWNvbnN0IHVzZVRleFN0b3JhZ2UgPSAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgIT09IHRydWUgKTsKICAgIAkJCWNvbnN0IGFsbG9jYXRlTWVtb3J5ID0gKCBzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9PT0gdW5kZWZpbmVkICkgfHwgKCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApOwogICAgCQkJY29uc3QgZGF0YVJlYWR5ID0gc291cmNlLmRhdGFSZWFkeTsKICAgIAkJCWxldCBsZXZlbHMgPSBnZXRNaXBMZXZlbHMoIHRleHR1cmUsIGltYWdlICk7CgogICAgCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlICk7CgogICAgCQkJbGV0IG1pcG1hcHM7CgogICAgCQkJaWYgKCBpc0NvbXByZXNzZWQgKSB7CgogICAgCQkJCWlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHsKCiAgICAJCQkJCXN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApOwoKICAgIAkJCQl9CgogICAgCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJCQltaXBtYXBzID0gY3ViZUltYWdlWyBpIF0ubWlwbWFwczsKCiAgICAJCQkJCWZvciAoIGxldCBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqICsrICkgewoKICAgIAkJCQkJCWNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTsKCiAgICAJCQkJCQlpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkgewoKICAgIAkJCQkJCQlpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkgewoKICAgIAkJCQkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJCQkJCWlmICggZGF0YVJlYWR5ICkgewoKICAgIAkJCQkJCQkJCQlzdGF0ZS5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJCQkJfQoKICAgIAkJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCQlzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQltaXBtYXBzID0gdGV4dHVyZS5taXBtYXBzOwoKICAgIAkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7CgogICAgCQkJCQkvLyBUT0RPOiBVbmlmb3JtbHkgaGFuZGxlIG1pcG1hcCBkZWZpbml0aW9ucwogICAgCQkJCQkvLyBOb3JtYWwgdGV4dHVyZXMgYW5kIGNvbXByZXNzZWQgY3ViZSB0ZXh0dXJlcyBkZWZpbmUgYmFzZSBsZXZlbCArIG1pcHMgd2l0aCB0aGVpciBtaXBtYXAgYXJyYXkKICAgIAkJCQkJLy8gVW5jb21wcmVzc2VkIGN1YmUgdGV4dHVyZXMgdXNlIHRoZWlyIG1pcG1hcCBhcnJheSBvbmx5IGZvciBtaXBzIChubyBiYXNlIGxldmVsKQoKICAgIAkJCQkJaWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgKSBsZXZlbHMgKys7CgogICAgCQkJCQljb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggY3ViZUltYWdlWyAwIF0gKTsKCiAgICAJCQkJCXN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgZGltZW5zaW9ucy53aWR0aCwgZGltZW5zaW9ucy5oZWlnaHQgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKICAgIAkJCQkJaWYgKCBpc0RhdGFUZXh0dXJlICkgewoKICAgIAkJCQkJCWlmICggdXNlVGV4U3RvcmFnZSApIHsKCiAgICAJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQlzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgMCwgMCwgY3ViZUltYWdlWyBpIF0ud2lkdGgsIGN1YmVJbWFnZVsgaSBdLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0uZGF0YSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGN1YmVJbWFnZVsgaSBdLndpZHRoLCBjdWJlSW1hZ2VbIGkgXS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdLmRhdGEgKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQkJZm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7CgogICAgCQkJCQkJCWNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTsKICAgIAkJCQkJCQljb25zdCBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVsgaSBdLmltYWdlOwoKICAgIAkJCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgKSB7CgogICAgCQkJCQkJCQlpZiAoIGRhdGFSZWFkeSApIHsKCiAgICAJCQkJCQkJCQlzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIDAsIDAsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwSW1hZ2Uud2lkdGgsIG1pcG1hcEltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwSW1hZ2UuZGF0YSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlpZiAoIHVzZVRleFN0b3JhZ2UgKSB7CgogICAgCQkJCQkJCWlmICggZGF0YVJlYWR5ICkgewoKICAgIAkJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7CgogICAgCQkJCQkJCX0KCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQkJZm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7CgogICAgCQkJCQkJCWNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTsKCiAgICAJCQkJCQkJaWYgKCB1c2VUZXhTdG9yYWdlICkgewoKICAgIAkJCQkJCQkJaWYgKCBkYXRhUmVhZHkgKSB7CgogICAgCQkJCQkJCQkJc3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuaW1hZ2VbIGkgXSApOwoKICAgIAkJCQkJCQkJfQoKICAgIAkJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuaW1hZ2VbIGkgXSApOwoKICAgIAkJCQkJCQl9CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCWlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgKSB7CgogICAgCQkJCS8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS4KICAgIAkJCQlnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAgKTsKCiAgICAJCQl9CgogICAgCQkJc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gPSBzb3VyY2UudmVyc2lvbjsKCiAgICAJCQlpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7CgogICAgCQl9CgogICAgCQl0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247CgogICAgCX0KCiAgICAJLy8gUmVuZGVyIHRhcmdldHMKCiAgICAJLy8gU2V0dXAgc3RvcmFnZSBmb3IgdGFyZ2V0IHRleHR1cmUgYW5kIGJpbmQgaXQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlcgogICAgCWZ1bmN0aW9uIHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCApIHsKCiAgICAJCWNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApOwogICAgCQljb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTsKICAgIAkJY29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTsKICAgIAkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKICAgIAkJY29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKICAgIAkJdGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7CgogICAgCQlpZiAoICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7CgogICAgCQkJY29uc3Qgd2lkdGggPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LndpZHRoID4+IGxldmVsICk7CiAgICAJCQljb25zdCBoZWlnaHQgPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LmhlaWdodCA+PiBsZXZlbCApOwoKICAgIAkJCWlmICggdGV4dHVyZVRhcmdldCA9PT0gX2dsLlRFWFRVUkVfM0QgfHwgdGV4dHVyZVRhcmdldCA9PT0gX2dsLlRFWFRVUkVfMkRfQVJSQVkgKSB7CgogICAgCQkJCXN0YXRlLnRleEltYWdlM0QoIHRleHR1cmVUYXJnZXQsIGxldmVsLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCByZW5kZXJUYXJnZXQuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlzdGF0ZS50ZXhJbWFnZTJEKCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApOwoKICAgIAkJaWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkgewoKICAgIAkJCW11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBfZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCAwLCBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSApOwoKICAgIAkJfSBlbHNlIGlmICggdGV4dHVyZVRhcmdldCA9PT0gX2dsLlRFWFRVUkVfMkQgfHwgKCB0ZXh0dXJlVGFyZ2V0ID49IF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggJiYgdGV4dHVyZVRhcmdldCA8PSBfZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aICkgKSB7IC8vIHNlZSAjMjQ3NTMKCiAgICAJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGxldmVsICk7CgogICAgCQl9CgogICAgCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApOwoKICAgIAl9CgogICAgCS8vIFNldHVwIHN0b3JhZ2UgZm9yIGludGVybmFsIGRlcHRoL3N0ZW5jaWwgYnVmZmVycyBhbmQgYmluZCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyCiAgICAJZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgaXNNdWx0aXNhbXBsZSApIHsKCiAgICAJCV9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTsKCiAgICAJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkgewoKICAgIAkJCS8vIHJldHJpZXZlIHRoZSBkZXB0aCBhdHRhY2htZW50IHR5cGVzCiAgICAJCQljb25zdCBkZXB0aFRleHR1cmUgPSByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlOwogICAgCQkJY29uc3QgZGVwdGhUeXBlID0gZGVwdGhUZXh0dXJlICYmIGRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSA/IGRlcHRoVGV4dHVyZS50eXBlIDogbnVsbDsKICAgIAkJCWNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciwgZGVwdGhUeXBlICk7CiAgICAJCQljb25zdCBnbEF0dGFjaG1lbnRUeXBlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7CgogICAgCQkJLy8gc2V0IHVwIHRoZSBhdHRhY2htZW50CiAgICAJCQljb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCQljb25zdCBpc1VzZU11bHRpc2FtcGxlZFJUVCA9IHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCQlpZiAoIGlzVXNlTXVsdGlzYW1wbGVkUlRUICkgewoKICAgIAkJCQltdWx0aXNhbXBsZWRSVFRFeHQucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUKCBfZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCBpc011bHRpc2FtcGxlICkgewoKICAgIAkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCBfZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgogICAgCQkJfQoKICAgIAkJCV9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJY29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQljb25zdCB0ZXh0dXJlID0gdGV4dHVyZXNbIGkgXTsKCiAgICAJCQkJY29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7CiAgICAJCQkJY29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7CiAgICAJCQkJY29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTsKICAgIAkJCQljb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7CgogICAgCQkJCWlmICggaXNNdWx0aXNhbXBsZSAmJiB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHsKCiAgICAJCQkJCV9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoKICAgIAkJCQl9IGVsc2UgaWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkgewoKICAgIAkJCQkJbXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApOwoKICAgIAl9CgogICAgCS8vIFNldHVwIHJlc291cmNlcyBmb3IgYSBEZXB0aCBUZXh0dXJlIGZvciBhIEZCTyAobmVlZHMgYW4gZXh0ZW5zaW9uKQogICAgCWZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJY29uc3QgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICk7CiAgICAJCWlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTsKCiAgICAJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApOwoKICAgIAkJaWYgKCAhICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkgKSB7CgogICAgCQkJdGhyb3cgbmV3IEVycm9yKCAncmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFRIUkVFLkRlcHRoVGV4dHVyZScgKTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKTsKICAgIAkJdGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7CgogICAgCQkvLyB1cGxvYWQgYW4gZW1wdHkgZGVwdGggdGV4dHVyZSB3aXRoIGZyYW1lYnVmZmVyIHNpemUKICAgIAkJaWYgKCAhIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlIHx8CiAgICAJCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8CiAgICAJCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgIT09IHJlbmRlclRhcmdldC5oZWlnaHQgKSB7CgogICAgCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDsKICAgIAkJCXJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDsKICAgIAkJCXJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJfQoKICAgIAkJc2V0VGV4dHVyZTJEKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwICk7CgogICAgCQljb25zdCB3ZWJnbERlcHRoVGV4dHVyZSA9IHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlOwogICAgCQljb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7CgogICAgCQlpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHsKCiAgICAJCQlpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7CgogICAgCQkJCW11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAsIHNhbXBsZXMgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX0FUVEFDSE1FTlQsIF9nbC5URVhUVVJFXzJELCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7CgogICAgCQkJaWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkgewoKICAgIAkJCQltdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAsIHNhbXBsZXMgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7CgogICAgCQkJfQoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQl0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXQnICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJLy8gU2V0dXAgR0wgcmVzb3VyY2VzIGZvciBhIG5vbi10ZXh0dXJlIGRlcHRoIGJ1ZmZlcgogICAgCWZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCWNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCWNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7CgogICAgCQkvLyBpZiB0aGUgYm91bmQgZGVwdGggdGV4dHVyZSBoYXMgY2hhbmdlZAogICAgCQlpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19ib3VuZERlcHRoVGV4dHVyZSAhPT0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApIHsKCiAgICAJCQkvLyBmaXJlIHRoZSBkaXNwb3NlIGV2ZW50IHRvIGdldCByaWQgb2Ygc3RvcmVkIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJldmlvdXNseSBib3VuZCBkZXB0aCBidWZmZXIKICAgIAkJCWNvbnN0IGRlcHRoVGV4dHVyZSA9IHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmU7CiAgICAJCQlpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19kZXB0aERpc3Bvc2VDYWxsYmFjayApIHsKCiAgICAJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2RlcHRoRGlzcG9zZUNhbGxiYWNrKCk7CgogICAgCQkJfQoKICAgIAkJCS8vIHNldCB1cCBkaXNwb3NlIGxpc3RlbmVycyB0byB0cmFjayB3aGVuIHRoZSBjdXJyZW50bHkgYXR0YWNoZWQgYnVmZmVyIGlzIGltcGxpY2l0bHkgdW5ib3VuZAogICAgCQkJaWYgKCBkZXB0aFRleHR1cmUgKSB7CgogICAgCQkJCWNvbnN0IGRpc3Bvc2VFdmVudCA9ICgpID0+IHsKCiAgICAJCQkJCWRlbGV0ZSByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYm91bmREZXB0aFRleHR1cmU7CiAgICAJCQkJCWRlbGV0ZSByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fZGVwdGhEaXNwb3NlQ2FsbGJhY2s7CiAgICAJCQkJCWRlcHRoVGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VFdmVudCApOwoKICAgIAkJCQl9OwoKICAgIAkJCQlkZXB0aFRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlRXZlbnQgKTsKICAgIAkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fZGVwdGhEaXNwb3NlQ2FsbGJhY2sgPSBkaXNwb3NlRXZlbnQ7CgogICAgCQkJfQoKICAgIAkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX19ib3VuZERlcHRoVGV4dHVyZSA9IGRlcHRoVGV4dHVyZTsKCiAgICAJCX0KCiAgICAJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiAhIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciApIHsKCiAgICAJCQlpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApOwoKICAgIAkJCWNvbnN0IG1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5taXBtYXBzOwoKICAgIAkJCWlmICggbWlwbWFwcyAmJiBtaXBtYXBzLmxlbmd0aCA+IDAgKSB7CgogICAgCQkJCXNldHVwRGVwdGhUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgMCBdLCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSB7CgogICAgCQkJaWYgKCBpc0N1YmUgKSB7CgogICAgCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gW107CgogICAgCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApOwoKICAgIAkJCQkJaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICAgIAkJCQkJCXNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQkvLyBhdHRhY2ggYnVmZmVyIGlmIGl0J3MgYmVlbiBjcmVhdGVkIGFscmVhZHkKICAgIAkJCQkJCWNvbnN0IGdsQXR0YWNobWVudFR5cGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDsKICAgIAkJCQkJCWNvbnN0IHJlbmRlcmJ1ZmZlciA9IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF07CiAgICAJCQkJCQlfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7CiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZ2xBdHRhY2htZW50VHlwZSwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljb25zdCBtaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUubWlwbWFwczsKCiAgICAJCQkJaWYgKCBtaXBtYXBzICYmIG1pcG1hcHMubGVuZ3RoID4gMCApIHsKCiAgICAJCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgMCBdICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID09PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICAgIAkJCQkJc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJLy8gYXR0YWNoIGJ1ZmZlciBpZiBpdCdzIGJlZW4gY3JlYXRlZCBhbHJlYWR5CiAgICAJCQkJCWNvbnN0IGdsQXR0YWNobWVudFR5cGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDsKICAgIAkJCQkJY29uc3QgcmVuZGVyYnVmZmVyID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXI7CiAgICAJCQkJCV9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTsKICAgIAkJCQkJX2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGdsQXR0YWNobWVudFR5cGUsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTsKCiAgICAJfQoKICAgIAkvLyByZWJpbmQgZnJhbWVidWZmZXIgd2l0aCBleHRlcm5hbCB0ZXh0dXJlcwogICAgCWZ1bmN0aW9uIHJlYmluZFRleHR1cmVzKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlICkgewoKICAgIAkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCWlmICggY29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHJlbmRlclRhcmdldC50ZXh0dXJlLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFXzJELCAwICk7CgogICAgCQl9CgogICAgCQlpZiAoIGRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCXNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0CiAgICAJZnVuY3Rpb24gc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCWNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTsKCiAgICAJCWNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCWNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTsKCiAgICAJCXJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApOwoKICAgIAkJY29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7CgogICAgCQljb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApOwogICAgCQljb25zdCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyA9ICggdGV4dHVyZXMubGVuZ3RoID4gMSApOwoKICAgIAkJaWYgKCAhIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkgewoKICAgIAkJCWlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpOwoKICAgIAkJCX0KCiAgICAJCQl0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247CiAgICAJCQlpbmZvLm1lbW9yeS50ZXh0dXJlcyArKzsKCiAgICAJCX0KCiAgICAJCS8vIFNldHVwIGZyYW1lYnVmZmVyCgogICAgCQlpZiAoIGlzQ3ViZSApIHsKCiAgICAJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IFtdOwoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgogICAgCQkJCWlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkgewoKICAgIAkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSA9IFtdOwoKICAgIAkJCQkJZm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoOyBsZXZlbCArKyApIHsKCiAgICAJCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgogICAgCQkJCQl9CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkgewoKICAgIAkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IFtdOwoKICAgIAkJCQlmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkgewoKICAgIAkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGxldmVsIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgogICAgCQkJfQoKICAgIAkJCWlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7CgogICAgCQkJCWZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJCWNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTsKCiAgICAJCQkJCWlmICggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCQlhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7CgogICAgCQkJCQkJaW5mby5tZW1vcnkudGV4dHVyZXMgKys7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJaWYgKCAoIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkgewoKICAgIAkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwogICAgCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyID0gW107CgogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApOwoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCQljb25zdCB0ZXh0dXJlID0gdGV4dHVyZXNbIGkgXTsKICAgIAkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKCiAgICAJCQkJCV9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7CgogICAgCQkJCQljb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTsKICAgIAkJCQkJY29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7CiAgICAJCQkJCWNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlLCByZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSApOwogICAgCQkJCQljb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCQkJCV9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoKICAgIAkJCQkJX2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTsKCiAgICAJCQkJfQoKICAgIAkJCQlfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApOwoKICAgIAkJCQlpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHsKCiAgICAJCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpOwogICAgCQkJCQlzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRydWUgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCS8vIFNldHVwIGNvbG9yIGJ1ZmZlcgoKICAgIAkJaWYgKCBpc0N1YmUgKSB7CgogICAgCQkJc3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwogICAgCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlICk7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCiAgICAJCQkJaWYgKCB0ZXh0dXJlLm1pcG1hcHMgJiYgdGV4dHVyZS5taXBtYXBzLmxlbmd0aCA+IDAgKSB7CgogICAgCQkJCQlmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkgewoKICAgIAkJCQkJCXNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGxldmVsICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJaWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHsKCiAgICAJCQkJZ2VuZXJhdGVNaXBtYXAoIF9nbC5URVhUVVJFX0NVQkVfTUFQICk7CgogICAgCQkJfQoKICAgIAkJCXN0YXRlLnVuYmluZFRleHR1cmUoKTsKCiAgICAJCX0gZWxzZSBpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkgewoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgYXR0YWNobWVudCA9IHRleHR1cmVzWyBpIF07CiAgICAJCQkJY29uc3QgYXR0YWNobWVudFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggYXR0YWNobWVudCApOwoKICAgIAkJCQlzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkQsIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7CiAgICAJCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIF9nbC5URVhUVVJFXzJELCBhdHRhY2htZW50ICk7CiAgICAJCQkJc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIGF0dGFjaG1lbnQsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5URVhUVVJFXzJELCAwICk7CgogICAgCQkJCWlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCBhdHRhY2htZW50ICkgKSB7CgogICAgCQkJCQlnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfMkQgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlzdGF0ZS51bmJpbmRUZXh0dXJlKCk7CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWxldCBnbFRleHR1cmVUeXBlID0gX2dsLlRFWFRVUkVfMkQ7CgogICAgCQkJaWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0IHx8IHJlbmRlclRhcmdldC5pc1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQgKSB7CgogICAgCQkJCWdsVGV4dHVyZVR5cGUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID8gX2dsLlRFWFRVUkVfM0QgOiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTsKCiAgICAJCQl9CgogICAgCQkJc3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7CiAgICAJCQlzZXRUZXh0dXJlUGFyYW1ldGVycyggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZSApOwoKICAgIAkJCWlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkgewoKICAgIAkJCQlmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkgewoKICAgIAkJCQkJc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2xUZXh0dXJlVHlwZSwgbGV2ZWwgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsVGV4dHVyZVR5cGUsIDAgKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHsKCiAgICAJCQkJZ2VuZXJhdGVNaXBtYXAoIGdsVGV4dHVyZVR5cGUgKTsKCiAgICAJCQl9CgogICAgCQkJc3RhdGUudW5iaW5kVGV4dHVyZSgpOwoKICAgIAkJfQoKICAgIAkJLy8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVycwoKICAgIAkJaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7CgogICAgCQkJc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKSB7CgogICAgCQljb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlczsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQljb25zdCB0ZXh0dXJlID0gdGV4dHVyZXNbIGkgXTsKCiAgICAJCQlpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkgewoKICAgIAkJCQljb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSggcmVuZGVyVGFyZ2V0ICk7CiAgICAJCQkJY29uc3Qgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTsKCiAgICAJCQkJc3RhdGUuYmluZFRleHR1cmUoIHRhcmdldFR5cGUsIHdlYmdsVGV4dHVyZSApOwogICAgCQkJCWdlbmVyYXRlTWlwbWFwKCB0YXJnZXRUeXBlICk7CiAgICAJCQkJc3RhdGUudW5iaW5kVGV4dHVyZSgpOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJfQoKICAgIAljb25zdCBpbnZhbGlkYXRpb25BcnJheVJlYWQgPSBbXTsKICAgIAljb25zdCBpbnZhbGlkYXRpb25BcnJheURyYXcgPSBbXTsKCiAgICAJZnVuY3Rpb24gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCWlmICggcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkgewoKICAgIAkJCWlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7CgogICAgCQkJCWNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzOwogICAgCQkJCWNvbnN0IHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoOwogICAgCQkJCWNvbnN0IGhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7CiAgICAJCQkJbGV0IG1hc2sgPSBfZ2wuQ09MT1JfQlVGRkVSX0JJVDsKICAgIAkJCQljb25zdCBkZXB0aFN0eWxlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7CiAgICAJCQkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKICAgIAkJCQljb25zdCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyA9ICggdGV4dHVyZXMubGVuZ3RoID4gMSApOwoKICAgIAkJCQkvLyBJZiBNUlQgd2UgbmVlZCB0byByZW1vdmUgRkJPIGF0dGFjaG1lbnRzCiAgICAJCQkJaWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHsKCiAgICAJCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTsKICAgIAkJCQkJCV9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuUkVOREVSQlVGRkVSLCBudWxsICk7CgogICAgCQkJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7CiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuVEVYVFVSRV8yRCwgbnVsbCwgMCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7CgogICAgCQkJCWNvbnN0IG1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5taXBtYXBzOwoKICAgIAkJCQlpZiAoIG1pcG1hcHMgJiYgbWlwbWFwcy5sZW5ndGggPiAwICkgewoKICAgIAkJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIDAgXSApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTsKCiAgICAJCQkJfQoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCQlpZiAoIHJlbmRlclRhcmdldC5yZXNvbHZlRGVwdGhCdWZmZXIgKSB7CgogICAgCQkJCQkJaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSBtYXNrIHw9IF9nbC5ERVBUSF9CVUZGRVJfQklUOwoKICAgIAkJCQkJCS8vIHJlc29sdmluZyBzdGVuY2lsIGlzIHNsb3cgd2l0aCBhIEQzRCBiYWNrZW5kLiBkaXNhYmxlIGl0IGZvciBhbGwgdHJhbnNtaXNzaW9uIHJlbmRlciB0YXJnZXRzIChzZWUgIzI3Nzk5KQoKICAgIAkJCQkJCWlmICggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnJlc29sdmVTdGVuY2lsQnVmZmVyICkgbWFzayB8PSBfZ2wuU1RFTkNJTF9CVUZGRVJfQklUOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJaWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHsKCiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTsKCiAgICAJCQkJCQljb25zdCB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZXNbIGkgXSApLl9fd2ViZ2xUZXh0dXJlOwogICAgCQkJCQkJX2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xUZXh0dXJlLCAwICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlfZ2wuYmxpdEZyYW1lYnVmZmVyKCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCBtYXNrLCBfZ2wuTkVBUkVTVCApOwoKICAgIAkJCQkJaWYgKCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJCQlpbnZhbGlkYXRpb25BcnJheVJlYWQubGVuZ3RoID0gMDsKICAgIAkJCQkJCWludmFsaWRhdGlvbkFycmF5RHJhdy5sZW5ndGggPSAwOwoKICAgIAkJCQkJCWludmFsaWRhdGlvbkFycmF5UmVhZC5wdXNoKCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpICk7CgogICAgCQkJCQkJaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnJlc29sdmVEZXB0aEJ1ZmZlciA9PT0gZmFsc2UgKSB7CgogICAgCQkJCQkJCWludmFsaWRhdGlvbkFycmF5UmVhZC5wdXNoKCBkZXB0aFN0eWxlICk7CiAgICAJCQkJCQkJaW52YWxpZGF0aW9uQXJyYXlEcmF3LnB1c2goIGRlcHRoU3R5bGUgKTsKCiAgICAJCQkJCQkJX2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIGludmFsaWRhdGlvbkFycmF5RHJhdyApOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCQlfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgaW52YWxpZGF0aW9uQXJyYXlSZWFkICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApOwogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTsKCiAgICAJCQkJLy8gSWYgTVJUIHNpbmNlIHByZS1ibGl0IHdlIHJlbW92ZWQgdGhlIEZCTyB3ZSBuZWVkIHRvIHJlY29uc3RydWN0IHRoZSBhdHRhY2htZW50cwogICAgCQkJCWlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7CgogICAgCQkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7CiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApOwoKICAgIAkJCQkJCWNvbnN0IHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICkuX193ZWJnbFRleHR1cmU7CgogICAgCQkJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7CiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xUZXh0dXJlLCAwICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyID09PSBmYWxzZSAmJiBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciApIHsKCiAgICAJCQkJCWNvbnN0IGRlcHRoU3R5bGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDsKCiAgICAJCQkJCV9nbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBbIGRlcHRoU3R5bGUgXSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCXJldHVybiBNYXRoLm1pbiggY2FwYWJpbGl0aWVzLm1heFNhbXBsZXMsIHJlbmRlclRhcmdldC5zYW1wbGVzICk7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSB7CgogICAgCQljb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApOwoKICAgIAkJcmV0dXJuIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCAmJiBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gdHJ1ZSAmJiByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlUmVuZGVyVG9UZXh0dXJlICE9PSBmYWxzZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKSB7CgogICAgCQljb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lOwoKICAgIAkJLy8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlCgogICAgCQlpZiAoIF92aWRlb1RleHR1cmVzLmdldCggdGV4dHVyZSApICE9PSBmcmFtZSApIHsKCiAgICAJCQlfdmlkZW9UZXh0dXJlcy5zZXQoIHRleHR1cmUsIGZyYW1lICk7CiAgICAJCQl0ZXh0dXJlLnVwZGF0ZSgpOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICkgewoKICAgIAkJY29uc3QgY29sb3JTcGFjZSA9IHRleHR1cmUuY29sb3JTcGFjZTsKICAgIAkJY29uc3QgZm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7CiAgICAJCWNvbnN0IHR5cGUgPSB0ZXh0dXJlLnR5cGU7CgogICAgCQlpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSA9PT0gdHJ1ZSB8fCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgcmV0dXJuIGltYWdlOwoKICAgIAkJaWYgKCBjb2xvclNwYWNlICE9PSBMaW5lYXJTUkdCQ29sb3JTcGFjZSAmJiBjb2xvclNwYWNlICE9PSBOb0NvbG9yU3BhY2UgKSB7CgogICAgCQkJLy8gc1JHQgoKICAgIAkJCWlmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBjb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApIHsKCiAgICAJCQkJLy8gaW4gV2ViR0wgMiB1bmNvbXByZXNzZWQgdGV4dHVyZXMgY2FuIG9ubHkgYmUgc1JHQiBlbmNvZGVkIGlmIHRoZXkgaGF2ZSB0aGUgUkdCQTggZm9ybWF0CgogICAgCQkJCWlmICggZm9ybWF0ICE9PSBSR0JBRm9ybWF0IHx8IHR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgKSB7CgogICAgCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBzUkdCIGVuY29kZWQgdGV4dHVyZXMgaGF2ZSB0byB1c2UgUkdCQUZvcm1hdCBhbmQgVW5zaWduZWRCeXRlVHlwZS4nICk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVW5zdXBwb3J0ZWQgdGV4dHVyZSBjb2xvciBzcGFjZTonLCBjb2xvclNwYWNlICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJcmV0dXJuIGltYWdlOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldERpbWVuc2lvbnMoIGltYWdlICkgewoKICAgIAkJaWYgKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgewoKICAgIAkJCS8vIGlmIGludHJpbnNpYyBkYXRhIGFyZSBub3QgYXZhaWxhYmxlLCBmYWxsYmFjayB0byB3aWR0aC9oZWlnaHQKCiAgICAJCQlfaW1hZ2VEaW1lbnNpb25zLndpZHRoID0gaW1hZ2UubmF0dXJhbFdpZHRoIHx8IGltYWdlLndpZHRoOwogICAgCQkJX2ltYWdlRGltZW5zaW9ucy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0IHx8IGltYWdlLmhlaWdodDsKCiAgICAJCX0gZWxzZSBpZiAoIHR5cGVvZiBWaWRlb0ZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIFZpZGVvRnJhbWUgKSB7CgogICAgCQkJX2ltYWdlRGltZW5zaW9ucy53aWR0aCA9IGltYWdlLmRpc3BsYXlXaWR0aDsKICAgIAkJCV9pbWFnZURpbWVuc2lvbnMuaGVpZ2h0ID0gaW1hZ2UuZGlzcGxheUhlaWdodDsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJX2ltYWdlRGltZW5zaW9ucy53aWR0aCA9IGltYWdlLndpZHRoOwogICAgCQkJX2ltYWdlRGltZW5zaW9ucy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7CgogICAgCQl9CgogICAgCQlyZXR1cm4gX2ltYWdlRGltZW5zaW9uczsKCiAgICAJfQoKICAgIAkvLwoKICAgIAl0aGlzLmFsbG9jYXRlVGV4dHVyZVVuaXQgPSBhbGxvY2F0ZVRleHR1cmVVbml0OwogICAgCXRoaXMucmVzZXRUZXh0dXJlVW5pdHMgPSByZXNldFRleHR1cmVVbml0czsKCiAgICAJdGhpcy5zZXRUZXh0dXJlMkQgPSBzZXRUZXh0dXJlMkQ7CiAgICAJdGhpcy5zZXRUZXh0dXJlMkRBcnJheSA9IHNldFRleHR1cmUyREFycmF5OwogICAgCXRoaXMuc2V0VGV4dHVyZTNEID0gc2V0VGV4dHVyZTNEOwogICAgCXRoaXMuc2V0VGV4dHVyZUN1YmUgPSBzZXRUZXh0dXJlQ3ViZTsKICAgIAl0aGlzLnJlYmluZFRleHR1cmVzID0gcmViaW5kVGV4dHVyZXM7CiAgICAJdGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0OwogICAgCXRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwOwogICAgCXRoaXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPSB1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldDsKICAgIAl0aGlzLnNldHVwRGVwdGhSZW5kZXJidWZmZXIgPSBzZXR1cERlcHRoUmVuZGVyYnVmZmVyOwogICAgCXRoaXMuc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUgPSBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZTsKICAgIAl0aGlzLnVzZU11bHRpc2FtcGxlZFJUVCA9IHVzZU11bHRpc2FtcGxlZFJUVDsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xVdGlscyggZ2wsIGV4dGVuc2lvbnMgKSB7CgogICAgCWZ1bmN0aW9uIGNvbnZlcnQoIHAsIGNvbG9yU3BhY2UgPSBOb0NvbG9yU3BhY2UgKSB7CgogICAgCQlsZXQgZXh0ZW5zaW9uOwoKICAgIAkJY29uc3QgdHJhbnNmZXIgPSBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKTsKCiAgICAJCWlmICggcCA9PT0gVW5zaWduZWRCeXRlVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9CWVRFOwogICAgCQlpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80OwogICAgCQlpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xOwogICAgCQlpZiAoIHAgPT09IFVuc2lnbmVkSW50NTk5OVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfSU5UXzVfOV85XzlfUkVWOwoKICAgIAkJaWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiBnbC5CWVRFOwogICAgCQlpZiAoIHAgPT09IFNob3J0VHlwZSApIHJldHVybiBnbC5TSE9SVDsKICAgIAkJaWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDsKICAgIAkJaWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIGdsLklOVDsKICAgIAkJaWYgKCBwID09PSBVbnNpZ25lZEludFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfSU5UOwogICAgCQlpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiBnbC5GTE9BVDsKICAgIAkJaWYgKCBwID09PSBIYWxmRmxvYXRUeXBlICkgcmV0dXJuIGdsLkhBTEZfRkxPQVQ7CgogICAgCQlpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgcmV0dXJuIGdsLkFMUEhBOwogICAgCQlpZiAoIHAgPT09IFJHQkZvcm1hdCApIHJldHVybiBnbC5SR0I7CiAgICAJCWlmICggcCA9PT0gUkdCQUZvcm1hdCApIHJldHVybiBnbC5SR0JBOwogICAgCQlpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIGdsLkRFUFRIX0NPTVBPTkVOVDsKICAgIAkJaWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSByZXR1cm4gZ2wuREVQVEhfU1RFTkNJTDsKCiAgICAJCS8vIFdlYkdMMiBmb3JtYXRzLgoKICAgIAkJaWYgKCBwID09PSBSZWRGb3JtYXQgKSByZXR1cm4gZ2wuUkVEOwogICAgCQlpZiAoIHAgPT09IFJlZEludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkVEX0lOVEVHRVI7CiAgICAJCWlmICggcCA9PT0gUkdGb3JtYXQgKSByZXR1cm4gZ2wuUkc7CiAgICAJCWlmICggcCA9PT0gUkdJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIGdsLlJHX0lOVEVHRVI7CiAgICAJCWlmICggcCA9PT0gUkdCQUludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkdCQV9JTlRFR0VSOwoKICAgIAkJLy8gUzNUQwoKICAgIAkJaWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHsKCiAgICAJCQlpZiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSB7CgogICAgCQkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNfc3JnYicgKTsKCiAgICAJCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgogICAgCQkJCQlpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDsKICAgIAkJCQkJaWYgKCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUOwogICAgCQkJCQlpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQ7CiAgICAJCQkJCWlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCXJldHVybiBudWxsOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTsKCiAgICAJCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgogICAgCQkJCQlpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUOwogICAgCQkJCQlpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ7CiAgICAJCQkJCWlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDsKICAgIAkJCQkJaWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJcmV0dXJuIG51bGw7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCQkvLyBQVlJUQwoKICAgIAkJaWYgKCBwID09PSBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgewoKICAgIAkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApOwoKICAgIAkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKICAgIAkJCQlpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HOwogICAgCQkJCWlmICggcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HOwogICAgCQkJCWlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRzsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlyZXR1cm4gbnVsbDsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQkvLyBFVEMKCiAgICAJCWlmICggcCA9PT0gUkdCX0VUQzFfRm9ybWF0IHx8IHAgPT09IFJHQl9FVEMyX0Zvcm1hdCB8fCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHsKCiAgICAJCQlleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMnICk7CgogICAgCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgogICAgCQkJCWlmICggcCA9PT0gUkdCX0VUQzFfRm9ybWF0IHx8IHAgPT09IFJHQl9FVEMyX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0VUQzIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0I4X0VUQzI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXJldHVybiBudWxsOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCS8vIEFTVEMKCiAgICAJCWlmICggcCA9PT0gUkdCQV9BU1RDXzR4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NV9Gb3JtYXQgfHwKICAgIAkJCXAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0IHx8CiAgICAJCQlwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgfHwKICAgIAkJCXAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCB8fAogICAgCQkJcCA9PT0gUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgewoKICAgIAkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICk7CgogICAgCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgogICAgCQkJCWlmICggcCA9PT0gUkdCQV9BU1RDXzR4NF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ180eDRfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzR4NF9LSFI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUjsKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSOwogICAgCQkJCWlmICggcCA9PT0gUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDVfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzZ4NV9LSFI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUjsKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSOwogICAgCQkJCWlmICggcCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDZfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4Nl9LSFI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUjsKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSOwogICAgCQkJCWlmICggcCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4Nl9LSFI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUjsKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSOwogICAgCQkJCWlmICggcCA9PT0gUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFI7CiAgICAJCQkJaWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUjsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlyZXR1cm4gbnVsbDsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQkvLyBCUFRDCgogICAgCQlpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgfHwgcCA9PT0gUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCB8fCBwID09PSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgKSB7CgogICAgCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjJyApOwoKICAgIAkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX0JQVENfVU5PUk1fRVhUIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVDsKICAgIAkJCQlpZiAoIHAgPT09IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVDsKICAgIAkJCQlpZiAoIHAgPT09IFJHQl9CUFRDX1VOU0lHTkVEX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfQlBUQ19VTlNJR05FRF9GTE9BVF9FWFQ7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJcmV0dXJuIG51bGw7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8gUkdUQwoKICAgIAkJaWYgKCBwID09PSBSRURfUkdUQzFfRm9ybWF0IHx8IHAgPT09IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0IHx8IHAgPT09IFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgfHwgcCA9PT0gU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSB7CgogICAgCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9yZ3RjJyApOwoKICAgIAkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKICAgIAkJCQlpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkVEX1JHVEMxX0VYVDsKICAgIAkJCQlpZiAoIHAgPT09IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUOwogICAgCQkJCWlmICggcCA9PT0gUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SRURfR1JFRU5fUkdUQzJfRVhUOwogICAgCQkJCWlmICggcCA9PT0gU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFQ7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJcmV0dXJuIG51bGw7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8KCiAgICAJCWlmICggcCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF8yNF84OwoKICAgIAkJLy8gaWYgInAiIGNhbid0IGJlIHJlc29sdmVkLCBhc3N1bWUgdGhlIHVzZXIgZGVmaW5lcyBhIFdlYkdMIGNvbnN0YW50IGFzIGEgc3RyaW5nIChmYWxsYmFjay93b3JrYXJvdW5kIGZvciBwYWNrZWQgUkdCIGZvcm1hdHMpCgogICAgCQlyZXR1cm4gKCBnbFsgcCBdICE9PSB1bmRlZmluZWQgKSA/IGdsWyBwIF0gOiBudWxsOwoKICAgIAl9CgogICAgCXJldHVybiB7IGNvbnZlcnQ6IGNvbnZlcnQgfTsKCiAgICB9CgogICAgY29uc3QgX29jY2x1c2lvbl92ZXJ0ZXggPSBgCnZvaWQgbWFpbigpIHsKCglnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsKCn1gOwoKICAgIGNvbnN0IF9vY2NsdXNpb25fZnJhZ21lbnQgPSBgCnVuaWZvcm0gc2FtcGxlcjJEQXJyYXkgZGVwdGhDb2xvcjsKdW5pZm9ybSBmbG9hdCBkZXB0aFdpZHRoOwp1bmlmb3JtIGZsb2F0IGRlcHRoSGVpZ2h0OwoKdm9pZCBtYWluKCkgewoKCXZlYzIgY29vcmQgPSB2ZWMyKCBnbF9GcmFnQ29vcmQueCAvIGRlcHRoV2lkdGgsIGdsX0ZyYWdDb29yZC55IC8gZGVwdGhIZWlnaHQgKTsKCglpZiAoIGNvb3JkLnggPj0gMS4wICkgewoKCQlnbF9GcmFnRGVwdGggPSB0ZXh0dXJlKCBkZXB0aENvbG9yLCB2ZWMzKCBjb29yZC54IC0gMS4wLCBjb29yZC55LCAxICkgKS5yOwoKCX0gZWxzZSB7CgoJCWdsX0ZyYWdEZXB0aCA9IHRleHR1cmUoIGRlcHRoQ29sb3IsIHZlYzMoIGNvb3JkLngsIGNvb3JkLnksIDAgKSApLnI7CgoJfQoKfWA7CgogICAgLyoqCiAgICAgKiBBIFhSIG1vZHVsZSB0aGF0IG1hbmFnZXMgdGhlIGFjY2VzcyB0byB0aGUgRGVwdGggU2Vuc2luZyBBUEkuCiAgICAgKi8KICAgIGNsYXNzIFdlYlhSRGVwdGhTZW5zaW5nIHsKCiAgICAJLyoqCiAgICAJICogQ29uc3RydWN0cyBhIG5ldyBkZXB0aCBzZW5zaW5nIG1vZHVsZS4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvcigpIHsKCiAgICAJCS8qKgogICAgCQkgKiBBIHRleHR1cmUgcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGUgdXNlcidzIGVudmlyb25tZW50LgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7P1RleHR1cmV9CiAgICAJCSAqLwogICAgCQl0aGlzLnRleHR1cmUgPSBudWxsOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgcGxhbmUgbWVzaCBmb3IgdmlzdWFsaXppbmcgdGhlIGRlcHRoIHRleHR1cmUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHs/TWVzaH0KICAgIAkJICovCiAgICAJCXRoaXMubWVzaCA9IG51bGw7CgogICAgCQkvKioKICAgIAkJICogVGhlIGRlcHRoIG5lYXIgdmFsdWUuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqLwogICAgCQl0aGlzLmRlcHRoTmVhciA9IDA7CgogICAgCQkvKioKICAgIAkJICogVGhlIGRlcHRoIG5lYXIgZmFyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7bnVtYmVyfQogICAgCQkgKi8KICAgIAkJdGhpcy5kZXB0aEZhciA9IDA7CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogSW5pdHMgdGhlIGRlcHRoIHNlbnNpbmcgbW9kdWxlCiAgICAJICoKICAgIAkgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLgogICAgCSAqIEBwYXJhbSB7WFJXZWJHTERlcHRoSW5mb3JtYXRpb259IGRlcHRoRGF0YSAtIFRoZSBYUiBkZXB0aCBkYXRhLgogICAgCSAqIEBwYXJhbSB7WFJSZW5kZXJTdGF0ZX0gcmVuZGVyU3RhdGUgLSBUaGUgWFIgcmVuZGVyIHN0YXRlLgogICAgCSAqLwogICAgCWluaXQoIHJlbmRlcmVyLCBkZXB0aERhdGEsIHJlbmRlclN0YXRlICkgewoKICAgIAkJaWYgKCB0aGlzLnRleHR1cmUgPT09IG51bGwgKSB7CgogICAgCQkJY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7CgogICAgCQkJY29uc3QgdGV4UHJvcHMgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwogICAgCQkJdGV4UHJvcHMuX193ZWJnbFRleHR1cmUgPSBkZXB0aERhdGEudGV4dHVyZTsKCiAgICAJCQlpZiAoICggZGVwdGhEYXRhLmRlcHRoTmVhciAhPT0gcmVuZGVyU3RhdGUuZGVwdGhOZWFyICkgfHwgKCBkZXB0aERhdGEuZGVwdGhGYXIgIT09IHJlbmRlclN0YXRlLmRlcHRoRmFyICkgKSB7CgogICAgCQkJCXRoaXMuZGVwdGhOZWFyID0gZGVwdGhEYXRhLmRlcHRoTmVhcjsKICAgIAkJCQl0aGlzLmRlcHRoRmFyID0gZGVwdGhEYXRhLmRlcHRoRmFyOwoKICAgIAkJCX0KCiAgICAJCQl0aGlzLnRleHR1cmUgPSB0ZXh0dXJlOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSBwbGFuZSBtZXNoIHRoYXQgdmlzdWFsaXplcyB0aGUgZGVwdGggdGV4dHVyZS4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7QXJyYXlDYW1lcmF9IGNhbWVyYVhSIC0gVGhlIFhSIGNhbWVyYS4KICAgIAkgKiBAcmV0dXJuIHs/TWVzaH0gVGhlIHBsYW5lIG1lc2guCiAgICAJICovCiAgICAJZ2V0TWVzaCggY2FtZXJhWFIgKSB7CgogICAgCQlpZiAoIHRoaXMudGV4dHVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQlpZiAoIHRoaXMubWVzaCA9PT0gbnVsbCApIHsKCiAgICAJCQkJY29uc3Qgdmlld3BvcnQgPSBjYW1lcmFYUi5jYW1lcmFzWyAwIF0udmlld3BvcnQ7CiAgICAJCQkJY29uc3QgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHsKICAgIAkJCQkJdmVydGV4U2hhZGVyOiBfb2NjbHVzaW9uX3ZlcnRleCwKICAgIAkJCQkJZnJhZ21lbnRTaGFkZXI6IF9vY2NsdXNpb25fZnJhZ21lbnQsCiAgICAJCQkJCXVuaWZvcm1zOiB7CiAgICAJCQkJCQlkZXB0aENvbG9yOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfSwKICAgIAkJCQkJCWRlcHRoV2lkdGg6IHsgdmFsdWU6IHZpZXdwb3J0LnogfSwKICAgIAkJCQkJCWRlcHRoSGVpZ2h0OiB7IHZhbHVlOiB2aWV3cG9ydC53IH0KICAgIAkJCQkJfQogICAgCQkJCX0gKTsKCiAgICAJCQkJdGhpcy5tZXNoID0gbmV3IE1lc2goIG5ldyBQbGFuZUdlb21ldHJ5KCAyMCwgMjAgKSwgbWF0ZXJpYWwgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlyZXR1cm4gdGhpcy5tZXNoOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlc2V0cyB0aGUgbW9kdWxlCiAgICAJICovCiAgICAJcmVzZXQoKSB7CgogICAgCQl0aGlzLnRleHR1cmUgPSBudWxsOwogICAgCQl0aGlzLm1lc2ggPSBudWxsOwoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJldHVybnMgYSB0ZXh0dXJlIHJlcHJlc2VudGluZyB0aGUgZGVwdGggb2YgdGhlIHVzZXIncyBlbnZpcm9ubWVudC4KICAgIAkgKgogICAgCSAqIEByZXR1cm4gez9UZXh0dXJlfSBUaGUgZGVwdGggdGV4dHVyZS4KICAgIAkgKi8KICAgIAlnZXREZXB0aFRleHR1cmUoKSB7CgogICAgCQlyZXR1cm4gdGhpcy50ZXh0dXJlOwoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGFuIGFic3RyYWN0aW9uIG9mIHRoZSBXZWJYUiBEZXZpY2UgQVBJIGFuZCBpcwogICAgICogaW50ZXJuYWxseSB1c2VkIGJ5IHtAbGluayBXZWJHTFJlbmRlcmVyfS4gYFdlYlhSTWFuYWdlcmAgYWxzbyBwcm92aWRlcyBhIHB1YmxpYwogICAgICogaW50ZXJmYWNlIHRoYXQgYWxsb3dzIHVzZXJzIHRvIGVuYWJsZS9kaXNhYmxlIFhSIGFuZCBwZXJmb3JtIFhSIHJlbGF0ZWQKICAgICAqIHRhc2tzIGxpa2UgZm9yIGluc3RhbmNlIHJldHJpZXZpbmcgY29udHJvbGxlcnMuCiAgICAgKgogICAgICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlcgogICAgICogQGhpZGVjb25zdHJ1Y3RvcgogICAgICovCiAgICBjbGFzcyBXZWJYUk1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IFdlYkdMIHJlbmRlcmVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci4KICAgIAkgKiBAcGFyYW0ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIHJlbmRlcmluZyBjb250ZXh0LgogICAgCSAqLwogICAgCWNvbnN0cnVjdG9yKCByZW5kZXJlciwgZ2wgKSB7CgogICAgCQlzdXBlcigpOwoKICAgIAkJY29uc3Qgc2NvcGUgPSB0aGlzOwoKICAgIAkJbGV0IHNlc3Npb24gPSBudWxsOwoKICAgIAkJbGV0IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7CgogICAgCQlsZXQgcmVmZXJlbmNlU3BhY2UgPSBudWxsOwogICAgCQlsZXQgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJzsKICAgIAkJLy8gU2V0IGRlZmF1bHQgZm92ZWF0aW9uIHRvIG1heGltdW0uCiAgICAJCWxldCBmb3ZlYXRpb24gPSAxLjA7CiAgICAJCWxldCBjdXN0b21SZWZlcmVuY2VTcGFjZSA9IG51bGw7CgogICAgCQlsZXQgcG9zZSA9IG51bGw7CiAgICAJCWxldCBnbEJpbmRpbmcgPSBudWxsOwogICAgCQlsZXQgZ2xQcm9qTGF5ZXIgPSBudWxsOwogICAgCQlsZXQgZ2xCYXNlTGF5ZXIgPSBudWxsOwogICAgCQlsZXQgeHJGcmFtZSA9IG51bGw7CgogICAgCQljb25zdCBkZXB0aFNlbnNpbmcgPSBuZXcgV2ViWFJEZXB0aFNlbnNpbmcoKTsKICAgIAkJY29uc3QgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7CgogICAgCQlsZXQgaW5pdGlhbFJlbmRlclRhcmdldCA9IG51bGw7CiAgICAJCWxldCBuZXdSZW5kZXJUYXJnZXQgPSBudWxsOwoKICAgIAkJY29uc3QgY29udHJvbGxlcnMgPSBbXTsKICAgIAkJY29uc3QgY29udHJvbGxlcklucHV0U291cmNlcyA9IFtdOwoKICAgIAkJY29uc3QgY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpOwogICAgCQlsZXQgY3VycmVudFBpeGVsUmF0aW8gPSBudWxsOwoKICAgIAkJLy8KCiAgICAJCWNvbnN0IGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTsKICAgIAkJY2FtZXJhTC52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7CgogICAgCQljb25zdCBjYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7CiAgICAJCWNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpOwoKICAgIAkJY29uc3QgY2FtZXJhcyA9IFsgY2FtZXJhTCwgY2FtZXJhUiBdOwoKICAgIAkJY29uc3QgY2FtZXJhWFIgPSBuZXcgQXJyYXlDYW1lcmEoKTsKCiAgICAJCWxldCBfY3VycmVudERlcHRoTmVhciA9IG51bGw7CiAgICAJCWxldCBfY3VycmVudERlcHRoRmFyID0gbnVsbDsKCiAgICAJCS8vCgogICAgCQkvKioKICAgIAkJICogV2hldGhlciB0aGUgbWFuYWdlcidzIFhSIGNhbWVyYSBzaG91bGQgYmUgYXV0b21hdGljYWxseSB1cGRhdGVkIG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuY2FtZXJhQXV0b1VwZGF0ZSA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIG5vdGlmaWVzIHRoZSByZW5kZXJlciB0byBiZSByZWFkeSBmb3IgWFIgcmVuZGVyaW5nLiBTZXQgaXQgdG8gYHRydWVgCiAgICAJCSAqIGlmIHlvdSBhcmUgZ29pbmcgdG8gdXNlIFhSIGluIHlvdXIgYXBwLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuZW5hYmxlZCA9IGZhbHNlOwoKICAgIAkJLyoqCiAgICAJCSAqIFdoZXRoZXIgWFIgcHJlc2VudGF0aW9uIGlzIGFjdGl2ZSBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgZmFsc2UKICAgIAkJICovCiAgICAJCXRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYHRhcmdldCByYXlgIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLgogICAgCQkgKiBVc2UgdGhpcyBzcGFjZSBmb3IgdmlzdWFsaXppbmcgM0Qgb2JqZWN0cyB0aGF0IHN1cHBvcnQgdGhlIHVzZXIgaW4gcG9pbnRpbmcKICAgIAkJICogdGFza3MgbGlrZSBVSSBpbnRlcmFjdGlvbi4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBjb250cm9sbGVyLgogICAgCQkgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGB0YXJnZXQgcmF5YCBzcGFjZS4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uICggaW5kZXggKSB7CgogICAgCQkJbGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTsKCiAgICAJCQlpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJY29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTsKICAgIAkJCQljb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7CgogICAgCQkJfQoKICAgIAkJCXJldHVybiBjb250cm9sbGVyLmdldFRhcmdldFJheVNwYWNlKCk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgYSBncm91cCByZXByZXNlbnRpbmcgdGhlIGBncmlwYCBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci4KICAgIAkJICogVXNlIHRoaXMgc3BhY2UgZm9yIHZpc3VhbGl6aW5nIDNEIG9iamVjdHMgdGhhdCBzdXBwb3J0IHRoZSB1c2VyIGluIHBvaW50aW5nCiAgICAJCSAqIHRhc2tzIGxpa2UgVUkgaW50ZXJhY3Rpb24uCiAgICAJCSAqCiAgICAJCSAqIE5vdGU6IElmIHlvdSB3YW50IHRvIHNob3cgc29tZXRoaW5nIGluIHRoZSB1c2VyJ3MgaGFuZCBBTkQgb2ZmZXIgYQogICAgCQkgKiBwb2ludGluZyByYXkgYXQgdGhlIHNhbWUgdGltZSwgeW91J2xsIHdhbnQgdG8gYXR0YWNoZWQgdGhlIGhhbmRoZWxkIG9iamVjdAogICAgCQkgKiB0byB0aGUgZ3JvdXAgcmV0dXJuZWQgYnkgYGdldENvbnRyb2xsZXJHcmlwKClgIGFuZCB0aGUgcmF5IHRvIHRoZQogICAgCQkgKiBncm91cCByZXR1cm5lZCBieSBgZ2V0Q29udHJvbGxlcigpYC4gVGhlIGlkZWEgaXMgdG8gaGF2ZSB0d28KICAgIAkJICogZGlmZmVyZW50IGdyb3VwcyBpbiB0d28gZGlmZmVyZW50IGNvb3JkaW5hdGUgc3BhY2VzIGZvciB0aGUgc2FtZSBXZWJYUgogICAgCQkgKiBjb250cm9sbGVyLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGNvbnRyb2xsZXIuCiAgICAJCSAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYGdyaXBgIHNwYWNlLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRDb250cm9sbGVyR3JpcCA9IGZ1bmN0aW9uICggaW5kZXggKSB7CgogICAgCQkJbGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTsKCiAgICAJCQlpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJY29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTsKICAgIAkJCQljb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7CgogICAgCQkJfQoKICAgIAkJCXJldHVybiBjb250cm9sbGVyLmdldEdyaXBTcGFjZSgpOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgaGFuZGAgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuCiAgICAJCSAqIFVzZSB0aGlzIHNwYWNlIGZvciB2aXN1YWxpemluZyAzRCBvYmplY3RzIHRoYXQgc3VwcG9ydCB0aGUgdXNlciBpbiBwb2ludGluZwogICAgCQkgKiB0YXNrcyBsaWtlIFVJIGludGVyYWN0aW9uLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGNvbnRyb2xsZXIuCiAgICAJCSAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYGhhbmRgIHNwYWNlLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRIYW5kID0gZnVuY3Rpb24gKCBpbmRleCApIHsKCiAgICAJCQlsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdOwoKICAgIAkJCWlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQljb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpOwogICAgCQkJCWNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjsKCiAgICAJCQl9CgogICAgCQkJcmV0dXJuIGNvbnRyb2xsZXIuZ2V0SGFuZFNwYWNlKCk7CgogICAgCQl9OwoKICAgIAkJLy8KCiAgICAJCWZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHsKCiAgICAJCQljb25zdCBjb250cm9sbGVySW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGV2ZW50LmlucHV0U291cmNlICk7CgogICAgCQkJaWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkgewoKICAgIAkJCQlyZXR1cm47CgogICAgCQkJfQoKICAgIAkJCWNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgY29udHJvbGxlckluZGV4IF07CgogICAgCQkJaWYgKCBjb250cm9sbGVyICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWNvbnRyb2xsZXIudXBkYXRlKCBldmVudC5pbnB1dFNvdXJjZSwgZXZlbnQuZnJhbWUsIGN1c3RvbVJlZmVyZW5jZVNwYWNlIHx8IHJlZmVyZW5jZVNwYWNlICk7CiAgICAJCQkJY29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUsIGRhdGE6IGV2ZW50LmlucHV0U291cmNlIH0gKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBvblNlc3Npb25FbmQoKSB7CgogICAgCQkJc2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTsKICAgIAkJCXNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTsKICAgIAkJCXNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7CiAgICAJCQlzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTsKICAgIAkJCXNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7CiAgICAJCQlzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplZW5kJywgb25TZXNzaW9uRXZlbnQgKTsKICAgIAkJCXNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApOwogICAgCQkJc2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgb25JbnB1dFNvdXJjZXNDaGFuZ2UgKTsKCiAgICAJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCWNvbnN0IGlucHV0U291cmNlID0gY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdOwoKICAgIAkJCQlpZiAoIGlucHV0U291cmNlID09PSBudWxsICkgY29udGludWU7CgogICAgCQkJCWNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IG51bGw7CgogICAgCQkJCWNvbnRyb2xsZXJzWyBpIF0uZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTsKCiAgICAJCQl9CgogICAgCQkJX2N1cnJlbnREZXB0aE5lYXIgPSBudWxsOwogICAgCQkJX2N1cnJlbnREZXB0aEZhciA9IG51bGw7CgogICAgCQkJZGVwdGhTZW5zaW5nLnJlc2V0KCk7CgogICAgCQkJLy8gcmVzdG9yZSBmcmFtZWJ1ZmZlci9yZW5kZXJpbmcgc3RhdGUKCiAgICAJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGluaXRpYWxSZW5kZXJUYXJnZXQgKTsKCiAgICAJCQlnbEJhc2VMYXllciA9IG51bGw7CiAgICAJCQlnbFByb2pMYXllciA9IG51bGw7CiAgICAJCQlnbEJpbmRpbmcgPSBudWxsOwogICAgCQkJc2Vzc2lvbiA9IG51bGw7CiAgICAJCQluZXdSZW5kZXJUYXJnZXQgPSBudWxsOwoKICAgIAkJCS8vCgogICAgCQkJYW5pbWF0aW9uLnN0b3AoKTsKCiAgICAJCQlzY29wZS5pc1ByZXNlbnRpbmcgPSBmYWxzZTsKCiAgICAJCQlyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCBjdXJyZW50UGl4ZWxSYXRpbyApOwogICAgCQkJcmVuZGVyZXIuc2V0U2l6ZSggY3VycmVudFNpemUud2lkdGgsIGN1cnJlbnRTaXplLmhlaWdodCwgZmFsc2UgKTsKCiAgICAJCQlzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7CgogICAgCQl9CgogICAgCQkvKioKICAgIAkJICogU2V0cyB0aGUgZnJhbWVidWZmZXIgc2NhbGUgZmFjdG9yLgogICAgCQkgKgogICAgCQkgKiBUaGlzIG1ldGhvZCBjYW4gbm90IGJlIHVzZWQgZHVyaW5nIGEgWFIgc2Vzc2lvbi4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGZyYW1lYnVmZmVyIHNjYWxlIGZhY3Rvci4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgogICAgCQkJZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlOwoKICAgIAkJCWlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgZnJhbWVidWZmZXIgc2NhbGUgd2hpbGUgcHJlc2VudGluZy4nICk7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBTZXRzIHRoZSByZWZlcmVuY2Ugc3BhY2UgdHlwZS4gQ2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIGEgc3BhdGlhbCByZWxhdGlvbnNoaXAgd2l0aCB0aGUgdXNlcidzIHBoeXNpY2FsCiAgICAJCSAqIGVudmlyb25tZW50LiBEZXBlbmRpbmcgb24gaG93IHRoZSB1c2VyIG1vdmVzIGluIDNEIHNwYWNlLCBzZXR0aW5nIGFuIGFwcHJvcHJpYXRlIHJlZmVyZW5jZSBzcGFjZSBjYW4KICAgIAkJICogaW1wcm92ZSB0cmFja2luZy4gRGVmYXVsdCBpcyBgbG9jYWwtZmxvb3JgLiBWYWxpZCB2YWx1ZXMgY2FuIGJlIGZvdW5kIGhlcmUKICAgIAkJICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hSUmVmZXJlbmNlU3BhY2UjcmVmZXJlbmNlX3NwYWNlX3R5cGVzLgogICAgCQkgKgogICAgCQkgKiBUaGlzIG1ldGhvZCBjYW4gbm90IGJlIHVzZWQgZHVyaW5nIGEgWFIgc2Vzc2lvbi4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHJlZmVyZW5jZSBzcGFjZSB0eXBlLgogICAgCQkgKi8KICAgIAkJdGhpcy5zZXRSZWZlcmVuY2VTcGFjZVR5cGUgPSBmdW5jdGlvbiAoIHZhbHVlICkgewoKICAgIAkJCXJlZmVyZW5jZVNwYWNlVHlwZSA9IHZhbHVlOwoKICAgIAkJCWlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgcmVmZXJlbmNlIHNwYWNlIHR5cGUgd2hpbGUgcHJlc2VudGluZy4nICk7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIHRoZSBYUiByZWZlcmVuY2Ugc3BhY2UuCiAgICAJCSAqCiAgICAJCSAqIEByZXR1cm4ge1hSUmVmZXJlbmNlU3BhY2V9IFRoZSBYUiByZWZlcmVuY2Ugc3BhY2UuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldFJlZmVyZW5jZVNwYWNlID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXJldHVybiBjdXN0b21SZWZlcmVuY2VTcGFjZSB8fCByZWZlcmVuY2VTcGFjZTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2V0cyBhIGN1c3RvbSBYUiByZWZlcmVuY2Ugc3BhY2UuCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7WFJSZWZlcmVuY2VTcGFjZX0gc3BhY2UgLSBUaGUgWFIgcmVmZXJlbmNlIHNwYWNlLgogICAgCQkgKi8KICAgIAkJdGhpcy5zZXRSZWZlcmVuY2VTcGFjZSA9IGZ1bmN0aW9uICggc3BhY2UgKSB7CgogICAgCQkJY3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBzcGFjZTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgY3VycmVudCBiYXNlIGxheWVyLgogICAgCQkgKgogICAgCQkgKiBAcmV0dXJuIHs/KFhSV2ViR0xMYXllcnxYUlByb2plY3Rpb25MYXllcil9IFRoZSBYUiBiYXNlIGxheWVyLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRCYXNlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIGdsUHJvakxheWVyICE9PSBudWxsID8gZ2xQcm9qTGF5ZXIgOiBnbEJhc2VMYXllcjsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgY3VycmVudCBYUiBiaW5kaW5nLgogICAgCQkgKgogICAgCQkgKiBAcmV0dXJuIHs/WFJXZWJHTEJpbmRpbmd9IFRoZSBYUiBiaW5kaW5nLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRCaW5kaW5nID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXJldHVybiBnbEJpbmRpbmc7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGN1cnJlbnQgWFIgZnJhbWUuCiAgICAJCSAqCiAgICAJCSAqIEByZXR1cm4gez9YUkZyYW1lfSBUaGUgWFIgZnJhbWUuIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIGEgWFIgc2Vzc2lvbi4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0RnJhbWUgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIHhyRnJhbWU7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGN1cnJlbnQgWFIgc2Vzc2lvbi4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7P1hSU2Vzc2lvbn0gVGhlIFhSIHNlc3Npb24uIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIGEgWFIgc2Vzc2lvbi4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gc2Vzc2lvbjsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogQWZ0ZXIgYSBYUiBzZXNzaW9uIGhhcyBiZWVuIHJlcXVlc3RlZCB1c3VhbGx5IHdpdGggb25lIG9mIHRoZSBgKkJ1dHRvbmAgbW9kdWxlcywgaXQKICAgIAkJICogaXMgaW5qZWN0ZWQgaW50byB0aGUgcmVuZGVyZXIgd2l0aCB0aGlzIG1ldGhvZC4gVGhpcyBtZXRob2QgdHJpZ2dlcnMgdGhlIHN0YXJ0IG9mCiAgICAJCSAqIHRoZSBhY3R1YWwgWFIgcmVuZGVyaW5nLgogICAgCQkgKgogICAgCQkgKiBAYXN5bmMKICAgIAkJICogQHBhcmFtIHtYUlNlc3Npb259IHZhbHVlIC0gVGhlIFhSIHNlc3Npb24gdG8gc2V0LgogICAgCQkgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBzZXNzaW9uIGhhcyBiZWVuIHNldC4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0U2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICggdmFsdWUgKSB7CgogICAgCQkJc2Vzc2lvbiA9IHZhbHVlOwoKICAgIAkJCWlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHsKCiAgICAJCQkJaW5pdGlhbFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpOwoKICAgIAkJCQlzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3QnLCBvblNlc3Npb25FdmVudCApOwogICAgCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTsKICAgIAkJCQlzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApOwogICAgCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemUnLCBvblNlc3Npb25FdmVudCApOwogICAgCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7CiAgICAJCQkJc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7CiAgICAJCQkJc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kICk7CiAgICAJCQkJc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgb25JbnB1dFNvdXJjZXNDaGFuZ2UgKTsKCiAgICAJCQkJaWYgKCBhdHRyaWJ1dGVzLnhyQ29tcGF0aWJsZSAhPT0gdHJ1ZSApIHsKCiAgICAJCQkJCWF3YWl0IGdsLm1ha2VYUkNvbXBhdGlibGUoKTsKCiAgICAJCQkJfQoKICAgIAkJCQljdXJyZW50UGl4ZWxSYXRpbyA9IHJlbmRlcmVyLmdldFBpeGVsUmF0aW8oKTsKICAgIAkJCQlyZW5kZXJlci5nZXRTaXplKCBjdXJyZW50U2l6ZSApOwoKICAgIAkJCQkvLyBDaGVjayB0aGF0IHRoZSBicm93c2VyIGltcGxlbWVudHMgdGhlIG5lY2Vzc2FyeSBBUElzIHRvIHVzZSBhbgogICAgCQkJCS8vIFhSUHJvamVjdGlvbkxheWVyIHJhdGhlciB0aGFuIGFuIFhSV2ViR0xMYXllcgogICAgCQkJCWNvbnN0IHVzZUxheWVycyA9IHR5cGVvZiBYUldlYkdMQmluZGluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2NyZWF0ZVByb2plY3Rpb25MYXllcicgaW4gWFJXZWJHTEJpbmRpbmcucHJvdG90eXBlOwoKICAgIAkJCQlpZiAoICEgdXNlTGF5ZXJzICkgewoKICAgIAkJCQkJY29uc3QgbGF5ZXJJbml0ID0gewogICAgCQkJCQkJYW50aWFsaWFzOiBhdHRyaWJ1dGVzLmFudGlhbGlhcywKICAgIAkJCQkJCWFscGhhOiB0cnVlLAogICAgCQkJCQkJZGVwdGg6IGF0dHJpYnV0ZXMuZGVwdGgsCiAgICAJCQkJCQlzdGVuY2lsOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsCiAgICAJCQkJCQlmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yCiAgICAJCQkJCX07CgogICAgCQkJCQlnbEJhc2VMYXllciA9IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsLCBsYXllckluaXQgKTsKCiAgICAJCQkJCXNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgYmFzZUxheWVyOiBnbEJhc2VMYXllciB9ICk7CgogICAgCQkJCQlyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCAxICk7CiAgICAJCQkJCXJlbmRlcmVyLnNldFNpemUoIGdsQmFzZUxheWVyLmZyYW1lYnVmZmVyV2lkdGgsIGdsQmFzZUxheWVyLmZyYW1lYnVmZmVySGVpZ2h0LCBmYWxzZSApOwoKICAgIAkJCQkJbmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KAogICAgCQkJCQkJZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCwKICAgIAkJCQkJCWdsQmFzZUxheWVyLmZyYW1lYnVmZmVySGVpZ2h0LAogICAgCQkJCQkJewogICAgCQkJCQkJCWZvcm1hdDogUkdCQUZvcm1hdCwKICAgIAkJCQkJCQl0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLAogICAgCQkJCQkJCWNvbG9yU3BhY2U6IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UsCiAgICAJCQkJCQkJc3RlbmNpbEJ1ZmZlcjogYXR0cmlidXRlcy5zdGVuY2lsLAogICAgCQkJCQkJCXJlc29sdmVEZXB0aEJ1ZmZlcjogKCBnbEJhc2VMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSwKICAgIAkJCQkJCQlyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogKCBnbEJhc2VMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKQoKICAgIAkJCQkJCX0KICAgIAkJCQkJKTsKCiAgICAJCQkJfSBlbHNlIHsKCiAgICAJCQkJCWxldCBkZXB0aEZvcm1hdCA9IG51bGw7CiAgICAJCQkJCWxldCBkZXB0aFR5cGUgPSBudWxsOwogICAgCQkJCQlsZXQgZ2xEZXB0aEZvcm1hdCA9IG51bGw7CgogICAgCQkJCQlpZiAoIGF0dHJpYnV0ZXMuZGVwdGggKSB7CgogICAgCQkJCQkJZ2xEZXB0aEZvcm1hdCA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9DT01QT05FTlQyNDsKICAgIAkJCQkJCWRlcHRoRm9ybWF0ID0gYXR0cmlidXRlcy5zdGVuY2lsID8gRGVwdGhTdGVuY2lsRm9ybWF0IDogRGVwdGhGb3JtYXQ7CiAgICAJCQkJCQlkZXB0aFR5cGUgPSBhdHRyaWJ1dGVzLnN0ZW5jaWwgPyBVbnNpZ25lZEludDI0OFR5cGUgOiBVbnNpZ25lZEludFR5cGU7CgogICAgCQkJCQl9CgogICAgCQkJCQljb25zdCBwcm9qZWN0aW9ubGF5ZXJJbml0ID0gewogICAgCQkJCQkJY29sb3JGb3JtYXQ6IGdsLlJHQkE4LAogICAgCQkJCQkJZGVwdGhGb3JtYXQ6IGdsRGVwdGhGb3JtYXQsCiAgICAJCQkJCQlzY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvcgogICAgCQkJCQl9OwoKICAgIAkJCQkJZ2xCaW5kaW5nID0gbmV3IFhSV2ViR0xCaW5kaW5nKCBzZXNzaW9uLCBnbCApOwoKICAgIAkJCQkJZ2xQcm9qTGF5ZXIgPSBnbEJpbmRpbmcuY3JlYXRlUHJvamVjdGlvbkxheWVyKCBwcm9qZWN0aW9ubGF5ZXJJbml0ICk7CgogICAgCQkJCQlzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7IGxheWVyczogWyBnbFByb2pMYXllciBdIH0gKTsKCiAgICAJCQkJCXJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIDEgKTsKICAgIAkJCQkJcmVuZGVyZXIuc2V0U2l6ZSggZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLCBnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LCBmYWxzZSApOwoKICAgIAkJCQkJbmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KAogICAgCQkJCQkJZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLAogICAgCQkJCQkJZ2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCwKICAgIAkJCQkJCXsKICAgIAkJCQkJCQlmb3JtYXQ6IFJHQkFGb3JtYXQsCiAgICAJCQkJCQkJdHlwZTogVW5zaWduZWRCeXRlVHlwZSwKICAgIAkJCQkJCQlkZXB0aFRleHR1cmU6IG5ldyBEZXB0aFRleHR1cmUoIGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCwgZ2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCwgZGVwdGhUeXBlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkZXB0aEZvcm1hdCApLAogICAgCQkJCQkJCXN0ZW5jaWxCdWZmZXI6IGF0dHJpYnV0ZXMuc3RlbmNpbCwKICAgIAkJCQkJCQljb2xvclNwYWNlOiByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlLAogICAgCQkJCQkJCXNhbXBsZXM6IGF0dHJpYnV0ZXMuYW50aWFsaWFzID8gNCA6IDAsCiAgICAJCQkJCQkJcmVzb2x2ZURlcHRoQnVmZmVyOiAoIGdsUHJvakxheWVyLmlnbm9yZURlcHRoVmFsdWVzID09PSBmYWxzZSApLAogICAgCQkJCQkJCXJlc29sdmVTdGVuY2lsQnVmZmVyOiAoIGdsUHJvakxheWVyLmlnbm9yZURlcHRoVmFsdWVzID09PSBmYWxzZSApCiAgICAJCQkJCQl9ICk7CgogICAgCQkJCX0KCiAgICAJCQkJbmV3UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPSB0cnVlOyAvLyBUT0RPIFJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUsIHNlZSAjMjMyNzgKCiAgICAJCQkJdGhpcy5zZXRGb3ZlYXRpb24oIGZvdmVhdGlvbiApOwoKICAgIAkJCQljdXN0b21SZWZlcmVuY2VTcGFjZSA9IG51bGw7CiAgICAJCQkJcmVmZXJlbmNlU3BhY2UgPSBhd2FpdCBzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICk7CgogICAgCQkJCWFuaW1hdGlvbi5zZXRDb250ZXh0KCBzZXNzaW9uICk7CiAgICAJCQkJYW5pbWF0aW9uLnN0YXJ0KCk7CgogICAgCQkJCXNjb3BlLmlzUHJlc2VudGluZyA9IHRydWU7CgogICAgCQkJCXNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSApOwoKICAgIAkJCX0KCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZSBmcm9tIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uCiAgICAJCSAqCiAgICAJCSAqIEByZXR1cm4geydvcGFxdWUnfCdhZGRpdGl2ZSd8J2FscGhhLWJsZW5kJ3x1bmRlZmluZWR9IFRoZSBlbnZpcm9ubWVudCBibGVuZCBtb2RlLiBSZXR1cm5zIGB1bmRlZmluZWRgIHdoZW4gdXNlZCBvdXRzaWRlIG9mIGEgWFIgc2Vzc2lvbi4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJaWYgKCBzZXNzaW9uICE9PSBudWxsICkgewoKICAgIAkJCQlyZXR1cm4gc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZTsKCiAgICAJCQl9CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGN1cnJlbnQgZGVwdGggdGV4dHVyZSBjb21wdXRlZCB2aWEgZGVwdGggc2Vuc2luZy4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7P1RleHR1cmV9IFRoZSBkZXB0aCB0ZXh0dXJlLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXREZXB0aFRleHR1cmUgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIGRlcHRoU2Vuc2luZy5nZXREZXB0aFRleHR1cmUoKTsKCiAgICAJCX07CgogICAgCQlmdW5jdGlvbiBvbklucHV0U291cmNlc0NoYW5nZSggZXZlbnQgKSB7CgogICAgCQkJLy8gTm90aWZ5IGRpc2Nvbm5lY3RlZAoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IGV2ZW50LnJlbW92ZWQubGVuZ3RoOyBpICsrICkgewoKICAgIAkJCQljb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTsKICAgIAkJCQljb25zdCBpbmRleCA9IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMuaW5kZXhPZiggaW5wdXRTb3VyY2UgKTsKCiAgICAJCQkJaWYgKCBpbmRleCA+PSAwICkgewoKICAgIAkJCQkJY29udHJvbGxlcklucHV0U291cmNlc1sgaW5kZXggXSA9IG51bGw7CiAgICAJCQkJCWNvbnRyb2xsZXJzWyBpbmRleCBdLmRpc2Nvbm5lY3QoIGlucHV0U291cmNlICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJLy8gTm90aWZ5IGNvbm5lY3RlZAoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IGV2ZW50LmFkZGVkLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdOwoKICAgIAkJCQlsZXQgY29udHJvbGxlckluZGV4ID0gY29udHJvbGxlcklucHV0U291cmNlcy5pbmRleE9mKCBpbnB1dFNvdXJjZSApOwoKICAgIAkJCQlpZiAoIGNvbnRyb2xsZXJJbmRleCA9PT0gLTEgKSB7CgogICAgCQkJCQkvLyBBc3NpZ24gaW5wdXQgc291cmNlIGEgY29udHJvbGxlciB0aGF0IGN1cnJlbnRseSBoYXMgbm8gaW5wdXQgc291cmNlCgogICAgCQkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCQkJaWYgKCBpID49IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMubGVuZ3RoICkgewoKICAgIAkJCQkJCQljb250cm9sbGVySW5wdXRTb3VyY2VzLnB1c2goIGlucHV0U291cmNlICk7CiAgICAJCQkJCQkJY29udHJvbGxlckluZGV4ID0gaTsKICAgIAkJCQkJCQlicmVhazsKCiAgICAJCQkJCQl9IGVsc2UgaWYgKCBjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF0gPT09IG51bGwgKSB7CgogICAgCQkJCQkJCWNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IGlucHV0U291cmNlOwogICAgCQkJCQkJCWNvbnRyb2xsZXJJbmRleCA9IGk7CiAgICAJCQkJCQkJYnJlYWs7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQkJLy8gSWYgYWxsIGNvbnRyb2xsZXJzIGRvIGN1cnJlbnRseSByZWNlaXZlIGlucHV0IHdlIGlnbm9yZSBuZXcgb25lcwoKICAgIAkJCQkJaWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkgYnJlYWs7CgogICAgCQkJCX0KCiAgICAJCQkJY29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBjb250cm9sbGVySW5kZXggXTsKCiAgICAJCQkJaWYgKCBjb250cm9sbGVyICkgewoKICAgIAkJCQkJY29udHJvbGxlci5jb25uZWN0KCBpbnB1dFNvdXJjZSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8KCiAgICAJCWNvbnN0IGNhbWVyYUxQb3MgPSBuZXcgVmVjdG9yMygpOwogICAgCQljb25zdCBjYW1lcmFSUG9zID0gbmV3IFZlY3RvcjMoKTsKCiAgICAJCS8qKgogICAgCQkgKiBBc3N1bWVzIDIgY2FtZXJhcyB0aGF0IGFyZSBwYXJhbGxlbCBhbmQgc2hhcmUgYW4gWC1heGlzLCBhbmQgdGhhdAogICAgCQkgKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LgogICAgCQkgKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy4KICAgIAkJICogVmlzdWFsaXphdGlvbiBvZiB0aGlzIHRlY2huaXF1ZTogaHR0cHM6Ly9jb21wdXRlcmdyYXBoaWNzLnN0YWNrZXhjaGFuZ2UuY29tL2EvNDc2NQogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge0FycmF5Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRvIHVwZGF0ZS4KICAgIAkJICogQHBhcmFtIHtQZXJzcGVjdGl2ZUNhbWVyYX0gY2FtZXJhTCAtIFRoZSBsZWZ0IGNhbWVyYS4KICAgIAkJICogQHBhcmFtIHtQZXJzcGVjdGl2ZUNhbWVyYX0gY2FtZXJhUiAtIFRoZSByaWdodCBjYW1lcmEuCiAgICAJCSAqLwogICAgCQlmdW5jdGlvbiBzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmEsIGNhbWVyYUwsIGNhbWVyYVIgKSB7CgogICAgCQkJY2FtZXJhTFBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYUwubWF0cml4V29ybGQgKTsKICAgIAkJCWNhbWVyYVJQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFSLm1hdHJpeFdvcmxkICk7CgogICAgCQkJY29uc3QgaXBkID0gY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBjYW1lcmFSUG9zICk7CgogICAgCQkJY29uc3QgcHJvakwgPSBjYW1lcmFMLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7CiAgICAJCQljb25zdCBwcm9qUiA9IGNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50czsKCiAgICAJCQkvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kCiAgICAJCQkvLyBtb3N0IGxpa2VseSBpZGVudGljYWwgdG9wIGFuZCBib3R0b20gZnJ1c3R1bSBleHRlbnRzLgogICAgCQkJLy8gVXNlIHRoZSBsZWZ0IGNhbWVyYSBmb3IgdGhlc2UgdmFsdWVzLgogICAgCQkJY29uc3QgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTsKICAgIAkJCWNvbnN0IGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTsKICAgIAkJCWNvbnN0IHRvcEZvdiA9ICggcHJvakxbIDkgXSArIDEgKSAvIHByb2pMWyA1IF07CiAgICAJCQljb25zdCBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdOwoKICAgIAkJCWNvbnN0IGxlZnRGb3YgPSAoIHByb2pMWyA4IF0gLSAxICkgLyBwcm9qTFsgMCBdOwogICAgCQkJY29uc3QgcmlnaHRGb3YgPSAoIHByb2pSWyA4IF0gKyAxICkgLyBwcm9qUlsgMCBdOwogICAgCQkJY29uc3QgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92OwogICAgCQkJY29uc3QgcmlnaHQgPSBuZWFyICogcmlnaHRGb3Y7CgogICAgCQkJLy8gQ2FsY3VsYXRlIHRoZSBuZXcgY2FtZXJhJ3MgcG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlCiAgICAJCQkvLyBsZWZ0IGNhbWVyYS4geE9mZnNldCBzaG91bGQgYmUgcm91Z2hseSBoYWxmIGBpcGRgLgogICAgCQkJY29uc3Qgek9mZnNldCA9IGlwZCAvICggLSBsZWZ0Rm92ICsgcmlnaHRGb3YgKTsKICAgIAkJCWNvbnN0IHhPZmZzZXQgPSB6T2Zmc2V0ICogLSBsZWZ0Rm92OwoKICAgIAkJCS8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/CiAgICAJCQljYW1lcmFMLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7CiAgICAJCQljYW1lcmEudHJhbnNsYXRlWCggeE9mZnNldCApOwogICAgCQkJY2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTsKICAgIAkJCWNhbWVyYS5tYXRyaXhXb3JsZC5jb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTsKICAgIAkJCWNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7CgogICAgCQkJLy8gQ2hlY2sgaWYgdGhlIHByb2plY3Rpb24gdXNlcyBhbiBpbmZpbml0ZSBmYXIgcGxhbmUuCiAgICAJCQlpZiAoIHByb2pMWyAxMCBdID09PSAtMSApIHsKCiAgICAJCQkJLy8gVXNlIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCBmcm9tIHRoZSBsZWZ0IGV5ZS4KICAgIAkJCQkvLyBUaGUgY2FtZXJhIG9mZnNldCBpcyBzdWZmaWNpZW50IHRvIGluY2x1ZGUgdGhlIHZpZXcgdm9sdW1lcwogICAgCQkJCS8vIG9mIGJvdGggZXllcyAoYXNzdW1pbmcgc3ltbWV0cmljIHByb2plY3Rpb25zKS4KICAgIAkJCQljYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBjYW1lcmFMLnByb2plY3Rpb25NYXRyaXggKTsKICAgIAkJCQljYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCS8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGUKICAgIAkJCQkvLyB0aGUgdmFsdWVzIHNvIHRoYXQgdGhlIG5lYXIgcGxhbmUncyBwb3NpdGlvbiBkb2VzIG5vdCBjaGFuZ2UgaW4gd29ybGQgc3BhY2UsCiAgICAJCQkJLy8gYWx0aG91Z2ggbXVzdCBub3cgYmUgcmVsYXRpdmUgdG8gdGhlIG5ldyB1bmlvbiBjYW1lcmEuCiAgICAJCQkJY29uc3QgbmVhcjIgPSBuZWFyICsgek9mZnNldDsKICAgIAkJCQljb25zdCBmYXIyID0gZmFyICsgek9mZnNldDsKICAgIAkJCQljb25zdCBsZWZ0MiA9IGxlZnQgLSB4T2Zmc2V0OwogICAgCQkJCWNvbnN0IHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7CiAgICAJCQkJY29uc3QgdG9wMiA9IHRvcEZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjsKICAgIAkJCQljb25zdCBib3R0b20yID0gYm90dG9tRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyOwoKICAgIAkJCQljYW1lcmEucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQyLCByaWdodDIsIHRvcDIsIGJvdHRvbTIsIG5lYXIyLCBmYXIyICk7CiAgICAJCQkJY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHsKCiAgICAJCQlpZiAoIHBhcmVudCA9PT0gbnVsbCApIHsKCiAgICAJCQkJY2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXggKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7CgogICAgCQkJfQoKICAgIAkJCWNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7CgogICAgCQl9CgogICAgCQkvKioKICAgIAkJICogVXBkYXRlcyB0aGUgc3RhdGUgb2YgdGhlIFhSIGNhbWVyYS4gVXNlIHRoaXMgbWV0aG9kIG9uIGFwcCBsZXZlbCBpZiB5b3UKICAgIAkJICogc2V0IGNhbWVyYUF1dG9VcGRhdGVgIHRvIGBmYWxzZWAuIFRoZSBtZXRob2QgcmVxdWlyZXMgdGhlIG5vbi1YUgogICAgCQkgKiBjYW1lcmEgb2YgdGhlIHNjZW5lIGFzIGEgcGFyYW1ldGVyLiBUaGUgcGFzc2VkIGluIGNhbWVyYSdzIHRyYW5zZm9ybWF0aW9uCiAgICAJCSAqIGlzIGF1dG9tYXRpY2FsbHkgYWRqdXN0ZWQgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBYUiBjYW1lcmEgd2hlbiBjYWxsaW5nCiAgICAJCSAqIHRoaXMgbWV0aG9kLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYS4KICAgIAkJICovCiAgICAJCXRoaXMudXBkYXRlQ2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7CgogICAgCQkJaWYgKCBzZXNzaW9uID09PSBudWxsICkgcmV0dXJuOwoKICAgIAkJCWxldCBkZXB0aE5lYXIgPSBjYW1lcmEubmVhcjsKICAgIAkJCWxldCBkZXB0aEZhciA9IGNhbWVyYS5mYXI7CgogICAgCQkJaWYgKCBkZXB0aFNlbnNpbmcudGV4dHVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQkJaWYgKCBkZXB0aFNlbnNpbmcuZGVwdGhOZWFyID4gMCApIGRlcHRoTmVhciA9IGRlcHRoU2Vuc2luZy5kZXB0aE5lYXI7CiAgICAJCQkJaWYgKCBkZXB0aFNlbnNpbmcuZGVwdGhGYXIgPiAwICkgZGVwdGhGYXIgPSBkZXB0aFNlbnNpbmcuZGVwdGhGYXI7CgogICAgCQkJfQoKICAgIAkJCWNhbWVyYVhSLm5lYXIgPSBjYW1lcmFSLm5lYXIgPSBjYW1lcmFMLm5lYXIgPSBkZXB0aE5lYXI7CiAgICAJCQljYW1lcmFYUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gZGVwdGhGYXI7CgogICAgCQkJaWYgKCBfY3VycmVudERlcHRoTmVhciAhPT0gY2FtZXJhWFIubmVhciB8fCBfY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFYUi5mYXIgKSB7CgogICAgCQkJCS8vIE5vdGUgdGhhdCB0aGUgbmV3IHJlbmRlclN0YXRlIHdvbid0IGFwcGx5IHVudGlsIHRoZSBuZXh0IGZyYW1lLiBTZWUgIzE4MzIwCgogICAgCQkJCXNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsKICAgIAkJCQkJZGVwdGhOZWFyOiBjYW1lcmFYUi5uZWFyLAogICAgCQkJCQlkZXB0aEZhcjogY2FtZXJhWFIuZmFyCiAgICAJCQkJfSApOwoKICAgIAkJCQlfY3VycmVudERlcHRoTmVhciA9IGNhbWVyYVhSLm5lYXI7CiAgICAJCQkJX2N1cnJlbnREZXB0aEZhciA9IGNhbWVyYVhSLmZhcjsKCiAgICAJCQl9CgogICAgCQkJY2FtZXJhTC5sYXllcnMubWFzayA9IGNhbWVyYS5sYXllcnMubWFzayB8IDBiMDEwOwogICAgCQkJY2FtZXJhUi5sYXllcnMubWFzayA9IGNhbWVyYS5sYXllcnMubWFzayB8IDBiMTAwOwogICAgCQkJY2FtZXJhWFIubGF5ZXJzLm1hc2sgPSBjYW1lcmFMLmxheWVycy5tYXNrIHwgY2FtZXJhUi5sYXllcnMubWFzazsKCiAgICAJCQljb25zdCBwYXJlbnQgPSBjYW1lcmEucGFyZW50OwogICAgCQkJY29uc3QgY2FtZXJhcyA9IGNhbWVyYVhSLmNhbWVyYXM7CgogICAgCQkJdXBkYXRlQ2FtZXJhKCBjYW1lcmFYUiwgcGFyZW50ICk7CgogICAgCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgY2FtZXJhcy5sZW5ndGg7IGkgKysgKSB7CgogICAgCQkJCXVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTsKCiAgICAJCQl9CgogICAgCQkJLy8gdXBkYXRlIHByb2plY3Rpb24gbWF0cml4IGZvciBwcm9wZXIgdmlldyBmcnVzdHVtIGN1bGxpbmcKCiAgICAJCQlpZiAoIGNhbWVyYXMubGVuZ3RoID09PSAyICkgewoKICAgIAkJCQlzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFYUiwgY2FtZXJhTCwgY2FtZXJhUiApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCS8vIGFzc3VtZSBzaW5nbGUgY2FtZXJhIHNldHVwIChBUikKCiAgICAJCQkJY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBjYW1lcmFMLnByb2plY3Rpb25NYXRyaXggKTsKCiAgICAJCQl9CgogICAgCQkJLy8gdXBkYXRlIHVzZXIgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW4KCiAgICAJCQl1cGRhdGVVc2VyQ2FtZXJhKCBjYW1lcmEsIGNhbWVyYVhSLCBwYXJlbnQgKTsKCiAgICAJCX07CgogICAgCQlmdW5jdGlvbiB1cGRhdGVVc2VyQ2FtZXJhKCBjYW1lcmEsIGNhbWVyYVhSLCBwYXJlbnQgKSB7CgogICAgCQkJaWYgKCBwYXJlbnQgPT09IG51bGwgKSB7CgogICAgCQkJCWNhbWVyYS5tYXRyaXguY29weSggY2FtZXJhWFIubWF0cml4V29ybGQgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljYW1lcmEubWF0cml4LmNvcHkoIHBhcmVudC5tYXRyaXhXb3JsZCApOwogICAgCQkJCWNhbWVyYS5tYXRyaXguaW52ZXJ0KCk7CiAgICAJCQkJY2FtZXJhLm1hdHJpeC5tdWx0aXBseSggY2FtZXJhWFIubWF0cml4V29ybGQgKTsKCiAgICAJCQl9CgogICAgCQkJY2FtZXJhLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApOwogICAgCQkJY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7CgogICAgCQkJY2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeCApOwogICAgCQkJY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7CgogICAgCQkJaWYgKCBjYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHsKCiAgICAJCQkJY2FtZXJhLmZvdiA9IFJBRDJERUcgKiAyICogTWF0aC5hdGFuKCAxIC8gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSApOwogICAgCQkJCWNhbWVyYS56b29tID0gMTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgQXJyYXlDYW1lcmF9IHdoaWNoIHJlcHJlc2VudHMgdGhlIFhSIGNhbWVyYQogICAgCQkgKiBvZiB0aGUgYWN0aXZlIFhSIHNlc3Npb24uIEZvciBlYWNoIHZpZXcgaXQgaG9sZHMgYSBzZXBhcmF0ZSBjYW1lcmEgb2JqZWN0LgogICAgCQkgKgogICAgCQkgKiBUaGUgY2FtZXJhJ3MgYGZvdmAgaXMgY3VycmVudGx5IG5vdCB1c2VkIGFuZCBkb2VzIG5vdCByZWZsZWN0IHRoZSBmb3Ygb2YKICAgIAkJICogdGhlIFhSIGNhbWVyYS4gSWYgeW91IG5lZWQgdGhlIGZvdiBvbiBhcHAgbGV2ZWwsIHlvdSBoYXZlIHRvIGNvbXB1dGUgaW4KICAgIAkJICogbWFudWFsbHkgZnJvbSB0aGUgWFIgY2FtZXJhJ3MgcHJvamVjdGlvbiBtYXRyaWNlcy4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7QXJyYXlDYW1lcmF9IFRoZSBYUiBjYW1lcmEuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gY2FtZXJhWFI7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGFtb3VudCBvZiBmb3ZlYXRpb24gdXNlZCBieSB0aGUgWFIgY29tcG9zaXRvciBmb3IgdGhlIHByb2plY3Rpb24gbGF5ZXIuCiAgICAJCSAqCiAgICAJCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFtb3VudCBvZiBmb3ZlYXRpb24uCiAgICAJCSAqLwogICAgCQl0aGlzLmdldEZvdmVhdGlvbiA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlpZiAoIGdsUHJvakxheWVyID09PSBudWxsICYmIGdsQmFzZUxheWVyID09PSBudWxsICkgewoKICAgIAkJCQlyZXR1cm4gdW5kZWZpbmVkOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gZm92ZWF0aW9uOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBTZXRzIHRoZSBmb3ZlYXRpb24gdmFsdWUuCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIEEgbnVtYmVyIGluIHRoZSByYW5nZSBgWzAsMV1gIHdoZXJlIGAwYCBtZWFucyBubyBmb3ZlYXRpb24gKGZ1bGwgcmVzb2x1dGlvbikKICAgIAkJICogYW5kIGAxYCBtZWFucyBtYXhpbXVtIGZvdmVhdGlvbiAodGhlIGVkZ2VzIHJlbmRlciBhdCBsb3dlciByZXNvbHV0aW9uKS4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0Rm92ZWF0aW9uID0gZnVuY3Rpb24gKCB2YWx1ZSApIHsKCiAgICAJCQkvLyAwID0gbm8gZm92ZWF0aW9uID0gZnVsbCByZXNvbHV0aW9uCiAgICAJCQkvLyAxID0gbWF4aW11bSBmb3ZlYXRpb24gPSB0aGUgZWRnZXMgcmVuZGVyIGF0IGxvd2VyIHJlc29sdXRpb24KCiAgICAJCQlmb3ZlYXRpb24gPSB2YWx1ZTsKCiAgICAJCQlpZiAoIGdsUHJvakxheWVyICE9PSBudWxsICkgewoKICAgIAkJCQlnbFByb2pMYXllci5maXhlZEZvdmVhdGlvbiA9IHZhbHVlOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICYmIGdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCWdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uID0gdmFsdWU7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIGB0cnVlYCBpZiBkZXB0aCBzZW5zaW5nIGlzIHN1cHBvcnRlZC4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBkZXB0aCBzZW5zaW5nIGlzIHN1cHBvcnRlZCBvciBub3QuCiAgICAJCSAqLwogICAgCQl0aGlzLmhhc0RlcHRoU2Vuc2luZyA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gZGVwdGhTZW5zaW5nLnRleHR1cmUgIT09IG51bGw7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGRlcHRoIHNlbnNpbmcgbWVzaC4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7TWVzaH0gVGhlIGRlcHRoIHNlbnNpbmcgbWVzaC4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0RGVwdGhTZW5zaW5nTWVzaCA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gZGVwdGhTZW5zaW5nLmdldE1lc2goIGNhbWVyYVhSICk7CgogICAgCQl9OwoKICAgIAkJLy8gQW5pbWF0aW9uIExvb3AKCiAgICAJCWxldCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsOwoKICAgIAkJZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7CgogICAgCQkJcG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UoIGN1c3RvbVJlZmVyZW5jZVNwYWNlIHx8IHJlZmVyZW5jZVNwYWNlICk7CiAgICAJCQl4ckZyYW1lID0gZnJhbWU7CgogICAgCQkJaWYgKCBwb3NlICE9PSBudWxsICkgewoKICAgIAkJCQljb25zdCB2aWV3cyA9IHBvc2Uudmlld3M7CgogICAgCQkJCWlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7CgogICAgCQkJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXRGcmFtZWJ1ZmZlciggbmV3UmVuZGVyVGFyZ2V0LCBnbEJhc2VMYXllci5mcmFtZWJ1ZmZlciApOwogICAgCQkJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG5ld1JlbmRlclRhcmdldCApOwoKICAgIAkJCQl9CgogICAgCQkJCWxldCBjYW1lcmFYUk5lZWRzVXBkYXRlID0gZmFsc2U7CgogICAgCQkJCS8vIGNoZWNrIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIHJlYnVpbGQgY2FtZXJhWFIncyBjYW1lcmEgbGlzdAoKICAgIAkJCQlpZiAoIHZpZXdzLmxlbmd0aCAhPT0gY2FtZXJhWFIuY2FtZXJhcy5sZW5ndGggKSB7CgogICAgCQkJCQljYW1lcmFYUi5jYW1lcmFzLmxlbmd0aCA9IDA7CiAgICAJCQkJCWNhbWVyYVhSTmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCQl9CgogICAgCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IHZpZXdzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJCWNvbnN0IHZpZXcgPSB2aWV3c1sgaSBdOwoKICAgIAkJCQkJbGV0IHZpZXdwb3J0ID0gbnVsbDsKCiAgICAJCQkJCWlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7CgogICAgCQkJCQkJdmlld3BvcnQgPSBnbEJhc2VMYXllci5nZXRWaWV3cG9ydCggdmlldyApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQljb25zdCBnbFN1YkltYWdlID0gZ2xCaW5kaW5nLmdldFZpZXdTdWJJbWFnZSggZ2xQcm9qTGF5ZXIsIHZpZXcgKTsKICAgIAkJCQkJCXZpZXdwb3J0ID0gZ2xTdWJJbWFnZS52aWV3cG9ydDsKCiAgICAJCQkJCQkvLyBGb3Igc2lkZS1ieS1zaWRlIHByb2plY3Rpb24sIHdlIG9ubHkgcHJvZHVjZSBhIHNpbmdsZSB0ZXh0dXJlIGZvciBib3RoIGV5ZXMuCiAgICAJCQkJCQlpZiAoIGkgPT09IDAgKSB7CgogICAgCQkJCQkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldFRleHR1cmVzKAogICAgCQkJCQkJCQluZXdSZW5kZXJUYXJnZXQsCiAgICAJCQkJCQkJCWdsU3ViSW1hZ2UuY29sb3JUZXh0dXJlLAogICAgCQkJCQkJCQlnbFN1YkltYWdlLmRlcHRoU3RlbmNpbFRleHR1cmUgKTsKCiAgICAJCQkJCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9CgogICAgCQkJCQlsZXQgY2FtZXJhID0gY2FtZXJhc1sgaSBdOwoKICAgIAkJCQkJaWYgKCBjYW1lcmEgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCQljYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTsKICAgIAkJCQkJCWNhbWVyYS5sYXllcnMuZW5hYmxlKCBpICk7CiAgICAJCQkJCQljYW1lcmEudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpOwogICAgCQkJCQkJY2FtZXJhc1sgaSBdID0gY2FtZXJhOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJY2FtZXJhLm1hdHJpeC5mcm9tQXJyYXkoIHZpZXcudHJhbnNmb3JtLm1hdHJpeCApOwogICAgCQkJCQljYW1lcmEubWF0cml4LmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7CiAgICAJCQkJCWNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7CiAgICAJCQkJCWNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApLmludmVydCgpOwogICAgCQkJCQljYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7CgogICAgCQkJCQlpZiAoIGkgPT09IDAgKSB7CgogICAgCQkJCQkJY2FtZXJhWFIubWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXggKTsKICAgIAkJCQkJCWNhbWVyYVhSLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYVhSLnBvc2l0aW9uLCBjYW1lcmFYUi5xdWF0ZXJuaW9uLCBjYW1lcmFYUi5zY2FsZSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJaWYgKCBjYW1lcmFYUk5lZWRzVXBkYXRlID09PSB0cnVlICkgewoKICAgIAkJCQkJCWNhbWVyYVhSLmNhbWVyYXMucHVzaCggY2FtZXJhICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQkJLy8KCiAgICAJCQkJY29uc3QgZW5hYmxlZEZlYXR1cmVzID0gc2Vzc2lvbi5lbmFibGVkRmVhdHVyZXM7CiAgICAJCQkJY29uc3QgZ3B1RGVwdGhTZW5zaW5nRW5hYmxlZCA9IGVuYWJsZWRGZWF0dXJlcyAmJgogICAgCQkJCQllbmFibGVkRmVhdHVyZXMuaW5jbHVkZXMoICdkZXB0aC1zZW5zaW5nJyApICYmCiAgICAJCQkJCXNlc3Npb24uZGVwdGhVc2FnZSA9PSAnZ3B1LW9wdGltaXplZCc7CgogICAgCQkJCWlmICggZ3B1RGVwdGhTZW5zaW5nRW5hYmxlZCAmJiBnbEJpbmRpbmcgKSB7CgogICAgCQkJCQljb25zdCBkZXB0aERhdGEgPSBnbEJpbmRpbmcuZ2V0RGVwdGhJbmZvcm1hdGlvbiggdmlld3NbIDAgXSApOwoKICAgIAkJCQkJaWYgKCBkZXB0aERhdGEgJiYgZGVwdGhEYXRhLmlzVmFsaWQgJiYgZGVwdGhEYXRhLnRleHR1cmUgKSB7CgogICAgCQkJCQkJZGVwdGhTZW5zaW5nLmluaXQoIHJlbmRlcmVyLCBkZXB0aERhdGEsIHNlc3Npb24ucmVuZGVyU3RhdGUgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQkvLwoKICAgIAkJCWZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJY29uc3QgaW5wdXRTb3VyY2UgPSBjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF07CiAgICAJCQkJY29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07CgogICAgCQkJCWlmICggaW5wdXRTb3VyY2UgIT09IG51bGwgJiYgY29udHJvbGxlciAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJY29udHJvbGxlci51cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpZiAoIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayApIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayggdGltZSwgZnJhbWUgKTsKCiAgICAJCQlpZiAoIGZyYW1lLmRldGVjdGVkUGxhbmVzICkgewoKICAgIAkJCQlzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdwbGFuZXNkZXRlY3RlZCcsIGRhdGE6IGZyYW1lIH0gKTsKCiAgICAJCQl9CgogICAgCQkJeHJGcmFtZSA9IG51bGw7CgogICAgCQl9CgogICAgCQljb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTsKCiAgICAJCWFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7CgogICAgCQl0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKICAgIAkJCW9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrOwoKICAgIAkJfTsKCiAgICAJCXRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHt9OwoKICAgIAl9CgogICAgfQoKICAgIGNvbnN0IF9lMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7CiAgICBjb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7CgogICAgZnVuY3Rpb24gV2ViR0xNYXRlcmlhbHMoIHJlbmRlcmVyLCBwcm9wZXJ0aWVzICkgewoKICAgIAlmdW5jdGlvbiByZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWFwLCB1bmlmb3JtICkgewoKICAgIAkJaWYgKCBtYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHsKCiAgICAJCQltYXAudXBkYXRlTWF0cml4KCk7CgogICAgCQl9CgogICAgCQl1bmlmb3JtLnZhbHVlLmNvcHkoIG1hcC5tYXRyaXggKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZWZyZXNoRm9nVW5pZm9ybXMoIHVuaWZvcm1zLCBmb2cgKSB7CgogICAgCQlmb2cuY29sb3IuZ2V0UkdCKCB1bmlmb3Jtcy5mb2dDb2xvci52YWx1ZSwgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSggcmVuZGVyZXIgKSApOwoKICAgIAkJaWYgKCBmb2cuaXNGb2cgKSB7CgogICAgCQkJdW5pZm9ybXMuZm9nTmVhci52YWx1ZSA9IGZvZy5uZWFyOwogICAgCQkJdW5pZm9ybXMuZm9nRmFyLnZhbHVlID0gZm9nLmZhcjsKCiAgICAJCX0gZWxzZSBpZiAoIGZvZy5pc0ZvZ0V4cDIgKSB7CgogICAgCQkJdW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5OwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHBpeGVsUmF0aW8sIGhlaWdodCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJaWYgKCBtYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsICkgewoKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7CgogICAgCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgKSB7CgogICAgCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCApIHsKCiAgICAJCQlyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApOwogICAgCQkJcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7CgogICAgCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkgewoKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7CiAgICAJCQlyZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICk7CgogICAgCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICkgewoKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7CiAgICAJCQlyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICk7CgogICAgCQkJaWYgKCBtYXRlcmlhbC5pc01lc2hQaHlzaWNhbE1hdGVyaWFsICkgewoKICAgIAkJCQlyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggdW5pZm9ybXMsIG1hdGVyaWFsLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTsKCiAgICAJCQl9CgogICAgCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hNYXRjYXBNYXRlcmlhbCApIHsKCiAgICAJCQlyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApOwogICAgCQkJcmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERlcHRoTWF0ZXJpYWwgKSB7CgogICAgCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7CgogICAgCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE5vcm1hbE1hdGVyaWFsICkgewoKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7CgogICAgCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc0xpbmVCYXNpY01hdGVyaWFsICkgewoKICAgIAkJCXJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApOwoKICAgIAkJCWlmICggbWF0ZXJpYWwuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgKSB7CgogICAgCQkJCXJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApOwoKICAgIAkJCX0KCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzUG9pbnRzTWF0ZXJpYWwgKSB7CgogICAgCQkJcmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHBpeGVsUmF0aW8sIGhlaWdodCApOwoKICAgIAkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHsKCiAgICAJCQlyZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTsKCiAgICAJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7CgogICAgCQkJdW5pZm9ybXMuY29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTsKICAgIAkJCXVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5OwoKICAgIAkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHsKCiAgICAJCQltYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsgLy8gIzE1NTgxCgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgogICAgCQl1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTsKCiAgICAJCWlmICggbWF0ZXJpYWwuY29sb3IgKSB7CgogICAgCQkJdW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZSApIHsKCiAgICAJCQl1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5lbWlzc2l2ZSApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5tYXAgKSB7CgogICAgCQkJdW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLm1hcFRyYW5zZm9ybSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYnVtcE1hcCwgdW5pZm9ybXMuYnVtcE1hcFRyYW5zZm9ybSApOwoKICAgIAkJCXVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTsKCiAgICAJCQlpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgewoKICAgIAkJCQl1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLTE7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5ub3JtYWxNYXAsIHVuaWZvcm1zLm5vcm1hbE1hcFRyYW5zZm9ybSApOwoKICAgIAkJCXVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7CgogICAgCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsKCiAgICAJCQkJdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsIHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybSApOwoKICAgIAkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7CiAgICAJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhczsKCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIHVuaWZvcm1zLmVtaXNzaXZlTWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkgewoKICAgIAkJCXVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7CgogICAgCQkJcmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFyTWFwLCB1bmlmb3Jtcy5zcGVjdWxhck1hcFRyYW5zZm9ybSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkgewoKICAgIAkJCXVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhVGVzdDsKCiAgICAJCX0KCiAgICAJCWNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApOwoKICAgIAkJY29uc3QgZW52TWFwID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcDsKICAgIAkJY29uc3QgZW52TWFwUm90YXRpb24gPSBtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwUm90YXRpb247CgogICAgCQlpZiAoIGVudk1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBlbnZNYXA7CgogICAgCQkJX2UxLmNvcHkoIGVudk1hcFJvdGF0aW9uICk7CgogICAgCQkJLy8gYWNjb21tb2RhdGUgbGVmdC1oYW5kZWQgZnJhbWUKICAgIAkJCV9lMS54ICo9IC0xOyBfZTEueSAqPSAtMTsgX2UxLnogKj0gLTE7CgogICAgCQkJaWYgKCBlbnZNYXAuaXNDdWJlVGV4dHVyZSAmJiBlbnZNYXAuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApIHsKCiAgICAJCQkJLy8gZW52aXJvbm1lbnQgbWFwcyB3aGljaCBhcmUgbm90IGN1YmUgcmVuZGVyIHRhcmdldHMgb3IgUE1SRU1zIGZvbGxvdyBhIGRpZmZlcmVudCBjb252ZW50aW9uCiAgICAJCQkJX2UxLnkgKj0gLTE7CiAgICAJCQkJX2UxLnogKj0gLTE7CgogICAgCQkJfQoKICAgIAkJCXVuaWZvcm1zLmVudk1hcFJvdGF0aW9uLnZhbHVlLnNldEZyb21NYXRyaXg0KCBfbTEubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBfZTEgKSApOwoKICAgIAkJCXVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGVudk1hcC5pc0N1YmVUZXh0dXJlICYmIGVudk1hcC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtMSA6IDE7CgogICAgCQkJdW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OwogICAgCQkJdW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yOwogICAgCQkJdW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwOwogICAgCQkJdW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubGlnaHRNYXAsIHVuaWZvcm1zLmxpZ2h0TWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLmFvTWFwICkgewoKICAgIAkJCXVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7CiAgICAJCQl1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5OwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hb01hcCwgdW5pZm9ybXMuYW9NYXBUcmFuc2Zvcm0gKTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMaW5lKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgogICAgCQl1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CiAgICAJCXVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5OwoKICAgIAkJaWYgKCBtYXRlcmlhbC5tYXAgKSB7CgogICAgCQkJdW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLm1hcFRyYW5zZm9ybSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCiAgICAJCXVuaWZvcm1zLmRhc2hTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemU7CiAgICAJCXVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTsKICAgIAkJdW5pZm9ybXMuc2NhbGUudmFsdWUgPSBtYXRlcmlhbC5zY2FsZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICkgewoKICAgIAkJdW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwogICAgCQl1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTsKICAgIAkJdW5pZm9ybXMuc2l6ZS52YWx1ZSA9IG1hdGVyaWFsLnNpemUgKiBwaXhlbFJhdGlvOwogICAgCQl1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IGhlaWdodCAqIDAuNTsKCiAgICAJCWlmICggbWF0ZXJpYWwubWFwICkgewoKICAgIAkJCXVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy51dlRyYW5zZm9ybSApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwOwoKICAgIAkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHsKCiAgICAJCQl1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKICAgIAkJdW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwogICAgCQl1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTsKICAgIAkJdW5pZm9ybXMucm90YXRpb24udmFsdWUgPSBtYXRlcmlhbC5yb3RhdGlvbjsKCiAgICAJCWlmICggbWF0ZXJpYWwubWFwICkgewoKICAgIAkJCXVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy5tYXBUcmFuc2Zvcm0gKTsKCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYWxwaGFNYXAsIHVuaWZvcm1zLmFscGhhTWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB7CgogICAgCQkJdW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0OwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgogICAgCQl1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhciApOwogICAgCQl1bmlmb3Jtcy5zaGluaW5lc3MudmFsdWUgPSBNYXRoLm1heCggbWF0ZXJpYWwuc2hpbmluZXNzLCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApCgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKICAgIAkJaWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5ncmFkaWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmdyYWRpZW50TWFwOwoKICAgIAkJfQoKICAgIAl9CgogICAgCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgogICAgCQl1bmlmb3Jtcy5tZXRhbG5lc3MudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3M7CgogICAgCQlpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5tZXRhbG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7CgogICAgCQkJcmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLm1ldGFsbmVzc01hcCwgdW5pZm9ybXMubWV0YWxuZXNzTWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCQl1bmlmb3Jtcy5yb3VnaG5lc3MudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3M7CgogICAgCQlpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7CgogICAgCQkJcmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnJvdWdobmVzc01hcCwgdW5pZm9ybXMucm91Z2huZXNzTWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLmVudk1hcCApIHsKCiAgICAJCQkvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb24KCiAgICAJCQl1bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJdW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yOyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uCgogICAgCQlpZiAoIG1hdGVyaWFsLnNoZWVuID4gMCApIHsKCiAgICAJCQl1bmlmb3Jtcy5zaGVlbkNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNoZWVuQ29sb3IgKS5tdWx0aXBseVNjYWxhciggbWF0ZXJpYWwuc2hlZW4gKTsKCiAgICAJCQl1bmlmb3Jtcy5zaGVlblJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzOwoKICAgIAkJCWlmICggbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCApIHsKCiAgICAJCQkJdW5pZm9ybXMuc2hlZW5Db2xvck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwLCB1bmlmb3Jtcy5zaGVlbkNvbG9yTWFwVHJhbnNmb3JtICk7CgogICAgCQkJfQoKICAgIAkJCWlmICggbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAgKSB7CgogICAgCQkJCXVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcCwgdW5pZm9ybXMuc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLmNsZWFyY29hdCA+IDAgKSB7CgogICAgCQkJdW5pZm9ybXMuY2xlYXJjb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0OwogICAgCQkJdW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzOwoKICAgIAkJCWlmICggbWF0ZXJpYWwuY2xlYXJjb2F0TWFwICkgewoKICAgIAkJCQl1bmlmb3Jtcy5jbGVhcmNvYXRNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAsIHVuaWZvcm1zLmNsZWFyY29hdE1hcFRyYW5zZm9ybSApOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcCApIHsKCiAgICAJCQkJdW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwOwoKICAgIAkJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLCB1bmlmb3Jtcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSB7CgogICAgCQkJCXVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDsKCiAgICAJCQkJcmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCwgdW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtICk7CgogICAgCQkJCXVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7CgogICAgCQkJCWlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7CgogICAgCQkJCQl1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuZGlzcGVyc2lvbiA+IDAgKSB7CgogICAgCQkJdW5pZm9ybXMuZGlzcGVyc2lvbi52YWx1ZSA9IG1hdGVyaWFsLmRpc3BlcnNpb247CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlID4gMCApIHsKCiAgICAJCQl1bmlmb3Jtcy5pcmlkZXNjZW5jZS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlOwogICAgCQkJdW5pZm9ybXMuaXJpZGVzY2VuY2VJT1IudmFsdWUgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUjsKICAgIAkJCXVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDAgXTsKICAgIAkJCXVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDEgXTsKCiAgICAJCQlpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwICkgewoKICAgIAkJCQl1bmlmb3Jtcy5pcmlkZXNjZW5jZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwOwoKICAgIAkJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuaXJpZGVzY2VuY2VNYXAsIHVuaWZvcm1zLmlyaWRlc2NlbmNlTWFwVHJhbnNmb3JtICk7CgogICAgCQkJfQoKICAgIAkJCWlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgKSB7CgogICAgCQkJCXVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCwgdW5pZm9ybXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7CgogICAgCQkJdW5pZm9ybXMudHJhbnNtaXNzaW9uLnZhbHVlID0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uOwogICAgCQkJdW5pZm9ybXMudHJhbnNtaXNzaW9uU2FtcGxlck1hcC52YWx1ZSA9IHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC50ZXh0dXJlOwogICAgCQkJdW5pZm9ybXMudHJhbnNtaXNzaW9uU2FtcGxlclNpemUudmFsdWUuc2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQud2lkdGgsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5oZWlnaHQgKTsKCiAgICAJCQlpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcCApIHsKCiAgICAJCQkJdW5pZm9ybXMudHJhbnNtaXNzaW9uTWFwLnZhbHVlID0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwOwoKICAgIAkJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLCB1bmlmb3Jtcy50cmFuc21pc3Npb25NYXBUcmFuc2Zvcm0gKTsKCiAgICAJCQl9CgogICAgCQkJdW5pZm9ybXMudGhpY2tuZXNzLnZhbHVlID0gbWF0ZXJpYWwudGhpY2tuZXNzOwoKICAgIAkJCWlmICggbWF0ZXJpYWwudGhpY2tuZXNzTWFwICkgewoKICAgIAkJCQl1bmlmb3Jtcy50aGlja25lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC50aGlja25lc3NNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC50aGlja25lc3NNYXAsIHVuaWZvcm1zLnRoaWNrbmVzc01hcFRyYW5zZm9ybSApOwoKICAgIAkJCX0KCiAgICAJCQl1bmlmb3Jtcy5hdHRlbnVhdGlvbkRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZTsKICAgIAkJCXVuaWZvcm1zLmF0dGVudWF0aW9uQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciApOwoKICAgIAkJfQoKICAgIAkJaWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMCApIHsKCiAgICAJCQl1bmlmb3Jtcy5hbmlzb3Ryb3B5VmVjdG9yLnZhbHVlLnNldCggbWF0ZXJpYWwuYW5pc290cm9weSAqIE1hdGguY29zKCBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gKSwgbWF0ZXJpYWwuYW5pc290cm9weSAqIE1hdGguc2luKCBtYXRlcmlhbC5hbmlzb3Ryb3B5Um90YXRpb24gKSApOwoKICAgIAkJCWlmICggbWF0ZXJpYWwuYW5pc290cm9weU1hcCApIHsKCiAgICAJCQkJdW5pZm9ybXMuYW5pc290cm9weU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFuaXNvdHJvcHlNYXA7CgogICAgCQkJCXJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwLCB1bmlmb3Jtcy5hbmlzb3Ryb3B5TWFwVHJhbnNmb3JtICk7CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJdW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eTsKICAgIAkJdW5pZm9ybXMuc3BlY3VsYXJDb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7CgogICAgCQlpZiAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMuc3BlY3VsYXJDb2xvck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7CgogICAgCQkJcmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAsIHVuaWZvcm1zLnNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm0gKTsKCiAgICAJCX0KCiAgICAJCWlmICggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgKSB7CgogICAgCQkJdW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcDsKCiAgICAJCQlyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAsIHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5TWFwVHJhbnNmb3JtICk7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgogICAgCQlpZiAoIG1hdGVyaWFsLm1hdGNhcCApIHsKCiAgICAJCQl1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7CgogICAgCQl9CgogICAgCX0KCiAgICAJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCiAgICAJCWNvbnN0IGxpZ2h0ID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkubGlnaHQ7CgogICAgCQl1bmlmb3Jtcy5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CiAgICAJCXVuaWZvcm1zLm5lYXJEaXN0YW5jZS52YWx1ZSA9IGxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhcjsKICAgIAkJdW5pZm9ybXMuZmFyRGlzdGFuY2UudmFsdWUgPSBsaWdodC5zaGFkb3cuY2FtZXJhLmZhcjsKCiAgICAJfQoKICAgIAlyZXR1cm4gewogICAgCQlyZWZyZXNoRm9nVW5pZm9ybXM6IHJlZnJlc2hGb2dVbmlmb3JtcywKICAgIAkJcmVmcmVzaE1hdGVyaWFsVW5pZm9ybXM6IHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zCiAgICAJfTsKCiAgICB9CgogICAgZnVuY3Rpb24gV2ViR0xVbmlmb3Jtc0dyb3VwcyggZ2wsIGluZm8sIGNhcGFiaWxpdGllcywgc3RhdGUgKSB7CgogICAgCWxldCBidWZmZXJzID0ge307CiAgICAJbGV0IHVwZGF0ZUxpc3QgPSB7fTsKICAgIAlsZXQgYWxsb2NhdGVkQmluZGluZ1BvaW50cyA9IFtdOwoKICAgIAljb25zdCBtYXhCaW5kaW5nUG9pbnRzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVU5JRk9STV9CVUZGRVJfQklORElOR1MgKTsgLy8gYmluZGluZyBwb2ludHMgYXJlIGdsb2JhbCB3aGVyZWFzIGJsb2NrIGluZGljZXMgYXJlIHBlciBzaGFkZXIgcHJvZ3JhbQoKICAgIAlmdW5jdGlvbiBiaW5kKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkgewoKICAgIAkJY29uc3Qgd2ViZ2xQcm9ncmFtID0gcHJvZ3JhbS5wcm9ncmFtOwogICAgCQlzdGF0ZS51bmlmb3JtQmxvY2tCaW5kaW5nKCB1bmlmb3Jtc0dyb3VwLCB3ZWJnbFByb2dyYW0gKTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiB1cGRhdGUoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7CgogICAgCQlsZXQgYnVmZmVyID0gYnVmZmVyc1sgdW5pZm9ybXNHcm91cC5pZCBdOwoKICAgIAkJaWYgKCBidWZmZXIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQlwcmVwYXJlVW5pZm9ybXNHcm91cCggdW5pZm9ybXNHcm91cCApOwoKICAgIAkJCWJ1ZmZlciA9IGNyZWF0ZUJ1ZmZlciggdW5pZm9ybXNHcm91cCApOwogICAgCQkJYnVmZmVyc1sgdW5pZm9ybXNHcm91cC5pZCBdID0gYnVmZmVyOwoKICAgIAkJCXVuaWZvcm1zR3JvdXAuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApOwoKICAgIAkJfQoKICAgIAkJLy8gZW5zdXJlIHRvIHVwZGF0ZSB0aGUgYmluZGluZyBwb2ludHMvYmxvY2sgaW5kaWNlcyBtYXBwaW5nIGZvciB0aGlzIHByb2dyYW0KCiAgICAJCWNvbnN0IHdlYmdsUHJvZ3JhbSA9IHByb2dyYW0ucHJvZ3JhbTsKICAgIAkJc3RhdGUudXBkYXRlVUJPTWFwcGluZyggdW5pZm9ybXNHcm91cCwgd2ViZ2xQcm9ncmFtICk7CgogICAgCQkvLyB1cGRhdGUgVUJPIG9uY2UgcGVyIGZyYW1lCgogICAgCQljb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lOwoKICAgIAkJaWYgKCB1cGRhdGVMaXN0WyB1bmlmb3Jtc0dyb3VwLmlkIF0gIT09IGZyYW1lICkgewoKICAgIAkJCXVwZGF0ZUJ1ZmZlckRhdGEoIHVuaWZvcm1zR3JvdXAgKTsKCiAgICAJCQl1cGRhdGVMaXN0WyB1bmlmb3Jtc0dyb3VwLmlkIF0gPSBmcmFtZTsKCiAgICAJCX0KCiAgICAJfQoKICAgIAlmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIHVuaWZvcm1zR3JvdXAgKSB7CgogICAgCQkvLyB0aGUgc2V0dXAgb2YgYW4gVUJPIGlzIGluZGVwZW5kZW50IG9mIGEgcGFydGljdWxhciBzaGFkZXIgcHJvZ3JhbSBidXQgZ2xvYmFsCgogICAgCQljb25zdCBiaW5kaW5nUG9pbnRJbmRleCA9IGFsbG9jYXRlQmluZGluZ1BvaW50SW5kZXgoKTsKICAgIAkJdW5pZm9ybXNHcm91cC5fX2JpbmRpbmdQb2ludEluZGV4ID0gYmluZGluZ1BvaW50SW5kZXg7CgogICAgCQljb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICAgIAkJY29uc3Qgc2l6ZSA9IHVuaWZvcm1zR3JvdXAuX19zaXplOwogICAgCQljb25zdCB1c2FnZSA9IHVuaWZvcm1zR3JvdXAudXNhZ2U7CgogICAgCQlnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgYnVmZmVyICk7CiAgICAJCWdsLmJ1ZmZlckRhdGEoIGdsLlVOSUZPUk1fQlVGRkVSLCBzaXplLCB1c2FnZSApOwogICAgCQlnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApOwogICAgCQlnbC5iaW5kQnVmZmVyQmFzZSggZ2wuVU5JRk9STV9CVUZGRVIsIGJpbmRpbmdQb2ludEluZGV4LCBidWZmZXIgKTsKCiAgICAJCXJldHVybiBidWZmZXI7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpIHsKCiAgICAJCWZvciAoIGxldCBpID0gMDsgaSA8IG1heEJpbmRpbmdQb2ludHM7IGkgKysgKSB7CgogICAgCQkJaWYgKCBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzLmluZGV4T2YoIGkgKSA9PT0gLTEgKSB7CgogICAgCQkJCWFsbG9jYXRlZEJpbmRpbmdQb2ludHMucHVzaCggaSApOwogICAgCQkJCXJldHVybiBpOwoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBNYXhpbXVtIG51bWJlciBvZiBzaW11bHRhbmVvdXNseSB1c2FibGUgdW5pZm9ybXMgZ3JvdXBzIHJlYWNoZWQuJyApOwoKICAgIAkJcmV0dXJuIDA7CgogICAgCX0KCiAgICAJZnVuY3Rpb24gdXBkYXRlQnVmZmVyRGF0YSggdW5pZm9ybXNHcm91cCApIHsKCiAgICAJCWNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbIHVuaWZvcm1zR3JvdXAuaWQgXTsKICAgIAkJY29uc3QgdW5pZm9ybXMgPSB1bmlmb3Jtc0dyb3VwLnVuaWZvcm1zOwogICAgCQljb25zdCBjYWNoZSA9IHVuaWZvcm1zR3JvdXAuX19jYWNoZTsKCiAgICAJCWdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBidWZmZXIgKTsKCiAgICAJCWZvciAoIGxldCBpID0gMCwgaWwgPSB1bmlmb3Jtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCiAgICAJCQljb25zdCB1bmlmb3JtQXJyYXkgPSBBcnJheS5pc0FycmF5KCB1bmlmb3Jtc1sgaSBdICkgPyB1bmlmb3Jtc1sgaSBdIDogWyB1bmlmb3Jtc1sgaSBdIF07CgogICAgCQkJZm9yICggbGV0IGogPSAwLCBqbCA9IHVuaWZvcm1BcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCiAgICAJCQkJY29uc3QgdW5pZm9ybSA9IHVuaWZvcm1BcnJheVsgaiBdOwoKICAgIAkJCQlpZiAoIGhhc1VuaWZvcm1DaGFuZ2VkKCB1bmlmb3JtLCBpLCBqLCBjYWNoZSApID09PSB0cnVlICkgewoKICAgIAkJCQkJY29uc3Qgb2Zmc2V0ID0gdW5pZm9ybS5fX29mZnNldDsKCiAgICAJCQkJCWNvbnN0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm0udmFsdWUgKSA/IHVuaWZvcm0udmFsdWUgOiBbIHVuaWZvcm0udmFsdWUgXTsKCiAgICAJCQkJCWxldCBhcnJheU9mZnNldCA9IDA7CgogICAgCQkJCQlmb3IgKCBsZXQgayA9IDA7IGsgPCB2YWx1ZXMubGVuZ3RoOyBrICsrICkgewoKICAgIAkJCQkJCWNvbnN0IHZhbHVlID0gdmFsdWVzWyBrIF07CgogICAgCQkJCQkJY29uc3QgaW5mbyA9IGdldFVuaWZvcm1TaXplKCB2YWx1ZSApOwoKICAgIAkJCQkJCS8vIFRPRE8gYWRkIGludGVnZXIgYW5kIHN0cnVjdCBzdXBwb3J0CiAgICAJCQkJCQlpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7CgogICAgCQkJCQkJCXVuaWZvcm0uX19kYXRhWyAwIF0gPSB2YWx1ZTsKICAgIAkJCQkJCQlnbC5idWZmZXJTdWJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgb2Zmc2V0ICsgYXJyYXlPZmZzZXQsIHVuaWZvcm0uX19kYXRhICk7CgogICAgCQkJCQkJfSBlbHNlIGlmICggdmFsdWUuaXNNYXRyaXgzICkgewoKICAgIAkJCQkJCQkvLyBtYW51YWxseSBjb252ZXJ0aW5nIDN4MyB0byAzeDQKCiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDAgXSA9IHZhbHVlLmVsZW1lbnRzWyAwIF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDEgXSA9IHZhbHVlLmVsZW1lbnRzWyAxIF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDIgXSA9IHZhbHVlLmVsZW1lbnRzWyAyIF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDMgXSA9IDA7CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDQgXSA9IHZhbHVlLmVsZW1lbnRzWyAzIF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDUgXSA9IHZhbHVlLmVsZW1lbnRzWyA0IF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDYgXSA9IHZhbHVlLmVsZW1lbnRzWyA1IF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDcgXSA9IDA7CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDggXSA9IHZhbHVlLmVsZW1lbnRzWyA2IF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDkgXSA9IHZhbHVlLmVsZW1lbnRzWyA3IF07CiAgICAJCQkJCQkJdW5pZm9ybS5fX2RhdGFbIDEwIF0gPSB2YWx1ZS5lbGVtZW50c1sgOCBdOwogICAgCQkJCQkJCXVuaWZvcm0uX19kYXRhWyAxMSBdID0gMDsKCiAgICAJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQl2YWx1ZS50b0FycmF5KCB1bmlmb3JtLl9fZGF0YSwgYXJyYXlPZmZzZXQgKTsKCiAgICAJCQkJCQkJYXJyYXlPZmZzZXQgKz0gaW5mby5zdG9yYWdlIC8gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCX0KCiAgICAJCQkJCWdsLmJ1ZmZlclN1YkRhdGEoIGdsLlVOSUZPUk1fQlVGRkVSLCBvZmZzZXQsIHVuaWZvcm0uX19kYXRhICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGhhc1VuaWZvcm1DaGFuZ2VkKCB1bmlmb3JtLCBpbmRleCwgaW5kZXhBcnJheSwgY2FjaGUgKSB7CgogICAgCQljb25zdCB2YWx1ZSA9IHVuaWZvcm0udmFsdWU7CiAgICAJCWNvbnN0IGluZGV4U3RyaW5nID0gaW5kZXggKyAnXycgKyBpbmRleEFycmF5OwoKICAgIAkJaWYgKCBjYWNoZVsgaW5kZXhTdHJpbmcgXSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCS8vIGNhY2hlIGVudHJ5IGRvZXMgbm90IGV4aXN0IHNvIGZhcgoKICAgIAkJCWlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHsKCiAgICAJCQkJY2FjaGVbIGluZGV4U3RyaW5nIF0gPSB2YWx1ZTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljYWNoZVsgaW5kZXhTdHJpbmcgXSA9IHZhbHVlLmNsb25lKCk7CgogICAgCQkJfQoKICAgIAkJCXJldHVybiB0cnVlOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zdCBjYWNoZWRPYmplY3QgPSBjYWNoZVsgaW5kZXhTdHJpbmcgXTsKCiAgICAJCQkvLyBjb21wYXJlIGN1cnJlbnQgdmFsdWUgd2l0aCBjYWNoZWQgZW50cnkKCiAgICAJCQlpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7CgogICAgCQkJCWlmICggY2FjaGVkT2JqZWN0ICE9PSB2YWx1ZSApIHsKCiAgICAJCQkJCWNhY2hlWyBpbmRleFN0cmluZyBdID0gdmFsdWU7CiAgICAJCQkJCXJldHVybiB0cnVlOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJaWYgKCBjYWNoZWRPYmplY3QuZXF1YWxzKCB2YWx1ZSApID09PSBmYWxzZSApIHsKCiAgICAJCQkJCWNhY2hlZE9iamVjdC5jb3B5KCB2YWx1ZSApOwogICAgCQkJCQlyZXR1cm4gdHJ1ZTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCXJldHVybiBmYWxzZTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBwcmVwYXJlVW5pZm9ybXNHcm91cCggdW5pZm9ybXNHcm91cCApIHsKCiAgICAJCS8vIGRldGVybWluZSB0b3RhbCBidWZmZXIgc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIFNURDE0MCBsYXlvdXQKICAgIAkJLy8gSGludDogU1REMTQwIGlzIHRoZSBvbmx5IHN1cHBvcnRlZCBsYXlvdXQgaW4gV2ViR0wgMgoKICAgIAkJY29uc3QgdW5pZm9ybXMgPSB1bmlmb3Jtc0dyb3VwLnVuaWZvcm1zOwoKICAgIAkJbGV0IG9mZnNldCA9IDA7IC8vIGdsb2JhbCBidWZmZXIgb2Zmc2V0IGluIGJ5dGVzCiAgICAJCWNvbnN0IGNodW5rU2l6ZSA9IDE2OyAvLyBzaXplIG9mIGEgY2h1bmsgaW4gYnl0ZXMKCiAgICAJCWZvciAoIGxldCBpID0gMCwgbCA9IHVuaWZvcm1zLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJY29uc3QgdW5pZm9ybUFycmF5ID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybXNbIGkgXSApID8gdW5pZm9ybXNbIGkgXSA6IFsgdW5pZm9ybXNbIGkgXSBdOwoKICAgIAkJCWZvciAoIGxldCBqID0gMCwgamwgPSB1bmlmb3JtQXJyYXkubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgogICAgCQkJCWNvbnN0IHVuaWZvcm0gPSB1bmlmb3JtQXJyYXlbIGogXTsKCiAgICAJCQkJY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybS52YWx1ZSApID8gdW5pZm9ybS52YWx1ZSA6IFsgdW5pZm9ybS52YWx1ZSBdOwoKICAgIAkJCQlmb3IgKCBsZXQgayA9IDAsIGtsID0gdmFsdWVzLmxlbmd0aDsgayA8IGtsOyBrICsrICkgewoKICAgIAkJCQkJY29uc3QgdmFsdWUgPSB2YWx1ZXNbIGsgXTsKCiAgICAJCQkJCWNvbnN0IGluZm8gPSBnZXRVbmlmb3JtU2l6ZSggdmFsdWUgKTsKCiAgICAJCQkJCWNvbnN0IGNodW5rT2Zmc2V0ID0gb2Zmc2V0ICUgY2h1bmtTaXplOyAvLyBvZmZzZXQgaW4gdGhlIGN1cnJlbnQgY2h1bmsKICAgIAkJCQkJY29uc3QgY2h1bmtQYWRkaW5nID0gY2h1bmtPZmZzZXQgJSBpbmZvLmJvdW5kYXJ5OyAvLyByZXF1aXJlZCBwYWRkaW5nIHRvIG1hdGNoIGJvdW5kYXJ5CiAgICAJCQkJCWNvbnN0IGNodW5rU3RhcnQgPSBjaHVua09mZnNldCArIGNodW5rUGFkZGluZzsgLy8gdGhlIHN0YXJ0IHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IGNodW5rIGZvciB0aGUgZGF0YQoKICAgIAkJCQkJb2Zmc2V0ICs9IGNodW5rUGFkZGluZzsKCiAgICAJCQkJCS8vIENoZWNrIGZvciBjaHVuayBvdmVyZmxvdwogICAgCQkJCQlpZiAoIGNodW5rU3RhcnQgIT09IDAgJiYgKCBjaHVua1NpemUgLSBjaHVua1N0YXJ0ICkgPCBpbmZvLnN0b3JhZ2UgKSB7CgogICAgCQkJCQkJLy8gQWRkIHBhZGRpbmcgYW5kIGFkanVzdCBvZmZzZXQKICAgIAkJCQkJCW9mZnNldCArPSAoIGNodW5rU2l6ZSAtIGNodW5rU3RhcnQgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCS8vIHRoZSBmb2xsb3dpbmcgdHdvIHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkIGZvciBwYXJ0aWFsIGJ1ZmZlciB1cGRhdGVzCiAgICAJCQkJCXVuaWZvcm0uX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheSggaW5mby5zdG9yYWdlIC8gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICk7CiAgICAJCQkJCXVuaWZvcm0uX19vZmZzZXQgPSBvZmZzZXQ7CgogICAgCQkJCQkvLyBVcGRhdGUgdGhlIGdsb2JhbCBvZmZzZXQKICAgIAkJCQkJb2Zmc2V0ICs9IGluZm8uc3RvcmFnZTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0KCiAgICAJCS8vIGVuc3VyZSBjb3JyZWN0IGZpbmFsIHBhZGRpbmcKCiAgICAJCWNvbnN0IGNodW5rT2Zmc2V0ID0gb2Zmc2V0ICUgY2h1bmtTaXplOwoKICAgIAkJaWYgKCBjaHVua09mZnNldCA+IDAgKSBvZmZzZXQgKz0gKCBjaHVua1NpemUgLSBjaHVua09mZnNldCApOwoKICAgIAkJLy8KCiAgICAJCXVuaWZvcm1zR3JvdXAuX19zaXplID0gb2Zmc2V0OwogICAgCQl1bmlmb3Jtc0dyb3VwLl9fY2FjaGUgPSB7fTsKCiAgICAJCXJldHVybiB0aGlzOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIGdldFVuaWZvcm1TaXplKCB2YWx1ZSApIHsKCiAgICAJCWNvbnN0IGluZm8gPSB7CiAgICAJCQlib3VuZGFyeTogMCwgLy8gYnl0ZXMKICAgIAkJCXN0b3JhZ2U6IDAgLy8gYnl0ZXMKICAgIAkJfTsKCiAgICAJCS8vIGRldGVybWluZSBzaXplcyBhY2NvcmRpbmcgdG8gU1REMTQwCgogICAgCQlpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7CgogICAgCQkJLy8gZmxvYXQvaW50L2Jvb2wKCiAgICAJCQlpbmZvLmJvdW5kYXJ5ID0gNDsKICAgIAkJCWluZm8uc3RvcmFnZSA9IDQ7CgogICAgCQl9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjIgKSB7CgogICAgCQkJLy8gdmVjMgoKICAgIAkJCWluZm8uYm91bmRhcnkgPSA4OwogICAgCQkJaW5mby5zdG9yYWdlID0gODsKCiAgICAJCX0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyB8fCB2YWx1ZS5pc0NvbG9yICkgewoKICAgIAkJCS8vIHZlYzMKCiAgICAJCQlpbmZvLmJvdW5kYXJ5ID0gMTY7CiAgICAJCQlpbmZvLnN0b3JhZ2UgPSAxMjsgLy8gZXZpbDogdmVjMyBtdXN0IHN0YXJ0IG9uIGEgMTYtYnl0ZSBib3VuZGFyeSBidXQgaXQgb25seSBjb25zdW1lcyAxMiBieXRlcwoKICAgIAkJfSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3I0ICkgewoKICAgIAkJCS8vIHZlYzQKCiAgICAJCQlpbmZvLmJvdW5kYXJ5ID0gMTY7CiAgICAJCQlpbmZvLnN0b3JhZ2UgPSAxNjsKCiAgICAJCX0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4MyApIHsKCiAgICAJCQkvLyBtYXQzIChpbiBTVEQxNDAgYSAzeDMgbWF0cml4IGlzIHJlcHJlc2VudGVkIGFzIDN4NCkKCiAgICAJCQlpbmZvLmJvdW5kYXJ5ID0gNDg7CiAgICAJCQlpbmZvLnN0b3JhZ2UgPSA0ODsKCiAgICAJCX0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4NCApIHsKCiAgICAJCQkvLyBtYXQ0CgogICAgCQkJaW5mby5ib3VuZGFyeSA9IDY0OwogICAgCQkJaW5mby5zdG9yYWdlID0gNjQ7CgogICAgCQl9IGVsc2UgaWYgKCB2YWx1ZS5pc1RleHR1cmUgKSB7CgogICAgCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBzYW1wbGVycyBjYW4gbm90IGJlIHBhcnQgb2YgYW4gdW5pZm9ybXMgZ3JvdXAuJyApOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVbnN1cHBvcnRlZCB1bmlmb3JtIHZhbHVlIHR5cGUuJywgdmFsdWUgKTsKCiAgICAJCX0KCiAgICAJCXJldHVybiBpbmZvOwoKICAgIAl9CgogICAgCWZ1bmN0aW9uIG9uVW5pZm9ybXNHcm91cHNEaXNwb3NlKCBldmVudCApIHsKCiAgICAJCWNvbnN0IHVuaWZvcm1zR3JvdXAgPSBldmVudC50YXJnZXQ7CgogICAgCQl1bmlmb3Jtc0dyb3VwLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25Vbmlmb3Jtc0dyb3Vwc0Rpc3Bvc2UgKTsKCiAgICAJCWNvbnN0IGluZGV4ID0gYWxsb2NhdGVkQmluZGluZ1BvaW50cy5pbmRleE9mKCB1bmlmb3Jtc0dyb3VwLl9fYmluZGluZ1BvaW50SW5kZXggKTsKICAgIAkJYWxsb2NhdGVkQmluZGluZ1BvaW50cy5zcGxpY2UoIGluZGV4LCAxICk7CgogICAgCQlnbC5kZWxldGVCdWZmZXIoIGJ1ZmZlcnNbIHVuaWZvcm1zR3JvdXAuaWQgXSApOwoKICAgIAkJZGVsZXRlIGJ1ZmZlcnNbIHVuaWZvcm1zR3JvdXAuaWQgXTsKICAgIAkJZGVsZXRlIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXTsKCiAgICAJfQoKICAgIAlmdW5jdGlvbiBkaXNwb3NlKCkgewoKICAgIAkJZm9yICggY29uc3QgaWQgaW4gYnVmZmVycyApIHsKCiAgICAJCQlnbC5kZWxldGVCdWZmZXIoIGJ1ZmZlcnNbIGlkIF0gKTsKCiAgICAJCX0KCiAgICAJCWFsbG9jYXRlZEJpbmRpbmdQb2ludHMgPSBbXTsKICAgIAkJYnVmZmVycyA9IHt9OwogICAgCQl1cGRhdGVMaXN0ID0ge307CgogICAgCX0KCiAgICAJcmV0dXJuIHsKCiAgICAJCWJpbmQ6IGJpbmQsCiAgICAJCXVwZGF0ZTogdXBkYXRlLAoKICAgIAkJZGlzcG9zZTogZGlzcG9zZQoKICAgIAl9OwoKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgcmVuZGVyZXIgdXNlcyBXZWJHTCAyIHRvIGRpc3BsYXkgc2NlbmVzLgogICAgICoKICAgICAqIFdlYkdMIDEgaXMgbm90IHN1cHBvcnRlZCBzaW5jZSBgcjE2M2AuCiAgICAgKi8KICAgIGNsYXNzIFdlYkdMUmVuZGVyZXIgewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IFdlYkdMIHJlbmRlcmVyLgogICAgCSAqCiAgICAJICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfk9wdGlvbnN9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci4KICAgIAkgKi8KICAgIAljb25zdHJ1Y3RvciggcGFyYW1ldGVycyA9IHt9ICkgewoKICAgIAkJY29uc3QgewogICAgCQkJY2FudmFzID0gY3JlYXRlQ2FudmFzRWxlbWVudCgpLAogICAgCQkJY29udGV4dCA9IG51bGwsCiAgICAJCQlkZXB0aCA9IHRydWUsCiAgICAJCQlzdGVuY2lsID0gZmFsc2UsCiAgICAJCQlhbHBoYSA9IGZhbHNlLAogICAgCQkJYW50aWFsaWFzID0gZmFsc2UsCiAgICAJCQlwcmVtdWx0aXBsaWVkQWxwaGEgPSB0cnVlLAogICAgCQkJcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2UsCiAgICAJCQlwb3dlclByZWZlcmVuY2UgPSAnZGVmYXVsdCcsCiAgICAJCQlmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ID0gZmFsc2UsCiAgICAJCQlyZXZlcnNlRGVwdGhCdWZmZXIgPSBmYWxzZSwKICAgIAkJfSA9IHBhcmFtZXRlcnM7CgogICAgCQkvKioKICAgIAkJICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAcmVhZG9ubHkKICAgIAkJICogQGRlZmF1bHQgdHJ1ZQogICAgCQkgKi8KICAgIAkJdGhpcy5pc1dlYkdMUmVuZGVyZXIgPSB0cnVlOwoKICAgIAkJbGV0IF9hbHBoYTsKCiAgICAJCWlmICggY29udGV4dCAhPT0gbnVsbCApIHsKCiAgICAJCQlpZiAoIHR5cGVvZiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGNvbnRleHQgaW5zdGFuY2VvZiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgKSB7CgogICAgCQkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMIDEgaXMgbm90IHN1cHBvcnRlZCBzaW5jZSByMTYzLicgKTsKCiAgICAJCQl9CgogICAgCQkJX2FscGhhID0gY29udGV4dC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFscGhhOwoKICAgIAkJfSBlbHNlIHsKCiAgICAJCQlfYWxwaGEgPSBhbHBoYTsKCiAgICAJCX0KCiAgICAJCWNvbnN0IHVpbnRDbGVhckNvbG9yID0gbmV3IFVpbnQzMkFycmF5KCA0ICk7CiAgICAJCWNvbnN0IGludENsZWFyQ29sb3IgPSBuZXcgSW50MzJBcnJheSggNCApOwoKICAgIAkJbGV0IGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDsKICAgIAkJbGV0IGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7CgogICAgCQkvLyByZW5kZXIoKSBjYW4gYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgY2FsbGJhY2sgdHJpZ2dlcmVkIGJ5IGFub3RoZXIgcmVuZGVyLgogICAgCQkvLyBXZSB0cmFjayB0aGlzIHNvIHRoYXQgdGhlIG5lc3RlZCByZW5kZXIgY2FsbCBnZXRzIGl0cyBsaXN0IGFuZCBzdGF0ZSBpc29sYXRlZCBmcm9tIHRoZSBwYXJlbnQgcmVuZGVyIGNhbGwuCgogICAgCQljb25zdCByZW5kZXJMaXN0U3RhY2sgPSBbXTsKICAgIAkJY29uc3QgcmVuZGVyU3RhdGVTdGFjayA9IFtdOwoKICAgIAkJLy8gcHVibGljIHByb3BlcnRpZXMKCiAgICAJCS8qKgogICAgCQkgKiBBIGNhbnZhcyB3aGVyZSB0aGUgcmVuZGVyZXIgZHJhd3MgaXRzIG91dHB1dC5UaGlzIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUgcmVuZGVyZXIKICAgIAkJICogaW4gdGhlIGNvbnN0cnVjdG9yIChpZiBub3QgcHJvdmlkZWQgYWxyZWFkeSk7IHlvdSBqdXN0IG5lZWQgdG8gYWRkIGl0IHRvIHlvdXIgcGFnZSBsaWtlIHNvOgogICAgCQkgKiBgYGBqcwogICAgCQkgKiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCByZW5kZXJlci5kb21FbGVtZW50ICk7CiAgICAJCSAqIGBgYAogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7RE9NRWxlbWVudH0KICAgIAkJICovCiAgICAJCXRoaXMuZG9tRWxlbWVudCA9IGNhbnZhczsKCiAgICAJCS8qKgogICAgCQkgKiBBIG9iamVjdCB3aXRoIGRlYnVnIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MuCiAgICAJCSAqCiAgICAJCSAqIC0gYGNoZWNrU2hhZGVyRXJyb3JzYDogSWYgaXQgaXMgYHRydWVgLCBkZWZpbmVzIHdoZXRoZXIgbWF0ZXJpYWwgc2hhZGVyIHByb2dyYW1zIGFyZQogICAgCQkgKiBjaGVja2VkIGZvciBlcnJvcnMgZHVyaW5nIGNvbXBpbGF0aW9uIGFuZCBsaW5rYWdlIHByb2Nlc3MuIEl0IG1heSBiZSB1c2VmdWwgdG8gZGlzYWJsZQogICAgCQkgKiB0aGlzIGNoZWNrIGluIHByb2R1Y3Rpb24gZm9yIHBlcmZvcm1hbmNlIGdhaW4uIEl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRvIGtlZXAgdGhlc2UKICAgIAkJICogY2hlY2tzIGVuYWJsZWQgZHVyaW5nIGRldmVsb3BtZW50LiBJZiB0aGUgc2hhZGVyIGRvZXMgbm90IGNvbXBpbGUgYW5kIGxpbmsgLSBpdCB3aWxsIG5vdAogICAgCQkgKiB3b3JrIGFuZCBhc3NvY2lhdGVkIG1hdGVyaWFsIHdpbGwgbm90IHJlbmRlci4KICAgIAkJICogLSBgb25TaGFkZXJFcnJvcihnbCwgcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIsZ2xGcmFnbWVudFNoYWRlcilgOiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQKICAgIAkJICogY2FuIGJlIHVzZWQgZm9yIGN1c3RvbSBlcnJvciByZXBvcnRpbmcuIFRoZSBjYWxsYmFjayByZWNlaXZlcyB0aGUgV2ViR0wgY29udGV4dCwgYW4gaW5zdGFuY2UKICAgIAkJICogb2YgV2ViR0xQcm9ncmFtIGFzIHdlbGwgdHdvIGluc3RhbmNlcyBvZiBXZWJHTFNoYWRlciByZXByZXNlbnRpbmcgdGhlIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVyLgogICAgCQkgKiBBc3NpZ25pbmcgYSBjdXN0b20gZnVuY3Rpb24gZGlzYWJsZXMgdGhlIGRlZmF1bHQgZXJyb3IgcmVwb3J0aW5nLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7T2JqZWN0fQogICAgCQkgKi8KICAgIAkJdGhpcy5kZWJ1ZyA9IHsKCiAgICAJCQkvKioKICAgIAkJCSAqIEVuYWJsZXMgZXJyb3IgY2hlY2tpbmcgYW5kIHJlcG9ydGluZyB3aGVuIHNoYWRlciBwcm9ncmFtcyBhcmUgYmVpbmcgY29tcGlsZWQuCiAgICAJCQkgKiBAdHlwZSB7Ym9vbGVhbn0KICAgIAkJCSAqLwogICAgCQkJY2hlY2tTaGFkZXJFcnJvcnM6IHRydWUsCiAgICAJCQkvKioKICAgIAkJCSAqIENhbGxiYWNrIGZvciBjdXN0b20gZXJyb3IgcmVwb3J0aW5nLgogICAgCQkJICogQHR5cGUgez9GdW5jdGlvbn0KICAgIAkJCSAqLwogICAgCQkJb25TaGFkZXJFcnJvcjogbnVsbAogICAgCQl9OwoKICAgIAkJLy8gY2xlYXJpbmcKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgYXV0b21hdGljYWxseSBjbGVhciBpdHMgb3V0cHV0IGJlZm9yZSByZW5kZXJpbmcgYSBmcmFtZSBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmF1dG9DbGVhciA9IHRydWU7CgogICAgCQkvKioKICAgIAkJICogSWYge0BsaW5rIFdlYkdMUmVuZGVyZXIjYXV0b0NsZWFyfSBzZXQgdG8gYHRydWVgLCB3aGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgY2xlYXIKICAgIAkJICogdGhlIGNvbG9yIGJ1ZmZlciBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmF1dG9DbGVhckNvbG9yID0gdHJ1ZTsKCiAgICAJCS8qKgogICAgCQkgKiBJZiB7QGxpbmsgV2ViR0xSZW5kZXJlciNhdXRvQ2xlYXJ9IHNldCB0byBgdHJ1ZWAsIHdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBjbGVhcgogICAgCQkgKiB0aGUgZGVwdGggYnVmZmVyIG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlOwoKICAgIAkJLyoqCiAgICAJCSAqIElmIHtAbGluayBXZWJHTFJlbmRlcmVyI2F1dG9DbGVhcn0gc2V0IHRvIGB0cnVlYCwgd2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIGNsZWFyCiAgICAJCSAqIHRoZSBzdGVuY2lsIGJ1ZmZlciBvciBub3QuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtib29sZWFufQogICAgCQkgKiBAZGVmYXVsdCB0cnVlCiAgICAJCSAqLwogICAgCQl0aGlzLmF1dG9DbGVhclN0ZW5jaWwgPSB0cnVlOwoKICAgIAkJLy8gc2NlbmUgZ3JhcGgKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgc29ydCBvYmplY3RzIG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogTm90ZTogU29ydGluZyBpcyB1c2VkIHRvIGF0dGVtcHQgdG8gcHJvcGVybHkgcmVuZGVyIG9iamVjdHMgdGhhdCBoYXZlIHNvbWUKICAgIAkJICogZGVncmVlIG9mIHRyYW5zcGFyZW5jeS4gQnkgZGVmaW5pdGlvbiwgc29ydGluZyBvYmplY3RzIG1heSBub3Qgd29yayBpbiBhbGwKICAgIAkJICogY2FzZXMuIERlcGVuZGluZyBvbiB0aGUgbmVlZHMgb2YgYXBwbGljYXRpb24sIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gdHVybgogICAgCQkgKiBvZmYgc29ydGluZyBhbmQgdXNlIG90aGVyIG1ldGhvZHMgdG8gZGVhbCB3aXRoIHRyYW5zcGFyZW5jeSByZW5kZXJpbmcgZS5nLgogICAgCQkgKiBtYW51YWxseSBkZXRlcm1pbmluZyBlYWNoIG9iamVjdCdzIHJlbmRlcmluZyBvcmRlci4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IHRydWUKICAgIAkJICovCiAgICAJCXRoaXMuc29ydE9iamVjdHMgPSB0cnVlOwoKICAgIAkJLy8gdXNlci1kZWZpbmVkIGNsaXBwaW5nCgogICAgCQkvKioKICAgIAkJICogVXNlci1kZWZpbmVkIGNsaXBwaW5nIHBsYW5lcyBzcGVjaWZpZWQgaW4gd29ybGQgc3BhY2UuIFRoZXNlIHBsYW5lcyBhcHBseSBnbG9iYWxseS4KICAgIAkJICogUG9pbnRzIGluIHNwYWNlIHdob3NlIGRvdCBwcm9kdWN0IHdpdGggdGhlIHBsYW5lIGlzIG5lZ2F0aXZlIGFyZSBjdXQgYXdheS4KICAgIAkJICoKICAgIAkJICogQHR5cGUge0FycmF5PFBsYW5lPn0KICAgIAkJICovCiAgICAJCXRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTsKCiAgICAJCS8qKgogICAgCQkgKiBXaGV0aGVyIHRoZSByZW5kZXJlciByZXNwZWN0cyBvYmplY3QtbGV2ZWwgY2xpcHBpbmcgcGxhbmVzIG9yIG5vdC4KICAgIAkJICoKICAgIAkJICogQHR5cGUge2Jvb2xlYW59CiAgICAJCSAqIEBkZWZhdWx0IGZhbHNlCiAgICAJCSAqLwogICAgCQl0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7CgogICAgCQkvLyB0b25lIG1hcHBpbmcKCiAgICAJCS8qKgogICAgCQkgKiBUaGUgdG9uZSBtYXBwaW5nIHRlY2huaXF1ZSBvZiB0aGUgcmVuZGVyZXIuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHsoTm9Ub25lTWFwcGluZ3xMaW5lYXJUb25lTWFwcGluZ3xSZWluaGFyZFRvbmVNYXBwaW5nfENpbmVvblRvbmVNYXBwaW5nfEFDRVNGaWxtaWNUb25lTWFwcGluZ3xDdXN0b21Ub25lTWFwcGluZ3xBZ1hUb25lTWFwcGluZ3xOZXV0cmFsVG9uZU1hcHBpbmcpfQogICAgCQkgKiBAZGVmYXVsdCBOb1RvbmVNYXBwaW5nCiAgICAJCSAqLwogICAgCQl0aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZzsKCiAgICAJCS8qKgogICAgCQkgKiBFeHBvc3VyZSBsZXZlbCBvZiB0b25lIG1hcHBpbmcuCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMudG9uZU1hcHBpbmdFeHBvc3VyZSA9IDEuMDsKCiAgICAJCS8vIHRyYW5zbWlzc2lvbgoKICAgIAkJLyoqCiAgICAJCSAqIFRoZSBub3JtYWxpemVkIHJlc29sdXRpb24gc2NhbGUgZm9yIHRoZSB0cmFuc21pc3Npb24gcmVuZGVyIHRhcmdldCwgbWVhc3VyZWQgaW4gcGVyY2VudGFnZQogICAgCQkgKiBvZiB2aWV3cG9ydCBkaW1lbnNpb25zLiBMb3dlcmluZyB0aGlzIHZhbHVlIGNhbiByZXN1bHQgaW4gc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzCiAgICAJCSAqIHdoZW4gdXNpbmcge0BsaW5rIE1lc2hQaHlzaWNhbE1hdGVyaWFsI3RyYW5zbWlzc2lvbn0uCiAgICAJCSAqCiAgICAJCSAqIEB0eXBlIHtudW1iZXJ9CiAgICAJCSAqIEBkZWZhdWx0IDEKICAgIAkJICovCiAgICAJCXRoaXMudHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlID0gMS4wOwoKICAgIAkJLy8gaW50ZXJuYWwgcHJvcGVydGllcwoKICAgIAkJY29uc3QgX3RoaXMgPSB0aGlzOwoKICAgIAkJbGV0IF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7CgogICAgCQkvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZQoKICAgIAkJdGhpcy5fb3V0cHV0Q29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlOwoKICAgIAkJbGV0IF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSAwOwogICAgCQlsZXQgX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7CiAgICAJCWxldCBfY3VycmVudFJlbmRlclRhcmdldCA9IG51bGw7CiAgICAJCWxldCBfY3VycmVudE1hdGVyaWFsSWQgPSAtMTsKCiAgICAJCWxldCBfY3VycmVudENhbWVyYSA9IG51bGw7CgogICAgCQljb25zdCBfY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTsKICAgIAkJY29uc3QgX2N1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKTsKICAgIAkJbGV0IF9jdXJyZW50U2Npc3NvclRlc3QgPSBudWxsOwoKICAgIAkJY29uc3QgX2N1cnJlbnRDbGVhckNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApOwogICAgCQlsZXQgX2N1cnJlbnRDbGVhckFscGhhID0gMDsKCiAgICAJCS8vCgogICAgCQlsZXQgX3dpZHRoID0gY2FudmFzLndpZHRoOwogICAgCQlsZXQgX2hlaWdodCA9IGNhbnZhcy5oZWlnaHQ7CgogICAgCQlsZXQgX3BpeGVsUmF0aW8gPSAxOwogICAgCQlsZXQgX29wYXF1ZVNvcnQgPSBudWxsOwogICAgCQlsZXQgX3RyYW5zcGFyZW50U29ydCA9IG51bGw7CgogICAgCQljb25zdCBfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICk7CiAgICAJCWNvbnN0IF9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApOwogICAgCQlsZXQgX3NjaXNzb3JUZXN0ID0gZmFsc2U7CgogICAgCQkvLyBmcnVzdHVtCgogICAgCQljb25zdCBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7CgogICAgCQkvLyBjbGlwcGluZwoKICAgIAkJbGV0IF9jbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgIAkJbGV0IF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlOwoKICAgIAkJLy8gY2FtZXJhIG1hdHJpY2VzIGNhY2hlCgogICAgCQljb25zdCBfY3VycmVudFByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpOwogICAgCQljb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7CgogICAgCQljb25zdCBfdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7CgogICAgCQljb25zdCBfdmVjdG9yNCA9IG5ldyBWZWN0b3I0KCk7CgogICAgCQljb25zdCBfZW1wdHlTY2VuZSA9IHsgYmFja2dyb3VuZDogbnVsbCwgZm9nOiBudWxsLCBlbnZpcm9ubWVudDogbnVsbCwgb3ZlcnJpZGVNYXRlcmlhbDogbnVsbCwgaXNTY2VuZTogdHJ1ZSB9OwoKICAgIAkJbGV0IF9yZW5kZXJCYWNrZ3JvdW5kID0gZmFsc2U7CgogICAgCQlmdW5jdGlvbiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgewoKICAgIAkJCXJldHVybiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCA/IF9waXhlbFJhdGlvIDogMTsKCiAgICAJCX0KCiAgICAJCS8vIGluaXRpYWxpemUKCiAgICAJCWxldCBfZ2wgPSBjb250ZXh0OwoKICAgIAkJZnVuY3Rpb24gZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICkgewoKICAgIAkJCXJldHVybiBjYW52YXMuZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICk7CgogICAgCQl9CgogICAgCQl0cnkgewoKICAgIAkJCWNvbnN0IGNvbnRleHRBdHRyaWJ1dGVzID0gewogICAgCQkJCWFscGhhOiB0cnVlLAogICAgCQkJCWRlcHRoLAogICAgCQkJCXN0ZW5jaWwsCiAgICAJCQkJYW50aWFsaWFzLAogICAgCQkJCXByZW11bHRpcGxpZWRBbHBoYSwKICAgIAkJCQlwcmVzZXJ2ZURyYXdpbmdCdWZmZXIsCiAgICAJCQkJcG93ZXJQcmVmZXJlbmNlLAogICAgCQkJCWZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQsCiAgICAJCQl9OwoKICAgIAkJCS8vIE9mZnNjcmVlbkNhbnZhcyBkb2VzIG5vdCBoYXZlIHNldEF0dHJpYnV0ZSwgc2VlICMyMjgxMQogICAgCQkJaWYgKCAnc2V0QXR0cmlidXRlJyBpbiBjYW52YXMgKSBjYW52YXMuc2V0QXR0cmlidXRlKCAnZGF0YS1lbmdpbmUnLCBgdGhyZWUuanMgciR7UkVWSVNJT059YCApOwoKICAgIAkJCS8vIGV2ZW50IGxpc3RlbmVycyBtdXN0IGJlIHJlZ2lzdGVyZWQgYmVmb3JlIFdlYkdMIGNvbnRleHQgaXMgY3JlYXRlZCwgc2VlICMxMjc1MwogICAgCQkJY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTsKICAgIAkJCWNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApOwogICAgCQkJY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRjcmVhdGlvbmVycm9yJywgb25Db250ZXh0Q3JlYXRpb25FcnJvciwgZmFsc2UgKTsKCiAgICAJCQlpZiAoIF9nbCA9PT0gbnVsbCApIHsKCiAgICAJCQkJY29uc3QgY29udGV4dE5hbWUgPSAnd2ViZ2wyJzsKCiAgICAJCQkJX2dsID0gZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICk7CgogICAgCQkJCWlmICggX2dsID09PSBudWxsICkgewoKICAgIAkJCQkJaWYgKCBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSApICkgewoKICAgIAkJCQkJCXRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LicgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCX0gY2F0Y2ggKCBlcnJvciApIHsKCiAgICAJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIGVycm9yLm1lc3NhZ2UgKTsKICAgIAkJCXRocm93IGVycm9yOwoKICAgIAkJfQoKICAgIAkJbGV0IGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgc3RhdGUsIGluZm87CiAgICAJCWxldCBwcm9wZXJ0aWVzLCB0ZXh0dXJlcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGF0dHJpYnV0ZXMsIGdlb21ldHJpZXMsIG9iamVjdHM7CiAgICAJCWxldCBwcm9ncmFtQ2FjaGUsIG1hdGVyaWFscywgcmVuZGVyTGlzdHMsIHJlbmRlclN0YXRlcywgY2xpcHBpbmcsIHNoYWRvd01hcDsKCiAgICAJCWxldCBiYWNrZ3JvdW5kLCBtb3JwaHRhcmdldHMsIGJ1ZmZlclJlbmRlcmVyLCBpbmRleGVkQnVmZmVyUmVuZGVyZXI7CgogICAgCQlsZXQgdXRpbHMsIGJpbmRpbmdTdGF0ZXMsIHVuaWZvcm1zR3JvdXBzOwoKICAgIAkJZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHsKCiAgICAJCQlleHRlbnNpb25zID0gbmV3IFdlYkdMRXh0ZW5zaW9ucyggX2dsICk7CiAgICAJCQlleHRlbnNpb25zLmluaXQoKTsKCiAgICAJCQl1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMgKTsKCiAgICAJCQljYXBhYmlsaXRpZXMgPSBuZXcgV2ViR0xDYXBhYmlsaXRpZXMoIF9nbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgdXRpbHMgKTsKCiAgICAJCQlzdGF0ZSA9IG5ldyBXZWJHTFN0YXRlKCBfZ2wsIGV4dGVuc2lvbnMgKTsKCiAgICAJCQlpZiAoIGNhcGFiaWxpdGllcy5yZXZlcnNlRGVwdGhCdWZmZXIgJiYgcmV2ZXJzZURlcHRoQnVmZmVyICkgewoKICAgIAkJCQlzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFJldmVyc2VkKCB0cnVlICk7CgogICAgCQkJfQoKICAgIAkJCWluZm8gPSBuZXcgV2ViR0xJbmZvKCBfZ2wgKTsKICAgIAkJCXByb3BlcnRpZXMgPSBuZXcgV2ViR0xQcm9wZXJ0aWVzKCk7CiAgICAJCQl0ZXh0dXJlcyA9IG5ldyBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICk7CiAgICAJCQljdWJlbWFwcyA9IG5ldyBXZWJHTEN1YmVNYXBzKCBfdGhpcyApOwogICAgCQkJY3ViZXV2bWFwcyA9IG5ldyBXZWJHTEN1YmVVVk1hcHMoIF90aGlzICk7CiAgICAJCQlhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsICk7CiAgICAJCQliaW5kaW5nU3RhdGVzID0gbmV3IFdlYkdMQmluZGluZ1N0YXRlcyggX2dsLCBhdHRyaWJ1dGVzICk7CiAgICAJCQlnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyggX2dsLCBhdHRyaWJ1dGVzLCBpbmZvLCBiaW5kaW5nU3RhdGVzICk7CiAgICAJCQlvYmplY3RzID0gbmV3IFdlYkdMT2JqZWN0cyggX2dsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvICk7CiAgICAJCQltb3JwaHRhcmdldHMgPSBuZXcgV2ViR0xNb3JwaHRhcmdldHMoIF9nbCwgY2FwYWJpbGl0aWVzLCB0ZXh0dXJlcyApOwogICAgCQkJY2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApOwogICAgCQkJcHJvZ3JhbUNhY2hlID0gbmV3IFdlYkdMUHJvZ3JhbXMoIF90aGlzLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBiaW5kaW5nU3RhdGVzLCBjbGlwcGluZyApOwogICAgCQkJbWF0ZXJpYWxzID0gbmV3IFdlYkdMTWF0ZXJpYWxzKCBfdGhpcywgcHJvcGVydGllcyApOwogICAgCQkJcmVuZGVyTGlzdHMgPSBuZXcgV2ViR0xSZW5kZXJMaXN0cygpOwogICAgCQkJcmVuZGVyU3RhdGVzID0gbmV3IFdlYkdMUmVuZGVyU3RhdGVzKCBleHRlbnNpb25zICk7CiAgICAJCQliYWNrZ3JvdW5kID0gbmV3IFdlYkdMQmFja2dyb3VuZCggX3RoaXMsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBzdGF0ZSwgb2JqZWN0cywgX2FscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTsKICAgIAkJCXNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcCggX3RoaXMsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApOwogICAgCQkJdW5pZm9ybXNHcm91cHMgPSBuZXcgV2ViR0xVbmlmb3Jtc0dyb3VwcyggX2dsLCBpbmZvLCBjYXBhYmlsaXRpZXMsIHN0YXRlICk7CgogICAgCQkJYnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvICk7CiAgICAJCQlpbmRleGVkQnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbyApOwoKICAgIAkJCWluZm8ucHJvZ3JhbXMgPSBwcm9ncmFtQ2FjaGUucHJvZ3JhbXM7CgogICAgCQkJLyoqCiAgICAJCQkgKiBIb2xkcyBkZXRhaWxzIGFib3V0IHRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGNvbnRleHQuCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgV2ViR0xSZW5kZXJlciNjYXBhYmlsaXRpZXMKICAgIAkJCSAqIEB0eXBlIHtXZWJHTFJlbmRlcmVyfkNhcGFiaWxpdGllc30KICAgIAkJCSAqLwogICAgCQkJX3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzOwoKICAgIAkJCS8qKgogICAgCQkJICogUHJvdmlkZXMgbWV0aG9kcyBmb3IgcmV0cmlldmluZyBhbmQgdGVzdGluZyBXZWJHTCBleHRlbnNpb25zLgogICAgCQkJICoKICAgIAkJCSAqIC0gYGdldChleHRlbnNpb25OYW1lOnN0cmluZylgOiBVc2VkIHRvIGNoZWNrIHdoZXRoZXIgYSBXZWJHTCBleHRlbnNpb24gaXMgc3VwcG9ydGVkCiAgICAJCQkgKiBhbmQgcmV0dXJuIHRoZSBleHRlbnNpb24gb2JqZWN0IGlmIGF2YWlsYWJsZS4KICAgIAkJCSAqIC0gYGhhcyhleHRlbnNpb25OYW1lOnN0cmluZylgOiByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZXh0ZW5zaW9uIGlzIHN1cHBvcnRlZC4KICAgIAkJCSAqCiAgICAJCQkgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI2V4dGVuc2lvbnMKICAgIAkJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCQkgKi8KICAgIAkJCV90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zOwoKICAgIAkJCS8qKgogICAgCQkJICogVXNlZCB0byB0cmFjayBwcm9wZXJ0aWVzIG9mIG90aGVyIG9iamVjdHMgbGlrZSBuYXRpdmUgV2ViR0wgb2JqZWN0cy4KICAgIAkJCSAqCiAgICAJCQkgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI3Byb3BlcnRpZXMKICAgIAkJCSAqIEB0eXBlIHtPYmplY3R9CiAgICAJCQkgKi8KICAgIAkJCV90aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzOwoKICAgIAkJCS8qKgogICAgCQkJICogTWFuYWdlcyB0aGUgcmVuZGVyIGxpc3RzIG9mIHRoZSByZW5kZXJlci4KICAgIAkJCSAqCiAgICAJCQkgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI3JlbmRlckxpc3RzCiAgICAJCQkgKiBAdHlwZSB7T2JqZWN0fQogICAgCQkJICovCiAgICAJCQlfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzOwoKCgogICAgCQkJLyoqCiAgICAJCQkgKiBJbnRlcmZhY2UgZm9yIG1hbmFnaW5nIHNoYWRvd3MuCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgV2ViR0xSZW5kZXJlciNzaGFkb3dNYXAKICAgIAkJCSAqIEB0eXBlIHtXZWJHTFJlbmRlcmVyflNoYWRvd01hcH0KICAgIAkJCSAqLwogICAgCQkJX3RoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwOwoKICAgIAkJCS8qKgogICAgCQkJICogSW50ZXJmYWNlIGZvciBtYW5hZ2luZyB0aGUgV2ViR0wgc3RhdGUuCiAgICAJCQkgKgogICAgCQkJICogQG5hbWUgV2ViR0xSZW5kZXJlciNzdGF0ZQogICAgCQkJICogQHR5cGUge09iamVjdH0KICAgIAkJCSAqLwogICAgCQkJX3RoaXMuc3RhdGUgPSBzdGF0ZTsKCiAgICAJCQkvKioKICAgIAkJCSAqIEhvbGRzIGEgc2VyaWVzIG9mIHN0YXRpc3RpY2FsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBHUFUgbWVtb3J5CiAgICAJCQkgKiBhbmQgdGhlIHJlbmRlcmluZyBwcm9jZXNzLiBVc2VmdWwgZm9yIGRlYnVnZ2luZyBhbmQgbW9uaXRvcmluZy4KICAgIAkJCSAqCiAgICAJCQkgKiBCeSBkZWZhdWx0IHRoZXNlIGRhdGEgYXJlIHJlc2V0IGF0IGVhY2ggcmVuZGVyIGNhbGwgYnV0IHdoZW4gaGF2aW5nCiAgICAJCQkgKiBtdWx0aXBsZSByZW5kZXIgcGFzc2VzIHBlciBmcmFtZSAoZS5nLiB3aGVuIHVzaW5nIHBvc3QgcHJvY2Vzc2luZykgaXQgY2FuCiAgICAJCQkgKiBiZSBwcmVmZXJyZWQgdG8gcmVzZXQgd2l0aCBhIGN1c3RvbSBwYXR0ZXJuLiBGaXJzdCwgc2V0IGBhdXRvUmVzZXRgIHRvCiAgICAJCQkgKiBgZmFsc2VgLgogICAgCQkJICogYGBganMKICAgIAkJCSAqIHJlbmRlcmVyLmluZm8uYXV0b1Jlc2V0ID0gZmFsc2U7CiAgICAJCQkgKiBgYGAKICAgIAkJCSAqIENhbGwgYHJlc2V0KClgIHdoZW5ldmVyIHlvdSBoYXZlIGZpbmlzaGVkIHRvIHJlbmRlciBhIHNpbmdsZSBmcmFtZS4KICAgIAkJCSAqIGBgYGpzCiAgICAJCQkgKiByZW5kZXJlci5pbmZvLnJlc2V0KCk7CiAgICAJCQkgKiBgYGAKICAgIAkJCSAqCiAgICAJCQkgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI2luZm8KICAgIAkJCSAqIEB0eXBlIHtXZWJHTFJlbmRlcmVyfkluZm99CiAgICAJCQkgKi8KICAgIAkJCV90aGlzLmluZm8gPSBpbmZvOwoKICAgIAkJfQoKICAgIAkJaW5pdEdMQ29udGV4dCgpOwoKICAgIAkJLy8geHIKCiAgICAJCWNvbnN0IHhyID0gbmV3IFdlYlhSTWFuYWdlciggX3RoaXMsIF9nbCApOwoKICAgIAkJLyoqCiAgICAJCSAqIEEgcmVmZXJlbmNlIHRvIHRoZSBYUiBtYW5hZ2VyLgogICAgCQkgKgogICAgCQkgKiBAdHlwZSB7V2ViWFJNYW5hZ2VyfQogICAgCQkgKi8KICAgIAkJdGhpcy54ciA9IHhyOwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIHJlbmRlcmluZyBjb250ZXh0LgogICAgCQkgKgogICAgCQkgKiBAcmV0dXJuIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fSBUaGUgcmVuZGVyaW5nIGNvbnRleHQuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIF9nbDsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgcmVuZGVyaW5nIGNvbnRleHQgYXR0cmlidXRlcy4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7V2ViR0xDb250ZXh0QXR0cmlidXRlc30gVGhlIHJlbmRlcmluZyBjb250ZXh0IGF0dHJpYnV0ZXMuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2ltdWxhdGVzIGEgbG9zcyBvZiB0aGUgV2ViR0wgY29udGV4dC4gVGhpcyByZXF1aXJlcyBzdXBwb3J0IGZvciB0aGUgYFdFQkdMX2xvc2VfY29udGV4dGAgZXh0ZW5zaW9uLgogICAgCQkgKi8KICAgIAkJdGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCWNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApOwogICAgCQkJaWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ubG9zZUNvbnRleHQoKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2ltdWxhdGVzIGEgcmVzdG9yZSBvZiB0aGUgV2ViR0wgY29udGV4dC4gVGhpcyByZXF1aXJlcyBzdXBwb3J0IGZvciB0aGUgYFdFQkdMX2xvc2VfY29udGV4dGAgZXh0ZW5zaW9uLgogICAgCQkgKi8KICAgIAkJdGhpcy5mb3JjZUNvbnRleHRSZXN0b3JlID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCWNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApOwogICAgCQkJaWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ucmVzdG9yZUNvbnRleHQoKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgcGl4ZWwgcmF0aW8uCiAgICAJCSAqCiAgICAJCSAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBpeGVsIHJhdGlvLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXJldHVybiBfcGl4ZWxSYXRpbzsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2V0cyB0aGUgZ2l2ZW4gcGl4ZWwgcmF0aW8gYW5kIHJlc2l6ZXMgdGhlIGNhbnZhcyBpZiBuZWNlc3NhcnkuCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBwaXhlbCByYXRpby4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgogICAgCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOwoKICAgIAkJCV9waXhlbFJhdGlvID0gdmFsdWU7CgogICAgCQkJdGhpcy5zZXRTaXplKCBfd2lkdGgsIF9oZWlnaHQsIGZhbHNlICk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIHJlbmRlcmVyJ3Mgc2l6ZSBpbiBsb2dpY2FsIHBpeGVscy4gVGhpcyBtZXRob2QgZG9lcyBub3QgaG9ub3IgdGhlIHBpeGVsIHJhdGlvLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LgogICAgCQkgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgcmVuZGVyZXIncyBzaXplIGluIGxvZ2ljYWwgcGl4ZWxzLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCwgX2hlaWdodCApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXNpemVzIHRoZSBvdXRwdXQgY2FudmFzIHRvICh3aWR0aCwgaGVpZ2h0KSB3aXRoIGRldmljZSBwaXhlbCByYXRpbyB0YWtlbgogICAgCQkgKiBpbnRvIGFjY291bnQsIGFuZCBhbHNvIHNldHMgdGhlIHZpZXdwb3J0IHRvIGZpdCB0aGF0IHNpemUsIHN0YXJ0aW5nIGluICgwLAogICAgCQkgKiAwKS4gU2V0dGluZyBgdXBkYXRlU3R5bGVgIHRvIGZhbHNlIHByZXZlbnRzIGFueSBzdHlsZSBjaGFuZ2VzIHRvIHRoZSBvdXRwdXQgY2FudmFzLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggaW4gbG9naWNhbCBwaXhlbHMuCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IGluIGxvZ2ljYWwgcGl4ZWxzLgogICAgCQkgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVTdHlsZT10cnVlXSAtIFdoZXRoZXIgdG8gdXBkYXRlIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBvZiB0aGUgY2FudmFzIG9yIG5vdC4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0U2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUgPSB0cnVlICkgewoKICAgIAkJCWlmICggeHIuaXNQcmVzZW50aW5nICkgewoKICAgIAkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuJyApOwogICAgCQkJCXJldHVybjsKCiAgICAJCQl9CgogICAgCQkJX3dpZHRoID0gd2lkdGg7CiAgICAJCQlfaGVpZ2h0ID0gaGVpZ2h0OwoKICAgIAkJCWNhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogX3BpeGVsUmF0aW8gKTsKICAgIAkJCWNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBfcGl4ZWxSYXRpbyApOwoKICAgIAkJCWlmICggdXBkYXRlU3R5bGUgPT09IHRydWUgKSB7CgogICAgCQkJCWNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JzsKICAgIAkJCQljYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JzsKCiAgICAJCQl9CgogICAgCQkJdGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIHRoZSBkcmF3aW5nIGJ1ZmZlciBzaXplIGluIHBoeXNpY2FsIHBpeGVscy4gVGhpcyBtZXRob2QgaG9ub3JzIHRoZSBwaXhlbCByYXRpby4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC4KICAgIAkJICogQHJldHVybiB7VmVjdG9yMn0gVGhlIGRyYXdpbmcgYnVmZmVyIHNpemUuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCAqIF9waXhlbFJhdGlvLCBfaGVpZ2h0ICogX3BpeGVsUmF0aW8gKS5mbG9vcigpOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBUaGlzIG1ldGhvZCBhbGxvd3MgdG8gZGVmaW5lIHRoZSBkcmF3aW5nIGJ1ZmZlciBzaXplIGJ5IHNwZWNpZnlpbmcKICAgIAkJICogd2lkdGgsIGhlaWdodCBhbmQgcGl4ZWwgcmF0aW8gYWxsIGF0IG9uY2UuIFRoZSBzaXplIG9mIHRoZSBkcmF3aW5nCiAgICAJCSAqIGJ1ZmZlciBpcyBjb21wdXRlZCB3aXRoIHRoaXMgZm9ybXVsYToKICAgIAkJICogYGBganMKICAgIAkJICogc2l6ZS54ID0gd2lkdGggKiBwaXhlbFJhdGlvOwogICAgCQkgKiBzaXplLnkgPSBoZWlnaHQgKiBwaXhlbFJhdGlvOwogICAgCQkgKiBgYGAKICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIGluIGxvZ2ljYWwgcGl4ZWxzLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBpbiBsb2dpY2FsIHBpeGVscy4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW8gLSBUaGUgcGl4ZWwgcmF0aW8uCiAgICAJCSAqLwogICAgCQl0aGlzLnNldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvICkgewoKICAgIAkJCV93aWR0aCA9IHdpZHRoOwogICAgCQkJX2hlaWdodCA9IGhlaWdodDsKCiAgICAJCQlfcGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87CgogICAgCQkJY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBwaXhlbFJhdGlvICk7CiAgICAJCQljYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaGVpZ2h0ICogcGl4ZWxSYXRpbyApOwoKICAgIAkJCXRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgY3VycmVudCB2aWV3cG9ydCBkZWZpbml0aW9uLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LgogICAgCQkgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgY3VycmVudCB2aWV3cG9ydCBkZWZpbml0aW9uLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRDdXJyZW50Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHsKCiAgICAJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIF9jdXJyZW50Vmlld3BvcnQgKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgdmlld3BvcnQgZGVmaW5pdGlvbi4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtWZWN0b3I0fSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC4KICAgIAkJICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHZpZXdwb3J0IGRlZmluaXRpb24uCiAgICAJCSAqLwogICAgCQl0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBfdmlld3BvcnQgKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2V0cyB0aGUgdmlld3BvcnQgdG8gcmVuZGVyIGZyb20gYCh4LCB5KWAgdG8gYCh4ICsgd2lkdGgsIHkgKyBoZWlnaHQpYC4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtudW1iZXIgfCBWZWN0b3I0fSB4IC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydCBvcmlnaW4gaW4gbG9naWNhbCBwaXhlbCB1bml0LgogICAgCQkgKiBPciBhbHRlcm5hdGl2ZWx5IGEgZm91ci1jb21wb25lbnQgdmVjdG9yIHNwZWNpZnlpbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSB2aWV3cG9ydC4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydCBvcmlnaW4gIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3cG9ydCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuCiAgICAJCSAqLwogICAgCQl0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkgewoKICAgIAkJCWlmICggeC5pc1ZlY3RvcjQgKSB7CgogICAgCQkJCV92aWV3cG9ydC5zZXQoIHgueCwgeC55LCB4LnosIHgudyApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCV92aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTsKCiAgICAJCQl9CgogICAgCQkJc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkucm91bmQoKSApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIHRoZSBzY2lzc29yIHJlZ2lvbi4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtWZWN0b3I0fSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC4KICAgIAkJICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHNjaXNzb3IgcmVnaW9uLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRTY2lzc29yID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgogICAgCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBfc2Npc3NvciApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBTZXRzIHRoZSBzY2lzc29yIHJlZ2lvbiB0byByZW5kZXIgZnJvbSBgKHgsIHkpYCB0byBgKHggKyB3aWR0aCwgeSArIGhlaWdodClgLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge251bWJlciB8IFZlY3RvcjR9IHggLSBUaGUgaG9yaXpvbnRhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNjaXNzb3IgcmVnaW9uIG9yaWdpbiBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuCiAgICAJCSAqIE9yIGFsdGVybmF0aXZlbHkgYSBmb3VyLWNvbXBvbmVudCB2ZWN0b3Igc3BlY2lmeWluZyBhbGwgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIHNjaXNzb3IgcmVnaW9uLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNjaXNzb3IgcmVnaW9uIG9yaWdpbiAgaW4gbG9naWNhbCBwaXhlbCB1bml0LgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHNjaXNzb3IgcmVnaW9uIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHNjaXNzb3IgcmVnaW9uIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0U2Npc3NvciA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHsKCiAgICAJCQlpZiAoIHguaXNWZWN0b3I0ICkgewoKICAgIAkJCQlfc2Npc3Nvci5zZXQoIHgueCwgeC55LCB4LnosIHgudyApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCV9zY2lzc29yLnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApOwoKICAgIAkJCX0KCiAgICAJCQlzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5yb3VuZCgpICk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzY2lzc29yIHRlc3QgaXMgZW5hYmxlZC4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgc2Npc3NvciB0ZXN0IGlzIGVuYWJsZWQgb3Igbm90LgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gX3NjaXNzb3JUZXN0OwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgc2Npc3NvciB0ZXN0LiBXaGVuIHRoaXMgaXMgZW5hYmxlZCwgb25seSB0aGUgcGl4ZWxzCiAgICAJCSAqIHdpdGhpbiB0aGUgZGVmaW5lZCBzY2lzc29yIGFyZWEgd2lsbCBiZSBhZmZlY3RlZCBieSBmdXJ0aGVyIHJlbmRlcmVyCiAgICAJCSAqIGFjdGlvbnMuCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7Ym9vbGVhbn0gYm9vbGVhbiAtIFdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBpcyBlbmFibGVkIG9yIG5vdC4KICAgIAkJICovCiAgICAJCXRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7CgogICAgCQkJc3RhdGUuc2V0U2Npc3NvclRlc3QoIF9zY2lzc29yVGVzdCA9IGJvb2xlYW4gKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2V0cyBhIGN1c3RvbSBvcGFxdWUgc29ydCBmdW5jdGlvbiBmb3IgdGhlIHJlbmRlciBsaXN0cy4gUGFzcyBgbnVsbGAKICAgIAkJICogdG8gdXNlIHRoZSBkZWZhdWx0IGBwYWludGVyU29ydFN0YWJsZWAgZnVuY3Rpb24uCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBtZXRob2QgLSBUaGUgb3BhcXVlIHNvcnQgZnVuY3Rpb24uCiAgICAJCSAqLwogICAgCQl0aGlzLnNldE9wYXF1ZVNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHsKCiAgICAJCQlfb3BhcXVlU29ydCA9IG1ldGhvZDsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogU2V0cyBhIGN1c3RvbSB0cmFuc3BhcmVudCBzb3J0IGZ1bmN0aW9uIGZvciB0aGUgcmVuZGVyIGxpc3RzLiBQYXNzIGBudWxsYAogICAgCQkgKiB0byB1c2UgdGhlIGRlZmF1bHQgYHJldmVyc2VQYWludGVyU29ydFN0YWJsZWAgZnVuY3Rpb24uCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBtZXRob2QgLSBUaGUgb3BhcXVlIHNvcnQgZnVuY3Rpb24uCiAgICAJCSAqLwogICAgCQl0aGlzLnNldFRyYW5zcGFyZW50U29ydCA9IGZ1bmN0aW9uICggbWV0aG9kICkgewoKICAgIAkJCV90cmFuc3BhcmVudFNvcnQgPSBtZXRob2Q7CgogICAgCQl9OwoKICAgIAkJLy8gQ2xlYXJpbmcKCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIHRoZSBjbGVhciBjb2xvci4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtDb2xvcn0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuCiAgICAJCSAqIEByZXR1cm4ge0NvbG9yfSBUaGUgY2xlYXIgY29sb3IuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHsKCiAgICAJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGJhY2tncm91bmQuZ2V0Q2xlYXJDb2xvcigpICk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFNldHMgdGhlIGNsZWFyIGNvbG9yIGFuZCBhbHBoYS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY2xlYXIgY29sb3IuCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGE9MV0gLSBUaGUgY2xlYXIgYWxwaGEuCiAgICAJCSAqLwogICAgCQl0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJYmFja2dyb3VuZC5zZXRDbGVhckNvbG9yKCAuLi5hcmd1bWVudHMgKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgY2xlYXIgYWxwaGEuIFJhbmdlcyB3aXRoaW4gYFswLDFdYC4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2xlYXIgYWxwaGEuCiAgICAJCSAqLwogICAgCQl0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBTZXRzIHRoZSBjbGVhciBhbHBoYS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGNsZWFyIGFscGhhLgogICAgCQkgKi8KICAgIAkJdGhpcy5zZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCWJhY2tncm91bmQuc2V0Q2xlYXJBbHBoYSggLi4uYXJndW1lbnRzICk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFRlbGxzIHRoZSByZW5kZXJlciB0byBjbGVhciBpdHMgY29sb3IsIGRlcHRoIG9yIHN0ZW5jaWwgZHJhd2luZyBidWZmZXIocykuCiAgICAJCSAqIFRoaXMgbWV0aG9kIGluaXRpYWxpemVzIHRoZSBidWZmZXJzIHRvIHRoZSBjdXJyZW50IGNsZWFyIGNvbG9yIHZhbHVlcy4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtib29sZWFufSBbY29sb3I9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBjb2xvciBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LgogICAgCQkgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgdGhlIGRlcHRoIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuCiAgICAJCSAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0ZW5jaWw9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBzdGVuY2lsIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuCiAgICAJCSAqLwogICAgCQl0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCBjb2xvciA9IHRydWUsIGRlcHRoID0gdHJ1ZSwgc3RlbmNpbCA9IHRydWUgKSB7CgogICAgCQkJbGV0IGJpdHMgPSAwOwoKICAgIAkJCWlmICggY29sb3IgKSB7CgogICAgCQkJCS8vIGNoZWNrIGlmIHdlJ3JlIHRyeWluZyB0byBjbGVhciBhbiBpbnRlZ2VyIHRhcmdldAogICAgCQkJCWxldCBpc0ludGVnZXJGb3JtYXQgPSBmYWxzZTsKICAgIAkJCQlpZiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgewoKICAgIAkJCQkJY29uc3QgdGFyZ2V0Rm9ybWF0ID0gX2N1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQ7CiAgICAJCQkJCWlzSW50ZWdlckZvcm1hdCA9IHRhcmdldEZvcm1hdCA9PT0gUkdCQUludGVnZXJGb3JtYXQgfHwKICAgIAkJCQkJCXRhcmdldEZvcm1hdCA9PT0gUkdJbnRlZ2VyRm9ybWF0IHx8CiAgICAJCQkJCQl0YXJnZXRGb3JtYXQgPT09IFJlZEludGVnZXJGb3JtYXQ7CgogICAgCQkJCX0KCiAgICAJCQkJLy8gdXNlIHRoZSBhcHByb3ByaWF0ZSBjbGVhciBmdW5jdGlvbnMgdG8gY2xlYXIgdGhlIHRhcmdldCBpZiBpdCdzIGEgc2lnbmVkCiAgICAJCQkJLy8gb3IgdW5zaWduZWQgaW50ZWdlciB0YXJnZXQKICAgIAkJCQlpZiAoIGlzSW50ZWdlckZvcm1hdCApIHsKCiAgICAJCQkJCWNvbnN0IHRhcmdldFR5cGUgPSBfY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGU7CiAgICAJCQkJCWNvbnN0IGlzVW5zaWduZWRUeXBlID0gdGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRCeXRlVHlwZSB8fAogICAgCQkJCQkJdGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8CiAgICAJCQkJCQl0YXJnZXRUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSB8fAogICAgCQkJCQkJdGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlIHx8CiAgICAJCQkJCQl0YXJnZXRUeXBlID09PSBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgfHwKICAgIAkJCQkJCXRhcmdldFR5cGUgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZTsKCiAgICAJCQkJCWNvbnN0IGNsZWFyQ29sb3IgPSBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKTsKICAgIAkJCQkJY29uc3QgYSA9IGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpOwogICAgCQkJCQljb25zdCByID0gY2xlYXJDb2xvci5yOwogICAgCQkJCQljb25zdCBnID0gY2xlYXJDb2xvci5nOwogICAgCQkJCQljb25zdCBiID0gY2xlYXJDb2xvci5iOwoKICAgIAkJCQkJaWYgKCBpc1Vuc2lnbmVkVHlwZSApIHsKCiAgICAJCQkJCQl1aW50Q2xlYXJDb2xvclsgMCBdID0gcjsKICAgIAkJCQkJCXVpbnRDbGVhckNvbG9yWyAxIF0gPSBnOwogICAgCQkJCQkJdWludENsZWFyQ29sb3JbIDIgXSA9IGI7CiAgICAJCQkJCQl1aW50Q2xlYXJDb2xvclsgMyBdID0gYTsKICAgIAkJCQkJCV9nbC5jbGVhckJ1ZmZlcnVpdiggX2dsLkNPTE9SLCAwLCB1aW50Q2xlYXJDb2xvciApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlpbnRDbGVhckNvbG9yWyAwIF0gPSByOwogICAgCQkJCQkJaW50Q2xlYXJDb2xvclsgMSBdID0gZzsKICAgIAkJCQkJCWludENsZWFyQ29sb3JbIDIgXSA9IGI7CiAgICAJCQkJCQlpbnRDbGVhckNvbG9yWyAzIF0gPSBhOwogICAgCQkJCQkJX2dsLmNsZWFyQnVmZmVyaXYoIF9nbC5DT0xPUiwgMCwgaW50Q2xlYXJDb2xvciApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJYml0cyB8PSBfZ2wuQ09MT1JfQlVGRkVSX0JJVDsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGRlcHRoICkgewoKICAgIAkJCQliaXRzIHw9IF9nbC5ERVBUSF9CVUZGRVJfQklUOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHN0ZW5jaWwgKSB7CgogICAgCQkJCWJpdHMgfD0gX2dsLlNURU5DSUxfQlVGRkVSX0JJVDsKICAgIAkJCQl0aGlzLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRNYXNrKCAweGZmZmZmZmZmICk7CgogICAgCQkJfQoKICAgIAkJCV9nbC5jbGVhciggYml0cyApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBDbGVhcnMgdGhlIGNvbG9yIGJ1ZmZlci4gRXF1aXZhbGVudCB0byBjYWxsaW5nIGByZW5kZXJlci5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlIClgLgogICAgCQkgKi8KICAgIAkJdGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXRoaXMuY2xlYXIoIHRydWUsIGZhbHNlLCBmYWxzZSApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBDbGVhcnMgdGhlIGRlcHRoIGJ1ZmZlci4gRXF1aXZhbGVudCB0byBjYWxsaW5nIGByZW5kZXJlci5jbGVhciggZmFsc2UsIHRydWUsIGZhbHNlIClgLgogICAgCQkgKi8KICAgIAkJdGhpcy5jbGVhckRlcHRoID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCXRoaXMuY2xlYXIoIGZhbHNlLCB0cnVlLCBmYWxzZSApOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBDbGVhcnMgdGhlIHN0ZW5jaWwgYnVmZmVyLiBFcXVpdmFsZW50IHRvIGNhbGxpbmcgYHJlbmRlcmVyLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKWAuCiAgICAJCSAqLwogICAgCQl0aGlzLmNsZWFyU3RlbmNpbCA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQl0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzCiAgICAJCSAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLgogICAgCQkgKi8KICAgIAkJdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCWNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlICk7CiAgICAJCQljYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTsKICAgIAkJCWNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0Y3JlYXRpb25lcnJvcicsIG9uQ29udGV4dENyZWF0aW9uRXJyb3IsIGZhbHNlICk7CgogICAgCQkJYmFja2dyb3VuZC5kaXNwb3NlKCk7CiAgICAJCQlyZW5kZXJMaXN0cy5kaXNwb3NlKCk7CiAgICAJCQlyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpOwogICAgCQkJcHJvcGVydGllcy5kaXNwb3NlKCk7CiAgICAJCQljdWJlbWFwcy5kaXNwb3NlKCk7CiAgICAJCQljdWJldXZtYXBzLmRpc3Bvc2UoKTsKICAgIAkJCW9iamVjdHMuZGlzcG9zZSgpOwogICAgCQkJYmluZGluZ1N0YXRlcy5kaXNwb3NlKCk7CiAgICAJCQl1bmlmb3Jtc0dyb3Vwcy5kaXNwb3NlKCk7CiAgICAJCQlwcm9ncmFtQ2FjaGUuZGlzcG9zZSgpOwoKICAgIAkJCXhyLmRpc3Bvc2UoKTsKCiAgICAJCQl4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbnN0YXJ0Jywgb25YUlNlc3Npb25TdGFydCApOwogICAgCQkJeHIucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25lbmQnLCBvblhSU2Vzc2lvbkVuZCApOwoKICAgIAkJCWFuaW1hdGlvbi5zdG9wKCk7CgogICAgCQl9OwoKICAgIAkJLy8gRXZlbnRzCgogICAgCQlmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHsKCiAgICAJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgIAkJCWNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LicgKTsKCiAgICAJCQlfaXNDb250ZXh0TG9zdCA9IHRydWU7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBvbkNvbnRleHRSZXN0b3JlKCAvKiBldmVudCAqLyApIHsKCiAgICAJCQljb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgUmVzdG9yZWQuJyApOwoKICAgIAkJCV9pc0NvbnRleHRMb3N0ID0gZmFsc2U7CgogICAgCQkJY29uc3QgaW5mb0F1dG9SZXNldCA9IGluZm8uYXV0b1Jlc2V0OwogICAgCQkJY29uc3Qgc2hhZG93TWFwRW5hYmxlZCA9IHNoYWRvd01hcC5lbmFibGVkOwogICAgCQkJY29uc3Qgc2hhZG93TWFwQXV0b1VwZGF0ZSA9IHNoYWRvd01hcC5hdXRvVXBkYXRlOwogICAgCQkJY29uc3Qgc2hhZG93TWFwTmVlZHNVcGRhdGUgPSBzaGFkb3dNYXAubmVlZHNVcGRhdGU7CiAgICAJCQljb25zdCBzaGFkb3dNYXBUeXBlID0gc2hhZG93TWFwLnR5cGU7CgogICAgCQkJaW5pdEdMQ29udGV4dCgpOwoKICAgIAkJCWluZm8uYXV0b1Jlc2V0ID0gaW5mb0F1dG9SZXNldDsKICAgIAkJCXNoYWRvd01hcC5lbmFibGVkID0gc2hhZG93TWFwRW5hYmxlZDsKICAgIAkJCXNoYWRvd01hcC5hdXRvVXBkYXRlID0gc2hhZG93TWFwQXV0b1VwZGF0ZTsKICAgIAkJCXNoYWRvd01hcC5uZWVkc1VwZGF0ZSA9IHNoYWRvd01hcE5lZWRzVXBkYXRlOwogICAgCQkJc2hhZG93TWFwLnR5cGUgPSBzaGFkb3dNYXBUeXBlOwoKICAgIAkJfQoKICAgIAkJZnVuY3Rpb24gb25Db250ZXh0Q3JlYXRpb25FcnJvciggZXZlbnQgKSB7CgogICAgCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEEgV2ViR0wgY29udGV4dCBjb3VsZCBub3QgYmUgY3JlYXRlZC4gUmVhc29uOiAnLCBldmVudC5zdGF0dXNNZXNzYWdlICk7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZSggZXZlbnQgKSB7CgogICAgCQkJY29uc3QgbWF0ZXJpYWwgPSBldmVudC50YXJnZXQ7CgogICAgCQkJbWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApOwoKICAgIAkJCWRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTsKCiAgICAJCX0KCiAgICAJCS8vIEJ1ZmZlciBkZWFsbG9jYXRpb24KCiAgICAJCWZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7CgogICAgCQkJcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMoIG1hdGVyaWFsICk7CgogICAgCQkJcHJvcGVydGllcy5yZW1vdmUoIG1hdGVyaWFsICk7CgogICAgCQl9CgoKICAgIAkJZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMoIG1hdGVyaWFsICkgewoKICAgIAkJCWNvbnN0IHByb2dyYW1zID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkucHJvZ3JhbXM7CgogICAgCQkJaWYgKCBwcm9ncmFtcyAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlwcm9ncmFtcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHByb2dyYW0gKSB7CgogICAgCQkJCQlwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW0gKTsKCiAgICAJCQkJfSApOwoKICAgIAkJCQlpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7CgogICAgCQkJCQlwcm9ncmFtQ2FjaGUucmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJLy8gQnVmZmVyIHJlbmRlcmluZwoKICAgIAkJdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApIHsKCiAgICAJCQlpZiAoIHNjZW5lID09PSBudWxsICkgc2NlbmUgPSBfZW1wdHlTY2VuZTsgLy8gcmVuZGVyQnVmZmVyRGlyZWN0IHNlY29uZCBwYXJhbWV0ZXIgdXNlZCB0byBiZSBmb2cgKGNvdWxkIGJlIG51bGwpCgogICAgCQkJY29uc3QgZnJvbnRGYWNlQ1cgPSAoIG9iamVjdC5pc01lc2ggJiYgb2JqZWN0Lm1hdHJpeFdvcmxkLmRldGVybWluYW50KCkgPCAwICk7CgogICAgCQkJY29uc3QgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICk7CgogICAgCQkJc3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApOwoKICAgIAkJCS8vCgogICAgCQkJbGV0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7CiAgICAJCQlsZXQgcmFuZ2VGYWN0b3IgPSAxOwoKICAgIAkJCWlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgewoKICAgIAkJCQlpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApOwoKICAgIAkJCQlpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSByZXR1cm47CgogICAgCQkJCXJhbmdlRmFjdG9yID0gMjsKCiAgICAJCQl9CgogICAgCQkJLy8KCiAgICAJCQljb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7CiAgICAJCQljb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgogICAgCQkJbGV0IGRyYXdTdGFydCA9IGRyYXdSYW5nZS5zdGFydCAqIHJhbmdlRmFjdG9yOwogICAgCQkJbGV0IGRyYXdFbmQgPSAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICogcmFuZ2VGYWN0b3I7CgogICAgCQkJaWYgKCBncm91cCAhPT0gbnVsbCApIHsKCiAgICAJCQkJZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIGRyYXdTdGFydCwgZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciApOwogICAgCQkJCWRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICkgKiByYW5nZUZhY3RvciApOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGluZGV4ICE9PSBudWxsICkgewoKICAgIAkJCQlkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCAwICk7CiAgICAJCQkJZHJhd0VuZCA9IE1hdGgubWluKCBkcmF3RW5kLCBpbmRleC5jb3VudCApOwoKICAgIAkJCX0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgJiYgcG9zaXRpb24gIT09IG51bGwgKSB7CgogICAgCQkJCWRyYXdTdGFydCA9IE1hdGgubWF4KCBkcmF3U3RhcnQsIDAgKTsKICAgIAkJCQlkcmF3RW5kID0gTWF0aC5taW4oIGRyYXdFbmQsIHBvc2l0aW9uLmNvdW50ICk7CgogICAgCQkJfQoKICAgIAkJCWNvbnN0IGRyYXdDb3VudCA9IGRyYXdFbmQgLSBkcmF3U3RhcnQ7CgogICAgCQkJaWYgKCBkcmF3Q291bnQgPCAwIHx8IGRyYXdDb3VudCA9PT0gSW5maW5pdHkgKSByZXR1cm47CgogICAgCQkJLy8KCiAgICAJCQliaW5kaW5nU3RhdGVzLnNldHVwKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSwgaW5kZXggKTsKCiAgICAJCQlsZXQgYXR0cmlidXRlOwogICAgCQkJbGV0IHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7CgogICAgCQkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCiAgICAJCQkJYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGluZGV4ICk7CgogICAgCQkJCXJlbmRlcmVyID0gaW5kZXhlZEJ1ZmZlclJlbmRlcmVyOwogICAgCQkJCXJlbmRlcmVyLnNldEluZGV4KCBhdHRyaWJ1dGUgKTsKCiAgICAJCQl9CgogICAgCQkJLy8KCiAgICAJCQlpZiAoIG9iamVjdC5pc01lc2ggKSB7CgogICAgCQkJCWlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgewoKICAgIAkJCQkJc3RhdGUuc2V0TGluZVdpZHRoKCBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTsKICAgIAkJCQkJcmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuVFJJQU5HTEVTICk7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkgewoKICAgIAkJCQlsZXQgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoOwoKICAgIAkJCQlpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWwKCiAgICAJCQkJc3RhdGUuc2V0TGluZVdpZHRoKCBsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTsKCiAgICAJCQkJaWYgKCBvYmplY3QuaXNMaW5lU2VnbWVudHMgKSB7CgogICAgCQkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORVMgKTsKCiAgICAJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7CgogICAgCQkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9MT09QICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9TVFJJUCApOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzUG9pbnRzICkgewoKICAgIAkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuUE9JTlRTICk7CgogICAgCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkgewoKICAgIAkJCQlyZW5kZXJlci5zZXRNb2RlKCBfZ2wuVFJJQU5HTEVTICk7CgogICAgCQkJfQoKICAgIAkJCWlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggKSB7CgogICAgCQkJCWlmICggb2JqZWN0Ll9tdWx0aURyYXdJbnN0YW5jZXMgIT09IG51bGwgKSB7CgogICAgCQkJCQkvLyBAZGVwcmVjYXRlZCwgcjE3NAogICAgCQkJCQl3YXJuT25jZSggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IHJlbmRlck11bHRpRHJhd0luc3RhbmNlcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gcjE4NC4gQXBwZW5kIHRvIHJlbmRlck11bHRpRHJhdyBhcmd1bWVudHMgYW5kIHVzZSBpbmRpcmVjdGlvbi4nICk7CiAgICAJCQkJCXJlbmRlcmVyLnJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggb2JqZWN0Ll9tdWx0aURyYXdTdGFydHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50LCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyApOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJaWYgKCAhIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlfZHJhdycgKSApIHsKCiAgICAJCQkJCQljb25zdCBzdGFydHMgPSBvYmplY3QuX211bHRpRHJhd1N0YXJ0czsKICAgIAkJCQkJCWNvbnN0IGNvdW50cyA9IG9iamVjdC5fbXVsdGlEcmF3Q291bnRzOwogICAgCQkJCQkJY29uc3QgZHJhd0NvdW50ID0gb2JqZWN0Ll9tdWx0aURyYXdDb3VudDsKICAgIAkJCQkJCWNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGluZGV4ID8gYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnl0ZXNQZXJFbGVtZW50IDogMTsKICAgIAkJCQkJCWNvbnN0IHVuaWZvcm1zID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkuY3VycmVudFByb2dyYW0uZ2V0VW5pZm9ybXMoKTsKICAgIAkJCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IGRyYXdDb3VudDsgaSArKyApIHsKCiAgICAJCQkJCQkJdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ19nbF9EcmF3SUQnLCBpICk7CiAgICAJCQkJCQkJcmVuZGVyZXIucmVuZGVyKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0gKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCXJlbmRlcmVyLnJlbmRlck11bHRpRHJhdyggb2JqZWN0Ll9tdWx0aURyYXdTdGFydHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50ICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICkgewoKICAgIAkJCQlyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGRyYXdTdGFydCwgZHJhd0NvdW50LCBvYmplY3QuY291bnQgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkgewoKICAgIAkJCQljb25zdCBtYXhJbnN0YW5jZUNvdW50ID0gZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50IDogSW5maW5pdHk7CiAgICAJCQkJY29uc3QgaW5zdGFuY2VDb3VudCA9IE1hdGgubWluKCBnZW9tZXRyeS5pbnN0YW5jZUNvdW50LCBtYXhJbnN0YW5jZUNvdW50ICk7CgogICAgCQkJCXJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyggZHJhd1N0YXJ0LCBkcmF3Q291bnQsIGluc3RhbmNlQ291bnQgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlyZW5kZXJlci5yZW5kZXIoIGRyYXdTdGFydCwgZHJhd0NvdW50ICk7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8vIENvbXBpbGUKCiAgICAJCWZ1bmN0aW9uIHByZXBhcmVNYXRlcmlhbCggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7CgogICAgCQkJaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSAmJiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9PT0gZmFsc2UgKSB7CgogICAgCQkJCW1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTsKICAgIAkJCQltYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CiAgICAJCQkJZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTsKCiAgICAJCQkJbWF0ZXJpYWwuc2lkZSA9IEZyb250U2lkZTsKICAgIAkJCQltYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CiAgICAJCQkJZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTsKCiAgICAJCQkJbWF0ZXJpYWwuc2lkZSA9IERvdWJsZVNpZGU7CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQkvKioKICAgIAkJICogQ29tcGlsZXMgYWxsIG1hdGVyaWFscyBpbiB0aGUgc2NlbmUgd2l0aCB0aGUgY2FtZXJhLiBUaGlzIGlzIHVzZWZ1bCB0byBwcmVjb21waWxlIHNoYWRlcnMKICAgIAkJICogYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJpbmcuIElmIHlvdSB3YW50IHRvIGFkZCBhIDNEIG9iamVjdCB0byBhbiBleGlzdGluZyBzY2VuZSwgdXNlIHRoZSB0aGlyZAogICAgCQkgKiBvcHRpb25hbCBwYXJhbWV0ZXIgZm9yIGFwcGx5aW5nIHRoZSB0YXJnZXQgc2NlbmUuCiAgICAJCSAqCiAgICAJCSAqIE5vdGUgdGhhdCB0aGUgKHRhcmdldCkgc2NlbmUncyBsaWdodGluZyBhbmQgZW52aXJvbm1lbnQgbXVzdCBiZSBjb25maWd1cmVkIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSBvciBhbm90aGVyIHR5cGUgb2YgM0Qgb2JqZWN0IHRvIHByZWNvbXBpbGUuCiAgICAJCSAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLgogICAgCQkgKiBAcGFyYW0gez9TY2VuZX0gW3RhcmdldFNjZW5lPW51bGxdIC0gVGhlIHRhcmdldCBzY2VuZS4KICAgIAkJICogQHJldHVybiB7U2V0PE1hdGVyaWFsPn0gVGhlIHByZWNvbXBpbGVkIG1hdGVyaWFscy4KICAgIAkJICovCiAgICAJCXRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSwgdGFyZ2V0U2NlbmUgPSBudWxsICkgewoKICAgIAkJCWlmICggdGFyZ2V0U2NlbmUgPT09IG51bGwgKSB0YXJnZXRTY2VuZSA9IHNjZW5lOwoKICAgIAkJCWN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHRhcmdldFNjZW5lICk7CiAgICAJCQljdXJyZW50UmVuZGVyU3RhdGUuaW5pdCggY2FtZXJhICk7CgogICAgCQkJcmVuZGVyU3RhdGVTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyU3RhdGUgKTsKCiAgICAJCQkvLyBnYXRoZXIgbGlnaHRzIGZyb20gYm90aCB0aGUgdGFyZ2V0IHNjZW5lIGFuZCB0aGUgbmV3IG9iamVjdCB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHNjZW5lLgoKICAgIAkJCXRhcmdldFNjZW5lLnRyYXZlcnNlVmlzaWJsZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7CgogICAgCQkJCWlmICggb2JqZWN0LmlzTGlnaHQgJiYgb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7CgogICAgCQkJCQljdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTsKCiAgICAJCQkJCWlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7CgogICAgCQkJCQkJY3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfSApOwoKICAgIAkJCWlmICggc2NlbmUgIT09IHRhcmdldFNjZW5lICkgewoKICAgIAkJCQlzY2VuZS50cmF2ZXJzZVZpc2libGUoIGZ1bmN0aW9uICggb2JqZWN0ICkgewoKICAgIAkJCQkJaWYgKCBvYmplY3QuaXNMaWdodCAmJiBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKSApIHsKCiAgICAJCQkJCQljdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTsKCiAgICAJCQkJCQlpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkgewoKICAgIAkJCQkJCQljdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9ICk7CgogICAgCQkJfQoKICAgIAkJCWN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cygpOwoKICAgIAkJCS8vIE9ubHkgaW5pdGlhbGl6ZSBtYXRlcmlhbHMgaW4gdGhlIG5ldyBzY2VuZSwgbm90IHRoZSB0YXJnZXRTY2VuZS4KCiAgICAJCQljb25zdCBtYXRlcmlhbHMgPSBuZXcgU2V0KCk7CgogICAgCQkJc2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkgewoKICAgIAkJCQlpZiAoICEgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1Nwcml0ZSApICkgewoKICAgIAkJCQkJcmV0dXJuOwoKICAgIAkJCQl9CgogICAgCQkJCWNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsOwoKICAgIAkJCQlpZiAoIG1hdGVyaWFsICkgewoKICAgIAkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkgewoKICAgIAkJCQkJCWZvciAoIGxldCBpID0gMDsgaSA8IG1hdGVyaWFsLmxlbmd0aDsgaSArKyApIHsKCiAgICAJCQkJCQkJY29uc3QgbWF0ZXJpYWwyID0gbWF0ZXJpYWxbIGkgXTsKCiAgICAJCQkJCQkJcHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbDIsIHRhcmdldFNjZW5lLCBvYmplY3QgKTsKICAgIAkJCQkJCQltYXRlcmlhbHMuYWRkKCBtYXRlcmlhbDIgKTsKCiAgICAJCQkJCQl9CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCXByZXBhcmVNYXRlcmlhbCggbWF0ZXJpYWwsIHRhcmdldFNjZW5lLCBvYmplY3QgKTsKICAgIAkJCQkJCW1hdGVyaWFscy5hZGQoIG1hdGVyaWFsICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9ICk7CgogICAgCQkJY3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVTdGFjay5wb3AoKTsKCiAgICAJCQlyZXR1cm4gbWF0ZXJpYWxzOwoKICAgIAkJfTsKCiAgICAJCS8vIGNvbXBpbGVBc3luYwoKICAgIAkJLyoqCiAgICAJCSAqIEFzeW5jaHJvbm91cyB2ZXJzaW9uIG9mIHtAbGluayBXZWJHTFJlbmRlcmVyI2NvbXBpbGV9LgogICAgCQkgKgogICAgCQkgKiBUaGlzIG1ldGhvZCBtYWtlcyB1c2Ugb2YgdGhlIGBLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGVgIFdlYkdMIGV4dGVuc2lvbi4gSGVuY2UsCiAgICAJCSAqIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIHZlcnNpb24gb2YgYGNvbXBpbGUoKWAgd2hlbmV2ZXIgcG9zc2libGUuCiAgICAJCSAqCiAgICAJCSAqIEBhc3luYwogICAgCQkgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSBvciBhbm90aGVyIHR5cGUgb2YgM0Qgb2JqZWN0IHRvIHByZWNvbXBpbGUuCiAgICAJCSAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLgogICAgCQkgKiBAcGFyYW0gez9TY2VuZX0gW3RhcmdldFNjZW5lPW51bGxdIC0gVGhlIHRhcmdldCBzY2VuZS4KICAgIAkJICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZ2l2ZW4gc2NlbmUgY2FuIGJlIHJlbmRlcmVkIHdpdGhvdXQgdW5uZWNlc3Nhcnkgc3RhbGxpbmcgZHVlIHRvIHNoYWRlciBjb21waWxhdGlvbi4KICAgIAkJICovCiAgICAJCXRoaXMuY29tcGlsZUFzeW5jID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhLCB0YXJnZXRTY2VuZSA9IG51bGwgKSB7CgogICAgCQkJY29uc3QgbWF0ZXJpYWxzID0gdGhpcy5jb21waWxlKCBzY2VuZSwgY2FtZXJhLCB0YXJnZXRTY2VuZSApOwoKICAgIAkJCS8vIFdhaXQgZm9yIGFsbCB0aGUgbWF0ZXJpYWxzIGluIHRoZSBuZXcgb2JqZWN0IHRvIGluZGljYXRlIHRoYXQgdGhleSdyZQogICAgCQkJLy8gcmVhZHkgdG8gYmUgdXNlZCBiZWZvcmUgcmVzb2x2aW5nIHRoZSBwcm9taXNlLgoKICAgIAkJCXJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlICkgPT4gewoKICAgIAkJCQlmdW5jdGlvbiBjaGVja01hdGVyaWFsc1JlYWR5KCkgewoKICAgIAkJCQkJbWF0ZXJpYWxzLmZvckVhY2goIGZ1bmN0aW9uICggbWF0ZXJpYWwgKSB7CgogICAgCQkJCQkJY29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7CiAgICAJCQkJCQljb25zdCBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtOwoKICAgIAkJCQkJCWlmICggcHJvZ3JhbS5pc1JlYWR5KCkgKSB7CgogICAgCQkJCQkJCS8vIHJlbW92ZSBhbnkgcHJvZ3JhbXMgdGhhdCByZXBvcnQgdGhleSdyZSByZWFkeSB0byB1c2UgZnJvbSB0aGUgbGlzdAogICAgCQkJCQkJCW1hdGVyaWFscy5kZWxldGUoIG1hdGVyaWFsICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfSApOwoKICAgIAkJCQkJLy8gb25jZSB0aGUgbGlzdCBvZiBjb21waWxpbmcgbWF0ZXJpYWxzIGlzIGVtcHR5LCBjYWxsIHRoZSBjYWxsYmFjawoKICAgIAkJCQkJaWYgKCBtYXRlcmlhbHMuc2l6ZSA9PT0gMCApIHsKCiAgICAJCQkJCQlyZXNvbHZlKCBzY2VuZSApOwogICAgCQkJCQkJcmV0dXJuOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJLy8gaWYgc29tZSBtYXRlcmlhbHMgYXJlIHN0aWxsIG5vdCByZWFkeSwgd2FpdCBhIGJpdCBhbmQgY2hlY2sgYWdhaW4KCiAgICAJCQkJCXNldFRpbWVvdXQoIGNoZWNrTWF0ZXJpYWxzUmVhZHksIDEwICk7CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCBleHRlbnNpb25zLmdldCggJ0tIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZScgKSAhPT0gbnVsbCApIHsKCiAgICAJCQkJCS8vIElmIHdlIGNhbiBjaGVjayB0aGUgY29tcGlsYXRpb24gc3RhdHVzIG9mIHRoZSBtYXRlcmlhbHMgd2l0aG91dAogICAgCQkJCQkvLyBibG9ja2luZyB0aGVuIGRvIHNvIHJpZ2h0IGF3YXkuCgogICAgCQkJCQljaGVja01hdGVyaWFsc1JlYWR5KCk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQkvLyBPdGhlcndpc2Ugc3RhcnQgYnkgd2FpdGluZyBhIGJpdCB0byBnaXZlIHRoZSBtYXRlcmlhbHMgd2UganVzdAogICAgCQkJCQkvLyBpbml0aWFsaXplZCBhIGNoYW5jZSB0byBmaW5pc2guCgogICAgCQkJCQlzZXRUaW1lb3V0KCBjaGVja01hdGVyaWFsc1JlYWR5LCAxMCApOwoKICAgIAkJCQl9CgogICAgCQkJfSApOwoKICAgIAkJfTsKCiAgICAJCS8vIEFuaW1hdGlvbiBMb29wCgogICAgCQlsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDsKCiAgICAJCWZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUgKSB7CgogICAgCQkJaWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUgKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIG9uWFJTZXNzaW9uU3RhcnQoKSB7CgogICAgCQkJYW5pbWF0aW9uLnN0b3AoKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIG9uWFJTZXNzaW9uRW5kKCkgewoKICAgIAkJCWFuaW1hdGlvbi5zdGFydCgpOwoKICAgIAkJfQoKICAgIAkJY29uc3QgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7CiAgICAJCWFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7CgogICAgCQlpZiAoIHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyApIGFuaW1hdGlvbi5zZXRDb250ZXh0KCBzZWxmICk7CgogICAgCQl0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKICAgIAkJCW9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrOwogICAgCQkJeHIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTsKCiAgICAJCQkoIGNhbGxiYWNrID09PSBudWxsICkgPyBhbmltYXRpb24uc3RvcCgpIDogYW5pbWF0aW9uLnN0YXJ0KCk7CgogICAgCQl9OwoKICAgIAkJeHIuYWRkRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25zdGFydCcsIG9uWFJTZXNzaW9uU3RhcnQgKTsKICAgIAkJeHIuYWRkRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25lbmQnLCBvblhSU2Vzc2lvbkVuZCApOwoKICAgIAkJLy8gUmVuZGVyaW5nCgogICAgCQkvKioKICAgIAkJICogUmVuZGVycyB0aGUgZ2l2ZW4gc2NlbmUgKG9yIG90aGVyIHR5cGUgb2YgM0Qgb2JqZWN0KSB1c2luZyB0aGUgZ2l2ZW4gY2FtZXJhLgogICAgCQkgKgogICAgCQkgKiBUaGUgcmVuZGVyIGlzIGRvbmUgdG8gYSBwcmV2aW91c2x5IHNwZWNpZmllZCByZW5kZXIgdGFyZ2V0IHNldCBieSBjYWxsaW5nIHtAbGluayBXZWJHTFJlbmRlcmVyI3NldFJlbmRlclRhcmdldH0KICAgIAkJICogb3IgdG8gdGhlIGNhbnZhcyBhcyB1c3VhbC4KICAgIAkJICoKICAgIAkJICogQnkgZGVmYXVsdCByZW5kZXIgYnVmZmVycyBhcmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIGJ1dCB5b3UgY2FuIHByZXZlbnQKICAgIAkJICogdGhpcyBieSBzZXR0aW5nIHRoZSBwcm9wZXJ0eSBgYXV0b0NsZWFyYCB0byBgZmFsc2VgLiBJZiB5b3Ugd2FudCB0byBwcmV2ZW50CiAgICAJCSAqIG9ubHkgY2VydGFpbiBidWZmZXJzIGJlaW5nIGNsZWFyZWQgeW91IGNhbiBgYXV0b0NsZWFyQ29sb3JgLCBgYXV0b0NsZWFyRGVwdGhgCiAgICAJCSAqIG9yIGBhdXRvQ2xlYXJTdGVuY2lsYCB0byBgZmFsc2VgLiBUbyBmb3JjZSBhIGNsZWFyLCB1c2Uge0BsaW5rIFdlYkdMUmVuZGVyZXIjY2xlYXJ9LgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSB0byByZW5kZXIuCiAgICAJCSAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLgogICAgCQkgKi8KICAgIAkJdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7CgogICAgCQkJaWYgKCBjYW1lcmEgIT09IHVuZGVmaW5lZCAmJiBjYW1lcmEuaXNDYW1lcmEgIT09IHRydWUgKSB7CgogICAgCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuJyApOwogICAgCQkJCXJldHVybjsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBfaXNDb250ZXh0TG9zdCA9PT0gdHJ1ZSApIHJldHVybjsKCiAgICAJCQkvLyB1cGRhdGUgc2NlbmUgZ3JhcGgKCiAgICAJCQlpZiAoIHNjZW5lLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgogICAgCQkJLy8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bQoKICAgIAkJCWlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCAmJiBjYW1lcmEubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgogICAgCQkJaWYgKCB4ci5lbmFibGVkID09PSB0cnVlICYmIHhyLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJaWYgKCB4ci5jYW1lcmFBdXRvVXBkYXRlID09PSB0cnVlICkgeHIudXBkYXRlQ2FtZXJhKCBjYW1lcmEgKTsKCiAgICAJCQkJY2FtZXJhID0geHIuZ2V0Q2FtZXJhKCk7IC8vIHVzZSBYUiBjYW1lcmEgZm9yIHJlbmRlcmluZwoKICAgIAkJCX0KCiAgICAJCQkvLwogICAgCQkJaWYgKCBzY2VuZS5pc1NjZW5lID09PSB0cnVlICkgc2NlbmUub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBfY3VycmVudFJlbmRlclRhcmdldCApOwoKICAgIAkJCWN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCApOwogICAgCQkJY3VycmVudFJlbmRlclN0YXRlLmluaXQoIGNhbWVyYSApOwoKICAgIAkJCXJlbmRlclN0YXRlU3RhY2sucHVzaCggY3VycmVudFJlbmRlclN0YXRlICk7CgogICAgCQkJX3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTsKICAgIAkJCV9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApOwoKICAgIAkJCV9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7CiAgICAJCQlfY2xpcHBpbmdFbmFibGVkID0gY2xpcHBpbmcuaW5pdCggdGhpcy5jbGlwcGluZ1BsYW5lcywgX2xvY2FsQ2xpcHBpbmdFbmFibGVkICk7CgogICAgCQkJY3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0cy5nZXQoIHNjZW5lLCByZW5kZXJMaXN0U3RhY2subGVuZ3RoICk7CiAgICAJCQljdXJyZW50UmVuZGVyTGlzdC5pbml0KCk7CgogICAgCQkJcmVuZGVyTGlzdFN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJMaXN0ICk7CgogICAgCQkJaWYgKCB4ci5lbmFibGVkID09PSB0cnVlICYmIHhyLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJY29uc3QgZGVwdGhTZW5zaW5nTWVzaCA9IF90aGlzLnhyLmdldERlcHRoU2Vuc2luZ01lc2goKTsKCiAgICAJCQkJaWYgKCBkZXB0aFNlbnNpbmdNZXNoICE9PSBudWxsICkgewoKICAgIAkJCQkJcHJvamVjdE9iamVjdCggZGVwdGhTZW5zaW5nTWVzaCwgY2FtZXJhLCAtIEluZmluaXR5LCBfdGhpcy5zb3J0T2JqZWN0cyApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCXByb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIDAsIF90aGlzLnNvcnRPYmplY3RzICk7CgogICAgCQkJY3VycmVudFJlbmRlckxpc3QuZmluaXNoKCk7CgogICAgCQkJaWYgKCBfdGhpcy5zb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJY3VycmVudFJlbmRlckxpc3Quc29ydCggX29wYXF1ZVNvcnQsIF90cmFuc3BhcmVudFNvcnQgKTsKCiAgICAJCQl9CgogICAgCQkJX3JlbmRlckJhY2tncm91bmQgPSB4ci5lbmFibGVkID09PSBmYWxzZSB8fCB4ci5pc1ByZXNlbnRpbmcgPT09IGZhbHNlIHx8IHhyLmhhc0RlcHRoU2Vuc2luZygpID09PSBmYWxzZTsKICAgIAkJCWlmICggX3JlbmRlckJhY2tncm91bmQgKSB7CgogICAgCQkJCWJhY2tncm91bmQuYWRkVG9SZW5kZXJMaXN0KCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUgKTsKCiAgICAJCQl9CgogICAgCQkJLy8KCiAgICAJCQl0aGlzLmluZm8ucmVuZGVyLmZyYW1lICsrOwoKICAgIAkJCWlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLmJlZ2luU2hhZG93cygpOwoKICAgIAkJCWNvbnN0IHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7CgogICAgCQkJc2hhZG93TWFwLnJlbmRlciggc2hhZG93c0FycmF5LCBzY2VuZSwgY2FtZXJhICk7CgogICAgCQkJaWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuZW5kU2hhZG93cygpOwoKICAgIAkJCS8vCgogICAgCQkJaWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ID09PSB0cnVlICkgdGhpcy5pbmZvLnJlc2V0KCk7CgogICAgCQkJLy8gcmVuZGVyIHNjZW5lCgogICAgCQkJY29uc3Qgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTsKICAgIAkJCWNvbnN0IHRyYW5zbWlzc2l2ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc21pc3NpdmU7CgogICAgCQkJY3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCk7CgogICAgCQkJaWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSApIHsKCiAgICAJCQkJY29uc3QgY2FtZXJhcyA9IGNhbWVyYS5jYW1lcmFzOwoKICAgIAkJCQlpZiAoIHRyYW5zbWlzc2l2ZU9iamVjdHMubGVuZ3RoID4gMCApIHsKCiAgICAJCQkJCWZvciAoIGxldCBpID0gMCwgbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJCQljb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdOwoKICAgIAkJCQkJCXJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEyICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCBfcmVuZGVyQmFja2dyb3VuZCApIGJhY2tncm91bmQucmVuZGVyKCBzY2VuZSApOwoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDAsIGwgPSBjYW1lcmFzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQljb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdOwoKICAgIAkJCQkJcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhMiwgY2FtZXJhMi52aWV3cG9ydCApOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJaWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJUcmFuc21pc3Npb25QYXNzKCBvcGFxdWVPYmplY3RzLCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7CgogICAgCQkJCWlmICggX3JlbmRlckJhY2tncm91bmQgKSBiYWNrZ3JvdW5kLnJlbmRlciggc2NlbmUgKTsKCiAgICAJCQkJcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhICk7CgogICAgCQkJfQoKICAgIAkJCS8vCgogICAgCQkJaWYgKCBfY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCAmJiBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID09PSAwICkgewoKICAgIAkJCQkvLyByZXNvbHZlIG11bHRpc2FtcGxlIHJlbmRlcmJ1ZmZlcnMgdG8gYSBzaW5nbGUtc2FtcGxlIHRleHR1cmUgaWYgbmVjZXNzYXJ5CgogICAgCQkJCXRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApOwoKICAgIAkJCQkvLyBHZW5lcmF0ZSBtaXBtYXAgaWYgd2UncmUgdXNpbmcgYW55IGtpbmQgb2YgbWlwbWFwIGZpbHRlcmluZwoKICAgIAkJCQl0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICk7CgogICAgCQkJfQoKICAgIAkJCS8vCgogICAgCQkJaWYgKCBzY2VuZS5pc1NjZW5lID09PSB0cnVlICkgc2NlbmUub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEgKTsKCiAgICAJCQkvLyBfZ2wuZmluaXNoKCk7CgogICAgCQkJYmluZGluZ1N0YXRlcy5yZXNldERlZmF1bHRTdGF0ZSgpOwogICAgCQkJX2N1cnJlbnRNYXRlcmlhbElkID0gLTE7CiAgICAJCQlfY3VycmVudENhbWVyYSA9IG51bGw7CgogICAgCQkJcmVuZGVyU3RhdGVTdGFjay5wb3AoKTsKCiAgICAJCQlpZiAoIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoID4gMCApIHsKCiAgICAJCQkJY3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVTdGFja1sgcmVuZGVyU3RhdGVTdGFjay5sZW5ndGggLSAxIF07CgogICAgCQkJCWlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmNhbWVyYSApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7CgogICAgCQkJfQoKICAgIAkJCXJlbmRlckxpc3RTdGFjay5wb3AoKTsKCiAgICAJCQlpZiAoIHJlbmRlckxpc3RTdGFjay5sZW5ndGggPiAwICkgewoKICAgIAkJCQljdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RTdGFja1sgcmVuZGVyTGlzdFN0YWNrLmxlbmd0aCAtIDEgXTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQljdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCWZ1bmN0aW9uIHByb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApIHsKCiAgICAJCQlpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjsKCiAgICAJCQljb25zdCB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7CgogICAgCQkJaWYgKCB2aXNpYmxlICkgewoKICAgIAkJCQlpZiAoIG9iamVjdC5pc0dyb3VwICkgewoKICAgIAkJCQkJZ3JvdXBPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjsKCiAgICAJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzTE9EICkgewoKICAgIAkJCQkJaWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIG9iamVjdC51cGRhdGUoIGNhbWVyYSApOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHsKCiAgICAJCQkJCWN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApOwoKICAgIAkJCQkJaWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHsKCiAgICAJCQkJCQljdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHsKCiAgICAJCQkJCWlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHsKCiAgICAJCQkJCQlpZiAoIHNvcnRPYmplY3RzICkgewoKICAgIAkJCQkJCQlfdmVjdG9yNC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApCiAgICAJCQkJCQkJCS5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJCWNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApOwogICAgCQkJCQkJY29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7CgogICAgCQkJCQkJaWYgKCBtYXRlcmlhbC52aXNpYmxlICkgewoKICAgIAkJCQkJCQljdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjQueiwgbnVsbCApOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCX0KCiAgICAJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApIHsKCiAgICAJCQkJCWlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApIHsKCiAgICAJCQkJCQljb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTsKICAgIAkJCQkJCWNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsOwoKICAgIAkJCQkJCWlmICggc29ydE9iamVjdHMgKSB7CgogICAgCQkJCQkJCWlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQkJCQlpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIG9iamVjdC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKICAgIAkJCQkJCQkJX3ZlY3RvcjQuY29weSggb2JqZWN0LmJvdW5kaW5nU3BoZXJlLmNlbnRlciApOwoKICAgIAkJCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOwogICAgCQkJCQkJCQlfdmVjdG9yNC5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTsKCiAgICAJCQkJCQkJfQoKICAgIAkJCQkJCQlfdmVjdG9yNAogICAgCQkJCQkJCQkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKQogICAgCQkJCQkJCQkuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7CgogICAgCQkJCQkJCWNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwczsKCiAgICAJCQkJCQkJZm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQkJCQljb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdOwogICAgCQkJCQkJCQljb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTsKCiAgICAJCQkJCQkJCWlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7CgogICAgCQkJCQkJCQkJY3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgZ3JvdXBNYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjQueiwgZ3JvdXAgKTsKCiAgICAJCQkJCQkJCX0KCiAgICAJCQkJCQkJfQoKICAgIAkJCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7CgogICAgCQkJCQkJCWN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBudWxsICk7CgogICAgCQkJCQkJfQoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCWNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuOwoKICAgIAkJCWZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCXByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiByZW5kZXJTY2VuZSggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIHZpZXdwb3J0ICkgewoKICAgIAkJCWNvbnN0IG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7CiAgICAJCQljb25zdCB0cmFuc21pc3NpdmVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3QudHJhbnNtaXNzaXZlOwogICAgCQkJY29uc3QgdHJhbnNwYXJlbnRPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3QudHJhbnNwYXJlbnQ7CgogICAgCQkJY3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzVmlldyggY2FtZXJhICk7CgogICAgCQkJaWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuc2V0R2xvYmFsU3RhdGUoIF90aGlzLmNsaXBwaW5nUGxhbmVzLCBjYW1lcmEgKTsKCiAgICAJCQlpZiAoIHZpZXdwb3J0ICkgc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKSApOwoKICAgIAkJCWlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApOwogICAgCQkJaWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7CiAgICAJCQlpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7CgogICAgCQkJLy8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXIKCiAgICAJCQlzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTsKICAgIAkJCXN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApOwogICAgCQkJc3RhdGUuYnVmZmVycy5jb2xvci5zZXRNYXNrKCB0cnVlICk7CgogICAgCQkJc3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIHJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKSB7CgogICAgCQkJY29uc3Qgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIDogbnVsbDsKCiAgICAJCQlpZiAoIG92ZXJyaWRlTWF0ZXJpYWwgIT09IG51bGwgKSB7CgogICAgCQkJCXJldHVybjsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQljdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggMSwgMSwgewogICAgCQkJCQlnZW5lcmF0ZU1pcG1hcHM6IHRydWUsCiAgICAJCQkJCXR5cGU6ICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApICkgPyBIYWxmRmxvYXRUeXBlIDogVW5zaWduZWRCeXRlVHlwZSwKICAgIAkJCQkJbWluRmlsdGVyOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsCiAgICAJCQkJCXNhbXBsZXM6IDQsCiAgICAJCQkJCXN0ZW5jaWxCdWZmZXI6IHN0ZW5jaWwsCiAgICAJCQkJCXJlc29sdmVEZXB0aEJ1ZmZlcjogZmFsc2UsCiAgICAJCQkJCXJlc29sdmVTdGVuY2lsQnVmZmVyOiBmYWxzZSwKICAgIAkJCQkJY29sb3JTcGFjZTogQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlLAogICAgCQkJCX0gKTsKCiAgICAJCQkJLy8gZGVidWcKCiAgICAJCQkJLyoKICAgIAkJCQljb25zdCBnZW9tZXRyeSA9IG5ldyBQbGFuZUdlb21ldHJ5KCk7CiAgICAJCQkJY29uc3QgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgbWFwOiBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LnRleHR1cmUgfSApOwoKICAgIAkJCQljb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApOwogICAgCQkJCXNjZW5lLmFkZCggbWVzaCApOwogICAgCQkJCSovCgogICAgCQkJfQoKICAgIAkJCWNvbnN0IHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdOwoKICAgIAkJCWNvbnN0IGFjdGl2ZVZpZXdwb3J0ID0gY2FtZXJhLnZpZXdwb3J0IHx8IF9jdXJyZW50Vmlld3BvcnQ7CiAgICAJCQl0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuc2V0U2l6ZSggYWN0aXZlVmlld3BvcnQueiAqIF90aGlzLnRyYW5zbWlzc2lvblJlc29sdXRpb25TY2FsZSwgYWN0aXZlVmlld3BvcnQudyAqIF90aGlzLnRyYW5zbWlzc2lvblJlc29sdXRpb25TY2FsZSApOwoKICAgIAkJCS8vCgogICAgCQkJY29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IF90aGlzLmdldFJlbmRlclRhcmdldCgpOwogICAgCQkJY29uc3QgY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gX3RoaXMuZ2V0QWN0aXZlQ3ViZUZhY2UoKTsKICAgIAkJCWNvbnN0IGN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IF90aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7CgogICAgCQkJX3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTsKCiAgICAJCQlfdGhpcy5nZXRDbGVhckNvbG9yKCBfY3VycmVudENsZWFyQ29sb3IgKTsKICAgIAkJCV9jdXJyZW50Q2xlYXJBbHBoYSA9IF90aGlzLmdldENsZWFyQWxwaGEoKTsKICAgIAkJCWlmICggX2N1cnJlbnRDbGVhckFscGhhIDwgMSApIF90aGlzLnNldENsZWFyQ29sb3IoIDB4ZmZmZmZmLCAwLjUgKTsKCiAgICAJCQlfdGhpcy5jbGVhcigpOwoKICAgIAkJCWlmICggX3JlbmRlckJhY2tncm91bmQgKSBiYWNrZ3JvdW5kLnJlbmRlciggc2NlbmUgKTsKCiAgICAJCQkvLyBUdXJuIG9mZiB0aGUgZmVhdHVyZXMgd2hpY2ggY2FuIGFmZmVjdCB0aGUgZnJhZyBjb2xvciBmb3Igb3BhcXVlIG9iamVjdHMgcGFzcy4KICAgIAkJCS8vIE90aGVyd2lzZSB0aGV5IGFyZSBhcHBsaWVkIHR3aWNlIGluIG9wYXF1ZSBvYmplY3RzIHBhc3MgYW5kIHRyYW5zbWlzc2lvbiBvYmplY3RzIHBhc3MuCiAgICAJCQljb25zdCBjdXJyZW50VG9uZU1hcHBpbmcgPSBfdGhpcy50b25lTWFwcGluZzsKICAgIAkJCV90aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZzsKCiAgICAJCQkvLyBSZW1vdmUgdmlld3BvcnQgZnJvbSBjYW1lcmEgdG8gYXZvaWQgbmVzdGVkIHJlbmRlciBjYWxscyByZXNldHRpbmcgdmlld3BvcnQgdG8gaXQgKGUuZyBSZWZsZWN0b3IpLgogICAgCQkJLy8gVHJhbnNtaXNzaW9uIHJlbmRlciBwYXNzIHJlcXVpcmVzIHZpZXdwb3J0IHRvIG1hdGNoIHRoZSB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuCiAgICAJCQljb25zdCBjdXJyZW50Q2FtZXJhVmlld3BvcnQgPSBjYW1lcmEudmlld3BvcnQ7CiAgICAJCQlpZiAoIGNhbWVyYS52aWV3cG9ydCAhPT0gdW5kZWZpbmVkICkgY2FtZXJhLnZpZXdwb3J0ID0gdW5kZWZpbmVkOwoKICAgIAkJCWN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApOwoKICAgIAkJCWlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY2FtZXJhICk7CgogICAgCQkJcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApOwoKICAgIAkJCXRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTsKICAgIAkJCXRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7CgogICAgCQkJaWYgKCBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gZmFsc2UgKSB7IC8vIHNlZSAjMjgxMzEKCiAgICAJCQkJbGV0IHJlbmRlclRhcmdldE5lZWRzVXBkYXRlID0gZmFsc2U7CgogICAgCQkJCWZvciAoIGxldCBpID0gMCwgbCA9IHRyYW5zbWlzc2l2ZU9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCiAgICAJCQkJCWNvbnN0IHJlbmRlckl0ZW0gPSB0cmFuc21pc3NpdmVPYmplY3RzWyBpIF07CgogICAgCQkJCQljb25zdCBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDsKICAgIAkJCQkJY29uc3QgZ2VvbWV0cnkgPSByZW5kZXJJdGVtLmdlb21ldHJ5OwogICAgCQkJCQljb25zdCBtYXRlcmlhbCA9IHJlbmRlckl0ZW0ubWF0ZXJpYWw7CiAgICAJCQkJCWNvbnN0IGdyb3VwID0gcmVuZGVySXRlbS5ncm91cDsKCiAgICAJCQkJCWlmICggbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSAmJiBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKSApIHsKCiAgICAJCQkJCQljb25zdCBjdXJyZW50U2lkZSA9IG1hdGVyaWFsLnNpZGU7CgogICAgCQkJCQkJbWF0ZXJpYWwuc2lkZSA9IEJhY2tTaWRlOwogICAgCQkJCQkJbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCQkJCXJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7CgogICAgCQkJCQkJbWF0ZXJpYWwuc2lkZSA9IGN1cnJlbnRTaWRlOwogICAgCQkJCQkJbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwoKICAgIAkJCQkJCXJlbmRlclRhcmdldE5lZWRzVXBkYXRlID0gdHJ1ZTsKCiAgICAJCQkJCX0KCiAgICAJCQkJfQoKICAgIAkJCQlpZiAoIHJlbmRlclRhcmdldE5lZWRzVXBkYXRlID09PSB0cnVlICkgewoKICAgIAkJCQkJdGV4dHVyZXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApOwogICAgCQkJCQl0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCV90aGlzLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgY3VycmVudEFjdGl2ZUN1YmVGYWNlLCBjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgKTsKCiAgICAJCQlfdGhpcy5zZXRDbGVhckNvbG9yKCBfY3VycmVudENsZWFyQ29sb3IsIF9jdXJyZW50Q2xlYXJBbHBoYSApOwoKICAgIAkJCWlmICggY3VycmVudENhbWVyYVZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSBjdXJyZW50Q2FtZXJhVmlld3BvcnQ7CgogICAgCQkJX3RoaXMudG9uZU1hcHBpbmcgPSBjdXJyZW50VG9uZU1hcHBpbmc7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiByZW5kZXJPYmplY3RzKCByZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhICkgewoKICAgIAkJCWNvbnN0IG92ZXJyaWRlTWF0ZXJpYWwgPSBzY2VuZS5pc1NjZW5lID09PSB0cnVlID8gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCA6IG51bGw7CgogICAgCQkJZm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKICAgIAkJCQljb25zdCByZW5kZXJJdGVtID0gcmVuZGVyTGlzdFsgaSBdOwoKICAgIAkJCQljb25zdCBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDsKICAgIAkJCQljb25zdCBnZW9tZXRyeSA9IHJlbmRlckl0ZW0uZ2VvbWV0cnk7CiAgICAJCQkJY29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwOwogICAgCQkJCWxldCBtYXRlcmlhbCA9IHJlbmRlckl0ZW0ubWF0ZXJpYWw7CgogICAgCQkJCWlmICggbWF0ZXJpYWwuYWxsb3dPdmVycmlkZSA9PT0gdHJ1ZSAmJiBvdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkgewoKICAgIAkJCQkJbWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsOwoKICAgIAkJCQl9CgogICAgCQkJCWlmICggb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7CgogICAgCQkJCQlyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfQoKICAgIAkJZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKSB7CgogICAgCQkJb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApOwoKICAgIAkJCW9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7CiAgICAJCQlvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApOwoKICAgIAkJCW1hdGVyaWFsLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG9iamVjdCwgZ3JvdXAgKTsKCiAgICAJCQlpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgJiYgbWF0ZXJpYWwuZm9yY2VTaW5nbGVQYXNzID09PSBmYWxzZSApIHsKCiAgICAJCQkJbWF0ZXJpYWwuc2lkZSA9IEJhY2tTaWRlOwogICAgCQkJCW1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIAkJCQlfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApOwoKICAgIAkJCQltYXRlcmlhbC5zaWRlID0gRnJvbnRTaWRlOwogICAgCQkJCW1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIAkJCQlfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApOwoKICAgIAkJCQltYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQlfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApOwoKICAgIAkJCX0KCiAgICAJCQlvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICkgewoKICAgIAkJCWlmICggc2NlbmUuaXNTY2VuZSAhPT0gdHJ1ZSApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHNjZW5lIGNvdWxkIGJlIGEgTWVzaCwgTGluZSwgUG9pbnRzLCAuLi4KCiAgICAJCQljb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTsKCiAgICAJCQljb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzOwogICAgCQkJY29uc3Qgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTsKCiAgICAJCQljb25zdCBsaWdodHNTdGF0ZVZlcnNpb24gPSBsaWdodHMuc3RhdGUudmVyc2lvbjsKCiAgICAJCQljb25zdCBwYXJhbWV0ZXJzID0gcHJvZ3JhbUNhY2hlLmdldFBhcmFtZXRlcnMoIG1hdGVyaWFsLCBsaWdodHMuc3RhdGUsIHNoYWRvd3NBcnJheSwgc2NlbmUsIG9iamVjdCApOwogICAgCQkJY29uc3QgcHJvZ3JhbUNhY2hlS2V5ID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1DYWNoZUtleSggcGFyYW1ldGVycyApOwoKICAgIAkJCWxldCBwcm9ncmFtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtczsKCiAgICAJCQkvLyBhbHdheXMgdXBkYXRlIGVudmlyb25tZW50IGFuZCBmb2cgLSBjaGFuZ2luZyB0aGVzZSB0cmlnZ2VyIGFuIGdldFByb2dyYW0gY2FsbCwgYnV0IGl0J3MgcG9zc2libGUgdGhhdCB0aGUgcHJvZ3JhbSBkb2Vzbid0IGNoYW5nZQoKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5lbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMuZm9nID0gc2NlbmUuZm9nOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IG1hdGVyaWFsUHJvcGVydGllcy5lbnZpcm9ubWVudCApOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcFJvdGF0aW9uID0gKCBtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgIT09IG51bGwgJiYgbWF0ZXJpYWwuZW52TWFwID09PSBudWxsICkgPyBzY2VuZS5lbnZpcm9ubWVudFJvdGF0aW9uIDogbWF0ZXJpYWwuZW52TWFwUm90YXRpb247CgogICAgCQkJaWYgKCBwcm9ncmFtcyA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkvLyBuZXcgbWF0ZXJpYWwKCiAgICAJCQkJbWF0ZXJpYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApOwoKICAgIAkJCQlwcm9ncmFtcyA9IG5ldyBNYXAoKTsKICAgIAkJCQltYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXMgPSBwcm9ncmFtczsKCiAgICAJCQl9CgogICAgCQkJbGV0IHByb2dyYW0gPSBwcm9ncmFtcy5nZXQoIHByb2dyYW1DYWNoZUtleSApOwoKICAgIAkJCWlmICggcHJvZ3JhbSAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkvLyBlYXJseSBvdXQgaWYgcHJvZ3JhbSBhbmQgbGlnaHQgc3RhdGUgaXMgaWRlbnRpY2FsCgogICAgCQkJCWlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtID09PSBwcm9ncmFtICYmIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gPT09IGxpZ2h0c1N0YXRlVmVyc2lvbiApIHsKCiAgICAJCQkJCXVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTsKCiAgICAJCQkJCXJldHVybiBwcm9ncmFtOwoKICAgIAkJCQl9CgogICAgCQkJfSBlbHNlIHsKCiAgICAJCQkJcGFyYW1ldGVycy51bmlmb3JtcyA9IHByb2dyYW1DYWNoZS5nZXRVbmlmb3JtcyggbWF0ZXJpYWwgKTsKCiAgICAJCQkJbWF0ZXJpYWwub25CZWZvcmVDb21waWxlKCBwYXJhbWV0ZXJzLCBfdGhpcyApOwoKICAgIAkJCQlwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBwYXJhbWV0ZXJzLCBwcm9ncmFtQ2FjaGVLZXkgKTsKICAgIAkJCQlwcm9ncmFtcy5zZXQoIHByb2dyYW1DYWNoZUtleSwgcHJvZ3JhbSApOwoKICAgIAkJCQltYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXMgPSBwYXJhbWV0ZXJzLnVuaWZvcm1zOwoKICAgIAkJCX0KCiAgICAJCQljb25zdCB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtczsKCiAgICAJCQlpZiAoICggISBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmICEgbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCApIHx8IG1hdGVyaWFsLmNsaXBwaW5nID09PSB0cnVlICkgewoKICAgIAkJCQl1bmlmb3Jtcy5jbGlwcGluZ1BsYW5lcyA9IGNsaXBwaW5nLnVuaWZvcm07CgogICAgCQkJfQoKICAgIAkJCXVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTsKCiAgICAJCQkvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yCgogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzID0gbWF0ZXJpYWxOZWVkc0xpZ2h0cyggbWF0ZXJpYWwgKTsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gPSBsaWdodHNTdGF0ZVZlcnNpb247CgogICAgCQkJaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7CgogICAgCQkJCS8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZQoKICAgIAkJCQl1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50OwogICAgCQkJCXVuaWZvcm1zLmxpZ2h0UHJvYmUudmFsdWUgPSBsaWdodHMuc3RhdGUucHJvYmU7CiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWw7CiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3c7CiAgICAJCQkJdW5pZm9ybXMuc3BvdExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90OwogICAgCQkJCXVuaWZvcm1zLnNwb3RMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvdzsKICAgIAkJCQl1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTsKICAgIAkJCQl1bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzE7CiAgICAJCQkJdW5pZm9ybXMubHRjXzIudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWFMVEMyOwogICAgCQkJCXVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50OwogICAgCQkJCXVuaWZvcm1zLnBvaW50TGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93OwogICAgCQkJCXVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuaGVtaTsKCiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXA7CiAgICAJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7CiAgICAJCQkJdW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwOwogICAgCQkJCXVuaWZvcm1zLnNwb3RMaWdodE1hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90TGlnaHRNYXRyaXg7CiAgICAJCQkJdW5pZm9ybXMuc3BvdExpZ2h0TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RMaWdodE1hcDsKICAgIAkJCQl1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDsKICAgIAkJCQl1bmlmb3Jtcy5wb2ludFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hdHJpeDsKICAgIAkJCQkvLyBUT0RPIChhYmVsbmF0aW9uKTogYWRkIGFyZWEgbGlnaHRzIHNoYWRvdyBpbmZvIHRvIHVuaWZvcm1zCgogICAgCQkJfQoKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID0gbnVsbDsKCiAgICAJCQlyZXR1cm4gcHJvZ3JhbTsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIGdldFVuaWZvcm1MaXN0KCBtYXRlcmlhbFByb3BlcnRpZXMgKSB7CgogICAgCQkJaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID09PSBudWxsICkgewoKICAgIAkJCQljb25zdCBwcm9nVW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW0uZ2V0VW5pZm9ybXMoKTsKICAgIAkJCQltYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID0gV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUoIHByb2dVbmlmb3Jtcy5zZXEsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyApOwoKICAgIAkJCX0KCiAgICAJCQlyZXR1cm4gbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdDsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIHVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKSB7CgogICAgCQkJY29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7CgogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLm91dHB1dENvbG9yU3BhY2UgPSBwYXJhbWV0ZXJzLm91dHB1dENvbG9yU3BhY2U7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmcgPSBwYXJhbWV0ZXJzLmJhdGNoaW5nOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nQ29sb3IgPSBwYXJhbWV0ZXJzLmJhdGNoaW5nQ29sb3I7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9IHBhcmFtZXRlcnMuaW5zdGFuY2luZzsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nQ29sb3IgPSBwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvcjsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nTW9ycGggPSBwYXJhbWV0ZXJzLmluc3RhbmNpbmdNb3JwaDsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9IHBhcmFtZXRlcnMuc2tpbm5pbmc7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzID0gcGFyYW1ldGVycy5tb3JwaFRhcmdldHM7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMubW9ycGhOb3JtYWxzID0gcGFyYW1ldGVycy5tb3JwaE5vcm1hbHM7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMubW9ycGhDb2xvcnMgPSBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0c0NvdW50ID0gcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudDsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyA9IHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXM7CiAgICAJCQltYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleEFscGhhcyA9IHBhcmFtZXRlcnMudmVydGV4QWxwaGFzOwogICAgCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleFRhbmdlbnRzID0gcGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50czsKICAgIAkJCW1hdGVyaWFsUHJvcGVydGllcy50b25lTWFwcGluZyA9IHBhcmFtZXRlcnMudG9uZU1hcHBpbmc7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBzZXRQcm9ncmFtKCBjYW1lcmEsIHNjZW5lLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCApIHsKCiAgICAJCQlpZiAoIHNjZW5lLmlzU2NlbmUgIT09IHRydWUgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyBzY2VuZSBjb3VsZCBiZSBhIE1lc2gsIExpbmUsIFBvaW50cywgLi4uCgogICAgCQkJdGV4dHVyZXMucmVzZXRUZXh0dXJlVW5pdHMoKTsKCiAgICAJCQljb25zdCBmb2cgPSBzY2VuZS5mb2c7CiAgICAJCQljb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7CiAgICAJCQljb25zdCBjb2xvclNwYWNlID0gKCBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApID8gX3RoaXMub3V0cHV0Q29sb3JTcGFjZSA6ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSA/IF9jdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuY29sb3JTcGFjZSA6IExpbmVhclNSR0JDb2xvclNwYWNlICk7CiAgICAJCQljb25zdCBlbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBlbnZpcm9ubWVudCApOwogICAgCQkJY29uc3QgdmVydGV4QWxwaGFzID0gbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNDsKICAgIAkJCWNvbnN0IHZlcnRleFRhbmdlbnRzID0gISEgZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ICYmICggISEgbWF0ZXJpYWwubm9ybWFsTWFwIHx8IG1hdGVyaWFsLmFuaXNvdHJvcHkgPiAwICk7CiAgICAJCQljb25zdCBtb3JwaFRhcmdldHMgPSAhISBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247CiAgICAJCQljb25zdCBtb3JwaE5vcm1hbHMgPSAhISBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsOwogICAgCQkJY29uc3QgbW9ycGhDb2xvcnMgPSAhISBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7CgogICAgCQkJbGV0IHRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZzsKCiAgICAJCQlpZiAoIG1hdGVyaWFsLnRvbmVNYXBwZWQgKSB7CgogICAgCQkJCWlmICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgX2N1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJCXRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJY29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7CiAgICAJCQljb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDsKCiAgICAJCQljb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTsKICAgIAkJCWNvbnN0IGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7CgogICAgCQkJaWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgewoKICAgIAkJCQlpZiAoIF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSB8fCBjYW1lcmEgIT09IF9jdXJyZW50Q2FtZXJhICkgewoKICAgIAkJCQkJY29uc3QgdXNlQ2FjaGUgPQogICAgCQkJCQkJY2FtZXJhID09PSBfY3VycmVudENhbWVyYSAmJgogICAgCQkJCQkJbWF0ZXJpYWwuaWQgPT09IF9jdXJyZW50TWF0ZXJpYWxJZDsKCiAgICAJCQkJCS8vIHdlIG1pZ2h0IHdhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggc29tZSBDbGlwcGluZ0dyb3VwCiAgICAJCQkJCS8vIG9iamVjdCBpbnN0ZWFkIG9mIHRoZSBtYXRlcmlhbCwgb25jZSBpdCBiZWNvbWVzIGZlYXNpYmxlCiAgICAJCQkJCS8vICgjODQ2NSwgIzgzNzkpCiAgICAJCQkJCWNsaXBwaW5nLnNldFN0YXRlKCBtYXRlcmlhbCwgY2FtZXJhLCB1c2VDYWNoZSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCS8vCgogICAgCQkJbGV0IG5lZWRzUHJvZ3JhbUNoYW5nZSA9IGZhbHNlOwoKICAgIAkJCWlmICggbWF0ZXJpYWwudmVyc2lvbiA9PT0gbWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiApIHsKCiAgICAJCQkJaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgJiYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHMuc3RhdGUudmVyc2lvbiApICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm91dHB1dENvbG9yU3BhY2UgIT09IGNvbG9yU3BhY2UgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmcgPT09IGZhbHNlICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggISBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmcgPT09IHRydWUgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmdDb2xvciA9PT0gdHJ1ZSAmJiBvYmplY3QuY29sb3JUZXh0dXJlID09PSBudWxsICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nQ29sb3IgPT09IGZhbHNlICYmIG9iamVjdC5jb2xvclRleHR1cmUgIT09IG51bGwgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSBmYWxzZSApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoICEgb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gZmFsc2UgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCAhIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdDb2xvciA9PT0gdHJ1ZSAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciA9PT0gbnVsbCApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdDb2xvciA9PT0gZmFsc2UgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nTW9ycGggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSA9PT0gbnVsbCApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmdNb3JwaCA9PT0gZmFsc2UgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXAgIT09IGVudk1hcCApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IHVuZGVmaW5lZCAmJgogICAgCQkJCQkoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gY2xpcHBpbmcubnVtUGxhbmVzIHx8CiAgICAJCQkJCW1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gIT09IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbiApICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleEFscGhhcyAhPT0gdmVydGV4QWxwaGFzICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleFRhbmdlbnRzICE9PSB2ZXJ0ZXhUYW5nZW50cyApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHMgIT09IG1vcnBoVGFyZ2V0cyApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaE5vcm1hbHMgIT09IG1vcnBoTm9ybWFscyApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaENvbG9ycyAhPT0gbW9ycGhDb2xvcnMgKSB7CgogICAgCQkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudG9uZU1hcHBpbmcgIT09IHRvbmVNYXBwaW5nICkgewoKICAgIAkJCQkJbmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTsKCiAgICAJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0c0NvdW50ICE9PSBtb3JwaFRhcmdldHNDb3VudCApIHsKCiAgICAJCQkJCW5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7CgogICAgCQkJCX0KCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQluZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlOwogICAgCQkJCW1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gPSBtYXRlcmlhbC52ZXJzaW9uOwoKICAgIAkJCX0KCiAgICAJCQkvLwoKICAgIAkJCWxldCBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtOwoKICAgIAkJCWlmICggbmVlZHNQcm9ncmFtQ2hhbmdlID09PSB0cnVlICkgewoKICAgIAkJCQlwcm9ncmFtID0gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTsKCiAgICAJCQl9CgogICAgCQkJbGV0IHJlZnJlc2hQcm9ncmFtID0gZmFsc2U7CiAgICAJCQlsZXQgcmVmcmVzaE1hdGVyaWFsID0gZmFsc2U7CiAgICAJCQlsZXQgcmVmcmVzaExpZ2h0cyA9IGZhbHNlOwoKICAgIAkJCWNvbnN0IHBfdW5pZm9ybXMgPSBwcm9ncmFtLmdldFVuaWZvcm1zKCksCiAgICAJCQkJbV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtczsKCiAgICAJCQlpZiAoIHN0YXRlLnVzZVByb2dyYW0oIHByb2dyYW0ucHJvZ3JhbSApICkgewoKICAgIAkJCQlyZWZyZXNoUHJvZ3JhbSA9IHRydWU7CiAgICAJCQkJcmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTsKICAgIAkJCQlyZWZyZXNoTGlnaHRzID0gdHJ1ZTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBtYXRlcmlhbC5pZCAhPT0gX2N1cnJlbnRNYXRlcmlhbElkICkgewoKICAgIAkJCQlfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDsKCiAgICAJCQkJcmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCByZWZyZXNoUHJvZ3JhbSB8fCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkgewoKICAgIAkJCQkvLyBjb21tb24gY2FtZXJhIHVuaWZvcm1zCgogICAgCQkJCWNvbnN0IHJldmVyc2VEZXB0aEJ1ZmZlciA9IHN0YXRlLmJ1ZmZlcnMuZGVwdGguZ2V0UmV2ZXJzZWQoKTsKCiAgICAJCQkJaWYgKCByZXZlcnNlRGVwdGhCdWZmZXIgKSB7CgogICAgCQkJCQlfY3VycmVudFByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTsKCiAgICAJCQkJCXRvTm9ybWFsaXplZFByb2plY3Rpb25NYXRyaXgoIF9jdXJyZW50UHJvamVjdGlvbk1hdHJpeCApOwogICAgCQkJCQl0b1JldmVyc2VkUHJvamVjdGlvbk1hdHJpeCggX2N1cnJlbnRQcm9qZWN0aW9uTWF0cml4ICk7CgogICAgCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdwcm9qZWN0aW9uTWF0cml4JywgX2N1cnJlbnRQcm9qZWN0aW9uTWF0cml4ICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdwcm9qZWN0aW9uTWF0cml4JywgY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTsKCiAgICAJCQkJfQoKICAgIAkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApOwoKICAgIAkJCQljb25zdCB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247CgogICAgCQkJCWlmICggdUNhbVBvcyAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJdUNhbVBvcy5zZXRWYWx1ZSggX2dsLCBfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApIHsKCiAgICAJCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2xvZ0RlcHRoQnVmRkMnLAogICAgCQkJCQkJMi4wIC8gKCBNYXRoLmxvZyggY2FtZXJhLmZhciArIDEuMCApIC8gTWF0aC5MTjIgKSApOwoKICAgIAkJCQl9CgogICAgCQkJCS8vIGNvbnNpZGVyIG1vdmluZyBpc09ydGhvZ3JhcGhpYyB0byBVbmlmb3JtTGliIGFuZCBXZWJHTE1hdGVyaWFscywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yNjQ2NyNpc3N1ZWNvbW1lbnQtMTY0NTE4NTA2NwoKICAgIAkJCQlpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHwKICAgIAkJCQkJbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8CiAgICAJCQkJCW1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fAogICAgCQkJCQltYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsIHx8CiAgICAJCQkJCW1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwKICAgIAkJCQkJbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHsKCiAgICAJCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2lzT3J0aG9ncmFwaGljJywgY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhID09PSB0cnVlICk7CgogICAgCQkJCX0KCiAgICAJCQkJaWYgKCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkgewoKICAgIAkJCQkJX2N1cnJlbnRDYW1lcmEgPSBjYW1lcmE7CgogICAgCQkJCQkvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZQogICAgCQkJCQkvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlbgogICAgCQkJCQkvLyB0aGUgbmV4dCBtYXRlcmlhbCB0aGF0IGRvZXMgZ2V0cyBhY3RpdmF0ZWQ6CgogICAgCQkJCQlyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlOwkJLy8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlCiAgICAJCQkJCXJlZnJlc2hMaWdodHMgPSB0cnVlOwkJLy8gcmVtYWlucyBzZXQgdW50aWwgdXBkYXRlIGRvbmUKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQkvLyBza2lubmluZyBhbmQgbW9ycGggdGFyZ2V0IHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZQogICAgCQkJLy8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSBhbmQgbW9ycGggdGV4dHVyZSBtdXN0IGdvIGJlZm9yZSBvdGhlciB0ZXh0dXJlcwogICAgCQkJLy8gb3RoZXJ3aXNlIHRleHR1cmVzIHVzZWQgZm9yIHNraW5uaW5nIGFuZCBtb3JwaGluZyBjYW4gdGFrZSBvdmVyIHRleHR1cmUgdW5pdHMgcmVzZXJ2ZWQgZm9yIG90aGVyIG1hdGVyaWFsIHRleHR1cmVzCgogICAgCQkJaWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHsKCiAgICAJCQkJcF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4JyApOwogICAgCQkJCXBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7CgogICAgCQkJCWNvbnN0IHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uOwoKICAgIAkJCQlpZiAoIHNrZWxldG9uICkgewoKICAgIAkJCQkJaWYgKCBza2VsZXRvbi5ib25lVGV4dHVyZSA9PT0gbnVsbCApIHNrZWxldG9uLmNvbXB1dGVCb25lVGV4dHVyZSgpOwoKICAgIAkJCQkJcF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYm9uZVRleHR1cmUnLCBza2VsZXRvbi5ib25lVGV4dHVyZSwgdGV4dHVyZXMgKTsKCiAgICAJCQkJfQoKICAgIAkJCX0KCiAgICAJCQlpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICkgewoKICAgIAkJCQlwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JhdGNoaW5nVGV4dHVyZScgKTsKICAgIAkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ1RleHR1cmUnLCBvYmplY3QuX21hdHJpY2VzVGV4dHVyZSwgdGV4dHVyZXMgKTsKCiAgICAJCQkJcF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiYXRjaGluZ0lkVGV4dHVyZScgKTsKICAgIAkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ0lkVGV4dHVyZScsIG9iamVjdC5faW5kaXJlY3RUZXh0dXJlLCB0ZXh0dXJlcyApOwoKICAgIAkJCQlwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JhdGNoaW5nQ29sb3JUZXh0dXJlJyApOwogICAgCQkJCWlmICggb2JqZWN0Ll9jb2xvcnNUZXh0dXJlICE9PSBudWxsICkgewoKICAgIAkJCQkJcF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYmF0Y2hpbmdDb2xvclRleHR1cmUnLCBvYmplY3QuX2NvbG9yc1RleHR1cmUsIHRleHR1cmVzICk7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJY29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzOwoKICAgIAkJCWlmICggbW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgfHwgbW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkIHx8ICggbW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQgKSApIHsKCiAgICAJCQkJbW9ycGh0YXJnZXRzLnVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSApOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIHJlZnJlc2hNYXRlcmlhbCB8fCBtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyAhPT0gb2JqZWN0LnJlY2VpdmVTaGFkb3cgKSB7CgogICAgCQkJCW1hdGVyaWFsUHJvcGVydGllcy5yZWNlaXZlU2hhZG93ID0gb2JqZWN0LnJlY2VpdmVTaGFkb3c7CiAgICAJCQkJcF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7CgogICAgCQkJfQoKICAgIAkJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yNDQ2NyNpc3N1ZWNvbW1lbnQtMTIwOTAzMTUxMgoKICAgIAkJCWlmICggbWF0ZXJpYWwuaXNNZXNoR291cmF1ZE1hdGVyaWFsICYmIG1hdGVyaWFsLmVudk1hcCAhPT0gbnVsbCApIHsKCiAgICAJCQkJbV91bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBlbnZNYXA7CgogICAgCQkJCW1fdW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0xIDogMTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICYmIG1hdGVyaWFsLmVudk1hcCA9PT0gbnVsbCAmJiBzY2VuZS5lbnZpcm9ubWVudCAhPT0gbnVsbCApIHsKCiAgICAJCQkJbV91bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBzY2VuZS5lbnZpcm9ubWVudEludGVuc2l0eTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCByZWZyZXNoTWF0ZXJpYWwgKSB7CgogICAgCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nRXhwb3N1cmUnLCBfdGhpcy50b25lTWFwcGluZ0V4cG9zdXJlICk7CgogICAgCQkJCWlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkgewoKICAgIAkJCQkJLy8gdGhlIGN1cnJlbnQgbWF0ZXJpYWwgcmVxdWlyZXMgbGlnaHRpbmcgaW5mbwoKICAgIAkJCQkJLy8gbm90ZTogYWxsIGxpZ2h0aW5nIHVuaWZvcm1zIGFyZSBhbHdheXMgc2V0IGNvcnJlY3RseQogICAgCQkJCQkvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyCiAgICAJCQkJCS8vIHZhbHVlcwogICAgCQkJCQkvLwogICAgCQkJCQkvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0CiAgICAJCQkJCS8vIHRoZSBHTCBzdGF0ZSB3aGVuIHJlcXVpcmVkCgogICAgCQkJCQltYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggbV91bmlmb3JtcywgcmVmcmVzaExpZ2h0cyApOwoKICAgIAkJCQl9CgogICAgCQkJCS8vIHJlZnJlc2ggdW5pZm9ybXMgY29tbW9uIHRvIHNldmVyYWwgbWF0ZXJpYWxzCgogICAgCQkJCWlmICggZm9nICYmIG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSApIHsKCiAgICAJCQkJCW1hdGVyaWFscy5yZWZyZXNoRm9nVW5pZm9ybXMoIG1fdW5pZm9ybXMsIGZvZyApOwoKICAgIAkJCQl9CgogICAgCQkJCW1hdGVyaWFscy5yZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggbV91bmlmb3JtcywgbWF0ZXJpYWwsIF9waXhlbFJhdGlvLCBfaGVpZ2h0LCBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSApOwoKICAgIAkJCQlXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBnZXRVbmlmb3JtTGlzdCggbWF0ZXJpYWxQcm9wZXJ0aWVzICksIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7CgogICAgCQkJfQoKICAgIAkJCWlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPT09IHRydWUgKSB7CgogICAgCQkJCVdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIGdldFVuaWZvcm1MaXN0KCBtYXRlcmlhbFByb3BlcnRpZXMgKSwgbV91bmlmb3JtcywgdGV4dHVyZXMgKTsKICAgIAkJCQltYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsKCiAgICAJCQl9CgogICAgCQkJaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkgewoKICAgIAkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdjZW50ZXInLCBvYmplY3QuY2VudGVyICk7CgogICAgCQkJfQoKICAgIAkJCS8vIGNvbW1vbiBtYXRyaWNlcwoKICAgIAkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsVmlld01hdHJpeCcsIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTsKICAgIAkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTsKICAgIAkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsTWF0cml4Jywgb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgogICAgCQkJLy8gVUJPcwoKICAgIAkJCWlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkgewoKICAgIAkJCQljb25zdCBncm91cHMgPSBtYXRlcmlhbC51bmlmb3Jtc0dyb3VwczsKCiAgICAJCQkJZm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgogICAgCQkJCQljb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdOwoKICAgIAkJCQkJdW5pZm9ybXNHcm91cHMudXBkYXRlKCBncm91cCwgcHJvZ3JhbSApOwogICAgCQkJCQl1bmlmb3Jtc0dyb3Vwcy5iaW5kKCBncm91cCwgcHJvZ3JhbSApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCXJldHVybiBwcm9ncmFtOwoKICAgIAkJfQoKICAgIAkJLy8gSWYgdW5pZm9ybXMgYXJlIG1hcmtlZCBhcyBjbGVhbiwgdGhleSBkb24ndCBuZWVkIHRvIGJlIGxvYWRlZCB0byB0aGUgR1BVLgoKICAgIAkJZnVuY3Rpb24gbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIHVuaWZvcm1zLCB2YWx1ZSApIHsKCiAgICAJCQl1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZSA9IHZhbHVlOwogICAgCQkJdW5pZm9ybXMubGlnaHRQcm9iZS5uZWVkc1VwZGF0ZSA9IHZhbHVlOwoKICAgIAkJCXVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7CiAgICAJCQl1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlOwogICAgCQkJdW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTsKICAgIAkJCXVuaWZvcm1zLnBvaW50TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7CiAgICAJCQl1bmlmb3Jtcy5zcG90TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7CiAgICAJCQl1bmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7CiAgICAJCQl1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlOwogICAgCQkJdW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlOwoKICAgIAkJfQoKICAgIAkJZnVuY3Rpb24gbWF0ZXJpYWxOZWVkc0xpZ2h0cyggbWF0ZXJpYWwgKSB7CgogICAgCQkJcmV0dXJuIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fAogICAgCQkJCW1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fAogICAgCQkJCSggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC5saWdodHMgPT09IHRydWUgKTsKCiAgICAJCX0KCiAgICAJCS8qKgogICAgCQkgKiBSZXR1cm5zIHRoZSBhY3RpdmUgY3ViZSBmYWNlLgogICAgCQkgKgogICAgCQkgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhY3RpdmUgY3ViZSBmYWNlLgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRBY3RpdmVDdWJlRmFjZSA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlyZXR1cm4gX2N1cnJlbnRBY3RpdmVDdWJlRmFjZTsKCiAgICAJCX07CgogICAgCQkvKioKICAgIAkJICogUmV0dXJucyB0aGUgYWN0aXZlIG1pcG1hcCBsZXZlbC4KICAgIAkJICoKICAgIAkJICogQHJldHVybiB7bnVtYmVyfSBUaGUgYWN0aXZlIG1pcG1hcCBsZXZlbC4KICAgIAkJICovCiAgICAJCXRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWw7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIFJldHVybnMgdGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0LgogICAgCQkgKgogICAgCQkgKiBAcmV0dXJuIHs/V2ViR0xSZW5kZXJUYXJnZXR9IFRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldC4gUmV0dXJucyBgbnVsbGAgaWYgbm8gcmVuZGVyIHRhcmdldAogICAgCQkgKiBpcyBjdXJyZW50bHkgc2V0LgogICAgCQkgKi8KICAgIAkJdGhpcy5nZXRSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiAoKSB7CgogICAgCQkJcmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0OwoKICAgIAkJfTsKCiAgICAJCXRoaXMuc2V0UmVuZGVyVGFyZ2V0VGV4dHVyZXMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgY29sb3JUZXh0dXJlLCBkZXB0aFRleHR1cmUgKSB7CgogICAgCQkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPSByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyID09PSBmYWxzZTsKICAgIAkJCWlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID09PSBmYWxzZSApIHsKCiAgICAJCQkJLy8gVGhlIG11bHRpc2FtcGxlX3JlbmRlcl90b190ZXh0dXJlIGV4dGVuc2lvbiBkb2Vzbid0IHdvcmsgcHJvcGVybHkgaWYgdGhlcmUKICAgIAkJCQkvLyBhcmUgbWlkZnJhbWUgZmx1c2hlcyBhbmQgYW4gZXh0ZXJuYWwgZGVwdGggYnVmZmVyLiBEaXNhYmxlIHVzZSBvZiB0aGUgZXh0ZW5zaW9uLgogICAgCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VSZW5kZXJUb1RleHR1cmUgPSBmYWxzZTsKCiAgICAJCQl9CgogICAgCQkJcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSBjb2xvclRleHR1cmU7CiAgICAJCQlwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID8gdW5kZWZpbmVkIDogZGVwdGhUZXh0dXJlOwoKICAgIAkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzID0gdHJ1ZTsKCiAgICAJCX07CgogICAgCQl0aGlzLnNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGRlZmF1bHRGcmFtZWJ1ZmZlciApIHsKCiAgICAJCQljb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApOwogICAgCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBkZWZhdWx0RnJhbWVidWZmZXI7CiAgICAJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlRGVmYXVsdEZyYW1lYnVmZmVyID0gZGVmYXVsdEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQ7CgogICAgCQl9OwoKICAgIAkJY29uc3QgX3NjcmF0Y2hGcmFtZUJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwoKICAgIAkJLyoqCiAgICAJCSAqIFNldHMgdGhlIGFjdGl2ZSByZW5kZXJ0YXJnZXQuCiAgICAJCSAqCiAgICAJCSAqIEBwYXJhbSB7P1dlYkdMUmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSBUaGUgcmVuZGVyIHRhcmdldCB0byBzZXQuIFdoZW4gYG51bGxgIGlzIGdpdmVuLAogICAgCQkgKiB0aGUgY2FudmFzIGlzIHNldCBhcyB0aGUgYWN0aXZlIHJlbmRlciB0YXJnZXQgaW5zdGVhZC4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVDdWJlRmFjZT0wXSAtIFRoZSBhY3RpdmUgY3ViZSBmYWNlIHdoZW4gdXNpbmcgYSBjdWJlIHJlbmRlciB0YXJnZXQuCiAgICAJCSAqIEluZGljYXRlcyB0aGUgeiBsYXllciB0byByZW5kZXIgaW4gdG8gd2hlbiB1c2luZyAzRCBvciBhcnJheSByZW5kZXIgdGFyZ2V0cy4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVNaXBtYXBMZXZlbD0wXSAtIFRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLgogICAgCQkgKi8KICAgIAkJdGhpcy5zZXRSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UgPSAwLCBhY3RpdmVNaXBtYXBMZXZlbCA9IDAgKSB7CgogICAgCQkJX2N1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7CiAgICAJCQlfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gYWN0aXZlQ3ViZUZhY2U7CiAgICAJCQlfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7CgogICAgCQkJbGV0IHVzZURlZmF1bHRGcmFtZWJ1ZmZlciA9IHRydWU7CiAgICAJCQlsZXQgZnJhbWVidWZmZXIgPSBudWxsOwogICAgCQkJbGV0IGlzQ3ViZSA9IGZhbHNlOwogICAgCQkJbGV0IGlzUmVuZGVyVGFyZ2V0M0QgPSBmYWxzZTsKCiAgICAJCQlpZiAoIHJlbmRlclRhcmdldCApIHsKCiAgICAJCQkJY29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCQkJaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlRGVmYXVsdEZyYW1lYnVmZmVyICE9PSB1bmRlZmluZWQgKSB7CgogICAgCQkJCQkvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZWJpbmQgdGhlIGZyYW1lYnVmZmVyLgogICAgCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApOwogICAgCQkJCQl1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBmYWxzZTsKCiAgICAJCQkJfSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJCXRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTsKCiAgICAJCQkJfSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7CgogICAgCQkJCQkvLyBDb2xvciBhbmQgZGVwdGggdGV4dHVyZSBtdXN0IGJlIHJlYm91bmQgaW4gb3JkZXIgZm9yIHRoZSBzd2FwY2hhaW4gdG8gdXBkYXRlLgogICAgCQkJCQl0ZXh0dXJlcy5yZWJpbmRUZXh0dXJlcyggcmVuZGVyVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApOwoKICAgIAkJCQl9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7CgogICAgCQkJCQkvLyBjaGVjayBpZiB0aGUgZGVwdGggdGV4dHVyZSBpcyBhbHJlYWR5IGJvdW5kIHRvIHRoZSBmcmFtZSBidWZmZXIgYW5kIHRoYXQgaXQncyBiZWVuIGluaXRpYWxpemVkCiAgICAJCQkJCWNvbnN0IGRlcHRoVGV4dHVyZSA9IHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmU7CiAgICAJCQkJCWlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2JvdW5kRGVwdGhUZXh0dXJlICE9PSBkZXB0aFRleHR1cmUgKSB7CgogICAgCQkJCQkJLy8gY2hlY2sgaWYgdGhlIGRlcHRoIHRleHR1cmUgaXMgY29tcGF0aWJsZQogICAgCQkJCQkJaWYgKAogICAgCQkJCQkJCWRlcHRoVGV4dHVyZSAhPT0gbnVsbCAmJgogICAgCQkJCQkJCXByb3BlcnRpZXMuaGFzKCBkZXB0aFRleHR1cmUgKSAmJgogICAgCQkJCQkJCSggcmVuZGVyVGFyZ2V0LndpZHRoICE9PSBkZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggfHwgcmVuZGVyVGFyZ2V0LmhlaWdodCAhPT0gZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCApCiAgICAJCQkJCQkpIHsKCiAgICAJCQkJCQkJdGhyb3cgbmV3IEVycm9yKCAnV2ViR0xSZW5kZXJUYXJnZXQ6IEF0dGFjaGVkIERlcHRoVGV4dHVyZSBpcyBpbml0aWFsaXplZCB0byB0aGUgaW5jb3JyZWN0IHNpemUuJyApOwoKICAgIAkJCQkJCX0KCiAgICAJCQkJCQkvLyBTd2FwIHRoZSBkZXB0aCBidWZmZXIgdG8gdGhlIGN1cnJlbnRseSBhdHRhY2hlZCBvbmUKICAgIAkJCQkJCXRleHR1cmVzLnNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJCWNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTsKCiAgICAJCQkJaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHsKCiAgICAJCQkJCWlzUmVuZGVyVGFyZ2V0M0QgPSB0cnVlOwoKICAgIAkJCQl9CgogICAgCQkJCWNvbnN0IF9fd2ViZ2xGcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7CgogICAgCQkJCWlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkgewoKICAgIAkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF0gKSApIHsKCiAgICAJCQkJCQlmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXVsgYWN0aXZlTWlwbWFwTGV2ZWwgXTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF07CgogICAgCQkJCQl9CgogICAgCQkJCQlpc0N1YmUgPSB0cnVlOwoKICAgIAkJCQl9IGVsc2UgaWYgKCAoIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApICYmIHRleHR1cmVzLnVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkgewoKICAgIAkJCQkJZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyOwoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXIgKSApIHsKCiAgICAJCQkJCQlmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlTWlwbWFwTGV2ZWwgXTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXI7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQkJX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCByZW5kZXJUYXJnZXQudmlld3BvcnQgKTsKICAgIAkJCQlfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTsKICAgIAkJCQlfY3VycmVudFNjaXNzb3JUZXN0ID0gcmVuZGVyVGFyZ2V0LnNjaXNzb3JUZXN0OwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCV9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKTsKICAgIAkJCQlfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpOwogICAgCQkJCV9jdXJyZW50U2Npc3NvclRlc3QgPSBfc2Npc3NvclRlc3Q7CgogICAgCQkJfQoKICAgIAkJCS8vIFVzZSBhIHNjcmF0Y2ggZnJhbWUgYnVmZmVyIGlmIHJlbmRlcmluZyB0byBhIG1pcCBsZXZlbCB0byBhdm9pZCBkZXB0aCBidWZmZXJzCiAgICAJCQkvLyBiZWluZyBib3VuZCB0aGF0IGFyZSBkaWZmZXJlbnQgc2l6ZXMuCiAgICAJCQlpZiAoIGFjdGl2ZU1pcG1hcExldmVsICE9PSAwICkgewoKICAgIAkJCQlmcmFtZWJ1ZmZlciA9IF9zY3JhdGNoRnJhbWVCdWZmZXI7CgogICAgCQkJfQoKICAgIAkJCWNvbnN0IGZyYW1lYnVmZmVyQm91bmQgPSBzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTsKCiAgICAJCQlpZiAoIGZyYW1lYnVmZmVyQm91bmQgJiYgdXNlRGVmYXVsdEZyYW1lYnVmZmVyICkgewoKICAgIAkJCQlzdGF0ZS5kcmF3QnVmZmVycyggcmVuZGVyVGFyZ2V0LCBmcmFtZWJ1ZmZlciApOwoKICAgIAkJCX0KCiAgICAJCQlzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydCApOwogICAgCQkJc3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yICk7CiAgICAJCQlzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApOwoKICAgIAkJCWlmICggaXNDdWJlICkgewoKICAgIAkJCQljb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApOwogICAgCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBhY3RpdmVDdWJlRmFjZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGFjdGl2ZU1pcG1hcExldmVsICk7CgogICAgCQkJfSBlbHNlIGlmICggaXNSZW5kZXJUYXJnZXQzRCApIHsKCiAgICAJCQkJY29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTsKICAgIAkJCQljb25zdCBsYXllciA9IGFjdGl2ZUN1YmVGYWNlOwogICAgCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCwgbGF5ZXIgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQgIT09IG51bGwgJiYgYWN0aXZlTWlwbWFwTGV2ZWwgIT09IDAgKSB7CgogICAgCQkJCS8vIE9ubHkgYmluZCB0aGUgZnJhbWUgYnVmZmVyIGlmIHdlIGFyZSB1c2luZyBhIHNjcmF0Y2ggZnJhbWUgYnVmZmVyIHRvIHJlbmRlciB0byBhIG1pcG1hcC4KICAgIAkJCQkvLyBJZiB3ZSByZWJpbmQgdGhlIHRleHR1cmUgd2hlbiB1c2luZyBhIG11bHRpIHNhbXBsZSBidWZmZXIgdGhlbiBhbiBlcnJvciBhYm91dCBpbmNvbnNpc3RlbnQgc2FtcGxlcyB3aWxsIGJlIHRocm93bi4KICAgIAkJCQljb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApOwogICAgCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFXzJELCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTsKCiAgICAJCQl9CgogICAgCQkJX2N1cnJlbnRNYXRlcmlhbElkID0gLTE7IC8vIHJlc2V0IGN1cnJlbnQgbWF0ZXJpYWwgdG8gZW5zdXJlIGNvcnJlY3QgdW5pZm9ybSBiaW5kaW5ncwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBSZWFkcyB0aGUgcGl4ZWwgZGF0YSBmcm9tIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0IGludG8gdGhlIGdpdmVuIGJ1ZmZlci4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtXZWJHTFJlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gcmVhZCBmcm9tLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBgeGAgY29vcmRpbmF0ZSBvZiB0aGUgY29weSByZWdpb24ncyBvcmlnaW4uCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGB5YCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IHJlZ2lvbidzIG9yaWdpbi4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBjb3B5IHJlZ2lvbi4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGNvcHkgcmVnaW9uLgogICAgCQkgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGJ1ZmZlciAtIFRoZSByZXN1bHQgYnVmZmVyLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gW2FjdGl2ZUN1YmVGYWNlSW5kZXhdIC0gVGhlIGFjdGl2ZSBjdWJlIGZhY2UgaW5kZXguCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSBbdGV4dHVyZUluZGV4PTBdIC0gVGhlIHRleHR1cmUgaW5kZXggb2YgYW4gTVJUIHJlbmRlciB0YXJnZXQuCiAgICAJCSAqLwogICAgCQl0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4LCB0ZXh0dXJlSW5kZXggPSAwICkgewoKICAgIAkJCWlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkgewoKICAgIAkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTsKICAgIAkJCQlyZXR1cm47CgogICAgCQkJfQoKICAgIAkJCWxldCBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7CgogICAgCQkJaWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgJiYgYWN0aXZlQ3ViZUZhY2VJbmRleCAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQlmcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZUluZGV4IF07CgogICAgCQkJfQoKICAgIAkJCWlmICggZnJhbWVidWZmZXIgKSB7CgogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApOwoKICAgIAkJCQl0cnkgewoKICAgIAkJCQkJY29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlc1sgdGV4dHVyZUluZGV4IF07CiAgICAJCQkJCWNvbnN0IHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDsKICAgIAkJCQkJY29uc3QgdGV4dHVyZVR5cGUgPSB0ZXh0dXJlLnR5cGU7CgogICAgCQkJCQlpZiAoICEgY2FwYWJpbGl0aWVzLnRleHR1cmVGb3JtYXRSZWFkYWJsZSggdGV4dHVyZUZvcm1hdCApICkgewoKICAgIAkJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC4nICk7CiAgICAJCQkJCQlyZXR1cm47CgogICAgCQkJCQl9CgogICAgCQkJCQlpZiAoICEgY2FwYWJpbGl0aWVzLnRleHR1cmVUeXBlUmVhZGFibGUoIHRleHR1cmVUeXBlICkgKSB7CgogICAgCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7CiAgICAJCQkJCQlyZXR1cm47CgogICAgCQkJCQl9CgogICAgCQkJCQkvLyB0aGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudCBlbnN1cmVzIHZhbGlkIHJlYWQgcmVxdWVzdHMgKG5vIG91dC1vZi1ib3VuZHMgcGl4ZWxzLCBzZWUgIzg2MDQpCgogICAgCQkJCQlpZiAoICggeCA+PSAwICYmIHggPD0gKCByZW5kZXJUYXJnZXQud2lkdGggLSB3aWR0aCApICkgJiYgKCB5ID49IDAgJiYgeSA8PSAoIHJlbmRlclRhcmdldC5oZWlnaHQgLSBoZWlnaHQgKSApICkgewoKICAgIAkJCQkJCS8vIHdoZW4gdXNpbmcgTVJULCBzZWxlY3QgdGhlIGNvcnJlY3QgY29sb3IgYnVmZmVyIGZvciB0aGUgc3Vic2VxdWVudCByZWFkIGNvbW1hbmQKCiAgICAJCQkJCQlpZiAoIHJlbmRlclRhcmdldC50ZXh0dXJlcy5sZW5ndGggPiAxICkgX2dsLnJlYWRCdWZmZXIoIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIHRleHR1cmVJbmRleCApOwoKICAgIAkJCQkJCV9nbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICksIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICksIGJ1ZmZlciApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGZpbmFsbHkgewoKICAgIAkJCQkJLy8gcmVzdG9yZSBmcmFtZWJ1ZmZlciBvZiBjdXJyZW50IHJlbmRlciB0YXJnZXQgaWYgbmVjZXNzYXJ5CgogICAgCQkJCQljb25zdCBmcmFtZWJ1ZmZlciA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSA/IHByb3BlcnRpZXMuZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA6IG51bGw7CiAgICAJCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBBc3luY2hyb25vdXMsIG5vbi1ibG9ja2luZyB2ZXJzaW9uIG9mIHtAbGluayBXZWJHTFJlbmRlcmVyI3JlYWRSZW5kZXJUYXJnZXRQaXhlbHN9LgogICAgCQkgKgogICAgCQkgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyB2ZXJzaW9uIG9mIGByZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzKClgIHdoZW5ldmVyIHBvc3NpYmxlLgogICAgCQkgKgogICAgCQkgKiBAYXN5bmMKICAgIAkJICogQHBhcmFtIHtXZWJHTFJlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gcmVhZCBmcm9tLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBgeGAgY29vcmRpbmF0ZSBvZiB0aGUgY29weSByZWdpb24ncyBvcmlnaW4uCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGB5YCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IHJlZ2lvbidzIG9yaWdpbi4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBjb3B5IHJlZ2lvbi4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGNvcHkgcmVnaW9uLgogICAgCQkgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGJ1ZmZlciAtIFRoZSByZXN1bHQgYnVmZmVyLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gW2FjdGl2ZUN1YmVGYWNlSW5kZXhdIC0gVGhlIGFjdGl2ZSBjdWJlIGZhY2UgaW5kZXguCiAgICAJCSAqIEBwYXJhbSB7bnVtYmVyfSBbdGV4dHVyZUluZGV4PTBdIC0gVGhlIHRleHR1cmUgaW5kZXggb2YgYW4gTVJUIHJlbmRlciB0YXJnZXQuCiAgICAJCSAqIEByZXR1cm4ge1Byb21pc2U8VHlwZWRBcnJheT59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJlYWQgaGFzIGJlZW4gZmluaXNoZWQuIFRoZSByZXNvbHZlIHByb3ZpZGVzIHRoZSByZWFkIGRhdGEgYXMgYSB0eXBlZCBhcnJheS4KICAgIAkJICovCiAgICAJCXRoaXMucmVhZFJlbmRlclRhcmdldFBpeGVsc0FzeW5jID0gYXN5bmMgZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCwgdGV4dHVyZUluZGV4ID0gMCApIHsKCiAgICAJCQlpZiAoICEgKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXQgKSApIHsKCiAgICAJCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTsKCiAgICAJCQl9CgogICAgCQkJbGV0IGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjsKICAgIAkJCWlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCApIHsKCiAgICAJCQkJZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2VJbmRleCBdOwoKICAgIAkJCX0KCiAgICAJCQlpZiAoIGZyYW1lYnVmZmVyICkgewoKICAgIAkJCQkvLyB0aGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudCBlbnN1cmVzIHZhbGlkIHJlYWQgcmVxdWVzdHMgKG5vIG91dC1vZi1ib3VuZHMgcGl4ZWxzLCBzZWUgIzg2MDQpCiAgICAJCQkJaWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHsKCiAgICAJCQkJCS8vIHNldCB0aGUgYWN0aXZlIGZyYW1lIGJ1ZmZlciB0byB0aGUgb25lIHdlIHdhbnQgdG8gcmVhZAogICAgCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTsKCiAgICAJCQkJCWNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZXNbIHRleHR1cmVJbmRleCBdOwogICAgCQkJCQljb25zdCB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7CiAgICAJCQkJCWNvbnN0IHRleHR1cmVUeXBlID0gdGV4dHVyZS50eXBlOwoKICAgIAkJCQkJaWYgKCAhIGNhcGFiaWxpdGllcy50ZXh0dXJlRm9ybWF0UmVhZGFibGUoIHRleHR1cmVGb3JtYXQgKSApIHsKCiAgICAJCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTsKCiAgICAJCQkJCX0KCiAgICAJCQkJCWlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZVR5cGVSZWFkYWJsZSggdGV4dHVyZVR5cGUgKSApIHsKCiAgICAJCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7CgogICAgCQkJCQl9CgogICAgCQkJCQljb25zdCBnbEJ1ZmZlciA9IF9nbC5jcmVhdGVCdWZmZXIoKTsKICAgIAkJCQkJX2dsLmJpbmRCdWZmZXIoIF9nbC5QSVhFTF9QQUNLX0JVRkZFUiwgZ2xCdWZmZXIgKTsKICAgIAkJCQkJX2dsLmJ1ZmZlckRhdGEoIF9nbC5QSVhFTF9QQUNLX0JVRkZFUiwgYnVmZmVyLmJ5dGVMZW5ndGgsIF9nbC5TVFJFQU1fUkVBRCApOwoKICAgIAkJCQkJLy8gd2hlbiB1c2luZyBNUlQsIHNlbGVjdCB0aGUgY29yZWN0IGNvbG9yIGJ1ZmZlciBmb3IgdGhlIHN1YnNlcXVlbnQgcmVhZCBjb21tYW5kCgogICAgCQkJCQlpZiAoIHJlbmRlclRhcmdldC50ZXh0dXJlcy5sZW5ndGggPiAxICkgX2dsLnJlYWRCdWZmZXIoIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIHRleHR1cmVJbmRleCApOwoKICAgIAkJCQkJX2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgMCApOwoKICAgIAkJCQkJLy8gcmVzZXQgdGhlIGZyYW1lIGJ1ZmZlciB0byB0aGUgY3VycmVudGx5IHNldCBidWZmZXIgYmVmb3JlIHdhaXRpbmcKICAgIAkJCQkJY29uc3QgY3VyckZyYW1lYnVmZmVyID0gX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgPyBwcm9wZXJ0aWVzLmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgOiBudWxsOwogICAgCQkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgY3VyckZyYW1lYnVmZmVyICk7CgogICAgCQkJCQkvLyBjaGVjayBpZiB0aGUgY29tbWFuZHMgaGF2ZSBmaW5pc2hlZCBldmVyeSA4IG1zCiAgICAJCQkJCWNvbnN0IHN5bmMgPSBfZ2wuZmVuY2VTeW5jKCBfZ2wuU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUsIDAgKTsKCiAgICAJCQkJCV9nbC5mbHVzaCgpOwoKICAgIAkJCQkJYXdhaXQgcHJvYmVBc3luYyggX2dsLCBzeW5jLCA0ICk7CgogICAgCQkJCQkvLyByZWFkIHRoZSBkYXRhIGFuZCBkZWxldGUgdGhlIGJ1ZmZlcgogICAgCQkJCQlfZ2wuYmluZEJ1ZmZlciggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCBnbEJ1ZmZlciApOwogICAgCQkJCQlfZ2wuZ2V0QnVmZmVyU3ViRGF0YSggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCAwLCBidWZmZXIgKTsKICAgIAkJCQkJX2dsLmRlbGV0ZUJ1ZmZlciggZ2xCdWZmZXIgKTsKICAgIAkJCQkJX2dsLmRlbGV0ZVN5bmMoIHN5bmMgKTsKCiAgICAJCQkJCXJldHVybiBidWZmZXI7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVxdWVzdGVkIHJlYWQgYm91bmRzIGFyZSBvdXQgb2YgcmFuZ2UuJyApOwoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBDb3BpZXMgcGl4ZWxzIGZyb20gdGhlIGN1cnJlbnQgYm91bmQgZnJhbWVidWZmZXIgaW50byB0aGUgZ2l2ZW4gdGV4dHVyZS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtGcmFtZWJ1ZmZlclRleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS4KICAgIAkJICogQHBhcmFtIHs/VmVjdG9yMn0gW3Bvc2l0aW9uPW51bGxdIC0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBjb3B5IG9wZXJhdGlvbi4KICAgIAkJICogQHBhcmFtIHtudW1iZXJ9IFtsZXZlbD0wXSAtIFRoZSBtaXAgbGV2ZWwuIFRoZSBkZWZhdWx0IHJlcHJlc2VudHMgdGhlIGJhc2UgbWlwLgogICAgCQkgKi8KICAgIAkJdGhpcy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmUsIHBvc2l0aW9uID0gbnVsbCwgbGV2ZWwgPSAwICkgewoKICAgIAkJCWNvbnN0IGxldmVsU2NhbGUgPSBNYXRoLnBvdyggMiwgLSBsZXZlbCApOwogICAgCQkJY29uc3Qgd2lkdGggPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApOwogICAgCQkJY29uc3QgaGVpZ2h0ID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7CgogICAgCQkJY29uc3QgeCA9IHBvc2l0aW9uICE9PSBudWxsID8gcG9zaXRpb24ueCA6IDA7CiAgICAJCQljb25zdCB5ID0gcG9zaXRpb24gIT09IG51bGwgPyBwb3NpdGlvbi55IDogMDsKCiAgICAJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTsKCiAgICAJCQlfZ2wuY29weVRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbCwgMCwgMCwgeCwgeSwgd2lkdGgsIGhlaWdodCApOwoKICAgIAkJCXN0YXRlLnVuYmluZFRleHR1cmUoKTsKCiAgICAJCX07CgogICAgCQljb25zdCBfc3JjRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTsKICAgIAkJY29uc3QgX2RzdEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgogICAgCQkvKioKICAgIAkJICogQ29waWVzIGRhdGEgb2YgdGhlIGdpdmVuIHNvdXJjZSB0ZXh0dXJlIGludG8gYSBkZXN0aW5hdGlvbiB0ZXh0dXJlLgogICAgCQkgKgogICAgCQkgKiBXaGVuIHVzaW5nIHJlbmRlciB0YXJnZXQgdGV4dHVyZXMgYXMgYHNyY1RleHR1cmVgIGFuZCBgZHN0VGV4dHVyZWAsIHlvdSBtdXN0IG1ha2Ugc3VyZSBib3RoIHJlbmRlciB0YXJnZXRzIGFyZSBpbml0aWFsaXplZAogICAgCQkgKiB7QGxpbmsgV2ViR0xSZW5kZXJlciNpbml0UmVuZGVyVGFyZ2V0fS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtUZXh0dXJlfSBzcmNUZXh0dXJlIC0gVGhlIHNvdXJjZSB0ZXh0dXJlLgogICAgCQkgKiBAcGFyYW0ge1RleHR1cmV9IGRzdFRleHR1cmUgLSBUaGUgZGVzdGluYXRpb24gdGV4dHVyZS4KICAgIAkJICogQHBhcmFtIHs/KEJveDJ8Qm94Myl9IFtzcmNSZWdpb249bnVsbF0gLSBBIGJvdW5kaW5nIGJveCB3aGljaCBkZXNjcmliZXMgdGhlIHNvdXJjZSByZWdpb24uIENhbiBiZSB0d28gb3IgdGhyZWUtZGltZW5zaW9uYWwuCiAgICAJCSAqIEBwYXJhbSB7PyhWZWN0b3IyfFZlY3RvcjMpfSBbZHN0UG9zaXRpb249bnVsbF0gLSBBIHZlY3RvciB0aGF0IHJlcHJlc2VudHMgdGhlIG9yaWdpbiBvZiB0aGUgZGVzdGluYXRpb24gcmVnaW9uLiBDYW4gYmUgdHdvIG9yIHRocmVlLWRpbWVuc2lvbmFsLgogICAgCQkgKiBAcGFyYW0ge251bWJlcn0gW3NyY0xldmVsPTBdIC0gVGhlIHNvdXJjZSBtaXBtYXAgbGV2ZWwgdG8gY29weS4KICAgIAkJICogQHBhcmFtIHs/bnVtYmVyfSBbZHN0TGV2ZWw9bnVsbF0gLSBUaGUgZGVzdGluYXRpb24gbWlwbWFwIGxldmVsLgogICAgCQkgKi8KICAgIAkJdGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZSA9IGZ1bmN0aW9uICggc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgc3JjUmVnaW9uID0gbnVsbCwgZHN0UG9zaXRpb24gPSBudWxsLCBzcmNMZXZlbCA9IDAsIGRzdExldmVsID0gbnVsbCApIHsKCiAgICAJCQkvLyBzdXBwb3J0IHRoZSBwcmV2aW91cyBzaWduYXR1cmUgd2l0aCBqdXN0IGEgc2luZ2xlIGRzdCBtaXBtYXAgbGV2ZWwKICAgIAkJCWlmICggZHN0TGV2ZWwgPT09IG51bGwgKSB7CgogICAgCQkJCWlmICggc3JjTGV2ZWwgIT09IDAgKSB7CgogICAgCQkJCQkvLyBAZGVwcmVjYXRlZCwgcjE3MQogICAgCQkJCQl3YXJuT25jZSggJ1dlYkdMUmVuZGVyZXI6IGNvcHlUZXh0dXJlVG9UZXh0dXJlIGZ1bmN0aW9uIHNpZ25hdHVyZSBoYXMgY2hhbmdlZCB0byBzdXBwb3J0IHNyYyBhbmQgZHN0IG1pcG1hcCBsZXZlbHMuJyApOwogICAgCQkJCQlkc3RMZXZlbCA9IHNyY0xldmVsOwogICAgCQkJCQlzcmNMZXZlbCA9IDA7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlkc3RMZXZlbCA9IDA7CgogICAgCQkJCX0KCiAgICAJCQl9CgogICAgCQkJLy8gZ2F0aGVyIHRoZSBuZWNlc3NhcnkgZGltZW5zaW9ucyB0byBjb3B5CiAgICAJCQlsZXQgd2lkdGgsIGhlaWdodCwgZGVwdGgsIG1pblgsIG1pblksIG1pblo7CiAgICAJCQlsZXQgZHN0WCwgZHN0WSwgZHN0WjsKICAgIAkJCWNvbnN0IGltYWdlID0gc3JjVGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlID8gc3JjVGV4dHVyZS5taXBtYXBzWyBkc3RMZXZlbCBdIDogc3JjVGV4dHVyZS5pbWFnZTsKICAgIAkJCWlmICggc3JjUmVnaW9uICE9PSBudWxsICkgewoKICAgIAkJCQl3aWR0aCA9IHNyY1JlZ2lvbi5tYXgueCAtIHNyY1JlZ2lvbi5taW4ueDsKICAgIAkJCQloZWlnaHQgPSBzcmNSZWdpb24ubWF4LnkgLSBzcmNSZWdpb24ubWluLnk7CiAgICAJCQkJZGVwdGggPSBzcmNSZWdpb24uaXNCb3gzID8gc3JjUmVnaW9uLm1heC56IC0gc3JjUmVnaW9uLm1pbi56IDogMTsKICAgIAkJCQltaW5YID0gc3JjUmVnaW9uLm1pbi54OwogICAgCQkJCW1pblkgPSBzcmNSZWdpb24ubWluLnk7CiAgICAJCQkJbWluWiA9IHNyY1JlZ2lvbi5pc0JveDMgPyBzcmNSZWdpb24ubWluLnogOiAwOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWNvbnN0IGxldmVsU2NhbGUgPSBNYXRoLnBvdyggMiwgLSBzcmNMZXZlbCApOwogICAgCQkJCXdpZHRoID0gTWF0aC5mbG9vciggaW1hZ2Uud2lkdGggKiBsZXZlbFNjYWxlICk7CiAgICAJCQkJaGVpZ2h0ID0gTWF0aC5mbG9vciggaW1hZ2UuaGVpZ2h0ICogbGV2ZWxTY2FsZSApOwogICAgCQkJCWlmICggc3JjVGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7CgogICAgCQkJCQlkZXB0aCA9IGltYWdlLmRlcHRoOwoKICAgIAkJCQl9IGVsc2UgaWYgKCBzcmNUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHsKCiAgICAJCQkJCWRlcHRoID0gTWF0aC5mbG9vciggaW1hZ2UuZGVwdGggKiBsZXZlbFNjYWxlICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQlkZXB0aCA9IDE7CgogICAgCQkJCX0KCiAgICAJCQkJbWluWCA9IDA7CiAgICAJCQkJbWluWSA9IDA7CiAgICAJCQkJbWluWiA9IDA7CgogICAgCQkJfQoKICAgIAkJCWlmICggZHN0UG9zaXRpb24gIT09IG51bGwgKSB7CgogICAgCQkJCWRzdFggPSBkc3RQb3NpdGlvbi54OwogICAgCQkJCWRzdFkgPSBkc3RQb3NpdGlvbi55OwogICAgCQkJCWRzdFogPSBkc3RQb3NpdGlvbi56OwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWRzdFggPSAwOwogICAgCQkJCWRzdFkgPSAwOwogICAgCQkJCWRzdFogPSAwOwoKICAgIAkJCX0KCiAgICAJCQkvLyBTZXQgdXAgdGhlIGRlc3RpbmF0aW9uIHRhcmdldAogICAgCQkJY29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApOwogICAgCQkJY29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7CiAgICAJCQlsZXQgZ2xUYXJnZXQ7CgogICAgCQkJaWYgKCBkc3RUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHsKCiAgICAJCQkJdGV4dHVyZXMuc2V0VGV4dHVyZTNEKCBkc3RUZXh0dXJlLCAwICk7CiAgICAJCQkJZ2xUYXJnZXQgPSBfZ2wuVEVYVFVSRV8zRDsKCiAgICAJCQl9IGVsc2UgaWYgKCBkc3RUZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCBkc3RUZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHsKCiAgICAJCQkJdGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIGRzdFRleHR1cmUsIDAgKTsKICAgIAkJCQlnbFRhcmdldCA9IF9nbC5URVhUVVJFXzJEX0FSUkFZOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCXRleHR1cmVzLnNldFRleHR1cmUyRCggZHN0VGV4dHVyZSwgMCApOwogICAgCQkJCWdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfMkQ7CgogICAgCQkJfQoKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIGRzdFRleHR1cmUuZmxpcFkgKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZHN0VGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7CiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQUxJR05NRU5ULCBkc3RUZXh0dXJlLnVucGFja0FsaWdubWVudCApOwoKICAgIAkJCS8vIHVzZWQgZm9yIGNvcHlpbmcgZGF0YSBmcm9tIGNwdQogICAgCQkJY29uc3QgY3VycmVudFVucGFja1Jvd0xlbiA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCApOwogICAgCQkJY29uc3QgY3VycmVudFVucGFja0ltYWdlSGVpZ2h0ID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQgKTsKICAgIAkJCWNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1BJWEVMUyApOwogICAgCQkJY29uc3QgY3VycmVudFVucGFja1NraXBSb3dzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1JPV1MgKTsKICAgIAkJCWNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX0lNQUdFUyApOwoKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19ST1dfTEVOR1RILCBpbWFnZS53aWR0aCApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0lNQUdFX0hFSUdIVCwgaW1hZ2UuaGVpZ2h0ICk7CiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIG1pblggKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX1JPV1MsIG1pblkgKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX0lNQUdFUywgbWluWiApOwoKICAgIAkJCS8vIHNldCB1cCB0aGUgc3JjIHRleHR1cmUKICAgIAkJCWNvbnN0IGlzU3JjM0QgPSBzcmNUZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCBzcmNUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZTsKICAgIAkJCWNvbnN0IGlzRHN0M0QgPSBkc3RUZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCBkc3RUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZTsKICAgIAkJCWlmICggc3JjVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHsKCiAgICAJCQkJY29uc3Qgc3JjVGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc3JjVGV4dHVyZSApOwogICAgCQkJCWNvbnN0IGRzdFRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIGRzdFRleHR1cmUgKTsKICAgIAkJCQljb25zdCBzcmNSZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNyY1RleHR1cmVQcm9wZXJ0aWVzLl9fcmVuZGVyVGFyZ2V0ICk7CiAgICAJCQkJY29uc3QgZHN0UmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBkc3RUZXh0dXJlUHJvcGVydGllcy5fX3JlbmRlclRhcmdldCApOwogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIHNyY1JlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7CiAgICAJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgZHN0UmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTsKCiAgICAJCQkJZm9yICggbGV0IGkgPSAwOyBpIDwgZGVwdGg7IGkgKysgKSB7CgogICAgCQkJCQkvLyBpZiB0aGUgc291cmNlIG9yIGRlc3RpbmF0aW9uIGFyZSBhIDNkIHRhcmdldCB0aGVuIGEgbGF5ZXIgbmVlZHMgdG8gYmUgYm91bmQKICAgIAkJCQkJaWYgKCBpc1NyYzNEICkgewoKICAgIAkJCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgcHJvcGVydGllcy5nZXQoIHNyY1RleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgc3JjTGV2ZWwsIG1pblogKyBpICk7CiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHByb3BlcnRpZXMuZ2V0KCBkc3RUZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIGRzdExldmVsLCBkc3RaICsgaSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJX2dsLmJsaXRGcmFtZWJ1ZmZlciggbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgX2dsLkRFUFRIX0JVRkZFUl9CSVQsIF9nbC5ORUFSRVNUICk7CgogICAgCQkJCX0KCiAgICAJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApOwogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCBzcmNMZXZlbCAhPT0gMCB8fCBzcmNUZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSB8fCBwcm9wZXJ0aWVzLmhhcyggc3JjVGV4dHVyZSApICkgewoKICAgIAkJCQkvLyBnZXQgdGhlIGFwcHJvcHJpYXRlIGZyYW1lIGJ1ZmZlcnMKICAgIAkJCQljb25zdCBzcmNUZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBzcmNUZXh0dXJlICk7CiAgICAJCQkJY29uc3QgZHN0VGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggZHN0VGV4dHVyZSApOwoKICAgIAkJCQkvLyBiaW5kIHRoZSBmcmFtZSBidWZmZXIgdGFyZ2V0cwogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9zcmNGcmFtZWJ1ZmZlciApOwogICAgCQkJCXN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9kc3RGcmFtZWJ1ZmZlciApOwoKICAgIAkJCQlmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZXB0aDsgaSArKyApIHsKCiAgICAJCQkJCS8vIGFzc2lnbiB0aGUgY29ycmVjdCBsYXllcnMgYW5kIG1pcCBtYXBzIHRvIHRoZSBmcmFtZSBidWZmZXJzCiAgICAJCQkJCWlmICggaXNTcmMzRCApIHsKCiAgICAJCQkJCQlfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHNyY1RleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBzcmNMZXZlbCwgbWluWiArIGkgKTsKCiAgICAJCQkJCX0gZWxzZSB7CgogICAgCQkJCQkJX2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgc3JjVGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIHNyY0xldmVsICk7CgogICAgCQkJCQl9CgogICAgCQkJCQlpZiAoIGlzRHN0M0QgKSB7CgogICAgCQkJCQkJX2dsLmZyYW1lYnVmZmVyVGV4dHVyZUxheWVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBkc3RUZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgZHN0TGV2ZWwsIGRzdFogKyBpICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQsIGRzdFRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBkc3RMZXZlbCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQkJLy8gY29weSB0aGUgZGF0YSB1c2luZyB0aGUgZmFzdGVzdCBmdW5jdGlvbiB0aGF0IGNhbiBhY2hpZXZlIHRoZSBjb3B5CiAgICAJCQkJCWlmICggc3JjTGV2ZWwgIT09IDAgKSB7CgogICAgCQkJCQkJX2dsLmJsaXRGcmFtZWJ1ZmZlciggbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgX2dsLkNPTE9SX0JVRkZFUl9CSVQsIF9nbC5ORUFSRVNUICk7CgogICAgCQkJCQl9IGVsc2UgaWYgKCBpc0RzdDNEICkgewoKICAgIAkJCQkJCV9nbC5jb3B5VGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBkc3RaICsgaSwgbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlfZ2wuY29weVRleFN1YkltYWdlMkQoIGdsVGFyZ2V0LCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJCS8vIHVuYmluZCByZWFkLCBkcmF3IGJ1ZmZlcnMKICAgIAkJCQlzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBudWxsICk7CiAgICAJCQkJc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCApOwoKICAgIAkJCX0gZWxzZSB7CgogICAgCQkJCWlmICggaXNEc3QzRCApIHsKCiAgICAJCQkJCS8vIGNvcHkgZGF0YSBpbnRvIHRoZSAzZCB0ZXh0dXJlCiAgICAJCQkJCWlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlIHx8IHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkgewoKICAgIAkJCQkJCV9nbC50ZXhTdWJJbWFnZTNEKCBnbFRhcmdldCwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7CgogICAgCQkJCQl9IGVsc2UgaWYgKCBkc3RUZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHsKCiAgICAJCQkJCQlfZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgZHN0Wiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBpbWFnZS5kYXRhICk7CgogICAgCQkJCQl9IGVsc2UgewoKICAgIAkJCQkJCV9nbC50ZXhTdWJJbWFnZTNEKCBnbFRhcmdldCwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9IGVsc2UgewoKICAgIAkJCQkJLy8gY29weSBkYXRhIGludG8gdGhlIDJkIHRleHR1cmUKICAgIAkJCQkJaWYgKCBzcmNUZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7CgogICAgCQkJCQkJX2dsLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApOwoKICAgIAkJCQkJfSBlbHNlIGlmICggc3JjVGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkgewoKICAgIAkJCQkJCV9nbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgaW1hZ2UuZGF0YSApOwoKICAgIAkJCQkJfSBlbHNlIHsKCiAgICAJCQkJCQlfZ2wudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApOwoKICAgIAkJCQkJfQoKICAgIAkJCQl9CgogICAgCQkJfQoKICAgIAkJCS8vIHJlc2V0IHZhbHVlcwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1JPV19MRU5HVEgsIGN1cnJlbnRVbnBhY2tSb3dMZW4gKTsKICAgIAkJCV9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyApOwogICAgCQkJX2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgY3VycmVudFVucGFja1NraXBSb3dzICk7CiAgICAJCQlfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzICk7CgogICAgCQkJLy8gR2VuZXJhdGUgbWlwbWFwcyBvbmx5IHdoZW4gY29weWluZyBsZXZlbCAwCiAgICAJCQlpZiAoIGRzdExldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgewoKICAgIAkJCQlfZ2wuZ2VuZXJhdGVNaXBtYXAoIGdsVGFyZ2V0ICk7CgogICAgCQkJfQoKICAgIAkJCXN0YXRlLnVuYmluZFRleHR1cmUoKTsKCiAgICAJCX07CgogICAgCQl0aGlzLmNvcHlUZXh0dXJlVG9UZXh0dXJlM0QgPSBmdW5jdGlvbiAoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiA9IG51bGwsIGRzdFBvc2l0aW9uID0gbnVsbCwgbGV2ZWwgPSAwICkgewoKICAgIAkJCS8vIEBkZXByZWNhdGVkLCByMTcwCiAgICAJCQl3YXJuT25jZSggJ1dlYkdMUmVuZGVyZXI6IGNvcHlUZXh0dXJlVG9UZXh0dXJlM0QgZnVuY3Rpb24gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlICJjb3B5VGV4dHVyZVRvVGV4dHVyZSIgaW5zdGVhZC4nICk7CgogICAgCQkJcmV0dXJuIHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiwgZHN0UG9zaXRpb24sIGxldmVsICk7CgogICAgCQl9OwoKICAgIAkJLyoqCiAgICAJCSAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiBXZWJHTFJlbmRlclRhcmdldCBtZW1vcnkuIFVzZWZ1bCBmb3IgaW5pdGlhbGl6aW5nIGEgcmVuZGVyIHRhcmdldCBzbyBkYXRhCiAgICAJCSAqIGNhbiBiZSBjb3BpZWQgaW50byBpdCB1c2luZyB7QGxpbmsgV2ViR0xSZW5kZXJlciNjb3B5VGV4dHVyZVRvVGV4dHVyZX0gYmVmb3JlIGl0IGhhcyBiZWVuCiAgICAJCSAqIHJlbmRlcmVkIHRvLgogICAgCQkgKgogICAgCQkgKiBAcGFyYW0ge1dlYkdMUmVuZGVyVGFyZ2V0fSB0YXJnZXQgLSBUaGUgcmVuZGVyIHRhcmdldC4KICAgIAkJICovCiAgICAJCXRoaXMuaW5pdFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKICAgIAkJCWlmICggcHJvcGVydGllcy5nZXQoIHRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQl0ZXh0dXJlcy5zZXR1cFJlbmRlclRhcmdldCggdGFyZ2V0ICk7CgogICAgCQkJfQoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBJbml0aWFsaXplcyB0aGUgZ2l2ZW4gdGV4dHVyZS4gVXNlZnVsIGZvciBwcmVsb2FkaW5nIGEgdGV4dHVyZSByYXRoZXIgdGhhbiB3YWl0aW5nIHVudGlsIGZpcnN0CiAgICAJCSAqIHJlbmRlciAod2hpY2ggY2FuIGNhdXNlIG5vdGljZWFibGUgbGFncyBkdWUgdG8gZGVjb2RlIGFuZCBHUFUgdXBsb2FkIG92ZXJoZWFkKS4KICAgIAkJICoKICAgIAkJICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuCiAgICAJCSAqLwogICAgCQl0aGlzLmluaXRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlICkgewoKICAgIAkJCWlmICggdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkgewoKICAgIAkJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgMCApOwoKICAgIAkJCX0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkgewoKICAgIAkJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHRleHR1cmUsIDAgKTsKCiAgICAJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHsKCiAgICAJCQkJdGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIDAgKTsKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTsKCiAgICAJCQl9CgogICAgCQkJc3RhdGUudW5iaW5kVGV4dHVyZSgpOwoKICAgIAkJfTsKCiAgICAJCS8qKgogICAgCQkgKiBDYW4gYmUgdXNlZCB0byByZXNldCB0aGUgaW50ZXJuYWwgV2ViR0wgc3RhdGUuIFRoaXMgbWV0aG9kIGlzIG1vc3RseQogICAgCQkgKiByZWxldmFudCBmb3IgYXBwbGljYXRpb25zIHdoaWNoIHNoYXJlIGEgc2luZ2xlIFdlYkdMIGNvbnRleHQgYWNyb3NzCiAgICAJCSAqIG11bHRpcGxlIFdlYkdMIGxpYnJhcmllcy4KICAgIAkJICovCiAgICAJCXRoaXMucmVzZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQlfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gMDsKICAgIAkJCV9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSAwOwogICAgCQkJX2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsOwoKICAgIAkJCXN0YXRlLnJlc2V0KCk7CiAgICAJCQliaW5kaW5nU3RhdGVzLnJlc2V0KCk7CgogICAgCQl9OwoKICAgIAkJaWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHsKCiAgICAJCQlfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIERlZmluZXMgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSByZW5kZXJlci4KICAgIAkgKgogICAgCSAqIEluIGBXZWJHTFJlbmRlcmVyYCwgdGhlIHZhbHVlIGlzIGFsd2F5cyBgV2ViR0xDb29yZGluYXRlU3lzdGVtYC4KICAgIAkgKgogICAgCSAqIEB0eXBlIHtXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbX0KICAgIAkgKiBAZGVmYXVsdCBXZWJHTENvb3JkaW5hdGVTeXN0ZW0KICAgIAkgKiBAcmVhZG9ubHkKICAgIAkgKi8KICAgIAlnZXQgY29vcmRpbmF0ZVN5c3RlbSgpIHsKCiAgICAJCXJldHVybiBXZWJHTENvb3JkaW5hdGVTeXN0ZW07CgogICAgCX0KCiAgICAJLyoqCiAgICAJICogRGVmaW5lcyB0aGUgb3V0cHV0IGNvbG9yIHNwYWNlIG9mIHRoZSByZW5kZXJlci4KICAgIAkgKgogICAgCSAqIEB0eXBlIHtTUkdCQ29sb3JTcGFjZXxMaW5lYXJTUkdCQ29sb3JTcGFjZX0KICAgIAkgKiBAZGVmYXVsdCBTUkdCQ29sb3JTcGFjZQogICAgCSAqLwogICAgCWdldCBvdXRwdXRDb2xvclNwYWNlKCkgewoKICAgIAkJcmV0dXJuIHRoaXMuX291dHB1dENvbG9yU3BhY2U7CgogICAgCX0KCiAgICAJc2V0IG91dHB1dENvbG9yU3BhY2UoIGNvbG9yU3BhY2UgKSB7CgogICAgCQl0aGlzLl9vdXRwdXRDb2xvclNwYWNlID0gY29sb3JTcGFjZTsKCiAgICAJCWNvbnN0IGdsID0gdGhpcy5nZXRDb250ZXh0KCk7CiAgICAJCWdsLmRyYXdpbmdCdWZmZXJDb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50Ll9nZXREcmF3aW5nQnVmZmVyQ29sb3JTcGFjZSggY29sb3JTcGFjZSApOwogICAgCQlnbC51bnBhY2tDb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50Ll9nZXRVbnBhY2tDb2xvclNwYWNlKCk7CgogICAgCX0KCiAgICB9CgogICAgLyoqCiAgICAgKiBBIHV0aWxpdHkgY2xhc3MgZm9yIGNyZWF0aW5nIGEgYnV0dG9uIHRoYXQgYWxsb3dzIHRvIGluaXRpYXRlCiAgICAgKiBpbW1lcnNpdmUgVlIgc2Vzc2lvbnMgYmFzZWQgb24gV2ViWFIuIFRoZSBidXR0b24gY2FuIGJlIGNyZWF0ZWQKICAgICAqIHdpdGggYSBmYWN0b3J5IG1ldGhvZCBhbmQgdGhlbiBhcHBlbmRlZCBvdCB0aGUgd2Vic2l0ZSdzIERPTS4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggVlJCdXR0b24uY3JlYXRlQnV0dG9uKCByZW5kZXJlciApICk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yCiAgICAgKiBAdGhyZWVfaW1wb3J0IGltcG9ydCB7IFZSQnV0dG9uIH0gZnJvbSAndGhyZWUvYWRkb25zL3dlYnhyL1ZSQnV0dG9uLmpzJzsKICAgICAqLwogICAgY2xhc3MgVlJCdXR0b24gewoKICAgIAkvKioKICAgIAkgKiBDb25zdHJ1Y3RzIGEgbmV3IFZSIGJ1dHRvbi4KICAgIAkgKgogICAgCSAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcnxXZWJHUFVSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuCiAgICAJICogQHBhcmFtIHtYUlNlc3Npb25Jbml0fSBbc2Vzc2lvbkluaXRdIC0gVGhlIGEgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHRoZSBBUiBzZXNzaW9uLgogICAgCSAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgYnV0dG9uIG9yIGFuIGVycm9yIG1lc3NhZ2UgaWYgYGltbWVyc2l2ZS1hcmAgaXNuJ3Qgc3VwcG9ydGVkLgogICAgCSAqLwogICAgCXN0YXRpYyBjcmVhdGVCdXR0b24oIHJlbmRlcmVyLCBzZXNzaW9uSW5pdCA9IHt9ICkgewoKICAgIAkJY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2J1dHRvbicgKTsKCiAgICAJCWZ1bmN0aW9uIHNob3dFbnRlclZSKCAvKmRldmljZSovICkgewoKICAgIAkJCWxldCBjdXJyZW50U2Vzc2lvbiA9IG51bGw7CgogICAgCQkJYXN5bmMgZnVuY3Rpb24gb25TZXNzaW9uU3RhcnRlZCggc2Vzc2lvbiApIHsKCiAgICAJCQkJc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kZWQgKTsKCiAgICAJCQkJYXdhaXQgcmVuZGVyZXIueHIuc2V0U2Vzc2lvbiggc2Vzc2lvbiApOwogICAgCQkJCWJ1dHRvbi50ZXh0Q29udGVudCA9ICdFWElUIFZSJzsKCiAgICAJCQkJY3VycmVudFNlc3Npb24gPSBzZXNzaW9uOwoKICAgIAkJCX0KCiAgICAJCQlmdW5jdGlvbiBvblNlc3Npb25FbmRlZCggLypldmVudCovICkgewoKICAgIAkJCQljdXJyZW50U2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kZWQgKTsKCiAgICAJCQkJYnV0dG9uLnRleHRDb250ZW50ID0gJ0VOVEVSIFZSJzsKCiAgICAJCQkJY3VycmVudFNlc3Npb24gPSBudWxsOwoKICAgIAkJCX0KCiAgICAJCQkvLwoKICAgIAkJCWJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7CgogICAgCQkJYnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJzsKICAgIAkJCWJ1dHRvbi5zdHlsZS5sZWZ0ID0gJ2NhbGMoNTAlIC0gNTBweCknOwogICAgCQkJYnV0dG9uLnN0eWxlLndpZHRoID0gJzEwMHB4JzsKCiAgICAJCQlidXR0b24udGV4dENvbnRlbnQgPSAnRU5URVIgVlInOwoKICAgIAkJCS8vIFdlYlhSJ3MgcmVxdWVzdFJlZmVyZW5jZVNwYWNlIG9ubHkgd29ya3MgaWYgdGhlIGNvcnJlc3BvbmRpbmcgZmVhdHVyZQogICAgCQkJLy8gd2FzIHJlcXVlc3RlZCBhdCBzZXNzaW9uIGNyZWF0aW9uIHRpbWUuIEZvciBzaW1wbGljaXR5LCBqdXN0IGFzayBmb3IKICAgIAkJCS8vIHRoZSBpbnRlcmVzdGluZyBvbmVzIGFzIG9wdGlvbmFsIGZlYXR1cmVzLCBidXQgYmUgYXdhcmUgdGhhdCB0aGUKICAgIAkJCS8vIHJlcXVlc3RSZWZlcmVuY2VTcGFjZSBjYWxsIHdpbGwgZmFpbCBpZiBpdCB0dXJucyBvdXQgdG8gYmUgdW5hdmFpbGFibGUuCiAgICAJCQkvLyAoJ2xvY2FsJyBpcyBhbHdheXMgYXZhaWxhYmxlIGZvciBpbW1lcnNpdmUgc2Vzc2lvbnMgYW5kIGRvZXNuJ3QgbmVlZCB0bwogICAgCQkJLy8gYmUgcmVxdWVzdGVkIHNlcGFyYXRlbHkuKQoKICAgIAkJCWNvbnN0IHNlc3Npb25PcHRpb25zID0gewogICAgCQkJCS4uLnNlc3Npb25Jbml0LAogICAgCQkJCW9wdGlvbmFsRmVhdHVyZXM6IFsKICAgIAkJCQkJJ2xvY2FsLWZsb29yJywKICAgIAkJCQkJJ2JvdW5kZWQtZmxvb3InLAogICAgCQkJCQknbGF5ZXJzJywKICAgIAkJCQkJLi4uKCBzZXNzaW9uSW5pdC5vcHRpb25hbEZlYXR1cmVzIHx8IFtdICkKICAgIAkJCQldLAogICAgCQkJfTsKCiAgICAJCQlidXR0b24ub25tb3VzZWVudGVyID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCQlidXR0b24uc3R5bGUub3BhY2l0eSA9ICcxLjAnOwoKICAgIAkJCX07CgogICAgCQkJYnV0dG9uLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uICgpIHsKCiAgICAJCQkJYnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMC41JzsKCiAgICAJCQl9OwoKICAgIAkJCWJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkgewoKICAgIAkJCQlpZiAoIGN1cnJlbnRTZXNzaW9uID09PSBudWxsICkgewoKICAgIAkJCQkJbmF2aWdhdG9yLnhyLnJlcXVlc3RTZXNzaW9uKCAnaW1tZXJzaXZlLXZyJywgc2Vzc2lvbk9wdGlvbnMgKS50aGVuKCBvblNlc3Npb25TdGFydGVkICk7CgogICAgCQkJCX0gZWxzZSB7CgogICAgCQkJCQljdXJyZW50U2Vzc2lvbi5lbmQoKTsKCiAgICAJCQkJCWlmICggbmF2aWdhdG9yLnhyLm9mZmVyU2Vzc2lvbiAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQkJCW5hdmlnYXRvci54ci5vZmZlclNlc3Npb24oICdpbW1lcnNpdmUtdnInLCBzZXNzaW9uT3B0aW9ucyApCiAgICAJCQkJCQkJLnRoZW4oIG9uU2Vzc2lvblN0YXJ0ZWQgKQogICAgCQkJCQkJCS5jYXRjaCggKCBlcnIgKSA9PiB7CgogICAgCQkJCQkJCQljb25zb2xlLndhcm4oIGVyciApOwoKICAgIAkJCQkJCQl9ICk7CgogICAgCQkJCQl9CgogICAgCQkJCX0KCiAgICAJCQl9OwoKICAgIAkJCWlmICggbmF2aWdhdG9yLnhyLm9mZmVyU2Vzc2lvbiAhPT0gdW5kZWZpbmVkICkgewoKICAgIAkJCQluYXZpZ2F0b3IueHIub2ZmZXJTZXNzaW9uKCAnaW1tZXJzaXZlLXZyJywgc2Vzc2lvbk9wdGlvbnMgKQogICAgCQkJCQkudGhlbiggb25TZXNzaW9uU3RhcnRlZCApCiAgICAJCQkJCS5jYXRjaCggKCBlcnIgKSA9PiB7CgogICAgCQkJCQkJY29uc29sZS53YXJuKCBlcnIgKTsKCiAgICAJCQkJCX0gKTsKCiAgICAJCQl9CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBkaXNhYmxlQnV0dG9uKCkgewoKICAgIAkJCWJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7CgogICAgCQkJYnV0dG9uLnN0eWxlLmN1cnNvciA9ICdhdXRvJzsKICAgIAkJCWJ1dHRvbi5zdHlsZS5sZWZ0ID0gJ2NhbGMoNTAlIC0gNzVweCknOwogICAgCQkJYnV0dG9uLnN0eWxlLndpZHRoID0gJzE1MHB4JzsKCiAgICAJCQlidXR0b24ub25tb3VzZWVudGVyID0gbnVsbDsKICAgIAkJCWJ1dHRvbi5vbm1vdXNlbGVhdmUgPSBudWxsOwoKICAgIAkJCWJ1dHRvbi5vbmNsaWNrID0gbnVsbDsKCiAgICAJCX0KCiAgICAJCWZ1bmN0aW9uIHNob3dXZWJYUk5vdEZvdW5kKCkgewoKICAgIAkJCWRpc2FibGVCdXR0b24oKTsKCiAgICAJCQlidXR0b24udGV4dENvbnRlbnQgPSAnVlIgTk9UIFNVUFBPUlRFRCc7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBzaG93VlJOb3RBbGxvd2VkKCBleGNlcHRpb24gKSB7CgogICAgCQkJZGlzYWJsZUJ1dHRvbigpOwoKICAgIAkJCWNvbnNvbGUud2FybiggJ0V4Y2VwdGlvbiB3aGVuIHRyeWluZyB0byBjYWxsIHhyLmlzU2Vzc2lvblN1cHBvcnRlZCcsIGV4Y2VwdGlvbiApOwoKICAgIAkJCWJ1dHRvbi50ZXh0Q29udGVudCA9ICdWUiBOT1QgQUxMT1dFRCc7CgogICAgCQl9CgogICAgCQlmdW5jdGlvbiBzdHlsaXplRWxlbWVudCggZWxlbWVudCApIHsKCiAgICAJCQllbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsKICAgIAkJCWVsZW1lbnQuc3R5bGUuYm90dG9tID0gJzIwcHgnOwogICAgCQkJZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzEycHggNnB4JzsKICAgIAkJCWVsZW1lbnQuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjZmZmJzsKICAgIAkJCWVsZW1lbnQuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzRweCc7CiAgICAJCQllbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgwLDAsMCwwLjEpJzsKICAgIAkJCWVsZW1lbnQuc3R5bGUuY29sb3IgPSAnI2ZmZic7CiAgICAJCQllbGVtZW50LnN0eWxlLmZvbnQgPSAnbm9ybWFsIDEzcHggc2Fucy1zZXJpZic7CiAgICAJCQllbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInOwogICAgCQkJZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7CiAgICAJCQllbGVtZW50LnN0eWxlLm91dGxpbmUgPSAnbm9uZSc7CiAgICAJCQllbGVtZW50LnN0eWxlLnpJbmRleCA9ICc5OTknOwoKICAgIAkJfQoKICAgIAkJaWYgKCAneHInIGluIG5hdmlnYXRvciApIHsKCiAgICAJCQlidXR0b24uaWQgPSAnVlJCdXR0b24nOwogICAgCQkJYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgogICAgCQkJc3R5bGl6ZUVsZW1lbnQoIGJ1dHRvbiApOwoKICAgIAkJCW5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoICdpbW1lcnNpdmUtdnInICkudGhlbiggZnVuY3Rpb24gKCBzdXBwb3J0ZWQgKSB7CgogICAgCQkJCXN1cHBvcnRlZCA/IHNob3dFbnRlclZSKCkgOiBzaG93V2ViWFJOb3RGb3VuZCgpOwoKICAgIAkJCQlpZiAoIHN1cHBvcnRlZCAmJiBWUkJ1dHRvbi54clNlc3Npb25Jc0dyYW50ZWQgKSB7CgogICAgCQkJCQlidXR0b24uY2xpY2soKTsKCiAgICAJCQkJfQoKICAgIAkJCX0gKS5jYXRjaCggc2hvd1ZSTm90QWxsb3dlZCApOwoKICAgIAkJCXJldHVybiBidXR0b247CgogICAgCQl9IGVsc2UgewoKICAgIAkJCWNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYScgKTsKCiAgICAJCQlpZiAoIHdpbmRvdy5pc1NlY3VyZUNvbnRleHQgPT09IGZhbHNlICkgewoKICAgIAkJCQltZXNzYWdlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoIC9eaHR0cDovLCAnaHR0cHM6JyApOwogICAgCQkJCW1lc3NhZ2UuaW5uZXJIVE1MID0gJ1dFQlhSIE5FRURTIEhUVFBTJzsgLy8gVE9ETyBJbXByb3ZlIG1lc3NhZ2UKCiAgICAJCQl9IGVsc2UgewoKICAgIAkJCQltZXNzYWdlLmhyZWYgPSAnaHR0cHM6Ly9pbW1lcnNpdmV3ZWIuZGV2Lyc7CiAgICAJCQkJbWVzc2FnZS5pbm5lckhUTUwgPSAnV0VCWFIgTk9UIEFWQUlMQUJMRSc7CgogICAgCQkJfQoKICAgIAkJCW1lc3NhZ2Uuc3R5bGUubGVmdCA9ICdjYWxjKDUwJSAtIDkwcHgpJzsKICAgIAkJCW1lc3NhZ2Uuc3R5bGUud2lkdGggPSAnMTgwcHgnOwogICAgCQkJbWVzc2FnZS5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICdub25lJzsKCiAgICAJCQlzdHlsaXplRWxlbWVudCggbWVzc2FnZSApOwoKICAgIAkJCXJldHVybiBtZXNzYWdlOwoKICAgIAkJfQoKICAgIAl9CgogICAgCS8qKgogICAgCSAqIFJlZ2lzdGVycyBhIGBzZXNzaW9uZ3JhbnRlZGAgZXZlbnQgbGlzdGVuZXIuIFdoZW4gYSBzZXNzaW9uIGlzIGdyYW50ZWQsIHRoZSB7QGxpbmsgVlJCdXR0b24jeHJTZXNzaW9uSXNHcmFudGVkfQogICAgCSAqIGZsYWcgd2lsbCBldmFsdWF0ZSB0byBgdHJ1ZWAuIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IHRoZSBtb2R1bGUgaXRzZWxmIHNvIHRoZXJlCiAgICAJICogc2hvdWxkIGJlIG5vIG5lZWQgdG8gdXNlIGl0IG9uIGFwcCBsZXZlbC4KICAgIAkgKi8KICAgIAlzdGF0aWMgcmVnaXN0ZXJTZXNzaW9uR3JhbnRlZExpc3RlbmVyKCkgewoKICAgIAkJaWYgKCB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAneHInIGluIG5hdmlnYXRvciApIHsKCiAgICAJCQkvLyBXZWJYUlZpZXdlciAoYmFzZWQgb24gRmlyZWZveCkgaGFzIGEgYnVnIHdoZXJlIGFkZEV2ZW50TGlzdGVuZXIKICAgIAkJCS8vIHRocm93cyBhIHNpbGVudCBleGNlcHRpb24gYW5kIGFib3J0cyBleGVjdXRpb24gZW50aXJlbHkuCiAgICAJCQlpZiAoIC9XZWJYUlZpZXdlclwvL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApICkgcmV0dXJuOwoKICAgIAkJCW5hdmlnYXRvci54ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmdyYW50ZWQnLCAoKSA9PiB7CgogICAgCQkJCVZSQnV0dG9uLnhyU2Vzc2lvbklzR3JhbnRlZCA9IHRydWU7CgogICAgCQkJfSApOwoKICAgIAkJfQoKICAgIAl9CgogICAgfQoKICAgIC8qKgogICAgICogV2hldGhlciBhIFhSIHNlc3Npb24gaGFzIGJlZW4gZ3JhbnRlZCBvciBub3QuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKiBAZGVmYXVsdCBmYWxzZQogICAgICovCiAgICBWUkJ1dHRvbi54clNlc3Npb25Jc0dyYW50ZWQgPSBmYWxzZTsKICAgIFZSQnV0dG9uLnJlZ2lzdGVyU2Vzc2lvbkdyYW50ZWRMaXN0ZW5lcigpOwoKICAgIC8qKgogICAgICogQGxpY2Vuc2UKICAgICAqIHdlYnhyLXBvbHlmaWxsCiAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMTcgR29vZ2xlCiAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICoKICAgICAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICoKICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbGljZW5zZQogICAgICogY2FyZGJvYXJkLXZyLWRpc3BsYXkKICAgICAqIENvcHlyaWdodCAoYykgMjAxNS0yMDE3IEdvb2dsZQogICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAqCiAgICAgKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICAgICAqCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICAgICAqLwoKICAgIC8qKgogICAgICogQGxpY2Vuc2UKICAgICAqIHdlYnZyLXBvbHlmaWxsLWRwZGIgCiAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMTcgR29vZ2xlCiAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICoKICAgICAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICoKICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbGljZW5zZQogICAgICogd2dsdS1wcmVzZXJ2ZS1zdGF0ZQogICAgICogQ29weXJpZ2h0IChjKSAyMDE2LCBCcmFuZG9uIEpvbmVzLgogICAgICoKICAgICAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKICAgICAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiAgICAgKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiAgICAgKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiAgICAgKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKICAgICAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiAgICAgKgogICAgICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KICAgICAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogICAgICoKICAgICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCiAgICAgKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKICAgICAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQogICAgICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgogICAgICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKICAgICAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KICAgICAqIFRIRSBTT0ZUV0FSRS4KICAgICAqLwoKICAgIC8qKgogICAgICogQGxpY2Vuc2UKICAgICAqIG5vc2xlZXAuanMKICAgICAqIENvcHlyaWdodCAoYykgMjAxNywgUmljaCBUaWJiZXR0CiAgICAgKgogICAgICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQogICAgICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKICAgICAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKICAgICAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKICAgICAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwogICAgICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICAgICAqCiAgICAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgogICAgICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAgICAgKgogICAgICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKICAgICAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogICAgICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCiAgICAgKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiAgICAgKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogICAgICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgogICAgICogVEhFIFNPRlRXQVJFLgogICAgICovCgogICAgY29uc3QgX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoKICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoKICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9OwoKICAgIGNvbnN0IFBSSVZBVEUgPSBTeW1ib2woJ0BAd2VieHItcG9seWZpbGwvRXZlbnRUYXJnZXQnKTsKICAgIGNsYXNzIEV2ZW50VGFyZ2V0IHsKICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpc1tQUklWQVRFXSA9IHsKICAgICAgICAgIGxpc3RlbmVyczogbmV3IE1hcCgpLAogICAgICAgIH07CiAgICAgIH0KICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikgewogICAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IEVycm9yKCdgdHlwZWAgbXVzdCBiZSBhIHN0cmluZycpOyB9CiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBuZXcgRXJyb3IoJ2BsaXN0ZW5lcmAgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7IH0KICAgICAgICBjb25zdCB0eXBlZExpc3RlbmVycyA9IHRoaXNbUFJJVkFURV0ubGlzdGVuZXJzLmdldCh0eXBlKSB8fCBbXTsKICAgICAgICB0eXBlZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKICAgICAgICB0aGlzW1BSSVZBVEVdLmxpc3RlbmVycy5zZXQodHlwZSwgdHlwZWRMaXN0ZW5lcnMpOwogICAgICB9CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBFcnJvcignYHR5cGVgIG11c3QgYmUgYSBzdHJpbmcnKTsgfQogICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHsgdGhyb3cgbmV3IEVycm9yKCdgbGlzdGVuZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpOyB9CiAgICAgICAgY29uc3QgdHlwZWRMaXN0ZW5lcnMgPSB0aGlzW1BSSVZBVEVdLmxpc3RlbmVycy5nZXQodHlwZSkgfHwgW107CiAgICAgICAgZm9yIChsZXQgaSA9IHR5cGVkTGlzdGVuZXJzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIGlmICh0eXBlZExpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIpIHsKICAgICAgICAgICAgdHlwZWRMaXN0ZW5lcnMucG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGRpc3BhdGNoRXZlbnQodHlwZSwgZXZlbnQpIHsKICAgICAgICBjb25zdCB0eXBlZExpc3RlbmVycyA9IHRoaXNbUFJJVkFURV0ubGlzdGVuZXJzLmdldCh0eXBlKSB8fCBbXTsKICAgICAgICBjb25zdCBxdWV1ZSA9IFtdOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZWRMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHF1ZXVlW2ldID0gdHlwZWRMaXN0ZW5lcnNbaV07CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIHF1ZXVlKSB7CiAgICAgICAgICBsaXN0ZW5lcihldmVudCk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgdGhpc1tgb24ke3R5cGV9YF0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIHRoaXNbYG9uJHt0eXBlfWBdKGV2ZW50KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7CiAgICBsZXQgQVJSQVlfVFlQRSA9ICh0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykgPyBGbG9hdDMyQXJyYXkgOiBBcnJheTsKCiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7CiAgICAgIGxldCBvdXQgPSBuZXcgQVJSQVlfVFlQRSgxNik7CiAgICAgIGlmKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7CiAgICAgICAgb3V0WzFdID0gMDsKICAgICAgICBvdXRbMl0gPSAwOwogICAgICAgIG91dFszXSA9IDA7CiAgICAgICAgb3V0WzRdID0gMDsKICAgICAgICBvdXRbNl0gPSAwOwogICAgICAgIG91dFs3XSA9IDA7CiAgICAgICAgb3V0WzhdID0gMDsKICAgICAgICBvdXRbOV0gPSAwOwogICAgICAgIG91dFsxMV0gPSAwOwogICAgICAgIG91dFsxMl0gPSAwOwogICAgICAgIG91dFsxM10gPSAwOwogICAgICAgIG91dFsxNF0gPSAwOwogICAgICB9CiAgICAgIG91dFswXSA9IDE7CiAgICAgIG91dFs1XSA9IDE7CiAgICAgIG91dFsxMF0gPSAxOwogICAgICBvdXRbMTVdID0gMTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBjb3B5KG91dCwgYSkgewogICAgICBvdXRbMF0gPSBhWzBdOwogICAgICBvdXRbMV0gPSBhWzFdOwogICAgICBvdXRbMl0gPSBhWzJdOwogICAgICBvdXRbM10gPSBhWzNdOwogICAgICBvdXRbNF0gPSBhWzRdOwogICAgICBvdXRbNV0gPSBhWzVdOwogICAgICBvdXRbNl0gPSBhWzZdOwogICAgICBvdXRbN10gPSBhWzddOwogICAgICBvdXRbOF0gPSBhWzhdOwogICAgICBvdXRbOV0gPSBhWzldOwogICAgICBvdXRbMTBdID0gYVsxMF07CiAgICAgIG91dFsxMV0gPSBhWzExXTsKICAgICAgb3V0WzEyXSA9IGFbMTJdOwogICAgICBvdXRbMTNdID0gYVsxM107CiAgICAgIG91dFsxNF0gPSBhWzE0XTsKICAgICAgb3V0WzE1XSA9IGFbMTVdOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKCiAgICBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHsKICAgICAgb3V0WzBdID0gMTsKICAgICAgb3V0WzFdID0gMDsKICAgICAgb3V0WzJdID0gMDsKICAgICAgb3V0WzNdID0gMDsKICAgICAgb3V0WzRdID0gMDsKICAgICAgb3V0WzVdID0gMTsKICAgICAgb3V0WzZdID0gMDsKICAgICAgb3V0WzddID0gMDsKICAgICAgb3V0WzhdID0gMDsKICAgICAgb3V0WzldID0gMDsKICAgICAgb3V0WzEwXSA9IDE7CiAgICAgIG91dFsxMV0gPSAwOwogICAgICBvdXRbMTJdID0gMDsKICAgICAgb3V0WzEzXSA9IDA7CiAgICAgIG91dFsxNF0gPSAwOwogICAgICBvdXRbMTVdID0gMTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7CiAgICAgIGxldCBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLCBhMDMgPSBhWzNdOwogICAgICBsZXQgYTEwID0gYVs0XSwgYTExID0gYVs1XSwgYTEyID0gYVs2XSwgYTEzID0gYVs3XTsKICAgICAgbGV0IGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXTsKICAgICAgbGV0IGEzMCA9IGFbMTJdLCBhMzEgPSBhWzEzXSwgYTMyID0gYVsxNF0sIGEzMyA9IGFbMTVdOwogICAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwOwogICAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwOwogICAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwOwogICAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExOwogICAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExOwogICAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyOwogICAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwOwogICAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwOwogICAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwOwogICAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxOwogICAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxOwogICAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOwogICAgICBsZXQgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2OwogICAgICBpZiAoIWRldCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGRldCA9IDEuMCAvIGRldDsKICAgICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7CiAgICAgIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0OwogICAgICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDsKICAgICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7CiAgICAgIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0OwogICAgICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDsKICAgICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7CiAgICAgIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0OwogICAgICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDsKICAgICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7CiAgICAgIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDsKICAgICAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0OwogICAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7CiAgICAgIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDsKICAgICAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0OwogICAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgoKICAgIGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikgewogICAgICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXTsKICAgICAgbGV0IGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN107CiAgICAgIGxldCBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV07CiAgICAgIGxldCBhMzAgPSBhWzEyXSwgYTMxID0gYVsxM10sIGEzMiA9IGFbMTRdLCBhMzMgPSBhWzE1XTsKICAgICAgbGV0IGIwICA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM107CiAgICAgIG91dFswXSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDsKICAgICAgb3V0WzFdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxOwogICAgICBvdXRbMl0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7CiAgICAgIG91dFszXSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMzsKICAgICAgYjAgPSBiWzRdOyBiMSA9IGJbNV07IGIyID0gYls2XTsgYjMgPSBiWzddOwogICAgICBvdXRbNF0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7CiAgICAgIG91dFs1XSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTsKICAgICAgb3V0WzZdID0gYjAqYTAyICsgYjEqYTEyICsgYjIqYTIyICsgYjMqYTMyOwogICAgICBvdXRbN10gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7CiAgICAgIGIwID0gYls4XTsgYjEgPSBiWzldOyBiMiA9IGJbMTBdOyBiMyA9IGJbMTFdOwogICAgICBvdXRbOF0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7CiAgICAgIG91dFs5XSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTsKICAgICAgb3V0WzEwXSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjsKICAgICAgb3V0WzExXSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMzsKICAgICAgYjAgPSBiWzEyXTsgYjEgPSBiWzEzXTsgYjIgPSBiWzE0XTsgYjMgPSBiWzE1XTsKICAgICAgb3V0WzEyXSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDsKICAgICAgb3V0WzEzXSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTsKICAgICAgb3V0WzE0XSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjsKICAgICAgb3V0WzE1XSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMzsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCgoKCgoKCgoKCgoKICAgIGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgcSwgdikgewogICAgICBsZXQgeCA9IHFbMF0sIHkgPSBxWzFdLCB6ID0gcVsyXSwgdyA9IHFbM107CiAgICAgIGxldCB4MiA9IHggKyB4OwogICAgICBsZXQgeTIgPSB5ICsgeTsKICAgICAgbGV0IHoyID0geiArIHo7CiAgICAgIGxldCB4eCA9IHggKiB4MjsKICAgICAgbGV0IHh5ID0geCAqIHkyOwogICAgICBsZXQgeHogPSB4ICogejI7CiAgICAgIGxldCB5eSA9IHkgKiB5MjsKICAgICAgbGV0IHl6ID0geSAqIHoyOwogICAgICBsZXQgenogPSB6ICogejI7CiAgICAgIGxldCB3eCA9IHcgKiB4MjsKICAgICAgbGV0IHd5ID0gdyAqIHkyOwogICAgICBsZXQgd3ogPSB3ICogejI7CiAgICAgIG91dFswXSA9IDEgLSAoeXkgKyB6eik7CiAgICAgIG91dFsxXSA9IHh5ICsgd3o7CiAgICAgIG91dFsyXSA9IHh6IC0gd3k7CiAgICAgIG91dFszXSA9IDA7CiAgICAgIG91dFs0XSA9IHh5IC0gd3o7CiAgICAgIG91dFs1XSA9IDEgLSAoeHggKyB6eik7CiAgICAgIG91dFs2XSA9IHl6ICsgd3g7CiAgICAgIG91dFs3XSA9IDA7CiAgICAgIG91dFs4XSA9IHh6ICsgd3k7CiAgICAgIG91dFs5XSA9IHl6IC0gd3g7CiAgICAgIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpOwogICAgICBvdXRbMTFdID0gMDsKICAgICAgb3V0WzEyXSA9IHZbMF07CiAgICAgIG91dFsxM10gPSB2WzFdOwogICAgICBvdXRbMTRdID0gdlsyXTsKICAgICAgb3V0WzE1XSA9IDE7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHsKICAgICAgb3V0WzBdID0gbWF0WzEyXTsKICAgICAgb3V0WzFdID0gbWF0WzEzXTsKICAgICAgb3V0WzJdID0gbWF0WzE0XTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSb3RhdGlvbihvdXQsIG1hdCkgewogICAgICBsZXQgdHJhY2UgPSBtYXRbMF0gKyBtYXRbNV0gKyBtYXRbMTBdOwogICAgICBsZXQgUyA9IDA7CiAgICAgIGlmICh0cmFjZSA+IDApIHsKICAgICAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7CiAgICAgICAgb3V0WzNdID0gMC4yNSAqIFM7CiAgICAgICAgb3V0WzBdID0gKG1hdFs2XSAtIG1hdFs5XSkgLyBTOwogICAgICAgIG91dFsxXSA9IChtYXRbOF0gLSBtYXRbMl0pIC8gUzsKICAgICAgICBvdXRbMl0gPSAobWF0WzFdIC0gbWF0WzRdKSAvIFM7CiAgICAgIH0gZWxzZSBpZiAoKG1hdFswXSA+IG1hdFs1XSkgJiYgKG1hdFswXSA+IG1hdFsxMF0pKSB7CiAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbMF0gLSBtYXRbNV0gLSBtYXRbMTBdKSAqIDI7CiAgICAgICAgb3V0WzNdID0gKG1hdFs2XSAtIG1hdFs5XSkgLyBTOwogICAgICAgIG91dFswXSA9IDAuMjUgKiBTOwogICAgICAgIG91dFsxXSA9IChtYXRbMV0gKyBtYXRbNF0pIC8gUzsKICAgICAgICBvdXRbMl0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7CiAgICAgIH0gZWxzZSBpZiAobWF0WzVdID4gbWF0WzEwXSkgewogICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzVdIC0gbWF0WzBdIC0gbWF0WzEwXSkgKiAyOwogICAgICAgIG91dFszXSA9IChtYXRbOF0gLSBtYXRbMl0pIC8gUzsKICAgICAgICBvdXRbMF0gPSAobWF0WzFdICsgbWF0WzRdKSAvIFM7CiAgICAgICAgb3V0WzFdID0gMC4yNSAqIFM7CiAgICAgICAgb3V0WzJdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTOwogICAgICB9IGVsc2UgewogICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzEwXSAtIG1hdFswXSAtIG1hdFs1XSkgKiAyOwogICAgICAgIG91dFszXSA9IChtYXRbMV0gLSBtYXRbNF0pIC8gUzsKICAgICAgICBvdXRbMF0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7CiAgICAgICAgb3V0WzFdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTOwogICAgICAgIG91dFsyXSA9IDAuMjUgKiBTOwogICAgICB9CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgoKCgogICAgZnVuY3Rpb24gcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikgewogICAgICBsZXQgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSwgbmY7CiAgICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7CiAgICAgIG91dFsxXSA9IDA7CiAgICAgIG91dFsyXSA9IDA7CiAgICAgIG91dFszXSA9IDA7CiAgICAgIG91dFs0XSA9IDA7CiAgICAgIG91dFs1XSA9IGY7CiAgICAgIG91dFs2XSA9IDA7CiAgICAgIG91dFs3XSA9IDA7CiAgICAgIG91dFs4XSA9IDA7CiAgICAgIG91dFs5XSA9IDA7CiAgICAgIG91dFsxMV0gPSAtMTsKICAgICAgb3V0WzEyXSA9IDA7CiAgICAgIG91dFsxM10gPSAwOwogICAgICBvdXRbMTVdID0gMDsKICAgICAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHsKICAgICAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7CiAgICAgICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mOwogICAgICAgIG91dFsxNF0gPSAoMiAqIGZhciAqIG5lYXIpICogbmY7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3V0WzEwXSA9IC0xOwogICAgICAgIG91dFsxNF0gPSAtMiAqIG5lYXI7CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGUkMSgpIHsKICAgICAgbGV0IG91dCA9IG5ldyBBUlJBWV9UWVBFKDMpOwogICAgICBpZihBUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkgewogICAgICAgIG91dFswXSA9IDA7CiAgICAgICAgb3V0WzFdID0gMDsKICAgICAgICBvdXRbMl0gPSAwOwogICAgICB9CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CiAgICBmdW5jdGlvbiBjbG9uZSQxKGEpIHsKICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDMpOwogICAgICBvdXRbMF0gPSBhWzBdOwogICAgICBvdXRbMV0gPSBhWzFdOwogICAgICBvdXRbMl0gPSBhWzJdOwogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgZnVuY3Rpb24gbGVuZ3RoKGEpIHsKICAgICAgbGV0IHggPSBhWzBdOwogICAgICBsZXQgeSA9IGFbMV07CiAgICAgIGxldCB6ID0gYVsyXTsKICAgICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopOwogICAgfQogICAgZnVuY3Rpb24gZnJvbVZhbHVlcyQxKHgsIHksIHopIHsKICAgICAgbGV0IG91dCA9IG5ldyBBUlJBWV9UWVBFKDMpOwogICAgICBvdXRbMF0gPSB4OwogICAgICBvdXRbMV0gPSB5OwogICAgICBvdXRbMl0gPSB6OwogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgZnVuY3Rpb24gY29weSQxKG91dCwgYSkgewogICAgICBvdXRbMF0gPSBhWzBdOwogICAgICBvdXRbMV0gPSBhWzFdOwogICAgICBvdXRbMl0gPSBhWzJdOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCQxKG91dCwgYSwgYikgewogICAgICBvdXRbMF0gPSBhWzBdICsgYlswXTsKICAgICAgb3V0WzFdID0gYVsxXSArIGJbMV07CiAgICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKCgoKCgoKCiAgICBmdW5jdGlvbiBzY2FsZSQxKG91dCwgYSwgYikgewogICAgICBvdXRbMF0gPSBhWzBdICogYjsKICAgICAgb3V0WzFdID0gYVsxXSAqIGI7CiAgICAgIG91dFsyXSA9IGFbMl0gKiBiOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKCgoKCgogICAgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkgewogICAgICBsZXQgeCA9IGFbMF07CiAgICAgIGxldCB5ID0gYVsxXTsKICAgICAgbGV0IHogPSBhWzJdOwogICAgICBsZXQgbGVuID0geCp4ICsgeSp5ICsgeip6OwogICAgICBpZiAobGVuID4gMCkgewogICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTsKICAgICAgICBvdXRbMF0gPSBhWzBdICogbGVuOwogICAgICAgIG91dFsxXSA9IGFbMV0gKiBsZW47CiAgICAgICAgb3V0WzJdID0gYVsyXSAqIGxlbjsKICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgZnVuY3Rpb24gZG90KGEsIGIpIHsKICAgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTsKICAgIH0KICAgIGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikgewogICAgICBsZXQgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXTsKICAgICAgbGV0IGJ4ID0gYlswXSwgYnkgPSBiWzFdLCBieiA9IGJbMl07CiAgICAgIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5OwogICAgICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejsKICAgICAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgoKCgoKCiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkgewogICAgICAgIGxldCBxeCA9IHFbMF0sIHF5ID0gcVsxXSwgcXogPSBxWzJdLCBxdyA9IHFbM107CiAgICAgICAgbGV0IHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl07CiAgICAgICAgbGV0IHV2eCA9IHF5ICogeiAtIHF6ICogeSwKICAgICAgICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LAogICAgICAgICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7CiAgICAgICAgbGV0IHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5LAogICAgICAgICAgICB1dXZ5ID0gcXogKiB1dnggLSBxeCAqIHV2eiwKICAgICAgICAgICAgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7CiAgICAgICAgbGV0IHcyID0gcXcgKiAyOwogICAgICAgIHV2eCAqPSB3MjsKICAgICAgICB1dnkgKj0gdzI7CiAgICAgICAgdXZ6ICo9IHcyOwogICAgICAgIHV1dnggKj0gMjsKICAgICAgICB1dXZ5ICo9IDI7CiAgICAgICAgdXV2eiAqPSAyOwogICAgICAgIG91dFswXSA9IHggKyB1dnggKyB1dXZ4OwogICAgICAgIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5OwogICAgICAgIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6OwogICAgICAgIHJldHVybiBvdXQ7CiAgICB9CgoKCiAgICBmdW5jdGlvbiBhbmdsZShhLCBiKSB7CiAgICAgIGxldCB0ZW1wQSA9IGZyb21WYWx1ZXMkMShhWzBdLCBhWzFdLCBhWzJdKTsKICAgICAgbGV0IHRlbXBCID0gZnJvbVZhbHVlcyQxKGJbMF0sIGJbMV0sIGJbMl0pOwogICAgICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTsKICAgICAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7CiAgICAgIGxldCBjb3NpbmUgPSBkb3QodGVtcEEsIHRlbXBCKTsKICAgICAgaWYoY29zaW5lID4gMS4wKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgZWxzZSBpZihjb3NpbmUgPCAtMSkgewogICAgICAgIHJldHVybiBNYXRoLlBJOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBNYXRoLmFjb3MoY29zaW5lKTsKICAgICAgfQogICAgfQoKCgoKCgoKCiAgICBjb25zdCBsZW4gPSBsZW5ndGg7CgogICAgKChmdW5jdGlvbigpIHsKICAgICAgbGV0IHZlYyA9IGNyZWF0ZSQxKCk7CiAgICAgIHJldHVybiBmdW5jdGlvbihhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHsKICAgICAgICBsZXQgaSwgbDsKICAgICAgICBpZighc3RyaWRlKSB7CiAgICAgICAgICBzdHJpZGUgPSAzOwogICAgICAgIH0KICAgICAgICBpZighb2Zmc2V0KSB7CiAgICAgICAgICBvZmZzZXQgPSAwOwogICAgICAgIH0KICAgICAgICBpZihjb3VudCkgewogICAgICAgICAgbCA9IE1hdGgubWluKChjb3VudCAqIHN0cmlkZSkgKyBvZmZzZXQsIGEubGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbCA9IGEubGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7CiAgICAgICAgICB2ZWNbMF0gPSBhW2ldOyB2ZWNbMV0gPSBhW2krMV07IHZlY1syXSA9IGFbaSsyXTsKICAgICAgICAgIGZuKHZlYywgdmVjLCBhcmcpOwogICAgICAgICAgYVtpXSA9IHZlY1swXTsgYVtpKzFdID0gdmVjWzFdOyBhW2krMl0gPSB2ZWNbMl07CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgICB9OwogICAgfSkpKCk7CgogICAgZnVuY3Rpb24gY3JlYXRlJDIoKSB7CiAgICAgIGxldCBvdXQgPSBuZXcgQVJSQVlfVFlQRSg5KTsKICAgICAgaWYoQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHsKICAgICAgICBvdXRbMV0gPSAwOwogICAgICAgIG91dFsyXSA9IDA7CiAgICAgICAgb3V0WzNdID0gMDsKICAgICAgICBvdXRbNV0gPSAwOwogICAgICAgIG91dFs2XSA9IDA7CiAgICAgICAgb3V0WzddID0gMDsKICAgICAgfQogICAgICBvdXRbMF0gPSAxOwogICAgICBvdXRbNF0gPSAxOwogICAgICBvdXRbOF0gPSAxOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZSQzKCkgewogICAgICBsZXQgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNCk7CiAgICAgIGlmKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7CiAgICAgICAgb3V0WzBdID0gMDsKICAgICAgICBvdXRbMV0gPSAwOwogICAgICAgIG91dFsyXSA9IDA7CiAgICAgICAgb3V0WzNdID0gMDsKICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgZnVuY3Rpb24gY2xvbmUkMyhhKSB7CiAgICAgIGxldCBvdXQgPSBuZXcgQVJSQVlfVFlQRSg0KTsKICAgICAgb3V0WzBdID0gYVswXTsKICAgICAgb3V0WzFdID0gYVsxXTsKICAgICAgb3V0WzJdID0gYVsyXTsKICAgICAgb3V0WzNdID0gYVszXTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KICAgIGZ1bmN0aW9uIGZyb21WYWx1ZXMkMyh4LCB5LCB6LCB3KSB7CiAgICAgIGxldCBvdXQgPSBuZXcgQVJSQVlfVFlQRSg0KTsKICAgICAgb3V0WzBdID0geDsKICAgICAgb3V0WzFdID0geTsKICAgICAgb3V0WzJdID0gejsKICAgICAgb3V0WzNdID0gdzsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KICAgIGZ1bmN0aW9uIGNvcHkkMyhvdXQsIGEpIHsKICAgICAgb3V0WzBdID0gYVswXTsKICAgICAgb3V0WzFdID0gYVsxXTsKICAgICAgb3V0WzJdID0gYVsyXTsKICAgICAgb3V0WzNdID0gYVszXTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCgoKCgoKCgoKCgoKCgoKCgoKICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSQxKG91dCwgYSkgewogICAgICBsZXQgeCA9IGFbMF07CiAgICAgIGxldCB5ID0gYVsxXTsKICAgICAgbGV0IHogPSBhWzJdOwogICAgICBsZXQgdyA9IGFbM107CiAgICAgIGxldCBsZW4gPSB4KnggKyB5KnkgKyB6KnogKyB3Knc7CiAgICAgIGlmIChsZW4gPiAwKSB7CiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pOwogICAgICAgIG91dFswXSA9IHggKiBsZW47CiAgICAgICAgb3V0WzFdID0geSAqIGxlbjsKICAgICAgICBvdXRbMl0gPSB6ICogbGVuOwogICAgICAgIG91dFszXSA9IHcgKiBsZW47CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH0KCgoKCgoKCgoKCgoKCgoKICAgICgoZnVuY3Rpb24oKSB7CiAgICAgIGxldCB2ZWMgPSBjcmVhdGUkMygpOwogICAgICByZXR1cm4gZnVuY3Rpb24oYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7CiAgICAgICAgbGV0IGksIGw7CiAgICAgICAgaWYoIXN0cmlkZSkgewogICAgICAgICAgc3RyaWRlID0gNDsKICAgICAgICB9CiAgICAgICAgaWYoIW9mZnNldCkgewogICAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgaWYoY291bnQpIHsKICAgICAgICAgIGwgPSBNYXRoLm1pbigoY291bnQgKiBzdHJpZGUpICsgb2Zmc2V0LCBhLmxlbmd0aCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGwgPSBhLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkgewogICAgICAgICAgdmVjWzBdID0gYVtpXTsgdmVjWzFdID0gYVtpKzFdOyB2ZWNbMl0gPSBhW2krMl07IHZlY1szXSA9IGFbaSszXTsKICAgICAgICAgIGZuKHZlYywgdmVjLCBhcmcpOwogICAgICAgICAgYVtpXSA9IHZlY1swXTsgYVtpKzFdID0gdmVjWzFdOyBhW2krMl0gPSB2ZWNbMl07IGFbaSszXSA9IHZlY1szXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGE7CiAgICAgIH07CiAgICB9KSkoKTsKCiAgICBmdW5jdGlvbiBjcmVhdGUkNCgpIHsKICAgICAgbGV0IG91dCA9IG5ldyBBUlJBWV9UWVBFKDQpOwogICAgICBpZihBUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkgewogICAgICAgIG91dFswXSA9IDA7CiAgICAgICAgb3V0WzFdID0gMDsKICAgICAgICBvdXRbMl0gPSAwOwogICAgICB9CiAgICAgIG91dFszXSA9IDE7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7CiAgICAgIHJhZCA9IHJhZCAqIDAuNTsKICAgICAgbGV0IHMgPSBNYXRoLnNpbihyYWQpOwogICAgICBvdXRbMF0gPSBzICogYXhpc1swXTsKICAgICAgb3V0WzFdID0gcyAqIGF4aXNbMV07CiAgICAgIG91dFsyXSA9IHMgKiBheGlzWzJdOwogICAgICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpOwogICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGZ1bmN0aW9uIG11bHRpcGx5JDQob3V0LCBhLCBiKSB7CiAgICAgIGxldCBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM107CiAgICAgIGxldCBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdLCBidyA9IGJbM107CiAgICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7CiAgICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7CiAgICAgIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7CiAgICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgoKCgogICAgZnVuY3Rpb24gc2xlcnAob3V0LCBhLCBiLCB0KSB7CiAgICAgIGxldCBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM107CiAgICAgIGxldCBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdLCBidyA9IGJbM107CiAgICAgIGxldCBvbWVnYSwgY29zb20sIHNpbm9tLCBzY2FsZTAsIHNjYWxlMTsKICAgICAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3OwogICAgICBpZiAoIGNvc29tIDwgMC4wICkgewogICAgICAgIGNvc29tID0gLWNvc29tOwogICAgICAgIGJ4ID0gLSBieDsKICAgICAgICBieSA9IC0gYnk7CiAgICAgICAgYnogPSAtIGJ6OwogICAgICAgIGJ3ID0gLSBidzsKICAgICAgfQogICAgICBpZiAoICgxLjAgLSBjb3NvbSkgPiBFUFNJTE9OICkgewogICAgICAgIG9tZWdhICA9IE1hdGguYWNvcyhjb3NvbSk7CiAgICAgICAgc2lub20gID0gTWF0aC5zaW4ob21lZ2EpOwogICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tOwogICAgICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzY2FsZTAgPSAxLjAgLSB0OwogICAgICAgIHNjYWxlMSA9IHQ7CiAgICAgIH0KICAgICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDsKICAgICAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTsKICAgICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejsKICAgICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidzsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnZlcnQkMihvdXQsIGEpIHsKICAgICAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXTsKICAgICAgbGV0IGRvdCQkMSA9IGEwKmEwICsgYTEqYTEgKyBhMiphMiArIGEzKmEzOwogICAgICBsZXQgaW52RG90ID0gZG90JCQxID8gMS4wL2RvdCQkMSA6IDA7CiAgICAgIG91dFswXSA9IC1hMCppbnZEb3Q7CiAgICAgIG91dFsxXSA9IC1hMSppbnZEb3Q7CiAgICAgIG91dFsyXSA9IC1hMippbnZEb3Q7CiAgICAgIG91dFszXSA9IGEzKmludkRvdDsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHsKICAgICAgbGV0IGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTsKICAgICAgbGV0IGZSb290OwogICAgICBpZiAoIGZUcmFjZSA+IDAuMCApIHsKICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOwogICAgICAgIG91dFszXSA9IDAuNSAqIGZSb290OwogICAgICAgIGZSb290ID0gMC41L2ZSb290OwogICAgICAgIG91dFswXSA9IChtWzVdLW1bN10pKmZSb290OwogICAgICAgIG91dFsxXSA9IChtWzZdLW1bMl0pKmZSb290OwogICAgICAgIG91dFsyXSA9IChtWzFdLW1bM10pKmZSb290OwogICAgICB9IGVsc2UgewogICAgICAgIGxldCBpID0gMDsKICAgICAgICBpZiAoIG1bNF0gPiBtWzBdICkKICAgICAgICAgIGkgPSAxOwogICAgICAgIGlmICggbVs4XSA+IG1baSozK2ldICkKICAgICAgICAgIGkgPSAyOwogICAgICAgIGxldCBqID0gKGkrMSklMzsKICAgICAgICBsZXQgayA9IChpKzIpJTM7CiAgICAgICAgZlJvb3QgPSBNYXRoLnNxcnQobVtpKjMraV0tbVtqKjMral0tbVtrKjMra10gKyAxLjApOwogICAgICAgIG91dFtpXSA9IDAuNSAqIGZSb290OwogICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7CiAgICAgICAgb3V0WzNdID0gKG1baiozK2tdIC0gbVtrKjMral0pICogZlJvb3Q7CiAgICAgICAgb3V0W2pdID0gKG1baiozK2ldICsgbVtpKjMral0pICogZlJvb3Q7CiAgICAgICAgb3V0W2tdID0gKG1bayozK2ldICsgbVtpKjMra10pICogZlJvb3Q7CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH0KICAgIGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIHgsIHksIHopIHsKICAgICAgICBsZXQgaGFsZlRvUmFkID0gMC41ICogTWF0aC5QSSAvIDE4MC4wOwogICAgICAgIHggKj0gaGFsZlRvUmFkOwogICAgICAgIHkgKj0gaGFsZlRvUmFkOwogICAgICAgIHogKj0gaGFsZlRvUmFkOwogICAgICAgIGxldCBzeCA9IE1hdGguc2luKHgpOwogICAgICAgIGxldCBjeCA9IE1hdGguY29zKHgpOwogICAgICAgIGxldCBzeSA9IE1hdGguc2luKHkpOwogICAgICAgIGxldCBjeSA9IE1hdGguY29zKHkpOwogICAgICAgIGxldCBzeiA9IE1hdGguc2luKHopOwogICAgICAgIGxldCBjeiA9IE1hdGguY29zKHopOwogICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejsKICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7CiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6OwogICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejsKICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGNvbnN0IGNsb25lJDQgPSBjbG9uZSQzOwogICAgY29uc3QgZnJvbVZhbHVlcyQ0ID0gZnJvbVZhbHVlcyQzOwogICAgY29uc3QgY29weSQ0ID0gY29weSQzOwoKCgoKCgoKCgoKICAgIGNvbnN0IG5vcm1hbGl6ZSQyID0gbm9ybWFsaXplJDE7CgoKICAgICgoZnVuY3Rpb24oKSB7CiAgICAgIGxldCB0bXB2ZWMzID0gY3JlYXRlJDEoKTsKICAgICAgbGV0IHhVbml0VmVjMyA9IGZyb21WYWx1ZXMkMSgxLDAsMCk7CiAgICAgIGxldCB5VW5pdFZlYzMgPSBmcm9tVmFsdWVzJDEoMCwxLDApOwogICAgICByZXR1cm4gZnVuY3Rpb24ob3V0LCBhLCBiKSB7CiAgICAgICAgbGV0IGRvdCQkMSA9IGRvdChhLCBiKTsKICAgICAgICBpZiAoZG90JCQxIDwgLTAuOTk5OTk5KSB7CiAgICAgICAgICBjcm9zcyh0bXB2ZWMzLCB4VW5pdFZlYzMsIGEpOwogICAgICAgICAgaWYgKGxlbih0bXB2ZWMzKSA8IDAuMDAwMDAxKQogICAgICAgICAgICBjcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpOwogICAgICAgICAgbm9ybWFsaXplKHRtcHZlYzMsIHRtcHZlYzMpOwogICAgICAgICAgc2V0QXhpc0FuZ2xlKG91dCwgdG1wdmVjMywgTWF0aC5QSSk7CiAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgIH0gZWxzZSBpZiAoZG90JCQxID4gMC45OTk5OTkpIHsKICAgICAgICAgIG91dFswXSA9IDA7CiAgICAgICAgICBvdXRbMV0gPSAwOwogICAgICAgICAgb3V0WzJdID0gMDsKICAgICAgICAgIG91dFszXSA9IDE7CiAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjcm9zcyh0bXB2ZWMzLCBhLCBiKTsKICAgICAgICAgIG91dFswXSA9IHRtcHZlYzNbMF07CiAgICAgICAgICBvdXRbMV0gPSB0bXB2ZWMzWzFdOwogICAgICAgICAgb3V0WzJdID0gdG1wdmVjM1syXTsKICAgICAgICAgIG91dFszXSA9IDEgKyBkb3QkJDE7CiAgICAgICAgICByZXR1cm4gbm9ybWFsaXplJDIob3V0LCBvdXQpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0pKSgpOwogICAgKChmdW5jdGlvbiAoKSB7CiAgICAgIGxldCB0ZW1wMSA9IGNyZWF0ZSQ0KCk7CiAgICAgIGxldCB0ZW1wMiA9IGNyZWF0ZSQ0KCk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7CiAgICAgICAgc2xlcnAodGVtcDEsIGEsIGQsIHQpOwogICAgICAgIHNsZXJwKHRlbXAyLCBiLCBjLCB0KTsKICAgICAgICBzbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTsKICAgICAgICByZXR1cm4gb3V0OwogICAgICB9OwogICAgfSkoKSk7CiAgICAoKGZ1bmN0aW9uKCkgewogICAgICBsZXQgbWF0ciA9IGNyZWF0ZSQyKCk7CiAgICAgIHJldHVybiBmdW5jdGlvbihvdXQsIHZpZXcsIHJpZ2h0LCB1cCkgewogICAgICAgIG1hdHJbMF0gPSByaWdodFswXTsKICAgICAgICBtYXRyWzNdID0gcmlnaHRbMV07CiAgICAgICAgbWF0cls2XSA9IHJpZ2h0WzJdOwogICAgICAgIG1hdHJbMV0gPSB1cFswXTsKICAgICAgICBtYXRyWzRdID0gdXBbMV07CiAgICAgICAgbWF0cls3XSA9IHVwWzJdOwogICAgICAgIG1hdHJbMl0gPSAtdmlld1swXTsKICAgICAgICBtYXRyWzVdID0gLXZpZXdbMV07CiAgICAgICAgbWF0cls4XSA9IC12aWV3WzJdOwogICAgICAgIHJldHVybiBub3JtYWxpemUkMihvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpOwogICAgICB9OwogICAgfSkpKCk7CgogICAgY29uc3QgUFJJVkFURSQxID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSUmlnaWRUcmFuc2Zvcm0nKTsKICAgIGNsYXNzIFhSUmlnaWRUcmFuc2Zvcm0kMSB7CiAgICAgIGNvbnN0cnVjdG9yKCkgewogICAgICAgIHRoaXNbUFJJVkFURSQxXSA9IHsKICAgICAgICAgIG1hdHJpeDogbnVsbCwKICAgICAgICAgIHBvc2l0aW9uOiBudWxsLAogICAgICAgICAgb3JpZW50YXRpb246IG51bGwsCiAgICAgICAgICBpbnZlcnNlOiBudWxsLAogICAgICAgIH07CiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5tYXRyaXggPSBpZGVudGl0eShuZXcgRmxvYXQzMkFycmF5KDE2KSk7CiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5tYXRyaXggPSBhcmd1bWVudHNbMF07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ucG9zaXRpb24gPSB0aGlzLl9nZXRQb2ludChhcmd1bWVudHNbMF0pOwogICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ub3JpZW50YXRpb24gPSBET01Qb2ludFJlYWRPbmx5LmZyb21Qb2ludCh7CiAgICAgICAgICAgICAgICB4OiAwLCB5OiAwLCB6OiAwLCB3OiAxCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgewogICAgICAgICAgdGhpc1tQUklWQVRFJDFdLnBvc2l0aW9uID0gdGhpcy5fZ2V0UG9pbnQoYXJndW1lbnRzWzBdKTsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5vcmllbnRhdGlvbiA9IHRoaXMuX2dldFBvaW50KGFyZ3VtZW50c1sxXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVG9vIG1hbnkgYXJndW1lbnRzISIpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpc1tQUklWQVRFJDFdLm1hdHJpeCkgewogICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBjcmVhdGUkMSgpOwogICAgICAgICAgICBnZXRUcmFuc2xhdGlvbihwb3NpdGlvbiwgdGhpc1tQUklWQVRFJDFdLm1hdHJpeCk7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5wb3NpdGlvbiA9IERPTVBvaW50UmVhZE9ubHkuZnJvbVBvaW50KHsKICAgICAgICAgICAgICAgIHg6IHBvc2l0aW9uWzBdLAogICAgICAgICAgICAgICAgeTogcG9zaXRpb25bMV0sCiAgICAgICAgICAgICAgICB6OiBwb3NpdGlvblsyXQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uID0gY3JlYXRlJDQoKTsKICAgICAgICAgICAgZ2V0Um90YXRpb24ob3JpZW50YXRpb24sIHRoaXNbUFJJVkFURSQxXS5tYXRyaXgpOwogICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ub3JpZW50YXRpb24gPSBET01Qb2ludFJlYWRPbmx5LmZyb21Qb2ludCh7CiAgICAgICAgICAgICAgeDogb3JpZW50YXRpb25bMF0sCiAgICAgICAgICAgICAgeTogb3JpZW50YXRpb25bMV0sCiAgICAgICAgICAgICAgejogb3JpZW50YXRpb25bMl0sCiAgICAgICAgICAgICAgdzogb3JpZW50YXRpb25bM10KICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpc1tQUklWQVRFJDFdLm1hdHJpeCA9IGlkZW50aXR5KG5ldyBGbG9hdDMyQXJyYXkoMTYpKTsKICAgICAgICAgICAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24oCiAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDFdLm1hdHJpeCwKICAgICAgICAgICAgICBmcm9tVmFsdWVzJDQoCiAgICAgICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ub3JpZW50YXRpb24ueCwKICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5vcmllbnRhdGlvbi55LAogICAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDFdLm9yaWVudGF0aW9uLnosCiAgICAgICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ub3JpZW50YXRpb24udyksCiAgICAgICAgICAgICAgZnJvbVZhbHVlcyQxKAogICAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDFdLnBvc2l0aW9uLngsCiAgICAgICAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0ucG9zaXRpb24ueSwKICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5wb3NpdGlvbi56KQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICBfZ2V0UG9pbnQoYXJnKSB7CiAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIERPTVBvaW50UmVhZE9ubHkpIHsKICAgICAgICAgIHJldHVybiBhcmc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBET01Qb2ludFJlYWRPbmx5LmZyb21Qb2ludChhcmcpOwogICAgICB9CiAgICAgIGdldCBtYXRyaXgoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMV0ubWF0cml4OyB9CiAgICAgIGdldCBwb3NpdGlvbigpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQxXS5wb3NpdGlvbjsgfQogICAgICBnZXQgb3JpZW50YXRpb24oKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMV0ub3JpZW50YXRpb247IH0KICAgICAgZ2V0IGludmVyc2UoKSB7CiAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxXS5pbnZlcnNlID09PSBudWxsKSB7CiAgICAgICAgICBsZXQgaW52TWF0cml4ID0gaWRlbnRpdHkobmV3IEZsb2F0MzJBcnJheSgxNikpOwogICAgICAgICAgaW52ZXJ0KGludk1hdHJpeCwgdGhpc1tQUklWQVRFJDFdLm1hdHJpeCk7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMV0uaW52ZXJzZSA9IG5ldyBYUlJpZ2lkVHJhbnNmb3JtJDEoaW52TWF0cml4KTsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxXS5pbnZlcnNlW1BSSVZBVEUkMV0uaW52ZXJzZSA9IHRoaXM7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzW1BSSVZBVEUkMV0uaW52ZXJzZTsKICAgICAgfQogICAgfQoKICAgIGNvbnN0IFBSSVZBVEUkMiA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUlNwYWNlJyk7CgogICAgY2xhc3MgWFJTcGFjZSB7CiAgICAgIGNvbnN0cnVjdG9yKHNwZWNpYWxUeXBlID0gbnVsbCwgaW5wdXRTb3VyY2UgPSBudWxsKSB7CiAgICAgICAgdGhpc1tQUklWQVRFJDJdID0gewogICAgICAgICAgc3BlY2lhbFR5cGUsCiAgICAgICAgICBpbnB1dFNvdXJjZSwKICAgICAgICAgIGJhc2VNYXRyaXg6IG51bGwsCiAgICAgICAgICBpbnZlcnNlQmFzZU1hdHJpeDogbnVsbCwKICAgICAgICAgIGxhc3RGcmFtZUlkOiAtMQogICAgICAgIH07CiAgICAgIH0KICAgICAgZ2V0IF9zcGVjaWFsVHlwZSgpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDJdLnNwZWNpYWxUeXBlOwogICAgICB9CiAgICAgIGdldCBfaW5wdXRTb3VyY2UoKSB7CiAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQyXS5pbnB1dFNvdXJjZTsKICAgICAgfQogICAgICBfZW5zdXJlUG9zZVVwZGF0ZWQoZGV2aWNlLCBmcmFtZUlkKSB7CiAgICAgICAgaWYgKGZyYW1lSWQgPT0gdGhpc1tQUklWQVRFJDJdLmxhc3RGcmFtZUlkKSByZXR1cm47CiAgICAgICAgdGhpc1tQUklWQVRFJDJdLmxhc3RGcmFtZUlkID0gZnJhbWVJZDsKICAgICAgICB0aGlzLl9vblBvc2VVcGRhdGUoZGV2aWNlKTsKICAgICAgfQogICAgICBfb25Qb3NlVXBkYXRlKGRldmljZSkgewogICAgICAgIGlmICh0aGlzW1BSSVZBVEUkMl0uc3BlY2lhbFR5cGUgPT0gJ3ZpZXdlcicpIHsKICAgICAgICAgIHRoaXMuX2Jhc2VNYXRyaXggPSBkZXZpY2UuZ2V0QmFzZVBvc2VNYXRyaXgoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc2V0IF9iYXNlTWF0cml4KG1hdHJpeCkgewogICAgICAgIHRoaXNbUFJJVkFURSQyXS5iYXNlTWF0cml4ID0gbWF0cml4OwogICAgICAgIHRoaXNbUFJJVkFURSQyXS5pbnZlcnNlQmFzZU1hdHJpeCA9IG51bGw7CiAgICAgIH0KICAgICAgZ2V0IF9iYXNlTWF0cml4KCkgewogICAgICAgIGlmICghdGhpc1tQUklWQVRFJDJdLmJhc2VNYXRyaXgpIHsKICAgICAgICAgIGlmICh0aGlzW1BSSVZBVEUkMl0uaW52ZXJzZUJhc2VNYXRyaXgpIHsKICAgICAgICAgICAgdGhpc1tQUklWQVRFJDJdLmJhc2VNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICAgICAgICAgICAgaW52ZXJ0KHRoaXNbUFJJVkFURSQyXS5iYXNlTWF0cml4LCB0aGlzW1BSSVZBVEUkMl0uaW52ZXJzZUJhc2VNYXRyaXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDJdLmJhc2VNYXRyaXg7CiAgICAgIH0KICAgICAgc2V0IF9pbnZlcnNlQmFzZU1hdHJpeChtYXRyaXgpIHsKICAgICAgICB0aGlzW1BSSVZBVEUkMl0uaW52ZXJzZUJhc2VNYXRyaXggPSBtYXRyaXg7CiAgICAgICAgdGhpc1tQUklWQVRFJDJdLmJhc2VNYXRyaXggPSBudWxsOwogICAgICB9CiAgICAgIGdldCBfaW52ZXJzZUJhc2VNYXRyaXgoKSB7CiAgICAgICAgaWYgKCF0aGlzW1BSSVZBVEUkMl0uaW52ZXJzZUJhc2VNYXRyaXgpIHsKICAgICAgICAgIGlmICh0aGlzW1BSSVZBVEUkMl0uYmFzZU1hdHJpeCkgewogICAgICAgICAgICB0aGlzW1BSSVZBVEUkMl0uaW52ZXJzZUJhc2VNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICAgICAgICAgICAgaW52ZXJ0KHRoaXNbUFJJVkFURSQyXS5pbnZlcnNlQmFzZU1hdHJpeCwgdGhpc1tQUklWQVRFJDJdLmJhc2VNYXRyaXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDJdLmludmVyc2VCYXNlTWF0cml4OwogICAgICB9CiAgICAgIF9nZXRTcGFjZVJlbGF0aXZlVHJhbnNmb3JtKHNwYWNlKSB7CiAgICAgICAgaWYgKCF0aGlzLl9pbnZlcnNlQmFzZU1hdHJpeCB8fCAhc3BhY2UuX2Jhc2VNYXRyaXgpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBsZXQgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgICAgbXVsdGlwbHkob3V0LCB0aGlzLl9pbnZlcnNlQmFzZU1hdHJpeCwgc3BhY2UuX2Jhc2VNYXRyaXgpOwogICAgICAgIHJldHVybiBuZXcgWFJSaWdpZFRyYW5zZm9ybSQxKG91dCk7CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBERUZBVUxUX0VNVUxBVElPTl9IRUlHSFQgPSAxLjY7CiAgICBjb25zdCBQUklWQVRFJDMgPSBTeW1ib2woJ0BAd2VieHItcG9seWZpbGwvWFJSZWZlcmVuY2VTcGFjZScpOwogICAgY29uc3QgWFJSZWZlcmVuY2VTcGFjZVR5cGVzID0gWwogICAgICAndmlld2VyJywKICAgICAgJ2xvY2FsJywKICAgICAgJ2xvY2FsLWZsb29yJywKICAgICAgJ2JvdW5kZWQtZmxvb3InLAogICAgICAndW5ib3VuZGVkJwogICAgXTsKICAgIGZ1bmN0aW9uIGlzRmxvb3IodHlwZSkgewogICAgICByZXR1cm4gdHlwZSA9PT0gJ2JvdW5kZWQtZmxvb3InIHx8IHR5cGUgPT09ICdsb2NhbC1mbG9vcic7CiAgICB9CiAgICBjbGFzcyBYUlJlZmVyZW5jZVNwYWNlIGV4dGVuZHMgWFJTcGFjZSB7CiAgICAgIGNvbnN0cnVjdG9yKHR5cGUsIHRyYW5zZm9ybSA9IG51bGwpIHsKICAgICAgICBpZiAoIVhSUmVmZXJlbmNlU3BhY2VUeXBlcy5pbmNsdWRlcyh0eXBlKSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBYUlJlZmVyZW5jZVNwYWNlVHlwZSBtdXN0IGJlIG9uZSBvZiAke1hSUmVmZXJlbmNlU3BhY2VUeXBlc31gKTsKICAgICAgICB9CiAgICAgICAgc3VwZXIodHlwZSk7CiAgICAgICAgaWYgKHR5cGUgPT09ICdib3VuZGVkLWZsb29yJyAmJiAhdHJhbnNmb3JtKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFhSUmVmZXJlbmNlU3BhY2UgY2Fubm90IHVzZSAnYm91bmRlZC1mbG9vcicgdHlwZSBpZiB0aGUgcGxhdGZvcm0gZG9lcyBub3QgcHJvdmlkZSB0aGUgZmxvb3IgbGV2ZWxgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzRmxvb3IodHlwZSkgJiYgIXRyYW5zZm9ybSkgewogICAgICAgICAgdHJhbnNmb3JtID0gaWRlbnRpdHkobmV3IEZsb2F0MzJBcnJheSgxNikpOwogICAgICAgICAgdHJhbnNmb3JtWzEzXSA9IERFRkFVTFRfRU1VTEFUSU9OX0hFSUdIVDsKICAgICAgICB9CiAgICAgICAgdGhpcy5faW52ZXJzZUJhc2VNYXRyaXggPSB0cmFuc2Zvcm0gfHwgaWRlbnRpdHkobmV3IEZsb2F0MzJBcnJheSgxNikpOwogICAgICAgIHRoaXNbUFJJVkFURSQzXSA9IHsKICAgICAgICAgIHR5cGUsCiAgICAgICAgICB0cmFuc2Zvcm0sCiAgICAgICAgICBvcmlnaW5PZmZzZXQgOiBpZGVudGl0eShuZXcgRmxvYXQzMkFycmF5KDE2KSksCiAgICAgICAgfTsKICAgICAgfQogICAgICBfdHJhbnNmb3JtQmFzZVBvc2VNYXRyaXgob3V0LCBwb3NlKSB7CiAgICAgICAgbXVsdGlwbHkob3V0LCB0aGlzLl9pbnZlcnNlQmFzZU1hdHJpeCwgcG9zZSk7CiAgICAgIH0KICAgICAgX29yaWdpbk9mZnNldE1hdHJpeCgpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDNdLm9yaWdpbk9mZnNldDsKICAgICAgfQogICAgICBfYWRqdXN0Rm9yT3JpZ2luT2Zmc2V0KHRyYW5zZm9ybU1hdHJpeCkgewogICAgICAgIGxldCBpbnZlcnNlT3JpZ2luT2Zmc2V0TWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgICAgaW52ZXJ0KGludmVyc2VPcmlnaW5PZmZzZXRNYXRyaXgsIHRoaXNbUFJJVkFURSQzXS5vcmlnaW5PZmZzZXQpOwogICAgICAgIG11bHRpcGx5KHRyYW5zZm9ybU1hdHJpeCwgaW52ZXJzZU9yaWdpbk9mZnNldE1hdHJpeCwgdHJhbnNmb3JtTWF0cml4KTsKICAgICAgfQogICAgICBfZ2V0U3BhY2VSZWxhdGl2ZVRyYW5zZm9ybShzcGFjZSkgewogICAgICAgIGxldCB0cmFuc2Zvcm0gPSBzdXBlci5fZ2V0U3BhY2VSZWxhdGl2ZVRyYW5zZm9ybShzcGFjZSk7CiAgICAgICAgdGhpcy5fYWRqdXN0Rm9yT3JpZ2luT2Zmc2V0KHRyYW5zZm9ybS5tYXRyaXgpOwogICAgICAgIHJldHVybiBuZXcgWFJSaWdpZFRyYW5zZm9ybSh0cmFuc2Zvcm0ubWF0cml4KTsKICAgICAgfQogICAgICBnZXRPZmZzZXRSZWZlcmVuY2VTcGFjZShhZGRpdGlvbmFsT2Zmc2V0KSB7CiAgICAgICAgbGV0IG5ld1NwYWNlID0gbmV3IFhSUmVmZXJlbmNlU3BhY2UoCiAgICAgICAgICB0aGlzW1BSSVZBVEUkM10udHlwZSwKICAgICAgICAgIHRoaXNbUFJJVkFURSQzXS50cmFuc2Zvcm0sCiAgICAgICAgICB0aGlzW1BSSVZBVEUkM10uYm91bmRzKTsKICAgICAgICBtdWx0aXBseShuZXdTcGFjZVtQUklWQVRFJDNdLm9yaWdpbk9mZnNldCwgdGhpc1tQUklWQVRFJDNdLm9yaWdpbk9mZnNldCwgYWRkaXRpb25hbE9mZnNldC5tYXRyaXgpOwogICAgICAgIHJldHVybiBuZXdTcGFjZTsKICAgICAgfQogICAgfQoKICAgIGNvbnN0IFBSSVZBVEUkNCA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUicpOwogICAgY29uc3QgWFJTZXNzaW9uTW9kZXMgPSBbJ2lubGluZScsICdpbW1lcnNpdmUtdnInLCAnaW1tZXJzaXZlLWFyJ107CiAgICBjb25zdCBERUZBVUxUX1NFU1NJT05fT1BUSU9OUyA9IHsKICAgICAgJ2lubGluZSc6IHsKICAgICAgICByZXF1aXJlZEZlYXR1cmVzOiBbJ3ZpZXdlciddLAogICAgICAgIG9wdGlvbmFsRmVhdHVyZXM6IFtdLAogICAgICB9LAogICAgICAnaW1tZXJzaXZlLXZyJzogewogICAgICAgIHJlcXVpcmVkRmVhdHVyZXM6IFsndmlld2VyJywgJ2xvY2FsJ10sCiAgICAgICAgb3B0aW9uYWxGZWF0dXJlczogW10sCiAgICAgIH0sCiAgICAgICdpbW1lcnNpdmUtYXInOiB7CiAgICAgICAgcmVxdWlyZWRGZWF0dXJlczogWyd2aWV3ZXInLCAnbG9jYWwnXSwKICAgICAgICBvcHRpb25hbEZlYXR1cmVzOiBbXSwKICAgICAgfQogICAgfTsKICAgIGNvbnN0IFBPTFlGSUxMX1JFUVVFU1RfU0VTU0lPTl9FUlJPUiA9CmBQb2x5ZmlsbCBFcnJvcjogTXVzdCBjYWxsIG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoKSB3aXRoIGFueSBYUlNlc3Npb25Nb2RlCm9yIG5hdmlnYXRvci54ci5yZXF1ZXN0U2Vzc2lvbignaW5saW5lJykgcHJpb3IgdG8gcmVxdWVzdGluZyBhbiBpbW1lcnNpdmUKc2Vzc2lvbi4gVGhpcyBpcyBhIGxpbWl0YXRpb24gc3BlY2lmaWMgdG8gdGhlIFdlYlhSIFBvbHlmaWxsIGFuZCBkb2VzIG5vdCBhcHBseQp0byBuYXRpdmUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSBBUEkuYCAgICA7CiAgICBjbGFzcyBYUlN5c3RlbSBleHRlbmRzIEV2ZW50VGFyZ2V0IHsKICAgICAgY29uc3RydWN0b3IoZGV2aWNlUHJvbWlzZSkgewogICAgICAgIHN1cGVyKCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDRdID0gewogICAgICAgICAgZGV2aWNlOiBudWxsLAogICAgICAgICAgZGV2aWNlUHJvbWlzZSwKICAgICAgICAgIGltbWVyc2l2ZVNlc3Npb246IG51bGwsCiAgICAgICAgICBpbmxpbmVTZXNzaW9uczogbmV3IFNldCgpLAogICAgICAgIH07CiAgICAgICAgZGV2aWNlUHJvbWlzZS50aGVuKChkZXZpY2UpID0+IHsgdGhpc1tQUklWQVRFJDRdLmRldmljZSA9IGRldmljZTsgfSk7CiAgICAgIH0KICAgICAgYXN5bmMgaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpIHsKICAgICAgICBpZiAoIXRoaXNbUFJJVkFURSQ0XS5kZXZpY2UpIHsKICAgICAgICAgIGF3YWl0IHRoaXNbUFJJVkFURSQ0XS5kZXZpY2VQcm9taXNlOwogICAgICAgIH0KICAgICAgICBpZiAobW9kZSAhPSAnaW5saW5lJykgewogICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzW1BSSVZBVEUkNF0uZGV2aWNlLmlzU2Vzc2lvblN1cHBvcnRlZChtb2RlKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7CiAgICAgIH0KICAgICAgYXN5bmMgcmVxdWVzdFNlc3Npb24obW9kZSwgb3B0aW9ucykgewogICAgICAgIGlmICghdGhpc1tQUklWQVRFJDRdLmRldmljZSkgewogICAgICAgICAgaWYgKG1vZGUgIT0gJ2lubGluZScpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFBPTFlGSUxMX1JFUVVFU1RfU0VTU0lPTl9FUlJPUik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhd2FpdCB0aGlzW1BSSVZBVEUkNF0uZGV2aWNlUHJvbWlzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFYUlNlc3Npb25Nb2Rlcy5pbmNsdWRlcyhtb2RlKSkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigKICAgICAgICAgICAgICBgVGhlIHByb3ZpZGVkIHZhbHVlICcke21vZGV9JyBpcyBub3QgYSB2YWxpZCBlbnVtIHZhbHVlIG9mIHR5cGUgWFJTZXNzaW9uTW9kZWApOwogICAgICAgIH0KICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IERFRkFVTFRfU0VTU0lPTl9PUFRJT05TW21vZGVdOwogICAgICAgIGNvbnN0IHJlcXVpcmVkRmVhdHVyZXMgPSBkZWZhdWx0T3B0aW9ucy5yZXF1aXJlZEZlYXR1cmVzLmNvbmNhdCgKICAgICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLnJlcXVpcmVkRmVhdHVyZXMgPyBvcHRpb25zLnJlcXVpcmVkRmVhdHVyZXMgOiBbXSk7CiAgICAgICAgY29uc3Qgb3B0aW9uYWxGZWF0dXJlcyA9IGRlZmF1bHRPcHRpb25zLm9wdGlvbmFsRmVhdHVyZXMuY29uY2F0KAogICAgICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMub3B0aW9uYWxGZWF0dXJlcyA/IG9wdGlvbnMub3B0aW9uYWxGZWF0dXJlcyA6IFtdKTsKICAgICAgICBjb25zdCBlbmFibGVkRmVhdHVyZXMgPSBuZXcgU2V0KCk7CiAgICAgICAgbGV0IHJlcXVpcmVtZW50c0ZhaWxlZCA9IGZhbHNlOwogICAgICAgIGZvciAobGV0IGZlYXR1cmUgb2YgcmVxdWlyZWRGZWF0dXJlcykgewogICAgICAgICAgaWYgKCF0aGlzW1BSSVZBVEUkNF0uZGV2aWNlLmlzRmVhdHVyZVN1cHBvcnRlZChmZWF0dXJlKSkgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGBUaGUgcmVxdWlyZWQgZmVhdHVyZSAnJHtmZWF0dXJlfScgaXMgbm90IHN1cHBvcnRlZGApOwogICAgICAgICAgICByZXF1aXJlbWVudHNGYWlsZWQgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZW5hYmxlZEZlYXR1cmVzLmFkZChmZWF0dXJlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHJlcXVpcmVtZW50c0ZhaWxlZCkgewogICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignU2Vzc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHNvbWUgcmVxdWlyZWQgZmVhdHVyZXMnLCAnTm90U3VwcG9ydGVkRXJyb3InKTsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgZmVhdHVyZSBvZiBvcHRpb25hbEZlYXR1cmVzKSB7CiAgICAgICAgICBpZiAoIXRoaXNbUFJJVkFURSQ0XS5kZXZpY2UuaXNGZWF0dXJlU3VwcG9ydGVkKGZlYXR1cmUpKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUaGUgb3B0aW9uYWwgZmVhdHVyZSAnJHtmZWF0dXJlfScgaXMgbm90IHN1cHBvcnRlZGApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZW5hYmxlZEZlYXR1cmVzLmFkZChmZWF0dXJlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gYXdhaXQgdGhpc1tQUklWQVRFJDRdLmRldmljZS5yZXF1ZXN0U2Vzc2lvbihtb2RlLCBlbmFibGVkRmVhdHVyZXMpOwogICAgICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgWFJTZXNzaW9uKHRoaXNbUFJJVkFURSQ0XS5kZXZpY2UsIG1vZGUsIHNlc3Npb25JZCk7CiAgICAgICAgaWYgKG1vZGUgPT0gJ2lubGluZScpIHsKICAgICAgICAgIHRoaXNbUFJJVkFURSQ0XS5pbmxpbmVTZXNzaW9ucy5hZGQoc2Vzc2lvbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXNbUFJJVkFURSQ0XS5pbW1lcnNpdmVTZXNzaW9uID0gc2Vzc2lvbjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb25TZXNzaW9uRW5kID0gKCkgPT4gewogICAgICAgICAgaWYgKG1vZGUgPT0gJ2lubGluZScpIHsKICAgICAgICAgICAgdGhpc1tQUklWQVRFJDRdLmlubGluZVNlc3Npb25zLmRlbGV0ZShzZXNzaW9uKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQ0XS5pbW1lcnNpdmVTZXNzaW9uID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kJywgb25TZXNzaW9uRW5kKTsKICAgICAgICB9OwogICAgICAgIHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgb25TZXNzaW9uRW5kKTsKICAgICAgICByZXR1cm4gc2Vzc2lvbjsKICAgICAgfQogICAgfQoKICAgIGxldCBub3c7CiAgICBpZiAoJ3BlcmZvcm1hbmNlJyBpbiBfZ2xvYmFsID09PSBmYWxzZSkgewogICAgICBsZXQgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgbm93ID0gKCkgPT4gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTsKICAgIH0gZWxzZSB7CiAgICAgIG5vdyA9ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpOwogICAgfQogICAgdmFyIG5vdyQxID0gbm93OwoKICAgIGNvbnN0IFBSSVZBVEUkNSA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUlBvc2UnKTsKICAgIGNsYXNzIFhSUG9zZSQxIHsKICAgICAgY29uc3RydWN0b3IodHJhbnNmb3JtLCBlbXVsYXRlZFBvc2l0aW9uKSB7CiAgICAgICAgdGhpc1tQUklWQVRFJDVdID0gewogICAgICAgICAgdHJhbnNmb3JtLAogICAgICAgICAgZW11bGF0ZWRQb3NpdGlvbiwKICAgICAgICB9OwogICAgICB9CiAgICAgIGdldCB0cmFuc2Zvcm0oKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkNV0udHJhbnNmb3JtOyB9CiAgICAgIGdldCBlbXVsYXRlZFBvc2l0aW9uKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDVdLmVtdWxhdGVkUG9zaXRpb247IH0KICAgIH0KCiAgICBjb25zdCBQUklWQVRFJDYgPSBTeW1ib2woJ0BAd2VieHItcG9seWZpbGwvWFJWaWV3ZXJQb3NlJyk7CiAgICBjbGFzcyBYUlZpZXdlclBvc2UgZXh0ZW5kcyBYUlBvc2UkMSB7CiAgICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybSwgdmlld3MsIGVtdWxhdGVkUG9zaXRpb24gPSBmYWxzZSkgewogICAgICAgIHN1cGVyKHRyYW5zZm9ybSwgZW11bGF0ZWRQb3NpdGlvbik7CiAgICAgICAgdGhpc1tQUklWQVRFJDZdID0gewogICAgICAgICAgdmlld3MKICAgICAgICB9OwogICAgICB9CiAgICAgIGdldCB2aWV3cygpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDZdLnZpZXdzOwogICAgICB9CiAgICB9CgogICAgY29uc3QgUFJJVkFURSQ3ID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSVmlld3BvcnQnKTsKICAgIGNsYXNzIFhSVmlld3BvcnQgewogICAgICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHsKICAgICAgICB0aGlzW1BSSVZBVEUkN10gPSB7IHRhcmdldCB9OwogICAgICB9CiAgICAgIGdldCB4KCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDddLnRhcmdldC54OyB9CiAgICAgIGdldCB5KCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDddLnRhcmdldC55OyB9CiAgICAgIGdldCB3aWR0aCgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQ3XS50YXJnZXQud2lkdGg7IH0KICAgICAgZ2V0IGhlaWdodCgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQ3XS50YXJnZXQuaGVpZ2h0OyB9CiAgICB9CgogICAgY29uc3QgWFJFeWVzID0gWydsZWZ0JywgJ3JpZ2h0JywgJ25vbmUnXTsKICAgIGNvbnN0IFBSSVZBVEUkOCA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUlZpZXcnKTsKICAgIGNsYXNzIFhSVmlldyB7CiAgICAgIGNvbnN0cnVjdG9yKGRldmljZSwgdHJhbnNmb3JtLCBleWUsIHNlc3Npb25JZCkgewogICAgICAgIGlmICghWFJFeWVzLmluY2x1ZGVzKGV5ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWFJFeWUgbXVzdCBiZSBvbmUgb2Y6ICR7WFJFeWVzfWApOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ZW1wID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICBjb25zdCB2aWV3cG9ydCA9IG5ldyBYUlZpZXdwb3J0KHRlbXApOwogICAgICAgIHRoaXNbUFJJVkFURSQ4XSA9IHsKICAgICAgICAgIGRldmljZSwKICAgICAgICAgIGV5ZSwKICAgICAgICAgIHZpZXdwb3J0LAogICAgICAgICAgdGVtcCwKICAgICAgICAgIHNlc3Npb25JZCwKICAgICAgICAgIHRyYW5zZm9ybSwKICAgICAgICB9OwogICAgICB9CiAgICAgIGdldCBleWUoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkOF0uZXllOyB9CiAgICAgIGdldCBwcm9qZWN0aW9uTWF0cml4KCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDhdLmRldmljZS5nZXRQcm9qZWN0aW9uTWF0cml4KHRoaXMuZXllKTsgfQogICAgICBnZXQgdHJhbnNmb3JtKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDhdLnRyYW5zZm9ybTsgfQogICAgICBfZ2V0Vmlld3BvcnQobGF5ZXIpIHsKICAgICAgICBpZiAodGhpc1tQUklWQVRFJDhdLmRldmljZS5nZXRWaWV3cG9ydCh0aGlzW1BSSVZBVEUkOF0uc2Vzc2lvbklkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXllLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQ4XS50ZW1wKSkgewogICAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQ4XS52aWV3cG9ydDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfQogICAgfQoKICAgIGNvbnN0IFBSSVZBVEUkOSA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUkZyYW1lJyk7CiAgICBjb25zdCBOT05fQUNUSVZFX01TRyA9ICJYUkZyYW1lIGFjY2VzcyBvdXRzaWRlIHRoZSBjYWxsYmFjayB0aGF0IHByb2R1Y2VkIGl0IGlzIGludmFsaWQuIjsKICAgIGNvbnN0IE5PTl9BTklNRlJBTUVfTVNHID0gImdldFZpZXdlclBvc2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIFhSRnJhbWUgb2JqZWN0cyBwYXNzZWQgdG8gWFJTZXNzaW9uLnJlcXVlc3RBbmltYXRpb25GcmFtZSBjYWxsYmFja3MuIjsKICAgIGxldCBORVhUX0ZSQU1FX0lEID0gMDsKICAgIGNsYXNzIFhSRnJhbWUgewogICAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIHNlc3Npb24sIHNlc3Npb25JZCkgewogICAgICAgIHRoaXNbUFJJVkFURSQ5XSA9IHsKICAgICAgICAgIGlkOiArK05FWFRfRlJBTUVfSUQsCiAgICAgICAgICBhY3RpdmU6IGZhbHNlLAogICAgICAgICAgYW5pbWF0aW9uRnJhbWU6IGZhbHNlLAogICAgICAgICAgZGV2aWNlLAogICAgICAgICAgc2Vzc2lvbiwKICAgICAgICAgIHNlc3Npb25JZAogICAgICAgIH07CiAgICAgIH0KICAgICAgZ2V0IHNlc3Npb24oKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkOV0uc2Vzc2lvbjsgfQogICAgICBnZXRWaWV3ZXJQb3NlKHJlZmVyZW5jZVNwYWNlKSB7CiAgICAgICAgaWYgKCF0aGlzW1BSSVZBVEUkOV0uYW5pbWF0aW9uRnJhbWUpIHsKICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oTk9OX0FOSU1GUkFNRV9NU0csICdJbnZhbGlkU3RhdGVFcnJvcicpOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXNbUFJJVkFURSQ5XS5hY3RpdmUpIHsKICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oTk9OX0FDVElWRV9NU0csICdJbnZhbGlkU3RhdGVFcnJvcicpOwogICAgICAgIH0KICAgICAgICBjb25zdCBkZXZpY2UgPSB0aGlzW1BSSVZBVEUkOV0uZGV2aWNlOwogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzW1BSSVZBVEUkOV0uc2Vzc2lvbjsKICAgICAgICBzZXNzaW9uW1BSSVZBVEUkMTVdLnZpZXdlclNwYWNlLl9lbnN1cmVQb3NlVXBkYXRlZChkZXZpY2UsIHRoaXNbUFJJVkFURSQ5XS5pZCk7CiAgICAgICAgcmVmZXJlbmNlU3BhY2UuX2Vuc3VyZVBvc2VVcGRhdGVkKGRldmljZSwgdGhpc1tQUklWQVRFJDldLmlkKTsKICAgICAgICBsZXQgdmlld2VyVHJhbnNmb3JtID0gcmVmZXJlbmNlU3BhY2UuX2dldFNwYWNlUmVsYXRpdmVUcmFuc2Zvcm0oc2Vzc2lvbltQUklWQVRFJDE1XS52aWV3ZXJTcGFjZSk7CiAgICAgICAgY29uc3Qgdmlld3MgPSBbXTsKICAgICAgICBmb3IgKGxldCB2aWV3U3BhY2Ugb2Ygc2Vzc2lvbltQUklWQVRFJDE1XS52aWV3U3BhY2VzKSB7CiAgICAgICAgICB2aWV3U3BhY2UuX2Vuc3VyZVBvc2VVcGRhdGVkKGRldmljZSwgdGhpc1tQUklWQVRFJDldLmlkKTsKICAgICAgICAgIGxldCB2aWV3VHJhbnNmb3JtID0gcmVmZXJlbmNlU3BhY2UuX2dldFNwYWNlUmVsYXRpdmVUcmFuc2Zvcm0odmlld1NwYWNlKTsKICAgICAgICAgIGxldCB2aWV3ID0gbmV3IFhSVmlldyhkZXZpY2UsIHZpZXdUcmFuc2Zvcm0sIHZpZXdTcGFjZS5leWUsIHRoaXNbUFJJVkFURSQ5XS5zZXNzaW9uSWQpOwogICAgICAgICAgdmlld3MucHVzaCh2aWV3KTsKICAgICAgICB9CiAgICAgICAgbGV0IHZpZXdlclBvc2UgPSBuZXcgWFJWaWV3ZXJQb3NlKHZpZXdlclRyYW5zZm9ybSwgdmlld3MsIGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgIHJldHVybiB2aWV3ZXJQb3NlOwogICAgICB9CiAgICAgIGdldFBvc2Uoc3BhY2UsIGJhc2VTcGFjZSkgewogICAgICAgIGlmICghdGhpc1tQUklWQVRFJDldLmFjdGl2ZSkgewogICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihOT05fQUNUSVZFX01TRywgJ0ludmFsaWRTdGF0ZUVycm9yJyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXNbUFJJVkFURSQ5XS5kZXZpY2U7CiAgICAgICAgaWYgKHNwYWNlLl9zcGVjaWFsVHlwZSA9PT0gInRhcmdldC1yYXkiIHx8IHNwYWNlLl9zcGVjaWFsVHlwZSA9PT0gImdyaXAiKSB7CiAgICAgICAgICByZXR1cm4gZGV2aWNlLmdldElucHV0UG9zZSgKICAgICAgICAgICAgc3BhY2UuX2lucHV0U291cmNlLCBiYXNlU3BhY2UsIHNwYWNlLl9zcGVjaWFsVHlwZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNwYWNlLl9lbnN1cmVQb3NlVXBkYXRlZChkZXZpY2UsIHRoaXNbUFJJVkFURSQ5XS5pZCk7CiAgICAgICAgICBiYXNlU3BhY2UuX2Vuc3VyZVBvc2VVcGRhdGVkKGRldmljZSwgdGhpc1tQUklWQVRFJDldLmlkKTsKICAgICAgICAgIGxldCB0cmFuc2Zvcm0gPSBiYXNlU3BhY2UuX2dldFNwYWNlUmVsYXRpdmVUcmFuc2Zvcm0oc3BhY2UpOwogICAgICAgICAgaWYgKCF0cmFuc2Zvcm0pIHsgcmV0dXJuIG51bGw7IH0KICAgICAgICAgIHJldHVybiBuZXcgWFJQb3NlKHRyYW5zZm9ybSwgZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgY29uc3QgUFJJVkFURSQxMCA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUlJlbmRlclN0YXRlJyk7CiAgICBjb25zdCBYUlJlbmRlclN0YXRlSW5pdCA9IE9iamVjdC5mcmVlemUoewogICAgICBkZXB0aE5lYXI6IDAuMSwKICAgICAgZGVwdGhGYXI6IDEwMDAuMCwKICAgICAgaW5saW5lVmVydGljYWxGaWVsZE9mVmlldzogbnVsbCwKICAgICAgYmFzZUxheWVyOiBudWxsCiAgICB9KTsKICAgIGNsYXNzIFhSUmVuZGVyU3RhdGUgewogICAgICBjb25zdHJ1Y3RvcihzdGF0ZUluaXQgPSB7fSkgewogICAgICAgIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIFhSUmVuZGVyU3RhdGVJbml0LCBzdGF0ZUluaXQpOwogICAgICAgIHRoaXNbUFJJVkFURSQxMF0gPSB7IGNvbmZpZyB9OwogICAgICB9CiAgICAgIGdldCBkZXB0aE5lYXIoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTBdLmNvbmZpZy5kZXB0aE5lYXI7IH0KICAgICAgZ2V0IGRlcHRoRmFyKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDEwXS5jb25maWcuZGVwdGhGYXI7IH0KICAgICAgZ2V0IGlubGluZVZlcnRpY2FsRmllbGRPZlZpZXcoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTBdLmNvbmZpZy5pbmxpbmVWZXJ0aWNhbEZpZWxkT2ZWaWV3OyB9CiAgICAgIGdldCBiYXNlTGF5ZXIoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTBdLmNvbmZpZy5iYXNlTGF5ZXI7IH0KICAgIH0KCiAgICBjb25zdCBQT0xZRklMTEVEX1hSX0NPTVBBVElCTEUgPSBTeW1ib2woJ0BAd2VieHItcG9seWZpbGwvcG9seWZpbGxlZC14ci1jb21wYXRpYmxlJyk7CiAgICBjb25zdCBYUl9DT01QQVRJQkxFID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL3hyLWNvbXBhdGlibGUnKTsKCiAgICBjb25zdCBQUklWQVRFJDExID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSV2ViR0xMYXllcicpOwogICAgY29uc3QgWFJXZWJHTExheWVySW5pdCA9IE9iamVjdC5mcmVlemUoewogICAgICBhbnRpYWxpYXM6IHRydWUsCiAgICAgIGRlcHRoOiBmYWxzZSwKICAgICAgc3RlbmNpbDogZmFsc2UsCiAgICAgIGFscGhhOiB0cnVlLAogICAgICBtdWx0aXZpZXc6IGZhbHNlLAogICAgICBpZ25vcmVEZXB0aFZhbHVlczogZmFsc2UsCiAgICAgIGZyYW1lYnVmZmVyU2NhbGVGYWN0b3I6IDEuMCwKICAgIH0pOwogICAgbGV0IFhSV2ViR0xMYXllciQxID0gY2xhc3MgWFJXZWJHTExheWVyIHsKICAgICAgY29uc3RydWN0b3Ioc2Vzc2lvbiwgY29udGV4dCwgbGF5ZXJJbml0PXt9KSB7CiAgICAgICAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgWFJXZWJHTExheWVySW5pdCwgbGF5ZXJJbml0KTsKICAgICAgICBpZiAoIShzZXNzaW9uIGluc3RhbmNlb2YgWFJTZXNzaW9uJDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Nlc3Npb24gbXVzdCBiZSBhIFhSU2Vzc2lvbicpOwogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvbi5lbmRlZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkU3RhdGVFcnJvcmApOwogICAgICAgIH0KICAgICAgICBpZiAoY29udGV4dFtQT0xZRklMTEVEX1hSX0NPTVBBVElCTEVdKSB7CiAgICAgICAgICBpZiAoY29udGV4dFtYUl9DT01QQVRJQkxFXSAhPT0gdHJ1ZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWRTdGF0ZUVycm9yYCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZyYW1lYnVmZmVyID0gY29udGV4dC5nZXRQYXJhbWV0ZXIoY29udGV4dC5GUkFNRUJVRkZFUl9CSU5ESU5HKTsKICAgICAgICB0aGlzW1BSSVZBVEUkMTFdID0gewogICAgICAgICAgY29udGV4dCwKICAgICAgICAgIGNvbmZpZywKICAgICAgICAgIGZyYW1lYnVmZmVyLAogICAgICAgICAgc2Vzc2lvbiwKICAgICAgICB9OwogICAgICB9CiAgICAgIGdldCBjb250ZXh0KCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDExXS5jb250ZXh0OyB9CiAgICAgIGdldCBhbnRpYWxpYXMoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTFdLmNvbmZpZy5hbnRpYWxpYXM7IH0KICAgICAgZ2V0IGlnbm9yZURlcHRoVmFsdWVzKCkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICBnZXQgZnJhbWVidWZmZXIoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTFdLmZyYW1lYnVmZmVyOyB9CiAgICAgIGdldCBmcmFtZWJ1ZmZlcldpZHRoKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDExXS5jb250ZXh0LmRyYXdpbmdCdWZmZXJXaWR0aDsgfQogICAgICBnZXQgZnJhbWVidWZmZXJIZWlnaHQoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTFdLmNvbnRleHQuZHJhd2luZ0J1ZmZlckhlaWdodDsgfQogICAgICBnZXQgX3Nlc3Npb24oKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTFdLnNlc3Npb247IH0KICAgICAgZ2V0Vmlld3BvcnQodmlldykgewogICAgICAgIHJldHVybiB2aWV3Ll9nZXRWaWV3cG9ydCh0aGlzKTsKICAgICAgfQogICAgICBzdGF0aWMgZ2V0TmF0aXZlRnJhbWVidWZmZXJTY2FsZUZhY3RvcihzZXNzaW9uKSB7CiAgICAgICAgaWYgKCFzZXNzaW9uKSB7CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXROYXRpdmVGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIG11c3QgYmUgcGFzc2VkIGEgc2Vzc2lvbi4nKQogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvbltQUklWQVRFJDE1XS5lbmRlZCkgeyByZXR1cm4gMC4wOyB9CiAgICAgICAgcmV0dXJuIDEuMDsKICAgICAgfQogICAgfTsKCiAgICBjb25zdCBQUklWQVRFJDEyID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSSW5wdXRTb3VyY2VFdmVudCcpOwogICAgY2xhc3MgWFJJbnB1dFNvdXJjZUV2ZW50IGV4dGVuZHMgRXZlbnQgewogICAgICBjb25zdHJ1Y3Rvcih0eXBlLCBldmVudEluaXREaWN0KSB7CiAgICAgICAgc3VwZXIodHlwZSwgZXZlbnRJbml0RGljdCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDEyXSA9IHsKICAgICAgICAgIGZyYW1lOiBldmVudEluaXREaWN0LmZyYW1lLAogICAgICAgICAgaW5wdXRTb3VyY2U6IGV2ZW50SW5pdERpY3QuaW5wdXRTb3VyY2UKICAgICAgICB9OwogICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBYUklucHV0U291cmNlRXZlbnQucHJvdG90eXBlKTsKICAgICAgfQogICAgICBnZXQgZnJhbWUoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTJdLmZyYW1lOyB9CiAgICAgIGdldCBpbnB1dFNvdXJjZSgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQxMl0uaW5wdXRTb3VyY2U7IH0KICAgIH0KCiAgICBjb25zdCBQUklWQVRFJDEzID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSU2Vzc2lvbkV2ZW50Jyk7CiAgICBjbGFzcyBYUlNlc3Npb25FdmVudCBleHRlbmRzIEV2ZW50IHsKICAgICAgY29uc3RydWN0b3IodHlwZSwgZXZlbnRJbml0RGljdCkgewogICAgICAgIHN1cGVyKHR5cGUsIGV2ZW50SW5pdERpY3QpOwogICAgICAgIHRoaXNbUFJJVkFURSQxM10gPSB7CiAgICAgICAgICBzZXNzaW9uOiBldmVudEluaXREaWN0LnNlc3Npb24KICAgICAgICB9OwogICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBYUlNlc3Npb25FdmVudC5wcm90b3R5cGUpOwogICAgICB9CiAgICAgIGdldCBzZXNzaW9uKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDEzXS5zZXNzaW9uOyB9CiAgICB9CgogICAgY29uc3QgUFJJVkFURSQxNCA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUklucHV0U291cmNlc0NoYW5nZUV2ZW50Jyk7CiAgICBjbGFzcyBYUklucHV0U291cmNlc0NoYW5nZUV2ZW50IGV4dGVuZHMgRXZlbnQgewogICAgICBjb25zdHJ1Y3Rvcih0eXBlLCBldmVudEluaXREaWN0KSB7CiAgICAgICAgc3VwZXIodHlwZSwgZXZlbnRJbml0RGljdCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDE0XSA9IHsKICAgICAgICAgIHNlc3Npb246IGV2ZW50SW5pdERpY3Quc2Vzc2lvbiwKICAgICAgICAgIGFkZGVkOiBldmVudEluaXREaWN0LmFkZGVkLAogICAgICAgICAgcmVtb3ZlZDogZXZlbnRJbml0RGljdC5yZW1vdmVkCiAgICAgICAgfTsKICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgWFJJbnB1dFNvdXJjZXNDaGFuZ2VFdmVudC5wcm90b3R5cGUpOwogICAgICB9CiAgICAgIGdldCBzZXNzaW9uKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDE0XS5zZXNzaW9uOyB9CiAgICAgIGdldCBhZGRlZCgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQxNF0uYWRkZWQ7IH0KICAgICAgZ2V0IHJlbW92ZWQoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTRdLnJlbW92ZWQ7IH0KICAgIH0KCiAgICBjb25zdCBQUklWQVRFJDE1ID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSU2Vzc2lvbicpOwogICAgY2xhc3MgWFJWaWV3U3BhY2UgZXh0ZW5kcyBYUlNwYWNlIHsKICAgICAgY29uc3RydWN0b3IoZXllKSB7CiAgICAgICAgc3VwZXIoZXllKTsKICAgICAgfQogICAgICBnZXQgZXllKCkgewogICAgICAgIHJldHVybiB0aGlzLl9zcGVjaWFsVHlwZTsKICAgICAgfQogICAgICBfb25Qb3NlVXBkYXRlKGRldmljZSkgewogICAgICAgIHRoaXMuX2ludmVyc2VCYXNlTWF0cml4ID0gZGV2aWNlLmdldEJhc2VWaWV3TWF0cml4KHRoaXMuX3NwZWNpYWxUeXBlKTsKICAgICAgfQogICAgfQogICAgY2xhc3MgWFJTZXNzaW9uJDEgZXh0ZW5kcyBFdmVudFRhcmdldCB7CiAgICAgIGNvbnN0cnVjdG9yKGRldmljZSwgbW9kZSwgaWQpIHsKICAgICAgICBzdXBlcigpOwogICAgICAgIGxldCBpbW1lcnNpdmUgPSBtb2RlICE9ICdpbmxpbmUnOwogICAgICAgIGxldCBpbml0aWFsUmVuZGVyU3RhdGUgPSBuZXcgWFJSZW5kZXJTdGF0ZSh7CiAgICAgICAgICBpbmxpbmVWZXJ0aWNhbEZpZWxkT2ZWaWV3OiBpbW1lcnNpdmUgPyBudWxsIDogTWF0aC5QSSAqIDAuNQogICAgICAgIH0pOwogICAgICAgIHRoaXNbUFJJVkFURSQxNV0gPSB7CiAgICAgICAgICBkZXZpY2UsCiAgICAgICAgICBtb2RlLAogICAgICAgICAgaW1tZXJzaXZlLAogICAgICAgICAgZW5kZWQ6IGZhbHNlLAogICAgICAgICAgc3VzcGVuZGVkOiBmYWxzZSwKICAgICAgICAgIGZyYW1lQ2FsbGJhY2tzOiBbXSwKICAgICAgICAgIGN1cnJlbnRGcmFtZUNhbGxiYWNrczogbnVsbCwKICAgICAgICAgIGZyYW1lSGFuZGxlOiAwLAogICAgICAgICAgZGV2aWNlRnJhbWVIYW5kbGU6IG51bGwsCiAgICAgICAgICBpZCwKICAgICAgICAgIGFjdGl2ZVJlbmRlclN0YXRlOiBpbml0aWFsUmVuZGVyU3RhdGUsCiAgICAgICAgICBwZW5kaW5nUmVuZGVyU3RhdGU6IG51bGwsCiAgICAgICAgICB2aWV3ZXJTcGFjZTogbmV3IFhSUmVmZXJlbmNlU3BhY2UoInZpZXdlciIpLAogICAgICAgICAgdmlld1NwYWNlczogW10sCiAgICAgICAgICBjdXJyZW50SW5wdXRTb3VyY2VzOiBbXQogICAgICAgIH07CiAgICAgICAgaWYgKGltbWVyc2l2ZSkgewogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS52aWV3U3BhY2VzLnB1c2gobmV3IFhSVmlld1NwYWNlKCdsZWZ0JyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgWFJWaWV3U3BhY2UoJ3JpZ2h0JykpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLnZpZXdTcGFjZXMucHVzaChuZXcgWFJWaWV3U3BhY2UoJ25vbmUnKSk7CiAgICAgICAgfQogICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25EZXZpY2VGcmFtZSA9ICgpID0+IHsKICAgICAgICAgIGlmICh0aGlzW1BSSVZBVEUkMTVdLmVuZGVkIHx8IHRoaXNbUFJJVkFURSQxNV0uc3VzcGVuZGVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlRnJhbWVIYW5kbGUgPSBudWxsOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5zdGFydERldmljZUZyYW1lTG9vcCgpOwogICAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0ucGVuZGluZ1JlbmRlclN0YXRlICE9PSBudWxsKSB7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uYWN0aXZlUmVuZGVyU3RhdGUgPSBuZXcgWFJSZW5kZXJTdGF0ZSh0aGlzW1BSSVZBVEUkMTVdLnBlbmRpbmdSZW5kZXJTdGF0ZSk7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0ucGVuZGluZ1JlbmRlclN0YXRlID0gbnVsbDsKICAgICAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0uYWN0aXZlUmVuZGVyU3RhdGUuYmFzZUxheWVyKSB7CiAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kZXZpY2Uub25CYXNlTGF5ZXJTZXQoCiAgICAgICAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLmlkLAogICAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5hY3RpdmVSZW5kZXJTdGF0ZS5iYXNlTGF5ZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpc1tQUklWQVRFJDE1XS5hY3RpdmVSZW5kZXJTdGF0ZS5iYXNlTGF5ZXIgPT09IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgZnJhbWUgPSBuZXcgWFJGcmFtZShkZXZpY2UsIHRoaXMsIHRoaXNbUFJJVkFURSQxNV0uaWQpOwogICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpc1tQUklWQVRFJDE1XS5jdXJyZW50RnJhbWVDYWxsYmFja3MgPSB0aGlzW1BSSVZBVEUkMTVdLmZyYW1lQ2FsbGJhY2tzOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5mcmFtZUNhbGxiYWNrcyA9IFtdOwogICAgICAgICAgZnJhbWVbUFJJVkFURSQ5XS5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgZnJhbWVbUFJJVkFURSQ5XS5hbmltYXRpb25GcmFtZSA9IHRydWU7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLmRldmljZS5vbkZyYW1lU3RhcnQodGhpc1tQUklWQVRFJDE1XS5pZCwgdGhpc1tQUklWQVRFJDE1XS5hY3RpdmVSZW5kZXJTdGF0ZSk7CiAgICAgICAgICB0aGlzLl9jaGVja0lucHV0U291cmNlc0NoYW5nZSgpOwogICAgICAgICAgY29uc3QgcmlnaHROb3cgPSBub3ckMSgpOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrc1tpXS5jYW5jZWxsZWQgJiYgdHlwZW9mIGNhbGxiYWNrc1tpXS5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGxiYWNrKHJpZ2h0Tm93LCBmcmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoKGVycikgewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5jdXJyZW50RnJhbWVDYWxsYmFja3MgPSBudWxsOwogICAgICAgICAgZnJhbWVbUFJJVkFURSQ5XS5hY3RpdmUgPSBmYWxzZTsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLm9uRnJhbWVFbmQodGhpc1tQUklWQVRFJDE1XS5pZCk7CiAgICAgICAgfTsKICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLnN0YXJ0RGV2aWNlRnJhbWVMb29wID0gKCkgPT4gewogICAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlRnJhbWVIYW5kbGUgPT09IG51bGwpIHsKICAgICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kZXZpY2VGcmFtZUhhbmRsZSA9IHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLnJlcXVlc3RBbmltYXRpb25GcmFtZSgKICAgICAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLm9uRGV2aWNlRnJhbWUKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHRoaXNbUFJJVkFURSQxNV0uc3RvcERldmljZUZyYW1lTG9vcCA9ICgpID0+IHsKICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlRnJhbWVIYW5kbGU7CiAgICAgICAgICBpZiAoaGFuZGxlICE9PSBudWxsKSB7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlRnJhbWVIYW5kbGUgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvbkVuZCA9IHNlc3Npb25JZCA9PiB7CiAgICAgICAgICBpZiAoc2Vzc2lvbklkICE9PSB0aGlzW1BSSVZBVEUkMTVdLmlkKSB7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uc3VzcGVuZGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uc3RhcnREZXZpY2VGcmFtZUxvb3AoKTsKICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdmb2N1cycsIHsgc2Vzc2lvbjogdGhpcyB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5lbmRlZCA9IHRydWU7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLnN0b3BEZXZpY2VGcmFtZUxvb3AoKTsKICAgICAgICAgIGRldmljZS5yZW1vdmVFdmVudExpc3RlbmVyKCdAQHdlYnhyLXBvbHlmaWxsL3ZyLXByZXNlbnQtZW5kJywgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvbkVuZCk7CiAgICAgICAgICBkZXZpY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignQEB3ZWJ4ci1wb2x5ZmlsbC92ci1wcmVzZW50LXN0YXJ0JywgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvblN0YXJ0KTsKICAgICAgICAgIGRldmljZS5yZW1vdmVFdmVudExpc3RlbmVyKCdAQHdlYnhyLXBvbHlmaWxsL2lucHV0LXNlbGVjdC1zdGFydCcsIHRoaXNbUFJJVkFURSQxNV0ub25TZWxlY3RTdGFydCk7CiAgICAgICAgICBkZXZpY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignQEB3ZWJ4ci1wb2x5ZmlsbC9pbnB1dC1zZWxlY3QtZW5kJywgdGhpc1tQUklWQVRFJDE1XS5vblNlbGVjdEVuZCk7CiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2VuZCcsIG5ldyBYUlNlc3Npb25FdmVudCgnZW5kJywgeyBzZXNzaW9uOiB0aGlzIH0pKTsKICAgICAgICB9OwogICAgICAgIGRldmljZS5hZGRFdmVudExpc3RlbmVyKCdAQHdlYnhyLXBvbHlmaWxsL3ZyLXByZXNlbnQtZW5kJywgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvbkVuZCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvblN0YXJ0ID0gc2Vzc2lvbklkID0+IHsKICAgICAgICAgIGlmIChzZXNzaW9uSWQgPT09IHRoaXNbUFJJVkFURSQxNV0uaWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5zdXNwZW5kZWQgPSB0cnVlOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5zdG9wRGV2aWNlRnJhbWVMb29wKCk7CiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2JsdXInLCB7IHNlc3Npb246IHRoaXMgfSk7CiAgICAgICAgfTsKICAgICAgICBkZXZpY2UuYWRkRXZlbnRMaXN0ZW5lcignQEB3ZWJ4ci1wb2x5ZmlsbC92ci1wcmVzZW50LXN0YXJ0JywgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvblN0YXJ0KTsKICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLm9uU2VsZWN0U3RhcnQgPSBldnQgPT4gewogICAgICAgICAgaWYgKGV2dC5zZXNzaW9uSWQgIT09IHRoaXNbUFJJVkFURSQxNV0uaWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kaXNwYXRjaElucHV0U291cmNlRXZlbnQoJ3NlbGVjdHN0YXJ0JywgIGV2dC5pbnB1dFNvdXJjZSk7CiAgICAgICAgfTsKICAgICAgICBkZXZpY2UuYWRkRXZlbnRMaXN0ZW5lcignQEB3ZWJ4ci1wb2x5ZmlsbC9pbnB1dC1zZWxlY3Qtc3RhcnQnLCB0aGlzW1BSSVZBVEUkMTVdLm9uU2VsZWN0U3RhcnQpOwogICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25TZWxlY3RFbmQgPSBldnQgPT4gewogICAgICAgICAgaWYgKGV2dC5zZXNzaW9uSWQgIT09IHRoaXNbUFJJVkFURSQxNV0uaWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kaXNwYXRjaElucHV0U291cmNlRXZlbnQoJ3NlbGVjdGVuZCcsICBldnQuaW5wdXRTb3VyY2UpOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kaXNwYXRjaElucHV0U291cmNlRXZlbnQoJ3NlbGVjdCcsICBldnQuaW5wdXRTb3VyY2UpOwogICAgICAgIH07CiAgICAgICAgZGV2aWNlLmFkZEV2ZW50TGlzdGVuZXIoJ0BAd2VieHItcG9seWZpbGwvaW5wdXQtc2VsZWN0LWVuZCcsIHRoaXNbUFJJVkFURSQxNV0ub25TZWxlY3RFbmQpOwogICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25TcXVlZXplU3RhcnQgPSBldnQgPT4gewogICAgICAgICAgaWYgKGV2dC5zZXNzaW9uSWQgIT09IHRoaXNbUFJJVkFURSQxNV0uaWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kaXNwYXRjaElucHV0U291cmNlRXZlbnQoJ3NxdWVlemVzdGFydCcsICBldnQuaW5wdXRTb3VyY2UpOwogICAgICAgIH07CiAgICAgICAgZGV2aWNlLmFkZEV2ZW50TGlzdGVuZXIoJ0BAd2VieHItcG9seWZpbGwvaW5wdXQtc3F1ZWV6ZS1zdGFydCcsIHRoaXNbUFJJVkFURSQxNV0ub25TcXVlZXplU3RhcnQpOwogICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25TcXVlZXplRW5kID0gZXZ0ID0+IHsKICAgICAgICAgIGlmIChldnQuc2Vzc2lvbklkICE9PSB0aGlzW1BSSVZBVEUkMTVdLmlkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGlzcGF0Y2hJbnB1dFNvdXJjZUV2ZW50KCdzcXVlZXplZW5kJywgIGV2dC5pbnB1dFNvdXJjZSk7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLmRpc3BhdGNoSW5wdXRTb3VyY2VFdmVudCgnc3F1ZWV6ZScsICBldnQuaW5wdXRTb3VyY2UpOwogICAgICAgIH07CiAgICAgICAgZGV2aWNlLmFkZEV2ZW50TGlzdGVuZXIoJ0BAd2VieHItcG9seWZpbGwvaW5wdXQtc3F1ZWV6ZS1lbmQnLCB0aGlzW1BSSVZBVEUkMTVdLm9uU3F1ZWV6ZUVuZCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kaXNwYXRjaElucHV0U291cmNlRXZlbnQgPSAodHlwZSwgaW5wdXRTb3VyY2UpID0+IHsKICAgICAgICAgIGNvbnN0IGZyYW1lID0gbmV3IFhSRnJhbWUoZGV2aWNlLCB0aGlzLCB0aGlzW1BSSVZBVEUkMTVdLmlkKTsKICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IFhSSW5wdXRTb3VyY2VFdmVudCh0eXBlLCB7IGZyYW1lLCBpbnB1dFNvdXJjZSB9KTsKICAgICAgICAgIGZyYW1lW1BSSVZBVEUkOV0uYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0eXBlLCBldmVudCk7CiAgICAgICAgICBmcmFtZVtQUklWQVRFJDldLmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIH07CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5zdGFydERldmljZUZyYW1lTG9vcCgpOwogICAgICAgIHRoaXMub25ibHVyID0gdW5kZWZpbmVkOwogICAgICAgIHRoaXMub25mb2N1cyA9IHVuZGVmaW5lZDsKICAgICAgICB0aGlzLm9ucmVzZXRwb3NlID0gdW5kZWZpbmVkOwogICAgICAgIHRoaXMub25lbmQgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5vbnNlbGVjdCA9IHVuZGVmaW5lZDsKICAgICAgICB0aGlzLm9uc2VsZWN0c3RhcnQgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5vbnNlbGVjdGVuZCA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgICBnZXQgcmVuZGVyU3RhdGUoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTVdLmFjdGl2ZVJlbmRlclN0YXRlOyB9CiAgICAgIGdldCBlbnZpcm9ubWVudEJsZW5kTW9kZSgpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDE1XS5kZXZpY2UuZW52aXJvbm1lbnRCbGVuZE1vZGUgfHwgJ29wYXF1ZSc7CiAgICAgIH0KICAgICAgYXN5bmMgcmVxdWVzdFJlZmVyZW5jZVNwYWNlKHR5cGUpIHsKICAgICAgICBpZiAodGhpc1tQUklWQVRFJDE1XS5lbmRlZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoIVhSUmVmZXJlbmNlU3BhY2VUeXBlcy5pbmNsdWRlcyh0eXBlKSkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgWFJSZWZlcmVuY2VTcGFjZVR5cGUgbXVzdCBiZSBvbmUgb2YgJHtYUlJlZmVyZW5jZVNwYWNlVHlwZXN9YCk7CiAgICAgICAgfQogICAgICAgIGlmICghdGhpc1tQUklWQVRFJDE1XS5kZXZpY2UuZG9lc1Nlc3Npb25TdXBwb3J0UmVmZXJlbmNlU3BhY2UodGhpc1tQUklWQVRFJDE1XS5pZCwgdHlwZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oYFRoZSAke3R5cGV9IHJlZmVyZW5jZSBzcGFjZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgc2Vzc2lvbi5gLCAnTm90U3VwcG9ydGVkRXJyb3InKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGUgPT09ICd2aWV3ZXInKSB7CiAgICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDE1XS52aWV3ZXJTcGFjZTsKICAgICAgICB9CiAgICAgICAgbGV0IHRyYW5zZm9ybSA9IGF3YWl0IHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLnJlcXVlc3RGcmFtZU9mUmVmZXJlbmNlVHJhbnNmb3JtKHR5cGUpOwogICAgICAgIGlmICh0eXBlID09PSAnYm91bmRlZC1mbG9vcicpIHsKICAgICAgICAgIGlmICghdHJhbnNmb3JtKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oYCR7dHlwZX0gWFJSZWZlcmVuY2VTcGFjZSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZGV2aWNlLmAsICdOb3RTdXBwb3J0ZWRFcnJvcicpOwogICAgICAgICAgfQogICAgICAgICAgbGV0IGJvdW5kcyA9IHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLnJlcXVlc3RTdGFnZUJvdW5kcygpOwogICAgICAgICAgaWYgKCFib3VuZHMpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihgJHt0eXBlfSBYUlJlZmVyZW5jZVNwYWNlIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBkZXZpY2UuYCwgJ05vdFN1cHBvcnRlZEVycm9yJyk7CiAgICAgICAgICB9CiAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKGBUaGUgV2ViWFIgcG9seWZpbGwgZG9lcyBub3Qgc3VwcG9ydCB0aGUgJHt0eXBlfSByZWZlcmVuY2Ugc3BhY2UgeWV0LmAsICdOb3RTdXBwb3J0ZWRFcnJvcicpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IFhSUmVmZXJlbmNlU3BhY2UodHlwZSwgdHJhbnNmb3JtKTsKICAgICAgfQogICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHsKICAgICAgICBpZiAodGhpc1tQUklWQVRFJDE1XS5lbmRlZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoYW5kbGUgPSArK3RoaXNbUFJJVkFURSQxNV0uZnJhbWVIYW5kbGU7CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5mcmFtZUNhbGxiYWNrcy5wdXNoKHsKICAgICAgICAgIGhhbmRsZSwKICAgICAgICAgIGNhbGxiYWNrLAogICAgICAgICAgY2FuY2VsbGVkOiBmYWxzZQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBoYW5kbGU7CiAgICAgIH0KICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7CiAgICAgICAgbGV0IGNhbGxiYWNrcyA9IHRoaXNbUFJJVkFURSQxNV0uZnJhbWVDYWxsYmFja3M7CiAgICAgICAgbGV0IGluZGV4ID0gY2FsbGJhY2tzLmZpbmRJbmRleChkID0+IGQgJiYgZC5oYW5kbGUgPT09IGhhbmRsZSk7CiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgIGNhbGxiYWNrc1tpbmRleF0uY2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgIH0KICAgICAgICBjYWxsYmFja3MgPSB0aGlzW1BSSVZBVEUkMTVdLmN1cnJlbnRGcmFtZUNhbGxiYWNrczsKICAgICAgICBpZiAoY2FsbGJhY2tzKSB7CiAgICAgICAgICBpbmRleCA9IGNhbGxiYWNrcy5maW5kSW5kZXgoZCA9PiBkICYmIGQuaGFuZGxlID09PSBoYW5kbGUpOwogICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgICAgY2FsbGJhY2tzW2luZGV4XS5jYW5jZWxsZWQgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBnZXQgaW5wdXRTb3VyY2VzKCkgewogICAgICAgIHJldHVybiB0aGlzW1BSSVZBVEUkMTVdLmRldmljZS5nZXRJbnB1dFNvdXJjZXMoKTsKICAgICAgfQogICAgICBhc3luYyBlbmQoKSB7CiAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0uZW5kZWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0uaW1tZXJzaXZlKSB7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLmVuZGVkID0gdHJ1ZTsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0BAd2VieHItcG9seWZpbGwvdnItcHJlc2VudC1zdGFydCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5vblByZXNlbnRhdGlvblN0YXJ0KTsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uZGV2aWNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0BAd2VieHItcG9seWZpbGwvdnItcHJlc2VudC1lbmQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25QcmVzZW50YXRpb25FbmQpOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5kZXZpY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignQEB3ZWJ4ci1wb2x5ZmlsbC9pbnB1dC1zZWxlY3Qtc3RhcnQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25TZWxlY3RTdGFydCk7CiAgICAgICAgICB0aGlzW1BSSVZBVEUkMTVdLmRldmljZS5yZW1vdmVFdmVudExpc3RlbmVyKCdAQHdlYnhyLXBvbHlmaWxsL2lucHV0LXNlbGVjdC1lbmQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0ub25TZWxlY3RFbmQpOwogICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdlbmQnLCBuZXcgWFJTZXNzaW9uRXZlbnQoJ2VuZCcsIHsgc2Vzc2lvbjogdGhpcyB9KSk7CiAgICAgICAgfQogICAgICAgIHRoaXNbUFJJVkFURSQxNV0uc3RvcERldmljZUZyYW1lTG9vcCgpOwogICAgICAgIHJldHVybiB0aGlzW1BSSVZBVEUkMTVdLmRldmljZS5lbmRTZXNzaW9uKHRoaXNbUFJJVkFURSQxNV0uaWQpOwogICAgICB9CiAgICAgIHVwZGF0ZVJlbmRlclN0YXRlKG5ld1N0YXRlKSB7CiAgICAgICAgaWYgKHRoaXNbUFJJVkFURSQxNV0uZW5kZWQpIHsKICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAiQ2FuJ3QgY2FsbCB1cGRhdGVSZW5kZXJTdGF0ZSBvbiBhbiBYUlNlc3Npb24gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRoYXQgaGFzIGFscmVhZHkgZW5kZWQuIjsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgaWYgKG5ld1N0YXRlLmJhc2VMYXllciAmJiAobmV3U3RhdGUuYmFzZUxheWVyLl9zZXNzaW9uICE9PSB0aGlzKSkgewogICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICJDYWxsZWQgdXBkYXRlUmVuZGVyU3RhdGUgd2l0aCBhIGJhc2UgbGF5ZXIgdGhhdCB3YXMgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgImNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgc2Vzc2lvbi4iOwogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICBjb25zdCBmb3ZTZXQgPSAobmV3U3RhdGUuaW5saW5lVmVydGljYWxGaWVsZE9mVmlldyAhPT0gbnVsbCkgJiYKICAgICAgICAgICAgICAgICAgICAgICAobmV3U3RhdGUuaW5saW5lVmVydGljYWxGaWVsZE9mVmlldyAhPT0gdW5kZWZpbmVkKTsKICAgICAgICBpZiAoZm92U2V0KSB7CiAgICAgICAgICBpZiAodGhpc1tQUklWQVRFJDE1XS5pbW1lcnNpdmUpIHsKICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICJpbmxpbmVWZXJ0aWNhbEZpZWxkT2ZWaWV3IG11c3Qgbm90IGJlIHNldCBmb3IgYW4gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiWFJSZW5kZXJTdGF0ZSBwYXNzZWQgdG8gdXBkYXRlUmVuZGVyU3RhdGUgZm9yIGFuICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgImltbWVyc2l2ZSBzZXNzaW9uLiI7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld1N0YXRlLmlubGluZVZlcnRpY2FsRmllbGRPZlZpZXcgPSBNYXRoLm1pbigKICAgICAgICAgICAgICAzLjEzLCBNYXRoLm1heCgwLjAxLCBuZXdTdGF0ZS5pbmxpbmVWZXJ0aWNhbEZpZWxkT2ZWaWV3KSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzW1BSSVZBVEUkMTVdLnBlbmRpbmdSZW5kZXJTdGF0ZSA9PT0gbnVsbCkgewogICAgICAgICAgY29uc3QgYWN0aXZlUmVuZGVyU3RhdGUgPSB0aGlzW1BSSVZBVEUkMTVdLmFjdGl2ZVJlbmRlclN0YXRlOwogICAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5wZW5kaW5nUmVuZGVyU3RhdGUgPSB7CiAgICAgICAgICAgIGRlcHRoTmVhcjogYWN0aXZlUmVuZGVyU3RhdGUuZGVwdGhOZWFyLAogICAgICAgICAgICBkZXB0aEZhcjogYWN0aXZlUmVuZGVyU3RhdGUuZGVwdGhGYXIsCiAgICAgICAgICAgIGlubGluZVZlcnRpY2FsRmllbGRPZlZpZXc6IGFjdGl2ZVJlbmRlclN0YXRlLmlubGluZVZlcnRpY2FsRmllbGRPZlZpZXcsCiAgICAgICAgICAgIGJhc2VMYXllcjogYWN0aXZlUmVuZGVyU3RhdGUuYmFzZUxheWVyCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBPYmplY3QuYXNzaWduKHRoaXNbUFJJVkFURSQxNV0ucGVuZGluZ1JlbmRlclN0YXRlLCBuZXdTdGF0ZSk7CiAgICAgIH0KICAgICAgX2NoZWNrSW5wdXRTb3VyY2VzQ2hhbmdlKCkgewogICAgICAgIGNvbnN0IGFkZGVkID0gW107CiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IFtdOwogICAgICAgIGNvbnN0IG5ld0lucHV0U291cmNlcyA9IHRoaXMuaW5wdXRTb3VyY2VzOwogICAgICAgIGNvbnN0IG9sZElucHV0U291cmNlcyA9IHRoaXNbUFJJVkFURSQxNV0uY3VycmVudElucHV0U291cmNlczsKICAgICAgICBmb3IgKGNvbnN0IG5ld0lucHV0U291cmNlIG9mIG5ld0lucHV0U291cmNlcykgewogICAgICAgICAgaWYgKCFvbGRJbnB1dFNvdXJjZXMuaW5jbHVkZXMobmV3SW5wdXRTb3VyY2UpKSB7CiAgICAgICAgICAgIGFkZGVkLnB1c2gobmV3SW5wdXRTb3VyY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IG9sZElucHV0U291cmNlIG9mIG9sZElucHV0U291cmNlcykgewogICAgICAgICAgaWYgKCFuZXdJbnB1dFNvdXJjZXMuaW5jbHVkZXMob2xkSW5wdXRTb3VyY2UpKSB7CiAgICAgICAgICAgIHJlbW92ZWQucHVzaChvbGRJbnB1dFNvdXJjZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChhZGRlZC5sZW5ndGggPiAwIHx8IHJlbW92ZWQubGVuZ3RoID4gMCkgewogICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBuZXcgWFJJbnB1dFNvdXJjZXNDaGFuZ2VFdmVudCgnaW5wdXRzb3VyY2VzY2hhbmdlJywgewogICAgICAgICAgICBzZXNzaW9uOiB0aGlzLAogICAgICAgICAgICBhZGRlZDogYWRkZWQsCiAgICAgICAgICAgIHJlbW92ZWQ6IHJlbW92ZWQKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgdGhpc1tQUklWQVRFJDE1XS5jdXJyZW50SW5wdXRTb3VyY2VzLmxlbmd0aCA9IDA7CiAgICAgICAgZm9yIChjb25zdCBuZXdJbnB1dFNvdXJjZSBvZiBuZXdJbnB1dFNvdXJjZXMpIHsKICAgICAgICAgIHRoaXNbUFJJVkFURSQxNV0uY3VycmVudElucHV0U291cmNlcy5wdXNoKG5ld0lucHV0U291cmNlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBQUklWQVRFJDE2ID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSSW5wdXRTb3VyY2UnKTsKICAgIGNsYXNzIFhSSW5wdXRTb3VyY2UgewogICAgICBjb25zdHJ1Y3RvcihpbXBsKSB7CiAgICAgICAgdGhpc1tQUklWQVRFJDE2XSA9IHsKICAgICAgICAgIGltcGwsCiAgICAgICAgICBncmlwU3BhY2U6IG5ldyBYUlNwYWNlKCJncmlwIiwgdGhpcyksCiAgICAgICAgICB0YXJnZXRSYXlTcGFjZTogbmV3IFhSU3BhY2UoInRhcmdldC1yYXkiLCB0aGlzKQogICAgICAgIH07CiAgICAgIH0KICAgICAgZ2V0IGhhbmRlZG5lc3MoKSB7IHJldHVybiB0aGlzW1BSSVZBVEUkMTZdLmltcGwuaGFuZGVkbmVzczsgfQogICAgICBnZXQgdGFyZ2V0UmF5TW9kZSgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQxNl0uaW1wbC50YXJnZXRSYXlNb2RlOyB9CiAgICAgIGdldCBncmlwU3BhY2UoKSB7CiAgICAgICAgbGV0IG1vZGUgPSB0aGlzW1BSSVZBVEUkMTZdLmltcGwudGFyZ2V0UmF5TW9kZTsKICAgICAgICBpZiAobW9kZSA9PT0gImdhemUiIHx8IG1vZGUgPT09ICJzY3JlZW4iKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQxNl0uZ3JpcFNwYWNlOwogICAgICB9CiAgICAgIGdldCB0YXJnZXRSYXlTcGFjZSgpIHsgcmV0dXJuIHRoaXNbUFJJVkFURSQxNl0udGFyZ2V0UmF5U3BhY2U7IH0KICAgICAgZ2V0IHByb2ZpbGVzKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDE2XS5pbXBsLnByb2ZpbGVzOyB9CiAgICAgIGdldCBnYW1lcGFkKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDE2XS5pbXBsLmdhbWVwYWQ7IH0KICAgIH0KCiAgICBjb25zdCBQUklWQVRFJDE3ID0gU3ltYm9sKCdAQHdlYnhyLXBvbHlmaWxsL1hSUmVmZXJlbmNlU3BhY2VFdmVudCcpOwogICAgY2xhc3MgWFJSZWZlcmVuY2VTcGFjZUV2ZW50IGV4dGVuZHMgRXZlbnQgewogICAgICBjb25zdHJ1Y3Rvcih0eXBlLCBldmVudEluaXREaWN0KSB7CiAgICAgICAgc3VwZXIodHlwZSwgZXZlbnRJbml0RGljdCk7CiAgICAgICAgdGhpc1tQUklWQVRFJDE3XSA9IHsKICAgICAgICAgIHJlZmVyZW5jZVNwYWNlOiBldmVudEluaXREaWN0LnJlZmVyZW5jZVNwYWNlLAogICAgICAgICAgdHJhbnNmb3JtOiBldmVudEluaXREaWN0LnRyYW5zZm9ybSB8fCBudWxsCiAgICAgICAgfTsKICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgWFJSZWZlcmVuY2VTcGFjZUV2ZW50LnByb3RvdHlwZSk7CiAgICAgIH0KICAgICAgZ2V0IHJlZmVyZW5jZVNwYWNlKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDE3XS5yZWZlcmVuY2VTcGFjZTsgfQogICAgICBnZXQgdHJhbnNmb3JtKCkgeyByZXR1cm4gdGhpc1tQUklWQVRFJDE3XS50cmFuc2Zvcm07IH0KICAgIH0KCiAgICB2YXIgQVBJID0gewogICAgICBYUlN5c3RlbSwKICAgICAgWFJTZXNzaW9uOiBYUlNlc3Npb24kMSwKICAgICAgWFJTZXNzaW9uRXZlbnQsCiAgICAgIFhSRnJhbWUsCiAgICAgIFhSVmlldywKICAgICAgWFJWaWV3cG9ydCwKICAgICAgWFJWaWV3ZXJQb3NlLAogICAgICBYUldlYkdMTGF5ZXI6IFhSV2ViR0xMYXllciQxLAogICAgICBYUlNwYWNlLAogICAgICBYUlJlZmVyZW5jZVNwYWNlLAogICAgICBYUlJlZmVyZW5jZVNwYWNlRXZlbnQsCiAgICAgIFhSSW5wdXRTb3VyY2UsCiAgICAgIFhSSW5wdXRTb3VyY2VFdmVudCwKICAgICAgWFJJbnB1dFNvdXJjZXNDaGFuZ2VFdmVudCwKICAgICAgWFJSZW5kZXJTdGF0ZSwKICAgICAgWFJSaWdpZFRyYW5zZm9ybTogWFJSaWdpZFRyYW5zZm9ybSQxLAogICAgICBYUlBvc2U6IFhSUG9zZSQxLAogICAgfTsKCiAgICBjb25zdCBwb2x5ZmlsbE1ha2VYUkNvbXBhdGlibGUgPSBDb250ZXh0ID0+IHsKICAgICAgaWYgKHR5cGVvZiBDb250ZXh0LnByb3RvdHlwZS5tYWtlWFJDb21wYXRpYmxlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIENvbnRleHQucHJvdG90eXBlLm1ha2VYUkNvbXBhdGlibGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpc1tYUl9DT01QQVRJQkxFXSA9IHRydWU7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICB9OwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICBjb25zdCBwb2x5ZmlsbEdldENvbnRleHQgPSAoQ2FudmFzKSA9PiB7CiAgICAgIGNvbnN0IGdldENvbnRleHQgPSBDYW52YXMucHJvdG90eXBlLmdldENvbnRleHQ7CiAgICAgIENhbnZhcy5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0VHlwZSwgZ2xBdHRyaWJzKSB7CiAgICAgICAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dC5jYWxsKHRoaXMsIGNvbnRleHRUeXBlLCBnbEF0dHJpYnMpOwogICAgICAgIGlmIChjdHgpIHsKICAgICAgICAgIGN0eFtQT0xZRklMTEVEX1hSX0NPTVBBVElCTEVdID0gdHJ1ZTsKICAgICAgICAgIGlmIChnbEF0dHJpYnMgJiYgKCd4ckNvbXBhdGlibGUnIGluIGdsQXR0cmlicykpIHsKICAgICAgICAgICAgY3R4W1hSX0NPTVBBVElCTEVdID0gZ2xBdHRyaWJzLnhyQ29tcGF0aWJsZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGN0eDsKICAgICAgfTsKICAgIH07CgogICAgY29uc3QgaXNJbWFnZUJpdG1hcFN1cHBvcnRlZCA9IGdsb2JhbCA9PgogICAgICAhIShnbG9iYWwuSW1hZ2VCaXRtYXBSZW5kZXJpbmdDb250ZXh0ICYmCiAgICAgICAgIGdsb2JhbC5jcmVhdGVJbWFnZUJpdG1hcCk7CiAgICBjb25zdCBpc01vYmlsZSA9IGdsb2JhbCA9PiB7CiAgICAgIHZhciBjaGVjayA9IGZhbHNlOwogICAgICAoZnVuY3Rpb24oYSl7aWYoLyhhbmRyb2lkfGJiXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1wtKG58dSl8YzU1XC98Y2FwaXxjY3dhfGNkbVwtfGNlbGx8Y2h0bXxjbGRjfGNtZFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXC01fGdcLW1vfGdvKFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFwtKG18cHx0KXxoZWlcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXC1jfGh0KGMoXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XC18XC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XC8pfGtsb258a3B0IHxrd2NcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XC8oa3xsfHUpfDUwfDU0fFwtW2Etd10pfGxpYnd8bHlueHxtMVwtd3xtM2dhfG01MFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XC1nfHFhXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFwtWzItN118aVwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXC18b298cFwtKXxzZGtcL3xzZShjKFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFwtfHNoYXJ8c2llKFwtfG0pfHNrXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcLXx2XC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcLXx0ZGdcLXx0ZWwoaXxtKXx0aW1cLXx0XC1tb3x0byhwbHxzaCl8dHMoNzB8bVwtfG0zfG01KXx0eFwtOXx1cChcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcLXx5b3VyfHpldG98enRlXC0vaS50ZXN0KGEuc3Vic3RyKDAsNCkpKWNoZWNrID0gdHJ1ZTt9KShnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudHx8Z2xvYmFsLm5hdmlnYXRvci52ZW5kb3J8fGdsb2JhbC5vcGVyYSk7CiAgICAgIHJldHVybiBjaGVjazsKICAgIH07CiAgICBjb25zdCBhcHBseUNhbnZhc1N0eWxlc0Zvck1pbmltYWxSZW5kZXJpbmcgPSBjYW52YXMgPT4gewogICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7CiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGNhbnZhcy5zdHlsZS5oZWlnaHQgPSAnMXB4JzsKICAgICAgY2FudmFzLnN0eWxlLnRvcCA9IGNhbnZhcy5zdHlsZS5sZWZ0ID0gJzBweCc7CiAgICB9OwoKICAgIHZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307CgoKCiAgICBmdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7CiAgICAJcmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7CiAgICAJcmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzOwogICAgfQoKICAgIHZhciBjYXJkYm9hcmRWckRpc3BsYXkgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkgewogICAgCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwogICAgfShjb21tb25qc0dsb2JhbCwgKGZ1bmN0aW9uICgpIHsgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogICAgICB9CiAgICB9OwogICAgdmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgewogICAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICAgICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsKICAgICAgICB2YXIgX2FyciA9IFtdOwogICAgICAgIHZhciBfbiA9IHRydWU7CiAgICAgICAgdmFyIF9kID0gZmFsc2U7CiAgICAgICAgdmFyIF9lID0gdW5kZWZpbmVkOwogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CiAgICAgICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9kID0gdHJ1ZTsKICAgICAgICAgIF9lID0gZXJyOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSkgX2lbInJldHVybiJdKCk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gX2FycjsKICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgICAgICAgIHJldHVybiBhcnI7CiAgICAgICAgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsKICAgICAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgTUlOX1RJTUVTVEVQID0gMC4wMDE7CiAgICB2YXIgTUFYX1RJTUVTVEVQID0gMTsKICAgIHZhciBkYXRhVXJpID0gZnVuY3Rpb24gZGF0YVVyaShtaW1lVHlwZSwgc3ZnKSB7CiAgICAgIHJldHVybiAnZGF0YTonICsgbWltZVR5cGUgKyAnLCcgKyBlbmNvZGVVUklDb21wb25lbnQoc3ZnKTsKICAgIH07CiAgICB2YXIgbGVycCA9IGZ1bmN0aW9uIGxlcnAoYSwgYiwgdCkgewogICAgICByZXR1cm4gYSArIChiIC0gYSkgKiB0OwogICAgfTsKICAgIHZhciBpc0lPUyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGlzSU9TID0gL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gaXNJT1M7CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgaXNXZWJWaWV3QW5kcm9pZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGlzV2ViVmlld0FuZHJvaWQgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1ZlcnNpb24nKSAhPT0gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgIT09IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgIT09IC0xOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBpc1dlYlZpZXdBbmRyb2lkOwogICAgICB9OwogICAgfSgpOwogICAgdmFyIGlzU2FmYXJpID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBpc1NhZmFyaTsKICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBpc0ZpcmVmb3hBbmRyb2lkID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgaXNGaXJlZm94QW5kcm9pZCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSAhPT0gLTE7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGlzRmlyZWZveEFuZHJvaWQ7CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgZ2V0Q2hyb21lVmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvLipDaHJvbWVcLyhbMC05XSspLyk7CiAgICAgIHZhciB2YWx1ZSA9IG1hdGNoID8gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSA6IG51bGw7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9OwogICAgfSgpOwogICAgdmFyIGlzU2FmYXJpV2l0aG91dERldmljZU1vdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHZhbHVlID0gZmFsc2U7CiAgICAgIHZhbHVlID0gaXNJT1MoKSAmJiBpc1NhZmFyaSgpICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignMTNfNCcpICE9PSAtMTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgaXNDaHJvbWVXaXRob3V0RGV2aWNlTW90aW9uID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgdmFsdWUgPSBmYWxzZTsKICAgICAgaWYgKGdldENocm9tZVZlcnNpb24oKSA9PT0gNjUpIHsKICAgICAgICB2YXIgbWF0Y2ggPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8uKkNocm9tZVwvKFswLTlcLl0qKS8pOwogICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgdmFyIF9tYXRjaCQxJHNwbGl0ID0gbWF0Y2hbMV0uc3BsaXQoJy4nKSwKICAgICAgICAgICAgICBfbWF0Y2gkMSRzcGxpdDIgPSBzbGljZWRUb0FycmF5KF9tYXRjaCQxJHNwbGl0LCA0KTsKICAgICAgICAgICAgICBfbWF0Y2gkMSRzcGxpdDJbMF07CiAgICAgICAgICAgICAgX21hdGNoJDEkc3BsaXQyWzFdOwogICAgICAgICAgICAgIHZhciBicmFuY2ggPSBfbWF0Y2gkMSRzcGxpdDJbMl0sCiAgICAgICAgICAgICAgYnVpbGQgPSBfbWF0Y2gkMSRzcGxpdDJbM107CiAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KGJyYW5jaCwgMTApID09PSAzMzI1ICYmIHBhcnNlSW50KGJ1aWxkLCAxMCkgPCAxNDg7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9OwogICAgfSgpOwogICAgdmFyIGlzUjcgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBpc1I3ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdSNyBCdWlsZCcpICE9PSAtMTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gaXNSNzsKICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBpc0xhbmRzY2FwZU1vZGUgPSBmdW5jdGlvbiBpc0xhbmRzY2FwZU1vZGUoKSB7CiAgICAgIHZhciBydG4gPSB3aW5kb3cub3JpZW50YXRpb24gPT0gOTAgfHwgd2luZG93Lm9yaWVudGF0aW9uID09IC05MDsKICAgICAgcmV0dXJuIGlzUjcoKSA/ICFydG4gOiBydG47CiAgICB9OwogICAgdmFyIGlzVGltZXN0YW1wRGVsdGFWYWxpZCA9IGZ1bmN0aW9uIGlzVGltZXN0YW1wRGVsdGFWYWxpZCh0aW1lc3RhbXBEZWx0YVMpIHsKICAgICAgaWYgKGlzTmFOKHRpbWVzdGFtcERlbHRhUykpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRpbWVzdGFtcERlbHRhUyA8PSBNSU5fVElNRVNURVApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRpbWVzdGFtcERlbHRhUyA+IE1BWF9USU1FU1RFUCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICB2YXIgZ2V0U2NyZWVuV2lkdGggPSBmdW5jdGlvbiBnZXRTY3JlZW5XaWR0aCgpIHsKICAgICAgcmV0dXJuIE1hdGgubWF4KHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvOwogICAgfTsKICAgIHZhciBnZXRTY3JlZW5IZWlnaHQgPSBmdW5jdGlvbiBnZXRTY3JlZW5IZWlnaHQoKSB7CiAgICAgIHJldHVybiBNYXRoLm1pbih3aW5kb3cuc2NyZWVuLndpZHRoLCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbzsKICAgIH07CiAgICB2YXIgcmVxdWVzdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiByZXF1ZXN0RnVsbHNjcmVlbihlbGVtZW50KSB7CiAgICAgIGlmIChpc1dlYlZpZXdBbmRyb2lkKCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHsKICAgICAgICBlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKCk7CiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikgewogICAgICAgIGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTsKICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKSB7CiAgICAgICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpOwogICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikgewogICAgICAgIGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICB2YXIgZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiBleGl0RnVsbHNjcmVlbigpIHsKICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7CiAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTsKICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikgewogICAgICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7CiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikgewogICAgICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTsKICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7CiAgICAgICAgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICB2YXIgZ2V0RnVsbHNjcmVlbkVsZW1lbnQgPSBmdW5jdGlvbiBnZXRGdWxsc2NyZWVuRWxlbWVudCgpIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7CiAgICB9OwogICAgdmFyIGxpbmtQcm9ncmFtID0gZnVuY3Rpb24gbGlua1Byb2dyYW0oZ2wsIHZlcnRleFNvdXJjZSwgZnJhZ21lbnRTb3VyY2UsIGF0dHJpYkxvY2F0aW9uTWFwKSB7CiAgICAgIHZhciB2ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7CiAgICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNvdXJjZSk7CiAgICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyKTsKICAgICAgdmFyIGZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7CiAgICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ21lbnRTb3VyY2UpOwogICAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTsKICAgICAgdmFyIHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7CiAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpOwogICAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpOwogICAgICBmb3IgKHZhciBhdHRyaWJOYW1lIGluIGF0dHJpYkxvY2F0aW9uTWFwKSB7CiAgICAgICAgZ2wuYmluZEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGF0dHJpYkxvY2F0aW9uTWFwW2F0dHJpYk5hbWVdLCBhdHRyaWJOYW1lKTsKICAgICAgfWdsLmxpbmtQcm9ncmFtKHByb2dyYW0pOwogICAgICBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVyKTsKICAgICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTsKICAgICAgcmV0dXJuIHByb2dyYW07CiAgICB9OwogICAgdmFyIGdldFByb2dyYW1Vbmlmb3JtcyA9IGZ1bmN0aW9uIGdldFByb2dyYW1Vbmlmb3JtcyhnbCwgcHJvZ3JhbSkgewogICAgICB2YXIgdW5pZm9ybXMgPSB7fTsKICAgICAgdmFyIHVuaWZvcm1Db3VudCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTsKICAgICAgdmFyIHVuaWZvcm1OYW1lID0gJyc7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pZm9ybUNvdW50OyBpKyspIHsKICAgICAgICB2YXIgdW5pZm9ybUluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpOwogICAgICAgIHVuaWZvcm1OYW1lID0gdW5pZm9ybUluZm8ubmFtZS5yZXBsYWNlKCdbMF0nLCAnJyk7CiAgICAgICAgdW5pZm9ybXNbdW5pZm9ybU5hbWVdID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHVuaWZvcm1OYW1lKTsKICAgICAgfQogICAgICByZXR1cm4gdW5pZm9ybXM7CiAgICB9OwogICAgdmFyIG9ydGhvTWF0cml4ID0gZnVuY3Rpb24gb3J0aG9NYXRyaXgob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikgewogICAgICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCksCiAgICAgICAgICBidCA9IDEgLyAoYm90dG9tIC0gdG9wKSwKICAgICAgICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTsKICAgICAgb3V0WzBdID0gLTIgKiBscjsKICAgICAgb3V0WzFdID0gMDsKICAgICAgb3V0WzJdID0gMDsKICAgICAgb3V0WzNdID0gMDsKICAgICAgb3V0WzRdID0gMDsKICAgICAgb3V0WzVdID0gLTIgKiBidDsKICAgICAgb3V0WzZdID0gMDsKICAgICAgb3V0WzddID0gMDsKICAgICAgb3V0WzhdID0gMDsKICAgICAgb3V0WzldID0gMDsKICAgICAgb3V0WzEwXSA9IDIgKiBuZjsKICAgICAgb3V0WzExXSA9IDA7CiAgICAgIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyOwogICAgICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDsKICAgICAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mOwogICAgICBvdXRbMTVdID0gMTsKICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgICB2YXIgaXNNb2JpbGUgPSBmdW5jdGlvbiBpc01vYmlsZSgpIHsKICAgICAgdmFyIGNoZWNrID0gZmFsc2U7CiAgICAgIChmdW5jdGlvbiAoYSkgewogICAgICAgIGlmICgvKGFuZHJvaWR8YmJcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KGEpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcLShufHUpfGM1NVwvfGNhcGl8Y2N3YXxjZG1cLXxjZWxsfGNodG18Y2xkY3xjbWRcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1wtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlwtNXxnXC1tb3xnbyhcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcLShtfHB8dCl8aGVpXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1wtY3xodChjKFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFwtfFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFwvKXxrbG9ufGtwdCB8a3djXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFwvKGt8bHx1KXw1MHw1NHxcLVthLXddKXxsaWJ3fGx5bnh8bTFcLXd8bTNnYXxtNTBcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFwtZ3xxYVwtYXxxYygwN3wxMnwyMXwzMnw2MHxcLVsyLTddfGlcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFwtfG9vfHBcLSl8c2RrXC98c2UoYyhcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcLXxzaGFyfHNpZShcLXxtKXxza1wtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXC18dlwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXC18dGRnXC18dGVsKGl8bSl8dGltXC18dFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cLXxtM3xtNSl8dHhcLTl8dXAoXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXC18eW91cnx6ZXRvfHp0ZVwtL2kudGVzdChhLnN1YnN0cigwLCA0KSkpIGNoZWNrID0gdHJ1ZTsKICAgICAgfSkobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSk7CiAgICAgIHJldHVybiBjaGVjazsKICAgIH07CiAgICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYykgewogICAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7CiAgICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBkZXN0W2tleV0gPSBzcmNba2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGRlc3Q7CiAgICB9OwogICAgdmFyIHNhZmFyaUNzc1NpemVXb3JrYXJvdW5kID0gZnVuY3Rpb24gc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQoY2FudmFzKSB7CiAgICAgIGlmIChpc0lPUygpKSB7CiAgICAgICAgdmFyIHdpZHRoID0gY2FudmFzLnN0eWxlLndpZHRoOwogICAgICAgIHZhciBoZWlnaHQgPSBjYW52YXMuc3R5bGUuaGVpZ2h0OwogICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHBhcnNlSW50KHdpZHRoKSArIDEgKyAncHgnOwogICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBwYXJzZUludChoZWlnaHQpICsgJ3B4JzsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoOwogICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodDsKICAgICAgICB9LCAxMDApOwogICAgICB9CiAgICAgIHdpbmRvdy5jYW52YXMgPSBjYW52YXM7CiAgICB9OwogICAgdmFyIGZyYW1lRGF0YUZyb21Qb3NlID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgcGlPdmVyMTgwID0gTWF0aC5QSSAvIDE4MC4wOwogICAgICB2YXIgcmFkNDUgPSBNYXRoLlBJICogMC4yNTsKICAgICAgZnVuY3Rpb24gbWF0NF9wZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7CiAgICAgICAgdmFyIHVwVGFuID0gTWF0aC50YW4oZm92ID8gZm92LnVwRGVncmVlcyAqIHBpT3ZlcjE4MCA6IHJhZDQ1KSwKICAgICAgICAgICAgZG93blRhbiA9IE1hdGgudGFuKGZvdiA/IGZvdi5kb3duRGVncmVlcyAqIHBpT3ZlcjE4MCA6IHJhZDQ1KSwKICAgICAgICAgICAgbGVmdFRhbiA9IE1hdGgudGFuKGZvdiA/IGZvdi5sZWZ0RGVncmVlcyAqIHBpT3ZlcjE4MCA6IHJhZDQ1KSwKICAgICAgICAgICAgcmlnaHRUYW4gPSBNYXRoLnRhbihmb3YgPyBmb3YucmlnaHREZWdyZWVzICogcGlPdmVyMTgwIDogcmFkNDUpLAogICAgICAgICAgICB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKSwKICAgICAgICAgICAgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7CiAgICAgICAgb3V0WzBdID0geFNjYWxlOwogICAgICAgIG91dFsxXSA9IDAuMDsKICAgICAgICBvdXRbMl0gPSAwLjA7CiAgICAgICAgb3V0WzNdID0gMC4wOwogICAgICAgIG91dFs0XSA9IDAuMDsKICAgICAgICBvdXRbNV0gPSB5U2NhbGU7CiAgICAgICAgb3V0WzZdID0gMC4wOwogICAgICAgIG91dFs3XSA9IDAuMDsKICAgICAgICBvdXRbOF0gPSAtKChsZWZ0VGFuIC0gcmlnaHRUYW4pICogeFNjYWxlICogMC41KTsKICAgICAgICBvdXRbOV0gPSAodXBUYW4gLSBkb3duVGFuKSAqIHlTY2FsZSAqIDAuNTsKICAgICAgICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpOwogICAgICAgIG91dFsxMV0gPSAtMTsKICAgICAgICBvdXRbMTJdID0gMC4wOwogICAgICAgIG91dFsxM10gPSAwLjA7CiAgICAgICAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7CiAgICAgICAgb3V0WzE1XSA9IDAuMDsKICAgICAgICByZXR1cm4gb3V0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG1hdDRfZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7CiAgICAgICAgdmFyIHggPSBxWzBdLAogICAgICAgICAgICB5ID0gcVsxXSwKICAgICAgICAgICAgeiA9IHFbMl0sCiAgICAgICAgICAgIHcgPSBxWzNdLAogICAgICAgICAgICB4MiA9IHggKyB4LAogICAgICAgICAgICB5MiA9IHkgKyB5LAogICAgICAgICAgICB6MiA9IHogKyB6LAogICAgICAgICAgICB4eCA9IHggKiB4MiwKICAgICAgICAgICAgeHkgPSB4ICogeTIsCiAgICAgICAgICAgIHh6ID0geCAqIHoyLAogICAgICAgICAgICB5eSA9IHkgKiB5MiwKICAgICAgICAgICAgeXogPSB5ICogejIsCiAgICAgICAgICAgIHp6ID0geiAqIHoyLAogICAgICAgICAgICB3eCA9IHcgKiB4MiwKICAgICAgICAgICAgd3kgPSB3ICogeTIsCiAgICAgICAgICAgIHd6ID0gdyAqIHoyOwogICAgICAgIG91dFswXSA9IDEgLSAoeXkgKyB6eik7CiAgICAgICAgb3V0WzFdID0geHkgKyB3ejsKICAgICAgICBvdXRbMl0gPSB4eiAtIHd5OwogICAgICAgIG91dFszXSA9IDA7CiAgICAgICAgb3V0WzRdID0geHkgLSB3ejsKICAgICAgICBvdXRbNV0gPSAxIC0gKHh4ICsgenopOwogICAgICAgIG91dFs2XSA9IHl6ICsgd3g7CiAgICAgICAgb3V0WzddID0gMDsKICAgICAgICBvdXRbOF0gPSB4eiArIHd5OwogICAgICAgIG91dFs5XSA9IHl6IC0gd3g7CiAgICAgICAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7CiAgICAgICAgb3V0WzExXSA9IDA7CiAgICAgICAgb3V0WzEyXSA9IHZbMF07CiAgICAgICAgb3V0WzEzXSA9IHZbMV07CiAgICAgICAgb3V0WzE0XSA9IHZbMl07CiAgICAgICAgb3V0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIG91dDsKICAgICAgfQogICAgICBmdW5jdGlvbiBtYXQ0X3RyYW5zbGF0ZShvdXQsIGEsIHYpIHsKICAgICAgICB2YXIgeCA9IHZbMF0sCiAgICAgICAgICAgIHkgPSB2WzFdLAogICAgICAgICAgICB6ID0gdlsyXSwKICAgICAgICAgICAgYTAwLAogICAgICAgICAgICBhMDEsCiAgICAgICAgICAgIGEwMiwKICAgICAgICAgICAgYTAzLAogICAgICAgICAgICBhMTAsCiAgICAgICAgICAgIGExMSwKICAgICAgICAgICAgYTEyLAogICAgICAgICAgICBhMTMsCiAgICAgICAgICAgIGEyMCwKICAgICAgICAgICAgYTIxLAogICAgICAgICAgICBhMjIsCiAgICAgICAgICAgIGEyMzsKICAgICAgICBpZiAoYSA9PT0gb3V0KSB7CiAgICAgICAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07CiAgICAgICAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107CiAgICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdOwogICAgICAgICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYTAwID0gYVswXTthMDEgPSBhWzFdO2EwMiA9IGFbMl07YTAzID0gYVszXTsKICAgICAgICAgIGExMCA9IGFbNF07YTExID0gYVs1XTthMTIgPSBhWzZdO2ExMyA9IGFbN107CiAgICAgICAgICBhMjAgPSBhWzhdO2EyMSA9IGFbOV07YTIyID0gYVsxMF07YTIzID0gYVsxMV07CiAgICAgICAgICBvdXRbMF0gPSBhMDA7b3V0WzFdID0gYTAxO291dFsyXSA9IGEwMjtvdXRbM10gPSBhMDM7CiAgICAgICAgICBvdXRbNF0gPSBhMTA7b3V0WzVdID0gYTExO291dFs2XSA9IGExMjtvdXRbN10gPSBhMTM7CiAgICAgICAgICBvdXRbOF0gPSBhMjA7b3V0WzldID0gYTIxO291dFsxMF0gPSBhMjI7b3V0WzExXSA9IGEyMzsKICAgICAgICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTsKICAgICAgICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTsKICAgICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTsKICAgICAgICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgICAgfQogICAgICBmdW5jdGlvbiBtYXQ0X2ludmVydChvdXQsIGEpIHsKICAgICAgICB2YXIgYTAwID0gYVswXSwKICAgICAgICAgICAgYTAxID0gYVsxXSwKICAgICAgICAgICAgYTAyID0gYVsyXSwKICAgICAgICAgICAgYTAzID0gYVszXSwKICAgICAgICAgICAgYTEwID0gYVs0XSwKICAgICAgICAgICAgYTExID0gYVs1XSwKICAgICAgICAgICAgYTEyID0gYVs2XSwKICAgICAgICAgICAgYTEzID0gYVs3XSwKICAgICAgICAgICAgYTIwID0gYVs4XSwKICAgICAgICAgICAgYTIxID0gYVs5XSwKICAgICAgICAgICAgYTIyID0gYVsxMF0sCiAgICAgICAgICAgIGEyMyA9IGFbMTFdLAogICAgICAgICAgICBhMzAgPSBhWzEyXSwKICAgICAgICAgICAgYTMxID0gYVsxM10sCiAgICAgICAgICAgIGEzMiA9IGFbMTRdLAogICAgICAgICAgICBhMzMgPSBhWzE1XSwKICAgICAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLAogICAgICAgICAgICBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsCiAgICAgICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCwKICAgICAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLAogICAgICAgICAgICBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsCiAgICAgICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMiwKICAgICAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLAogICAgICAgICAgICBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsCiAgICAgICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCwKICAgICAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLAogICAgICAgICAgICBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsCiAgICAgICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMiwKICAgICAgICBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7CiAgICAgICAgaWYgKCFkZXQpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7CiAgICAgICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7CiAgICAgICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7CiAgICAgICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7CiAgICAgICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7CiAgICAgICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7CiAgICAgICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7CiAgICAgICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7CiAgICAgICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7CiAgICAgICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7CiAgICAgICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7CiAgICAgICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0OwogICAgICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDsKICAgICAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7CiAgICAgICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0OwogICAgICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDsKICAgICAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7CiAgICAgICAgcmV0dXJuIG91dDsKICAgICAgfQogICAgICB2YXIgZGVmYXVsdE9yaWVudGF0aW9uID0gbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMCwgMV0pOwogICAgICB2YXIgZGVmYXVsdFBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMF0pOwogICAgICBmdW5jdGlvbiB1cGRhdGVFeWVNYXRyaWNlcyhwcm9qZWN0aW9uLCB2aWV3LCBwb3NlLCBmb3YsIG9mZnNldCwgdnJEaXNwbGF5KSB7CiAgICAgICAgbWF0NF9wZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhwcm9qZWN0aW9uLCBmb3YgfHwgbnVsbCwgdnJEaXNwbGF5LmRlcHRoTmVhciwgdnJEaXNwbGF5LmRlcHRoRmFyKTsKICAgICAgICB2YXIgb3JpZW50YXRpb24gPSBwb3NlLm9yaWVudGF0aW9uIHx8IGRlZmF1bHRPcmllbnRhdGlvbjsKICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3NlLnBvc2l0aW9uIHx8IGRlZmF1bHRQb3NpdGlvbjsKICAgICAgICBtYXQ0X2Zyb21Sb3RhdGlvblRyYW5zbGF0aW9uKHZpZXcsIG9yaWVudGF0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgaWYgKG9mZnNldCkgbWF0NF90cmFuc2xhdGUodmlldywgdmlldywgb2Zmc2V0KTsKICAgICAgICBtYXQ0X2ludmVydCh2aWV3LCB2aWV3KTsKICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24gKGZyYW1lRGF0YSwgcG9zZSwgdnJEaXNwbGF5KSB7CiAgICAgICAgaWYgKCFmcmFtZURhdGEgfHwgIXBvc2UpIHJldHVybiBmYWxzZTsKICAgICAgICBmcmFtZURhdGEucG9zZSA9IHBvc2U7CiAgICAgICAgZnJhbWVEYXRhLnRpbWVzdGFtcCA9IHBvc2UudGltZXN0YW1wOwogICAgICAgIHVwZGF0ZUV5ZU1hdHJpY2VzKGZyYW1lRGF0YS5sZWZ0UHJvamVjdGlvbk1hdHJpeCwgZnJhbWVEYXRhLmxlZnRWaWV3TWF0cml4LCBwb3NlLCB2ckRpc3BsYXkuX2dldEZpZWxkT2ZWaWV3KCJsZWZ0IiksIHZyRGlzcGxheS5fZ2V0RXllT2Zmc2V0KCJsZWZ0IiksIHZyRGlzcGxheSk7CiAgICAgICAgdXBkYXRlRXllTWF0cmljZXMoZnJhbWVEYXRhLnJpZ2h0UHJvamVjdGlvbk1hdHJpeCwgZnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCwgcG9zZSwgdnJEaXNwbGF5Ll9nZXRGaWVsZE9mVmlldygicmlnaHQiKSwgdnJEaXNwbGF5Ll9nZXRFeWVPZmZzZXQoInJpZ2h0IiksIHZyRGlzcGxheSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH07CiAgICB9KCk7CiAgICB2YXIgaXNJbnNpZGVDcm9zc09yaWdpbklGcmFtZSA9IGZ1bmN0aW9uIGlzSW5zaWRlQ3Jvc3NPcmlnaW5JRnJhbWUoKSB7CiAgICAgIHZhciBpc0ZyYW1lZCA9IHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wOwogICAgICB2YXIgcmVmT3JpZ2luID0gZ2V0T3JpZ2luRnJvbVVybChkb2N1bWVudC5yZWZlcnJlcik7CiAgICAgIHZhciB0aGlzT3JpZ2luID0gZ2V0T3JpZ2luRnJvbVVybCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICAgIHJldHVybiBpc0ZyYW1lZCAmJiByZWZPcmlnaW4gIT09IHRoaXNPcmlnaW47CiAgICB9OwogICAgdmFyIGdldE9yaWdpbkZyb21VcmwgPSBmdW5jdGlvbiBnZXRPcmlnaW5Gcm9tVXJsKHVybCkgewogICAgICB2YXIgZG9tYWluSWR4OwogICAgICB2YXIgcHJvdG9TZXBJZHggPSB1cmwuaW5kZXhPZigiOi8vIik7CiAgICAgIGlmIChwcm90b1NlcElkeCAhPT0gLTEpIHsKICAgICAgICBkb21haW5JZHggPSBwcm90b1NlcElkeCArIDM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZG9tYWluSWR4ID0gMDsKICAgICAgfQogICAgICB2YXIgZG9tYWluRW5kSWR4ID0gdXJsLmluZGV4T2YoJy8nLCBkb21haW5JZHgpOwogICAgICBpZiAoZG9tYWluRW5kSWR4ID09PSAtMSkgewogICAgICAgIGRvbWFpbkVuZElkeCA9IHVybC5sZW5ndGg7CiAgICAgIH0KICAgICAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgZG9tYWluRW5kSWR4KTsKICAgIH07CiAgICB2YXIgZ2V0UXVhdGVybmlvbkFuZ2xlID0gZnVuY3Rpb24gZ2V0UXVhdGVybmlvbkFuZ2xlKHF1YXQpIHsKICAgICAgaWYgKHF1YXQudyA+IDEpIHsKICAgICAgICBjb25zb2xlLndhcm4oJ2dldFF1YXRlcm5pb25BbmdsZTogdyA+IDEnKTsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgICB2YXIgYW5nbGUgPSAyICogTWF0aC5hY29zKHF1YXQudyk7CiAgICAgIHJldHVybiBhbmdsZTsKICAgIH07CiAgICB2YXIgd2Fybk9uY2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBvYnNlcnZlZFdhcm5pbmdzID0ge307CiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCBtZXNzYWdlKSB7CiAgICAgICAgaWYgKG9ic2VydmVkV2FybmluZ3Nba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oJ3dlYnZyLXBvbHlmaWxsOiAnICsgbWVzc2FnZSk7CiAgICAgICAgICBvYnNlcnZlZFdhcm5pbmdzW2tleV0gPSB0cnVlOwogICAgICAgIH0KICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBkZXByZWNhdGVXYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRlV2FybmluZyhkZXByZWNhdGVkLCBzdWdnZXN0ZWQpIHsKICAgICAgdmFyIGFsdGVybmF0aXZlID0gc3VnZ2VzdGVkID8gJ1BsZWFzZSB1c2UgJyArIHN1Z2dlc3RlZCArICcgaW5zdGVhZC4nIDogJyc7CiAgICAgIHdhcm5PbmNlKGRlcHJlY2F0ZWQsIGRlcHJlY2F0ZWQgKyAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnVGhpcyBtYXkgbm90IHdvcmsgb24gbmF0aXZlIFdlYlZSIGRpc3BsYXlzLiAnICsgYWx0ZXJuYXRpdmUpOwogICAgfTsKICAgIGZ1bmN0aW9uIFdHTFVQcmVzZXJ2ZUdMU3RhdGUoZ2wsIGJpbmRpbmdzLCBjYWxsYmFjaykgewogICAgICBpZiAoIWJpbmRpbmdzKSB7CiAgICAgICAgY2FsbGJhY2soZ2wpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgYm91bmRWYWx1ZXMgPSBbXTsKICAgICAgdmFyIGFjdGl2ZVRleHR1cmUgPSBudWxsOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTsKICAgICAgICBzd2l0Y2ggKGJpbmRpbmcpIHsKICAgICAgICAgIGNhc2UgZ2wuVEVYVFVSRV9CSU5ESU5HXzJEOgogICAgICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVA6CiAgICAgICAgICAgIHZhciB0ZXh0dXJlVW5pdCA9IGJpbmRpbmdzWysraV07CiAgICAgICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiVEVYVFVSRV9CSU5ESU5HXzJEIG9yIFRFWFRVUkVfQklORElOR19DVUJFX01BUCBtdXN0IGJlIGZvbGxvd2VkIGJ5IGEgdmFsaWQgdGV4dHVyZSB1bml0Iik7CiAgICAgICAgICAgICAgYm91bmRWYWx1ZXMucHVzaChudWxsLCBudWxsKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWFjdGl2ZVRleHR1cmUpIHsKICAgICAgICAgICAgICBhY3RpdmVUZXh0dXJlID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkFDVElWRV9URVhUVVJFKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTsKICAgICAgICAgICAgYm91bmRWYWx1ZXMucHVzaChnbC5nZXRQYXJhbWV0ZXIoYmluZGluZyksIG51bGwpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgZ2wuQUNUSVZFX1RFWFRVUkU6CiAgICAgICAgICAgIGFjdGl2ZVRleHR1cmUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQUNUSVZFX1RFWFRVUkUpOwogICAgICAgICAgICBib3VuZFZhbHVlcy5wdXNoKG51bGwpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGJvdW5kVmFsdWVzLnB1c2goZ2wuZ2V0UGFyYW1ldGVyKGJpbmRpbmcpKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGNhbGxiYWNrKGdsKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7ICsraSkgewogICAgICAgIHZhciBiaW5kaW5nID0gYmluZGluZ3NbaV07CiAgICAgICAgdmFyIGJvdW5kVmFsdWUgPSBib3VuZFZhbHVlc1tpXTsKICAgICAgICBzd2l0Y2ggKGJpbmRpbmcpIHsKICAgICAgICAgIGNhc2UgZ2wuQUNUSVZFX1RFWFRVUkU6CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5BUlJBWV9CVUZGRVJfQklORElORzoKICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJvdW5kVmFsdWUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgZ2wuQ09MT1JfQ0xFQVJfVkFMVUU6CiAgICAgICAgICAgIGdsLmNsZWFyQ29sb3IoYm91bmRWYWx1ZVswXSwgYm91bmRWYWx1ZVsxXSwgYm91bmRWYWx1ZVsyXSwgYm91bmRWYWx1ZVszXSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5DT0xPUl9XUklURU1BU0s6CiAgICAgICAgICAgIGdsLmNvbG9yTWFzayhib3VuZFZhbHVlWzBdLCBib3VuZFZhbHVlWzFdLCBib3VuZFZhbHVlWzJdLCBib3VuZFZhbHVlWzNdKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIGdsLkNVUlJFTlRfUFJPR1JBTToKICAgICAgICAgICAgZ2wudXNlUHJvZ3JhbShib3VuZFZhbHVlKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkc6CiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJvdW5kVmFsdWUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgZ2wuRlJBTUVCVUZGRVJfQklORElORzoKICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBib3VuZFZhbHVlKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIGdsLlJFTkRFUkJVRkZFUl9CSU5ESU5HOgogICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgYm91bmRWYWx1ZSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfMkQ6CiAgICAgICAgICAgIHZhciB0ZXh0dXJlVW5pdCA9IGJpbmRpbmdzWysraV07CiAgICAgICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTsKICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgYm91bmRWYWx1ZSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVA6CiAgICAgICAgICAgIHZhciB0ZXh0dXJlVW5pdCA9IGJpbmRpbmdzWysraV07CiAgICAgICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTsKICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV9DVUJFX01BUCwgYm91bmRWYWx1ZSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5WSUVXUE9SVDoKICAgICAgICAgICAgZ2wudmlld3BvcnQoYm91bmRWYWx1ZVswXSwgYm91bmRWYWx1ZVsxXSwgYm91bmRWYWx1ZVsyXSwgYm91bmRWYWx1ZVszXSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBnbC5CTEVORDoKICAgICAgICAgIGNhc2UgZ2wuQ1VMTF9GQUNFOgogICAgICAgICAgY2FzZSBnbC5ERVBUSF9URVNUOgogICAgICAgICAgY2FzZSBnbC5TQ0lTU09SX1RFU1Q6CiAgICAgICAgICBjYXNlIGdsLlNURU5DSUxfVEVTVDoKICAgICAgICAgICAgaWYgKGJvdW5kVmFsdWUpIHsKICAgICAgICAgICAgICBnbC5lbmFibGUoYmluZGluZyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZ2wuZGlzYWJsZShiaW5kaW5nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJObyBHTCByZXN0b3JlIGJlaGF2aW9yIGZvciAweCIgKyBiaW5kaW5nLnRvU3RyaW5nKDE2KSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoYWN0aXZlVGV4dHVyZSkgewogICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShhY3RpdmVUZXh0dXJlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHZhciBnbFByZXNlcnZlU3RhdGUgPSBXR0xVUHJlc2VydmVHTFN0YXRlOwogICAgdmFyIGRpc3RvcnRpb25WUyA9IFsnYXR0cmlidXRlIHZlYzIgcG9zaXRpb247JywgJ2F0dHJpYnV0ZSB2ZWMzIHRleENvb3JkOycsICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkOycsICd1bmlmb3JtIHZlYzQgdmlld3BvcnRPZmZzZXRTY2FsZVsyXTsnLCAndm9pZCBtYWluKCkgeycsICcgIHZlYzQgdmlld3BvcnQgPSB2aWV3cG9ydE9mZnNldFNjYWxlW2ludCh0ZXhDb29yZC56KV07JywgJyAgdlRleENvb3JkID0gKHRleENvb3JkLnh5ICogdmlld3BvcnQuencpICsgdmlld3BvcnQueHk7JywgJyAgZ2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wLCAxLjAgKTsnLCAnfSddLmpvaW4oJ1xuJyk7CiAgICB2YXIgZGlzdG9ydGlvbkZTID0gWydwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLCAndW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZTsnLCAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDsnLCAndm9pZCBtYWluKCkgeycsICcgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChkaWZmdXNlLCB2VGV4Q29vcmQpOycsICd9J10uam9pbignXG4nKTsKICAgIGZ1bmN0aW9uIENhcmRib2FyZERpc3RvcnRlcihnbCwgY2FyZGJvYXJkVUksIGJ1ZmZlclNjYWxlLCBkaXJ0eVN1Ym1pdEZyYW1lQmluZGluZ3MpIHsKICAgICAgdGhpcy5nbCA9IGdsOwogICAgICB0aGlzLmNhcmRib2FyZFVJID0gY2FyZGJvYXJkVUk7CiAgICAgIHRoaXMuYnVmZmVyU2NhbGUgPSBidWZmZXJTY2FsZTsKICAgICAgdGhpcy5kaXJ0eVN1Ym1pdEZyYW1lQmluZGluZ3MgPSBkaXJ0eVN1Ym1pdEZyYW1lQmluZGluZ3M7CiAgICAgIHRoaXMuY3R4QXR0cmlicyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7CiAgICAgIHRoaXMuaW5zdGFuY2VFeHQgPSBnbC5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTsKICAgICAgdGhpcy5tZXNoV2lkdGggPSAyMDsKICAgICAgdGhpcy5tZXNoSGVpZ2h0ID0gMjA7CiAgICAgIHRoaXMuYnVmZmVyV2lkdGggPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGg7CiAgICAgIHRoaXMuYnVmZmVySGVpZ2h0ID0gZ2wuZHJhd2luZ0J1ZmZlckhlaWdodDsKICAgICAgdGhpcy5yZWFsQmluZEZyYW1lYnVmZmVyID0gZ2wuYmluZEZyYW1lYnVmZmVyOwogICAgICB0aGlzLnJlYWxFbmFibGUgPSBnbC5lbmFibGU7CiAgICAgIHRoaXMucmVhbERpc2FibGUgPSBnbC5kaXNhYmxlOwogICAgICB0aGlzLnJlYWxDb2xvck1hc2sgPSBnbC5jb2xvck1hc2s7CiAgICAgIHRoaXMucmVhbENsZWFyQ29sb3IgPSBnbC5jbGVhckNvbG9yOwogICAgICB0aGlzLnJlYWxWaWV3cG9ydCA9IGdsLnZpZXdwb3J0OwogICAgICBpZiAoIWlzSU9TKCkpIHsKICAgICAgICB0aGlzLnJlYWxDYW52YXNXaWR0aCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2wuY2FudmFzLl9fcHJvdG9fXywgJ3dpZHRoJyk7CiAgICAgICAgdGhpcy5yZWFsQ2FudmFzSGVpZ2h0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbC5jYW52YXMuX19wcm90b19fLCAnaGVpZ2h0Jyk7CiAgICAgIH0KICAgICAgdGhpcy5pc1BhdGNoZWQgPSBmYWxzZTsKICAgICAgdGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IG51bGw7CiAgICAgIHRoaXMuY3VsbEZhY2UgPSBmYWxzZTsKICAgICAgdGhpcy5kZXB0aFRlc3QgPSBmYWxzZTsKICAgICAgdGhpcy5ibGVuZCA9IGZhbHNlOwogICAgICB0aGlzLnNjaXNzb3JUZXN0ID0gZmFsc2U7CiAgICAgIHRoaXMuc3RlbmNpbFRlc3QgPSBmYWxzZTsKICAgICAgdGhpcy52aWV3cG9ydCA9IFswLCAwLCAwLCAwXTsKICAgICAgdGhpcy5jb2xvck1hc2sgPSBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV07CiAgICAgIHRoaXMuY2xlYXJDb2xvciA9IFswLCAwLCAwLCAwXTsKICAgICAgdGhpcy5hdHRyaWJzID0gewogICAgICAgIHBvc2l0aW9uOiAwLAogICAgICAgIHRleENvb3JkOiAxCiAgICAgIH07CiAgICAgIHRoaXMucHJvZ3JhbSA9IGxpbmtQcm9ncmFtKGdsLCBkaXN0b3J0aW9uVlMsIGRpc3RvcnRpb25GUywgdGhpcy5hdHRyaWJzKTsKICAgICAgdGhpcy51bmlmb3JtcyA9IGdldFByb2dyYW1Vbmlmb3JtcyhnbCwgdGhpcy5wcm9ncmFtKTsKICAgICAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlID0gbmV3IEZsb2F0MzJBcnJheSg4KTsKICAgICAgdGhpcy5zZXRUZXh0dXJlQm91bmRzKCk7CiAgICAgIHRoaXMudmVydGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7CiAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICAgICAgdGhpcy5pbmRleENvdW50ID0gMDsKICAgICAgdGhpcy5yZW5kZXJUYXJnZXQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7CiAgICAgIHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwogICAgICB0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlciA9IG51bGw7CiAgICAgIHRoaXMuZGVwdGhCdWZmZXIgPSBudWxsOwogICAgICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBudWxsOwogICAgICBpZiAodGhpcy5jdHhBdHRyaWJzLmRlcHRoICYmIHRoaXMuY3R4QXR0cmlicy5zdGVuY2lsKSB7CiAgICAgICAgdGhpcy5kZXB0aFN0ZW5jaWxCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmN0eEF0dHJpYnMuZGVwdGgpIHsKICAgICAgICB0aGlzLmRlcHRoQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5jdHhBdHRyaWJzLnN0ZW5jaWwpIHsKICAgICAgICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICAgICAgfQogICAgICB0aGlzLnBhdGNoKCk7CiAgICAgIHRoaXMub25SZXNpemUoKTsKICAgIH0KICAgIENhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGdsID0gdGhpcy5nbDsKICAgICAgdGhpcy51bnBhdGNoKCk7CiAgICAgIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTsKICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMudmVydGV4QnVmZmVyKTsKICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuaW5kZXhCdWZmZXIpOwogICAgICBnbC5kZWxldGVUZXh0dXJlKHRoaXMucmVuZGVyVGFyZ2V0KTsKICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5mcmFtZWJ1ZmZlcik7CiAgICAgIGlmICh0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlcikgewogICAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlcik7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZGVwdGhCdWZmZXIpIHsKICAgICAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5kZXB0aEJ1ZmZlcik7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc3RlbmNpbEJ1ZmZlcikgewogICAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLnN0ZW5jaWxCdWZmZXIpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmNhcmRib2FyZFVJKSB7CiAgICAgICAgdGhpcy5jYXJkYm9hcmRVSS5kZXN0cm95KCk7CiAgICAgIH0KICAgIH07CiAgICBDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZ2wgPSB0aGlzLmdsOwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBnbFN0YXRlID0gW2dsLlJFTkRFUkJVRkZFUl9CSU5ESU5HLCBnbC5URVhUVVJFX0JJTkRJTkdfMkQsIGdsLlRFWFRVUkUwXTsKICAgICAgZ2xQcmVzZXJ2ZVN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbiAoZ2wpIHsKICAgICAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIG51bGwpOwogICAgICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7CiAgICAgICAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7CiAgICAgICAgfQogICAgICAgIHNlbGYucmVhbENvbG9yTWFzay5jYWxsKGdsLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTsKICAgICAgICBzZWxmLnJlYWxWaWV3cG9ydC5jYWxsKGdsLCAwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgMCwgMCwgMCwgMSk7CiAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7CiAgICAgICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmZyYW1lYnVmZmVyKTsKICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzZWxmLnJlbmRlclRhcmdldCk7CiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBzZWxmLmN0eEF0dHJpYnMuYWxwaGEgPyBnbC5SR0JBIDogZ2wuUkdCLCBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCwgMCwgc2VsZi5jdHhBdHRyaWJzLmFscGhhID8gZ2wuUkdCQSA6IGdsLlJHQiwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7CiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7CiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7CiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7CiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7CiAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCBzZWxmLnJlbmRlclRhcmdldCwgMCk7CiAgICAgICAgaWYgKHNlbGYuY3R4QXR0cmlicy5kZXB0aCAmJiBzZWxmLmN0eEF0dHJpYnMuc3RlbmNpbCkgewogICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhTdGVuY2lsQnVmZmVyKTsKICAgICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMLCBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCk7CiAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhTdGVuY2lsQnVmZmVyKTsKICAgICAgICB9IGVsc2UgaWYgKHNlbGYuY3R4QXR0cmlicy5kZXB0aCkgewogICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhCdWZmZXIpOwogICAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCk7CiAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoQnVmZmVyKTsKICAgICAgICB9IGVsc2UgaWYgKHNlbGYuY3R4QXR0cmlicy5zdGVuY2lsKSB7CiAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5zdGVuY2lsQnVmZmVyKTsKICAgICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5TVEVOQ0lMX0lOREVYOCwgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQpOwogICAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLlNURU5DSUxfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLnN0ZW5jaWxCdWZmZXIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpID09PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkgewogICAgICAgICAgY29uc29sZS5lcnJvcignRnJhbWVidWZmZXIgaW5jb21wbGV0ZSEnKTsKICAgICAgICB9CiAgICAgICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTsKICAgICAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgewogICAgICAgICAgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7CiAgICAgICAgfQogICAgICAgIHNlbGYucmVhbENvbG9yTWFzay5hcHBseShnbCwgc2VsZi5jb2xvck1hc2spOwogICAgICAgIHNlbGYucmVhbFZpZXdwb3J0LmFwcGx5KGdsLCBzZWxmLnZpZXdwb3J0KTsKICAgICAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmFwcGx5KGdsLCBzZWxmLmNsZWFyQ29sb3IpOwogICAgICB9KTsKICAgICAgaWYgKHRoaXMuY2FyZGJvYXJkVUkpIHsKICAgICAgICB0aGlzLmNhcmRib2FyZFVJLm9uUmVzaXplKCk7CiAgICAgIH0KICAgIH07CiAgICBDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcy5pc1BhdGNoZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgY2FudmFzID0gdGhpcy5nbC5jYW52YXM7CiAgICAgIHZhciBnbCA9IHRoaXMuZ2w7CiAgICAgIGlmICghaXNJT1MoKSkgewogICAgICAgIGNhbnZhcy53aWR0aCA9IGdldFNjcmVlbldpZHRoKCkgKiB0aGlzLmJ1ZmZlclNjYWxlOwogICAgICAgIGNhbnZhcy5oZWlnaHQgPSBnZXRTY3JlZW5IZWlnaHQoKSAqIHRoaXMuYnVmZmVyU2NhbGU7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ3dpZHRoJywgewogICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICByZXR1cm4gc2VsZi5idWZmZXJXaWR0aDsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICAgICAgICBzZWxmLmJ1ZmZlcldpZHRoID0gdmFsdWU7CiAgICAgICAgICAgIHNlbGYucmVhbENhbnZhc1dpZHRoLnNldC5jYWxsKGNhbnZhcywgdmFsdWUpOwogICAgICAgICAgICBzZWxmLm9uUmVzaXplKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ2hlaWdodCcsIHsKICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVySGVpZ2h0OwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgICAgICAgIHNlbGYuYnVmZmVySGVpZ2h0ID0gdmFsdWU7CiAgICAgICAgICAgIHNlbGYucmVhbENhbnZhc0hlaWdodC5zZXQuY2FsbChjYW52YXMsIHZhbHVlKTsKICAgICAgICAgICAgc2VsZi5vblJlc2l6ZSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuRlJBTUVCVUZGRVJfQklORElORyk7CiAgICAgIGlmICh0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID09IG51bGwpIHsKICAgICAgICB0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID0gdGhpcy5mcmFtZWJ1ZmZlcjsKICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7CiAgICAgIH0KICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCBmcmFtZWJ1ZmZlcikgewogICAgICAgIHNlbGYubGFzdEJvdW5kRnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlciA/IGZyYW1lYnVmZmVyIDogc2VsZi5mcmFtZWJ1ZmZlcjsKICAgICAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgdGFyZ2V0LCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTsKICAgICAgfTsKICAgICAgdGhpcy5jdWxsRmFjZSA9IGdsLmdldFBhcmFtZXRlcihnbC5DVUxMX0ZBQ0UpOwogICAgICB0aGlzLmRlcHRoVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5ERVBUSF9URVNUKTsKICAgICAgdGhpcy5ibGVuZCA9IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORCk7CiAgICAgIHRoaXMuc2Npc3NvclRlc3QgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuU0NJU1NPUl9URVNUKTsKICAgICAgdGhpcy5zdGVuY2lsVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5TVEVOQ0lMX1RFU1QpOwogICAgICBnbC5lbmFibGUgPSBmdW5jdGlvbiAocG5hbWUpIHsKICAgICAgICBzd2l0Y2ggKHBuYW1lKSB7CiAgICAgICAgICBjYXNlIGdsLkNVTExfRkFDRToKICAgICAgICAgICAgc2VsZi5jdWxsRmFjZSA9IHRydWU7YnJlYWs7CiAgICAgICAgICBjYXNlIGdsLkRFUFRIX1RFU1Q6CiAgICAgICAgICAgIHNlbGYuZGVwdGhUZXN0ID0gdHJ1ZTticmVhazsKICAgICAgICAgIGNhc2UgZ2wuQkxFTkQ6CiAgICAgICAgICAgIHNlbGYuYmxlbmQgPSB0cnVlO2JyZWFrOwogICAgICAgICAgY2FzZSBnbC5TQ0lTU09SX1RFU1Q6CiAgICAgICAgICAgIHNlbGYuc2Npc3NvclRlc3QgPSB0cnVlO2JyZWFrOwogICAgICAgICAgY2FzZSBnbC5TVEVOQ0lMX1RFU1Q6CiAgICAgICAgICAgIHNlbGYuc3RlbmNpbFRlc3QgPSB0cnVlO2JyZWFrOwogICAgICAgIH0KICAgICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgcG5hbWUpOwogICAgICB9OwogICAgICBnbC5kaXNhYmxlID0gZnVuY3Rpb24gKHBuYW1lKSB7CiAgICAgICAgc3dpdGNoIChwbmFtZSkgewogICAgICAgICAgY2FzZSBnbC5DVUxMX0ZBQ0U6CiAgICAgICAgICAgIHNlbGYuY3VsbEZhY2UgPSBmYWxzZTticmVhazsKICAgICAgICAgIGNhc2UgZ2wuREVQVEhfVEVTVDoKICAgICAgICAgICAgc2VsZi5kZXB0aFRlc3QgPSBmYWxzZTticmVhazsKICAgICAgICAgIGNhc2UgZ2wuQkxFTkQ6CiAgICAgICAgICAgIHNlbGYuYmxlbmQgPSBmYWxzZTticmVhazsKICAgICAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOgogICAgICAgICAgICBzZWxmLnNjaXNzb3JUZXN0ID0gZmFsc2U7YnJlYWs7CiAgICAgICAgICBjYXNlIGdsLlNURU5DSUxfVEVTVDoKICAgICAgICAgICAgc2VsZi5zdGVuY2lsVGVzdCA9IGZhbHNlO2JyZWFrOwogICAgICAgIH0KICAgICAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIHBuYW1lKTsKICAgICAgfTsKICAgICAgdGhpcy5jb2xvck1hc2sgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQ09MT1JfV1JJVEVNQVNLKTsKICAgICAgZ2wuY29sb3JNYXNrID0gZnVuY3Rpb24gKHIsIGcsIGIsIGEpIHsKICAgICAgICBzZWxmLmNvbG9yTWFza1swXSA9IHI7CiAgICAgICAgc2VsZi5jb2xvck1hc2tbMV0gPSBnOwogICAgICAgIHNlbGYuY29sb3JNYXNrWzJdID0gYjsKICAgICAgICBzZWxmLmNvbG9yTWFza1szXSA9IGE7CiAgICAgICAgc2VsZi5yZWFsQ29sb3JNYXNrLmNhbGwoZ2wsIHIsIGcsIGIsIGEpOwogICAgICB9OwogICAgICB0aGlzLmNsZWFyQ29sb3IgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQ09MT1JfQ0xFQVJfVkFMVUUpOwogICAgICBnbC5jbGVhckNvbG9yID0gZnVuY3Rpb24gKHIsIGcsIGIsIGEpIHsKICAgICAgICBzZWxmLmNsZWFyQ29sb3JbMF0gPSByOwogICAgICAgIHNlbGYuY2xlYXJDb2xvclsxXSA9IGc7CiAgICAgICAgc2VsZi5jbGVhckNvbG9yWzJdID0gYjsKICAgICAgICBzZWxmLmNsZWFyQ29sb3JbM10gPSBhOwogICAgICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgciwgZywgYiwgYSk7CiAgICAgIH07CiAgICAgIHRoaXMudmlld3BvcnQgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuVklFV1BPUlQpOwogICAgICBnbC52aWV3cG9ydCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7CiAgICAgICAgc2VsZi52aWV3cG9ydFswXSA9IHg7CiAgICAgICAgc2VsZi52aWV3cG9ydFsxXSA9IHk7CiAgICAgICAgc2VsZi52aWV3cG9ydFsyXSA9IHc7CiAgICAgICAgc2VsZi52aWV3cG9ydFszXSA9IGg7CiAgICAgICAgc2VsZi5yZWFsVmlld3BvcnQuY2FsbChnbCwgeCwgeSwgdywgaCk7CiAgICAgIH07CiAgICAgIHRoaXMuaXNQYXRjaGVkID0gdHJ1ZTsKICAgICAgc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQoY2FudmFzKTsKICAgIH07CiAgICBDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnVucGF0Y2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghdGhpcy5pc1BhdGNoZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIGdsID0gdGhpcy5nbDsKICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzOwogICAgICBpZiAoIWlzSU9TKCkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnd2lkdGgnLCB0aGlzLnJlYWxDYW52YXNXaWR0aCk7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ2hlaWdodCcsIHRoaXMucmVhbENhbnZhc0hlaWdodCk7CiAgICAgIH0KICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5idWZmZXJXaWR0aDsKICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuYnVmZmVySGVpZ2h0OwogICAgICBnbC5iaW5kRnJhbWVidWZmZXIgPSB0aGlzLnJlYWxCaW5kRnJhbWVidWZmZXI7CiAgICAgIGdsLmVuYWJsZSA9IHRoaXMucmVhbEVuYWJsZTsKICAgICAgZ2wuZGlzYWJsZSA9IHRoaXMucmVhbERpc2FibGU7CiAgICAgIGdsLmNvbG9yTWFzayA9IHRoaXMucmVhbENvbG9yTWFzazsKICAgICAgZ2wuY2xlYXJDb2xvciA9IHRoaXMucmVhbENsZWFyQ29sb3I7CiAgICAgIGdsLnZpZXdwb3J0ID0gdGhpcy5yZWFsVmlld3BvcnQ7CiAgICAgIGlmICh0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID09IHRoaXMuZnJhbWVidWZmZXIpIHsKICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpOwogICAgICB9CiAgICAgIHRoaXMuaXNQYXRjaGVkID0gZmFsc2U7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGNhbnZhcyk7CiAgICAgIH0sIDEpOwogICAgfTsKICAgIENhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuc2V0VGV4dHVyZUJvdW5kcyA9IGZ1bmN0aW9uIChsZWZ0Qm91bmRzLCByaWdodEJvdW5kcykgewogICAgICBpZiAoIWxlZnRCb3VuZHMpIHsKICAgICAgICBsZWZ0Qm91bmRzID0gWzAsIDAsIDAuNSwgMV07CiAgICAgIH0KICAgICAgaWYgKCFyaWdodEJvdW5kcykgewogICAgICAgIHJpZ2h0Qm91bmRzID0gWzAuNSwgMCwgMC41LCAxXTsKICAgICAgfQogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMF0gPSBsZWZ0Qm91bmRzWzBdOwogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMV0gPSBsZWZ0Qm91bmRzWzFdOwogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMl0gPSBsZWZ0Qm91bmRzWzJdOwogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbM10gPSBsZWZ0Qm91bmRzWzNdOwogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbNF0gPSByaWdodEJvdW5kc1swXTsKICAgICAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzVdID0gcmlnaHRCb3VuZHNbMV07CiAgICAgIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVs2XSA9IHJpZ2h0Qm91bmRzWzJdOwogICAgICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbN10gPSByaWdodEJvdW5kc1szXTsKICAgIH07CiAgICBDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZ2wgPSB0aGlzLmdsOwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBnbFN0YXRlID0gW107CiAgICAgIGlmICghdGhpcy5kaXJ0eVN1Ym1pdEZyYW1lQmluZGluZ3MpIHsKICAgICAgICBnbFN0YXRlLnB1c2goZ2wuQ1VSUkVOVF9QUk9HUkFNLCBnbC5BUlJBWV9CVUZGRVJfQklORElORywgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORywgZ2wuVEVYVFVSRV9CSU5ESU5HXzJELCBnbC5URVhUVVJFMCk7CiAgICAgIH0KICAgICAgZ2xQcmVzZXJ2ZVN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbiAoZ2wpIHsKICAgICAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIG51bGwpOwogICAgICAgIHZhciBwb3NpdGlvbkRpdmlzb3IgPSAwOwogICAgICAgIHZhciB0ZXhDb29yZERpdmlzb3IgPSAwOwogICAgICAgIGlmIChzZWxmLmluc3RhbmNlRXh0KSB7CiAgICAgICAgICBwb3NpdGlvbkRpdmlzb3IgPSBnbC5nZXRWZXJ0ZXhBdHRyaWIoc2VsZi5hdHRyaWJzLnBvc2l0aW9uLCBzZWxmLmluc3RhbmNlRXh0LlZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUl9BTkdMRSk7CiAgICAgICAgICB0ZXhDb29yZERpdmlzb3IgPSBnbC5nZXRWZXJ0ZXhBdHRyaWIoc2VsZi5hdHRyaWJzLnRleENvb3JkLCBzZWxmLmluc3RhbmNlRXh0LlZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUl9BTkdMRSk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmLmN1bGxGYWNlKSB7CiAgICAgICAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLkNVTExfRkFDRSk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmLmRlcHRoVGVzdCkgewogICAgICAgICAgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5ERVBUSF9URVNUKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYuYmxlbmQpIHsKICAgICAgICAgIHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuQkxFTkQpOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgewogICAgICAgICAgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5TQ0lTU09SX1RFU1QpOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZi5zdGVuY2lsVGVzdCkgewogICAgICAgICAgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5TVEVOQ0lMX1RFU1QpOwogICAgICAgIH0KICAgICAgICBzZWxmLnJlYWxDb2xvck1hc2suY2FsbChnbCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgc2VsZi5yZWFsVmlld3BvcnQuY2FsbChnbCwgMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTsKICAgICAgICBpZiAoc2VsZi5jdHhBdHRyaWJzLmFscGhhIHx8IGlzSU9TKCkpIHsKICAgICAgICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgMCwgMCwgMCwgMSk7CiAgICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTsKICAgICAgICB9CiAgICAgICAgZ2wudXNlUHJvZ3JhbShzZWxmLnByb2dyYW0pOwogICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHNlbGYuaW5kZXhCdWZmZXIpOwogICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7CiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2VsZi5hdHRyaWJzLnBvc2l0aW9uKTsKICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzZWxmLmF0dHJpYnMudGV4Q29vcmQpOwogICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2VsZi5hdHRyaWJzLnBvc2l0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDIwLCAwKTsKICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNlbGYuYXR0cmlicy50ZXhDb29yZCwgMywgZ2wuRkxPQVQsIGZhbHNlLCAyMCwgOCk7CiAgICAgICAgaWYgKHNlbGYuaW5zdGFuY2VFeHQpIHsKICAgICAgICAgIGlmIChwb3NpdGlvbkRpdmlzb3IgIT0gMCkgewogICAgICAgICAgICBzZWxmLmluc3RhbmNlRXh0LnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShzZWxmLmF0dHJpYnMucG9zaXRpb24sIDApOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRleENvb3JkRGl2aXNvciAhPSAwKSB7CiAgICAgICAgICAgIHNlbGYuaW5zdGFuY2VFeHQudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKHNlbGYuYXR0cmlicy50ZXhDb29yZCwgMCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApOwogICAgICAgIGdsLnVuaWZvcm0xaShzZWxmLnVuaWZvcm1zLmRpZmZ1c2UsIDApOwogICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHNlbGYucmVuZGVyVGFyZ2V0KTsKICAgICAgICBnbC51bmlmb3JtNGZ2KHNlbGYudW5pZm9ybXMudmlld3BvcnRPZmZzZXRTY2FsZSwgc2VsZi52aWV3cG9ydE9mZnNldFNjYWxlKTsKICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBzZWxmLmluZGV4Q291bnQsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTsKICAgICAgICBpZiAoc2VsZi5jYXJkYm9hcmRVSSkgewogICAgICAgICAgc2VsZi5jYXJkYm9hcmRVSS5yZW5kZXJOb1N0YXRlKCk7CiAgICAgICAgfQogICAgICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKHNlbGYuZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmZyYW1lYnVmZmVyKTsKICAgICAgICBpZiAoIXNlbGYuY3R4QXR0cmlicy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIpIHsKICAgICAgICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgMCwgMCwgMCwgMCk7CiAgICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFzZWxmLmRpcnR5U3VibWl0RnJhbWVCaW5kaW5ncykgewogICAgICAgICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYuY3VsbEZhY2UpIHsKICAgICAgICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5DVUxMX0ZBQ0UpOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZi5kZXB0aFRlc3QpIHsKICAgICAgICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5ERVBUSF9URVNUKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYuYmxlbmQpIHsKICAgICAgICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5CTEVORCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7CiAgICAgICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuU0NJU1NPUl9URVNUKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYuc3RlbmNpbFRlc3QpIHsKICAgICAgICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5TVEVOQ0lMX1RFU1QpOwogICAgICAgIH0KICAgICAgICBzZWxmLnJlYWxDb2xvck1hc2suYXBwbHkoZ2wsIHNlbGYuY29sb3JNYXNrKTsKICAgICAgICBzZWxmLnJlYWxWaWV3cG9ydC5hcHBseShnbCwgc2VsZi52aWV3cG9ydCk7CiAgICAgICAgaWYgKHNlbGYuY3R4QXR0cmlicy5hbHBoYSB8fCAhc2VsZi5jdHhBdHRyaWJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlcikgewogICAgICAgICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5hcHBseShnbCwgc2VsZi5jbGVhckNvbG9yKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlbGYuaW5zdGFuY2VFeHQpIHsKICAgICAgICAgIGlmIChwb3NpdGlvbkRpdmlzb3IgIT0gMCkgewogICAgICAgICAgICBzZWxmLmluc3RhbmNlRXh0LnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShzZWxmLmF0dHJpYnMucG9zaXRpb24sIHBvc2l0aW9uRGl2aXNvcik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGV4Q29vcmREaXZpc29yICE9IDApIHsKICAgICAgICAgICAgc2VsZi5pbnN0YW5jZUV4dC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoc2VsZi5hdHRyaWJzLnRleENvb3JkLCB0ZXhDb29yZERpdmlzb3IpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGlmIChpc0lPUygpKSB7CiAgICAgICAgdmFyIGNhbnZhcyA9IGdsLmNhbnZhczsKICAgICAgICBpZiAoY2FudmFzLndpZHRoICE9IHNlbGYuYnVmZmVyV2lkdGggfHwgY2FudmFzLmhlaWdodCAhPSBzZWxmLmJ1ZmZlckhlaWdodCkgewogICAgICAgICAgc2VsZi5idWZmZXJXaWR0aCA9IGNhbnZhcy53aWR0aDsKICAgICAgICAgIHNlbGYuYnVmZmVySGVpZ2h0ID0gY2FudmFzLmhlaWdodDsKICAgICAgICAgIHNlbGYub25SZXNpemUoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgICBDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnVwZGF0ZURldmljZUluZm8gPSBmdW5jdGlvbiAoZGV2aWNlSW5mbykgewogICAgICB2YXIgZ2wgPSB0aGlzLmdsOwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBnbFN0YXRlID0gW2dsLkFSUkFZX0JVRkZFUl9CSU5ESU5HLCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HXTsKICAgICAgZ2xQcmVzZXJ2ZVN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbiAoZ2wpIHsKICAgICAgICB2YXIgdmVydGljZXMgPSBzZWxmLmNvbXB1dGVNZXNoVmVydGljZXNfKHNlbGYubWVzaFdpZHRoLCBzZWxmLm1lc2hIZWlnaHQsIGRldmljZUluZm8pOwogICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7CiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHZlcnRpY2VzLCBnbC5TVEFUSUNfRFJBVyk7CiAgICAgICAgaWYgKCFzZWxmLmluZGV4Q291bnQpIHsKICAgICAgICAgIHZhciBpbmRpY2VzID0gc2VsZi5jb21wdXRlTWVzaEluZGljZXNfKHNlbGYubWVzaFdpZHRoLCBzZWxmLm1lc2hIZWlnaHQpOwogICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgc2VsZi5pbmRleEJ1ZmZlcik7CiAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRpY2VzLCBnbC5TVEFUSUNfRFJBVyk7CiAgICAgICAgICBzZWxmLmluZGV4Q291bnQgPSBpbmRpY2VzLmxlbmd0aDsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICAgIENhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuY29tcHV0ZU1lc2hWZXJ0aWNlc18gPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgZGV2aWNlSW5mbykgewogICAgICB2YXIgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KDIgKiB3aWR0aCAqIGhlaWdodCAqIDUpOwogICAgICB2YXIgbGVuc0ZydXN0dW0gPSBkZXZpY2VJbmZvLmdldExlZnRFeWVWaXNpYmxlVGFuQW5nbGVzKCk7CiAgICAgIHZhciBub0xlbnNGcnVzdHVtID0gZGV2aWNlSW5mby5nZXRMZWZ0RXllTm9MZW5zVGFuQW5nbGVzKCk7CiAgICAgIHZhciB2aWV3cG9ydCA9IGRldmljZUluZm8uZ2V0TGVmdEV5ZVZpc2libGVTY3JlZW5SZWN0KG5vTGVuc0ZydXN0dW0pOwogICAgICB2YXIgdmlkeCA9IDA7CiAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgMjsgZSsrKSB7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZWlnaHQ7IGorKykgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aDsgaSsrLCB2aWR4KyspIHsKICAgICAgICAgICAgdmFyIHUgPSBpIC8gKHdpZHRoIC0gMSk7CiAgICAgICAgICAgIHZhciB2ID0gaiAvIChoZWlnaHQgLSAxKTsKICAgICAgICAgICAgdmFyIHMgPSB1OwogICAgICAgICAgICB2YXIgdCA9IHY7CiAgICAgICAgICAgIHZhciB4ID0gbGVycChsZW5zRnJ1c3R1bVswXSwgbGVuc0ZydXN0dW1bMl0sIHUpOwogICAgICAgICAgICB2YXIgeSA9IGxlcnAobGVuc0ZydXN0dW1bM10sIGxlbnNGcnVzdHVtWzFdLCB2KTsKICAgICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7CiAgICAgICAgICAgIHZhciByID0gZGV2aWNlSW5mby5kaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKGQpOwogICAgICAgICAgICB2YXIgcCA9IHggKiByIC8gZDsKICAgICAgICAgICAgdmFyIHEgPSB5ICogciAvIGQ7CiAgICAgICAgICAgIHUgPSAocCAtIG5vTGVuc0ZydXN0dW1bMF0pIC8gKG5vTGVuc0ZydXN0dW1bMl0gLSBub0xlbnNGcnVzdHVtWzBdKTsKICAgICAgICAgICAgdiA9IChxIC0gbm9MZW5zRnJ1c3R1bVszXSkgLyAobm9MZW5zRnJ1c3R1bVsxXSAtIG5vTGVuc0ZydXN0dW1bM10pOwogICAgICAgICAgICB1ID0gKHZpZXdwb3J0LnggKyB1ICogdmlld3BvcnQud2lkdGggLSAwLjUpICogMi4wOwogICAgICAgICAgICB2ID0gKHZpZXdwb3J0LnkgKyB2ICogdmlld3BvcnQuaGVpZ2h0IC0gMC41KSAqIDIuMDsKICAgICAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAwXSA9IHU7CiAgICAgICAgICAgIHZlcnRpY2VzW3ZpZHggKiA1ICsgMV0gPSB2OwogICAgICAgICAgICB2ZXJ0aWNlc1t2aWR4ICogNSArIDJdID0gczsKICAgICAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAzXSA9IHQ7CiAgICAgICAgICAgIHZlcnRpY2VzW3ZpZHggKiA1ICsgNF0gPSBlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgdyA9IGxlbnNGcnVzdHVtWzJdIC0gbGVuc0ZydXN0dW1bMF07CiAgICAgICAgbGVuc0ZydXN0dW1bMF0gPSAtKHcgKyBsZW5zRnJ1c3R1bVswXSk7CiAgICAgICAgbGVuc0ZydXN0dW1bMl0gPSB3IC0gbGVuc0ZydXN0dW1bMl07CiAgICAgICAgdyA9IG5vTGVuc0ZydXN0dW1bMl0gLSBub0xlbnNGcnVzdHVtWzBdOwogICAgICAgIG5vTGVuc0ZydXN0dW1bMF0gPSAtKHcgKyBub0xlbnNGcnVzdHVtWzBdKTsKICAgICAgICBub0xlbnNGcnVzdHVtWzJdID0gdyAtIG5vTGVuc0ZydXN0dW1bMl07CiAgICAgICAgdmlld3BvcnQueCA9IDEgLSAodmlld3BvcnQueCArIHZpZXdwb3J0LndpZHRoKTsKICAgICAgfQogICAgICByZXR1cm4gdmVydGljZXM7CiAgICB9OwogICAgQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5jb21wdXRlTWVzaEluZGljZXNfID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHsKICAgICAgdmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoMiAqICh3aWR0aCAtIDEpICogKGhlaWdodCAtIDEpICogNik7CiAgICAgIHZhciBoYWxmd2lkdGggPSB3aWR0aCAvIDI7CiAgICAgIHZhciBoYWxmaGVpZ2h0ID0gaGVpZ2h0IC8gMjsKICAgICAgdmFyIHZpZHggPSAwOwogICAgICB2YXIgaWlkeCA9IDA7CiAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgMjsgZSsrKSB7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZWlnaHQ7IGorKykgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aDsgaSsrLCB2aWR4KyspIHsKICAgICAgICAgICAgaWYgKGkgPT0gMCB8fCBqID09IDApIGNvbnRpbnVlOwogICAgICAgICAgICBpZiAoaSA8PSBoYWxmd2lkdGggPT0gaiA8PSBoYWxmaGVpZ2h0KSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeDsKICAgICAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gd2lkdGggLSAxOwogICAgICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDsKICAgICAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gd2lkdGggLSAxOwogICAgICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHg7CiAgICAgICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoOwogICAgICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHg7CiAgICAgICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoOwogICAgICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSAxOwogICAgICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aCAtIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGluZGljZXM7CiAgICB9OwogICAgQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JfID0gZnVuY3Rpb24gKHByb3RvLCBhdHRyTmFtZSkgewogICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGF0dHJOYW1lKTsKICAgICAgaWYgKGRlc2NyaXB0b3IuZ2V0ID09PSB1bmRlZmluZWQgfHwgZGVzY3JpcHRvci5zZXQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlOwogICAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTsKICAgICAgICB9OwogICAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbCk7CiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4gZGVzY3JpcHRvcjsKICAgIH07CiAgICB2YXIgdWlWUyA9IFsnYXR0cmlidXRlIHZlYzIgcG9zaXRpb247JywgJ3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0OycsICd2b2lkIG1haW4oKSB7JywgJyAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0ICogdmVjNCggcG9zaXRpb24sIC0xLjAsIDEuMCApOycsICd9J10uam9pbignXG4nKTsKICAgIHZhciB1aUZTID0gWydwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLCAndW5pZm9ybSB2ZWM0IGNvbG9yOycsICd2b2lkIG1haW4oKSB7JywgJyAgZ2xfRnJhZ0NvbG9yID0gY29sb3I7JywgJ30nXS5qb2luKCdcbicpOwogICAgdmFyIERFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLjA7CiAgICB2YXIga0FuZ2xlUGVyR2VhclNlY3Rpb24gPSA2MDsKICAgIHZhciBrT3V0ZXJSaW1FbmRBbmdsZSA9IDEyOwogICAgdmFyIGtJbm5lclJpbUJlZ2luQW5nbGUgPSAyMDsKICAgIHZhciBrT3V0ZXJSYWRpdXMgPSAxOwogICAgdmFyIGtNaWRkbGVSYWRpdXMgPSAwLjc1OwogICAgdmFyIGtJbm5lclJhZGl1cyA9IDAuMzEyNTsKICAgIHZhciBrQ2VudGVyTGluZVRoaWNrbmVzc0RwID0gNDsKICAgIHZhciBrQnV0dG9uV2lkdGhEcCA9IDI4OwogICAgdmFyIGtUb3VjaFNsb3BGYWN0b3IgPSAxLjU7CiAgICBmdW5jdGlvbiBDYXJkYm9hcmRVSShnbCkgewogICAgICB0aGlzLmdsID0gZ2w7CiAgICAgIHRoaXMuYXR0cmlicyA9IHsKICAgICAgICBwb3NpdGlvbjogMAogICAgICB9OwogICAgICB0aGlzLnByb2dyYW0gPSBsaW5rUHJvZ3JhbShnbCwgdWlWUywgdWlGUywgdGhpcy5hdHRyaWJzKTsKICAgICAgdGhpcy51bmlmb3JtcyA9IGdldFByb2dyYW1Vbmlmb3JtcyhnbCwgdGhpcy5wcm9ncmFtKTsKICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICAgICAgdGhpcy5nZWFyT2Zmc2V0ID0gMDsKICAgICAgdGhpcy5nZWFyVmVydGV4Q291bnQgPSAwOwogICAgICB0aGlzLmFycm93T2Zmc2V0ID0gMDsKICAgICAgdGhpcy5hcnJvd1ZlcnRleENvdW50ID0gMDsKICAgICAgdGhpcy5wcm9qTWF0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgIHRoaXMubGlzdGVuZXIgPSBudWxsOwogICAgICB0aGlzLm9uUmVzaXplKCk7CiAgICB9CiAgICBDYXJkYm9hcmRVSS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGdsID0gdGhpcy5nbDsKICAgICAgaWYgKHRoaXMubGlzdGVuZXIpIHsKICAgICAgICBnbC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmxpc3RlbmVyLCBmYWxzZSk7CiAgICAgIH0KICAgICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLnByb2dyYW0pOwogICAgICBnbC5kZWxldGVCdWZmZXIodGhpcy52ZXJ0ZXhCdWZmZXIpOwogICAgfTsKICAgIENhcmRib2FyZFVJLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAob3B0aW9uc0NhbGxiYWNrLCBiYWNrQ2FsbGJhY2spIHsKICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzOwogICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgdmFyIG1pZGxpbmUgPSBjYW52YXMuY2xpZW50V2lkdGggLyAyOwogICAgICAgIHZhciBidXR0b25TaXplID0ga0J1dHRvbldpZHRoRHAgKiBrVG91Y2hTbG9wRmFjdG9yOwogICAgICAgIGlmIChldmVudC5jbGllbnRYID4gbWlkbGluZSAtIGJ1dHRvblNpemUgJiYgZXZlbnQuY2xpZW50WCA8IG1pZGxpbmUgKyBidXR0b25TaXplICYmIGV2ZW50LmNsaWVudFkgPiBjYW52YXMuY2xpZW50SGVpZ2h0IC0gYnV0dG9uU2l6ZSkgewogICAgICAgICAgb3B0aW9uc0NhbGxiYWNrKGV2ZW50KTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZXZlbnQuY2xpZW50WCA8IGJ1dHRvblNpemUgJiYgZXZlbnQuY2xpZW50WSA8IGJ1dHRvblNpemUpIHsKICAgICAgICAgICAgYmFja0NhbGxiYWNrKGV2ZW50KTsKICAgICAgICAgIH0KICAgICAgfTsKICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5saXN0ZW5lciwgZmFsc2UpOwogICAgfTsKICAgIENhcmRib2FyZFVJLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGdsID0gdGhpcy5nbDsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgZ2xTdGF0ZSA9IFtnbC5BUlJBWV9CVUZGRVJfQklORElOR107CiAgICAgIGdsUHJlc2VydmVTdGF0ZShnbCwgZ2xTdGF0ZSwgZnVuY3Rpb24gKGdsKSB7CiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107CiAgICAgICAgdmFyIG1pZGxpbmUgPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGggLyAyOwogICAgICAgIHZhciBwaHlzaWNhbFBpeGVscyA9IE1hdGgubWF4KHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodCkgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbzsKICAgICAgICB2YXIgc2NhbGluZ1JhdGlvID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoIC8gcGh5c2ljYWxQaXhlbHM7CiAgICAgICAgdmFyIGRwcyA9IHNjYWxpbmdSYXRpbyAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvOwogICAgICAgIHZhciBsaW5lV2lkdGggPSBrQ2VudGVyTGluZVRoaWNrbmVzc0RwICogZHBzIC8gMjsKICAgICAgICB2YXIgYnV0dG9uU2l6ZSA9IGtCdXR0b25XaWR0aERwICoga1RvdWNoU2xvcEZhY3RvciAqIGRwczsKICAgICAgICB2YXIgYnV0dG9uU2NhbGUgPSBrQnV0dG9uV2lkdGhEcCAqIGRwcyAvIDI7CiAgICAgICAgdmFyIGJ1dHRvbkJvcmRlciA9IChrQnV0dG9uV2lkdGhEcCAqIGtUb3VjaFNsb3BGYWN0b3IgLSBrQnV0dG9uV2lkdGhEcCkgKiBkcHM7CiAgICAgICAgdmVydGljZXMucHVzaChtaWRsaW5lIC0gbGluZVdpZHRoLCBidXR0b25TaXplKTsKICAgICAgICB2ZXJ0aWNlcy5wdXNoKG1pZGxpbmUgLSBsaW5lV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSArIGxpbmVXaWR0aCwgYnV0dG9uU2l6ZSk7CiAgICAgICAgdmVydGljZXMucHVzaChtaWRsaW5lICsgbGluZVdpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTsKICAgICAgICBzZWxmLmdlYXJPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAyOwogICAgICAgIGZ1bmN0aW9uIGFkZEdlYXJTZWdtZW50KHRoZXRhLCByKSB7CiAgICAgICAgICB2YXIgYW5nbGUgPSAoOTAgLSB0aGV0YSkgKiBERUcyUkFEOwogICAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgICAgICB2YXIgeSA9IE1hdGguc2luKGFuZ2xlKTsKICAgICAgICAgIHZlcnRpY2VzLnB1c2goa0lubmVyUmFkaXVzICogeCAqIGJ1dHRvblNjYWxlICsgbWlkbGluZSwga0lubmVyUmFkaXVzICogeSAqIGJ1dHRvblNjYWxlICsgYnV0dG9uU2NhbGUpOwogICAgICAgICAgdmVydGljZXMucHVzaChyICogeCAqIGJ1dHRvblNjYWxlICsgbWlkbGluZSwgciAqIHkgKiBidXR0b25TY2FsZSArIGJ1dHRvblNjYWxlKTsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gNjsgaSsrKSB7CiAgICAgICAgICB2YXIgc2VnbWVudFRoZXRhID0gaSAqIGtBbmdsZVBlckdlYXJTZWN0aW9uOwogICAgICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhLCBrT3V0ZXJSYWRpdXMpOwogICAgICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhICsga091dGVyUmltRW5kQW5nbGUsIGtPdXRlclJhZGl1cyk7CiAgICAgICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyBrSW5uZXJSaW1CZWdpbkFuZ2xlLCBrTWlkZGxlUmFkaXVzKTsKICAgICAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIChrQW5nbGVQZXJHZWFyU2VjdGlvbiAtIGtJbm5lclJpbUJlZ2luQW5nbGUpLCBrTWlkZGxlUmFkaXVzKTsKICAgICAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIChrQW5nbGVQZXJHZWFyU2VjdGlvbiAtIGtPdXRlclJpbUVuZEFuZ2xlKSwga091dGVyUmFkaXVzKTsKICAgICAgICB9CiAgICAgICAgc2VsZi5nZWFyVmVydGV4Q291bnQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAyIC0gc2VsZi5nZWFyT2Zmc2V0OwogICAgICAgIHNlbGYuYXJyb3dPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAyOwogICAgICAgIGZ1bmN0aW9uIGFkZEFycm93VmVydGV4KHgsIHkpIHsKICAgICAgICAgIHZlcnRpY2VzLnB1c2goYnV0dG9uQm9yZGVyICsgeCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCAtIGJ1dHRvbkJvcmRlciAtIHkpOwogICAgICAgIH0KICAgICAgICB2YXIgYW5nbGVkTGluZVdpZHRoID0gbGluZVdpZHRoIC8gTWF0aC5zaW4oNDUgKiBERUcyUkFEKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleCgwLCBidXR0b25TY2FsZSk7CiAgICAgICAgYWRkQXJyb3dWZXJ0ZXgoYnV0dG9uU2NhbGUsIDApOwogICAgICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlICsgYW5nbGVkTGluZVdpZHRoLCBhbmdsZWRMaW5lV2lkdGgpOwogICAgICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgKyBhbmdsZWRMaW5lV2lkdGgpOwogICAgICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgLSBhbmdsZWRMaW5lV2lkdGgpOwogICAgICAgIGFkZEFycm93VmVydGV4KDAsIGJ1dHRvblNjYWxlKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleChidXR0b25TY2FsZSwgYnV0dG9uU2NhbGUgKiAyKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleChidXR0b25TY2FsZSArIGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgKiAyIC0gYW5nbGVkTGluZVdpZHRoKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlIC0gYW5nbGVkTGluZVdpZHRoKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleCgwLCBidXR0b25TY2FsZSk7CiAgICAgICAgYWRkQXJyb3dWZXJ0ZXgoYW5nbGVkTGluZVdpZHRoLCBidXR0b25TY2FsZSAtIGxpbmVXaWR0aCk7CiAgICAgICAgYWRkQXJyb3dWZXJ0ZXgoa0J1dHRvbldpZHRoRHAgKiBkcHMsIGJ1dHRvblNjYWxlIC0gbGluZVdpZHRoKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlICsgbGluZVdpZHRoKTsKICAgICAgICBhZGRBcnJvd1ZlcnRleChrQnV0dG9uV2lkdGhEcCAqIGRwcywgYnV0dG9uU2NhbGUgKyBsaW5lV2lkdGgpOwogICAgICAgIHNlbGYuYXJyb3dWZXJ0ZXhDb3VudCA9IHZlcnRpY2VzLmxlbmd0aCAvIDIgLSBzZWxmLmFycm93T2Zmc2V0OwogICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7CiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7CiAgICAgIH0pOwogICAgfTsKICAgIENhcmRib2FyZFVJLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBnbCA9IHRoaXMuZ2w7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGdsU3RhdGUgPSBbZ2wuQ1VMTF9GQUNFLCBnbC5ERVBUSF9URVNULCBnbC5CTEVORCwgZ2wuU0NJU1NPUl9URVNULCBnbC5TVEVOQ0lMX1RFU1QsIGdsLkNPTE9SX1dSSVRFTUFTSywgZ2wuVklFV1BPUlQsIGdsLkNVUlJFTlRfUFJPR1JBTSwgZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkddOwogICAgICBnbFByZXNlcnZlU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uIChnbCkgewogICAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTsKICAgICAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpOwogICAgICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpOwogICAgICAgIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTsKICAgICAgICBnbC5kaXNhYmxlKGdsLlNURU5DSUxfVEVTVCk7CiAgICAgICAgZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpOwogICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7CiAgICAgICAgc2VsZi5yZW5kZXJOb1N0YXRlKCk7CiAgICAgIH0pOwogICAgfTsKICAgIENhcmRib2FyZFVJLnByb3RvdHlwZS5yZW5kZXJOb1N0YXRlID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZ2wgPSB0aGlzLmdsOwogICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7CiAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEJ1ZmZlcik7CiAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYXR0cmlicy5wb3NpdGlvbik7CiAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hdHRyaWJzLnBvc2l0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDgsIDApOwogICAgICBnbC51bmlmb3JtNGYodGhpcy51bmlmb3Jtcy5jb2xvciwgMS4wLCAxLjAsIDEuMCwgMS4wKTsKICAgICAgb3J0aG9NYXRyaXgodGhpcy5wcm9qTWF0LCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIDAsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQsIDAuMSwgMTAyNC4wKTsKICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLnVuaWZvcm1zLnByb2plY3Rpb25NYXQsIGZhbHNlLCB0aGlzLnByb2pNYXQpOwogICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTsKICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgdGhpcy5nZWFyT2Zmc2V0LCB0aGlzLmdlYXJWZXJ0ZXhDb3VudCk7CiAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIHRoaXMuYXJyb3dPZmZzZXQsIHRoaXMuYXJyb3dWZXJ0ZXhDb3VudCk7CiAgICB9OwogICAgZnVuY3Rpb24gRGlzdG9ydGlvbihjb2VmZmljaWVudHMpIHsKICAgICAgdGhpcy5jb2VmZmljaWVudHMgPSBjb2VmZmljaWVudHM7CiAgICB9CiAgICBEaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0SW52ZXJzZSA9IGZ1bmN0aW9uIChyYWRpdXMpIHsKICAgICAgdmFyIHIwID0gMDsKICAgICAgdmFyIHIxID0gMTsKICAgICAgdmFyIGRyMCA9IHJhZGl1cyAtIHRoaXMuZGlzdG9ydChyMCk7CiAgICAgIHdoaWxlIChNYXRoLmFicyhyMSAtIHIwKSA+IDAuMDAwMSAgICAgICAgICAgICApIHsKICAgICAgICB2YXIgZHIxID0gcmFkaXVzIC0gdGhpcy5kaXN0b3J0KHIxKTsKICAgICAgICB2YXIgcjIgPSByMSAtIGRyMSAqICgocjEgLSByMCkgLyAoZHIxIC0gZHIwKSk7CiAgICAgICAgcjAgPSByMTsKICAgICAgICByMSA9IHIyOwogICAgICAgIGRyMCA9IGRyMTsKICAgICAgfQogICAgICByZXR1cm4gcjE7CiAgICB9OwogICAgRGlzdG9ydGlvbi5wcm90b3R5cGUuZGlzdG9ydCA9IGZ1bmN0aW9uIChyYWRpdXMpIHsKICAgICAgdmFyIHIyID0gcmFkaXVzICogcmFkaXVzOwogICAgICB2YXIgcmV0ID0gMDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIHJldCA9IHIyICogKHJldCArIHRoaXMuY29lZmZpY2llbnRzW2ldKTsKICAgICAgfQogICAgICByZXR1cm4gKHJldCArIDEpICogcmFkaXVzOwogICAgfTsKICAgIHZhciBkZWdUb1JhZCA9IE1hdGguUEkgLyAxODA7CiAgICB2YXIgcmFkVG9EZWcgPSAxODAgLyBNYXRoLlBJOwogICAgdmFyIFZlY3RvcjMgPSBmdW5jdGlvbiBWZWN0b3IzKHgsIHksIHopIHsKICAgICAgdGhpcy54ID0geCB8fCAwOwogICAgICB0aGlzLnkgPSB5IHx8IDA7CiAgICAgIHRoaXMueiA9IHogfHwgMDsKICAgIH07CiAgICBWZWN0b3IzLnByb3RvdHlwZSA9IHsKICAgICAgY29uc3RydWN0b3I6IFZlY3RvcjMsCiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHgsIHksIHopIHsKICAgICAgICB0aGlzLnggPSB4OwogICAgICAgIHRoaXMueSA9IHk7CiAgICAgICAgdGhpcy56ID0gejsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgY29weTogZnVuY3Rpb24gY29weSh2KSB7CiAgICAgICAgdGhpcy54ID0gdi54OwogICAgICAgIHRoaXMueSA9IHYueTsKICAgICAgICB0aGlzLnogPSB2Lno7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKCkgewogICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTsKICAgICAgfSwKICAgICAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUoKSB7CiAgICAgICAgdmFyIHNjYWxhciA9IHRoaXMubGVuZ3RoKCk7CiAgICAgICAgaWYgKHNjYWxhciAhPT0gMCkgewogICAgICAgICAgdmFyIGludlNjYWxhciA9IDEgLyBzY2FsYXI7CiAgICAgICAgICB0aGlzLm11bHRpcGx5U2NhbGFyKGludlNjYWxhcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMueCA9IDA7CiAgICAgICAgICB0aGlzLnkgPSAwOwogICAgICAgICAgdGhpcy56ID0gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihzY2FsYXIpIHsKICAgICAgICB0aGlzLnggKj0gc2NhbGFyOwogICAgICAgIHRoaXMueSAqPSBzY2FsYXI7CiAgICAgICAgdGhpcy56ICo9IHNjYWxhcjsKICAgICAgfSwKICAgICAgYXBwbHlRdWF0ZXJuaW9uOiBmdW5jdGlvbiBhcHBseVF1YXRlcm5pb24ocSkgewogICAgICAgIHZhciB4ID0gdGhpcy54OwogICAgICAgIHZhciB5ID0gdGhpcy55OwogICAgICAgIHZhciB6ID0gdGhpcy56OwogICAgICAgIHZhciBxeCA9IHEueDsKICAgICAgICB2YXIgcXkgPSBxLnk7CiAgICAgICAgdmFyIHF6ID0gcS56OwogICAgICAgIHZhciBxdyA9IHEudzsKICAgICAgICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7CiAgICAgICAgdmFyIGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6OwogICAgICAgIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDsKICAgICAgICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6OwogICAgICAgIHRoaXMueCA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7CiAgICAgICAgdGhpcy55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejsKICAgICAgICB0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4OwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBkb3Q6IGZ1bmN0aW9uIGRvdCh2KSB7CiAgICAgICAgcmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejsKICAgICAgfSwKICAgICAgY3Jvc3NWZWN0b3JzOiBmdW5jdGlvbiBjcm9zc1ZlY3RvcnMoYSwgYikgewogICAgICAgIHZhciBheCA9IGEueCwKICAgICAgICAgICAgYXkgPSBhLnksCiAgICAgICAgICAgIGF6ID0gYS56OwogICAgICAgIHZhciBieCA9IGIueCwKICAgICAgICAgICAgYnkgPSBiLnksCiAgICAgICAgICAgIGJ6ID0gYi56OwogICAgICAgIHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5OwogICAgICAgIHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6OwogICAgICAgIHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4OwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICB9OwogICAgdmFyIFF1YXRlcm5pb24gPSBmdW5jdGlvbiBRdWF0ZXJuaW9uKHgsIHksIHosIHcpIHsKICAgICAgdGhpcy54ID0geCB8fCAwOwogICAgICB0aGlzLnkgPSB5IHx8IDA7CiAgICAgIHRoaXMueiA9IHogfHwgMDsKICAgICAgdGhpcy53ID0gdyAhPT0gdW5kZWZpbmVkID8gdyA6IDE7CiAgICB9OwogICAgUXVhdGVybmlvbi5wcm90b3R5cGUgPSB7CiAgICAgIGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uLAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh4LCB5LCB6LCB3KSB7CiAgICAgICAgdGhpcy54ID0geDsKICAgICAgICB0aGlzLnkgPSB5OwogICAgICAgIHRoaXMueiA9IHo7CiAgICAgICAgdGhpcy53ID0gdzsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgY29weTogZnVuY3Rpb24gY29weShxdWF0ZXJuaW9uKSB7CiAgICAgICAgdGhpcy54ID0gcXVhdGVybmlvbi54OwogICAgICAgIHRoaXMueSA9IHF1YXRlcm5pb24ueTsKICAgICAgICB0aGlzLnogPSBxdWF0ZXJuaW9uLno7CiAgICAgICAgdGhpcy53ID0gcXVhdGVybmlvbi53OwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBzZXRGcm9tRXVsZXJYWVo6IGZ1bmN0aW9uIHNldEZyb21FdWxlclhZWih4LCB5LCB6KSB7CiAgICAgICAgdmFyIGMxID0gTWF0aC5jb3MoeCAvIDIpOwogICAgICAgIHZhciBjMiA9IE1hdGguY29zKHkgLyAyKTsKICAgICAgICB2YXIgYzMgPSBNYXRoLmNvcyh6IC8gMik7CiAgICAgICAgdmFyIHMxID0gTWF0aC5zaW4oeCAvIDIpOwogICAgICAgIHZhciBzMiA9IE1hdGguc2luKHkgLyAyKTsKICAgICAgICB2YXIgczMgPSBNYXRoLnNpbih6IC8gMik7CiAgICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzOwogICAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMzsKICAgICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7CiAgICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBzZXRGcm9tRXVsZXJZWFo6IGZ1bmN0aW9uIHNldEZyb21FdWxlcllYWih4LCB5LCB6KSB7CiAgICAgICAgdmFyIGMxID0gTWF0aC5jb3MoeCAvIDIpOwogICAgICAgIHZhciBjMiA9IE1hdGguY29zKHkgLyAyKTsKICAgICAgICB2YXIgYzMgPSBNYXRoLmNvcyh6IC8gMik7CiAgICAgICAgdmFyIHMxID0gTWF0aC5zaW4oeCAvIDIpOwogICAgICAgIHZhciBzMiA9IE1hdGguc2luKHkgLyAyKTsKICAgICAgICB2YXIgczMgPSBNYXRoLnNpbih6IC8gMik7CiAgICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzOwogICAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMzsKICAgICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7CiAgICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiBzZXRGcm9tQXhpc0FuZ2xlKGF4aXMsIGFuZ2xlKSB7CiAgICAgICAgdmFyIGhhbGZBbmdsZSA9IGFuZ2xlIC8gMiwKICAgICAgICAgICAgcyA9IE1hdGguc2luKGhhbGZBbmdsZSk7CiAgICAgICAgdGhpcy54ID0gYXhpcy54ICogczsKICAgICAgICB0aGlzLnkgPSBheGlzLnkgKiBzOwogICAgICAgIHRoaXMueiA9IGF4aXMueiAqIHM7CiAgICAgICAgdGhpcy53ID0gTWF0aC5jb3MoaGFsZkFuZ2xlKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uIG11bHRpcGx5KHEpIHsKICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMsIHEpOwogICAgICB9LAogICAgICBtdWx0aXBseVF1YXRlcm5pb25zOiBmdW5jdGlvbiBtdWx0aXBseVF1YXRlcm5pb25zKGEsIGIpIHsKICAgICAgICB2YXIgcWF4ID0gYS54LAogICAgICAgICAgICBxYXkgPSBhLnksCiAgICAgICAgICAgIHFheiA9IGEueiwKICAgICAgICAgICAgcWF3ID0gYS53OwogICAgICAgIHZhciBxYnggPSBiLngsCiAgICAgICAgICAgIHFieSA9IGIueSwKICAgICAgICAgICAgcWJ6ID0gYi56LAogICAgICAgICAgICBxYncgPSBiLnc7CiAgICAgICAgdGhpcy54ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5OwogICAgICAgIHRoaXMueSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejsKICAgICAgICB0aGlzLnogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7CiAgICAgICAgdGhpcy53ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6OwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBpbnZlcnNlOiBmdW5jdGlvbiBpbnZlcnNlKCkgewogICAgICAgIHRoaXMueCAqPSAtMTsKICAgICAgICB0aGlzLnkgKj0gLTE7CiAgICAgICAgdGhpcy56ICo9IC0xOwogICAgICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkgewogICAgICAgIHZhciBsID0gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyk7CiAgICAgICAgaWYgKGwgPT09IDApIHsKICAgICAgICAgIHRoaXMueCA9IDA7CiAgICAgICAgICB0aGlzLnkgPSAwOwogICAgICAgICAgdGhpcy56ID0gMDsKICAgICAgICAgIHRoaXMudyA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGwgPSAxIC8gbDsKICAgICAgICAgIHRoaXMueCA9IHRoaXMueCAqIGw7CiAgICAgICAgICB0aGlzLnkgPSB0aGlzLnkgKiBsOwogICAgICAgICAgdGhpcy56ID0gdGhpcy56ICogbDsKICAgICAgICAgIHRoaXMudyA9IHRoaXMudyAqIGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBzbGVycDogZnVuY3Rpb24gc2xlcnAocWIsIHQpIHsKICAgICAgICBpZiAodCA9PT0gMCkgcmV0dXJuIHRoaXM7CiAgICAgICAgaWYgKHQgPT09IDEpIHJldHVybiB0aGlzLmNvcHkocWIpOwogICAgICAgIHZhciB4ID0gdGhpcy54LAogICAgICAgICAgICB5ID0gdGhpcy55LAogICAgICAgICAgICB6ID0gdGhpcy56LAogICAgICAgICAgICB3ID0gdGhpcy53OwogICAgICAgIHZhciBjb3NIYWxmVGhldGEgPSB3ICogcWIudyArIHggKiBxYi54ICsgeSAqIHFiLnkgKyB6ICogcWIuejsKICAgICAgICBpZiAoY29zSGFsZlRoZXRhIDwgMCkgewogICAgICAgICAgdGhpcy53ID0gLXFiLnc7CiAgICAgICAgICB0aGlzLnggPSAtcWIueDsKICAgICAgICAgIHRoaXMueSA9IC1xYi55OwogICAgICAgICAgdGhpcy56ID0gLXFiLno7CiAgICAgICAgICBjb3NIYWxmVGhldGEgPSAtY29zSGFsZlRoZXRhOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmNvcHkocWIpOwogICAgICAgIH0KICAgICAgICBpZiAoY29zSGFsZlRoZXRhID49IDEuMCkgewogICAgICAgICAgdGhpcy53ID0gdzsKICAgICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgICB0aGlzLnkgPSB5OwogICAgICAgICAgdGhpcy56ID0gejsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICB2YXIgaGFsZlRoZXRhID0gTWF0aC5hY29zKGNvc0hhbGZUaGV0YSk7CiAgICAgICAgdmFyIHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCgxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGEpOwogICAgICAgIGlmIChNYXRoLmFicyhzaW5IYWxmVGhldGEpIDwgMC4wMDEpIHsKICAgICAgICAgIHRoaXMudyA9IDAuNSAqICh3ICsgdGhpcy53KTsKICAgICAgICAgIHRoaXMueCA9IDAuNSAqICh4ICsgdGhpcy54KTsKICAgICAgICAgIHRoaXMueSA9IDAuNSAqICh5ICsgdGhpcy55KTsKICAgICAgICAgIHRoaXMueiA9IDAuNSAqICh6ICsgdGhpcy56KTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICB2YXIgcmF0aW9BID0gTWF0aC5zaW4oKDEgLSB0KSAqIGhhbGZUaGV0YSkgLyBzaW5IYWxmVGhldGEsCiAgICAgICAgICAgIHJhdGlvQiA9IE1hdGguc2luKHQgKiBoYWxmVGhldGEpIC8gc2luSGFsZlRoZXRhOwogICAgICAgIHRoaXMudyA9IHcgKiByYXRpb0EgKyB0aGlzLncgKiByYXRpb0I7CiAgICAgICAgdGhpcy54ID0geCAqIHJhdGlvQSArIHRoaXMueCAqIHJhdGlvQjsKICAgICAgICB0aGlzLnkgPSB5ICogcmF0aW9BICsgdGhpcy55ICogcmF0aW9COwogICAgICAgIHRoaXMueiA9IHogKiByYXRpb0EgKyB0aGlzLnogKiByYXRpb0I7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIHNldEZyb21Vbml0VmVjdG9yczogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciB2MSwgcjsKICAgICAgICB2YXIgRVBTID0gMC4wMDAwMDE7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2RnJvbSwgdlRvKSB7CiAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZCkgdjEgPSBuZXcgVmVjdG9yMygpOwogICAgICAgICAgciA9IHZGcm9tLmRvdCh2VG8pICsgMTsKICAgICAgICAgIGlmIChyIDwgRVBTKSB7CiAgICAgICAgICAgIHIgPSAwOwogICAgICAgICAgICBpZiAoTWF0aC5hYnModkZyb20ueCkgPiBNYXRoLmFicyh2RnJvbS56KSkgewogICAgICAgICAgICAgIHYxLnNldCgtdkZyb20ueSwgdkZyb20ueCwgMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdjEuc2V0KDAsIC12RnJvbS56LCB2RnJvbS55KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdjEuY3Jvc3NWZWN0b3JzKHZGcm9tLCB2VG8pOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy54ID0gdjEueDsKICAgICAgICAgIHRoaXMueSA9IHYxLnk7CiAgICAgICAgICB0aGlzLnogPSB2MS56OwogICAgICAgICAgdGhpcy53ID0gcjsKICAgICAgICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICB9KCkKICAgIH07CiAgICBmdW5jdGlvbiBEZXZpY2UocGFyYW1zKSB7CiAgICAgIHRoaXMud2lkdGggPSBwYXJhbXMud2lkdGggfHwgZ2V0U2NyZWVuV2lkdGgoKTsKICAgICAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0IHx8IGdldFNjcmVlbkhlaWdodCgpOwogICAgICB0aGlzLndpZHRoTWV0ZXJzID0gcGFyYW1zLndpZHRoTWV0ZXJzOwogICAgICB0aGlzLmhlaWdodE1ldGVycyA9IHBhcmFtcy5oZWlnaHRNZXRlcnM7CiAgICAgIHRoaXMuYmV2ZWxNZXRlcnMgPSBwYXJhbXMuYmV2ZWxNZXRlcnM7CiAgICB9CiAgICB2YXIgREVGQVVMVF9BTkRST0lEID0gbmV3IERldmljZSh7CiAgICAgIHdpZHRoTWV0ZXJzOiAwLjExMCwKICAgICAgaGVpZ2h0TWV0ZXJzOiAwLjA2MiwKICAgICAgYmV2ZWxNZXRlcnM6IDAuMDA0CiAgICB9KTsKICAgIHZhciBERUZBVUxUX0lPUyA9IG5ldyBEZXZpY2UoewogICAgICB3aWR0aE1ldGVyczogMC4xMDM4LAogICAgICBoZWlnaHRNZXRlcnM6IDAuMDU4NCwKICAgICAgYmV2ZWxNZXRlcnM6IDAuMDA0CiAgICB9KTsKICAgIHZhciBWaWV3ZXJzID0gewogICAgICBDYXJkYm9hcmRWMTogbmV3IENhcmRib2FyZFZpZXdlcih7CiAgICAgICAgaWQ6ICdDYXJkYm9hcmRWMScsCiAgICAgICAgbGFiZWw6ICdDYXJkYm9hcmQgSS9PIDIwMTQnLAogICAgICAgIGZvdjogNDAsCiAgICAgICAgaW50ZXJMZW5zRGlzdGFuY2U6IDAuMDYwLAogICAgICAgIGJhc2VsaW5lTGVuc0Rpc3RhbmNlOiAwLjAzNSwKICAgICAgICBzY3JlZW5MZW5zRGlzdGFuY2U6IDAuMDQyLAogICAgICAgIGRpc3RvcnRpb25Db2VmZmljaWVudHM6IFswLjQ0MSwgMC4xNTZdLAogICAgICAgIGludmVyc2VDb2VmZmljaWVudHM6IFstMC40NDEwMDM1LCAwLjQyNzU2MTU1LCAtMC40ODA0NDM5LCAwLjU0NjAxMzksIC0wLjU4ODIxMTgzLCAwLjU3MzM5MzgsIC0wLjQ4MzAzMjAyLCAwLjMzMjk5MDgzLCAtMC4xNzU3Mzg0MSwgMC4wNjUxNzcyLCAtMC4wMTQ4ODk2MywgMC4wMDE1NTk4MzRdCiAgICAgIH0pLAogICAgICBDYXJkYm9hcmRWMjogbmV3IENhcmRib2FyZFZpZXdlcih7CiAgICAgICAgaWQ6ICdDYXJkYm9hcmRWMicsCiAgICAgICAgbGFiZWw6ICdDYXJkYm9hcmQgSS9PIDIwMTUnLAogICAgICAgIGZvdjogNjAsCiAgICAgICAgaW50ZXJMZW5zRGlzdGFuY2U6IDAuMDY0LAogICAgICAgIGJhc2VsaW5lTGVuc0Rpc3RhbmNlOiAwLjAzNSwKICAgICAgICBzY3JlZW5MZW5zRGlzdGFuY2U6IDAuMDM5LAogICAgICAgIGRpc3RvcnRpb25Db2VmZmljaWVudHM6IFswLjM0LCAwLjU1XSwKICAgICAgICBpbnZlcnNlQ29lZmZpY2llbnRzOiBbLTAuMzM4MzY3MDQsIC0wLjE4MTYyMTg1LCAwLjg2MjY1NSwgLTEuMjQ2MjA1MSwgMS4wNTYwNjAyLCAtMC41ODIwODMxNywgMC4yMTYwOTA3OCwgLTAuMDU0NDQ4MjMsIDAuMDA5MTc3OTU2LCAtOTkwNDE2OWUtMTAsIDYuMTgzNTM1RS01LCAtMTY5ODE4MDNlLTEzXQogICAgICB9KQogICAgfTsKICAgIGZ1bmN0aW9uIERldmljZUluZm8oZGV2aWNlUGFyYW1zLCBhZGRpdGlvbmFsVmlld2VycykgewogICAgICB0aGlzLnZpZXdlciA9IFZpZXdlcnMuQ2FyZGJvYXJkVjI7CiAgICAgIHRoaXMudXBkYXRlRGV2aWNlUGFyYW1zKGRldmljZVBhcmFtcyk7CiAgICAgIHRoaXMuZGlzdG9ydGlvbiA9IG5ldyBEaXN0b3J0aW9uKHRoaXMudmlld2VyLmRpc3RvcnRpb25Db2VmZmljaWVudHMpOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZGl0aW9uYWxWaWV3ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHZpZXdlciA9IGFkZGl0aW9uYWxWaWV3ZXJzW2ldOwogICAgICAgIFZpZXdlcnNbdmlld2VyLmlkXSA9IG5ldyBDYXJkYm9hcmRWaWV3ZXIodmlld2VyKTsKICAgICAgfQogICAgfQogICAgRGV2aWNlSW5mby5wcm90b3R5cGUudXBkYXRlRGV2aWNlUGFyYW1zID0gZnVuY3Rpb24gKGRldmljZVBhcmFtcykgewogICAgICB0aGlzLmRldmljZSA9IHRoaXMuZGV0ZXJtaW5lRGV2aWNlXyhkZXZpY2VQYXJhbXMpIHx8IHRoaXMuZGV2aWNlOwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlOwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLnNldFZpZXdlciA9IGZ1bmN0aW9uICh2aWV3ZXIpIHsKICAgICAgdGhpcy52aWV3ZXIgPSB2aWV3ZXI7CiAgICAgIHRoaXMuZGlzdG9ydGlvbiA9IG5ldyBEaXN0b3J0aW9uKHRoaXMudmlld2VyLmRpc3RvcnRpb25Db2VmZmljaWVudHMpOwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmRldGVybWluZURldmljZV8gPSBmdW5jdGlvbiAoZGV2aWNlUGFyYW1zKSB7CiAgICAgIGlmICghZGV2aWNlUGFyYW1zKSB7CiAgICAgICAgaWYgKGlzSU9TKCkpIHsKICAgICAgICAgIGNvbnNvbGUud2FybignVXNpbmcgZmFsbGJhY2sgaU9TIGRldmljZSBtZWFzdXJlbWVudHMuJyk7CiAgICAgICAgICByZXR1cm4gREVGQVVMVF9JT1M7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUud2FybignVXNpbmcgZmFsbGJhY2sgQW5kcm9pZCBkZXZpY2UgbWVhc3VyZW1lbnRzLicpOwogICAgICAgICAgcmV0dXJuIERFRkFVTFRfQU5EUk9JRDsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIE1FVEVSU19QRVJfSU5DSCA9IDAuMDI1NDsKICAgICAgdmFyIG1ldGVyc1BlclBpeGVsWCA9IE1FVEVSU19QRVJfSU5DSCAvIGRldmljZVBhcmFtcy54ZHBpOwogICAgICB2YXIgbWV0ZXJzUGVyUGl4ZWxZID0gTUVURVJTX1BFUl9JTkNIIC8gZGV2aWNlUGFyYW1zLnlkcGk7CiAgICAgIHZhciB3aWR0aCA9IGdldFNjcmVlbldpZHRoKCk7CiAgICAgIHZhciBoZWlnaHQgPSBnZXRTY3JlZW5IZWlnaHQoKTsKICAgICAgcmV0dXJuIG5ldyBEZXZpY2UoewogICAgICAgIHdpZHRoTWV0ZXJzOiBtZXRlcnNQZXJQaXhlbFggKiB3aWR0aCwKICAgICAgICBoZWlnaHRNZXRlcnM6IG1ldGVyc1BlclBpeGVsWSAqIGhlaWdodCwKICAgICAgICBiZXZlbE1ldGVyczogZGV2aWNlUGFyYW1zLmJldmVsTW0gKiAwLjAwMQogICAgICB9KTsKICAgIH07CiAgICBEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXREaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjsKICAgICAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlOwogICAgICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjsKICAgICAgdmFyIGV5ZVRvU2NyZWVuRGlzdGFuY2UgPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlOwogICAgICB2YXIgb3V0ZXJEaXN0ID0gKGRldmljZS53aWR0aE1ldGVycyAtIHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSkgLyAyOwogICAgICB2YXIgaW5uZXJEaXN0ID0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlIC8gMjsKICAgICAgdmFyIGJvdHRvbURpc3QgPSB2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnM7CiAgICAgIHZhciB0b3BEaXN0ID0gZGV2aWNlLmhlaWdodE1ldGVycyAtIGJvdHRvbURpc3Q7CiAgICAgIHZhciBvdXRlckFuZ2xlID0gcmFkVG9EZWcgKiBNYXRoLmF0YW4oZGlzdG9ydGlvbi5kaXN0b3J0KG91dGVyRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTsKICAgICAgdmFyIGlubmVyQW5nbGUgPSByYWRUb0RlZyAqIE1hdGguYXRhbihkaXN0b3J0aW9uLmRpc3RvcnQoaW5uZXJEaXN0IC8gZXllVG9TY3JlZW5EaXN0YW5jZSkpOwogICAgICB2YXIgYm90dG9tQW5nbGUgPSByYWRUb0RlZyAqIE1hdGguYXRhbihkaXN0b3J0aW9uLmRpc3RvcnQoYm90dG9tRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTsKICAgICAgdmFyIHRvcEFuZ2xlID0gcmFkVG9EZWcgKiBNYXRoLmF0YW4oZGlzdG9ydGlvbi5kaXN0b3J0KHRvcERpc3QgLyBleWVUb1NjcmVlbkRpc3RhbmNlKSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgbGVmdERlZ3JlZXM6IE1hdGgubWluKG91dGVyQW5nbGUsIHZpZXdlci5mb3YpLAogICAgICAgIHJpZ2h0RGVncmVlczogTWF0aC5taW4oaW5uZXJBbmdsZSwgdmlld2VyLmZvdiksCiAgICAgICAgZG93bkRlZ3JlZXM6IE1hdGgubWluKGJvdHRvbUFuZ2xlLCB2aWV3ZXIuZm92KSwKICAgICAgICB1cERlZ3JlZXM6IE1hdGgubWluKHRvcEFuZ2xlLCB2aWV3ZXIuZm92KQogICAgICB9OwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVWaXNpYmxlVGFuQW5nbGVzID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7CiAgICAgIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTsKICAgICAgdmFyIGRpc3RvcnRpb24gPSB0aGlzLmRpc3RvcnRpb247CiAgICAgIHZhciBmb3ZMZWZ0ID0gTWF0aC50YW4oLWRlZ1RvUmFkICogdmlld2VyLmZvdik7CiAgICAgIHZhciBmb3ZUb3AgPSBNYXRoLnRhbihkZWdUb1JhZCAqIHZpZXdlci5mb3YpOwogICAgICB2YXIgZm92UmlnaHQgPSBNYXRoLnRhbihkZWdUb1JhZCAqIHZpZXdlci5mb3YpOwogICAgICB2YXIgZm92Qm90dG9tID0gTWF0aC50YW4oLWRlZ1RvUmFkICogdmlld2VyLmZvdik7CiAgICAgIHZhciBoYWxmV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyA0OwogICAgICB2YXIgaGFsZkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyAyOwogICAgICB2YXIgdmVydGljYWxMZW5zT2Zmc2V0ID0gdmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzIC0gaGFsZkhlaWdodDsKICAgICAgdmFyIGNlbnRlclggPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyIC0gaGFsZldpZHRoOwogICAgICB2YXIgY2VudGVyWSA9IC12ZXJ0aWNhbExlbnNPZmZzZXQ7CiAgICAgIHZhciBjZW50ZXJaID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICAgICAgdmFyIHNjcmVlbkxlZnQgPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclggLSBoYWxmV2lkdGgpIC8gY2VudGVyWik7CiAgICAgIHZhciBzY3JlZW5Ub3AgPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclkgKyBoYWxmSGVpZ2h0KSAvIGNlbnRlclopOwogICAgICB2YXIgc2NyZWVuUmlnaHQgPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclggKyBoYWxmV2lkdGgpIC8gY2VudGVyWik7CiAgICAgIHZhciBzY3JlZW5Cb3R0b20gPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclkgLSBoYWxmSGVpZ2h0KSAvIGNlbnRlclopOwogICAgICB2YXIgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTsKICAgICAgcmVzdWx0WzBdID0gTWF0aC5tYXgoZm92TGVmdCwgc2NyZWVuTGVmdCk7CiAgICAgIHJlc3VsdFsxXSA9IE1hdGgubWluKGZvdlRvcCwgc2NyZWVuVG9wKTsKICAgICAgcmVzdWx0WzJdID0gTWF0aC5taW4oZm92UmlnaHQsIHNjcmVlblJpZ2h0KTsKICAgICAgcmVzdWx0WzNdID0gTWF0aC5tYXgoZm92Qm90dG9tLCBzY3JlZW5Cb3R0b20pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVOb0xlbnNUYW5BbmdsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjsKICAgICAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlOwogICAgICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjsKICAgICAgdmFyIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7CiAgICAgIHZhciBmb3ZMZWZ0ID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbigtZGVnVG9SYWQgKiB2aWV3ZXIuZm92KSk7CiAgICAgIHZhciBmb3ZUb3AgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKGRlZ1RvUmFkICogdmlld2VyLmZvdikpOwogICAgICB2YXIgZm92UmlnaHQgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKGRlZ1RvUmFkICogdmlld2VyLmZvdikpOwogICAgICB2YXIgZm92Qm90dG9tID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbigtZGVnVG9SYWQgKiB2aWV3ZXIuZm92KSk7CiAgICAgIHZhciBoYWxmV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyA0OwogICAgICB2YXIgaGFsZkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyAyOwogICAgICB2YXIgdmVydGljYWxMZW5zT2Zmc2V0ID0gdmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzIC0gaGFsZkhlaWdodDsKICAgICAgdmFyIGNlbnRlclggPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyIC0gaGFsZldpZHRoOwogICAgICB2YXIgY2VudGVyWSA9IC12ZXJ0aWNhbExlbnNPZmZzZXQ7CiAgICAgIHZhciBjZW50ZXJaID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICAgICAgdmFyIHNjcmVlbkxlZnQgPSAoY2VudGVyWCAtIGhhbGZXaWR0aCkgLyBjZW50ZXJaOwogICAgICB2YXIgc2NyZWVuVG9wID0gKGNlbnRlclkgKyBoYWxmSGVpZ2h0KSAvIGNlbnRlclo7CiAgICAgIHZhciBzY3JlZW5SaWdodCA9IChjZW50ZXJYICsgaGFsZldpZHRoKSAvIGNlbnRlclo7CiAgICAgIHZhciBzY3JlZW5Cb3R0b20gPSAoY2VudGVyWSAtIGhhbGZIZWlnaHQpIC8gY2VudGVyWjsKICAgICAgcmVzdWx0WzBdID0gTWF0aC5tYXgoZm92TGVmdCwgc2NyZWVuTGVmdCk7CiAgICAgIHJlc3VsdFsxXSA9IE1hdGgubWluKGZvdlRvcCwgc2NyZWVuVG9wKTsKICAgICAgcmVzdWx0WzJdID0gTWF0aC5taW4oZm92UmlnaHQsIHNjcmVlblJpZ2h0KTsKICAgICAgcmVzdWx0WzNdID0gTWF0aC5tYXgoZm92Qm90dG9tLCBzY3JlZW5Cb3R0b20pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVWaXNpYmxlU2NyZWVuUmVjdCA9IGZ1bmN0aW9uICh1bmRpc3RvcnRlZEZydXN0dW0pIHsKICAgICAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyOwogICAgICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7CiAgICAgIHZhciBkaXN0ID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICAgICAgdmFyIGV5ZVggPSAoZGV2aWNlLndpZHRoTWV0ZXJzIC0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlKSAvIDI7CiAgICAgIHZhciBleWVZID0gdmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzOwogICAgICB2YXIgbGVmdCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMF0gKiBkaXN0ICsgZXllWCkgLyBkZXZpY2Uud2lkdGhNZXRlcnM7CiAgICAgIHZhciB0b3AgPSAodW5kaXN0b3J0ZWRGcnVzdHVtWzFdICogZGlzdCArIGV5ZVkpIC8gZGV2aWNlLmhlaWdodE1ldGVyczsKICAgICAgdmFyIHJpZ2h0ID0gKHVuZGlzdG9ydGVkRnJ1c3R1bVsyXSAqIGRpc3QgKyBleWVYKSAvIGRldmljZS53aWR0aE1ldGVyczsKICAgICAgdmFyIGJvdHRvbSA9ICh1bmRpc3RvcnRlZEZydXN0dW1bM10gKiBkaXN0ICsgZXllWSkgLyBkZXZpY2UuaGVpZ2h0TWV0ZXJzOwogICAgICByZXR1cm4gewogICAgICAgIHg6IGxlZnQsCiAgICAgICAgeTogYm90dG9tLAogICAgICAgIHdpZHRoOiByaWdodCAtIGxlZnQsCiAgICAgICAgaGVpZ2h0OiB0b3AgLSBib3R0b20KICAgICAgfTsKICAgIH07CiAgICBEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRGaWVsZE9mVmlld0xlZnRFeWUgPSBmdW5jdGlvbiAob3B0X2lzVW5kaXN0b3J0ZWQpIHsKICAgICAgcmV0dXJuIG9wdF9pc1VuZGlzdG9ydGVkID8gdGhpcy5nZXRVbmRpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSgpIDogdGhpcy5nZXREaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUoKTsKICAgIH07CiAgICBEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRGaWVsZE9mVmlld1JpZ2h0RXllID0gZnVuY3Rpb24gKG9wdF9pc1VuZGlzdG9ydGVkKSB7CiAgICAgIHZhciBmb3YgPSB0aGlzLmdldEZpZWxkT2ZWaWV3TGVmdEV5ZShvcHRfaXNVbmRpc3RvcnRlZCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgbGVmdERlZ3JlZXM6IGZvdi5yaWdodERlZ3JlZXMsCiAgICAgICAgcmlnaHREZWdyZWVzOiBmb3YubGVmdERlZ3JlZXMsCiAgICAgICAgdXBEZWdyZWVzOiBmb3YudXBEZWdyZWVzLAogICAgICAgIGRvd25EZWdyZWVzOiBmb3YuZG93bkRlZ3JlZXMKICAgICAgfTsKICAgIH07CiAgICBEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRVbmRpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHAgPSB0aGlzLmdldFVuZGlzdG9ydGVkUGFyYW1zXygpOwogICAgICByZXR1cm4gewogICAgICAgIGxlZnREZWdyZWVzOiByYWRUb0RlZyAqIE1hdGguYXRhbihwLm91dGVyRGlzdCksCiAgICAgICAgcmlnaHREZWdyZWVzOiByYWRUb0RlZyAqIE1hdGguYXRhbihwLmlubmVyRGlzdCksCiAgICAgICAgZG93bkRlZ3JlZXM6IHJhZFRvRGVnICogTWF0aC5hdGFuKHAuYm90dG9tRGlzdCksCiAgICAgICAgdXBEZWdyZWVzOiByYWRUb0RlZyAqIE1hdGguYXRhbihwLnRvcERpc3QpCiAgICAgIH07CiAgICB9OwogICAgRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0VW5kaXN0b3J0ZWRWaWV3cG9ydExlZnRFeWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBwID0gdGhpcy5nZXRVbmRpc3RvcnRlZFBhcmFtc18oKTsKICAgICAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyOwogICAgICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7CiAgICAgIHZhciBleWVUb1NjcmVlbkRpc3RhbmNlID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICAgICAgdmFyIHNjcmVlbldpZHRoID0gZGV2aWNlLndpZHRoTWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICAgICAgdmFyIHNjcmVlbkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlOwogICAgICB2YXIgeFB4UGVyVGFuQW5nbGUgPSBkZXZpY2Uud2lkdGggLyBzY3JlZW5XaWR0aDsKICAgICAgdmFyIHlQeFBlclRhbkFuZ2xlID0gZGV2aWNlLmhlaWdodCAvIHNjcmVlbkhlaWdodDsKICAgICAgdmFyIHggPSBNYXRoLnJvdW5kKChwLmV5ZVBvc1ggLSBwLm91dGVyRGlzdCkgKiB4UHhQZXJUYW5BbmdsZSk7CiAgICAgIHZhciB5ID0gTWF0aC5yb3VuZCgocC5leWVQb3NZIC0gcC5ib3R0b21EaXN0KSAqIHlQeFBlclRhbkFuZ2xlKTsKICAgICAgcmV0dXJuIHsKICAgICAgICB4OiB4LAogICAgICAgIHk6IHksCiAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoKHAuZXllUG9zWCArIHAuaW5uZXJEaXN0KSAqIHhQeFBlclRhbkFuZ2xlKSAtIHgsCiAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKChwLmV5ZVBvc1kgKyBwLnRvcERpc3QpICogeVB4UGVyVGFuQW5nbGUpIC0geQogICAgICB9OwogICAgfTsKICAgIERldmljZUluZm8ucHJvdG90eXBlLmdldFVuZGlzdG9ydGVkUGFyYW1zXyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyOwogICAgICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7CiAgICAgIHZhciBkaXN0b3J0aW9uID0gdGhpcy5kaXN0b3J0aW9uOwogICAgICB2YXIgZXllVG9TY3JlZW5EaXN0YW5jZSA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7CiAgICAgIHZhciBoYWxmTGVuc0Rpc3RhbmNlID0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlIC8gMiAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7CiAgICAgIHZhciBzY3JlZW5XaWR0aCA9IGRldmljZS53aWR0aE1ldGVycyAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7CiAgICAgIHZhciBzY3JlZW5IZWlnaHQgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICAgICAgdmFyIGV5ZVBvc1ggPSBzY3JlZW5XaWR0aCAvIDIgLSBoYWxmTGVuc0Rpc3RhbmNlOwogICAgICB2YXIgZXllUG9zWSA9ICh2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnMpIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICAgICAgdmFyIG1heEZvdiA9IHZpZXdlci5mb3Y7CiAgICAgIHZhciB2aWV3ZXJNYXggPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKGRlZ1RvUmFkICogbWF4Rm92KSk7CiAgICAgIHZhciBvdXRlckRpc3QgPSBNYXRoLm1pbihleWVQb3NYLCB2aWV3ZXJNYXgpOwogICAgICB2YXIgaW5uZXJEaXN0ID0gTWF0aC5taW4oaGFsZkxlbnNEaXN0YW5jZSwgdmlld2VyTWF4KTsKICAgICAgdmFyIGJvdHRvbURpc3QgPSBNYXRoLm1pbihleWVQb3NZLCB2aWV3ZXJNYXgpOwogICAgICB2YXIgdG9wRGlzdCA9IE1hdGgubWluKHNjcmVlbkhlaWdodCAtIGV5ZVBvc1ksIHZpZXdlck1heCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgb3V0ZXJEaXN0OiBvdXRlckRpc3QsCiAgICAgICAgaW5uZXJEaXN0OiBpbm5lckRpc3QsCiAgICAgICAgdG9wRGlzdDogdG9wRGlzdCwKICAgICAgICBib3R0b21EaXN0OiBib3R0b21EaXN0LAogICAgICAgIGV5ZVBvc1g6IGV5ZVBvc1gsCiAgICAgICAgZXllUG9zWTogZXllUG9zWQogICAgICB9OwogICAgfTsKICAgIGZ1bmN0aW9uIENhcmRib2FyZFZpZXdlcihwYXJhbXMpIHsKICAgICAgdGhpcy5pZCA9IHBhcmFtcy5pZDsKICAgICAgdGhpcy5sYWJlbCA9IHBhcmFtcy5sYWJlbDsKICAgICAgdGhpcy5mb3YgPSBwYXJhbXMuZm92OwogICAgICB0aGlzLmludGVyTGVuc0Rpc3RhbmNlID0gcGFyYW1zLmludGVyTGVuc0Rpc3RhbmNlOwogICAgICB0aGlzLmJhc2VsaW5lTGVuc0Rpc3RhbmNlID0gcGFyYW1zLmJhc2VsaW5lTGVuc0Rpc3RhbmNlOwogICAgICB0aGlzLnNjcmVlbkxlbnNEaXN0YW5jZSA9IHBhcmFtcy5zY3JlZW5MZW5zRGlzdGFuY2U7CiAgICAgIHRoaXMuZGlzdG9ydGlvbkNvZWZmaWNpZW50cyA9IHBhcmFtcy5kaXN0b3J0aW9uQ29lZmZpY2llbnRzOwogICAgICB0aGlzLmludmVyc2VDb2VmZmljaWVudHMgPSBwYXJhbXMuaW52ZXJzZUNvZWZmaWNpZW50czsKICAgIH0KICAgIERldmljZUluZm8uVmlld2VycyA9IFZpZXdlcnM7CiAgICB2YXIgZm9ybWF0ID0gMTsKICAgIHZhciBsYXN0X3VwZGF0ZWQgPSAiMjAxOS0xMS0wOVQxNzozNjoxNFoiOwogICAgdmFyIGRldmljZXMgPSBbeyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiYXN1cy8qL05leHVzIDcvKiJ9LHsidWEiOiJOZXh1cyA3In1dLCJkcGkiOlszMjAuOCwzMjNdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiYXN1cy8qL0FTVVNfWDAwUEQvKiJ9LHsidWEiOiJBU1VTX1gwMFBEIn1dLCJkcGkiOjI0NSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6ImFzdXMvKi9BU1VTX1gwMDhELyoifSx7InVhIjoiQVNVU19YMDA4RCJ9XSwiZHBpIjoyODIsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJhc3VzLyovQVNVU19aMDBBRC8qIn0seyJ1YSI6IkFTVVNfWjAwQUQifV0sImRwaSI6WzQwMyw0MDQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiR29vZ2xlLyovUGl4ZWwgMiBYTC8qIn0seyJ1YSI6IlBpeGVsIDIgWEwifV0sImRwaSI6NTM3LjksImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiR29vZ2xlLyovUGl4ZWwgMyBYTC8qIn0seyJ1YSI6IlBpeGVsIDMgWEwifV0sImRwaSI6WzU1OC41LDU1My44XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJHb29nbGUvKi9QaXhlbCBYTC8qIn0seyJ1YSI6IlBpeGVsIFhMIn1dLCJkcGkiOls1MzcuOSw1MzNdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsIDMvKiJ9LHsidWEiOiJQaXhlbCAzIn1dLCJkcGkiOjQ0Mi40LCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsIDIvKiJ9LHsidWEiOiJQaXhlbCAyIn1dLCJkcGkiOjQ0MSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsLyoifSx7InVhIjoiUGl4ZWwifV0sImRwaSI6WzQzMi42LDQzNi43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIVEMvKi9IVEM2NDM1TFZXLyoifSx7InVhIjoiSFRDNjQzNUxWVyJ9XSwiZHBpIjpbNDQ5LjcsNDQzLjNdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkhUQy8qL0hUQyBPbmUgWEwvKiJ9LHsidWEiOiJIVEMgT25lIFhMIn1dLCJkcGkiOlszMTUuMywzMTQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiaHRjLyovTmV4dXMgOS8qIn0seyJ1YSI6Ik5leHVzIDkifV0sImRwaSI6Mjg5LCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiSFRDLyovSFRDIE9uZSBNOS8qIn0seyJ1YSI6IkhUQyBPbmUgTTkifV0sImRwaSI6WzQ0Mi41LDQ0My4zXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkhUQy8qL0hUQyBPbmVfTTgvKiJ9LHsidWEiOiJIVEMgT25lX004In1dLCJkcGkiOls0NDkuNyw0NDcuNF0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIVEMvKi9IVEMgT25lLyoifSx7InVhIjoiSFRDIE9uZSJ9XSwiZHBpIjo0NzIuOCwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIdWF3ZWkvKi9OZXh1cyA2UC8qIn0seyJ1YSI6Ik5leHVzIDZQIn1dLCJkcGkiOls1MTUuMSw1MThdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikh1YXdlaS8qL0JMTi1MMjQvKiJ9LHsidWEiOiJIT05PUkJMTi1MMjQifV0sImRwaSI6NDgwLCJidyI6NCwiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiSHVhd2VpLyovQktMLUwwOS8qIn0seyJ1YSI6IkJLTC1MMDkifV0sImRwaSI6NDAzLCJidyI6My40NywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEVOT1ZPLyovTGVub3ZvIFBCMi02OTBZLyoifSx7InVhIjoiTGVub3ZvIFBCMi02OTBZIn1dLCJkcGkiOls0NTcuMiw0NTQuNzEzXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL05leHVzIDVYLyoifSx7InVhIjoiTmV4dXMgNVgifV0sImRwaSI6WzQyMiw0MTkuOV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEdNUzM0NS8qIn0seyJ1YSI6IkxHTVMzNDUifV0sImRwaSI6WzIyMS43LDIxOS4xXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL0xHLUQ4MDAvKiJ9LHsidWEiOiJMRy1EODAwIn1dLCJkcGkiOls0MjIsNDI0LjFdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEctRDg1MC8qIn0seyJ1YSI6IkxHLUQ4NTAifV0sImRwaSI6WzUzNy45LDU0MS45XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL1ZTOTg1IDRHLyoifSx7InVhIjoiVlM5ODUgNEcifV0sImRwaSI6WzUzNy45LDUzNS42XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJMR0UvKi9OZXh1cyA1LyoifSx7InVhIjoiTmV4dXMgNSBCIn1dLCJkcGkiOls0NDIuNCw0NDQuOF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTmV4dXMgNC8qIn0seyJ1YSI6Ik5leHVzIDQifV0sImRwaSI6WzMxOS44LDMxOC40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJMR0UvKi9MRy1QNzY5LyoifSx7InVhIjoiTEctUDc2OSJ9XSwiZHBpIjpbMjQwLjYsMjQ3LjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL0xHTVMzMjMvKiJ9LHsidWEiOiJMR01TMzIzIn1dLCJkcGkiOlsyMDYuNiwyMDQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEdMUzk5Ni8qIn0seyJ1YSI6IkxHTFM5OTYifV0sImRwaSI6WzQwMy40LDQwMS41XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJNaWNyb21heC8qLzQ1NjBNTVgvKiJ9LHsidWEiOiI0NTYwTU1YIn1dLCJkcGkiOlsyNDAsMjE5LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik1pY3JvbWF4LyovQTI1MC8qIn0seyJ1YSI6Ik1pY3JvbWF4IEEyNTAifV0sImRwaSI6WzQ4MCw0NDYuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTWljcm9tYXgvKi9NaWNyb21heCBBUTQ1MDEvKiJ9LHsidWEiOiJNaWNyb21heCBBUTQ1MDEifV0sImRwaSI6MjQwLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9HNS8qIn0seyJ1YSI6Ik1vdG8gRyAoNSkgUGx1cyJ9XSwiZHBpIjpbNDAzLjQsNDAzXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL0RST0lEIFJBWlIvKiJ9LHsidWEiOiJEUk9JRCBSQVpSIn1dLCJkcGkiOlszNjguMSwyNTYuN10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDgzMEMvKiJ9LHsidWEiOiJYVDgzMEMifV0sImRwaSI6WzI1NCwyNTUuOV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwMjEvKiJ9LHsidWEiOiJYVDEwMjEifV0sImRwaSI6WzI1NCwyNTYuN10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTAyMy8qIn0seyJ1YSI6IlhUMTAyMyJ9XSwiZHBpIjpbMjU0LDI1Ni43XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDI4LyoifSx7InVhIjoiWFQxMDI4In1dLCJkcGkiOlszMjYuNiwzMjcuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwMzQvKiJ9LHsidWEiOiJYVDEwMzQifV0sImRwaSI6WzMyNi42LDMyOC40XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDUzLyoifSx7InVhIjoiWFQxMDUzIn1dLCJkcGkiOlszMTUuMywzMTYuMV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDE1NjIvKiJ9LHsidWEiOiJYVDE1NjIifV0sImRwaSI6WzQwMy40LDQwMi43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL05leHVzIDYvKiJ9LHsidWEiOiJOZXh1cyA2IEIifV0sImRwaSI6WzQ5NC4zLDQ4OS43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTA2My8qIn0seyJ1YSI6IlhUMTA2MyJ9XSwiZHBpIjpbMjk1LDI5Ni42XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTA2NC8qIn0seyJ1YSI6IlhUMTA2NCJ9XSwiZHBpIjpbMjk1LDI5NS42XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDkyLyoifSx7InVhIjoiWFQxMDkyIn1dLCJkcGkiOls0MjIsNDI0LjFdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwOTUvKiJ9LHsidWEiOiJYVDEwOTUifV0sImRwaSI6WzQyMiw0MjMuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9HNC8qIn0seyJ1YSI6Ik1vdG8gRyAoNCkifV0sImRwaSI6NDAxLCJidyI6NCwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9BMDAwMS8qIn0seyJ1YSI6IkEwMDAxIn1dLCJkcGkiOls0MDMuNCw0MDFdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkUgRTEwMDEvKiJ9LHsidWEiOiJPTkUgRTEwMDEifV0sImRwaSI6WzQ0Mi40LDQ0MS40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FIEUxMDAzLyoifSx7InVhIjoiT05FIEUxMDAzIn1dLCJkcGkiOls0NDIuNCw0NDEuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORSBFMTAwNS8qIn0seyJ1YSI6Ik9ORSBFMTAwNSJ9XSwiZHBpIjpbNDQyLjQsNDQxLjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkUgQTIwMDEvKiJ9LHsidWEiOiJPTkUgQTIwMDEifV0sImRwaSI6WzM5MS45LDQwNS40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FIEEyMDAzLyoifSx7InVhIjoiT05FIEEyMDAzIn1dLCJkcGkiOlszOTEuOSw0MDUuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORSBBMjAwNS8qIn0seyJ1YSI6Ik9ORSBBMjAwNSJ9XSwiZHBpIjpbMzkxLjksNDA1LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkVQTFVTIEEzMDAwLyoifSx7InVhIjoiT05FUExVUyBBMzAwMCJ9XSwiZHBpIjo0MDEsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FUExVUyBBMzAwMy8qIn0seyJ1YSI6Ik9ORVBMVVMgQTMwMDMifV0sImRwaSI6NDAxLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORVBMVVMgQTMwMTAvKiJ9LHsidWEiOiJPTkVQTFVTIEEzMDEwIn1dLCJkcGkiOjQwMSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkVQTFVTIEE1MDAwLyoifSx7InVhIjoiT05FUExVUyBBNTAwMCAifV0sImRwaSI6WzQwMy40MTEsMzk5LjczN10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORSBBNTAxMC8qIn0seyJ1YSI6Ik9ORVBMVVMgQTUwMTAifV0sImRwaSI6WzQwMyw0MDBdLCJidyI6MiwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkVQTFVTIEE2MDAwLyoifSx7InVhIjoiT05FUExVUyBBNjAwMCJ9XSwiZHBpIjo0MDEsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FUExVUyBBNjAwMy8qIn0seyJ1YSI6Ik9ORVBMVVMgQTYwMDMifV0sImRwaSI6NDAxLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORVBMVVMgQTYwMTAvKiJ9LHsidWEiOiJPTkVQTFVTIEE2MDEwIn1dLCJkcGkiOjQwMSwiYnciOjIsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkVQTFVTIEE2MDEzLyoifSx7InVhIjoiT05FUExVUyBBNjAxMyJ9XSwiZHBpIjo0MDEsImJ3IjoyLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPUFBPLyovWDkwOS8qIn0seyJ1YSI6Ilg5MDkifV0sImRwaSI6WzQ0Mi40LDQ0NC4xXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR1QtSTkwODIvKiJ9LHsidWEiOiJHVC1JOTA4MiJ9XSwiZHBpIjpbMTg0LjcsMTg1LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HMzYwUC8qIn0seyJ1YSI6IlNNLUczNjBQIn1dLCJkcGkiOlsxOTYuNywyMDUuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL05leHVzIFMvKiJ9LHsidWEiOiJOZXh1cyBTIn1dLCJkcGkiOlsyMzQuNSwyMjkuOF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL0dULUk5MzAwLyoifSx7InVhIjoiR1QtSTkzMDAifV0sImRwaSI6WzMwNC44LDMwMy45XSwiYnciOjUsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1UMjMwTlUvKiJ9LHsidWEiOiJTTS1UMjMwTlUifV0sImRwaSI6MjE2LCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NHSC1UMzk5LyoifSx7InVhIjoiU0dILVQzOTkifV0sImRwaSI6WzIxNy43LDIzMS40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU0dILU05MTkvKiJ9LHsidWEiOiJTR0gtTTkxOSJ9XSwiZHBpIjpbNDQwLjgsNDM3LjddLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1OOTAwNS8qIn0seyJ1YSI6IlNNLU45MDA1In1dLCJkcGkiOlszODYuNCwzODddLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NBTVNVTkctU00tTjkwMEEvKiJ9LHsidWEiOiJTQU1TVU5HLVNNLU45MDBBIn1dLCJkcGkiOlszODYuNCwzODcuN10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL0dULUk5NTAwLyoifSx7InVhIjoiR1QtSTk1MDAifV0sImRwaSI6WzQ0Mi41LDQ0My4zXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTUwNS8qIn0seyJ1YSI6IkdULUk5NTA1In1dLCJkcGkiOjQzOS40LCJidyI6NCwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTAwRi8qIn0seyJ1YSI6IlNNLUc5MDBGIn1dLCJkcGkiOls0MTUuNiw0MzEuNl0sImJ3Ijo1LCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MDBNLyoifSx7InVhIjoiU00tRzkwME0ifV0sImRwaSI6WzQxNS42LDQzMS42XSwiYnciOjUsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzgwMEYvKiJ9LHsidWEiOiJTTS1HODAwRiJ9XSwiZHBpIjozMjYuOCwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkwNlMvKiJ9LHsidWEiOiJTTS1HOTA2UyJ9XSwiZHBpIjpbNTYyLjcsNTcyLjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTMwMC8qIn0seyJ1YSI6IkdULUk5MzAwIn1dLCJkcGkiOlszMDYuNywzMDQuOF0sImJ3Ijo1LCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLVQ1MzUvKiJ9LHsidWEiOiJTTS1UNTM1In1dLCJkcGkiOlsxNDIuNiwxMzYuNF0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkyMEMvKiJ9LHsidWEiOiJTTS1OOTIwQyJ9XSwiZHBpIjpbNTE1LjEsNTE4LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1OOTIwUC8qIn0seyJ1YSI6IlNNLU45MjBQIn1dLCJkcGkiOlszODYuMzY1NSwzOTAuMTQ0XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkyMFc4LyoifSx7InVhIjoiU00tTjkyMFc4In1dLCJkcGkiOls1MTUuMSw1MTguNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL0dULUk5MzAwSS8qIn0seyJ1YSI6IkdULUk5MzAwSSJ9XSwiZHBpIjpbMzA0LjgsMzA1LjhdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTE5NS8qIn0seyJ1YSI6IkdULUk5MTk1In1dLCJkcGkiOlsyNDkuNCwyNTYuN10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU1BILUw1MjAvKiJ9LHsidWEiOiJTUEgtTDUyMCJ9XSwiZHBpIjpbMjQ5LjQsMjU1LjldLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TQU1TVU5HLVNHSC1JNzE3LyoifSx7InVhIjoiU0FNU1VORy1TR0gtSTcxNyJ9XSwiZHBpIjoyODUuOCwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU1BILUQ3MTAvKiJ9LHsidWEiOiJTUEgtRDcxMCJ9XSwiZHBpIjpbMjE3LjcsMjA0LjJdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1ONzEwMC8qIn0seyJ1YSI6IkdULU43MTAwIn1dLCJkcGkiOjI2NS4xLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TQ0gtSTYwNS8qIn0seyJ1YSI6IlNDSC1JNjA1In1dLCJkcGkiOjI2NS4xLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HYWxheHkgTmV4dXMvKiJ9LHsidWEiOiJHYWxheHkgTmV4dXMifV0sImRwaSI6WzMxNS4zLDMxNC4yXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkxMEgvKiJ9LHsidWEiOiJTTS1OOTEwSCJ9XSwiZHBpIjpbNTE1LjEsNTE4XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkxMEMvKiJ9LHsidWEiOiJTTS1OOTEwQyJ9XSwiZHBpIjpbNTE1LjIsNTIwLjJdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUcxMzBNLyoifSx7InVhIjoiU00tRzEzME0ifV0sImRwaSI6WzE2NS45LDE2NC44XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTI4SS8qIn0seyJ1YSI6IlNNLUc5MjhJIn1dLCJkcGkiOls1MTUuMSw1MTguNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MjBGLyoifSx7InVhIjoiU00tRzkyMEYifV0sImRwaSI6NTgwLjYsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkyMFAvKiJ9LHsidWEiOiJTTS1HOTIwUCJ9XSwiZHBpIjpbNTIyLjUsNTc3XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkyNUYvKiJ9LHsidWEiOiJTTS1HOTI1RiJ9XSwiZHBpIjo1ODAuNiwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTI1Vi8qIn0seyJ1YSI6IlNNLUc5MjVWIn1dLCJkcGkiOls1MjIuNSw1NzYuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MzBGLyoifSx7InVhIjoiU00tRzkzMEYifV0sImRwaSI6NTc2LjYsImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MzVGLyoifSx7InVhIjoiU00tRzkzNUYifV0sImRwaSI6NTMzLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NTBGLyoifSx7InVhIjoiU00tRzk1MEYifV0sImRwaSI6WzU2Mi43MDcsNTY1LjI5M10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzk1NVUvKiJ9LHsidWEiOiJTTS1HOTU1VSJ9XSwiZHBpIjpbNTIyLjUxNCw1MjUuNzYyXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTU1Ri8qIn0seyJ1YSI6IlNNLUc5NTVGIn1dLCJkcGkiOls1MjIuNTE0LDUyNS43NjJdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NjBGLyoifSx7InVhIjoiU00tRzk2MEYifV0sImRwaSI6WzU2OS41NzUsNTcxLjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTYwMC8qIn0seyJ1YSI6IlNNLUc5NjAwIn1dLCJkcGkiOls1NjkuNTc1LDU3MS41XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzk2MFQvKiJ9LHsidWEiOiJTTS1HOTYwVCJ9XSwiZHBpIjpbNTY5LjU3NSw1NzEuNV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NjBOLyoifSx7InVhIjoiU00tRzk2ME4ifV0sImRwaSI6WzU2OS41NzUsNTcxLjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTYwVS8qIn0seyJ1YSI6IlNNLUc5NjBVIn1dLCJkcGkiOls1NjkuNTc1LDU3MS41XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzk2MDgvKiJ9LHsidWEiOiJTTS1HOTYwOCJ9XSwiZHBpIjpbNTY5LjU3NSw1NzEuNV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NjBGRC8qIn0seyJ1YSI6IlNNLUc5NjBGRCJ9XSwiZHBpIjpbNTY5LjU3NSw1NzEuNV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NjBXLyoifSx7InVhIjoiU00tRzk2MFcifV0sImRwaSI6WzU2OS41NzUsNTcxLjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTY1Ri8qIn0seyJ1YSI6IlNNLUc5NjVGIn1dLCJkcGkiOjUyOSwiYnciOjIsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJTb255LyovQzY5MDMvKiJ9LHsidWEiOiJDNjkwMyJ9XSwiZHBpIjpbNDQyLjUsNDQzLjNdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiU29ueS8qL0Q2NjUzLyoifSx7InVhIjoiRDY2NTMifV0sImRwaSI6WzQyOC42LDQyNy42XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJTb255LyovRTY2NTMvKiJ9LHsidWEiOiJFNjY1MyJ9XSwiZHBpIjpbNDI4LjYsNDI1LjddLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IlNvbnkvKi9FNjg1My8qIn0seyJ1YSI6IkU2ODUzIn1dLCJkcGkiOls0MDMuNCw0MDEuOV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiU29ueS8qL1NHUDMyMS8qIn0seyJ1YSI6IlNHUDMyMSJ9XSwiZHBpIjpbMjI0LjcsMjI0LjFdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiVENULyovQUxDQVRFTCBPTkUgVE9VQ0ggRmllcmNlLyoifSx7InVhIjoiQUxDQVRFTCBPTkUgVE9VQ0ggRmllcmNlIn1dLCJkcGkiOlsyNDAsMjQ3LjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IlRITC8qL3RobCA1MDAwLyoifSx7InVhIjoidGhsIDUwMDAifV0sImRwaSI6WzQ4MCw0NDMuM10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiRmx5LyovSVE0NDEyLyoifSx7InVhIjoiSVE0NDEyIn1dLCJkcGkiOjMwNy45LCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IlpURS8qL1pURSBCbGFkZSBMMi8qIn0seyJ1YSI6IlpURSBCbGFkZSBMMiJ9XSwiZHBpIjoyNDAsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJCRU5FVkUvKi9WUjUxOC8qIn0seyJ1YSI6IlZSNTE4In1dLCJkcGkiOjQ4MCwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImlvcyIsInJ1bGVzIjpbeyJyZXMiOls2NDAsOTYwXX1dLCJkcGkiOlszMjUuMSwzMjguNF0sImJ3Ijo0LCJhYyI6MTAwMH0seyJ0eXBlIjoiaW9zIiwicnVsZXMiOlt7InJlcyI6WzY0MCwxMTM2XX1dLCJkcGkiOlszMTcuMSwzMjAuMl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiaW9zIiwicnVsZXMiOlt7InJlcyI6Wzc1MCwxMzM0XX1dLCJkcGkiOjMyNi40LCJidyI6NCwiYWMiOjEwMDB9LHsidHlwZSI6ImlvcyIsInJ1bGVzIjpbeyJyZXMiOlsxMjQyLDIyMDhdfV0sImRwaSI6WzQ1My42LDQ1OC40XSwiYnciOjQsImFjIjoxMDAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbMTEyNSwyMDAxXX1dLCJkcGkiOls0MTAuOSw0MTUuNF0sImJ3Ijo0LCJhYyI6MTAwMH0seyJ0eXBlIjoiaW9zIiwicnVsZXMiOlt7InJlcyI6WzExMjUsMjQzNl19XSwiZHBpIjo0NTgsImJ3Ijo0LCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiSHVhd2VpLyovRU1MLUwyOS8qIn0seyJ1YSI6IkVNTC1MMjkifV0sImRwaSI6NDI4LCJidyI6My40NSwiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTm9raWEvKi9Ob2tpYSA3LjEvKiJ9LHsidWEiOiJOb2tpYSA3LjEifV0sImRwaSI6WzQzMiw0MzEuOV0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbMTI0MiwyNjg4XX1dLCJkcGkiOjQ1OCwiYnciOjQsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzU3ME0vKiJ9LHsidWEiOiJTTS1HNTcwTSJ9XSwiZHBpIjozMjAsImJ3IjozLjY4NCwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTcwRi8qIn0seyJ1YSI6IlNNLUc5NzBGIn1dLCJkcGkiOjQzOCwiYnciOjIuMjgxLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzk3M0YvKiJ9LHsidWEiOiJTTS1HOTczRiJ9XSwiZHBpIjo1NTAsImJ3IjoyLjAwMiwiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NzVGLyoifSx7InVhIjoiU00tRzk3NUYifV0sImRwaSI6NTIyLCJidyI6Mi4wNTQsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTc3Ri8qIn0seyJ1YSI6IlNNLUc5NzdGIn1dLCJkcGkiOjUwNSwiYnciOjIuMzM0LCJhYyI6NTAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbODI4LDE3OTJdfV0sImRwaSI6MzI2LCJidyI6NSwiYWMiOjUwMH1dOwogICAgdmFyIERQREJfQ0FDSEUgPSB7CiAgICAJZm9ybWF0OiBmb3JtYXQsCiAgICAJbGFzdF91cGRhdGVkOiBsYXN0X3VwZGF0ZWQsCiAgICAJZGV2aWNlczogZGV2aWNlcwogICAgfTsKICAgIGZ1bmN0aW9uIERwZGIodXJsLCBvbkRldmljZVBhcmFtc1VwZGF0ZWQpIHsKICAgICAgdGhpcy5kcGRiID0gRFBEQl9DQUNIRTsKICAgICAgdGhpcy5yZWNhbGN1bGF0ZURldmljZVBhcmFtc18oKTsKICAgICAgaWYgKHVybCkgewogICAgICAgIHRoaXMub25EZXZpY2VQYXJhbXNVcGRhdGVkID0gb25EZXZpY2VQYXJhbXNVcGRhdGVkOwogICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICB2YXIgb2JqID0gdGhpczsKICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTsKICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIG9iai5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8PSAyOTkpIHsKICAgICAgICAgICAgb2JqLmRwZGIgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7CiAgICAgICAgICAgIG9iai5yZWNhbGN1bGF0ZURldmljZVBhcmFtc18oKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgb25saW5lIERQREIhJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgeGhyLnNlbmQoKTsKICAgICAgfQogICAgfQogICAgRHBkYi5wcm90b3R5cGUuZ2V0RGV2aWNlUGFyYW1zID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy5kZXZpY2VQYXJhbXM7CiAgICB9OwogICAgRHBkYi5wcm90b3R5cGUucmVjYWxjdWxhdGVEZXZpY2VQYXJhbXNfID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgbmV3RGV2aWNlUGFyYW1zID0gdGhpcy5jYWxjRGV2aWNlUGFyYW1zXygpOwogICAgICBpZiAobmV3RGV2aWNlUGFyYW1zKSB7CiAgICAgICAgdGhpcy5kZXZpY2VQYXJhbXMgPSBuZXdEZXZpY2VQYXJhbXM7CiAgICAgICAgaWYgKHRoaXMub25EZXZpY2VQYXJhbXNVcGRhdGVkKSB7CiAgICAgICAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCh0aGlzLmRldmljZVBhcmFtcyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWNhbGN1bGF0ZSBkZXZpY2UgcGFyYW1ldGVycy4nKTsKICAgICAgfQogICAgfTsKICAgIERwZGIucHJvdG90eXBlLmNhbGNEZXZpY2VQYXJhbXNfID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZGIgPSB0aGlzLmRwZGI7CiAgICAgIGlmICghZGIpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdEUERCIG5vdCBhdmFpbGFibGUuJyk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKGRiLmZvcm1hdCAhPSAxKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRFBEQiBoYXMgdW5leHBlY3RlZCBmb3JtYXQgdmVyc2lvbi4nKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBpZiAoIWRiLmRldmljZXMgfHwgIWRiLmRldmljZXMubGVuZ3RoKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRFBEQiBkb2VzIG5vdCBoYXZlIGEgZGV2aWNlcyBzZWN0aW9uLicpOwogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhOwogICAgICB2YXIgd2lkdGggPSBnZXRTY3JlZW5XaWR0aCgpOwogICAgICB2YXIgaGVpZ2h0ID0gZ2V0U2NyZWVuSGVpZ2h0KCk7CiAgICAgIGlmICghZGIuZGV2aWNlcykgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RQREIgaGFzIG5vIGRldmljZXMgc2VjdGlvbi4nKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRiLmRldmljZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZGV2aWNlID0gZGIuZGV2aWNlc1tpXTsKICAgICAgICBpZiAoIWRldmljZS5ydWxlcykgewogICAgICAgICAgY29uc29sZS53YXJuKCdEZXZpY2VbJyArIGkgKyAnXSBoYXMgbm8gcnVsZXMgc2VjdGlvbi4nKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZGV2aWNlLnR5cGUgIT0gJ2lvcycgJiYgZGV2aWNlLnR5cGUgIT0gJ2FuZHJvaWQnKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oJ0RldmljZVsnICsgaSArICddIGhhcyBpbnZhbGlkIHR5cGUuJyk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzSU9TKCkgIT0gKGRldmljZS50eXBlID09ICdpb3MnKSkgY29udGludWU7CiAgICAgICAgdmFyIG1hdGNoZWQgPSBmYWxzZTsKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRldmljZS5ydWxlcy5sZW5ndGg7IGorKykgewogICAgICAgICAgdmFyIHJ1bGUgPSBkZXZpY2UucnVsZXNbal07CiAgICAgICAgICBpZiAodGhpcy5ydWxlTWF0Y2hlc18ocnVsZSwgdXNlckFnZW50LCB3aWR0aCwgaGVpZ2h0KSkgewogICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghbWF0Y2hlZCkgY29udGludWU7CiAgICAgICAgdmFyIHhkcGkgPSBkZXZpY2UuZHBpWzBdIHx8IGRldmljZS5kcGk7CiAgICAgICAgdmFyIHlkcGkgPSBkZXZpY2UuZHBpWzFdIHx8IGRldmljZS5kcGk7CiAgICAgICAgcmV0dXJuIG5ldyBEZXZpY2VQYXJhbXMoeyB4ZHBpOiB4ZHBpLCB5ZHBpOiB5ZHBpLCBiZXZlbE1tOiBkZXZpY2UuYncgfSk7CiAgICAgIH0KICAgICAgY29uc29sZS53YXJuKCdObyBEUERCIGRldmljZSBtYXRjaC4nKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogICAgRHBkYi5wcm90b3R5cGUucnVsZU1hdGNoZXNfID0gZnVuY3Rpb24gKHJ1bGUsIHVhLCBzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KSB7CiAgICAgIGlmICghcnVsZS51YSAmJiAhcnVsZS5yZXMpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKHJ1bGUudWEgJiYgcnVsZS51YS5zdWJzdHJpbmcoMCwgMikgPT09ICdTTScpIHJ1bGUudWEgPSBydWxlLnVhLnN1YnN0cmluZygwLCA3KTsKICAgICAgaWYgKHJ1bGUudWEgJiYgdWEuaW5kZXhPZihydWxlLnVhKSA8IDApIHJldHVybiBmYWxzZTsKICAgICAgaWYgKHJ1bGUucmVzKSB7CiAgICAgICAgaWYgKCFydWxlLnJlc1swXSB8fCAhcnVsZS5yZXNbMV0pIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgcmVzWCA9IHJ1bGUucmVzWzBdOwogICAgICAgIHZhciByZXNZID0gcnVsZS5yZXNbMV07CiAgICAgICAgaWYgKE1hdGgubWluKHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpICE9IE1hdGgubWluKHJlc1gsIHJlc1kpIHx8IE1hdGgubWF4KHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpICE9IE1hdGgubWF4KHJlc1gsIHJlc1kpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfTsKICAgIGZ1bmN0aW9uIERldmljZVBhcmFtcyhwYXJhbXMpIHsKICAgICAgdGhpcy54ZHBpID0gcGFyYW1zLnhkcGk7CiAgICAgIHRoaXMueWRwaSA9IHBhcmFtcy55ZHBpOwogICAgICB0aGlzLmJldmVsTW0gPSBwYXJhbXMuYmV2ZWxNbTsKICAgIH0KICAgIGZ1bmN0aW9uIFNlbnNvclNhbXBsZShzYW1wbGUsIHRpbWVzdGFtcFMpIHsKICAgICAgdGhpcy5zZXQoc2FtcGxlLCB0aW1lc3RhbXBTKTsKICAgIH0KICAgIFNlbnNvclNhbXBsZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHNhbXBsZSwgdGltZXN0YW1wUykgewogICAgICB0aGlzLnNhbXBsZSA9IHNhbXBsZTsKICAgICAgdGhpcy50aW1lc3RhbXBTID0gdGltZXN0YW1wUzsKICAgIH07CiAgICBTZW5zb3JTYW1wbGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc2Vuc29yU2FtcGxlKSB7CiAgICAgIHRoaXMuc2V0KHNlbnNvclNhbXBsZS5zYW1wbGUsIHNlbnNvclNhbXBsZS50aW1lc3RhbXBTKTsKICAgIH07CiAgICBmdW5jdGlvbiBDb21wbGVtZW50YXJ5RmlsdGVyKGtGaWx0ZXIsIGlzRGVidWcpIHsKICAgICAgdGhpcy5rRmlsdGVyID0ga0ZpbHRlcjsKICAgICAgdGhpcy5pc0RlYnVnID0gaXNEZWJ1ZzsKICAgICAgdGhpcy5jdXJyZW50QWNjZWxNZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTsKICAgICAgdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50ID0gbmV3IFNlbnNvclNhbXBsZSgpOwogICAgICB0aGlzLnByZXZpb3VzR3lyb01lYXN1cmVtZW50ID0gbmV3IFNlbnNvclNhbXBsZSgpOwogICAgICBpZiAoaXNJT1MoKSkgewogICAgICAgIHRoaXMuZmlsdGVyUSA9IG5ldyBRdWF0ZXJuaW9uKC0xLCAwLCAwLCAxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmZpbHRlclEgPSBuZXcgUXVhdGVybmlvbigxLCAwLCAwLCAxKTsKICAgICAgfQogICAgICB0aGlzLnByZXZpb3VzRmlsdGVyUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5maWx0ZXJRKTsKICAgICAgdGhpcy5hY2NlbFEgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICB0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCA9IGZhbHNlOwogICAgICB0aGlzLmVzdGltYXRlZEdyYXZpdHkgPSBuZXcgVmVjdG9yMygpOwogICAgICB0aGlzLm1lYXN1cmVkR3Jhdml0eSA9IG5ldyBWZWN0b3IzKCk7CiAgICAgIHRoaXMuZ3lyb0ludGVncmFsUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICB9CiAgICBDb21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRBY2NlbE1lYXN1cmVtZW50ID0gZnVuY3Rpb24gKHZlY3RvciwgdGltZXN0YW1wUykgewogICAgICB0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpOwogICAgfTsKICAgIENvbXBsZW1lbnRhcnlGaWx0ZXIucHJvdG90eXBlLmFkZEd5cm9NZWFzdXJlbWVudCA9IGZ1bmN0aW9uICh2ZWN0b3IsIHRpbWVzdGFtcFMpIHsKICAgICAgdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpOwogICAgICB2YXIgZGVsdGFUID0gdGltZXN0YW1wUyAtIHRoaXMucHJldmlvdXNHeXJvTWVhc3VyZW1lbnQudGltZXN0YW1wUzsKICAgICAgaWYgKGlzVGltZXN0YW1wRGVsdGFWYWxpZChkZWx0YVQpKSB7CiAgICAgICAgdGhpcy5ydW5fKCk7CiAgICAgIH0KICAgICAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC5jb3B5KHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCk7CiAgICB9OwogICAgQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUucnVuXyA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCF0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCkgewogICAgICAgIHRoaXMuYWNjZWxRID0gdGhpcy5hY2NlbFRvUXVhdGVybmlvbl8odGhpcy5jdXJyZW50QWNjZWxNZWFzdXJlbWVudC5zYW1wbGUpOwogICAgICAgIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5hY2NlbFEpOwogICAgICAgIHRoaXMuaXNPcmllbnRhdGlvbkluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIGRlbHRhVCA9IHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTOwogICAgICB2YXIgZ3lyb0RlbHRhUSA9IHRoaXMuZ3lyb1RvUXVhdGVybmlvbkRlbHRhXyh0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQuc2FtcGxlLCBkZWx0YVQpOwogICAgICB0aGlzLmd5cm9JbnRlZ3JhbFEubXVsdGlwbHkoZ3lyb0RlbHRhUSk7CiAgICAgIHRoaXMuZmlsdGVyUS5jb3B5KHRoaXMucHJldmlvdXNGaWx0ZXJRKTsKICAgICAgdGhpcy5maWx0ZXJRLm11bHRpcGx5KGd5cm9EZWx0YVEpOwogICAgICB2YXIgaW52RmlsdGVyUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIGludkZpbHRlclEuY29weSh0aGlzLmZpbHRlclEpOwogICAgICBpbnZGaWx0ZXJRLmludmVyc2UoKTsKICAgICAgdGhpcy5lc3RpbWF0ZWRHcmF2aXR5LnNldCgwLCAwLCAtMSk7CiAgICAgIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS5hcHBseVF1YXRlcm5pb24oaW52RmlsdGVyUSk7CiAgICAgIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS5ub3JtYWxpemUoKTsKICAgICAgdGhpcy5tZWFzdXJlZEdyYXZpdHkuY29weSh0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50LnNhbXBsZSk7CiAgICAgIHRoaXMubWVhc3VyZWRHcmF2aXR5Lm5vcm1hbGl6ZSgpOwogICAgICB2YXIgZGVsdGFRID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgZGVsdGFRLnNldEZyb21Vbml0VmVjdG9ycyh0aGlzLmVzdGltYXRlZEdyYXZpdHksIHRoaXMubWVhc3VyZWRHcmF2aXR5KTsKICAgICAgZGVsdGFRLmludmVyc2UoKTsKICAgICAgaWYgKHRoaXMuaXNEZWJ1ZykgewogICAgICAgIGNvbnNvbGUubG9nKCdEZWx0YTogJWQgZGVnLCBHX2VzdDogKCVzLCAlcywgJXMpLCBHX21lYXM6ICglcywgJXMsICVzKScsIHJhZFRvRGVnICogZ2V0UXVhdGVybmlvbkFuZ2xlKGRlbHRhUSksIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS54LnRvRml4ZWQoMSksIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS55LnRvRml4ZWQoMSksIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS56LnRvRml4ZWQoMSksIHRoaXMubWVhc3VyZWRHcmF2aXR5LngudG9GaXhlZCgxKSwgdGhpcy5tZWFzdXJlZEdyYXZpdHkueS50b0ZpeGVkKDEpLCB0aGlzLm1lYXN1cmVkR3Jhdml0eS56LnRvRml4ZWQoMSkpOwogICAgICB9CiAgICAgIHZhciB0YXJnZXRRID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgdGFyZ2V0US5jb3B5KHRoaXMuZmlsdGVyUSk7CiAgICAgIHRhcmdldFEubXVsdGlwbHkoZGVsdGFRKTsKICAgICAgdGhpcy5maWx0ZXJRLnNsZXJwKHRhcmdldFEsIDEgLSB0aGlzLmtGaWx0ZXIpOwogICAgICB0aGlzLnByZXZpb3VzRmlsdGVyUS5jb3B5KHRoaXMuZmlsdGVyUSk7CiAgICB9OwogICAgQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUuZ2V0T3JpZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbHRlclE7CiAgICB9OwogICAgQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUuYWNjZWxUb1F1YXRlcm5pb25fID0gZnVuY3Rpb24gKGFjY2VsKSB7CiAgICAgIHZhciBub3JtQWNjZWwgPSBuZXcgVmVjdG9yMygpOwogICAgICBub3JtQWNjZWwuY29weShhY2NlbCk7CiAgICAgIG5vcm1BY2NlbC5ub3JtYWxpemUoKTsKICAgICAgdmFyIHF1YXQgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBxdWF0LnNldEZyb21Vbml0VmVjdG9ycyhuZXcgVmVjdG9yMygwLCAwLCAtMSksIG5vcm1BY2NlbCk7CiAgICAgIHF1YXQuaW52ZXJzZSgpOwogICAgICByZXR1cm4gcXVhdDsKICAgIH07CiAgICBDb21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5neXJvVG9RdWF0ZXJuaW9uRGVsdGFfID0gZnVuY3Rpb24gKGd5cm8sIGR0KSB7CiAgICAgIHZhciBxdWF0ID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgdmFyIGF4aXMgPSBuZXcgVmVjdG9yMygpOwogICAgICBheGlzLmNvcHkoZ3lybyk7CiAgICAgIGF4aXMubm9ybWFsaXplKCk7CiAgICAgIHF1YXQuc2V0RnJvbUF4aXNBbmdsZShheGlzLCBneXJvLmxlbmd0aCgpICogZHQpOwogICAgICByZXR1cm4gcXVhdDsKICAgIH07CiAgICBmdW5jdGlvbiBQb3NlUHJlZGljdG9yKHByZWRpY3Rpb25UaW1lUywgaXNEZWJ1ZykgewogICAgICB0aGlzLnByZWRpY3Rpb25UaW1lUyA9IHByZWRpY3Rpb25UaW1lUzsKICAgICAgdGhpcy5pc0RlYnVnID0gaXNEZWJ1ZzsKICAgICAgdGhpcy5wcmV2aW91c1EgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IG51bGw7CiAgICAgIHRoaXMuZGVsdGFRID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgdGhpcy5vdXRRID0gbmV3IFF1YXRlcm5pb24oKTsKICAgIH0KICAgIFBvc2VQcmVkaWN0b3IucHJvdG90eXBlLmdldFByZWRpY3Rpb24gPSBmdW5jdGlvbiAoY3VycmVudFEsIGd5cm8sIHRpbWVzdGFtcFMpIHsKICAgICAgaWYgKCF0aGlzLnByZXZpb3VzVGltZXN0YW1wUykgewogICAgICAgIHRoaXMucHJldmlvdXNRLmNvcHkoY3VycmVudFEpOwogICAgICAgIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUzsKICAgICAgICByZXR1cm4gY3VycmVudFE7CiAgICAgIH0KICAgICAgdmFyIGF4aXMgPSBuZXcgVmVjdG9yMygpOwogICAgICBheGlzLmNvcHkoZ3lybyk7CiAgICAgIGF4aXMubm9ybWFsaXplKCk7CiAgICAgIHZhciBhbmd1bGFyU3BlZWQgPSBneXJvLmxlbmd0aCgpOwogICAgICBpZiAoYW5ndWxhclNwZWVkIDwgZGVnVG9SYWQgKiAyMCkgewogICAgICAgIGlmICh0aGlzLmlzRGVidWcpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdNb3Zpbmcgc2xvd2x5LCBhdCAlcyBkZWcvczogbm8gcHJlZGljdGlvbicsIChyYWRUb0RlZyAqIGFuZ3VsYXJTcGVlZCkudG9GaXhlZCgxKSk7CiAgICAgICAgfQogICAgICAgIHRoaXMub3V0US5jb3B5KGN1cnJlbnRRKTsKICAgICAgICB0aGlzLnByZXZpb3VzUS5jb3B5KGN1cnJlbnRRKTsKICAgICAgICByZXR1cm4gdGhpcy5vdXRROwogICAgICB9CiAgICAgIHZhciBwcmVkaWN0QW5nbGUgPSBhbmd1bGFyU3BlZWQgKiB0aGlzLnByZWRpY3Rpb25UaW1lUzsKICAgICAgdGhpcy5kZWx0YVEuc2V0RnJvbUF4aXNBbmdsZShheGlzLCBwcmVkaWN0QW5nbGUpOwogICAgICB0aGlzLm91dFEuY29weSh0aGlzLnByZXZpb3VzUSk7CiAgICAgIHRoaXMub3V0US5tdWx0aXBseSh0aGlzLmRlbHRhUSk7CiAgICAgIHRoaXMucHJldmlvdXNRLmNvcHkoY3VycmVudFEpOwogICAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7CiAgICAgIHJldHVybiB0aGlzLm91dFE7CiAgICB9OwogICAgZnVuY3Rpb24gRnVzaW9uUG9zZVNlbnNvcihrRmlsdGVyLCBwcmVkaWN0aW9uVGltZSwgeWF3T25seSwgaXNEZWJ1ZykgewogICAgICB0aGlzLnlhd09ubHkgPSB5YXdPbmx5OwogICAgICB0aGlzLmFjY2VsZXJvbWV0ZXIgPSBuZXcgVmVjdG9yMygpOwogICAgICB0aGlzLmd5cm9zY29wZSA9IG5ldyBWZWN0b3IzKCk7CiAgICAgIHRoaXMuZmlsdGVyID0gbmV3IENvbXBsZW1lbnRhcnlGaWx0ZXIoa0ZpbHRlciwgaXNEZWJ1Zyk7CiAgICAgIHRoaXMucG9zZVByZWRpY3RvciA9IG5ldyBQb3NlUHJlZGljdG9yKHByZWRpY3Rpb25UaW1lLCBpc0RlYnVnKTsKICAgICAgdGhpcy5pc0ZpcmVmb3hBbmRyb2lkID0gaXNGaXJlZm94QW5kcm9pZCgpOwogICAgICB0aGlzLmlzSU9TID0gaXNJT1MoKTsKICAgICAgdmFyIGNocm9tZVZlcnNpb24gPSBnZXRDaHJvbWVWZXJzaW9uKCk7CiAgICAgIHRoaXMuaXNEZXZpY2VNb3Rpb25JblJhZGlhbnMgPSAhdGhpcy5pc0lPUyAmJiBjaHJvbWVWZXJzaW9uICYmIGNocm9tZVZlcnNpb24gPCA2NjsKICAgICAgdGhpcy5pc1dpdGhvdXREZXZpY2VNb3Rpb24gPSBpc0Nocm9tZVdpdGhvdXREZXZpY2VNb3Rpb24oKSB8fCBpc1NhZmFyaVdpdGhvdXREZXZpY2VNb3Rpb24oKTsKICAgICAgdGhpcy5maWx0ZXJUb1dvcmxkUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIGlmIChpc0lPUygpKSB7CiAgICAgICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDEsIDAsIDApLCBNYXRoLlBJIC8gMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDEsIDAsIDApLCAtTWF0aC5QSSAvIDIpOwogICAgICB9CiAgICAgIHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgdGhpcy53b3JsZFRvU2NyZWVuUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHRoaXMub3JpZ2luYWxQb3NlQWRqdXN0USA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHRoaXMub3JpZ2luYWxQb3NlQWRqdXN0US5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDAsIDEpLCAtd2luZG93Lm9yaWVudGF0aW9uICogTWF0aC5QSSAvIDE4MCk7CiAgICAgIHRoaXMuc2V0U2NyZWVuVHJhbnNmb3JtXygpOwogICAgICBpZiAoaXNMYW5kc2NhcGVNb2RlKCkpIHsKICAgICAgICB0aGlzLmZpbHRlclRvV29ybGRRLm11bHRpcGx5KHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RKTsKICAgICAgfQogICAgICB0aGlzLnJlc2V0USA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHRoaXMub3JpZW50YXRpb25PdXRfID0gbmV3IEZsb2F0MzJBcnJheSg0KTsKICAgICAgdGhpcy5zdGFydCgpOwogICAgfQogICAgRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfTsKICAgIEZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLmdldE9yaWVudGF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgb3JpZW50YXRpb24gPSB2b2lkIDA7CiAgICAgIGlmICh0aGlzLmlzV2l0aG91dERldmljZU1vdGlvbiAmJiB0aGlzLl9kZXZpY2VPcmllbnRhdGlvblEpIHsKICAgICAgICB0aGlzLmRldmljZU9yaWVudGF0aW9uRml4USA9IHRoaXMuZGV2aWNlT3JpZW50YXRpb25GaXhRIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciB6ID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDAsIC0xKSwgMCk7CiAgICAgICAgICB2YXIgeSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgICAgICBpZiAod2luZG93Lm9yaWVudGF0aW9uID09PSAtOTApIHsKICAgICAgICAgICAgeS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDEsIDApLCBNYXRoLlBJIC8gLTIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgeS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDEsIDApLCBNYXRoLlBJIC8gMik7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gei5tdWx0aXBseSh5KTsKICAgICAgICB9KCk7CiAgICAgICAgdGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpbHRlclRvV29ybGRRID0gdGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpbHRlclRvV29ybGRRIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBxID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgICAgIHEuc2V0RnJvbUF4aXNBbmdsZShuZXcgVmVjdG9yMygxLCAwLCAwKSwgLU1hdGguUEkgLyAyKTsKICAgICAgICAgIHJldHVybiBxOwogICAgICAgIH0oKTsKICAgICAgICBvcmllbnRhdGlvbiA9IHRoaXMuX2RldmljZU9yaWVudGF0aW9uUTsKICAgICAgICB2YXIgb3V0ID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgICBvdXQuY29weShvcmllbnRhdGlvbik7CiAgICAgICAgb3V0Lm11bHRpcGx5KHRoaXMuZGV2aWNlT3JpZW50YXRpb25GaWx0ZXJUb1dvcmxkUSk7CiAgICAgICAgb3V0Lm11bHRpcGx5KHRoaXMucmVzZXRRKTsKICAgICAgICBvdXQubXVsdGlwbHkodGhpcy53b3JsZFRvU2NyZWVuUSk7CiAgICAgICAgb3V0Lm11bHRpcGx5UXVhdGVybmlvbnModGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpeFEsIG91dCk7CiAgICAgICAgaWYgKHRoaXMueWF3T25seSkgewogICAgICAgICAgb3V0LnggPSAwOwogICAgICAgICAgb3V0LnogPSAwOwogICAgICAgICAgb3V0Lm5vcm1hbGl6ZSgpOwogICAgICAgIH0KICAgICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IG91dC54OwogICAgICAgIHRoaXMub3JpZW50YXRpb25PdXRfWzFdID0gb3V0Lnk7CiAgICAgICAgdGhpcy5vcmllbnRhdGlvbk91dF9bMl0gPSBvdXQuejsKICAgICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IG91dC53OwogICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uT3V0XzsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgZmlsdGVyT3JpZW50YXRpb24gPSB0aGlzLmZpbHRlci5nZXRPcmllbnRhdGlvbigpOwogICAgICAgIG9yaWVudGF0aW9uID0gdGhpcy5wb3NlUHJlZGljdG9yLmdldFByZWRpY3Rpb24oZmlsdGVyT3JpZW50YXRpb24sIHRoaXMuZ3lyb3Njb3BlLCB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyk7CiAgICAgIH0KICAgICAgdmFyIG91dCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIG91dC5jb3B5KHRoaXMuZmlsdGVyVG9Xb3JsZFEpOwogICAgICBvdXQubXVsdGlwbHkodGhpcy5yZXNldFEpOwogICAgICBvdXQubXVsdGlwbHkob3JpZW50YXRpb24pOwogICAgICBvdXQubXVsdGlwbHkodGhpcy53b3JsZFRvU2NyZWVuUSk7CiAgICAgIGlmICh0aGlzLnlhd09ubHkpIHsKICAgICAgICBvdXQueCA9IDA7CiAgICAgICAgb3V0LnogPSAwOwogICAgICAgIG91dC5ub3JtYWxpemUoKTsKICAgICAgfQogICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IG91dC54OwogICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1sxXSA9IG91dC55OwogICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1syXSA9IG91dC56OwogICAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IG91dC53OwogICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbk91dF87CiAgICB9OwogICAgRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUucmVzZXRQb3NlID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLnJlc2V0US5jb3B5KHRoaXMuZmlsdGVyLmdldE9yaWVudGF0aW9uKCkpOwogICAgICB0aGlzLnJlc2V0US54ID0gMDsKICAgICAgdGhpcy5yZXNldFEueSA9IDA7CiAgICAgIHRoaXMucmVzZXRRLnogKj0gLTE7CiAgICAgIHRoaXMucmVzZXRRLm5vcm1hbGl6ZSgpOwogICAgICBpZiAoaXNMYW5kc2NhcGVNb2RlKCkpIHsKICAgICAgICB0aGlzLnJlc2V0US5tdWx0aXBseSh0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUSk7CiAgICAgIH0KICAgICAgdGhpcy5yZXNldFEubXVsdGlwbHkodGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRKTsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbkRldmljZU9yaWVudGF0aW9uXyA9IGZ1bmN0aW9uIChlKSB7CiAgICAgIHRoaXMuX2RldmljZU9yaWVudGF0aW9uUSA9IHRoaXMuX2RldmljZU9yaWVudGF0aW9uUSB8fCBuZXcgUXVhdGVybmlvbigpOwogICAgICB2YXIgYWxwaGEgPSBlLmFscGhhLAogICAgICAgICAgYmV0YSA9IGUuYmV0YSwKICAgICAgICAgIGdhbW1hID0gZS5nYW1tYTsKICAgICAgYWxwaGEgPSAoYWxwaGEgfHwgMCkgKiBNYXRoLlBJIC8gMTgwOwogICAgICBiZXRhID0gKGJldGEgfHwgMCkgKiBNYXRoLlBJIC8gMTgwOwogICAgICBnYW1tYSA9IChnYW1tYSB8fCAwKSAqIE1hdGguUEkgLyAxODA7CiAgICAgIHRoaXMuX2RldmljZU9yaWVudGF0aW9uUS5zZXRGcm9tRXVsZXJZWFooYmV0YSwgYWxwaGEsIC1nYW1tYSk7CiAgICB9OwogICAgRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25EZXZpY2VNb3Rpb25fID0gZnVuY3Rpb24gKGRldmljZU1vdGlvbikgewogICAgICB0aGlzLnVwZGF0ZURldmljZU1vdGlvbl8oZGV2aWNlTW90aW9uKTsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS51cGRhdGVEZXZpY2VNb3Rpb25fID0gZnVuY3Rpb24gKGRldmljZU1vdGlvbikgewogICAgICB2YXIgYWNjR3Jhdml0eSA9IGRldmljZU1vdGlvbi5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5OwogICAgICB2YXIgcm90UmF0ZSA9IGRldmljZU1vdGlvbi5yb3RhdGlvblJhdGU7CiAgICAgIHZhciB0aW1lc3RhbXBTID0gZGV2aWNlTW90aW9uLnRpbWVTdGFtcCAvIDEwMDA7CiAgICAgIHZhciBkZWx0YVMgPSB0aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c1RpbWVzdGFtcFM7CiAgICAgIGlmIChkZWx0YVMgPCAwKSB7CiAgICAgICAgd2Fybk9uY2UoJ2Z1c2lvbi1wb3NlLXNlbnNvcjppbnZhbGlkOm5vbi1tb25vdG9uaWMnLCAnSW52YWxpZCB0aW1lc3RhbXBzIGRldGVjdGVkOiBub24tbW9ub3RvbmljIHRpbWVzdGFtcCBmcm9tIGRldmljZW1vdGlvbicpOwogICAgICAgIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUzsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAoZGVsdGFTIDw9IE1JTl9USU1FU1RFUCB8fCBkZWx0YVMgPiBNQVhfVElNRVNURVApIHsKICAgICAgICB3YXJuT25jZSgnZnVzaW9uLXBvc2Utc2Vuc29yOmludmFsaWQ6b3V0c2lkZS10aHJlc2hvbGQnLCAnSW52YWxpZCB0aW1lc3RhbXBzIGRldGVjdGVkOiBUaW1lc3RhbXAgZnJvbSBkZXZpY2Vtb3Rpb24gb3V0c2lkZSBleHBlY3RlZCByYW5nZS4nKTsKICAgICAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuYWNjZWxlcm9tZXRlci5zZXQoLWFjY0dyYXZpdHkueCwgLWFjY0dyYXZpdHkueSwgLWFjY0dyYXZpdHkueik7CiAgICAgIGlmIChyb3RSYXRlKSB7CiAgICAgICAgaWYgKGlzUjcoKSkgewogICAgICAgICAgdGhpcy5neXJvc2NvcGUuc2V0KC1yb3RSYXRlLmJldGEsIHJvdFJhdGUuYWxwaGEsIHJvdFJhdGUuZ2FtbWEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmd5cm9zY29wZS5zZXQocm90UmF0ZS5hbHBoYSwgcm90UmF0ZS5iZXRhLCByb3RSYXRlLmdhbW1hKTsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzRGV2aWNlTW90aW9uSW5SYWRpYW5zKSB7CiAgICAgICAgICB0aGlzLmd5cm9zY29wZS5tdWx0aXBseVNjYWxhcihNYXRoLlBJIC8gMTgwKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5maWx0ZXIuYWRkR3lyb01lYXN1cmVtZW50KHRoaXMuZ3lyb3Njb3BlLCB0aW1lc3RhbXBTKTsKICAgICAgfQogICAgICB0aGlzLmZpbHRlci5hZGRBY2NlbE1lYXN1cmVtZW50KHRoaXMuYWNjZWxlcm9tZXRlciwgdGltZXN0YW1wUyk7CiAgICAgIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUzsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbk9yaWVudGF0aW9uQ2hhbmdlXyA9IGZ1bmN0aW9uIChzY3JlZW5PcmllbnRhdGlvbikgewogICAgICB0aGlzLnNldFNjcmVlblRyYW5zZm9ybV8oKTsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbk1lc3NhZ2VfID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHZhciBtZXNzYWdlID0gZXZlbnQuZGF0YTsKICAgICAgaWYgKCFtZXNzYWdlIHx8ICFtZXNzYWdlLnR5cGUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHR5cGUgPSBtZXNzYWdlLnR5cGUudG9Mb3dlckNhc2UoKTsKICAgICAgaWYgKHR5cGUgIT09ICdkZXZpY2Vtb3Rpb24nKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMudXBkYXRlRGV2aWNlTW90aW9uXyhtZXNzYWdlLmRldmljZU1vdGlvbkV2ZW50KTsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5zZXRTY3JlZW5UcmFuc2Zvcm1fID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldCgwLCAwLCAwLCAxKTsKICAgICAgc3dpdGNoICh3aW5kb3cub3JpZW50YXRpb24pIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDkwOgogICAgICAgICAgdGhpcy53b3JsZFRvU2NyZWVuUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDAsIDEpLCAtTWF0aC5QSSAvIDIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAtOTA6CiAgICAgICAgICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldEZyb21BeGlzQW5nbGUobmV3IFZlY3RvcjMoMCwgMCwgMSksIE1hdGguUEkgLyAyKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RLmNvcHkodGhpcy53b3JsZFRvU2NyZWVuUSk7CiAgICAgIHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RLmludmVyc2UoKTsKICAgIH07CiAgICBGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5vbkRldmljZU1vdGlvbkNhbGxiYWNrXyA9IHRoaXMub25EZXZpY2VNb3Rpb25fLmJpbmQodGhpcyk7CiAgICAgIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrXyA9IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKTsKICAgICAgdGhpcy5vbk1lc3NhZ2VDYWxsYmFja18gPSB0aGlzLm9uTWVzc2FnZV8uYmluZCh0aGlzKTsKICAgICAgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQ2FsbGJhY2tfID0gdGhpcy5vbkRldmljZU9yaWVudGF0aW9uXy5iaW5kKHRoaXMpOwogICAgICBpZiAoaXNJT1MoKSAmJiBpc0luc2lkZUNyb3NzT3JpZ2luSUZyYW1lKCkpIHsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub25NZXNzYWdlQ2FsbGJhY2tfKTsKICAgICAgfQogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFja18pOwogICAgICBpZiAodGhpcy5pc1dpdGhvdXREZXZpY2VNb3Rpb24pIHsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb24nLCB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25DYWxsYmFja18pOwogICAgICB9IGVsc2UgewogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2Vtb3Rpb24nLCB0aGlzLm9uRGV2aWNlTW90aW9uQ2FsbGJhY2tfKTsKICAgICAgfQogICAgfTsKICAgIEZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdkZXZpY2Vtb3Rpb24nLCB0aGlzLm9uRGV2aWNlTW90aW9uQ2FsbGJhY2tfKTsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RldmljZW9yaWVudGF0aW9uJywgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQ2FsbGJhY2tfKTsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlQ2FsbGJhY2tfKTsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLm9uTWVzc2FnZUNhbGxiYWNrXyk7CiAgICB9OwogICAgdmFyIFNFTlNPUl9GUkVRVUVOQ1kgPSA2MDsKICAgIHZhciBYX0FYSVMgPSBuZXcgVmVjdG9yMygxLCAwLCAwKTsKICAgIHZhciBaX0FYSVMgPSBuZXcgVmVjdG9yMygwLCAwLCAxKTsKICAgIHZhciBTRU5TT1JfVE9fVlIgPSBuZXcgUXVhdGVybmlvbigpOwogICAgU0VOU09SX1RPX1ZSLnNldEZyb21BeGlzQW5nbGUoWF9BWElTLCAtTWF0aC5QSSAvIDIpOwogICAgU0VOU09SX1RPX1ZSLm11bHRpcGx5KG5ldyBRdWF0ZXJuaW9uKCkuc2V0RnJvbUF4aXNBbmdsZShaX0FYSVMsIE1hdGguUEkgLyAyKSk7CiAgICB2YXIgUG9zZVNlbnNvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gUG9zZVNlbnNvcihjb25maWcpIHsKICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3NlU2Vuc29yKTsKICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZzsKICAgICAgICB0aGlzLnNlbnNvciA9IG51bGw7CiAgICAgICAgdGhpcy5mdXNpb25TZW5zb3IgPSBudWxsOwogICAgICAgIHRoaXMuX291dCA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7CiAgICAgICAgdGhpcy5hcGkgPSBudWxsOwogICAgICAgIHRoaXMuZXJyb3JzID0gW107CiAgICAgICAgdGhpcy5fc2Vuc29yUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgICAgdGhpcy5fb3V0USA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgICAgdGhpcy5fb25TZW5zb3JSZWFkID0gdGhpcy5fb25TZW5zb3JSZWFkLmJpbmQodGhpcyk7CiAgICAgICAgdGhpcy5fb25TZW5zb3JFcnJvciA9IHRoaXMuX29uU2Vuc29yRXJyb3IuYmluZCh0aGlzKTsKICAgICAgICB0aGlzLmluaXQoKTsKICAgICAgfQogICAgICBjcmVhdGVDbGFzcyhQb3NlU2Vuc29yLCBbewogICAgICAgIGtleTogJ2luaXQnLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICAgICAgdmFyIHNlbnNvciA9IG51bGw7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBzZW5zb3IgPSBuZXcgUmVsYXRpdmVPcmllbnRhdGlvblNlbnNvcih7CiAgICAgICAgICAgICAgZnJlcXVlbmN5OiBTRU5TT1JfRlJFUVVFTkNZLAogICAgICAgICAgICAgIHJlZmVyZW5jZUZyYW1lOiAnc2NyZWVuJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc2Vuc29yLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fb25TZW5zb3JFcnJvcik7CiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVycm9yKTsKICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdTZWN1cml0eUVycm9yJykgewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3Qgc2Vuc29ycyBkdWUgdG8gdGhlIEZlYXR1cmUgUG9saWN5Jyk7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdBdHRlbXB0aW5nIHRvIGZhbGwgYmFjayB1c2luZyAiZGV2aWNlbW90aW9uIjsgaG93ZXZlciB0aGlzIHdpbGwgJyArICdmYWlsIGluIHRoZSBmdXR1cmUgd2l0aG91dCBjb3JyZWN0IHBlcm1pc3Npb25zLicpOwogICAgICAgICAgICAgIHRoaXMudXNlRGV2aWNlTW90aW9uKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IubmFtZSA9PT0gJ1JlZmVyZW5jZUVycm9yJykgewogICAgICAgICAgICAgIHRoaXMudXNlRGV2aWNlTW90aW9uKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZW5zb3IpIHsKICAgICAgICAgICAgdGhpcy5hcGkgPSAnc2Vuc29yJzsKICAgICAgICAgICAgdGhpcy5zZW5zb3IgPSBzZW5zb3I7CiAgICAgICAgICAgIHRoaXMuc2Vuc29yLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWRpbmcnLCB0aGlzLl9vblNlbnNvclJlYWQpOwogICAgICAgICAgICB0aGlzLnNlbnNvci5zdGFydCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGtleTogJ3VzZURldmljZU1vdGlvbicsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVzZURldmljZU1vdGlvbigpIHsKICAgICAgICAgIHRoaXMuYXBpID0gJ2RldmljZW1vdGlvbic7CiAgICAgICAgICB0aGlzLmZ1c2lvblNlbnNvciA9IG5ldyBGdXNpb25Qb3NlU2Vuc29yKHRoaXMuY29uZmlnLktfRklMVEVSLCB0aGlzLmNvbmZpZy5QUkVESUNUSU9OX1RJTUVfUywgdGhpcy5jb25maWcuWUFXX09OTFksIHRoaXMuY29uZmlnLkRFQlVHKTsKICAgICAgICAgIGlmICh0aGlzLnNlbnNvcikgewogICAgICAgICAgICB0aGlzLnNlbnNvci5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkaW5nJywgdGhpcy5fb25TZW5zb3JSZWFkKTsKICAgICAgICAgICAgdGhpcy5zZW5zb3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vblNlbnNvckVycm9yKTsKICAgICAgICAgICAgdGhpcy5zZW5zb3IgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGtleTogJ2dldE9yaWVudGF0aW9uJywKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oKSB7CiAgICAgICAgICBpZiAodGhpcy5mdXNpb25TZW5zb3IpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVzaW9uU2Vuc29yLmdldE9yaWVudGF0aW9uKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXRoaXMuc2Vuc29yIHx8ICF0aGlzLnNlbnNvci5xdWF0ZXJuaW9uKSB7CiAgICAgICAgICAgIHRoaXMuX291dFswXSA9IHRoaXMuX291dFsxXSA9IHRoaXMuX291dFsyXSA9IDA7CiAgICAgICAgICAgIHRoaXMuX291dFszXSA9IDE7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vdXQ7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcSA9IHRoaXMuc2Vuc29yLnF1YXRlcm5pb247CiAgICAgICAgICB0aGlzLl9zZW5zb3JRLnNldChxWzBdLCBxWzFdLCBxWzJdLCBxWzNdKTsKICAgICAgICAgIHZhciBvdXQgPSB0aGlzLl9vdXRROwogICAgICAgICAgb3V0LmNvcHkoU0VOU09SX1RPX1ZSKTsKICAgICAgICAgIG91dC5tdWx0aXBseSh0aGlzLl9zZW5zb3JRKTsKICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5ZQVdfT05MWSkgewogICAgICAgICAgICBvdXQueCA9IG91dC56ID0gMDsKICAgICAgICAgICAgb3V0Lm5vcm1hbGl6ZSgpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5fb3V0WzBdID0gb3V0Lng7CiAgICAgICAgICB0aGlzLl9vdXRbMV0gPSBvdXQueTsKICAgICAgICAgIHRoaXMuX291dFsyXSA9IG91dC56OwogICAgICAgICAgdGhpcy5fb3V0WzNdID0gb3V0Lnc7CiAgICAgICAgICByZXR1cm4gdGhpcy5fb3V0OwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGtleTogJ19vblNlbnNvckVycm9yJywKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uU2Vuc29yRXJyb3IoZXZlbnQpIHsKICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXZlbnQuZXJyb3IpOwogICAgICAgICAgaWYgKGV2ZW50LmVycm9yLm5hbWUgPT09ICdOb3RBbGxvd2VkRXJyb3InKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Blcm1pc3Npb24gdG8gYWNjZXNzIHNlbnNvciB3YXMgZGVuaWVkJyk7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmVycm9yLm5hbWUgPT09ICdOb3RSZWFkYWJsZUVycm9yJykgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTZW5zb3IgY291bGQgbm90IGJlIHJlYWQnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXZlbnQuZXJyb3IpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy51c2VEZXZpY2VNb3Rpb24oKTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBrZXk6ICdfb25TZW5zb3JSZWFkJywKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uU2Vuc29yUmVhZCgpIHt9CiAgICAgIH1dKTsKICAgICAgcmV0dXJuIFBvc2VTZW5zb3I7CiAgICB9KCk7CiAgICB2YXIgcm90YXRlSW5zdHJ1Y3Rpb25zQXNzZXQgPSAiPHN2ZyB3aWR0aD0nMTk4JyBoZWlnaHQ9JzI0MCcgdmlld0JveD0nMCAwIDE5OCAyNDAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc+PGcgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJz48cGF0aCBkPSdNMTQ5LjYyNSAxMDkuNTI3bDYuNzM3IDMuODkxdi44ODZjMCAuMTc3LjAxMy4zNi4wMzguNTQ5LjAxLjA4MS4wMi4xNjIuMDI3LjI0Mi4xNCAxLjQxNS45NzQgMi45OTggMi4xMDUgMy45OTlsNS43MiA1LjA2Mi4wODEtLjA5czQuMzgyLTIuNTMgNS4yMzUtMy4wMjRsMjUuOTcgMTQuOTkzdjU0LjAwMWMwIC43NzEtLjM4NiAxLjIxNy0uOTQ4IDEuMjE3LS4yMzMgMC0uNDk1LS4wNzYtLjc3Mi0uMjM2bC0yMy45NjctMTMuODM4LS4wMTQuMDI0LTI3LjMyMiAxNS43NzUtLjg1LTEuMzIzYy00LjczMS0xLjUyOS05Ljc0OC0yLjc0LTE0Ljk1MS0zLjYxYS4yNy4yNyAwIDAgMC0uMDA3LjAyNGwtNS4wNjcgMTYuOTYxLTcuODkxIDQuNTU2LS4wMzctLjA2M3YyNy41OWMwIC43NzItLjM4NiAxLjIxNy0uOTQ4IDEuMjE3LS4yMzIgMC0uNDk1LS4wNzYtLjc3Mi0uMjM2bC00Mi40NzMtMjQuNTIyYy0uOTUtLjU0OS0xLjcyLTEuODc3LTEuNzItMi45Njd2LTEuMDM1bC0uMDIxLjA0N2E1LjExMSA1LjExMSAwIDAgMC0xLjgxNi0uMzk5IDUuNjgyIDUuNjgyIDAgMCAwLS41NDYuMDAxIDEzLjcyNCAxMy43MjQgMCAwIDEtMS45MTgtLjA0MWMtMS42NTUtLjE1My0zLjItLjYtNC40MDQtMS4yOTZsLTQ2LjU3Ni0yNi44OS4wMDUuMDEyLTEwLjI3OC0xOC43NWMtMS4wMDEtMS44MjctLjI0MS00LjIxNiAxLjY5OC01LjMzNmw1Ni4wMTEtMzIuMzQ1YTQuMTk0IDQuMTk0IDAgMCAxIDIuMDk5LS41NzJjMS4zMjYgMCAyLjU3Mi42NTkgMy4yMjcgMS44NTNsLjAwNS0uMDAzLjIyNy40MTMtLjAwNi4wMDRhOS42MyA5LjYzIDAgMCAwIDEuNDc3IDIuMDE4bC4yNzcuMjdjMS45MTQgMS44NSA0LjQ2OCAyLjgwMSA3LjExMyAyLjgwMSAxLjk0OSAwIDMuOTQ4LS41MTcgNS43NzUtMS41NzIuMDEzIDAgNy4zMTktNC4yMTkgNy4zMTktNC4yMTlhNC4xOTQgNC4xOTQgMCAwIDEgMi4wOTktLjU3MmMxLjMyNiAwIDIuNTcyLjY1OCAzLjIyNiAxLjg1M2wzLjI1IDUuOTI4LjAyMi0uMDE4IDYuNzg1IDMuOTE3LS4xMDUtLjE4MiA0Ni44ODEtMjYuOTY1bTAtMS42MzVjLS4yODIgMC0uNTYzLjA3My0uODE1LjIxOGwtNDYuMTY5IDI2LjU1Ni01LjQxLTMuMTI0LTMuMDA1LTUuNDgxYy0uOTEzLTEuNjY3LTIuNjk5LTIuNzAyLTQuNjYtMi43MDMtMS4wMTEgMC0yLjAyLjI3NC0yLjkxNy43OTJhMzgyNSAzODI1IDAgMCAxLTcuMjc1IDQuMTk1bC0uMDQ0LjAyNGE5LjkzNyA5LjkzNyAwIDAgMS00Ljk1NyAxLjM1M2MtMi4yOTIgMC00LjQxNC0uODMyLTUuOTc2LTIuMzQybC0uMjUyLS4yNDVhNy45OTIgNy45OTIgMCAwIDEtMS4xMzktMS41MzQgMS4zNzkgMS4zNzkgMCAwIDAtLjA2LS4xMjJsLS4yMjctLjQxNGExLjcxOCAxLjcxOCAwIDAgMC0uMDk1LS4xNTRjLS45MzgtMS41NzQtMi42NzMtMi41NDUtNC41NzEtMi41NDUtMS4wMTEgMC0yLjAyLjI3NC0yLjkxNy43OTJMMy4xMjUgMTU1LjUwMmMtMi42OTkgMS41NTktMy43MzggNC45NC0yLjMxNCA3LjUzOGwxMC4yNzggMTguNzVjLjE3Ny4zMjMuNDQ4LjU2My43NjEuNzA0bDQ2LjQyNiAyNi44MDRjMS40MDMuODEgMy4xNTcgMS4zMzIgNS4wNzIgMS41MDhhMTUuNjYxIDE1LjY2MSAwIDAgMCAyLjE0Ni4wNDYgNC43NjYgNC43NjYgMCAwIDEgLjM5NiAwYy4wOTYuMDA0LjE5LjAxMS4yODMuMDIyLjEwOSAxLjU5MyAxLjE1OSAzLjMyMyAyLjUyOSA0LjExNGw0Mi40NzIgMjQuNTIyYy41MjQuMzAyIDEuMDU4LjQ1NSAxLjU5LjQ1NSAxLjQ5NyAwIDIuNTgzLTEuMiAyLjU4My0yLjg1MnYtMjYuNTYybDcuMTExLTQuMTA1YTEuNjQgMS42NCAwIDAgMCAuNzQ5LS45NDhsNC42NTgtMTUuNTkzYzQuNDE0Ljc5NyA4LjY5MiAxLjg0OCAxMi43NDIgMy4xMjhsLjUzMy44MjlhMS42MzQgMS42MzQgMCAwIDAgMi4xOTMuNTMxbDI2LjUzMi0xNS4zMTdMMTkzIDE5Mi40MzNjLjUyMy4zMDIgMS4wNTguNDU1IDEuNTkuNDU1IDEuNDk3IDAgMi41ODMtMS4xOTkgMi41ODMtMi44NTJ2LTU0LjAwMWMwLS41ODQtLjMxMi0xLjEyNC0uODE4LTEuNDE2bC0yNS45Ny0xNC45OTNhMS42MzMgMS42MzMgMCAwIDAtMS42MzYuMDAxYy0uNjA2LjM1MS0yLjk5MyAxLjczLTQuMzI1IDIuNDk4bC00LjgwOS00LjI1NWMtLjgxOS0uNzI1LTEuNDYxLTEuOTMzLTEuNTYxLTIuOTM2YTcuNzc2IDcuNzc2IDAgMCAwLS4wMzMtLjI5NCAyLjQ4NyAyLjQ4NyAwIDAgMS0uMDIzLS4zMzZ2LS44ODZjMC0uNTg0LS4zMTItMS4xMjMtLjgxNy0xLjQxNmwtNi43MzktMy44OTFhMS42MzMgMS42MzMgMCAwIDAtLjgxNy0uMjE5JyBmaWxsPScjNDU1QTY0Jy8+PHBhdGggZD0nTTk2LjAyNyAxMzIuNjM2bDQ2LjU3NiAyNi44OTFjMS4yMDQuNjk1IDEuOTc5IDEuNTg3IDIuMjQyIDIuNTQxbC0uMDEuMDA3LTgxLjM3NCA0Ni45ODJoLS4wMDFjLTEuNjU0LS4xNTItMy4xOTktLjYtNC40MDMtMS4yOTVsLTQ2LjU3Ni0yNi44OTEgODMuNTQ2LTQ4LjIzNScgZmlsbD0nI0ZBRkFGQScvPjxwYXRoIGQ9J002My40NjEgMjA5LjE3NGMtLjAwOCAwLS4wMTUgMC0uMDIyLS4wMDItMS42OTMtLjE1Ni0zLjIyOC0uNjA5LTQuNDQxLTEuMzA5bC00Ni41NzYtMjYuODlhLjExOC4xMTggMCAwIDEgMC0uMjAzbDgzLjU0Ni00OC4yMzVhLjExNy4xMTcgMCAwIDEgLjExNyAwbDQ2LjU3NiAyNi44OTFjMS4yMjcuNzA4IDIuMDIxIDEuNjEyIDIuMjk2IDIuNjExYS4xMTYuMTE2IDAgMCAxLS4wNDIuMTI0bC0uMDIxLjAxNi04MS4zNzUgNDYuOTgxYS4xMS4xMSAwIDAgMS0uMDU4LjAxNnptLTUwLjc0Ny0yOC4zMDNsNDYuNDAxIDI2Ljc5YzEuMTc4LjY4IDIuNjcxIDEuMTIxIDQuMzIgMS4yNzZsODEuMjcyLTQ2LjkyMmMtLjI3OS0uOTA3LTEuMDI1LTEuNzMtMi4xNjMtMi4zODdsLTQ2LjUxNy0yNi44NTctODMuMzEzIDQ4LjF6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE0OC4zMjcgMTY1LjQ3MWE1Ljg1IDUuODUgMCAwIDEtLjU0Ni4wMDFjLTEuODk0LS4wODMtMy4zMDItMS4wMzgtMy4xNDUtMi4xMzJhMi42OTMgMi42OTMgMCAwIDAtLjA3Mi0xLjEwNWwtODEuMTAzIDQ2LjgyMmMuNjI4LjA1OCAxLjI3Mi4wNzMgMS45MTguMDQyLjE4Mi0uMDA5LjM2NC0uMDA5LjU0Ni0uMDAxIDEuODk0LjA4MyAzLjMwMiAxLjAzOCAzLjE0NSAyLjEzMmw3OS4yNTctNDUuNzU5JyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTY5LjA3IDIxMS4zNDdhLjExOC4xMTggMCAwIDEtLjExNS0uMTM0Yy4wNDUtLjMxNy0uMDU3LS42MzctLjI5Ny0uOTI1LS41MDUtLjYxLTEuNTU1LTEuMDIyLTIuNzM4LTEuMDc0YTUuOTY2IDUuOTY2IDAgMCAwLS41MzUuMDAxIDE0LjAzIDE0LjAzIDAgMCAxLTEuOTM1LS4wNDEuMTE3LjExNyAwIDAgMS0uMTAzLS4wOTIuMTE2LjExNiAwIDAgMSAuMDU1LS4xMjZsODEuMTA0LTQ2LjgyMmEuMTE3LjExNyAwIDAgMSAuMTcxLjA3Yy4xMDQuMzgxLjEyOS43NjguMDc0IDEuMTUzLS4wNDUuMzE2LjA1Ny42MzcuMjk2LjkyNS41MDYuNjEgMS41NTUgMS4wMjEgMi43MzkgMS4wNzMuMTc4LjAwOC4zNTcuMDA4LjUzNS0uMDAxYS4xMTcuMTE3IDAgMCAxIC4wNjQuMjE4bC03OS4yNTYgNDUuNzU5YS4xMTQuMTE0IDAgMCAxLS4wNTkuMDE2em0tMy40MDUtMi4zNzJjLjA4OSAwIC4xNzcuMDAyLjI2NS4wMDYgMS4yNjYuMDU2IDIuMzUzLjQ4OCAyLjkwOCAxLjE1OC4yMjcuMjc0LjM1LjU3NS4zNi44ODJsNzguNjg1LTQ1LjQyOWMtLjAzNiAwLS4wNzItLjAwMS0uMTA3LS4wMDMtMS4yNjctLjA1Ni0yLjM1NC0uNDg5LTIuOTA5LTEuMTU4LS4yODItLjM0LS40MDItLjcyNC0uMzQ3LTEuMTA3YTIuNjA0IDIuNjA0IDAgMCAwLS4wMzItLjkxTDYzLjg0NiAyMDguOTdhMTMuOTEgMTMuOTEgMCAwIDAgMS41MjguMDEyYy4wOTctLjAwNS4xOTQtLjAwNy4yOTEtLjAwN3onIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMi4yMDggMTYyLjEzNGMtMS4wMDEtMS44MjctLjI0MS00LjIxNyAxLjY5OC01LjMzN2w1Ni4wMTEtMzIuMzQ0YzEuOTM5LTEuMTIgNC4zMjQtLjU0NiA1LjMyNiAxLjI4MWwuMjMyLjQxYTkuMzQ0IDkuMzQ0IDAgMCAwIDEuNDcgMi4wMjFsLjI3OC4yN2MzLjMyNSAzLjIxNCA4LjU4MyAzLjcxNiAxMi44ODggMS4yM2w3LjMxOS00LjIyYzEuOTQtMS4xMTkgNC4zMjQtLjU0NiA1LjMyNSAxLjI4MmwzLjI1IDUuOTI4LTgzLjUxOSA0OC4yMjktMTAuMjc4LTE4Ljc1eicgZmlsbD0nI0ZBRkFGQScvPjxwYXRoIGQ9J00xMi40ODYgMTgxLjAwMWEuMTEyLjExMiAwIDAgMS0uMDMxLS4wMDUuMTE0LjExNCAwIDAgMS0uMDcxLS4wNTZMMi4xMDYgMTYyLjE5Yy0xLjAzMS0xLjg4LS4yNDktNC4zNDUgMS43NDItNS40OTRsNTYuMDEtMzIuMzQ0YTQuMzI4IDQuMzI4IDAgMCAxIDIuMTU4LS41ODhjMS40MTUgMCAyLjY1LjcwMiAzLjMxMSAxLjg4Mi4wMS4wMDguMDE4LjAxNy4wMjQuMDI4bC4yMjcuNDE0YS4xMjIuMTIyIDAgMCAxIC4wMTMuMDM4IDkuNTA4IDkuNTA4IDAgMCAwIDEuNDM5IDEuOTU5bC4yNzUuMjY2YzEuODQ2IDEuNzg2IDQuMzQ0IDIuNzY5IDcuMDMxIDIuNzY5IDEuOTc3IDAgMy45NTQtLjUzOCA1LjcxNy0xLjU1N2EuMTQ4LjE0OCAwIDAgMSAuMDM1LS4wMTNsNy4yODQtNC4yMDZhNC4zMjEgNC4zMjEgMCAwIDEgMi4xNTctLjU4OGMxLjQyNyAwIDIuNjcyLjcxNiAzLjMyOSAxLjkxNGwzLjI0OSA1LjkyOWEuMTE2LjExNiAwIDAgMS0uMDQ0LjE1N2wtODMuNTE4IDQ4LjIyOWEuMTE2LjExNiAwIDAgMS0uMDU5LjAxNnptNDkuNTMtNTcuMDA0Yy0uNzA0IDAtMS40MS4xOTMtMi4wNDEuNTU3bC01Ni4wMSAzMi4zNDVjLTEuODgyIDEuMDg2LTIuNjI0IDMuNDA5LTEuNjU1IDUuMTc5bDEwLjIyMSAxOC42NDUgODMuMzE3LTQ4LjExMi0zLjE5NS01LjgyOWMtLjYxNS0xLjEyMi0xLjc4My0xLjc5Mi0zLjEyNC0xLjc5MmE0LjA4IDQuMDggMCAwIDAtMi4wNC41NTdsLTcuMzE3IDQuMjI1YS4xNDguMTQ4IDAgMCAxLS4wMzUuMDEzIDExLjcgMTEuNyAwIDAgMS01LjgwMSAxLjU2OWMtMi43NDggMC01LjMwMy0xLjAwNy03LjE5NC0yLjgzNWwtLjI3OC0uMjdhOS43MTYgOS43MTYgMCAwIDEtMS40OTctMi4wNDYuMDk2LjA5NiAwIDAgMS0uMDEzLS4wMzdsLS4xOTEtLjM0N2EuMTEuMTEgMCAwIDEtLjAyMy0uMDI5Yy0uNjE1LTEuMTIzLTEuNzgzLTEuNzkzLTMuMTI0LTEuNzkzeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J000Mi40MzQgMTU1LjgwOGMtMi41MS0uMDAxLTQuNjk3LTEuMjU4LTUuODUyLTMuMzY1LTEuODExLTMuMzA0LS40MzgtNy42MzQgMy4wNTktOS42NTRsMTIuMjkxLTcuMDk4YTcuNTk5IDcuNTk5IDAgMCAxIDMuNzg5LTEuMDMzYzIuNTEgMCA0LjY5NyAxLjI1OCA1Ljg1MiAzLjM2NSAxLjgxMSAzLjMwNC40MzkgNy42MzQtMy4wNTkgOS42NTRsLTEyLjI5MSA3LjA5OGE3LjYwNiA3LjYwNiAwIDAgMS0zLjc4OSAxLjAzM3ptMTMuMjg3LTIwLjY4M2E3LjEyOCA3LjEyOCAwIDAgMC0zLjU1NS45NzFsLTEyLjI5MSA3LjA5OGMtMy4yNzkgMS44OTMtNC41NzMgNS45NDItMi44ODMgOS4wMjQgMS4wNzEgMS45NTUgMy4xMDYgMy4xMjIgNS40NDIgMy4xMjJhNy4xMyA3LjEzIDAgMCAwIDMuNTU2LS45N2wxMi4yOTEtNy4wOThjMy4yNzktMS44OTMgNC41NzItNS45NDIgMi44ODMtOS4wMjQtMS4wNzItMS45NTUtMy4xMDYtMy4xMjMtNS40NDMtMy4xMjN6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE0OS41ODggMTA5LjQwN2w2LjczNyAzLjg5di44ODdjMCAuMTc2LjAxMy4zNi4wMzcuNTQ5LjAxMS4wODEuMDIuMTYxLjAyOC4yNDIuMTQgMS40MTUuOTczIDIuOTk4IDIuMTA1IDMuOTk5bDcuMzk2IDYuNTQ1Yy4xNzcuMTU2LjM1OC4yOTUuNTQxLjQxNSAxLjU3OSAxLjA0IDIuOTUuNDY2IDMuMDYyLTEuMjgyLjA0OS0uNzg0LjA1Ny0xLjU5NS4wMjMtMi40MjlsLS4wMDMtLjE2di0xLjE1MWwyNS45ODcgMTUuMDAzdjU0YzAgMS4wOS0uNzcgMS41My0xLjcyLjk4MmwtNDIuNDczLTI0LjUyM2MtLjk1LS41NDgtMS43Mi0xLjg3Ny0xLjcyLTIuOTY2di0zNC4wMzMnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTk0LjU1MyAxOTEuMjVjLS4yNTcgMC0uNTQtLjA4NS0uODMxLS4yNTNsLTQyLjQ3Mi0yNC41MjFjLS45ODEtLjU2Ny0xLjc3OS0xLjk0My0xLjc3OS0zLjA2OHYtMzQuMDMzaC4yMzR2MzQuMDMzYzAgMS4wNTEuNzQ1IDIuMzM2IDEuNjYxIDIuODY2bDQyLjQ3MyAyNC41MjFjLjQyNC4yNDUuODE2LjI4OCAxLjEwMy4xMjIuMjg1LS4xNjQuNDQyLS41Mi40NDItMS4wMDJ2LTUzLjkzM2wtMjUuNzUzLTE0Ljg2OC4wMDMgMS4xMDZjLjAzNC44MzIuMDI2IDEuNjU0LS4wMjQgMi40MzktLjA1NC44NDQtLjM5NiAxLjQ2NC0uOTYzIDEuNzQ2LS42MTkuMzA5LTEuNDUuMTczLTIuMjgtLjM3M2E1LjAyMyA1LjAyMyAwIDAgMS0uNTUzLS40MjZsLTcuMzk3LTYuNTQ0Yy0xLjE1OC0xLjAyNi0xLjk5OS0yLjYyNS0yLjE0My00LjA3NmE5LjYyNCA5LjYyNCAwIDAgMC0uMDI3LS4yMzggNC4yNDEgNC4yNDEgMCAwIDEtLjAzOC0uNTY0di0uODJsLTYuNjgtMy44NTYuMTE3LS4yMDIgNi43MzggMy44OS4wNTguMDM0di45NTRjMCAuMTcxLjAxMi4zNTEuMDM2LjUzMy4wMTEuMDgzLjAyMS4xNjUuMDI5LjI0Ni4xMzggMS4zOTUuOTQ4IDIuOTM1IDIuMDY1IDMuOTIzbDcuMzk3IDYuNTQ1Yy4xNzMuMTUzLjM1LjI4OS41MjcuNDA2Ljc1OC40OTkgMS41MDQuNjMgMi4wNDcuMzU5LjQ5LS4yNDMuNzg2LS43OTUuODM0LTEuNTUxLjA1LS43NzguMDU3LTEuNTkxLjAyNC0yLjQxN2wtLjAwNC0uMTYzdi0xLjM1NWwuMTc1LjEgMjUuOTg3IDE1LjAwNC4wNTkuMDMzdjU0LjA2OGMwIC41NjktLjE5OC45OTYtLjU1OSAxLjIwNGExLjAwMiAxLjAwMiAwIDAgMS0uNTA2LjEzMScgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNDUuNjg1IDE2My4xNjFsMjQuMTE1IDEzLjkyMi0yNS45NzggMTQuOTk4LTEuNDYyLS4zMDdjLTYuNTM0LTIuMTctMTMuNjI4LTMuNzI4LTIxLjAxOS00LjYxNi00LjM2NS0uNTI0LTguNjYzIDEuMDk2LTkuNTk4IDMuNjJhMi43NDYgMi43NDYgMCAwIDAtLjAxMSAxLjkyOGMxLjUzOCA0LjI2NyA0LjIzNiA4LjM2MyA3Ljk5NSAxMi4xMzVsLjUzMi44NDUtMjUuOTc3IDE0Ljk5Ny0yNC4xMTUtMTMuOTIyIDc1LjUxOC00My42JyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTk0LjI4MiAyMjAuODE4bC0uMDU5LS4wMzMtMjQuMjktMTQuMDI0LjE3NS0uMTAxIDc1LjU3Ny00My42MzQuMDU4LjAzMyAyNC4yOSAxNC4wMjQtMjYuMTkxIDE1LjEyMi0uMDQ1LS4wMS0xLjQ2MS0uMzA3Yy02LjU0OS0yLjE3NC0xMy42MTMtMy43MjUtMjEuMDA5LTQuNjE0YTEzLjc0NCAxMy43NDQgMCAwIDAtMS42MzgtLjA5N2MtMy43NTggMC03LjA1NCAxLjUzMS03LjgzNyAzLjY0MmEyLjYyIDIuNjIgMCAwIDAtLjAxIDEuODQ4YzEuNTM1IDQuMjU4IDQuMjE2IDguMzI2IDcuOTY4IDEyLjA5MWwuMDE2LjAyMS41MjYuODM1LjAwNi4wMS4wNjQuMTAyLS4xMDUuMDYxLTI1Ljk3NyAxNC45OTgtLjA1OC4wMzN6bS0yMy44ODEtMTQuMDU3bDIzLjg4MSAxMy43ODggMjQuODAyLTE0LjMyYy41NDYtLjMxNS44NDYtLjQ4OSAxLjAxNy0uNTc1bC0uNDY2LS43NGMtMy43NzEtMy43ODctNi40NjctNy44ODEtOC4wMTMtMTIuMTY4YTIuODUxIDIuODUxIDAgMCAxIC4wMTEtMi4wMDhjLjgxNS0yLjE5OSA0LjIwMy0zLjc5NSA4LjA1Ni0zLjc5NS41NTcgMCAxLjExNy4wMzMgMS42NjYuMDk5IDcuNDEyLjg5MSAxNC40OTEgMi40NDUgMjEuMDQxIDQuNjIxLjgzNi4xNzUgMS4yMTUuMjU0IDEuMzkuMzA0bDI1Ljc4LTE0Ljg4NC0yMy44ODEtMTMuNzg4LTc1LjI4NCA0My40NjZ6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE2Ny4yMyAxMjUuOTc5djUwLjg3MWwtMjcuMzIxIDE1Ljc3My02LjQ2MS0xNC4xNjdjLS45MS0xLjk5Ni0zLjQyOC0xLjczOC01LjYyNC41NzRhMTAuMjM4IDEwLjIzOCAwIDAgMC0yLjMzIDQuMDE4bC02LjQ2IDIxLjYyOC0yNy4zMjIgMTUuNzc0di01MC44NzFsNzUuNTE4LTQzLjYnIGZpbGw9JyNGRkYnLz48cGF0aCBkPSdNOTEuNzEyIDIyMC41NjdhLjEyNy4xMjcgMCAwIDEtLjA1OS0uMDE2LjExOC4xMTggMCAwIDEtLjA1OC0uMTAxdi01MC44NzFjMC0uMDQyLjAyMy0uMDguMDU4LS4xMDFsNzUuNTE5LTQzLjZhLjExNy4xMTcgMCAwIDEgLjE3NS4xMDF2NTAuODcxYzAgLjA0MS0uMDIzLjA4LS4wNTkuMWwtMjcuMzIxIDE1Ljc3NWEuMTE4LjExOCAwIDAgMS0uMDk0LjAxLjEyLjEyIDAgMCAxLS4wNzEtLjA2M2wtNi40Ni0xNC4xNjhjLS4zNzUtLjgyMi0xLjA2Mi0xLjI3NS0xLjkzNC0xLjI3NS0xLjA4OSAwLTIuMzY0LjY4Ni0zLjUgMS44ODFhMTAuMjA2IDEwLjIwNiAwIDAgMC0yLjMwMiAzLjk3MmwtNi40NiAyMS42MjdhLjExOC4xMTggMCAwIDEtLjA1NC4wNjhMOTEuNzcgMjIwLjU1MWEuMTIuMTIgMCAwIDEtLjA1OC4wMTZ6bS4xMTctNTAuOTJ2NTAuNjAxbDI3LjEwNi0xNS42NSA2LjQ0Ny0yMS41ODNhMTAuMjg2IDEwLjI4NiAwIDAgMSAyLjM1Ny00LjA2NWMxLjE4LTEuMjQyIDIuNTE3LTEuOTU0IDMuNjY5LTEuOTU0Ljk2OSAwIDEuNzMxLjUwMSAyLjE0NiAxLjQxMWw2LjQwNyAxNC4wNTEgMjcuMTUyLTE1LjY3NnYtNTAuNjAxbC03NS4yODQgNDMuNDY2eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNjguNTQzIDEyNi4yMTN2NTAuODdsLTI3LjMyMiAxNS43NzQtNi40Ni0xNC4xNjhjLS45MS0xLjk5NS0zLjQyOC0xLjczOC01LjYyNC41NzRhMTAuMjQ4IDEwLjI0OCAwIDAgMC0yLjMzIDQuMDE5bC02LjQ2MSAyMS42MjctMjcuMzIxIDE1Ljc3NHYtNTAuODdsNzUuNTE4LTQzLjYnIGZpbGw9JyNGRkYnLz48cGF0aCBkPSdNOTMuMDI1IDIyMC44YS4xMjMuMTIzIDAgMCAxLS4wNTktLjAxNS4xMi4xMiAwIDAgMS0uMDU4LS4xMDF2LTUwLjg3MWMwLS4wNDIuMDIzLS4wOC4wNTgtLjEwMWw3NS41MTgtNDMuNmEuMTEyLjExMiAwIDAgMSAuMTE3IDBjLjAzNi4wMi4wNTkuMDU5LjA1OS4xdjUwLjg3MWEuMTE2LjExNiAwIDAgMS0uMDU5LjEwMWwtMjcuMzIxIDE1Ljc3NGEuMTExLjExMSAwIDAgMS0uMDk0LjAxLjExNS4xMTUgMCAwIDEtLjA3MS0uMDYybC02LjQ2LTE0LjE2OGMtLjM3NS0uODIzLTEuMDYyLTEuMjc1LTEuOTM1LTEuMjc1LTEuMDg4IDAtMi4zNjMuNjg1LTMuNDk5IDEuODgxYTEwLjE5IDEwLjE5IDAgMCAwLTIuMzAyIDMuOTcxbC02LjQ2MSAyMS42MjhhLjEwOC4xMDggMCAwIDEtLjA1My4wNjdsLTI3LjMyMiAxNS43NzVhLjEyLjEyIDAgMCAxLS4wNTguMDE1em0uMTE3LTUwLjkxOXY1MC42bDI3LjEwNi0xNS42NDkgNi40NDctMjEuNTg0YTEwLjI5MyAxMC4yOTMgMCAwIDEgMi4zNTctNC4wNjVjMS4xNzktMS4yNDEgMi41MTYtMS45NTQgMy42NjgtMS45NTQuOTY5IDAgMS43MzIuNTAyIDIuMTQ3IDEuNDEybDYuNDA3IDE0LjA1MSAyNy4xNTItMTUuNjc2di01MC42MDFsLTc1LjI4NCA0My40NjZ6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE2OS44IDE3Ny4wODNsLTI3LjMyMiAxNS43NzQtNi40Ni0xNC4xNjhjLS45MS0xLjk5NS0zLjQyOC0xLjczOC01LjYyNS41NzRhMTAuMjQ2IDEwLjI0NiAwIDAgMC0yLjMyOSA0LjAxOWwtNi40NjEgMjEuNjI3LTI3LjMyMSAxNS43NzR2LTUwLjg3bDc1LjUxOC00My42djUwLjg3eicgZmlsbD0nI0ZBRkFGQScvPjxwYXRoIGQ9J005NC4yODIgMjIwLjkxN2EuMjM0LjIzNCAwIDAgMS0uMjM0LS4yMzN2LTUwLjg3MWMwLS4wODMuMDQ1LS4xNjEuMTE3LS4yMDJsNzUuNTE4LTQzLjYwMWEuMjM0LjIzNCAwIDEgMSAuMzUuMjAydjUwLjg3MWEuMjMzLjIzMyAwIDAgMS0uMTE2LjIwMmwtMjcuMzIyIDE1Ljc3NWEuMjMyLjIzMiAwIDAgMS0uMzI5LS4xMDZsLTYuNDYxLTE0LjE2OGMtLjM2LS43ODktLjk5Mi0xLjIwNi0xLjgyOC0xLjIwNi0xLjA1NiAwLTIuMzAxLjY3Mi0zLjQxNSAxLjg0NGExMC4wOTkgMTAuMDk5IDAgMCAwLTIuMjc1IDMuOTI0bC02LjQ2IDIxLjYyOGEuMjM1LjIzNSAwIDAgMS0uMTA3LjEzNmwtMjcuMzIyIDE1Ljc3NGEuMjMuMjMgMCAwIDEtLjExNi4wMzF6bS4yMzMtNTAuOTY5djUwLjMzMWwyNi44OTEtMTUuNTI1IDYuNDM0LTIxLjUzOWExMC40MSAxMC40MSAwIDAgMSAyLjM4NC00LjExMmMxLjIwMS0xLjI2NSAyLjU2OS0xLjk5MSAzLjc1My0xLjk5MSAxLjAxOCAwIDEuODE4LjUyNiAyLjI1MyAxLjQ4bDYuMzU0IDEzLjkzNCAyNi45ODItMTUuNTc4di01MC4zMzFsLTc1LjA1MSA0My4zMzF6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTEwOS44OTQgMTk5Ljk0M2MtMS43NzQgMC0zLjI0MS0uNzI1LTQuMjQ0LTIuMTJhLjIyNC4yMjQgMCAwIDEgLjAyMy0uMjk0LjIzMy4yMzMgMCAwIDEgLjMwMS0uMDIzYy43OC41NDcgMS43MDUuODI3IDIuNzUuODI3IDEuMzIzIDAgMi43NTQtLjQzOSA0LjI1Ni0xLjMwNiA1LjMxMS0zLjA2NyA5LjYzMS0xMC41MTggOS42MzEtMTYuNjExIDAtMS45MjctLjQ0Mi0zLjU2LTEuMjc4LTQuNzI0YS4yMzIuMjMyIDAgMCAxIC4zMjMtLjMyN2MxLjY3MSAxLjE3MiAyLjU5MSAzLjM4MSAyLjU5MSA2LjIxOSAwIDYuMjQyLTQuNDI2IDEzLjg2My05Ljg2NSAxNy4wMDMtMS41NzQuOTA4LTMuMDg0IDEuMzU2LTQuNDg4IDEuMzU2em0tMi45NjktMS41NDJjLjgxMy42NTEgMS44Mi44NzcgMi45NjguODc3aC4wMDFjMS4zMjEgMCAyLjc1My0uMzI3IDQuMjU0LTEuMTk0IDUuMzExLTMuMDY3IDkuNjMyLTEwLjQ2MyA5LjYzMi0xNi41NTYgMC0xLjk3OS0uNDYzLTMuNTk5LTEuMzI2LTQuNzYxLjQxMSAxLjAzNS42MjUgMi4yNzUuNjI1IDMuNjM1IDAgNi4yNDMtNC40MjYgMTMuODgzLTkuODY1IDE3LjAyMy0xLjU3NC45MDktMy4wODQgMS4zMTctNC40OSAxLjMxNy0uNjQxIDAtMS4yNDMtLjE0OS0xLjc5OS0uMzQxeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xMTMuMDk3IDE5Ny4yM2M1LjM4NC0zLjEwOCA5Ljc0OC0xMC42MzYgOS43NDgtMTYuODE0IDAtMi4wNTEtLjQ4My0zLjY5Mi0xLjMyMy00Ljg2LTEuNzg0LTEuMjUyLTQuMzc0LTEuMTk0LTcuMjU3LjQ3LTUuMzg0IDMuMTA4LTkuNzQ4IDEwLjYzNi05Ljc0OCAxNi44MTQgMCAyLjA1MS40ODMgMy42OTIgMS4zMjMgNC44NiAxLjc4NCAxLjI1MiA0LjM3NCAxLjE5NCA3LjI1Ny0uNDcnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTA4LjcyNCAxOTguNjE0Yy0xLjE0MiAwLTIuMTU4LS4yMTMtMy4wMTktLjgxNy0uMDIxLS4wMTQtLjA0LjAxNC0uMDU1LS4wMDctLjg5NC0xLjI0NC0xLjM2Ny0yLjk0OC0xLjM2Ny00Ljk3MyAwLTYuMjQyIDQuNDI2LTEzLjg2NCA5Ljg2NS0xNy4wMDUgMS41NzQtLjkwOCAzLjA4NC0xLjM2MyA0LjQ5LTEuMzYzIDEuMTQyIDAgMi4xNTguMzA5IDMuMDE4LjkxM2EuMjMuMjMgMCAwIDEgLjA1Ni4wNTZjLjg5NCAxLjI0NCAxLjM2NyAyLjk3MiAxLjM2NyA0Ljk5NyAwIDYuMjQzLTQuNDI2IDEzLjc4My05Ljg2NSAxNi45MjMtMS41NzQuOTA5LTMuMDg0IDEuMjc2LTQuNDkgMS4yNzZ6bS0yLjcxOC0xLjEwOWMuNzc0LjUzMiAxLjY4OC43NzYgMi43MTguNzc2IDEuMzIzIDAgMi43NTQtLjQxMyA0LjI1Ni0xLjI4IDUuMzExLTMuMDY2IDkuNjMxLTEwLjUwNSA5LjYzMS0xNi41OTggMC0xLjkwOS0uNDM0LTMuNTIzLTEuMjU1LTQuNjg1LS43NzQtLjUzMy0xLjY4OC0uNzk5LTIuNzE4LS43OTktMS4zMjMgMC0yLjc1NS40NDEtNC4yNTYgMS4zMDgtNS4zMTEgMy4wNjYtOS42MzEgMTAuNTA2LTkuNjMxIDE2LjU5OSAwIDEuOTA5LjQzNCAzLjUxNyAxLjI1NSA0LjY3OXonIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTQ5LjMxOCAxMTQuMjYybC05Ljk4NCA4Ljg3OCAxNS44OTMgMTEuMDMxIDUuNTg5LTYuMTEyLTExLjQ5OC0xMy43OTcnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTY5LjY3NiAxMjAuODRsLTkuNzQ4IDUuNjI3Yy0zLjY0MiAyLjEwMy05LjUyOCAyLjExMy0xMy4xNDcuMDI0LTMuNjItMi4wODktMy42MDEtNS40ODguMDQxLTcuNTkxbDkuNDk1LTUuNjA4LTYuNzI5LTMuODg1LTgxLjgzNiA0Ny4wNzEgNDUuOTIzIDI2LjUxNCAzLjA4MS0xLjc3OWMuNjMxLS4zNjUuODY5LS44OTguNjE4LTEuMzktMi4zNTctNC42MzItMi41OTMtOS41NDYtLjY4My0xNC4yNjIgNS42MzgtMTMuOTIgMjQuNTA5LTI0LjgxNSA0OC42MTgtMjguMDcgOC4xNjktMS4xMDMgMTYuNjgtLjk2NyAyNC43MDQuMzk0Ljg1Mi4xNDUgMS43NzYuMDA4IDIuNDA3LS4zNTdsMy4wODEtMS43NzgtMjUuODI1LTE0LjkxJyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTExMy42NzUgMTgzLjQ1OWEuNDcuNDcgMCAwIDEtLjIzMy0uMDYybC00NS45MjQtMjYuNTE1YS40NjguNDY4IDAgMCAxIC4wMDEtLjgwOWw4MS44MzYtNDcuMDcxYS40NjcuNDY3IDAgMCAxIC40NjYgMGw2LjcyOSAzLjg4NWEuNDY3LjQ2NyAwIDAgMS0uNDY3LjgwOWwtNi40OTYtMy43NS04MC45IDQ2LjUzMyA0NC45ODggMjUuOTczIDIuODQ4LTEuNjQ0Yy4xOTItLjExMS42Mi0uNDA5LjQzNS0uNzczLTIuNDE2LTQuNzQ4LTIuNjU4LTkuODE0LS43LTE0LjY1IDIuODA2LTYuOTI3IDguODg1LTEzLjI0MiAxNy41ODItMTguMjYzIDguNjU3LTQuOTk4IDE5LjUxOC04LjQ4OSAzMS40MDctMTAuMDk0IDguMTk4LTEuMTA3IDE2Ljc5LS45NyAyNC44NDQuMzk3LjczOS4xMjUgMS41NjEuMDA3IDIuMDk1LS4zMDFsMi4zODEtMS4zNzQtMjUuMTI1LTE0LjUwNmEuNDY3LjQ2NyAwIDAgMSAuNDY3LS44MDlsMjUuODI1IDE0LjkxYS40NjcuNDY3IDAgMCAxIDAgLjgwOWwtMy4wODEgMS43NzljLS43MjEuNDE3LTEuNzYzLjU3NS0yLjcxOC40MTMtNy45NjMtMS4zNTEtMTYuNDU3LTEuNDg2LTI0LjU2My0uMzkyLTExLjc3IDEuNTg5LTIyLjUxMiA1LjAzOS0zMS4wNjUgOS45NzctOC41MTQgNC45MTYtMTQuNDU2IDExLjA3My0xNy4xODMgMTcuODA1LTEuODU0IDQuNTc4LTEuNjIzIDkuMzc2LjY2NiAxMy44NzUuMzcuNzI1LjA1NSAxLjUxMy0uOCAyLjAwNmwtMy4wODEgMS43OGEuNDc2LjQ3NiAwIDAgMS0uMjM0LjA2MicgZmlsbD0nIzQ1NUE2NCcvPjxwYXRoIGQ9J00xNTMuMzE2IDEyOC4yNzljLTIuNDEzIDAtNC44MjEtLjUyOC02LjY1Mi0xLjU4Ni0xLjgxOC0xLjA0OS0yLjgyLTIuNDYxLTIuODItMy45NzUgMC0xLjUyNyAxLjAxNi0yLjk1NSAyLjg2MS00LjAybDkuNDkzLTUuNjA3YS4yMzMuMjMzIDAgMSAxIC4yMzguNDAybC05LjQ5NiA1LjYwOWMtMS42OTYuOTc5LTIuNjI4IDIuMjYzLTIuNjI4IDMuNjE2IDAgMS4zNC45MTggMi42MDggMi41ODUgMy41NzEgMy41NDkgMi4wNDkgOS4zNDMgMi4wMzggMTIuOTE0LS4wMjRsOS43NDgtNS42MjhhLjIzNC4yMzQgMCAwIDEgLjIzNC40MDVsLTkuNzQ4IDUuNjI4Yy0xLjg1OCAxLjA3Mi00LjI5NiAxLjYwOS02LjcyOSAxLjYwOScgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xMTMuNjc1IDE4Mi45OTJsLTQ1LjkxMy0yNi41MDhNMTEzLjY3NSAxODMuMzQyYS4zNDYuMzQ2IDAgMCAxLS4xNzUtLjA0N2wtNDUuOTEzLTI2LjUwOGEuMzUuMzUgMCAxIDEgLjM1LS42MDdsNDUuOTEzIDI2LjUwOGEuMzUuMzUgMCAwIDEtLjE3NS42NTQnIGZpbGw9JyM0NTVBNjQnLz48cGF0aCBkPSdNNjcuNzYyIDE1Ni40ODR2NTQuMDAxYzAgMS4wOS43NyAyLjQxOCAxLjcyIDIuOTY3bDQyLjQ3MyAyNC41MjFjLjk1LjU0OSAxLjcyLjExIDEuNzItLjk4di01NC4wMDEnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTEyLjcyNyAyMzguNTYxYy0uMjk3IDAtLjYyLS4wOTUtLjk0Ny0uMjg1bC00Mi40NzMtMjQuNTIxYy0xLjA2My0uNjEzLTEuODk1LTIuMDUtMS44OTUtMy4yN3YtNTQuMDAxYS4zNS4zNSAwIDEgMSAuNzAxIDB2NTQuMDAxYzAgLjk2LjcwNyAyLjE4IDEuNTQ0IDIuNjYzbDQyLjQ3MyAyNC41MjJjLjM0NC4xOTguNjYxLjI0My44Ny4xMjIuMjA2LS4xMTkuMzI1LS40MTEuMzI1LS43OTl2LTU0LjAwMWEuMzUuMzUgMCAxIDEgLjcgMHY1NC4wMDFjMCAuNjU1LS4yMzkgMS4xNTQtLjY3NSAxLjQwNmExLjIzNSAxLjIzNSAwIDAgMS0uNjIzLjE2MicgZmlsbD0nIzQ1NUE2NCcvPjxwYXRoIGQ9J00xMTIuODYgMTQ3LjUxMmgtLjAwMWMtMi4zMTggMC00LjQ5OS0uNTIyLTYuMTQyLTEuNDcxLTEuNzA1LS45ODQtMi42NDMtMi4zMTUtMi42NDMtMy43NDkgMC0xLjQ0NS45NTItMi43OTEgMi42OC0zLjc4OGwxMi4wNDEtNi45NTNjMS42NjgtLjk2MiAzLjg3NC0xLjQ5MyA2LjIxMi0xLjQ5MyAyLjMxOCAwIDQuNDk5LjUyMyA2LjE0MyAxLjQ3MiAxLjcwNC45ODQgMi42NDMgMi4zMTUgMi42NDMgMy43NDggMCAxLjQ0Ni0uOTUyIDIuNzkxLTIuNjggMy43ODlsLTEyLjA0MiA2Ljk1MmMtMS42NjguOTYzLTMuODc0IDEuNDkzLTYuMjExIDEuNDkzem0xMi4xNDctMTYuNzUzYy0yLjIxNyAwLTQuMjk4LjQ5Ny01Ljg2MSAxLjM5OWwtMTIuMDQyIDYuOTUyYy0xLjUwMi44NjgtMi4zMyAxLjk5OC0yLjMzIDMuMTgyIDAgMS4xNzMuODE1IDIuMjg5IDIuMjkzIDMuMTQyIDEuNTM4Ljg4OSAzLjU5NiAxLjM3OCA1Ljc5MiAxLjM3OGguMDAxYzIuMjE2IDAgNC4yOTgtLjQ5NyA1Ljg2MS0xLjM5OWwxMi4wNDEtNi45NTNjMS41MDItLjg2NyAyLjMzLTEuOTk3IDIuMzMtMy4xODIgMC0xLjE3Mi0uODE0LTIuMjg4LTIuMjkyLTMuMTQyLTEuNTM5LS44ODgtMy41OTYtMS4zNzctNS43OTMtMS4zNzd6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE2NS42MyAxMjMuMjE5bC01LjczNCAzLjMxMWMtMy4xNjcgMS44MjgtOC4yODYgMS44MzctMTEuNDMzLjAyLTMuMTQ3LTEuODE3LTMuMTMxLTQuNzcyLjAzNi02LjYwMWw1LjczNC0zLjMxIDExLjM5NyA2LjU4JyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTE1NC4yMzMgMTE3LjQ0OGw5Ljk5NSA1Ljc3MS00LjY4MiAyLjcwNGMtMS40MzQuODI3LTMuMzUyIDEuMjgzLTUuMzk5IDEuMjgzLTIuMDI5IDAtMy45MjMtLjQ0OS01LjMzMy0xLjI2My0xLjI5LS43NDQtMi0xLjY5NC0yLTIuNjc0IDAtLjk5MS43MjMtMS45NTUgMi4wMzYtMi43MTNsNS4zODMtMy4xMDhtMC0uODA5bC01LjczNCAzLjMxYy0zLjE2NyAxLjgyOS0zLjE4MyA0Ljc4NC0uMDM2IDYuNjAxIDEuNTY4LjkwNSAzLjYyMyAxLjM1NyA1LjY4NCAxLjM1NyAyLjA3NyAwIDQuMTU5LS40NiA1Ljc0OS0xLjM3N2w1LjczNC0zLjMxMS0xMS4zOTctNi41OE0xNDUuNDQ1IDE3OS42NjdjLTEuNzczIDAtMy4yNDEtLjg1LTQuMjQzLTIuMjQ1LS4wNjctLjA5Mi0uMDU3LS4yNzUuMDIzLS4zNTYuMDgtLjA4MS4yMDctLjEyLjMtLjA1NS43ODEuNTQ4IDEuNzA2LjgxMiAyLjc1MS44MTEgMS4zMjIgMCAyLjc1NC0uNDQ2IDQuMjU2LTEuMzEzIDUuMzEtMy4wNjYgOS42MzEtMTAuNTIyIDkuNjMxLTE2LjYxNSAwLTEuOTI3LS40NDItMy41NjItMS4yNzktNC43MjZhLjIzNS4yMzUgMCAwIDEgLjAyNC0uMzAxLjIzMi4yMzIgMCAwIDEgLjMtLjAyN2MxLjY3IDEuMTcyIDIuNTkgMy4zOCAyLjU5IDYuMjE5IDAgNi4yNDItNC40MjUgMTMuOTg3LTkuODY1IDE3LjEyNy0xLjU3My45MDgtMy4wODMgMS40ODEtNC40ODggMS40ODF6TTE0Mi40NzYgMTc4Yy44MTQuNjUxIDEuODIgMS4wMDIgMi45NjkgMS4wMDIgMS4zMjIgMCAyLjc1My0uNDUyIDQuMjU1LTEuMzIgNS4zMS0zLjA2NSA5LjYzMS0xMC41MjMgOS42MzEtMTYuNjE3IDAtMS45OC0uNDYzLTMuNjMtMS4zMjUtNC43OTMuNDExIDEuMDM1LjYyNCAyLjI2LjYyNCAzLjYyIDAgNi4yNDItNC40MjUgMTMuODc1LTkuODY1IDE3LjAxNS0xLjU3My45MDktMy4wODQgMS4zNzYtNC40ODkgMS4zNzZhNS40OSA1LjQ5IDAgMCAxLTEuOC0uMjgzeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNDguNjQ4IDE3Ni43MDRjNS4zODQtMy4xMDggOS43NDgtMTAuNjM2IDkuNzQ4LTE2LjgxMyAwLTIuMDUyLS40ODMtMy42OTMtMS4zMjItNC44NjEtMS43ODUtMS4yNTItNC4zNzUtMS4xOTQtNy4yNTguNDcxLTUuMzgzIDMuMTA4LTkuNzQ4IDEwLjYzNi05Ljc0OCAxNi44MTMgMCAyLjA1MS40ODQgMy42OTIgMS4zMjMgNC44NiAxLjc4NSAxLjI1MyA0LjM3NCAxLjE5NSA3LjI1Ny0uNDcnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTQ0LjI3NiAxNzguMjc2Yy0xLjE0MyAwLTIuMTU4LS4zMDctMy4wMTktLjkxMWEuMjE3LjIxNyAwIDAgMS0uMDU1LS4wNTRjLS44OTUtMS4yNDQtMS4zNjctMi45NzItMS4zNjctNC45OTcgMC02LjI0MSA0LjQyNS0xMy44NzUgOS44NjUtMTcuMDE2IDEuNTczLS45MDggMy4wODQtMS4zNjkgNC40ODktMS4zNjkgMS4xNDMgMCAyLjE1OC4zMDcgMy4wMTkuOTFhLjI0LjI0IDAgMCAxIC4wNTUuMDU1Yy44OTQgMS4yNDQgMS4zNjcgMi45NzEgMS4zNjcgNC45OTcgMCA2LjI0MS00LjQyNSAxMy44NzUtOS44NjUgMTcuMDE2LTEuNTczLjkwOC0zLjA4NCAxLjM2OS00LjQ4OSAxLjM2OXptLTIuNzE4LTEuMTcyYy43NzMuNTMzIDEuNjg3LjkwMSAyLjcxOC45MDEgMS4zMjIgMCAyLjc1NC0uNTM4IDQuMjU2LTEuNDA1IDUuMzEtMy4wNjYgOS42MzEtMTAuNTY3IDkuNjMxLTE2LjY2MSAwLTEuOTA4LS40MzQtMy41NTQtMS4yNTYtNC43MTYtLjc3NC0uNTMyLTEuNjg4LS44MTQtMi43MTgtLjgxNC0xLjMyMiAwLTIuNzU0LjQzMy00LjI1NiAxLjMtNS4zMSAzLjA2Ni05LjYzMSAxMC41NjQtOS42MzEgMTYuNjU3IDAgMS45MS40MzQgMy41NzYgMS4yNTYgNC43Mzh6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE1MC43MiAxNzIuMzYxbC0uMzYzLS4yOTVhMjQuMTA1IDI0LjEwNSAwIDAgMCAyLjE0OC0zLjEyOCAyNC4wNSAyNC4wNSAwIDAgMCAxLjk3Ny00LjM3NWwuNDQzLjE0OWEyNC41NCAyNC41NCAwIDAgMS0yLjAxNSA0LjQ2IDI0LjYxIDI0LjYxIDAgMCAxLTIuMTkgMy4xODlNMTE1LjkxNyAxOTEuNTE0bC0uMzYzLS4yOTRhMjQuMTc0IDI0LjE3NCAwIDAgMCAyLjE0OC0zLjEyOCAyNC4wMzggMjQuMDM4IDAgMCAwIDEuOTc2LTQuMzc1bC40NDMuMTQ4YTI0LjQ4IDI0LjQ4IDAgMCAxLTIuMDE1IDQuNDYxIDI0LjY2MiAyNC42NjIgMCAwIDEtMi4xODkgMy4xODhNMTE0IDIzNy40NzZWMTgyLjU4NCAyMzcuNDc2JyBmaWxsPScjNjA3RDhCJy8+PGc+PHBhdGggZD0nTTgxLjgyMiAzNy40NzRjLjAxNy0uMTM1LS4wNzUtLjI4LS4yNjctLjM5Mi0uMzI3LS4xODgtLjgyNi0uMjEtMS4xMDktLjA0NWwtNi4wMTIgMy40NzFjLS4xMzEuMDc2LS4xOTQuMTc4LS4xOTEuMjg1LjAwMi4xMzIuMDAyLjQ2MS4wMDIuNTc4di4wNDNsLS4wMDcuMTI4LTYuNTkxIDMuNzc5Yy0uMDAxIDAtMi4wNzcgMS4wNDYtMi43ODcgNS4xOTIgMCAwLS45MTIgNi45NjEtLjg5OCAxOS43NDUuMDE1IDEyLjU3LjYwNiAxNy4wNyAxLjE2NyAyMS4zNTEuMjIgMS42ODQgMy4wMDEgMi4xMjUgMy4wMDEgMi4xMjUuMzMxLjA0LjY5OC0uMDI3IDEuMDgtLjI0OGw3NS4yNzMtNDMuNTUxYzEuODA4LTEuMDY5IDIuNjY3LTMuNzE5IDMuMDU2LTYuMjg0IDEuMjEzLTcuOTkgMS42NzUtMzIuOTc4LS4yNzUtMzkuODc4LS4xOTYtLjY5My0uNTEtMS4wODMtLjg2OC0xLjI4MmwtMi4wODYtLjc5Yy0uNzI3LjAyOC0xLjQxNi40NjctMS41MzQuNTM1TDgyLjAzMiAzNy4wNzJsLS4yMS40MDInIGZpbGw9JyNGRkYnLz48cGF0aCBkPSdNMTQ0LjMxMSAxLjcwMWwyLjA4NS43OWMuMzU4LjE5OS42NzIuNTg5Ljg2OCAxLjI4MiAxLjk0OSA2LjkgMS40ODcgMzEuODg3LjI3NSAzOS44NzgtLjM5IDIuNTY1LTEuMjQ5IDUuMjE1LTMuMDU2IDYuMjg0TDY5LjIxIDkzLjQ4NmExLjc4IDEuNzggMCAwIDEtLjg5Ni4yNThsLS4xODMtLjAxMWMwIC4wMDEtMi43ODItLjQ0LTMuMDAzLTIuMTI0LS41Ni00LjI4Mi0xLjE1MS04Ljc4MS0xLjE2NS0yMS4zNTEtLjAxNS0xMi43ODQuODk3LTE5Ljc0NS44OTctMTkuNzQ1LjcxLTQuMTQ2IDIuNzg3LTUuMTkyIDIuNzg3LTUuMTkybDYuNTkxLTMuNzc5LjAwNy0uMTI4di0uMDQzYzAtLjExNyAwLS40NDYtLjAwMi0uNTc4LS4wMDMtLjEwNy4wNTktLjIxLjE5MS0uMjg1bDYuMDEyLTMuNDcyYS45OC45OCAwIDAgMSAuNDgxLS4xMWMuMjE4IDAgLjQ0OS4wNTMuNjI3LjE1Ni4xOTMuMTEyLjI4NS4yNTguMjY4LjM5MmwuMjExLS40MDIgNjAuNzQ0LTM0LjgzNmMuMTE3LS4wNjguODA2LS41MDcgMS41MzQtLjUzNW0wLS45OTdsLS4wMzkuMDAxYy0uNjE4LjAyMy0xLjI4My4yNDQtMS45NzQuNjU2bC0uMDIxLjAxMi02MC41MTkgMzQuNzA2YTIuMzU4IDIuMzU4IDAgMCAwLS44MzEtLjE1Yy0uMzY1IDAtLjcwNC4wODQtLjk4LjI0NGwtNi4wMTIgMy40NzFjLS40NDIuMjU1LS42OTkuNjktLjY4OSAxLjE2NmwuMDAxLjE1LTYuMDggMy40ODdjLS4zNzMuMTk5LTIuNTQyIDEuNTMxLTMuMjkgNS44OThsLS4wMDYuMDM5Yy0uMDA5LjA3LS45MiA3LjE3My0uOTA2IDE5Ljg3NS4wMTQgMTIuNjIuNjAzIDE3LjExNiAxLjE3MiAyMS40NjVsLjAwMi4wMTVjLjMwOCAyLjM1NSAzLjQ3NSAyLjkyMyAzLjgzNiAyLjk4bC4wMzQuMDA0Yy4xMDEuMDEzLjIwNC4wMTkuMzA1LjAxOWEyLjc3IDIuNzcgMCAwIDAgMS4zOTYtLjM5Mmw3NS4yNzMtNDMuNTUyYzEuODExLTEuMDcxIDIuOTk5LTMuNDIzIDMuNTQyLTYuOTk3IDEuMTg2LTcuODE0IDEuNzM0LTMzLjA5Ni0uMzAxLTQwLjI5OS0uMjUzLS44OTMtLjcwNC0xLjUyNy0xLjM0My0xLjg4MmwtLjEzMi0uMDYyLTIuMDg1LS43ODlhLjk3My45NzMgMCAwIDAtLjM1My0uMDY1JyBmaWxsPScjNDU1QTY0Jy8+PHBhdGggZD0nTTEyOC4yNjcgMTEuNTY1bDEuNDk1LjQzNC01Ni4zMzkgMzIuMzI2JyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTc0LjIwMiA5MC41NDVhLjUuNSAwIDAgMS0uMjUtLjkzMWwxOC40MzctMTAuNjQ1YS40OTkuNDk5IDAgMSAxIC40OTkuODY0TDc0LjQ1MSA5MC40NzhsLS4yNDkuMDY3TTc1Ljc2NCA0Mi42NTRsLS4xMDgtLjA2Mi4wNDYtLjE3MSA1LjEzNS0yLjk2NC4xNy4wNDUtLjA0NS4xNzEtNS4xMzUgMi45NjQtLjA2My4wMTdNNzAuNTIgOTAuMzc1VjQ2LjQyMWwuMDYzLS4wMzZMMTM3Ljg0IDcuNTU0djQzLjk1NGwtLjA2Mi4wMzZMNzAuNTIgOTAuMzc1em0uMjUtNDMuODExdjQzLjM4bDY2LjgyMS0zOC41NzlWNy45ODVMNzAuNzcgNDYuNTY0eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J004Ni45ODYgODMuMTgyYy0uMjMuMTQ5LS42MTIuMzg0LS44NDkuNTIzbC0xMS41MDUgNi43MDFjLS4yMzcuMTM5LS4yMDYuMjUyLjA2OC4yNTJoLjU2NWMuMjc1IDAgLjY5My0uMTEzLjkzLS4yNTJMODcuNyA4My43MDVjLjIzNy0uMTM5LjQyOC0uMjUzLjQyNS0uMjU2YTExLjI5IDExLjI5IDAgMCAxLS4wMDYtLjUwM2MwLS4yNzQtLjE4OC0uMzc3LS40MTgtLjIyN2wtLjcxNS40NjMnIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNNzUuMjY2IDkwLjc4Mkg3NC43Yy0uMiAwLS4zMTYtLjA1Ni0uMzQ2LS4xNjYtLjAzLS4xMS4wNDMtLjIxNy4yMTUtLjMxN2wxMS41MDUtNi43MDJjLjIzNi0uMTM4LjYxNS0uMzcxLjg0NC0uNTE5bC43MTUtLjQ2NGEuNDg4LjQ4OCAwIDAgMSAuMjY2LS4wODljLjE3MiAwIC4zNDUuMTMuMzQ1LjQyMSAwIC4yMTQuMDAxLjM2My4wMDMuNDM3bC4wMDYuMDA0LS4wMDQuMDY5Yy0uMDAzLjA3NS0uMDAzLjA3NS0uNDg2LjM1NmwtMTEuNTA1IDYuNzAyYTIuMjgyIDIuMjgyIDAgMCAxLS45OTIuMjY4em0tLjYtLjI1bC4wMzQuMDAxaC41NjZjLjI1MiAwIC42NDktLjEwOC44NjYtLjIzNGwxMS41MDUtNi43MDJjLjE2OC0uMDk4LjI5NC0uMTczLjM2MS0uMjE0LS4wMDQtLjA4NC0uMDA0LS4yMTgtLjAwNC0uNDM3bC0uMDk1LS4xNzEtLjEzMS4wNDktLjcxNC40NjNjLS4yMzIuMTUtLjYxNi4zODYtLjg1NC41MjVsLTExLjUwNSA2LjcwMi0uMDI5LjAxOHonIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNNzUuMjY2IDg5Ljg3MUg3NC43Yy0uMiAwLS4zMTYtLjA1Ni0uMzQ2LS4xNjYtLjAzLS4xMS4wNDMtLjIxNy4yMTUtLjMxN2wxMS41MDUtNi43MDJjLjI1OC0uMTUxLjY5NC0uMjY4Ljk5My0uMjY4aC41NjVjLjIgMCAuMzE2LjA1Ni4zNDYuMTY2LjAzLjExLS4wNDMuMjE3LS4yMTUuMzE3bC0xMS41MDUgNi43MDJhMi4yODIgMi4yODIgMCAwIDEtLjk5Mi4yNjh6bS0uNi0uMjVsLjAzNC4wMDFoLjU2NmMuMjUyIDAgLjY0OS0uMTA3Ljg2Ni0uMjM0bDExLjUwNS02LjcwMi4wMy0uMDE4LS4wMzUtLjAwMWgtLjU2NWMtLjI1MiAwLS42NDkuMTA4LS44NjcuMjM0bC0xMS41MDUgNi43MDItLjAyOS4wMTh6TTc0LjM3IDkwLjgwMXYtMS4yNDcgMS4yNDcnIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNNjguMTMgOTMuOTAxYy0uNzUxLS4wOTMtMS4zMTQtLjczNy0xLjQzOS0xLjM3Ni0uODMxLTQuMjM4LTEuMTUxLTguNzgyLTEuMTY1LTIxLjM1Mi0uMDE1LTEyLjc4NC44OTctMTkuNzQ1Ljg5Ny0xOS43NDUuNzExLTQuMTQ2IDIuNzg3LTUuMTkyIDIuNzg3LTUuMTkybDc0Ljg1OS00My4yMTljLjIyMy0uMTI5IDIuNDg3LTEuNTg0IDMuMTk1LjkyMyAxLjk1IDYuOSAxLjQ4OCAzMS44ODcuMjc1IDM5Ljg3OC0uMzg5IDIuNTY1LTEuMjQ4IDUuMjE1LTMuMDU2IDYuMjgzTDY5LjIxIDkzLjY1M2MtLjM4Mi4yMjEtLjc0OS4yODgtMS4wOC4yNDggMCAwLTIuNzgxLS40NDEtMy4wMDEtMi4xMjUtLjU2MS00LjI4MS0xLjE1Mi04Ljc4MS0xLjE2Ny0yMS4zNTEtLjAxNC0xMi43ODQuODk4LTE5Ljc0NS44OTgtMTkuNzQ1LjcxLTQuMTQ2IDIuNzg3LTUuMTkxIDIuNzg3LTUuMTkxbDYuNTk4LTMuODEuODcxLS4xMTkgNi41OTktMy44My4wNDYtLjQ2MUw2OC4xMyA5My45MDEnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNNjguMzE3IDk0LjE2MWwtLjIxNS0uMDEzaC0uMDAxbC0uMjQ0LS4wNDdjLS43MTktLjE1Ni0yLjc3Mi0uNzM2LTIuOTc2LTIuMjkyLS41NjgtNC4zNC0xLjE1NC04LjgxMy0xLjE2OC0yMS4zODQtLjAxNC0xMi42NTQuODkxLTE5LjcwNy45LTE5Ljc3Ny43MjUtNC4yMzEgMi44MzItNS4zMzggMi45MjItNS4zODJsNi42MjgtMy44MjcuODctLjExOSA2LjQ0Ni0zLjc0Mi4wMzQtLjMzNGEuMjQ4LjI0OCAwIDAgMSAuMjczLS4yMjMuMjQ4LjI0OCAwIDAgMSAuMjIzLjI3MmwtLjA1OS41ODktNi43NTIgMy45MTktLjg3LjExOC02LjU1NiAzLjc4NWMtLjAzMS4wMTYtMS45OSAxLjA2OC0yLjY2NiA1LjAxOC0uMDA3LjA2LS45MDggNy4wODYtLjg5NCAxOS43MDIuMDE0IDEyLjUzOS41OTcgMTYuOTk2IDEuMTYxIDIxLjMwNS4wOTEuNjkxLjY4OSAxLjE1NCAxLjMwOSAxLjQ1MmExLjk1IDEuOTUgMCAwIDEtLjIzNi0uNjA5Yy0uNzgxLTMuOTg0LTEuMTU1LTguMjAyLTEuMTctMjEuMzk5LS4wMTQtMTIuNjUzLjg5MS0xOS43MDcuOS0xOS43NzcuNzI1LTQuMjMxIDIuODMyLTUuMzM3IDIuOTIyLTUuMzgyLS4wMDQuMDAxIDc0LjQ0NC00Mi45OCA3NC44NDYtNDMuMjEybC4wMjgtLjAxN2MuOTA0LS41MzggMS43Mi0uNjg4IDIuMzYtLjQzMy41NTUuMjIxLjk0OS43MzMgMS4xNzIgMS41MiAyLjAxNCA3LjEyOCAxLjQ2IDMyLjIxOS4yODEgMzkuOTgzLS41MDcgMy4zNDEtMS41NzUgNS41MTUtMy4xNzUgNi40NjJMNjkuMzM1IDkzLjg2OWEyLjAyMyAyLjAyMyAwIDAgMS0xLjAxOC4yOTJ6bS0uMTQ3LS41MDdjLjI5My4wMzYuNjA0LS4wMzcuOTE1LS4yMTdsNzUuMjczLTQzLjU1MWMxLjgyMy0xLjA3OCAyLjYwMi0zLjkxNSAyLjkzNC02LjEwNiAxLjE3NC03LjczMSAxLjczMS0zMi42OTUtLjI2OC0zOS43NzItLjE3OC0uNjMxLS40NzMtMS4wMzItLjg3Ni0xLjE5Mi0uNDg0LS4xOTMtMS4xNjYtLjA1Mi0xLjkyMS4zOTdsLS4wMzQuMDIxLTc0Ljg1OCA0My4yMThjLS4wMzEuMDE3LTEuOTg5IDEuMDY5LTIuNjY2IDUuMDE5LS4wMDcuMDU5LS45MDggNy4wODUtLjg5NCAxOS43MDIuMDE1IDEzLjE1NS4zODYgMTcuMzUxIDEuMTYxIDIxLjMwMy4wOS40NjEuNDc2Ljk4MyAxLjAzNyAxLjEzOS4xMTQuMDI1LjE4NS4wMzcuMTk2LjAzOWguMDAxeicgZmlsbD0nIzQ1NUE2NCcvPjxwYXRoIGQ9J002OS4zMTcgNjguOTgyYy40ODktLjI4MS44ODUtLjA1Ni44ODUuNTA1IDAgLjU2LS4zOTYgMS4yNDMtLjg4NSAxLjUyNS0uNDg4LjI4Mi0uODg0LjA1Ny0uODg0LS41MDQgMC0uNTYuMzk2LTEuMjQzLjg4NC0xLjUyNicgZmlsbD0nI0ZGRicvPjxwYXRoIGQ9J002OC45MiA3MS4xMzNjLS4yODkgMC0uNDg3LS4yMjgtLjQ4Ny0uNjI1IDAtLjU2LjM5Ni0xLjI0My44ODQtMS41MjZhLjgxMi44MTIgMCAwIDEgLjM5Ny0uMTIxYy4yODkgMCAuNDg4LjIyOS40ODguNjI2IDAgLjU2LS4zOTYgMS4yNDMtLjg4NSAxLjUyNWEuODEyLjgxMiAwIDAgMS0uMzk3LjEyMW0uNzk0LTIuNDU5YS45NzYuOTc2IDAgMCAwLS40OS4xNDdjLS41NDguMzE3LS45NzggMS4wNTgtLjk3OCAxLjY4NyAwIC40ODYuMjcxLjgxMi42NzQuODEyYS45ODUuOTg1IDAgMCAwIC40OTEtLjE0NmMuNTQ4LS4zMTcuOTc4LTEuMDU3Ljk3OC0xLjY4NyAwLS40ODYtLjI3Mi0uODEzLS42NzUtLjgxMycgZmlsbD0nIzgwOTdBMicvPjxwYXRoIGQ9J002OC45MiA3MC45NDdjLS4yNzEgMC0uMjk5LS4zMDctLjI5OS0uNDM5IDAtLjQ5MS4zNjEtMS4xMTYuNzktMS4zNjNhLjYzMi42MzIgMCAwIDEgLjMwMy0uMDk2Yy4yNzIgMCAuMzAxLjMwNi4zMDEuNDM4IDAgLjQ5MS0uMzYzIDEuMTE2LS43OTEgMS4zNjRhLjYyOS42MjkgMCAwIDEtLjMwNC4wOTZtLjc5NC0yLjA4NmEuODEyLjgxMiAwIDAgMC0uMzk3LjEyMWMtLjQ4OC4yODMtLjg4NC45NjYtLjg4NCAxLjUyNiAwIC4zOTcuMTk4LjYyNS40ODcuNjI1YS44MTIuODEyIDAgMCAwIC4zOTctLjEyMWMuNDg5LS4yODIuODg1LS45NjUuODg1LTEuNTI1IDAtLjM5Ny0uMTk5LS42MjYtLjQ4OC0uNjI2JyBmaWxsPScjODA5N0EyJy8+PHBhdGggZD0nTTY5LjQ0NCA4NS4zNWMuMjY0LS4xNTIuNDc3LS4wMzEuNDc3LjI3MiAwIC4zMDMtLjIxMy42Ny0uNDc3LjgyMi0uMjYzLjE1My0uNDc3LjAzMS0uNDc3LS4yNzEgMC0uMzAyLjIxNC0uNjcxLjQ3Ny0uODIzJyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTY5LjIzIDg2LjUxYy0uMTU2IDAtLjI2My0uMTIzLS4yNjMtLjMzNyAwLS4zMDIuMjE0LS42NzEuNDc3LS44MjNhLjQzMS40MzEgMCAwIDEgLjIxNC0uMDY2Yy4xNTYgMCAuMjYzLjEyNC4yNjMuMzM4IDAgLjMwMy0uMjEzLjY3LS40NzcuODIyYS40MzEuNDMxIDAgMCAxLS4yMTQuMDY2bS40MjgtMS40MTJjLS4xIDAtLjIwMy4wMjktLjMwNy4wOS0uMzIuMTg1LS41Ny42MTgtLjU3Ljk4NSAwIC4zMDkuMTg1LjUyNC40NDkuNTI0YS42My42MyAwIDAgMCAuMzA4LS4wOWMuMzItLjE4NS41Ny0uNjE4LjU3LS45ODUgMC0uMzA5LS4xODUtLjUyNC0uNDUtLjUyNCcgZmlsbD0nIzgwOTdBMicvPjxwYXRoIGQ9J002OS4yMyA4Ni4zMjJsLS4wNzYtLjE0OWMwLS4yMzUuMTc5LS41NDQuMzg0LS42NjFsLjEyLS4wNDEuMDc2LjE1MWMwIC4yMzQtLjE3OS41NDItLjM4My42NmwtLjEyMS4wNG0uNDI4LTEuMDM4YS40MzEuNDMxIDAgMCAwLS4yMTQuMDY2Yy0uMjYzLjE1Mi0uNDc3LjUyMS0uNDc3LjgyMyAwIC4yMTQuMTA3LjMzNy4yNjMuMzM3YS40MzEuNDMxIDAgMCAwIC4yMTQtLjA2NmMuMjY0LS4xNTIuNDc3LS41MTkuNDc3LS44MjIgMC0uMjE0LS4xMDctLjMzOC0uMjYzLS4zMzgnIGZpbGw9JyM4MDk3QTInLz48cGF0aCBkPSdNMTM5LjI3OCA3Ljc2OXY0My42NjdMNzIuMjA4IDkwLjE2VjQ2LjQ5M2w2Ny4wNy0zOC43MjQnIGZpbGw9JyM0NTVBNjQnLz48cGF0aCBkPSdNNzIuMDgzIDkwLjM3NVY0Ni40MjFsLjA2My0uMDM2IDY3LjI1Ny0zOC44MzF2NDMuOTU0bC0uMDYyLjAzNi02Ny4yNTggMzguODMxem0uMjUtNDMuODExdjQzLjM4bDY2LjgyMS0zOC41NzlWNy45ODVMNzIuMzMzIDQ2LjU2NHonIGZpbGw9JyM2MDdEOEInLz48L2c+PHBhdGggZD0nTTEyNS43MzcgODguNjQ3bC03LjYzOSAzLjMzNFY4NGwtMTEuNDU5IDQuNzEzdjguMjY5TDk5IDEwMC4zMTVsMTMuMzY5IDMuNjQ2IDEzLjM2OC0xNS4zMTQnIGZpbGw9JyM0NTVBNjQnLz48L2c+PC9zdmc+IjsKICAgIGZ1bmN0aW9uIFJvdGF0ZUluc3RydWN0aW9ucygpIHsKICAgICAgdGhpcy5sb2FkSWNvbl8oKTsKICAgICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgdmFyIHMgPSBvdmVybGF5LnN0eWxlOwogICAgICBzLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICAgICAgcy50b3AgPSAwOwogICAgICBzLnJpZ2h0ID0gMDsKICAgICAgcy5ib3R0b20gPSAwOwogICAgICBzLmxlZnQgPSAwOwogICAgICBzLmJhY2tncm91bmRDb2xvciA9ICdncmF5JzsKICAgICAgcy5mb250RmFtaWx5ID0gJ3NhbnMtc2VyaWYnOwogICAgICBzLnpJbmRleCA9IDEwMDAwMDA7CiAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICAgICAgaW1nLnNyYyA9IHRoaXMuaWNvbjsKICAgICAgdmFyIHMgPSBpbWcuc3R5bGU7CiAgICAgIHMubWFyZ2luTGVmdCA9ICcyNSUnOwogICAgICBzLm1hcmdpblRvcCA9ICcyNSUnOwogICAgICBzLndpZHRoID0gJzUwJSc7CiAgICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaW1nKTsKICAgICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgdmFyIHMgPSB0ZXh0LnN0eWxlOwogICAgICBzLnRleHRBbGlnbiA9ICdjZW50ZXInOwogICAgICBzLmZvbnRTaXplID0gJzE2cHgnOwogICAgICBzLmxpbmVIZWlnaHQgPSAnMjRweCc7CiAgICAgIHMubWFyZ2luID0gJzI0cHggMjUlJzsKICAgICAgcy53aWR0aCA9ICc1MCUnOwogICAgICB0ZXh0LmlubmVySFRNTCA9ICdQbGFjZSB5b3VyIHBob25lIGludG8geW91ciBDYXJkYm9hcmQgdmlld2VyLic7CiAgICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQodGV4dCk7CiAgICAgIHZhciBzbmFja2JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICB2YXIgcyA9IHNuYWNrYmFyLnN0eWxlOwogICAgICBzLmJhY2tncm91bmRDb2xvciA9ICcjQ0ZEOERDJzsKICAgICAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7CiAgICAgIHMuYm90dG9tID0gMDsKICAgICAgcy53aWR0aCA9ICcxMDAlJzsKICAgICAgcy5oZWlnaHQgPSAnNDhweCc7CiAgICAgIHMucGFkZGluZyA9ICcxNHB4IDI0cHgnOwogICAgICBzLmJveFNpemluZyA9ICdib3JkZXItYm94JzsKICAgICAgcy5jb2xvciA9ICcjNjU2QTZCJzsKICAgICAgb3ZlcmxheS5hcHBlbmRDaGlsZChzbmFja2Jhcik7CiAgICAgIHZhciBzbmFja2JhclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgc25hY2tiYXJUZXh0LnN0eWxlLmZsb2F0ID0gJ2xlZnQnOwogICAgICBzbmFja2JhclRleHQuaW5uZXJIVE1MID0gJ05vIENhcmRib2FyZCB2aWV3ZXI/JzsKICAgICAgdmFyIHNuYWNrYmFyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICBzbmFja2JhckJ1dHRvbi5ocmVmID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vZ2V0L2NhcmRib2FyZC9nZXQtY2FyZGJvYXJkLyc7CiAgICAgIHNuYWNrYmFyQnV0dG9uLmlubmVySFRNTCA9ICdnZXQgb25lJzsKICAgICAgc25hY2tiYXJCdXR0b24udGFyZ2V0ID0gJ19ibGFuayc7CiAgICAgIHZhciBzID0gc25hY2tiYXJCdXR0b24uc3R5bGU7CiAgICAgIHMuZmxvYXQgPSAncmlnaHQnOwogICAgICBzLmZvbnRXZWlnaHQgPSA2MDA7CiAgICAgIHMudGV4dFRyYW5zZm9ybSA9ICd1cHBlcmNhc2UnOwogICAgICBzLmJvcmRlckxlZnQgPSAnMXB4IHNvbGlkIGdyYXknOwogICAgICBzLnBhZGRpbmdMZWZ0ID0gJzI0cHgnOwogICAgICBzLnRleHREZWNvcmF0aW9uID0gJ25vbmUnOwogICAgICBzLmNvbG9yID0gJyM2NTZBNkInOwogICAgICBzbmFja2Jhci5hcHBlbmRDaGlsZChzbmFja2JhclRleHQpOwogICAgICBzbmFja2Jhci5hcHBlbmRDaGlsZChzbmFja2JhckJ1dHRvbik7CiAgICAgIHRoaXMub3ZlcmxheSA9IG92ZXJsYXk7CiAgICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICAgIHRoaXMuaGlkZSgpOwogICAgfQogICAgUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHBhcmVudCkgewogICAgICBpZiAoIXBhcmVudCAmJiAhdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQpIHsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7CiAgICAgIH0gZWxzZSBpZiAocGFyZW50KSB7CiAgICAgICAgaWYgKHRoaXMub3ZlcmxheS5wYXJlbnRFbGVtZW50ICYmIHRoaXMub3ZlcmxheS5wYXJlbnRFbGVtZW50ICE9IHBhcmVudCkgdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5vdmVybGF5KTsKICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5KTsKICAgICAgfQogICAgICB0aGlzLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgIHZhciBpbWcgPSB0aGlzLm92ZXJsYXkucXVlcnlTZWxlY3RvcignaW1nJyk7CiAgICAgIHZhciBzID0gaW1nLnN0eWxlOwogICAgICBpZiAoaXNMYW5kc2NhcGVNb2RlKCkpIHsKICAgICAgICBzLndpZHRoID0gJzIwJSc7CiAgICAgICAgcy5tYXJnaW5MZWZ0ID0gJzQwJSc7CiAgICAgICAgcy5tYXJnaW5Ub3AgPSAnMyUnOwogICAgICB9IGVsc2UgewogICAgICAgIHMud2lkdGggPSAnNTAlJzsKICAgICAgICBzLm1hcmdpbkxlZnQgPSAnMjUlJzsKICAgICAgICBzLm1hcmdpblRvcCA9ICcyNSUnOwogICAgICB9CiAgICB9OwogICAgUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIH07CiAgICBSb3RhdGVJbnN0cnVjdGlvbnMucHJvdG90eXBlLnNob3dUZW1wb3JhcmlseSA9IGZ1bmN0aW9uIChtcywgcGFyZW50KSB7CiAgICAgIHRoaXMuc2hvdyhwYXJlbnQpOwogICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCh0aGlzLmhpZGUuYmluZCh0aGlzKSwgbXMpOwogICAgfTsKICAgIFJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuZGlzYWJsZVNob3dUZW1wb3JhcmlseSA9IGZ1bmN0aW9uICgpIHsKICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpOwogICAgfTsKICAgIFJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLmRpc2FibGVTaG93VGVtcG9yYXJpbHkoKTsKICAgICAgaWYgKCFpc0xhbmRzY2FwZU1vZGUoKSAmJiBpc01vYmlsZSgpKSB7CiAgICAgICAgdGhpcy5zaG93KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5oaWRlKCk7CiAgICAgIH0KICAgIH07CiAgICBSb3RhdGVJbnN0cnVjdGlvbnMucHJvdG90eXBlLmxvYWRJY29uXyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5pY29uID0gZGF0YVVyaSgnaW1hZ2Uvc3ZnK3htbCcsIHJvdGF0ZUluc3RydWN0aW9uc0Fzc2V0KTsKICAgIH07CiAgICB2YXIgREVGQVVMVF9WSUVXRVIgPSAnQ2FyZGJvYXJkVjEnOwogICAgdmFyIFZJRVdFUl9LRVkgPSAnV0VCVlJfQ0FSREJPQVJEX1ZJRVdFUic7CiAgICB2YXIgQ0xBU1NfTkFNRSA9ICd3ZWJ2ci1wb2x5ZmlsbC12aWV3ZXItc2VsZWN0b3InOwogICAgZnVuY3Rpb24gVmlld2VyU2VsZWN0b3IoZGVmYXVsdFZpZXdlcikgewogICAgICB0cnkgewogICAgICAgIHRoaXMuc2VsZWN0ZWRLZXkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShWSUVXRVJfS0VZKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCB2aWV3ZXIgcHJvZmlsZTogJXMnLCBlcnJvcik7CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkS2V5KSB7CiAgICAgICAgdGhpcy5zZWxlY3RlZEtleSA9IGRlZmF1bHRWaWV3ZXIgfHwgREVGQVVMVF9WSUVXRVI7CiAgICAgIH0KICAgICAgdGhpcy5kaWFsb2cgPSB0aGlzLmNyZWF0ZURpYWxvZ18oRGV2aWNlSW5mby5WaWV3ZXJzKTsKICAgICAgdGhpcy5yb290ID0gbnVsbDsKICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrc18gPSBbXTsKICAgIH0KICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgdGhpcy5yb290ID0gcm9vdDsKICAgICAgcm9vdC5hcHBlbmRDaGlsZCh0aGlzLmRpYWxvZyk7CiAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5zZWxlY3RlZEtleSk7CiAgICAgIHNlbGVjdGVkLmNoZWNrZWQgPSB0cnVlOwogICAgICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgIH07CiAgICBWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMucm9vdCAmJiB0aGlzLnJvb3QuY29udGFpbnModGhpcy5kaWFsb2cpKSB7CiAgICAgICAgdGhpcy5yb290LnJlbW92ZUNoaWxkKHRoaXMuZGlhbG9nKTsKICAgICAgfQogICAgICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgfTsKICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5nZXRDdXJyZW50Vmlld2VyID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldOwogICAgfTsKICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5nZXRTZWxlY3RlZEtleV8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBpbnB1dCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZmllbGRdOmNoZWNrZWQnKTsKICAgICAgaWYgKGlucHV0KSB7CiAgICAgICAgcmV0dXJuIGlucHV0LmlkOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfTsKICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjYikgewogICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2tzXy5wdXNoKGNiKTsKICAgIH07CiAgICBWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuZmlyZU9uQ2hhbmdlXyA9IGZ1bmN0aW9uICh2aWV3ZXIpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2tzXy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFja3NfW2ldKHZpZXdlcik7CiAgICAgIH0KICAgIH07CiAgICBWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUub25TYXZlXyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5zZWxlY3RlZEtleSA9IHRoaXMuZ2V0U2VsZWN0ZWRLZXlfKCk7CiAgICAgIGlmICghdGhpcy5zZWxlY3RlZEtleSB8fCAhRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignVmlld2VyU2VsZWN0b3Iub25TYXZlXzogdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIScpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmZpcmVPbkNoYW5nZV8oRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldKTsKICAgICAgdHJ5IHsKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShWSUVXRVJfS0VZLCB0aGlzLnNlbGVjdGVkS2V5KTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSB2aWV3ZXIgcHJvZmlsZTogJXMnLCBlcnJvcik7CiAgICAgIH0KICAgICAgdGhpcy5oaWRlKCk7CiAgICB9OwogICAgVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmNyZWF0ZURpYWxvZ18gPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUUpOwogICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgdmFyIHMgPSBvdmVybGF5LnN0eWxlOwogICAgICBzLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICAgICAgcy5sZWZ0ID0gMDsKICAgICAgcy50b3AgPSAwOwogICAgICBzLndpZHRoID0gJzEwMCUnOwogICAgICBzLmhlaWdodCA9ICcxMDAlJzsKICAgICAgcy5iYWNrZ3JvdW5kID0gJ3JnYmEoMCwgMCwgMCwgMC4zKSc7CiAgICAgIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGUuYmluZCh0aGlzKSk7CiAgICAgIHZhciB3aWR0aCA9IDI4MDsKICAgICAgdmFyIGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICB2YXIgcyA9IGRpYWxvZy5zdHlsZTsKICAgICAgcy5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7CiAgICAgIHMucG9zaXRpb24gPSAnZml4ZWQnOwogICAgICBzLnRvcCA9ICcyNHB4JzsKICAgICAgcy5sZWZ0ID0gJzUwJSc7CiAgICAgIHMubWFyZ2luTGVmdCA9IC13aWR0aCAvIDIgKyAncHgnOwogICAgICBzLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICBzLnBhZGRpbmcgPSAnMjRweCc7CiAgICAgIHMub3ZlcmZsb3cgPSAnaGlkZGVuJzsKICAgICAgcy5iYWNrZ3JvdW5kID0gJyNmYWZhZmEnOwogICAgICBzLmZvbnRGYW1pbHkgPSAiJ1JvYm90bycsIHNhbnMtc2VyaWYiOwogICAgICBzLmJveFNoYWRvdyA9ICcwcHggNXB4IDIwcHggIzY2Nic7CiAgICAgIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUgxXygnU2VsZWN0IHlvdXIgdmlld2VyJykpOwogICAgICBmb3IgKHZhciBpZCBpbiBvcHRpb25zKSB7CiAgICAgICAgZGlhbG9nLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlQ2hvaWNlXyhpZCwgb3B0aW9uc1tpZF0ubGFiZWwpKTsKICAgICAgfQogICAgICBkaWFsb2cuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVCdXR0b25fKCdTYXZlJywgdGhpcy5vblNhdmVfLmJpbmQodGhpcykpKTsKICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG92ZXJsYXkpOwogICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nKTsKICAgICAgcmV0dXJuIGNvbnRhaW5lcjsKICAgIH07CiAgICBWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlSDFfID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgdmFyIGgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTsKICAgICAgdmFyIHMgPSBoMS5zdHlsZTsKICAgICAgcy5jb2xvciA9ICdibGFjayc7CiAgICAgIHMuZm9udFNpemUgPSAnMjBweCc7CiAgICAgIHMuZm9udFdlaWdodCA9ICdib2xkJzsKICAgICAgcy5tYXJnaW5Ub3AgPSAwOwogICAgICBzLm1hcmdpbkJvdHRvbSA9ICcyNHB4JzsKICAgICAgaDEuaW5uZXJIVE1MID0gbmFtZTsKICAgICAgcmV0dXJuIGgxOwogICAgfTsKICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5jcmVhdGVDaG9pY2VfID0gZnVuY3Rpb24gKGlkLCBuYW1lKSB7CiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgZGl2LnN0eWxlLm1hcmdpblRvcCA9ICc4cHgnOwogICAgICBkaXYuc3R5bGUuY29sb3IgPSAnYmxhY2snOwogICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgICBpbnB1dC5zdHlsZS5mb250U2l6ZSA9ICczMHB4JzsKICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTsKICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3JhZGlvJyk7CiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBpZCk7CiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdmaWVsZCcpOwogICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpOwogICAgICBsYWJlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJzRweCc7CiAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpOwogICAgICBsYWJlbC5pbm5lckhUTUwgPSBuYW1lOwogICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpOwogICAgICBkaXYuYXBwZW5kQ2hpbGQobGFiZWwpOwogICAgICByZXR1cm4gZGl2OwogICAgfTsKICAgIFZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5jcmVhdGVCdXR0b25fID0gZnVuY3Rpb24gKGxhYmVsLCBvbmNsaWNrKSB7CiAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGxhYmVsOwogICAgICB2YXIgcyA9IGJ1dHRvbi5zdHlsZTsKICAgICAgcy5mbG9hdCA9ICdyaWdodCc7CiAgICAgIHMudGV4dFRyYW5zZm9ybSA9ICd1cHBlcmNhc2UnOwogICAgICBzLmNvbG9yID0gJyMxMDk0ZjcnOwogICAgICBzLmZvbnRTaXplID0gJzE0cHgnOwogICAgICBzLmxldHRlclNwYWNpbmcgPSAwOwogICAgICBzLmJvcmRlciA9IDA7CiAgICAgIHMuYmFja2dyb3VuZCA9ICdub25lJzsKICAgICAgcy5tYXJnaW5Ub3AgPSAnMTZweCc7CiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uY2xpY2spOwogICAgICByZXR1cm4gYnV0dG9uOwogICAgfTsKICAgIHZhciBjb21tb25qc0dsb2JhbCQkMSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGNvbW1vbmpzR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGNvbW1vbmpzR2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9OwogICAgZnVuY3Rpb24gdW53cmFwRXhwb3J0cyQkMSAoeCkgewogICAgCXJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7CiAgICB9CiAgICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZSQkMShmbiwgbW9kdWxlKSB7CiAgICAJcmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzOwogICAgfQogICAgdmFyIE5vU2xlZXAgPSBjcmVhdGVDb21tb25qc01vZHVsZSQkMShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgICAoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkgewogICAgCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwogICAgfSkoY29tbW9uanNHbG9iYWwkJDEsIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuICAgICAgICAgIChmdW5jdGlvbihtb2R1bGVzKSB7CiAgICAgICAgICAgICAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKICAgICAgICAgICAgIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7CiAgICAgICAgICAgICAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7CiAgICAgICAgICAgICAJCQlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czsKICAgICAgICAgICAgIAkJfQogICAgICAgICAgICAgCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7CiAgICAgICAgICAgICAJCQlpOiBtb2R1bGVJZCwKICAgICAgICAgICAgIAkJCWw6IGZhbHNlLAogICAgICAgICAgICAgCQkJZXhwb3J0czoge30KICAgICAgICAgICAgIAkJfTsKICAgICAgICAgICAgIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CiAgICAgICAgICAgICAJCW1vZHVsZS5sID0gdHJ1ZTsKICAgICAgICAgICAgIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwogICAgICAgICAgICAgCX0KICAgICAgICAgICAgIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwogICAgICAgICAgICAgCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7CiAgICAgICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7CiAgICAgICAgICAgICAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKICAgICAgICAgICAgIAkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7CiAgICAgICAgICAgICAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgIAkJCQllbnVtZXJhYmxlOiB0cnVlLAogICAgICAgICAgICAgCQkJCWdldDogZ2V0dGVyCiAgICAgICAgICAgICAJCQl9KTsKICAgICAgICAgICAgIAkJfQogICAgICAgICAgICAgCX07CiAgICAgICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgICAgICAgICAgICAJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwogICAgICAgICAgICAgCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKICAgICAgICAgICAgIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07CiAgICAgICAgICAgICAJCV9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTsKICAgICAgICAgICAgIAkJcmV0dXJuIGdldHRlcjsKICAgICAgICAgICAgIAl9OwogICAgICAgICAgICAgCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKICAgICAgICAgICAgIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKICAgICAgICAgICAgIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAoWwogICAgICAgICAgKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KICAgIHZhciBtZWRpYUZpbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwogICAgdmFyIG9sZElPUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHBhcnNlRmxvYXQoKCcnICsgKC9DUFUuKk9TIChbMC05X117Myw0fSlbMC05X117MCwxfXwoQ1BVIGxpa2UpLipBcHBsZVdlYktpdC4qTW9iaWxlL2kuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBbMCwgJyddKVsxXSkucmVwbGFjZSgndW5kZWZpbmVkJywgJzNfMicpLnJlcGxhY2UoJ18nLCAnLicpLnJlcGxhY2UoJ18nLCAnJykpIDwgMTAgJiYgIXdpbmRvdy5NU1N0cmVhbTsKICAgIHZhciBOb1NsZWVwID0gZnVuY3Rpb24gKCkgewogICAgICBmdW5jdGlvbiBOb1NsZWVwKCkgewogICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb1NsZWVwKTsKICAgICAgICBpZiAob2xkSU9TKSB7CiAgICAgICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMubm9TbGVlcFZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTsKICAgICAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAnJyk7CiAgICAgICAgICB0aGlzLm5vU2xlZXBWaWRlby5zZXRBdHRyaWJ1dGUoJ3NyYycsIG1lZGlhRmlsZSk7CiAgICAgICAgICB0aGlzLm5vU2xlZXBWaWRlby5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgaWYgKHRoaXMubm9TbGVlcFZpZGVvLmN1cnJlbnRUaW1lID4gMC41KSB7CiAgICAgICAgICAgICAgdGhpcy5ub1NsZWVwVmlkZW8uY3VycmVudFRpbWUgPSBNYXRoLnJhbmRvbSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LmJpbmQodGhpcykpOwogICAgICAgIH0KICAgICAgfQogICAgICBfY3JlYXRlQ2xhc3MoTm9TbGVlcCwgW3sKICAgICAgICBrZXk6ICdlbmFibGUnLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoKSB7CiAgICAgICAgICBpZiAob2xkSU9TKSB7CiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpOwogICAgICAgICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7CiAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQod2luZG93LnN0b3AsIDApOwogICAgICAgICAgICB9LCAxNTAwMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLm5vU2xlZXBWaWRlby5wbGF5KCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAnZGlzYWJsZScsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7CiAgICAgICAgICBpZiAob2xkSU9TKSB7CiAgICAgICAgICAgIGlmICh0aGlzLm5vU2xlZXBUaW1lcikgewogICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubm9TbGVlcFRpbWVyKTsKICAgICAgICAgICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnBhdXNlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9XSk7CiAgICAgIHJldHVybiBOb1NsZWVwOwogICAgfSgpOwogICAgbW9kdWxlLmV4cG9ydHMgPSBOb1NsZWVwOwogICAgICAgICAgfSksCiAgICAgICAgICAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9ICdkYXRhOnZpZGVvL21wNDtiYXNlNjQsQUFBQUlHWjBlWEJ0Y0RReUFBQUNBR2x6YjIxcGMyOHlZWFpqTVcxd05ERUFBQUFJWm5KbFpRQUFDS0J0WkdGMEFBQUM4d1lGLy8vdjNFWHB2ZWJaU0xlV0xOZ2cyU1B1NzNneU5qUWdMU0JqYjNKbElERTBNaUJ5TWpRM09TQmtaRGM1WVRZeElDMGdTQzR5TmpRdlRWQkZSeTAwSUVGV1F5QmpiMlJsWXlBdElFTnZjSGxzWldaMElESXdNRE10TWpBeE5DQXRJR2gwZEhBNkx5OTNkM2N1ZG1sa1pXOXNZVzR1YjNKbkwzZ3lOalF1YUhSdGJDQXRJRzl3ZEdsdmJuTTZJR05oWW1GalBURWdjbVZtUFRFZ1pHVmliRzlqYXoweE9qQTZNQ0JoYm1Gc2VYTmxQVEI0TVRvd2VERXhNU0J0WlQxb1pYZ2djM1ZpYldVOU1pQndjM2s5TVNCd2MzbGZjbVE5TVM0d01Eb3dMakF3SUcxcGVHVmtYM0psWmowd0lHMWxYM0poYm1kbFBURTJJR05vY205dFlWOXRaVDB4SUhSeVpXeHNhWE05TUNBNGVEaGtZM1E5TUNCamNXMDlNQ0JrWldGa2VtOXVaVDB5TVN3eE1TQm1ZWE4wWDNCemEybHdQVEVnWTJoeWIyMWhYM0Z3WDI5bVpuTmxkRDB3SUhSb2NtVmhaSE05TmlCc2IyOXJZV2hsWVdSZmRHaHlaV0ZrY3oweElITnNhV05sWkY5MGFISmxZV1J6UFRBZ2JuSTlNQ0JrWldOcGJXRjBaVDB4SUdsdWRHVnliR0ZqWldROU1DQmliSFZ5WVhsZlkyOXRjR0YwUFRBZ1kyOXVjM1J5WVdsdVpXUmZhVzUwY21FOU1DQmlabkpoYldWelBUTWdZbDl3ZVhKaGJXbGtQVElnWWw5aFpHRndkRDB4SUdKZlltbGhjejB3SUdScGNtVmpkRDB4SUhkbGFXZG9kR0k5TVNCdmNHVnVYMmR2Y0Qwd0lIZGxhV2RvZEhBOU1TQnJaWGxwYm5ROU16QXdJR3RsZVdsdWRGOXRhVzQ5TXpBZ2MyTmxibVZqZFhROU5EQWdhVzUwY21GZmNtVm1jbVZ6YUQwd0lISmpYMnh2YjJ0aGFHVmhaRDB4TUNCeVl6MWpjbVlnYldKMGNtVmxQVEVnWTNKbVBUSXdMakFnY1dOdmJYQTlNQzQyTUNCeGNHMXBiajB3SUhGd2JXRjRQVFk1SUhGd2MzUmxjRDAwSUhaaWRsOXRZWGh5WVhSbFBUSXdNREF3SUhaaWRsOWlkV1p6YVhwbFBUSTFNREF3SUdOeVpsOXRZWGc5TUM0d0lHNWhiRjlvY21ROWJtOXVaU0JtYVd4c1pYSTlNQ0JwY0Y5eVlYUnBiejB4TGpRd0lHRnhQVEU2TVM0d01BQ0FBQUFBT1dXSWhBQTMvL3ArQzd2OHRERFNUamY5N3c1NWkzU2JSUE80WlkraGtqRDVoYmtBa0wzenBKNmgvTFIxQ0FBQnpnQjFrcXF6VW9ybGhRQUFBQXhCbWlRWWhuLytxWllBRExnQUFBQUpRWjVDUWhYL0FBajVJUUFEUUdnY0lRQURRR2djQUFBQUNRR2VZVVFuL3dBTEtDRUFBMEJvSEFBQUFBa0JubU5FSi84QUN5a2hBQU5BYUJ3aEFBTkFhQndBQUFBTlFacG9ORXhEUC82cGxnQU11U0VBQTBCb0hBQUFBQXRCbm9aRkVTd3Ivd0FJK1NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbnFWRUovOEFDeWtoQUFOQWFCd0FBQUFKQVo2blJDZi9BQXNvSVFBRFFHZ2NJUUFEUUdnY0FBQUFEVUdhckRSTVF6LytxWllBRExnaEFBTkFhQndBQUFBTFFaN0tSUlVzSy84QUNQa2hBQU5BYUJ3QUFBQUpBWjdwUkNmL0FBc29JUUFEUUdnY0lRQURRR2djQUFBQUNRR2U2MFFuL3dBTEtDRUFBMEJvSEFBQUFBMUJtdkEwVEVNLy9xbVdBQXk1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDMEdmRGtVVkxDdi9BQWo1SVFBRFFHZ2NBQUFBQ1FHZkxVUW4vd0FMS1NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbnk5RUovOEFDeWdoQUFOQWFCd0FBQUFOUVpzME5FeERQLzZwbGdBTXVDRUFBMEJvSEFBQUFBdEJuMUpGRlN3ci93QUkrU0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JuM0ZFSi84QUN5Z2hBQU5BYUJ3QUFBQUpBWjl6UkNmL0FBc29JUUFEUUdnY0lRQURRR2djQUFBQURVR2JlRFJNUXovK3FaWUFETGtoQUFOQWFCd0FBQUFMUVorV1JSVXNLLzhBQ1BnaEFBTkFhQndoQUFOQWFCd0FBQUFKQVorMVJDZi9BQXNwSVFBRFFHZ2NBQUFBQ1FHZnQwUW4vd0FMS1NFQUEwQm9IQ0VBQTBCb0hBQUFBQTFCbTd3MFRFTS8vcW1XQUF5NElRQURRR2djQUFBQUMwR2Yya1VWTEN2L0FBajVJUUFEUUdnY0FBQUFDUUdmK1VRbi93QUxLQ0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JuL3RFSi84QUN5a2hBQU5BYUJ3QUFBQU5RWnZnTkV4RFAvNnBsZ0FNdVNFQUEwQm9IQ0VBQTBCb0hBQUFBQXRCbmg1RkZTd3Ivd0FJK0NFQUEwQm9IQUFBQUFrQm5qMUVKLzhBQ3lnaEFBTkFhQndoQUFOQWFCd0FBQUFKQVo0L1JDZi9BQXNwSVFBRFFHZ2NBQUFBRFVHYUpEUk1Rei8rcVpZQURMZ2hBQU5BYUJ3QUFBQUxRWjVDUlJVc0svOEFDUGtoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWjVoUkNmL0FBc29JUUFEUUdnY0FBQUFDUUdlWTBRbi93QUxLU0VBQTBCb0hDRUFBMEJvSEFBQUFBMUJtbWcwVEVNLy9xbVdBQXk1SVFBRFFHZ2NBQUFBQzBHZWhrVVZMQ3YvQUFqNUlRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZXBVUW4vd0FMS1NFQUEwQm9IQUFBQUFrQm5xZEVKLzhBQ3lnaEFBTkFhQndBQUFBTlFacXNORXhEUC82cGxnQU11Q0VBQTBCb0hDRUFBMEJvSEFBQUFBdEJuc3BGRlN3ci93QUkrU0VBQTBCb0hBQUFBQWtCbnVsRUovOEFDeWdoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWjdyUkNmL0FBc29JUUFEUUdnY0FBQUFEVUdhOERSTVF6LytxWllBRExraEFBTkFhQndoQUFOQWFCd0FBQUFMUVo4T1JSVXNLLzhBQ1BraEFBTkFhQndBQUFBSkFaOHRSQ2YvQUFzcElRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZkwwUW4vd0FMS0NFQUEwQm9IQUFBQUExQm16UTBURU0vL3FtV0FBeTRJUUFEUUdnY0FBQUFDMEdmVWtVVkxDdi9BQWo1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdmY1VRbi93QUxLQ0VBQTBCb0hBQUFBQWtCbjNORUovOEFDeWdoQUFOQWFCd2hBQU5BYUJ3QUFBQU5RWnQ0TkV4Qy8vNnBsZ0FNdVNFQUEwQm9IQUFBQUF0Qm41WkZGU3dyL3dBSStDRUFBMEJvSENFQUEwQm9IQUFBQUFrQm43VkVKLzhBQ3lraEFBTkFhQndBQUFBSkFaKzNSQ2YvQUFzcElRQURRR2djQUFBQURVR2J1elJNUW4vK25oQUFZc0FoQUFOQWFCd2hBQU5BYUJ3QUFBQUpRWi9hUWhQL0FBc3BJUUFEUUdnY0FBQUFDUUdmK1VRbi93QUxLQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQUFBQ2lGdGIyOTJBQUFBYkcxMmFHUUFBQUFBMVlDQ1g5V0FnbDhBQUFQb0FBQUgvQUFCQUFBQkFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURBQUFBR0dsdlpITUFBQUFBRUlDQWdBY0FULy8vL3Y3L0FBQUYrWFJ5WVdzQUFBQmNkR3RvWkFBQUFBUFZnSUpmMVlDQ1h3QUFBQUVBQUFBQUFBQUgwQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUF5Z0FBQU1vQUFBQUFBQ1JsWkhSekFBQUFIR1ZzYzNRQUFBQUFBQUFBQVFBQUI5QUFBQmR3QUFFQUFBQUFCWEZ0WkdsaEFBQUFJRzFrYUdRQUFBQUExWUNDWDlXQWdsOEFBVitRQUFLL0lGWEVBQUFBQUFBdGFHUnNjZ0FBQUFBQUFBQUFkbWxrWlFBQUFBQUFBQUFBQUFBQUFGWnBaR1Z2U0dGdVpHeGxjZ0FBQUFVY2JXbHVaZ0FBQUJSMmJXaGtBQUFBQVFBQUFBQUFBQUFBQUFBQUpHUnBibVlBQUFBY1pISmxaZ0FBQUFBQUFBQUJBQUFBREhWeWJDQUFBQUFCQUFBRTNITjBZbXdBQUFDWWMzUnpaQUFBQUFBQUFBQUJBQUFBaUdGMll6RUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXlnREtBRWdBQUFCSUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZLy84QUFBQXlZWFpqUXdGTlFDai80UUFiWjAxQUtPeWhvM3lTVFVCQVFGQUFBQU1BRUFBcjhnRHhneGxnQVFBRWFPK0c4Z0FBQUJoemRIUnpBQUFBQUFBQUFBRUFBQUE4QUFBTHVBQUFBQlJ6ZEhOekFBQUFBQUFBQUFFQUFBQUJBQUFCOEdOMGRITUFBQUFBQUFBQVBBQUFBQUVBQUJkd0FBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBRHFZQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUFFQUFBdTRBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFEcVlBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQUVBQUF1NEFBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBQzdnQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUJ4emRITmpBQUFBQUFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFFRWMzUnplZ0FBQUFBQUFBQUFBQUFBUEFBQUF6UUFBQUFRQUFBQURRQUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBUEFBQUFEUUFBQUEwQUFBQVJBQUFBRHdBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQVBBQUFBRFFBQUFBMEFBQUFSQUFBQUR3QUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBTkFBQUFEUUFBQVFCemRHTnZBQUFBQUFBQUFEd0FBQUF3QUFBRFpBQUFBM1FBQUFPTkFBQURvQUFBQTdrQUFBUFFBQUFENndBQUEvNEFBQVFYQUFBRUxnQUFCRU1BQUFSY0FBQUVid0FBQkl3QUFBU2hBQUFFdWdBQUJNMEFBQVRrQUFBRS93QUFCUklBQUFVckFBQUZRZ0FBQlYwQUFBVndBQUFGaVFBQUJhQUFBQVcxQUFBRnpnQUFCZUVBQUFYK0FBQUdFd0FBQml3QUFBWS9BQUFHVmdBQUJuRUFBQWFFQUFBR25RQUFCclFBQUFiUEFBQUc0Z0FBQnZVQUFBY1NBQUFISndBQUIwQUFBQWRUQUFBSGNBQUFCNFVBQUFlZUFBQUhzUUFBQjhnQUFBZmpBQUFIOWdBQUNBOEFBQWdtQUFBSVFRQUFDRlFBQUFobkFBQUloQUFBQ0pjQUFBTXNkSEpoYXdBQUFGeDBhMmhrQUFBQUE5V0FnbC9WZ0lKZkFBQUFBZ0FBQUFBQUFBZjhBQUFBQUFBQUFBQUFBQUFCQVFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUNzbTFrYVdFQUFBQWdiV1JvWkFBQUFBRFZnSUpmMVlDQ1h3QUFyRVFBQVdBQVZjUUFBQUFBQUNkb1pHeHlBQUFBQUFBQUFBQnpiM1Z1QUFBQUFBQUFBQUFBQUFBQVUzUmxjbVZ2QUFBQUFtTnRhVzVtQUFBQUVITnRhR1FBQUFBQUFBQUFBQUFBQUNSa2FXNW1BQUFBSEdSeVpXWUFBQUFBQUFBQUFRQUFBQXgxY213Z0FBQUFBUUFBQWlkemRHSnNBQUFBWjNOMGMyUUFBQUFBQUFBQUFRQUFBRmR0Y0RSaEFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQ0FCQUFBQUFBckVRQUFBQUFBRE5sYzJSekFBQUFBQU9BZ0lBaUFBSUFCSUNBZ0JSQUZRQUFBQUFERFVBQUFBQUFCWUNBZ0FJU0VBYUFnSUFCQWdBQUFCaHpkSFJ6QUFBQUFBQUFBQUVBQUFCWUFBQUVBQUFBQUJ4emRITmpBQUFBQUFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFBVWMzUnplZ0FBQUFBQUFBQUdBQUFBV0FBQUFYQnpkR052QUFBQUFBQUFBRmdBQUFPQkFBQURod0FBQTVvQUFBT3RBQUFEc3dBQUE4b0FBQVBmQUFBRDVRQUFBL2dBQUFRTEFBQUVFUUFBQkNnQUFBUTlBQUFFVUFBQUJGWUFBQVJwQUFBRWdBQUFCSVlBQUFTYkFBQUVyZ0FBQkxRQUFBVEhBQUFFM2dBQUJQTUFBQVQ1QUFBRkRBQUFCUjhBQUFVbEFBQUZQQUFBQlZFQUFBVlhBQUFGYWdBQUJYMEFBQVdEQUFBRm1nQUFCYThBQUFYQ0FBQUZ5QUFBQmRzQUFBWHlBQUFGK0FBQUJnMEFBQVlnQUFBR0pnQUFCamtBQUFaUUFBQUdaUUFBQm1zQUFBWitBQUFHa1FBQUJwY0FBQWF1QUFBR3d3QUFCc2tBQUFiY0FBQUc3d0FBQndZQUFBY01BQUFISVFBQUJ6UUFBQWM2QUFBSFRRQUFCMlFBQUFkcUFBQUhmd0FBQjVJQUFBZVlBQUFIcXdBQUI4SUFBQWZYQUFBSDNRQUFCL0FBQUFnREFBQUlDUUFBQ0NBQUFBZzFBQUFJT3dBQUNFNEFBQWhoQUFBSWVBQUFDSDRBQUFpUkFBQUlwQUFBQ0tvQUFBaXdBQUFJdGdBQUNMd0FBQWpDQUFBQUZuVmtkR0VBQUFBT2JtRnRaVk4wWlhKbGJ3QUFBSEIxWkhSaEFBQUFhRzFsZEdFQUFBQUFBQUFBSVdoa2JISUFBQUFBQUFBQUFHMWthWEpoY0hCc0FBQUFBQUFBQUFBQUFBQUFPMmxzYzNRQUFBQXpxWFJ2YndBQUFDdGtZWFJoQUFBQUFRQUFBQUJJWVc1a1FuSmhhMlVnTUM0eE1DNHlJREl3TVRVd05qRXhNREE9JzsKICAgICAgICAgIH0pCiAgICAgICAgICAgICBdKTsKICAgIH0pOwogICAgfSk7CiAgICB2YXIgTm9TbGVlcCQxID0gdW53cmFwRXhwb3J0cyQkMShOb1NsZWVwKTsKICAgIHZhciBuZXh0RGlzcGxheUlkID0gMTAwMDsKICAgIHZhciBkZWZhdWx0TGVmdEJvdW5kcyA9IFswLCAwLCAwLjUsIDFdOwogICAgdmFyIGRlZmF1bHRSaWdodEJvdW5kcyA9IFswLjUsIDAsIDAuNSwgMV07CiAgICB2YXIgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsKICAgIHZhciBjYWYgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7CiAgICBmdW5jdGlvbiBWUkZyYW1lRGF0YSgpIHsKICAgICAgdGhpcy5sZWZ0UHJvamVjdGlvbk1hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpOwogICAgICB0aGlzLmxlZnRWaWV3TWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgIHRoaXMucmlnaHRQcm9qZWN0aW9uTWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgIHRoaXMucmlnaHRWaWV3TWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgIHRoaXMucG9zZSA9IG51bGw7CiAgICB9CiAgICBmdW5jdGlvbiBWUkRpc3BsYXlDYXBhYmlsaXRpZXMoY29uZmlnKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsKICAgICAgICBoYXNQb3NpdGlvbjogewogICAgICAgICAgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogY29uZmlnLmhhc1Bvc2l0aW9uCiAgICAgICAgfSwKICAgICAgICBoYXNFeHRlcm5hbERpc3BsYXk6IHsKICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IGNvbmZpZy5oYXNFeHRlcm5hbERpc3BsYXkKICAgICAgICB9LAogICAgICAgIGNhblByZXNlbnQ6IHsKICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IGNvbmZpZy5jYW5QcmVzZW50CiAgICAgICAgfSwKICAgICAgICBtYXhMYXllcnM6IHsKICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IGNvbmZpZy5tYXhMYXllcnMKICAgICAgICB9LAogICAgICAgIGhhc09yaWVudGF0aW9uOiB7CiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgZGVwcmVjYXRlV2FybmluZygnVlJEaXNwbGF5Q2FwYWJpbGl0aWVzLnByb3RvdHlwZS5oYXNPcmllbnRhdGlvbicsICdWUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YScpOwogICAgICAgICAgICByZXR1cm4gY29uZmlnLmhhc09yaWVudGF0aW9uOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICBmdW5jdGlvbiBWUkRpc3BsYXkoY29uZmlnKSB7CiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTsKICAgICAgdmFyIFVTRV9XQUtFTE9DSyA9ICd3YWtlbG9jaycgaW4gY29uZmlnID8gY29uZmlnLndha2Vsb2NrIDogdHJ1ZTsKICAgICAgdGhpcy5pc1BvbHlmaWxsZWQgPSB0cnVlOwogICAgICB0aGlzLmRpc3BsYXlJZCA9IG5leHREaXNwbGF5SWQrKzsKICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9ICcnOwogICAgICB0aGlzLmRlcHRoTmVhciA9IDAuMDE7CiAgICAgIHRoaXMuZGVwdGhGYXIgPSAxMDAwMC4wOwogICAgICB0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2lzQ29ubmVjdGVkJywgewogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgZGVwcmVjYXRlV2FybmluZygnVlJEaXNwbGF5LnByb3RvdHlwZS5pc0Nvbm5lY3RlZCcsICdWUkRpc3BsYXlDYXBhYmlsaXRpZXMucHJvdG90eXBlLmhhc0V4dGVybmFsRGlzcGxheScpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuY2FwYWJpbGl0aWVzID0gbmV3IFZSRGlzcGxheUNhcGFiaWxpdGllcyh7CiAgICAgICAgaGFzUG9zaXRpb246IGZhbHNlLAogICAgICAgIGhhc09yaWVudGF0aW9uOiBmYWxzZSwKICAgICAgICBoYXNFeHRlcm5hbERpc3BsYXk6IGZhbHNlLAogICAgICAgIGNhblByZXNlbnQ6IGZhbHNlLAogICAgICAgIG1heExheWVyczogMQogICAgICB9KTsKICAgICAgdGhpcy5zdGFnZVBhcmFtZXRlcnMgPSBudWxsOwogICAgICB0aGlzLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlOwogICAgICB0aGlzLmxheWVyXyA9IG51bGw7CiAgICAgIHRoaXMub3JpZ2luYWxQYXJlbnRfID0gbnVsbDsKICAgICAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPSBudWxsOwogICAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyA9IG51bGw7CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsOwogICAgICB0aGlzLmZ1bGxzY3JlZW5FdmVudFRhcmdldF8gPSBudWxsOwogICAgICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXyA9IG51bGw7CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl8gPSBudWxsOwogICAgICBpZiAoVVNFX1dBS0VMT0NLICYmIGlzTW9iaWxlKCkpIHsKICAgICAgICB0aGlzLndha2Vsb2NrXyA9IG5ldyBOb1NsZWVwJDEoKTsKICAgICAgfQogICAgfQogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRGcmFtZURhdGEgPSBmdW5jdGlvbiAoZnJhbWVEYXRhKSB7CiAgICAgIHJldHVybiBmcmFtZURhdGFGcm9tUG9zZShmcmFtZURhdGEsIHRoaXMuX2dldFBvc2UoKSwgdGhpcyk7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRQb3NlID0gZnVuY3Rpb24gKCkgewogICAgICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLmdldFBvc2UnLCAnVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRGcmFtZURhdGEnKTsKICAgICAgcmV0dXJuIHRoaXMuX2dldFBvc2UoKTsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLnJlc2V0UG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgZGVwcmVjYXRlV2FybmluZygnVlJEaXNwbGF5LnByb3RvdHlwZS5yZXNldFBvc2UnKTsKICAgICAgcmV0dXJuIHRoaXMuX3Jlc2V0UG9zZSgpOwogICAgfTsKICAgIFZSRGlzcGxheS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlUG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgZGVwcmVjYXRlV2FybmluZygnVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRJbW1lZGlhdGVQb3NlJywgJ1ZSRGlzcGxheS5wcm90b3R5cGUuZ2V0RnJhbWVEYXRhJyk7CiAgICAgIHJldHVybiB0aGlzLl9nZXRQb3NlKCk7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgcmV0dXJuIHJhZihjYWxsYmFjayk7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkgewogICAgICByZXR1cm4gY2FmKGlkKTsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLndyYXBGb3JGdWxsc2NyZWVuID0gZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgaWYgKGlzSU9TKCkpIHsKICAgICAgICByZXR1cm4gZWxlbWVudDsKICAgICAgfQogICAgICBpZiAoIXRoaXMuZnVsbHNjcmVlbldyYXBwZXJfKSB7CiAgICAgICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICB2YXIgY3NzUHJvcGVydGllcyA9IFsnaGVpZ2h0OiAnICsgTWF0aC5taW4oc2NyZWVuLmhlaWdodCwgc2NyZWVuLndpZHRoKSArICdweCAhaW1wb3J0YW50JywgJ3RvcDogMCAhaW1wb3J0YW50JywgJ2xlZnQ6IDAgIWltcG9ydGFudCcsICdyaWdodDogMCAhaW1wb3J0YW50JywgJ2JvcmRlcjogMCcsICdtYXJnaW46IDAnLCAncGFkZGluZzogMCcsICd6LWluZGV4OiA5OTk5OTkgIWltcG9ydGFudCcsICdwb3NpdGlvbjogZml4ZWQnXTsKICAgICAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgY3NzUHJvcGVydGllcy5qb2luKCc7ICcpICsgJzsnKTsKICAgICAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5jbGFzc0xpc3QuYWRkKCd3ZWJ2ci1wb2x5ZmlsbC1mdWxsc2NyZWVuLXdyYXBwZXInKTsKICAgICAgfQogICAgICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPT0gZWxlbWVudCkgewogICAgICAgIHJldHVybiB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXzsKICAgICAgfQogICAgICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8pIHsKICAgICAgICBpZiAodGhpcy5vcmlnaW5hbFBhcmVudF8pIHsKICAgICAgICAgIHRoaXMub3JpZ2luYWxQYXJlbnRfLmFwcGVuZENoaWxkKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudF8ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfID0gZWxlbWVudDsKICAgICAgdGhpcy5vcmlnaW5hbFBhcmVudF8gPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7CiAgICAgIGlmICghdGhpcy5vcmlnaW5hbFBhcmVudF8pIHsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICB9CiAgICAgIGlmICghdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8ucGFyZW50RWxlbWVudCkgewogICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5wYXJlbnRFbGVtZW50OwogICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8sIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfKTsKICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8pOwogICAgICB9CiAgICAgIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLmluc2VydEJlZm9yZSh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XywgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uZmlyc3RDaGlsZCk7CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgZnVuY3Rpb24gYXBwbHlGdWxsc2NyZWVuRWxlbWVudFN0eWxlKCkgewogICAgICAgIGlmICghc2VsZi5mdWxsc2NyZWVuRWxlbWVudF8pIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBbJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsICd0b3A6IDAnLCAnbGVmdDogMCcsICd3aWR0aDogJyArIE1hdGgubWF4KHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodCkgKyAncHgnLCAnaGVpZ2h0OiAnICsgTWF0aC5taW4oc2NyZWVuLmhlaWdodCwgc2NyZWVuLndpZHRoKSArICdweCcsICdib3JkZXI6IDAnLCAnbWFyZ2luOiAwJywgJ3BhZGRpbmc6IDAnXTsKICAgICAgICBzZWxmLmZ1bGxzY3JlZW5FbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgY3NzUHJvcGVydGllcy5qb2luKCc7ICcpICsgJzsnKTsKICAgICAgfQogICAgICBhcHBseUZ1bGxzY3JlZW5FbGVtZW50U3R5bGUoKTsKICAgICAgcmV0dXJuIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfOwogICAgfTsKICAgIFZSRGlzcGxheS5wcm90b3R5cGUucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghdGhpcy5mdWxsc2NyZWVuRWxlbWVudF8pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XzsKICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8pIHsKICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTsKICAgICAgfQogICAgICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IG51bGw7CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsOwogICAgICB2YXIgcGFyZW50ID0gdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8ucGFyZW50RWxlbWVudDsKICAgICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8ucmVtb3ZlQ2hpbGQoZWxlbWVudCk7CiAgICAgIGlmICh0aGlzLm9yaWdpbmFsUGFyZW50XyA9PT0gcGFyZW50KSB7CiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7CiAgICAgIH0KICAgICAgZWxzZSBpZiAodGhpcy5vcmlnaW5hbFBhcmVudF8pIHsKICAgICAgICAgIHRoaXMub3JpZ2luYWxQYXJlbnRfLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICAgIH0KICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfKTsKICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5yZXF1ZXN0UHJlc2VudCA9IGZ1bmN0aW9uIChsYXllcnMpIHsKICAgICAgdmFyIHdhc1ByZXNlbnRpbmcgPSB0aGlzLmlzUHJlc2VudGluZzsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZiAoIShsYXllcnMgaW5zdGFuY2VvZiBBcnJheSkpIHsKICAgICAgICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLnJlcXVlc3RQcmVzZW50IHdpdGggbm9uLWFycmF5IGFyZ3VtZW50JywgJ2FuIGFycmF5IG9mIFZSTGF5ZXJzIGFzIHRoZSBmaXJzdCBhcmd1bWVudCcpOwogICAgICAgIGxheWVycyA9IFtsYXllcnNdOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKCFzZWxmLmNhcGFiaWxpdGllcy5jYW5QcmVzZW50KSB7CiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdWUkRpc3BsYXkgaXMgbm90IGNhcGFibGUgb2YgcHJlc2VudGluZy4nKSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChsYXllcnMubGVuZ3RoID09IDAgfHwgbGF5ZXJzLmxlbmd0aCA+IHNlbGYuY2FwYWJpbGl0aWVzLm1heExheWVycykgewogICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2YgbGF5ZXJzLicpKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIGluY29taW5nTGF5ZXIgPSBsYXllcnNbMF07CiAgICAgICAgaWYgKCFpbmNvbWluZ0xheWVyLnNvdXJjZSkgewogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB2YXIgbGVmdEJvdW5kcyA9IGluY29taW5nTGF5ZXIubGVmdEJvdW5kcyB8fCBkZWZhdWx0TGVmdEJvdW5kczsKICAgICAgICB2YXIgcmlnaHRCb3VuZHMgPSBpbmNvbWluZ0xheWVyLnJpZ2h0Qm91bmRzIHx8IGRlZmF1bHRSaWdodEJvdW5kczsKICAgICAgICBpZiAod2FzUHJlc2VudGluZykgewogICAgICAgICAgdmFyIGxheWVyID0gc2VsZi5sYXllcl87CiAgICAgICAgICBpZiAobGF5ZXIuc291cmNlICE9PSBpbmNvbWluZ0xheWVyLnNvdXJjZSkgewogICAgICAgICAgICBsYXllci5zb3VyY2UgPSBpbmNvbWluZ0xheWVyLnNvdXJjZTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICAgIGxheWVyLmxlZnRCb3VuZHNbaV0gPSBsZWZ0Qm91bmRzW2ldOwogICAgICAgICAgICBsYXllci5yaWdodEJvdW5kc1tpXSA9IHJpZ2h0Qm91bmRzW2ldOwogICAgICAgICAgfQogICAgICAgICAgc2VsZi53cmFwRm9yRnVsbHNjcmVlbihzZWxmLmxheWVyXy5zb3VyY2UpOwogICAgICAgICAgc2VsZi51cGRhdGVQcmVzZW50XygpOwogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBzZWxmLmxheWVyXyA9IHsKICAgICAgICAgIHByZWRpc3RvcnRlZDogaW5jb21pbmdMYXllci5wcmVkaXN0b3J0ZWQsCiAgICAgICAgICBzb3VyY2U6IGluY29taW5nTGF5ZXIuc291cmNlLAogICAgICAgICAgbGVmdEJvdW5kczogbGVmdEJvdW5kcy5zbGljZSgwKSwKICAgICAgICAgIHJpZ2h0Qm91bmRzOiByaWdodEJvdW5kcy5zbGljZSgwKQogICAgICAgIH07CiAgICAgICAgc2VsZi53YWl0aW5nRm9yUHJlc2VudF8gPSBmYWxzZTsKICAgICAgICBpZiAoc2VsZi5sYXllcl8gJiYgc2VsZi5sYXllcl8uc291cmNlKSB7CiAgICAgICAgICB2YXIgZnVsbHNjcmVlbkVsZW1lbnQgPSBzZWxmLndyYXBGb3JGdWxsc2NyZWVuKHNlbGYubGF5ZXJfLnNvdXJjZSk7CiAgICAgICAgICB2YXIgb25GdWxsc2NyZWVuQ2hhbmdlID0gZnVuY3Rpb24gb25GdWxsc2NyZWVuQ2hhbmdlKCkgewogICAgICAgICAgICB2YXIgYWN0dWFsRnVsbHNjcmVlbkVsZW1lbnQgPSBnZXRGdWxsc2NyZWVuRWxlbWVudCgpOwogICAgICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IGZ1bGxzY3JlZW5FbGVtZW50ID09PSBhY3R1YWxGdWxsc2NyZWVuRWxlbWVudDsKICAgICAgICAgICAgaWYgKHNlbGYuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24ubG9jaykgewogICAgICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLmxvY2soJ2xhbmRzY2FwZS1wcmltYXJ5JykuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3NjcmVlbi5vcmllbnRhdGlvbi5sb2NrKCkgZmFpbGVkIGR1ZSB0bycsIGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7CiAgICAgICAgICAgICAgc2VsZi5iZWdpblByZXNlbnRfKCk7CiAgICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmIChzY3JlZW4ub3JpZW50YXRpb24gJiYgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaykgewogICAgICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5XcmFwcGVyKCk7CiAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlV2FrZUxvY2soKTsKICAgICAgICAgICAgICBzZWxmLmVuZFByZXNlbnRfKCk7CiAgICAgICAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIG9uRnVsbHNjcmVlbkVycm9yID0gZnVuY3Rpb24gb25GdWxsc2NyZWVuRXJyb3IoKSB7CiAgICAgICAgICAgIGlmICghc2VsZi53YWl0aW5nRm9yUHJlc2VudF8pIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlcigpOwogICAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7CiAgICAgICAgICAgIHNlbGYuZGlzYWJsZVdha2VMb2NrKCk7CiAgICAgICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7CiAgICAgICAgICAgIHNlbGYuaXNQcmVzZW50aW5nID0gZmFsc2U7CiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBwcmVzZW50LicpKTsKICAgICAgICAgIH07CiAgICAgICAgICBzZWxmLmFkZEZ1bGxzY3JlZW5MaXN0ZW5lcnNfKGZ1bGxzY3JlZW5FbGVtZW50LCBvbkZ1bGxzY3JlZW5DaGFuZ2UsIG9uRnVsbHNjcmVlbkVycm9yKTsKICAgICAgICAgIGlmIChyZXF1ZXN0RnVsbHNjcmVlbihmdWxsc2NyZWVuRWxlbWVudCkpIHsKICAgICAgICAgICAgc2VsZi5lbmFibGVXYWtlTG9jaygpOwogICAgICAgICAgICBzZWxmLndhaXRpbmdGb3JQcmVzZW50XyA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgaWYgKGlzSU9TKCkgfHwgaXNXZWJWaWV3QW5kcm9pZCgpKSB7CiAgICAgICAgICAgIHNlbGYuZW5hYmxlV2FrZUxvY2soKTsKICAgICAgICAgICAgc2VsZi5pc1ByZXNlbnRpbmcgPSB0cnVlOwogICAgICAgICAgICBzZWxmLmJlZ2luUHJlc2VudF8oKTsKICAgICAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIXNlbGYud2FpdGluZ0ZvclByZXNlbnRfICYmICFpc0lPUygpKSB7CiAgICAgICAgICBleGl0RnVsbHNjcmVlbigpOwogICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVW5hYmxlIHRvIHByZXNlbnQuJykpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5leGl0UHJlc2VudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHdhc1ByZXNlbnRpbmcgPSB0aGlzLmlzUHJlc2VudGluZzsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlOwogICAgICB0aGlzLmxheWVyXyA9IG51bGw7CiAgICAgIHRoaXMuZGlzYWJsZVdha2VMb2NrKCk7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKHdhc1ByZXNlbnRpbmcpIHsKICAgICAgICAgIGlmICghZXhpdEZ1bGxzY3JlZW4oKSAmJiBpc0lPUygpKSB7CiAgICAgICAgICAgIHNlbGYuZW5kUHJlc2VudF8oKTsKICAgICAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc1dlYlZpZXdBbmRyb2lkKCkpIHsKICAgICAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlcigpOwogICAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7CiAgICAgICAgICAgIHNlbGYuZW5kUHJlc2VudF8oKTsKICAgICAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignV2FzIG5vdCBwcmVzZW50aW5nIHRvIFZSRGlzcGxheS4nKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLmdldExheWVycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMubGF5ZXJfKSB7CiAgICAgICAgcmV0dXJuIFt0aGlzLmxheWVyX107CiAgICAgIH0KICAgICAgcmV0dXJuIFtdOwogICAgfTsKICAgIFZSRGlzcGxheS5wcm90b3R5cGUuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB7IGRldGFpbDogeyBkaXNwbGF5OiB0aGlzIH0gfSk7CiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLmZpcmVWUkRpc3BsYXlDb25uZWN0XyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd2cmRpc3BsYXljb25uZWN0JywgeyBkZXRhaWw6IHsgZGlzcGxheTogdGhpcyB9IH0pOwogICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5hZGRGdWxsc2NyZWVuTGlzdGVuZXJzXyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjaGFuZ2VIYW5kbGVyLCBlcnJvckhhbmRsZXIpIHsKICAgICAgdGhpcy5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXygpOwogICAgICB0aGlzLmZ1bGxzY3JlZW5FdmVudFRhcmdldF8gPSBlbGVtZW50OwogICAgICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXyA9IGNoYW5nZUhhbmRsZXI7CiAgICAgIHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl8gPSBlcnJvckhhbmRsZXI7CiAgICAgIGlmIChjaGFuZ2VIYW5kbGVyKSB7CiAgICAgICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbmFibGVkKSB7CiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCkgewogICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpOwogICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQpIHsKICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbmFibGVkKSB7CiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGVycm9ySGFuZGxlcikgewogICAgICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCkgewogICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkKSB7CiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpOwogICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQpIHsKICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpOwogICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZCkgewogICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIFZSRGlzcGxheS5wcm90b3R5cGUucmVtb3ZlRnVsbHNjcmVlbkxpc3RlbmVyc18gPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfKSByZXR1cm47CiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfOwogICAgICBpZiAodGhpcy5mdWxsc2NyZWVuQ2hhbmdlSGFuZGxlcl8pIHsKICAgICAgICB2YXIgY2hhbmdlSGFuZGxlciA9IHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfOwogICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgICAgfQogICAgICBpZiAodGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXykgewogICAgICAgIHZhciBlcnJvckhhbmRsZXIgPSB0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfOwogICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7CiAgICAgIH0KICAgICAgdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfID0gbnVsbDsKICAgICAgdGhpcy5mdWxsc2NyZWVuQ2hhbmdlSGFuZGxlcl8gPSBudWxsOwogICAgICB0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfID0gbnVsbDsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLmVuYWJsZVdha2VMb2NrID0gZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcy53YWtlbG9ja18pIHsKICAgICAgICB0aGlzLndha2Vsb2NrXy5lbmFibGUoKTsKICAgICAgfQogICAgfTsKICAgIFZSRGlzcGxheS5wcm90b3R5cGUuZGlzYWJsZVdha2VMb2NrID0gZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcy53YWtlbG9ja18pIHsKICAgICAgICB0aGlzLndha2Vsb2NrXy5kaXNhYmxlKCk7CiAgICAgIH0KICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLmJlZ2luUHJlc2VudF8gPSBmdW5jdGlvbiAoKSB7CiAgICB9OwogICAgVlJEaXNwbGF5LnByb3RvdHlwZS5lbmRQcmVzZW50XyA9IGZ1bmN0aW9uICgpIHsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKHBvc2UpIHsKICAgIH07CiAgICBWUkRpc3BsYXkucHJvdG90eXBlLmdldEV5ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbiAod2hpY2hFeWUpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogICAgdmFyIGNvbmZpZyA9IHsKICAgICAgQURESVRJT05BTF9WSUVXRVJTOiBbXSwKICAgICAgREVGQVVMVF9WSUVXRVI6ICcnLAogICAgICBNT0JJTEVfV0FLRV9MT0NLOiB0cnVlLAogICAgICBERUJVRzogZmFsc2UsCiAgICAgIERQREJfVVJMOiAnaHR0cHM6Ly9kcGRiLndlYnZyLnJvY2tzL2RwZGIuanNvbicsCiAgICAgIEtfRklMVEVSOiAwLjk4LAogICAgICBQUkVESUNUSU9OX1RJTUVfUzogMC4wNDAsCiAgICAgIENBUkRCT0FSRF9VSV9ESVNBQkxFRDogZmFsc2UsCiAgICAgIFJPVEFURV9JTlNUUlVDVElPTlNfRElTQUJMRUQ6IGZhbHNlLAogICAgICBZQVdfT05MWTogZmFsc2UsCiAgICAgIEJVRkZFUl9TQ0FMRTogMC41LAogICAgICBESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1M6IGZhbHNlCiAgICB9OwogICAgdmFyIEV5ZSA9IHsKICAgICAgTEVGVDogJ2xlZnQnLAogICAgICBSSUdIVDogJ3JpZ2h0JwogICAgfTsKICAgIGZ1bmN0aW9uIENhcmRib2FyZFZSRGlzcGxheShjb25maWckJDEpIHsKICAgICAgdmFyIGRlZmF1bHRzID0gZXh0ZW5kKHt9LCBjb25maWcpOwogICAgICBjb25maWckJDEgPSBleHRlbmQoZGVmYXVsdHMsIGNvbmZpZyQkMSB8fCB7fSk7CiAgICAgIFZSRGlzcGxheS5jYWxsKHRoaXMsIHsKICAgICAgICB3YWtlbG9jazogY29uZmlnJCQxLk1PQklMRV9XQUtFX0xPQ0sKICAgICAgfSk7CiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnJCQxOwogICAgICB0aGlzLmRpc3BsYXlOYW1lID0gJ0NhcmRib2FyZCBWUkRpc3BsYXknOwogICAgICB0aGlzLmNhcGFiaWxpdGllcyA9IG5ldyBWUkRpc3BsYXlDYXBhYmlsaXRpZXMoewogICAgICAgIGhhc1Bvc2l0aW9uOiBmYWxzZSwKICAgICAgICBoYXNPcmllbnRhdGlvbjogdHJ1ZSwKICAgICAgICBoYXNFeHRlcm5hbERpc3BsYXk6IGZhbHNlLAogICAgICAgIGNhblByZXNlbnQ6IHRydWUsCiAgICAgICAgbWF4TGF5ZXJzOiAxCiAgICAgIH0pOwogICAgICB0aGlzLnN0YWdlUGFyYW1ldGVycyA9IG51bGw7CiAgICAgIHRoaXMuYnVmZmVyU2NhbGVfID0gdGhpcy5jb25maWcuQlVGRkVSX1NDQUxFOwogICAgICB0aGlzLnBvc2VTZW5zb3JfID0gbmV3IFBvc2VTZW5zb3IodGhpcy5jb25maWcpOwogICAgICB0aGlzLmRpc3RvcnRlcl8gPSBudWxsOwogICAgICB0aGlzLmNhcmRib2FyZFVJXyA9IG51bGw7CiAgICAgIHRoaXMuZHBkYl8gPSBuZXcgRHBkYih0aGlzLmNvbmZpZy5EUERCX1VSTCwgdGhpcy5vbkRldmljZVBhcmFtc1VwZGF0ZWRfLmJpbmQodGhpcykpOwogICAgICB0aGlzLmRldmljZUluZm9fID0gbmV3IERldmljZUluZm8odGhpcy5kcGRiXy5nZXREZXZpY2VQYXJhbXMoKSwgY29uZmlnJCQxLkFERElUSU9OQUxfVklFV0VSUyk7CiAgICAgIHRoaXMudmlld2VyU2VsZWN0b3JfID0gbmV3IFZpZXdlclNlbGVjdG9yKGNvbmZpZyQkMS5ERUZBVUxUX1ZJRVdFUik7CiAgICAgIHRoaXMudmlld2VyU2VsZWN0b3JfLm9uQ2hhbmdlKHRoaXMub25WaWV3ZXJDaGFuZ2VkXy5iaW5kKHRoaXMpKTsKICAgICAgdGhpcy5kZXZpY2VJbmZvXy5zZXRWaWV3ZXIodGhpcy52aWV3ZXJTZWxlY3Rvcl8uZ2V0Q3VycmVudFZpZXdlcigpKTsKICAgICAgaWYgKCF0aGlzLmNvbmZpZy5ST1RBVEVfSU5TVFJVQ1RJT05TX0RJU0FCTEVEKSB7CiAgICAgICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfID0gbmV3IFJvdGF0ZUluc3RydWN0aW9ucygpOwogICAgICB9CiAgICAgIGlmIChpc0lPUygpKSB7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemVfLmJpbmQodGhpcykpOwogICAgICB9CiAgICB9CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShWUkRpc3BsYXkucHJvdG90eXBlKTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuX2dldFBvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgcG9zaXRpb246IG51bGwsCiAgICAgICAgb3JpZW50YXRpb246IHRoaXMucG9zZVNlbnNvcl8uZ2V0T3JpZW50YXRpb24oKSwKICAgICAgICBsaW5lYXJWZWxvY2l0eTogbnVsbCwKICAgICAgICBsaW5lYXJBY2NlbGVyYXRpb246IG51bGwsCiAgICAgICAgYW5ndWxhclZlbG9jaXR5OiBudWxsLAogICAgICAgIGFuZ3VsYXJBY2NlbGVyYXRpb246IG51bGwKICAgICAgfTsKICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLl9yZXNldFBvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLnBvc2VTZW5zb3JfLnJlc2V0UG9zZSkgewogICAgICAgIHRoaXMucG9zZVNlbnNvcl8ucmVzZXRQb3NlKCk7CiAgICAgIH0KICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLl9nZXRGaWVsZE9mVmlldyA9IGZ1bmN0aW9uICh3aGljaEV5ZSkgewogICAgICB2YXIgZmllbGRPZlZpZXc7CiAgICAgIGlmICh3aGljaEV5ZSA9PSBFeWUuTEVGVCkgewogICAgICAgIGZpZWxkT2ZWaWV3ID0gdGhpcy5kZXZpY2VJbmZvXy5nZXRGaWVsZE9mVmlld0xlZnRFeWUoKTsKICAgICAgfSBlbHNlIGlmICh3aGljaEV5ZSA9PSBFeWUuUklHSFQpIHsKICAgICAgICBmaWVsZE9mVmlldyA9IHRoaXMuZGV2aWNlSW5mb18uZ2V0RmllbGRPZlZpZXdSaWdodEV5ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgZXllIHByb3ZpZGVkOiAlcycsIHdoaWNoRXllKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gZmllbGRPZlZpZXc7CiAgICB9OwogICAgQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5fZ2V0RXllT2Zmc2V0ID0gZnVuY3Rpb24gKHdoaWNoRXllKSB7CiAgICAgIHZhciBvZmZzZXQ7CiAgICAgIGlmICh3aGljaEV5ZSA9PSBFeWUuTEVGVCkgewogICAgICAgIG9mZnNldCA9IFstdGhpcy5kZXZpY2VJbmZvXy52aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgKiAwLjUsIDAuMCwgMC4wXTsKICAgICAgfSBlbHNlIGlmICh3aGljaEV5ZSA9PSBFeWUuUklHSFQpIHsKICAgICAgICBvZmZzZXQgPSBbdGhpcy5kZXZpY2VJbmZvXy52aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgKiAwLjUsIDAuMCwgMC4wXTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGV5ZSBwcm92aWRlZDogJXMnLCB3aGljaEV5ZSk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIG9mZnNldDsKICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmdldEV5ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbiAod2hpY2hFeWUpIHsKICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEV5ZU9mZnNldCh3aGljaEV5ZSk7CiAgICAgIHZhciBmaWVsZE9mVmlldyA9IHRoaXMuX2dldEZpZWxkT2ZWaWV3KHdoaWNoRXllKTsKICAgICAgdmFyIGV5ZVBhcmFtcyA9IHsKICAgICAgICBvZmZzZXQ6IG9mZnNldCwKICAgICAgICByZW5kZXJXaWR0aDogdGhpcy5kZXZpY2VJbmZvXy5kZXZpY2Uud2lkdGggKiAwLjUgKiB0aGlzLmJ1ZmZlclNjYWxlXywKICAgICAgICByZW5kZXJIZWlnaHQ6IHRoaXMuZGV2aWNlSW5mb18uZGV2aWNlLmhlaWdodCAqIHRoaXMuYnVmZmVyU2NhbGVfCiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleWVQYXJhbXMsICdmaWVsZE9mVmlldycsIHsKICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgZGVwcmVjYXRlV2FybmluZygnVlJGaWVsZE9mVmlldycsICdWUkZyYW1lRGF0YVwncyBwcm9qZWN0aW9uIG1hdHJpY2VzJyk7CiAgICAgICAgICByZXR1cm4gZmllbGRPZlZpZXc7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGV5ZVBhcmFtczsKICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uRGV2aWNlUGFyYW1zVXBkYXRlZF8gPSBmdW5jdGlvbiAobmV3UGFyYW1zKSB7CiAgICAgIGlmICh0aGlzLmNvbmZpZy5ERUJVRykgewogICAgICAgIGNvbnNvbGUubG9nKCdEUERCIHJlcG9ydGVkIHRoYXQgZGV2aWNlIHBhcmFtcyB3ZXJlIHVwZGF0ZWQuJyk7CiAgICAgIH0KICAgICAgdGhpcy5kZXZpY2VJbmZvXy51cGRhdGVEZXZpY2VQYXJhbXMobmV3UGFyYW1zKTsKICAgICAgaWYgKHRoaXMuZGlzdG9ydGVyXykgewogICAgICAgIHRoaXMuZGlzdG9ydGVyXy51cGRhdGVEZXZpY2VJbmZvKHRoaXMuZGV2aWNlSW5mb18pOwogICAgICB9CiAgICB9OwogICAgQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS51cGRhdGVCb3VuZHNfID0gZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcy5sYXllcl8gJiYgdGhpcy5kaXN0b3J0ZXJfICYmICh0aGlzLmxheWVyXy5sZWZ0Qm91bmRzIHx8IHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKSkgewogICAgICAgIHRoaXMuZGlzdG9ydGVyXy5zZXRUZXh0dXJlQm91bmRzKHRoaXMubGF5ZXJfLmxlZnRCb3VuZHMsIHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKTsKICAgICAgfQogICAgfTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYmVnaW5QcmVzZW50XyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGdsID0gdGhpcy5sYXllcl8uc291cmNlLmdldENvbnRleHQoJ3dlYmdsJyk7CiAgICAgIGlmICghZ2wpIGdsID0gdGhpcy5sYXllcl8uc291cmNlLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpOwogICAgICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbDInKTsKICAgICAgaWYgKCFnbCkgcmV0dXJuOwogICAgICBpZiAodGhpcy5sYXllcl8ucHJlZGlzdG9ydGVkKSB7CiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5DQVJEQk9BUkRfVUlfRElTQUJMRUQpIHsKICAgICAgICAgIGdsLmNhbnZhcy53aWR0aCA9IGdldFNjcmVlbldpZHRoKCkgKiB0aGlzLmJ1ZmZlclNjYWxlXzsKICAgICAgICAgIGdsLmNhbnZhcy5oZWlnaHQgPSBnZXRTY3JlZW5IZWlnaHQoKSAqIHRoaXMuYnVmZmVyU2NhbGVfOwogICAgICAgICAgdGhpcy5jYXJkYm9hcmRVSV8gPSBuZXcgQ2FyZGJvYXJkVUkoZ2wpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIXRoaXMuY29uZmlnLkNBUkRCT0FSRF9VSV9ESVNBQkxFRCkgewogICAgICAgICAgdGhpcy5jYXJkYm9hcmRVSV8gPSBuZXcgQ2FyZGJvYXJkVUkoZ2wpOwogICAgICAgIH0KICAgICAgICB0aGlzLmRpc3RvcnRlcl8gPSBuZXcgQ2FyZGJvYXJkRGlzdG9ydGVyKGdsLCB0aGlzLmNhcmRib2FyZFVJXywgdGhpcy5jb25maWcuQlVGRkVSX1NDQUxFLCB0aGlzLmNvbmZpZy5ESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1MpOwogICAgICAgIHRoaXMuZGlzdG9ydGVyXy51cGRhdGVEZXZpY2VJbmZvKHRoaXMuZGV2aWNlSW5mb18pOwogICAgICB9CiAgICAgIGlmICh0aGlzLmNhcmRib2FyZFVJXykgewogICAgICAgIHRoaXMuY2FyZGJvYXJkVUlfLmxpc3RlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8uc2hvdyh0aGlzLmxheWVyXy5zb3VyY2UucGFyZW50RWxlbWVudCk7CiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHRoaXMuZXhpdFByZXNlbnQoKTsKICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgfQogICAgICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7CiAgICAgICAgaWYgKGlzTGFuZHNjYXBlTW9kZSgpICYmIGlzTW9iaWxlKCkpIHsKICAgICAgICAgIHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXy5zaG93VGVtcG9yYXJpbHkoMzAwMCwgdGhpcy5sYXllcl8uc291cmNlLnBhcmVudEVsZW1lbnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMub3JpZW50YXRpb25IYW5kbGVyID0gdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlXy5iaW5kKHRoaXMpOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9yaWVudGF0aW9uSGFuZGxlcik7CiAgICAgIHRoaXMudnJkaXNwbGF5cHJlc2VudGNoYW5nZUhhbmRsZXIgPSB0aGlzLnVwZGF0ZUJvdW5kc18uYmluZCh0aGlzKTsKICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyKTsKICAgICAgdGhpcy5maXJlVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXygpOwogICAgfTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZW5kUHJlc2VudF8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLmRpc3RvcnRlcl8pIHsKICAgICAgICB0aGlzLmRpc3RvcnRlcl8uZGVzdHJveSgpOwogICAgICAgIHRoaXMuZGlzdG9ydGVyXyA9IG51bGw7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuY2FyZGJvYXJkVUlfKSB7CiAgICAgICAgdGhpcy5jYXJkYm9hcmRVSV8uZGVzdHJveSgpOwogICAgICAgIHRoaXMuY2FyZGJvYXJkVUlfID0gbnVsbDsKICAgICAgfQogICAgICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7CiAgICAgICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfLmhpZGUoKTsKICAgICAgfQogICAgICB0aGlzLnZpZXdlclNlbGVjdG9yXy5oaWRlKCk7CiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMub3JpZW50YXRpb25IYW5kbGVyKTsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyKTsKICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLnVwZGF0ZVByZXNlbnRfID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLmVuZFByZXNlbnRfKCk7CiAgICAgIHRoaXMuYmVnaW5QcmVzZW50XygpOwogICAgfTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAocG9zZSkgewogICAgICBpZiAodGhpcy5kaXN0b3J0ZXJfKSB7CiAgICAgICAgdGhpcy51cGRhdGVCb3VuZHNfKCk7CiAgICAgICAgdGhpcy5kaXN0b3J0ZXJfLnN1Ym1pdEZyYW1lKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5jYXJkYm9hcmRVSV8gJiYgdGhpcy5sYXllcl8pIHsKICAgICAgICB2YXIgZ2wgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKTsKICAgICAgICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTsKICAgICAgICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbDInKTsKICAgICAgICB2YXIgY2FudmFzID0gZ2wuY2FudmFzOwogICAgICAgIGlmIChjYW52YXMud2lkdGggIT0gdGhpcy5sYXN0V2lkdGggfHwgY2FudmFzLmhlaWdodCAhPSB0aGlzLmxhc3RIZWlnaHQpIHsKICAgICAgICAgIHRoaXMuY2FyZGJvYXJkVUlfLm9uUmVzaXplKCk7CiAgICAgICAgfQogICAgICAgIHRoaXMubGFzdFdpZHRoID0gY2FudmFzLndpZHRoOwogICAgICAgIHRoaXMubGFzdEhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7CiAgICAgICAgdGhpcy5jYXJkYm9hcmRVSV8ucmVuZGVyKCk7CiAgICAgIH0KICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uT3JpZW50YXRpb25DaGFuZ2VfID0gZnVuY3Rpb24gKGUpIHsKICAgICAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8uaGlkZSgpOwogICAgICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7CiAgICAgICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfLnVwZGF0ZSgpOwogICAgICB9CiAgICAgIHRoaXMub25SZXNpemVfKCk7CiAgICB9OwogICAgQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vblJlc2l6ZV8gPSBmdW5jdGlvbiAoZSkgewogICAgICBpZiAodGhpcy5sYXllcl8pIHsKICAgICAgICB2YXIgZ2wgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKTsKICAgICAgICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTsKICAgICAgICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbDInKTsKICAgICAgICB2YXIgY3NzUHJvcGVydGllcyA9IFsncG9zaXRpb246IGFic29sdXRlJywgJ3RvcDogMCcsICdsZWZ0OiAwJywKICAgICAgICAnd2lkdGg6IDEwMHZ3JywgJ2hlaWdodDogMTAwdmgnLCAnYm9yZGVyOiAwJywgJ21hcmdpbjogMCcsCiAgICAgICAgJ3BhZGRpbmc6IDBweCcsICdib3gtc2l6aW5nOiBjb250ZW50LWJveCddOwogICAgICAgIGdsLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgY3NzUHJvcGVydGllcy5qb2luKCc7ICcpICsgJzsnKTsKICAgICAgICBzYWZhcmlDc3NTaXplV29ya2Fyb3VuZChnbC5jYW52YXMpOwogICAgICB9CiAgICB9OwogICAgQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vblZpZXdlckNoYW5nZWRfID0gZnVuY3Rpb24gKHZpZXdlcikgewogICAgICB0aGlzLmRldmljZUluZm9fLnNldFZpZXdlcih2aWV3ZXIpOwogICAgICBpZiAodGhpcy5kaXN0b3J0ZXJfKSB7CiAgICAgICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7CiAgICAgIH0KICAgICAgdGhpcy5maXJlVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXygpOwogICAgfTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZmlyZVZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgndnJkaXNwbGF5ZGV2aWNlcGFyYW1zY2hhbmdlJywgewogICAgICAgIGRldGFpbDogewogICAgICAgICAgdnJkaXNwbGF5OiB0aGlzLAogICAgICAgICAgZGV2aWNlSW5mbzogdGhpcy5kZXZpY2VJbmZvXwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgIH07CiAgICBDYXJkYm9hcmRWUkRpc3BsYXkuVlJGcmFtZURhdGEgPSBWUkZyYW1lRGF0YTsKICAgIENhcmRib2FyZFZSRGlzcGxheS5WUkRpc3BsYXkgPSBWUkRpc3BsYXk7CiAgICByZXR1cm4gQ2FyZGJvYXJkVlJEaXNwbGF5OwogICAgfSkpKTsKICAgIH0pOwogICAgdmFyIENhcmRib2FyZFZSRGlzcGxheSA9IHVud3JhcEV4cG9ydHMoY2FyZGJvYXJkVnJEaXNwbGF5KTsKCiAgICBjbGFzcyBYUkRldmljZSBleHRlbmRzIEV2ZW50VGFyZ2V0IHsKICAgICAgY29uc3RydWN0b3IoZ2xvYmFsKSB7CiAgICAgICAgc3VwZXIoKTsKICAgICAgICB0aGlzLmdsb2JhbCA9IGdsb2JhbDsKICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplID0gdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpOwogICAgICAgIHRoaXMuZ2xvYmFsLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uV2luZG93UmVzaXplKTsKICAgICAgICB0aGlzLmVudmlyb25tZW50QmxlbmRNb2RlID0gJ29wYXF1ZSc7CiAgICAgIH0KICAgICAgb25CYXNlTGF5ZXJTZXQoc2Vzc2lvbklkLCBsYXllcikgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGlzU2Vzc2lvblN1cHBvcnRlZChtb2RlKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgaXNGZWF0dXJlU3VwcG9ydGVkKGZlYXR1cmVEZXNjcmlwdG9yKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgYXN5bmMgcmVxdWVzdFNlc3Npb24obW9kZSwgZW5hYmxlZEZlYXR1cmVzKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgb25GcmFtZVN0YXJ0KHNlc3Npb25JZCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIG9uRnJhbWVFbmQoc2Vzc2lvbklkKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgZG9lc1Nlc3Npb25TdXBwb3J0UmVmZXJlbmNlU3BhY2Uoc2Vzc2lvbklkLCB0eXBlKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgcmVxdWVzdFN0YWdlQm91bmRzKCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGFzeW5jIHJlcXVlc3RGcmFtZU9mUmVmZXJlbmNlVHJhbnNmb3JtKHR5cGUsIG9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9CiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGVuZFNlc3Npb24oc2Vzc2lvbklkKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgZ2V0Vmlld3BvcnQoc2Vzc2lvbklkLCBleWUsIGxheWVyLCB0YXJnZXQpIHsgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTsgfQogICAgICBnZXRQcm9qZWN0aW9uTWF0cml4KGV5ZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGdldEJhc2VQb3NlTWF0cml4KCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGdldEJhc2VWaWV3TWF0cml4KGV5ZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOyB9CiAgICAgIGdldElucHV0U291cmNlcygpIHsgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTsgfQogICAgICBnZXRJbnB1dFBvc2UoaW5wdXRTb3VyY2UsIGNvb3JkaW5hdGVTeXN0ZW0sIHBvc2VUeXBlKSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7IH0KICAgICAgb25XaW5kb3dSZXNpemUoKSB7CiAgICAgICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpOwogICAgICB9CiAgICB9CgogICAgbGV0IGRheWRyZWFtID0gewogICAgICBtYXBwaW5nOiAnJywKICAgICAgcHJvZmlsZXM6IFsnZ29vZ2xlLWRheWRyZWFtJywgJ2dlbmVyaWMtdHJpZ2dlci10b3VjaHBhZCddLAogICAgICBidXR0b25zOiB7CiAgICAgICAgbGVuZ3RoOiAzLAogICAgICAgIDA6IG51bGwsCiAgICAgICAgMTogbnVsbCwKICAgICAgICAyOiAwCiAgICAgIH0sCiAgICB9OwogICAgbGV0IHZpdmVGb2N1cyA9IHsKICAgICAgbWFwcGluZzogJ3hyLXN0YW5kYXJkJywKICAgICAgcHJvZmlsZXM6IFsnaHRjLXZpdmUtZm9jdXMnLCAnZ2VuZXJpYy10cmlnZ2VyLXRvdWNocGFkJ10sCiAgICAgIGJ1dHRvbnM6IHsKICAgICAgICBsZW5ndGg6IDMsCiAgICAgICAgMDogMSwKICAgICAgICAxOiBudWxsLAogICAgICAgIDI6IDAKICAgICAgfSwKICAgIH07CiAgICBsZXQgb2N1bHVzR28gPSB7CiAgICAgIG1hcHBpbmc6ICd4ci1zdGFuZGFyZCcsCiAgICAgIHByb2ZpbGVzOiBbJ29jdWx1cy1nbycsICdnZW5lcmljLXRyaWdnZXItdG91Y2hwYWQnXSwKICAgICAgYnV0dG9uczogewogICAgICAgIGxlbmd0aDogMywKICAgICAgICAwOiAxLAogICAgICAgIDE6IG51bGwsCiAgICAgICAgMjogMAogICAgICB9LAogICAgICBncmlwVHJhbnNmb3JtOiB7CiAgICAgICAgb3JpZW50YXRpb246IFtNYXRoLlBJICogMC4xMSwgMCwgMCwgMV0KICAgICAgfQogICAgfTsKICAgIGxldCBvY3VsdXNUb3VjaCA9IHsKICAgICAgbWFwcGluZzogJ3hyLXN0YW5kYXJkJywKICAgICAgZGlzcGxheVByb2ZpbGVzOiB7CiAgICAgICAgJ09jdWx1cyBRdWVzdCc6IFsnb2N1bHVzLXRvdWNoLXYyJywgJ29jdWx1cy10b3VjaCcsICdnZW5lcmljLXRyaWdnZXItc3F1ZWV6ZS10aHVtYnN0aWNrJ10KICAgICAgfSwKICAgICAgcHJvZmlsZXM6IFsnb2N1bHVzLXRvdWNoJywgJ2dlbmVyaWMtdHJpZ2dlci1zcXVlZXplLXRodW1ic3RpY2snXSwKICAgICAgYXhlczogewogICAgICAgIGxlbmd0aDogNCwKICAgICAgICAwOiBudWxsLAogICAgICAgIDE6IG51bGwsCiAgICAgICAgMjogMCwKICAgICAgICAzOiAxCiAgICAgIH0sCiAgICAgIGJ1dHRvbnM6IHsKICAgICAgICBsZW5ndGg6IDcsCiAgICAgICAgMDogMSwKICAgICAgICAxOiAyLAogICAgICAgIDI6IG51bGwsCiAgICAgICAgMzogMCwKICAgICAgICA0OiAzLAogICAgICAgIDU6IDQsCiAgICAgICAgNjogbnVsbAogICAgICB9LAogICAgICBncmlwVHJhbnNmb3JtOiB7CiAgICAgICAgcG9zaXRpb246IFswLCAtMC4wMiwgMC4wNCwgMV0sCiAgICAgICAgb3JpZW50YXRpb246IFtNYXRoLlBJICogMC4xMSwgMCwgMCwgMV0KICAgICAgfQogICAgfTsKICAgIGxldCBvcGVuVnIgPSB7CiAgICAgIG1hcHBpbmc6ICd4ci1zdGFuZGFyZCcsCiAgICAgIHByb2ZpbGVzOiBbJ2h0Yy12aXZlJywgJ2dlbmVyaWMtdHJpZ2dlci1zcXVlZXplLXRvdWNocGFkJ10sCiAgICAgIGRpc3BsYXlQcm9maWxlczogewogICAgICAgICdIVEMgVml2ZSc6IFsnaHRjLXZpdmUnLCAnZ2VuZXJpYy10cmlnZ2VyLXNxdWVlemUtdG91Y2hwYWQnXSwKICAgICAgICAnSFRDIFZpdmUgRFZUJzogWydodGMtdml2ZScsICdnZW5lcmljLXRyaWdnZXItc3F1ZWV6ZS10b3VjaHBhZCddLAogICAgICAgICdWYWx2ZSBJbmRleCc6IFsndmFsdmUtaW5kZXgnLCAnZ2VuZXJpYy10cmlnZ2VyLXNxdWVlemUtdG91Y2hwYWQtdGh1bWJzdGljayddCiAgICAgIH0sCiAgICAgIGJ1dHRvbnM6IHsKICAgICAgICBsZW5ndGg6IDMsCiAgICAgICAgMDogMSwKICAgICAgICAxOiAyLAogICAgICAgIDI6IDAKICAgICAgfSwKICAgICAgZ3JpcFRyYW5zZm9ybTogewogICAgICAgIHBvc2l0aW9uOiBbMCwgMCwgMC4wNSwgMV0sCiAgICAgIH0sCiAgICAgIHRhcmdldFJheVRyYW5zZm9ybTogewogICAgICAgIG9yaWVudGF0aW9uOiBbTWF0aC5QSSAqIC0wLjA4LCAwLCAwLCAxXQogICAgICB9LAogICAgICB1c2VyQWdlbnRPdmVycmlkZXM6IHsKICAgICAgICAiRmlyZWZveCI6IHsKICAgICAgICAgIGF4ZXM6IHsKICAgICAgICAgICAgaW52ZXJ0OiBbMSwgM10KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgICBsZXQgc2Ftc3VuZ0dlYXJWUiA9IHsKICAgICAgbWFwcGluZzogJ3hyLXN0YW5kYXJkJywKICAgICAgcHJvZmlsZXM6IFsnc2Ftc3VuZy1nZWFydnInLCAnZ2VuZXJpYy10cmlnZ2VyLXRvdWNocGFkJ10sCiAgICAgIGJ1dHRvbnM6IHsKICAgICAgICBsZW5ndGg6IDMsCiAgICAgICAgMDogMSwKICAgICAgICAxOiBudWxsLAogICAgICAgIDI6IDAKICAgICAgfSwKICAgICAgZ3JpcFRyYW5zZm9ybTogewogICAgICAgIG9yaWVudGF0aW9uOiBbTWF0aC5QSSAqIDAuMTEsIDAsIDAsIDFdCiAgICAgIH0KICAgIH07CiAgICBsZXQgc2Ftc3VuZ09keXNzZXkgPSB7CiAgICAgIG1hcHBpbmc6ICd4ci1zdGFuZGFyZCcsCiAgICAgIHByb2ZpbGVzOiBbJ3NhbXN1bmctb2R5c3NleScsICdtaWNyb3NvZnQtbWl4ZWQtcmVhbGl0eScsICdnZW5lcmljLXRyaWdnZXItc3F1ZWV6ZS10b3VjaHBhZC10aHVtYnN0aWNrJ10sCiAgICAgIGJ1dHRvbnM6IHsKICAgICAgICBsZW5ndGg6IDQsCiAgICAgICAgMDogMSwKICAgICAgICAxOiAwLAogICAgICAgIDI6IDIsCiAgICAgICAgMzogNCwKICAgICAgfSwKICAgICAgZ3JpcFRyYW5zZm9ybTogewogICAgICAgIHBvc2l0aW9uOiBbMCwgLTAuMDIsIDAuMDQsIDFdLAogICAgICAgIG9yaWVudGF0aW9uOiBbTWF0aC5QSSAqIDAuMTEsIDAsIDAsIDFdCiAgICAgIH0KICAgIH07CiAgICBsZXQgd2luZG93c01peGVkUmVhbGl0eSA9IHsKICAgICAgbWFwcGluZzogJ3hyLXN0YW5kYXJkJywKICAgICAgcHJvZmlsZXM6IFsnbWljcm9zb2Z0LW1peGVkLXJlYWxpdHknLCAnZ2VuZXJpYy10cmlnZ2VyLXNxdWVlemUtdG91Y2hwYWQtdGh1bWJzdGljayddLAogICAgICBidXR0b25zOiB7CiAgICAgICAgbGVuZ3RoOiA0LAogICAgICAgIDA6IDEsCiAgICAgICAgMTogMCwKICAgICAgICAyOiAyLAogICAgICAgIDM6IDQsCiAgICAgIH0sCiAgICAgIGdyaXBUcmFuc2Zvcm06IHsKICAgICAgICBwb3NpdGlvbjogWzAsIC0wLjAyLCAwLjA0LCAxXSwKICAgICAgICBvcmllbnRhdGlvbjogW01hdGguUEkgKiAwLjExLCAwLCAwLCAxXQogICAgICB9CiAgICB9OwogICAgbGV0IEdhbWVwYWRNYXBwaW5ncyA9IHsKICAgICAgJ0RheWRyZWFtIENvbnRyb2xsZXInOiBkYXlkcmVhbSwKICAgICAgJ0dlYXIgVlIgQ29udHJvbGxlcic6IHNhbXN1bmdHZWFyVlIsCiAgICAgICdIVEMgVml2ZSBGb2N1cyBDb250cm9sbGVyJzogdml2ZUZvY3VzLAogICAgICAnT2N1bHVzIEdvIENvbnRyb2xsZXInOiBvY3VsdXNHbywKICAgICAgJ09jdWx1cyBUb3VjaCAoUmlnaHQpJzogb2N1bHVzVG91Y2gsCiAgICAgICdPY3VsdXMgVG91Y2ggKExlZnQpJzogb2N1bHVzVG91Y2gsCiAgICAgICdPcGVuVlIgR2FtZXBhZCc6IG9wZW5WciwKICAgICAgJ1NwYXRpYWwgQ29udHJvbGxlciAoU3BhdGlhbCBJbnRlcmFjdGlvbiBTb3VyY2UpIDA0NUUtMDY1QSc6IHdpbmRvd3NNaXhlZFJlYWxpdHksCiAgICAgICdTcGF0aWFsIENvbnRyb2xsZXIgKFNwYXRpYWwgSW50ZXJhY3Rpb24gU291cmNlKSAwNDVFLTA2NUQnOiBzYW1zdW5nT2R5c3NleSwKICAgICAgJ1dpbmRvd3MgTWl4ZWQgUmVhbGl0eSAoUmlnaHQpJzogd2luZG93c01peGVkUmVhbGl0eSwKICAgICAgJ1dpbmRvd3MgTWl4ZWQgUmVhbGl0eSAoTGVmdCknOiB3aW5kb3dzTWl4ZWRSZWFsaXR5LAogICAgfTsKCiAgICBjb25zdCBIRUFEX0VMQk9XX09GRlNFVF9SSUdIVEhBTkRFRCA9IGZyb21WYWx1ZXMkMSgwLjE1NSwgLTAuNDY1LCAtMC4xNSk7CiAgICBjb25zdCBIRUFEX0VMQk9XX09GRlNFVF9MRUZUSEFOREVEID0gZnJvbVZhbHVlcyQxKC0wLjE1NSwgLTAuNDY1LCAtMC4xNSk7CiAgICBjb25zdCBFTEJPV19XUklTVF9PRkZTRVQgPSBmcm9tVmFsdWVzJDEoMCwgMCwgLTAuMjUpOwogICAgY29uc3QgV1JJU1RfQ09OVFJPTExFUl9PRkZTRVQgPSBmcm9tVmFsdWVzJDEoMCwgMCwgMC4wNSk7CiAgICBjb25zdCBBUk1fRVhURU5TSU9OX09GRlNFVCA9IGZyb21WYWx1ZXMkMSgtMC4wOCwgMC4xNCwgMC4wOCk7CiAgICBjb25zdCBFTEJPV19CRU5EX1JBVElPID0gMC40OwogICAgY29uc3QgRVhURU5TSU9OX1JBVElPX1dFSUdIVCA9IDAuNDsKICAgIGNvbnN0IE1JTl9BTkdVTEFSX1NQRUVEID0gMC42MTsKICAgIGNvbnN0IE1JTl9BTkdMRV9ERUxUQSA9IDAuMTc1OwogICAgY29uc3QgTUlOX0VYVEVOU0lPTl9DT1MgPSAwLjEyOwogICAgY29uc3QgTUFYX0VYVEVOU0lPTl9DT1MgPSAwLjg3OwogICAgY29uc3QgUkFEX1RPX0RFRyA9IDE4MCAvIE1hdGguUEk7CiAgICBmdW5jdGlvbiBldWxlckZyb21RdWF0ZXJuaW9uKG91dCwgcSwgb3JkZXIpIHsKICAgICAgZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiQkMSwgbWF4JCQxKSB7CiAgICAgICAgcmV0dXJuICh2YWx1ZSA8IG1pbiQkMSA/IG1pbiQkMSA6ICh2YWx1ZSA+IG1heCQkMSA/IG1heCQkMSA6IHZhbHVlKSk7CiAgICAgIH0KICAgICAgdmFyIHNxeCA9IHFbMF0gKiBxWzBdOwogICAgICB2YXIgc3F5ID0gcVsxXSAqIHFbMV07CiAgICAgIHZhciBzcXogPSBxWzJdICogcVsyXTsKICAgICAgdmFyIHNxdyA9IHFbM10gKiBxWzNdOwogICAgICB7CiAgICAgICAgb3V0WzBdID0gTWF0aC5hc2luKCAgY2xhbXAoIDIgKiAoIHFbMF0gKiBxWzNdIC0gcVsxXSAqIHFbMl0gKSwgLTEsIDEgKSApOwogICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoIDIgKiAoIHFbMF0gKiBxWzJdICsgcVsxXSAqIHFbM10gKSwgKCBzcXcgLSBzcXggLSBzcXkgKyBzcXogKSApOwogICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoIDIgKiAoIHFbMF0gKiBxWzFdICsgcVsyXSAqIHFbM10gKSwgKCBzcXcgLSBzcXggKyBzcXkgLSBzcXogKSApOwogICAgICB9CiAgICB9CiAgICBjbGFzcyBPcmllbnRhdGlvbkFybU1vZGVsIHsKICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpcy5oYW5kID0gJ3JpZ2h0JzsKICAgICAgICB0aGlzLmhlYWRFbGJvd09mZnNldCA9IEhFQURfRUxCT1dfT0ZGU0VUX1JJR0hUSEFOREVEOwogICAgICAgIHRoaXMuY29udHJvbGxlclEgPSBjcmVhdGUkNCgpOwogICAgICAgIHRoaXMubGFzdENvbnRyb2xsZXJRID0gY3JlYXRlJDQoKTsKICAgICAgICB0aGlzLmhlYWRRID0gY3JlYXRlJDQoKTsKICAgICAgICB0aGlzLmhlYWRQb3MgPSBjcmVhdGUkMSgpOwogICAgICAgIHRoaXMuZWxib3dQb3MgPSBjcmVhdGUkMSgpOwogICAgICAgIHRoaXMud3Jpc3RQb3MgPSBjcmVhdGUkMSgpOwogICAgICAgIHRoaXMudGltZSA9IG51bGw7CiAgICAgICAgdGhpcy5sYXN0VGltZSA9IG51bGw7CiAgICAgICAgdGhpcy5yb290USA9IGNyZWF0ZSQ0KCk7CiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGNyZWF0ZSQxKCk7CiAgICAgIH0KICAgICAgc2V0SGFuZGVkbmVzcyhoYW5kKSB7CiAgICAgICAgaWYgKHRoaXMuaGFuZCAhPSBoYW5kKSB7CiAgICAgICAgICB0aGlzLmhhbmQgPSBoYW5kOwogICAgICAgICAgaWYgKHRoaXMuaGFuZCA9PSAnbGVmdCcpIHsKICAgICAgICAgICAgdGhpcy5oZWFkRWxib3dPZmZzZXQgPSBIRUFEX0VMQk9XX09GRlNFVF9MRUZUSEFOREVEOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5oZWFkRWxib3dPZmZzZXQgPSBIRUFEX0VMQk9XX09GRlNFVF9SSUdIVEhBTkRFRDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgdXBkYXRlKGNvbnRyb2xsZXJPcmllbnRhdGlvbiwgaGVhZFBvc2VNYXRyaXgpIHsKICAgICAgICB0aGlzLnRpbWUgPSBub3ckMSgpOwogICAgICAgIGlmIChjb250cm9sbGVyT3JpZW50YXRpb24pIHsKICAgICAgICAgIGNvcHkkNCh0aGlzLmxhc3RDb250cm9sbGVyUSwgdGhpcy5jb250cm9sbGVyUSk7CiAgICAgICAgICBjb3B5JDQodGhpcy5jb250cm9sbGVyUSwgY29udHJvbGxlck9yaWVudGF0aW9uKTsKICAgICAgICB9CiAgICAgICAgaWYgKGhlYWRQb3NlTWF0cml4KSB7CiAgICAgICAgICBnZXRUcmFuc2xhdGlvbih0aGlzLmhlYWRQb3MsIGhlYWRQb3NlTWF0cml4KTsKICAgICAgICAgIGdldFJvdGF0aW9uKHRoaXMuaGVhZFEsIGhlYWRQb3NlTWF0cml4KTsKICAgICAgICB9CiAgICAgICAgbGV0IGhlYWRZYXdRID0gdGhpcy5nZXRIZWFkWWF3T3JpZW50YXRpb25fKCk7CiAgICAgICAgbGV0IGFuZ2xlRGVsdGEgPSB0aGlzLnF1YXRBbmdsZV8odGhpcy5sYXN0Q29udHJvbGxlclEsIHRoaXMuY29udHJvbGxlclEpOwogICAgICAgIGxldCB0aW1lRGVsdGEgPSAodGhpcy50aW1lIC0gdGhpcy5sYXN0VGltZSkgLyAxMDAwOwogICAgICAgIGxldCBjb250cm9sbGVyQW5ndWxhclNwZWVkID0gYW5nbGVEZWx0YSAvIHRpbWVEZWx0YTsKICAgICAgICBpZiAoY29udHJvbGxlckFuZ3VsYXJTcGVlZCA+IE1JTl9BTkdVTEFSX1NQRUVEKSB7CiAgICAgICAgICBzbGVycCh0aGlzLnJvb3RRLCB0aGlzLnJvb3RRLCBoZWFkWWF3USwKICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oYW5nbGVEZWx0YSAvIE1JTl9BTkdMRV9ERUxUQSwgMS4wKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvcHkkNCh0aGlzLnJvb3RRLCBoZWFkWWF3USk7CiAgICAgICAgfQogICAgICAgIGxldCBjb250cm9sbGVyRm9yd2FyZCA9IGZyb21WYWx1ZXMkMSgwLCAwLCAtMSk7CiAgICAgICAgdHJhbnNmb3JtUXVhdChjb250cm9sbGVyRm9yd2FyZCwgY29udHJvbGxlckZvcndhcmQsIHRoaXMuY29udHJvbGxlclEpOwogICAgICAgIGxldCBjb250cm9sbGVyRG90WSA9IGRvdChjb250cm9sbGVyRm9yd2FyZCwgWzAsIDEsIDBdKTsKICAgICAgICBsZXQgZXh0ZW5zaW9uUmF0aW8gPSB0aGlzLmNsYW1wXygKICAgICAgICAgICAgKGNvbnRyb2xsZXJEb3RZIC0gTUlOX0VYVEVOU0lPTl9DT1MpIC8gTUFYX0VYVEVOU0lPTl9DT1MsIDAuMCwgMS4wKTsKICAgICAgICBsZXQgY29udHJvbGxlckNhbWVyYVEgPSBjbG9uZSQ0KHRoaXMucm9vdFEpOwogICAgICAgIGludmVydCQyKGNvbnRyb2xsZXJDYW1lcmFRLCBjb250cm9sbGVyQ2FtZXJhUSk7CiAgICAgICAgbXVsdGlwbHkkNChjb250cm9sbGVyQ2FtZXJhUSwgY29udHJvbGxlckNhbWVyYVEsIHRoaXMuY29udHJvbGxlclEpOwogICAgICAgIGxldCBlbGJvd1BvcyA9IHRoaXMuZWxib3dQb3M7CiAgICAgICAgY29weSQxKGVsYm93UG9zLCB0aGlzLmhlYWRQb3MpOwogICAgICAgIGFkZCQxKGVsYm93UG9zLCBlbGJvd1BvcywgdGhpcy5oZWFkRWxib3dPZmZzZXQpOwogICAgICAgIGxldCBlbGJvd09mZnNldCA9IGNsb25lJDEoQVJNX0VYVEVOU0lPTl9PRkZTRVQpOwogICAgICAgIHNjYWxlJDEoZWxib3dPZmZzZXQsIGVsYm93T2Zmc2V0LCBleHRlbnNpb25SYXRpbyk7CiAgICAgICAgYWRkJDEoZWxib3dQb3MsIGVsYm93UG9zLCBlbGJvd09mZnNldCk7CiAgICAgICAgbGV0IHRvdGFsQW5nbGUgPSB0aGlzLnF1YXRBbmdsZV8oY29udHJvbGxlckNhbWVyYVEsIGNyZWF0ZSQ0KCkpOwogICAgICAgIGxldCB0b3RhbEFuZ2xlRGVnID0gdG90YWxBbmdsZSAqIFJBRF9UT19ERUc7CiAgICAgICAgbGV0IGxlcnBTdXBwcmVzc2lvbiA9IDEgLSBNYXRoLnBvdyh0b3RhbEFuZ2xlRGVnIC8gMTgwLCA0KTtsZXQgZWxib3dSYXRpbyA9IEVMQk9XX0JFTkRfUkFUSU87CiAgICAgICAgbGV0IHdyaXN0UmF0aW8gPSAxIC0gRUxCT1dfQkVORF9SQVRJTzsKICAgICAgICBsZXQgbGVycFZhbHVlID0gbGVycFN1cHByZXNzaW9uICoKICAgICAgICAgICAgKGVsYm93UmF0aW8gKyB3cmlzdFJhdGlvICogZXh0ZW5zaW9uUmF0aW8gKiBFWFRFTlNJT05fUkFUSU9fV0VJR0hUKTsKICAgICAgICBsZXQgd3Jpc3RRID0gY3JlYXRlJDQoKTsKICAgICAgICBzbGVycCh3cmlzdFEsIHdyaXN0USwgY29udHJvbGxlckNhbWVyYVEsIGxlcnBWYWx1ZSk7CiAgICAgICAgbGV0IGludldyaXN0USA9IGludmVydCQyKGNyZWF0ZSQ0KCksIHdyaXN0USk7CiAgICAgICAgbGV0IGVsYm93USA9IGNsb25lJDQoY29udHJvbGxlckNhbWVyYVEpOwogICAgICAgIG11bHRpcGx5JDQoZWxib3dRLCBlbGJvd1EsIGludldyaXN0USk7CiAgICAgICAgbGV0IHdyaXN0UG9zID0gdGhpcy53cmlzdFBvczsKICAgICAgICBjb3B5JDEod3Jpc3RQb3MsIFdSSVNUX0NPTlRST0xMRVJfT0ZGU0VUKTsKICAgICAgICB0cmFuc2Zvcm1RdWF0KHdyaXN0UG9zLCB3cmlzdFBvcywgd3Jpc3RRKTsKICAgICAgICBhZGQkMSh3cmlzdFBvcywgd3Jpc3RQb3MsIEVMQk9XX1dSSVNUX09GRlNFVCk7CiAgICAgICAgdHJhbnNmb3JtUXVhdCh3cmlzdFBvcywgd3Jpc3RQb3MsIGVsYm93USk7CiAgICAgICAgYWRkJDEod3Jpc3RQb3MsIHdyaXN0UG9zLCBlbGJvd1Bvcyk7CiAgICAgICAgbGV0IG9mZnNldCA9IGNsb25lJDEoQVJNX0VYVEVOU0lPTl9PRkZTRVQpOwogICAgICAgIHNjYWxlJDEob2Zmc2V0LCBvZmZzZXQsIGV4dGVuc2lvblJhdGlvKTsKICAgICAgICBhZGQkMSh0aGlzLnBvc2l0aW9uLCB0aGlzLndyaXN0UG9zLCBvZmZzZXQpOwogICAgICAgIHRyYW5zZm9ybVF1YXQodGhpcy5wb3NpdGlvbiwgdGhpcy5wb3NpdGlvbiwgdGhpcy5yb290USk7CiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRoaXMudGltZTsKICAgICAgfQogICAgICBnZXRQb3NpdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjsKICAgICAgfQogICAgICBnZXRIZWFkWWF3T3JpZW50YXRpb25fKCkgewogICAgICAgIGxldCBoZWFkRXVsZXIgPSBjcmVhdGUkMSgpOwogICAgICAgIGV1bGVyRnJvbVF1YXRlcm5pb24oaGVhZEV1bGVyLCB0aGlzLmhlYWRRKTsKICAgICAgICBsZXQgZGVzdGluYXRpb25RID0gZnJvbUV1bGVyKGNyZWF0ZSQ0KCksIDAsIGhlYWRFdWxlclsxXSAqIFJBRF9UT19ERUcsIDApOwogICAgICAgIHJldHVybiBkZXN0aW5hdGlvblE7CiAgICAgIH0KICAgICAgY2xhbXBfKHZhbHVlLCBtaW4kJDEsIG1heCQkMSkgewogICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluJCQxKSwgbWF4JCQxKTsKICAgICAgfQogICAgICBxdWF0QW5nbGVfKHExLCBxMikgewogICAgICAgIGxldCB2ZWMxID0gWzAsIDAsIC0xXTsKICAgICAgICBsZXQgdmVjMiA9IFswLCAwLCAtMV07CiAgICAgICAgdHJhbnNmb3JtUXVhdCh2ZWMxLCB2ZWMxLCBxMSk7CiAgICAgICAgdHJhbnNmb3JtUXVhdCh2ZWMyLCB2ZWMyLCBxMik7CiAgICAgICAgcmV0dXJuIGFuZ2xlKHZlYzEsIHZlYzIpOwogICAgICB9CiAgICB9CgogICAgY29uc3QgUFJJVkFURSQxOCA9IFN5bWJvbCgnQEB3ZWJ4ci1wb2x5ZmlsbC9YUlJlbWFwcGVkR2FtZXBhZCcpOwogICAgY29uc3QgUExBQ0VIT0xERVJfQlVUVE9OID0geyBwcmVzc2VkOiBmYWxzZSwgdG91Y2hlZDogZmFsc2UsIHZhbHVlOiAwLjAgfTsKICAgIE9iamVjdC5mcmVlemUoUExBQ0VIT0xERVJfQlVUVE9OKTsKICAgIGNsYXNzIFhSUmVtYXBwZWRHYW1lcGFkIHsKICAgICAgY29uc3RydWN0b3IoZ2FtZXBhZCwgZGlzcGxheSwgbWFwKSB7CiAgICAgICAgaWYgKCFtYXApIHsKICAgICAgICAgIG1hcCA9IHt9OwogICAgICAgIH0KICAgICAgICBpZiAobWFwLnVzZXJBZ2VudE92ZXJyaWRlcykgewogICAgICAgICAgZm9yIChsZXQgYWdlbnQgaW4gbWFwLnVzZXJBZ2VudE92ZXJyaWRlcykgewogICAgICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhhZ2VudCkpIHsKICAgICAgICAgICAgICBsZXQgb3ZlcnJpZGUgPSBtYXAudXNlckFnZW50T3ZlcnJpZGVzW2FnZW50XTsKICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3ZlcnJpZGUpIHsKICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gbWFwKSB7CiAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obWFwW2tleV0sIG92ZXJyaWRlW2tleV0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbWFwW2tleV0gPSBvdmVycmlkZVtrZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgYXhlcyA9IG5ldyBBcnJheShtYXAuYXhlcyAmJiBtYXAuYXhlcy5sZW5ndGggPyBtYXAuYXhlcy5sZW5ndGggOiBnYW1lcGFkLmF4ZXMubGVuZ3RoKTsKICAgICAgICBsZXQgYnV0dG9ucyA9IG5ldyBBcnJheShtYXAuYnV0dG9ucyAmJiBtYXAuYnV0dG9ucy5sZW5ndGggPyBtYXAuYnV0dG9ucy5sZW5ndGggOiBnYW1lcGFkLmJ1dHRvbnMubGVuZ3RoKTsKICAgICAgICBsZXQgZ3JpcFRyYW5zZm9ybSA9IG51bGw7CiAgICAgICAgaWYgKG1hcC5ncmlwVHJhbnNmb3JtKSB7CiAgICAgICAgICBsZXQgb3JpZW50YXRpb24gPSBtYXAuZ3JpcFRyYW5zZm9ybS5vcmllbnRhdGlvbiB8fCBbMCwgMCwgMCwgMV07CiAgICAgICAgICBncmlwVHJhbnNmb3JtID0gY3JlYXRlKCk7CiAgICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbigKICAgICAgICAgICAgZ3JpcFRyYW5zZm9ybSwKICAgICAgICAgICAgbm9ybWFsaXplJDIob3JpZW50YXRpb24sIG9yaWVudGF0aW9uKSwKICAgICAgICAgICAgbWFwLmdyaXBUcmFuc2Zvcm0ucG9zaXRpb24gfHwgWzAsIDAsIDBdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXQgdGFyZ2V0UmF5VHJhbnNmb3JtID0gbnVsbDsKICAgICAgICBpZiAobWFwLnRhcmdldFJheVRyYW5zZm9ybSkgewogICAgICAgICAgbGV0IG9yaWVudGF0aW9uID0gIG1hcC50YXJnZXRSYXlUcmFuc2Zvcm0ub3JpZW50YXRpb24gfHwgWzAsIDAsIDAsIDFdOwogICAgICAgICAgdGFyZ2V0UmF5VHJhbnNmb3JtID0gY3JlYXRlKCk7CiAgICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbigKICAgICAgICAgICAgdGFyZ2V0UmF5VHJhbnNmb3JtLAogICAgICAgICAgICBub3JtYWxpemUkMihvcmllbnRhdGlvbiwgb3JpZW50YXRpb24pLAogICAgICAgICAgICBtYXAudGFyZ2V0UmF5VHJhbnNmb3JtLnBvc2l0aW9uIHx8IFswLCAwLCAwXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV0IHByb2ZpbGVzID0gbWFwLnByb2ZpbGVzOwogICAgICAgIGlmIChtYXAuZGlzcGxheVByb2ZpbGVzKSB7CiAgICAgICAgICBpZiAoZGlzcGxheS5kaXNwbGF5TmFtZSBpbiBtYXAuZGlzcGxheVByb2ZpbGVzKSB7CiAgICAgICAgICAgIHByb2ZpbGVzID0gbWFwLmRpc3BsYXlQcm9maWxlc1tkaXNwbGF5LmRpc3BsYXlOYW1lXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpc1tQUklWQVRFJDE4XSA9IHsKICAgICAgICAgIGdhbWVwYWQsCiAgICAgICAgICBtYXAsCiAgICAgICAgICBwcm9maWxlczogcHJvZmlsZXMgfHwgW2dhbWVwYWQuaWRdLAogICAgICAgICAgbWFwcGluZzogbWFwLm1hcHBpbmcgfHwgZ2FtZXBhZC5tYXBwaW5nLAogICAgICAgICAgYXhlcywKICAgICAgICAgIGJ1dHRvbnMsCiAgICAgICAgICBncmlwVHJhbnNmb3JtLAogICAgICAgICAgdGFyZ2V0UmF5VHJhbnNmb3JtLAogICAgICAgIH07CiAgICAgICAgdGhpcy5fdXBkYXRlKCk7CiAgICAgIH0KICAgICAgX3VwZGF0ZSgpIHsKICAgICAgICBsZXQgZ2FtZXBhZCA9IHRoaXNbUFJJVkFURSQxOF0uZ2FtZXBhZDsKICAgICAgICBsZXQgbWFwID0gdGhpc1tQUklWQVRFJDE4XS5tYXA7CiAgICAgICAgbGV0IGF4ZXMgPSB0aGlzW1BSSVZBVEUkMThdLmF4ZXM7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICBpZiAobWFwLmF4ZXMgJiYgaSBpbiBtYXAuYXhlcykgewogICAgICAgICAgICBpZiAobWFwLmF4ZXNbaV0gPT09IG51bGwpIHsKICAgICAgICAgICAgICBheGVzW2ldID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBheGVzW2ldID0gZ2FtZXBhZC5heGVzW21hcC5heGVzW2ldXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYXhlc1tpXSA9IGdhbWVwYWQuYXhlc1tpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG1hcC5heGVzICYmIG1hcC5heGVzLmludmVydCkgewogICAgICAgICAgZm9yIChsZXQgYXhpcyBvZiBtYXAuYXhlcy5pbnZlcnQpIHsKICAgICAgICAgICAgaWYgKGF4aXMgPCBheGVzLmxlbmd0aCkgewogICAgICAgICAgICAgIGF4ZXNbYXhpc10gKj0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IGJ1dHRvbnMgPSB0aGlzW1BSSVZBVEUkMThdLmJ1dHRvbnM7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICBpZiAobWFwLmJ1dHRvbnMgJiYgaSBpbiBtYXAuYnV0dG9ucykgewogICAgICAgICAgICBpZiAobWFwLmJ1dHRvbnNbaV0gPT09IG51bGwpIHsKICAgICAgICAgICAgICBidXR0b25zW2ldID0gUExBQ0VIT0xERVJfQlVUVE9OOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGJ1dHRvbnNbaV0gPSBnYW1lcGFkLmJ1dHRvbnNbbWFwLmJ1dHRvbnNbaV1dOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidXR0b25zW2ldID0gZ2FtZXBhZC5idXR0b25zW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBnZXQgaWQoKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CiAgICAgIGdldCBfcHJvZmlsZXMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQxOF0ucHJvZmlsZXM7CiAgICAgIH0KICAgICAgZ2V0IGluZGV4KCkgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgICBnZXQgY29ubmVjdGVkKCkgewogICAgICAgIHJldHVybiB0aGlzW1BSSVZBVEUkMThdLmdhbWVwYWQuY29ubmVjdGVkOwogICAgICB9CiAgICAgIGdldCB0aW1lc3RhbXAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQxOF0uZ2FtZXBhZC50aW1lc3RhbXA7CiAgICAgIH0KICAgICAgZ2V0IG1hcHBpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXNbUFJJVkFURSQxOF0ubWFwcGluZzsKICAgICAgfQogICAgICBnZXQgYXhlcygpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDE4XS5heGVzOwogICAgICB9CiAgICAgIGdldCBidXR0b25zKCkgewogICAgICAgIHJldHVybiB0aGlzW1BSSVZBVEUkMThdLmJ1dHRvbnM7CiAgICAgIH0KICAgICAgZ2V0IGhhcHRpY0FjdHVhdG9ycygpIHsKICAgICAgICByZXR1cm4gdGhpc1tQUklWQVRFJDE4XS5nYW1lcGFkLmhhcHRpY0FjdHVhdG9yczsKICAgICAgfQogICAgfQogICAgY2xhc3MgR2FtZXBhZFhSSW5wdXRTb3VyY2UgewogICAgICBjb25zdHJ1Y3Rvcihwb2x5ZmlsbCwgZGlzcGxheSwgcHJpbWFyeUJ1dHRvbkluZGV4ID0gMCwgcHJpbWFyeVNxdWVlemVCdXR0b25JbmRleCA9IC0xKSB7CiAgICAgICAgdGhpcy5wb2x5ZmlsbCA9IHBvbHlmaWxsOwogICAgICAgIHRoaXMuZGlzcGxheSA9IGRpc3BsYXk7CiAgICAgICAgdGhpcy5uYXRpdmVHYW1lcGFkID0gbnVsbDsKICAgICAgICB0aGlzLmdhbWVwYWQgPSBudWxsOwogICAgICAgIHRoaXMuaW5wdXRTb3VyY2UgPSBuZXcgWFJJbnB1dFNvdXJjZSh0aGlzKTsKICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IGNyZWF0ZSQxKCk7CiAgICAgICAgdGhpcy5lbXVsYXRlZFBvc2l0aW9uID0gZmFsc2U7CiAgICAgICAgdGhpcy5iYXNlUG9zZU1hdHJpeCA9IGNyZWF0ZSgpOwogICAgICAgIHRoaXMub3V0cHV0TWF0cml4ID0gY3JlYXRlKCk7CiAgICAgICAgdGhpcy5wcmltYXJ5QnV0dG9uSW5kZXggPSBwcmltYXJ5QnV0dG9uSW5kZXg7CiAgICAgICAgdGhpcy5wcmltYXJ5QWN0aW9uUHJlc3NlZCA9IGZhbHNlOwogICAgICAgIHRoaXMucHJpbWFyeVNxdWVlemVCdXR0b25JbmRleCA9IHByaW1hcnlTcXVlZXplQnV0dG9uSW5kZXg7CiAgICAgICAgdGhpcy5wcmltYXJ5U3F1ZWV6ZUFjdGlvblByZXNzZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmhhbmRlZG5lc3MgPSAnJzsKICAgICAgICB0aGlzLnRhcmdldFJheU1vZGUgPSAnZ2F6ZSc7CiAgICAgICAgdGhpcy5hcm1Nb2RlbCA9IG51bGw7CiAgICAgIH0KICAgICAgZ2V0IHByb2ZpbGVzKCkgewogICAgICAgIHJldHVybiB0aGlzLmdhbWVwYWQgPyB0aGlzLmdhbWVwYWQuX3Byb2ZpbGVzIDogW107CiAgICAgIH0KICAgICAgdXBkYXRlRnJvbUdhbWVwYWQoZ2FtZXBhZCkgewogICAgICAgIGlmICh0aGlzLm5hdGl2ZUdhbWVwYWQgIT09IGdhbWVwYWQpIHsKICAgICAgICAgIHRoaXMubmF0aXZlR2FtZXBhZCA9IGdhbWVwYWQ7CiAgICAgICAgICBpZiAoZ2FtZXBhZCkgewogICAgICAgICAgICB0aGlzLmdhbWVwYWQgPSBuZXcgWFJSZW1hcHBlZEdhbWVwYWQoZ2FtZXBhZCwgdGhpcy5kaXNwbGF5LCBHYW1lcGFkTWFwcGluZ3NbZ2FtZXBhZC5pZF0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5nYW1lcGFkID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5oYW5kZWRuZXNzID0gZ2FtZXBhZC5oYW5kID09PSAnJyA/ICdub25lJyA6IGdhbWVwYWQuaGFuZDsKICAgICAgICBpZiAodGhpcy5nYW1lcGFkKSB7CiAgICAgICAgICB0aGlzLmdhbWVwYWQuX3VwZGF0ZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoZ2FtZXBhZC5wb3NlKSB7CiAgICAgICAgICB0aGlzLnRhcmdldFJheU1vZGUgPSAndHJhY2tlZC1wb2ludGVyJzsKICAgICAgICAgIHRoaXMuZW11bGF0ZWRQb3NpdGlvbiA9ICFnYW1lcGFkLnBvc2UuaGFzUG9zaXRpb247CiAgICAgICAgfSBlbHNlIGlmIChnYW1lcGFkLmhhbmQgPT09ICcnKSB7CiAgICAgICAgICB0aGlzLnRhcmdldFJheU1vZGUgPSAnZ2F6ZSc7CiAgICAgICAgICB0aGlzLmVtdWxhdGVkUG9zaXRpb24gPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdXBkYXRlQmFzZVBvc2VNYXRyaXgoKSB7CiAgICAgICAgaWYgKHRoaXMubmF0aXZlR2FtZXBhZCAmJiB0aGlzLm5hdGl2ZUdhbWVwYWQucG9zZSkgewogICAgICAgICAgbGV0IHBvc2UgPSB0aGlzLm5hdGl2ZUdhbWVwYWQucG9zZTsKICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHBvc2UucG9zaXRpb247CiAgICAgICAgICBsZXQgb3JpZW50YXRpb24gPSBwb3NlLm9yaWVudGF0aW9uOwogICAgICAgICAgaWYgKCFwb3NpdGlvbiAmJiAhb3JpZW50YXRpb24pIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFwb3NpdGlvbikgewogICAgICAgICAgICBpZiAoIXBvc2UuaGFzUG9zaXRpb24pIHsKICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJtTW9kZWwpIHsKICAgICAgICAgICAgICAgIHRoaXMuYXJtTW9kZWwgPSBuZXcgT3JpZW50YXRpb25Bcm1Nb2RlbCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLmFybU1vZGVsLnNldEhhbmRlZG5lc3ModGhpcy5uYXRpdmVHYW1lcGFkLmhhbmQpOwogICAgICAgICAgICAgIHRoaXMuYXJtTW9kZWwudXBkYXRlKG9yaWVudGF0aW9uLCB0aGlzLnBvbHlmaWxsLmdldEJhc2VQb3NlTWF0cml4KCkpOwogICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5hcm1Nb2RlbC5nZXRQb3NpdGlvbigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5sYXN0UG9zaXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMubGFzdFBvc2l0aW9uWzBdID0gcG9zaXRpb25bMF07CiAgICAgICAgICAgIHRoaXMubGFzdFBvc2l0aW9uWzFdID0gcG9zaXRpb25bMV07CiAgICAgICAgICAgIHRoaXMubGFzdFBvc2l0aW9uWzJdID0gcG9zaXRpb25bMl07CiAgICAgICAgICB9CiAgICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbih0aGlzLmJhc2VQb3NlTWF0cml4LCBvcmllbnRhdGlvbiwgcG9zaXRpb24pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb3B5KHRoaXMuYmFzZVBvc2VNYXRyaXgsIHRoaXMucG9seWZpbGwuZ2V0QmFzZVBvc2VNYXRyaXgoKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmJhc2VQb3NlTWF0cml4OwogICAgICB9CiAgICAgIGdldFhSUG9zZShjb29yZGluYXRlU3lzdGVtLCBwb3NlVHlwZSkgewogICAgICAgIHRoaXMudXBkYXRlQmFzZVBvc2VNYXRyaXgoKTsKICAgICAgICBzd2l0Y2gocG9zZVR5cGUpIHsKICAgICAgICAgIGNhc2UgInRhcmdldC1yYXkiOgogICAgICAgICAgICBjb29yZGluYXRlU3lzdGVtLl90cmFuc2Zvcm1CYXNlUG9zZU1hdHJpeCh0aGlzLm91dHB1dE1hdHJpeCwgdGhpcy5iYXNlUG9zZU1hdHJpeCk7CiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVwYWQgJiYgdGhpcy5nYW1lcGFkW1BSSVZBVEUkMThdLnRhcmdldFJheVRyYW5zZm9ybSkgewogICAgICAgICAgICAgIG11bHRpcGx5KHRoaXMub3V0cHV0TWF0cml4LCB0aGlzLm91dHB1dE1hdHJpeCwgdGhpcy5nYW1lcGFkW1BSSVZBVEUkMThdLnRhcmdldFJheVRyYW5zZm9ybSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJncmlwIjoKICAgICAgICAgICAgaWYgKCF0aGlzLm5hdGl2ZUdhbWVwYWQgfHwgIXRoaXMubmF0aXZlR2FtZXBhZC5wb3NlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbS5fdHJhbnNmb3JtQmFzZVBvc2VNYXRyaXgodGhpcy5vdXRwdXRNYXRyaXgsIHRoaXMuYmFzZVBvc2VNYXRyaXgpOwogICAgICAgICAgICBpZiAodGhpcy5nYW1lcGFkICYmIHRoaXMuZ2FtZXBhZFtQUklWQVRFJDE4XS5ncmlwVHJhbnNmb3JtKSB7CiAgICAgICAgICAgICAgbXVsdGlwbHkodGhpcy5vdXRwdXRNYXRyaXgsIHRoaXMub3V0cHV0TWF0cml4LCB0aGlzLmdhbWVwYWRbUFJJVkFURSQxOF0uZ3JpcFRyYW5zZm9ybSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgY29vcmRpbmF0ZVN5c3RlbS5fYWRqdXN0Rm9yT3JpZ2luT2Zmc2V0KHRoaXMub3V0cHV0TWF0cml4KTsKICAgICAgICByZXR1cm4gbmV3IFhSUG9zZShuZXcgWFJSaWdpZFRyYW5zZm9ybSh0aGlzLm91dHB1dE1hdHJpeCksIHRoaXMuZW11bGF0ZWRQb3NpdGlvbik7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IEVYVFJBX1BSRVNFTlRBVElPTl9BVFRSSUJVVEVTID0gewogICAgICBoaWdoUmVmcmVzaFJhdGU6IHRydWUsCiAgICB9OwogICAgY29uc3QgUFJJTUFSWV9CVVRUT05fTUFQID0gewogICAgICBvY3VsdXM6IDEsCiAgICAgIG9wZW52cjogMSwKICAgICAgJ3NwYXRpYWwgY29udHJvbGxlciAoc3BhdGlhbCBpbnRlcmFjdGlvbiBzb3VyY2UpJzogMQogICAgfTsKICAgIGxldCBTRVNTSU9OX0lEID0gMDsKICAgIGNsYXNzIFNlc3Npb24gewogICAgICBjb25zdHJ1Y3Rvcihtb2RlLCBlbmFibGVkRmVhdHVyZXMsIHBvbHlmaWxsT3B0aW9ucz17fSkgewogICAgICAgIHRoaXMubW9kZSA9IG1vZGU7CiAgICAgICAgdGhpcy5lbmFibGVkRmVhdHVyZXMgPSBlbmFibGVkRmVhdHVyZXM7CiAgICAgICAgdGhpcy5vdXRwdXRDb250ZXh0ID0gbnVsbDsKICAgICAgICB0aGlzLmltbWVyc2l2ZSA9IG1vZGUgPT0gJ2ltbWVyc2l2ZS12cicgfHwgbW9kZSA9PSAnaW1tZXJzaXZlLWFyJzsKICAgICAgICB0aGlzLmVuZGVkID0gbnVsbDsKICAgICAgICB0aGlzLmJhc2VMYXllciA9IG51bGw7CiAgICAgICAgdGhpcy5pZCA9ICsrU0VTU0lPTl9JRDsKICAgICAgICB0aGlzLm1vZGlmaWVkQ2FudmFzTGF5ZXIgPSBmYWxzZTsKICAgICAgICBpZiAodGhpcy5vdXRwdXRDb250ZXh0ICYmIHRydWUpIHsKICAgICAgICAgIGNvbnN0IHJlbmRlckNvbnRleHRUeXBlID0gcG9seWZpbGxPcHRpb25zLnJlbmRlckNvbnRleHRUeXBlIHx8ICcyZCc7CiAgICAgICAgICB0aGlzLnJlbmRlckNvbnRleHQgPSB0aGlzLm91dHB1dENvbnRleHQuY2FudmFzLmdldENvbnRleHQocmVuZGVyQ29udGV4dFR5cGUpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY2xhc3MgV2ViVlJEZXZpY2UgZXh0ZW5kcyBYUkRldmljZSB7CiAgICAgIGNvbnN0cnVjdG9yKGdsb2JhbCwgZGlzcGxheSkgewogICAgICAgIGNvbnN0IHsgY2FuUHJlc2VudCB9ID0gZGlzcGxheS5jYXBhYmlsaXRpZXM7CiAgICAgICAgc3VwZXIoZ2xvYmFsKTsKICAgICAgICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5OwogICAgICAgIHRoaXMuZnJhbWUgPSBuZXcgZ2xvYmFsLlZSRnJhbWVEYXRhKCk7CiAgICAgICAgdGhpcy5zZXNzaW9ucyA9IG5ldyBNYXAoKTsKICAgICAgICB0aGlzLmltbWVyc2l2ZVNlc3Npb24gPSBudWxsOwogICAgICAgIHRoaXMuY2FuUHJlc2VudCA9IGNhblByZXNlbnQ7CiAgICAgICAgdGhpcy5iYXNlTW9kZWxNYXRyaXggPSBjcmVhdGUoKTsKICAgICAgICB0aGlzLmdhbWVwYWRJbnB1dFNvdXJjZXMgPSB7fTsKICAgICAgICB0aGlzLnRlbXBWZWMzID0gbmV3IEZsb2F0MzJBcnJheSgzKTsKICAgICAgICB0aGlzLm9uVlJEaXNwbGF5UHJlc2VudENoYW5nZSA9IHRoaXMub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlLmJpbmQodGhpcyk7CiAgICAgICAgZ2xvYmFsLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgdGhpcy5vblZSRGlzcGxheVByZXNlbnRDaGFuZ2UpOwogICAgICAgIHRoaXMuQ0FOX1VTRV9HQU1FUEFEID0gZ2xvYmFsLm5hdmlnYXRvciAmJiAoJ2dldEdhbWVwYWRzJyBpbiBnbG9iYWwubmF2aWdhdG9yKTsKICAgICAgICB0aGlzLkhBU19CSVRNQVBfU1VQUE9SVCA9IGlzSW1hZ2VCaXRtYXBTdXBwb3J0ZWQoZ2xvYmFsKTsKICAgICAgfQogICAgICBnZXQgZGVwdGhOZWFyKCkgeyByZXR1cm4gdGhpcy5kaXNwbGF5LmRlcHRoTmVhcjsgfQogICAgICBzZXQgZGVwdGhOZWFyKHZhbCkgeyB0aGlzLmRpc3BsYXkuZGVwdGhOZWFyID0gdmFsOyB9CiAgICAgIGdldCBkZXB0aEZhcigpIHsgcmV0dXJuIHRoaXMuZGlzcGxheS5kZXB0aEZhcjsgfQogICAgICBzZXQgZGVwdGhGYXIodmFsKSB7IHRoaXMuZGlzcGxheS5kZXB0aEZhciA9IHZhbDsgfQogICAgICBvbkJhc2VMYXllclNldChzZXNzaW9uSWQsIGxheWVyKSB7CiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7CiAgICAgICAgY29uc3QgY2FudmFzID0gbGF5ZXIuY29udGV4dC5jYW52YXM7CiAgICAgICAgaWYgKHNlc3Npb24uaW1tZXJzaXZlKSB7CiAgICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5kaXNwbGF5LmdldEV5ZVBhcmFtZXRlcnMoJ2xlZnQnKTsKICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5kaXNwbGF5LmdldEV5ZVBhcmFtZXRlcnMoJ3JpZ2h0Jyk7CiAgICAgICAgICBjYW52YXMud2lkdGggPSBNYXRoLm1heChsZWZ0LnJlbmRlcldpZHRoLCByaWdodC5yZW5kZXJXaWR0aCkgKiAyOwogICAgICAgICAgY2FudmFzLmhlaWdodCA9IE1hdGgubWF4KGxlZnQucmVuZGVySGVpZ2h0LCByaWdodC5yZW5kZXJIZWlnaHQpOwogICAgICAgICAgdGhpcy5kaXNwbGF5LnJlcXVlc3RQcmVzZW50KFt7CiAgICAgICAgICAgICAgc291cmNlOiBjYW52YXMsIGF0dHJpYnV0ZXM6IEVYVFJBX1BSRVNFTlRBVElPTl9BVFRSSUJVVEVTCiAgICAgICAgICAgIH1dKS50aGVuKCgpID0+IHsKICAgICAgICAgICAgaWYgKCF0aGlzLmdsb2JhbC5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNhbnZhcykpIHsKICAgICAgICAgICAgICBzZXNzaW9uLm1vZGlmaWVkQ2FudmFzTGF5ZXIgPSB0cnVlOwogICAgICAgICAgICAgIHRoaXMuZ2xvYmFsLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTsKICAgICAgICAgICAgICBhcHBseUNhbnZhc1N0eWxlc0Zvck1pbmltYWxSZW5kZXJpbmcoY2FudmFzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZXNzaW9uLmJhc2VMYXllciA9IGxheWVyOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgc2Vzc2lvbi5iYXNlTGF5ZXIgPSBsYXllcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpIHsKICAgICAgICBpZiAobW9kZSA9PSAnaW1tZXJzaXZlLWFyJykgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAobW9kZSA9PSAnaW1tZXJzaXZlLXZyJyAmJiB0aGlzLmNhblByZXNlbnQgPT09IGZhbHNlKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlzRmVhdHVyZVN1cHBvcnRlZChmZWF0dXJlRGVzY3JpcHRvcikgewogICAgICAgIHN3aXRjaChmZWF0dXJlRGVzY3JpcHRvcikgewogICAgICAgICAgY2FzZSAndmlld2VyJzogcmV0dXJuIHRydWU7CiAgICAgICAgICBjYXNlICdsb2NhbCc6IHJldHVybiB0cnVlOwogICAgICAgICAgY2FzZSAnbG9jYWwtZmxvb3InOiByZXR1cm4gdHJ1ZTsKICAgICAgICAgIGNhc2UgJ2JvdW5kZWQnOiByZXR1cm4gZmFsc2U7CiAgICAgICAgICBjYXNlICd1bmJvdW5kZWQnOiByZXR1cm4gZmFsc2U7CiAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGFzeW5jIHJlcXVlc3RTZXNzaW9uKG1vZGUsIGVuYWJsZWRGZWF0dXJlcykgewogICAgICAgIGlmICghdGhpcy5pc1Nlc3Npb25TdXBwb3J0ZWQobW9kZSkpIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpOwogICAgICAgIH0KICAgICAgICBsZXQgaW1tZXJzaXZlID0gbW9kZSA9PSAnaW1tZXJzaXZlLXZyJzsKICAgICAgICBpZiAoaW1tZXJzaXZlKSB7CiAgICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgICAgIHsKICAgICAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJyk7CiAgICAgICAgICB9CiAgICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkucmVxdWVzdFByZXNlbnQoW3sKICAgICAgICAgICAgICBzb3VyY2U6IGNhbnZhcywgYXR0cmlidXRlczogRVhUUkFfUFJFU0VOVEFUSU9OX0FUVFJJQlVURVMgfV0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBzZXNzaW9uID0gbmV3IFNlc3Npb24obW9kZSwgZW5hYmxlZEZlYXR1cmVzLCB7CiAgICAgICAgICByZW5kZXJDb250ZXh0VHlwZTogdGhpcy5IQVNfQklUTUFQX1NVUFBPUlQgPyAnYml0bWFwcmVuZGVyZXInIDogJzJkJwogICAgICAgIH0pOwogICAgICAgIHRoaXMuc2Vzc2lvbnMuc2V0KHNlc3Npb24uaWQsIHNlc3Npb24pOwogICAgICAgIGlmIChpbW1lcnNpdmUpIHsKICAgICAgICAgIHRoaXMuaW1tZXJzaXZlU2Vzc2lvbiA9IHNlc3Npb247CiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ0BAd2VieHItcG9seWZpbGwvdnItcHJlc2VudC1zdGFydCcsIHNlc3Npb24uaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNlc3Npb24uaWQpOwogICAgICB9CiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykgewogICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXkucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTsKICAgICAgfQogICAgICBnZXRQcmltYXJ5QnV0dG9uSW5kZXgoZ2FtZXBhZCkgewogICAgICAgIGxldCBwcmltYXJ5QnV0dG9uID0gMDsKICAgICAgICBsZXQgbmFtZSA9IGdhbWVwYWQuaWQudG9Mb3dlckNhc2UoKTsKICAgICAgICBmb3IgKGxldCBrZXkgaW4gUFJJTUFSWV9CVVRUT05fTUFQKSB7CiAgICAgICAgICBpZiAobmFtZS5pbmNsdWRlcyhrZXkpKSB7CiAgICAgICAgICAgIHByaW1hcnlCdXR0b24gPSBQUklNQVJZX0JVVFRPTl9NQVBba2V5XTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoLm1pbihwcmltYXJ5QnV0dG9uLCBnYW1lcGFkLmJ1dHRvbnMubGVuZ3RoIC0gMSk7CiAgICAgIH0KICAgICAgb25GcmFtZVN0YXJ0KHNlc3Npb25JZCwgcmVuZGVyU3RhdGUpIHsKICAgICAgICB0aGlzLmRpc3BsYXkuZGVwdGhOZWFyID0gcmVuZGVyU3RhdGUuZGVwdGhOZWFyOwogICAgICAgIHRoaXMuZGlzcGxheS5kZXB0aEZhciA9IHJlbmRlclN0YXRlLmRlcHRoRmFyOwogICAgICAgIHRoaXMuZGlzcGxheS5nZXRGcmFtZURhdGEodGhpcy5mcmFtZSk7CiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7CiAgICAgICAgaWYgKHNlc3Npb24uaW1tZXJzaXZlICYmIHRoaXMuQ0FOX1VTRV9HQU1FUEFEKSB7CiAgICAgICAgICBsZXQgcHJldklucHV0U291cmNlcyA9IHRoaXMuZ2FtZXBhZElucHV0U291cmNlczsKICAgICAgICAgIHRoaXMuZ2FtZXBhZElucHV0U291cmNlcyA9IHt9OwogICAgICAgICAgbGV0IGdhbWVwYWRzID0gdGhpcy5nbG9iYWwubmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGxldCBnYW1lcGFkID0gZ2FtZXBhZHNbaV07CiAgICAgICAgICAgIGlmIChnYW1lcGFkICYmIGdhbWVwYWQuZGlzcGxheUlkID4gMCkgewogICAgICAgICAgICAgIGxldCBpbnB1dFNvdXJjZUltcGwgPSBwcmV2SW5wdXRTb3VyY2VzW2ldOwogICAgICAgICAgICAgIGlmICghaW5wdXRTb3VyY2VJbXBsKSB7CiAgICAgICAgICAgICAgICBpbnB1dFNvdXJjZUltcGwgPSBuZXcgR2FtZXBhZFhSSW5wdXRTb3VyY2UodGhpcywgdGhpcy5kaXNwbGF5LCB0aGlzLmdldFByaW1hcnlCdXR0b25JbmRleChnYW1lcGFkKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlucHV0U291cmNlSW1wbC51cGRhdGVGcm9tR2FtZXBhZChnYW1lcGFkKTsKICAgICAgICAgICAgICB0aGlzLmdhbWVwYWRJbnB1dFNvdXJjZXNbaV0gPSBpbnB1dFNvdXJjZUltcGw7CiAgICAgICAgICAgICAgaWYgKGlucHV0U291cmNlSW1wbC5wcmltYXJ5QnV0dG9uSW5kZXggIT0gLTEpIHsKICAgICAgICAgICAgICAgIGxldCBwcmltYXJ5QWN0aW9uUHJlc3NlZCA9IGdhbWVwYWQuYnV0dG9uc1tpbnB1dFNvdXJjZUltcGwucHJpbWFyeUJ1dHRvbkluZGV4XS5wcmVzc2VkOwogICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBY3Rpb25QcmVzc2VkICYmICFpbnB1dFNvdXJjZUltcGwucHJpbWFyeUFjdGlvblByZXNzZWQpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdAQHdlYnhyLXBvbHlmaWxsL2lucHV0LXNlbGVjdC1zdGFydCcsIHsgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLCBpbnB1dFNvdXJjZTogaW5wdXRTb3VyY2VJbXBsLmlucHV0U291cmNlIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghcHJpbWFyeUFjdGlvblByZXNzZWQgJiYgaW5wdXRTb3VyY2VJbXBsLnByaW1hcnlBY3Rpb25QcmVzc2VkKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnQEB3ZWJ4ci1wb2x5ZmlsbC9pbnB1dC1zZWxlY3QtZW5kJywgeyBzZXNzaW9uSWQ6IHNlc3Npb24uaWQsIGlucHV0U291cmNlOiBpbnB1dFNvdXJjZUltcGwuaW5wdXRTb3VyY2UgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbnB1dFNvdXJjZUltcGwucHJpbWFyeUFjdGlvblByZXNzZWQgPSBwcmltYXJ5QWN0aW9uUHJlc3NlZDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGlucHV0U291cmNlSW1wbC5wcmltYXJ5U3F1ZWV6ZUJ1dHRvbkluZGV4ICE9IC0xKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJpbWFyeVNxdWVlemVBY3Rpb25QcmVzc2VkID0gZ2FtZXBhZC5idXR0b25zW2lucHV0U291cmNlSW1wbC5wcmltYXJ5U3F1ZWV6ZUJ1dHRvbkluZGV4XS5wcmVzc2VkOwogICAgICAgICAgICAgICAgaWYgKHByaW1hcnlTcXVlZXplQWN0aW9uUHJlc3NlZCAmJiAhaW5wdXRTb3VyY2VJbXBsLnByaW1hcnlTcXVlZXplQWN0aW9uUHJlc3NlZCkgewogICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ0BAd2VieHItcG9seWZpbGwvaW5wdXQtc3F1ZWV6ZS1zdGFydCcsIHsgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLCBpbnB1dFNvdXJjZTogaW5wdXRTb3VyY2VJbXBsLmlucHV0U291cmNlIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghcHJpbWFyeVNxdWVlemVBY3Rpb25QcmVzc2VkICYmIGlucHV0U291cmNlSW1wbC5wcmltYXJ5U3F1ZWV6ZUFjdGlvblByZXNzZWQpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdAQHdlYnhyLXBvbHlmaWxsL2lucHV0LXNxdWVlemUtZW5kJywgeyBzZXNzaW9uSWQ6IHNlc3Npb24uaWQsIGlucHV0U291cmNlOiBpbnB1dFNvdXJjZUltcGwuaW5wdXRTb3VyY2UgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbnB1dFNvdXJjZUltcGwucHJpbWFyeVNxdWVlemVBY3Rpb25QcmVzc2VkID0gcHJpbWFyeVNxdWVlemVBY3Rpb25QcmVzc2VkOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIXNlc3Npb24uaW1tZXJzaXZlICYmIHNlc3Npb24uYmFzZUxheWVyKSB7CiAgICAgICAgICBjb25zdCBjYW52YXMgPSBzZXNzaW9uLmJhc2VMYXllci5jb250ZXh0LmNhbnZhczsKICAgICAgICAgIHBlcnNwZWN0aXZlKHRoaXMuZnJhbWUubGVmdFByb2plY3Rpb25NYXRyaXgsIHJlbmRlclN0YXRlLmlubGluZVZlcnRpY2FsRmllbGRPZlZpZXcsCiAgICAgICAgICAgICAgY2FudmFzLndpZHRoL2NhbnZhcy5oZWlnaHQsIHJlbmRlclN0YXRlLmRlcHRoTmVhciwgcmVuZGVyU3RhdGUuZGVwdGhGYXIpOwogICAgICAgIH0KICAgICAgfQogICAgICBvbkZyYW1lRW5kKHNlc3Npb25JZCkgewogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgICAgIGlmIChzZXNzaW9uLmVuZGVkIHx8ICFzZXNzaW9uLmJhc2VMYXllcikgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvbi5vdXRwdXRDb250ZXh0ICYmCiAgICAgICAgICAgICEoc2Vzc2lvbi5pbW1lcnNpdmUgJiYgIXRoaXMuZGlzcGxheS5jYXBhYmlsaXRpZXMuaGFzRXh0ZXJuYWxEaXNwbGF5KSkgewogICAgICAgICAgY29uc3QgbWlycm9yaW5nID0KICAgICAgICAgICAgc2Vzc2lvbi5pbW1lcnNpdmUgJiYgdGhpcy5kaXNwbGF5LmNhcGFiaWxpdGllcy5oYXNFeHRlcm5hbERpc3BsYXk7CiAgICAgICAgICBjb25zdCBpQ2FudmFzID0gc2Vzc2lvbi5iYXNlTGF5ZXIuY29udGV4dC5jYW52YXM7CiAgICAgICAgICBjb25zdCBpV2lkdGggPSBtaXJyb3JpbmcgPyBpQ2FudmFzLndpZHRoIC8gMiA6IGlDYW52YXMud2lkdGg7CiAgICAgICAgICBjb25zdCBpSGVpZ2h0ID0gaUNhbnZhcy5oZWlnaHQ7CiAgICAgICAgICB7CiAgICAgICAgICAgIGNvbnN0IG9DYW52YXMgPSBzZXNzaW9uLm91dHB1dENvbnRleHQuY2FudmFzOwogICAgICAgICAgICBjb25zdCBvV2lkdGggPSBvQ2FudmFzLndpZHRoOwogICAgICAgICAgICBjb25zdCBvSGVpZ2h0ID0gb0NhbnZhcy5oZWlnaHQ7CiAgICAgICAgICAgIGNvbnN0IHJlbmRlckNvbnRleHQgPSBzZXNzaW9uLnJlbmRlckNvbnRleHQ7CiAgICAgICAgICAgIGlmICh0aGlzLkhBU19CSVRNQVBfU1VQUE9SVCkgewogICAgICAgICAgICAgIGlmIChpQ2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCkgewogICAgICAgICAgICAgICAgcmVuZGVyQ29udGV4dC50cmFuc2ZlckZyb21JbWFnZUJpdG1hcChpQ2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbC5jcmVhdGVJbWFnZUJpdG1hcChpQ2FudmFzLCAwLCAwLCBpV2lkdGgsIGlIZWlnaHQsIHsKICAgICAgICAgICAgICAgICAgcmVzaXplV2lkdGg6IG9XaWR0aCwKICAgICAgICAgICAgICAgICAgcmVzaXplSGVpZ2h0OiBvSGVpZ2h0LAogICAgICAgICAgICAgICAgfSkudGhlbihiaXRtYXAgPT4gcmVuZGVyQ29udGV4dC50cmFuc2ZlckZyb21JbWFnZUJpdG1hcChiaXRtYXApKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVuZGVyQ29udGV4dC5kcmF3SW1hZ2UoaUNhbnZhcywgMCwgMCwgaVdpZHRoLCBpSGVpZ2h0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIG9XaWR0aCwgb0hlaWdodCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHNlc3Npb24uaW1tZXJzaXZlICYmIHNlc3Npb24uYmFzZUxheWVyKSB7CiAgICAgICAgICB0aGlzLmRpc3BsYXkuc3VibWl0RnJhbWUoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7CiAgICAgICAgdGhpcy5kaXNwbGF5LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7CiAgICAgIH0KICAgICAgYXN5bmMgZW5kU2Vzc2lvbihzZXNzaW9uSWQpIHsKICAgICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5zZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTsKICAgICAgICBpZiAoc2Vzc2lvbi5lbmRlZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvbi5pbW1lcnNpdmUpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXkuZXhpdFByZXNlbnQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2Vzc2lvbi5lbmRlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICAgIGRvZXNTZXNzaW9uU3VwcG9ydFJlZmVyZW5jZVNwYWNlKHNlc3Npb25JZCwgdHlwZSkgewogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgICAgIGlmIChzZXNzaW9uLmVuZGVkKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZXNzaW9uLmVuYWJsZWRGZWF0dXJlcy5oYXModHlwZSk7CiAgICAgIH0KICAgICAgcmVxdWVzdFN0YWdlQm91bmRzKCkgewogICAgICAgIGlmICh0aGlzLmRpc3BsYXkuc3RhZ2VQYXJhbWV0ZXJzKSB7CiAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGlzcGxheS5zdGFnZVBhcmFtZXRlcnMuc2l6ZVg7CiAgICAgICAgICBjb25zdCBkZXB0aCA9IHRoaXMuZGlzcGxheS5zdGFnZVBhcmFtZXRlcnMuc2l6ZVo7CiAgICAgICAgICBjb25zdCBkYXRhID0gW107CiAgICAgICAgICBkYXRhLnB1c2goLXdpZHRoIC8gMik7CiAgICAgICAgICBkYXRhLnB1c2goLWRlcHRoIC8gMik7CiAgICAgICAgICBkYXRhLnB1c2god2lkdGggLyAyKTsKICAgICAgICAgIGRhdGEucHVzaCgtZGVwdGggLyAyKTsKICAgICAgICAgIGRhdGEucHVzaCh3aWR0aCAvIDIpOwogICAgICAgICAgZGF0YS5wdXNoKGRlcHRoIC8gMik7CiAgICAgICAgICBkYXRhLnB1c2goLXdpZHRoIC8gMik7CiAgICAgICAgICBkYXRhLnB1c2goZGVwdGggLyAyKTsKICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBhc3luYyByZXF1ZXN0RnJhbWVPZlJlZmVyZW5jZVRyYW5zZm9ybSh0eXBlLCBvcHRpb25zKSB7CiAgICAgICAgaWYgKCh0eXBlID09PSAnbG9jYWwtZmxvb3InIHx8IHR5cGUgPT09ICdib3VuZGVkLWZsb29yJykgJiYKICAgICAgICAgICAgdGhpcy5kaXNwbGF5LnN0YWdlUGFyYW1ldGVycyAmJgogICAgICAgICAgICB0aGlzLmRpc3BsYXkuc3RhZ2VQYXJhbWV0ZXJzLnNpdHRpbmdUb1N0YW5kaW5nVHJhbnNmb3JtKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5LnN0YWdlUGFyYW1ldGVycy5zaXR0aW5nVG9TdGFuZGluZ1RyYW5zZm9ybTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgZ2V0UHJvamVjdGlvbk1hdHJpeChleWUpIHsKICAgICAgICBpZiAoZXllID09PSAnbGVmdCcpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmZyYW1lLmxlZnRQcm9qZWN0aW9uTWF0cml4OwogICAgICAgIH0gZWxzZSBpZiAoZXllID09PSAncmlnaHQnKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5mcmFtZS5yaWdodFByb2plY3Rpb25NYXRyaXg7CiAgICAgICAgfSBlbHNlIGlmIChleWUgPT09ICdub25lJykgewogICAgICAgICAgcmV0dXJuIHRoaXMuZnJhbWUubGVmdFByb2plY3Rpb25NYXRyaXg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXllIG11c3QgYmUgb2YgdHlwZSAnbGVmdCcgb3IgJ3JpZ2h0J2ApOwogICAgICAgIH0KICAgICAgfQogICAgICBnZXRWaWV3cG9ydChzZXNzaW9uSWQsIGV5ZSwgbGF5ZXIsIHRhcmdldCkgewogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gbGF5ZXIuY29udGV4dC5jYW52YXM7CiAgICAgICAgaWYgKCFzZXNzaW9uLmltbWVyc2l2ZSkgewogICAgICAgICAgdGFyZ2V0LnggPSB0YXJnZXQueSA9IDA7CiAgICAgICAgICB0YXJnZXQud2lkdGggPSB3aWR0aDsKICAgICAgICAgIHRhcmdldC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGV5ZSA9PT0gJ2xlZnQnIHx8IGV5ZSA9PT0gJ25vbmUnKSB7CiAgICAgICAgICB0YXJnZXQueCA9IDA7CiAgICAgICAgfSBlbHNlIGlmIChleWUgPT09ICdyaWdodCcpIHsKICAgICAgICAgIHRhcmdldC54ID0gd2lkdGggLyAyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRhcmdldC55ID0gMDsKICAgICAgICB0YXJnZXQud2lkdGggPSB3aWR0aCAvIDI7CiAgICAgICAgdGFyZ2V0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBnZXRCYXNlUG9zZU1hdHJpeCgpIHsKICAgICAgICBsZXQgeyBwb3NpdGlvbiwgb3JpZW50YXRpb24gfSA9IHRoaXMuZnJhbWUucG9zZTsKICAgICAgICBpZiAoIXBvc2l0aW9uICYmICFvcmllbnRhdGlvbikgewogICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZU1vZGVsTWF0cml4OwogICAgICAgIH0KICAgICAgICBpZiAoIXBvc2l0aW9uKSB7CiAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMudGVtcFZlYzM7CiAgICAgICAgICBwb3NpdGlvblswXSA9IHBvc2l0aW9uWzFdID0gcG9zaXRpb25bMl0gPSAwOwogICAgICAgIH0KICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbih0aGlzLmJhc2VNb2RlbE1hdHJpeCwgb3JpZW50YXRpb24sIHBvc2l0aW9uKTsKICAgICAgICByZXR1cm4gdGhpcy5iYXNlTW9kZWxNYXRyaXg7CiAgICAgIH0KICAgICAgZ2V0QmFzZVZpZXdNYXRyaXgoZXllKSB7CiAgICAgICAgaWYgKGV5ZSA9PT0gJ2xlZnQnIHx8IGV5ZSA9PT0gJ25vbmUnKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5mcmFtZS5sZWZ0Vmlld01hdHJpeDsKICAgICAgICB9IGVsc2UgaWYgKGV5ZSA9PT0gJ3JpZ2h0JykgewogICAgICAgICAgcmV0dXJuIHRoaXMuZnJhbWUucmlnaHRWaWV3TWF0cml4OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV5ZSBtdXN0IGJlIG9mIHR5cGUgJ2xlZnQnIG9yICdyaWdodCdgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZ2V0SW5wdXRTb3VyY2VzKCkgewogICAgICAgIGxldCBpbnB1dFNvdXJjZXMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZ2FtZXBhZElucHV0U291cmNlcykgewogICAgICAgICAgaW5wdXRTb3VyY2VzLnB1c2godGhpcy5nYW1lcGFkSW5wdXRTb3VyY2VzW2ldLmlucHV0U291cmNlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlucHV0U291cmNlczsKICAgICAgfQogICAgICBnZXRJbnB1dFBvc2UoaW5wdXRTb3VyY2UsIGNvb3JkaW5hdGVTeXN0ZW0sIHBvc2VUeXBlKSB7CiAgICAgICAgaWYgKCFjb29yZGluYXRlU3lzdGVtKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLmdhbWVwYWRJbnB1dFNvdXJjZXMpIHsKICAgICAgICAgIGxldCBpbnB1dFNvdXJjZUltcGwgPSB0aGlzLmdhbWVwYWRJbnB1dFNvdXJjZXNbaV07CiAgICAgICAgICBpZiAoaW5wdXRTb3VyY2VJbXBsLmlucHV0U291cmNlID09PSBpbnB1dFNvdXJjZSkgewogICAgICAgICAgICByZXR1cm4gaW5wdXRTb3VyY2VJbXBsLmdldFhSUG9zZShjb29yZGluYXRlU3lzdGVtLCBwb3NlVHlwZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIG9uV2luZG93UmVzaXplKCkgewogICAgICB9CiAgICAgIG9uVlJEaXNwbGF5UHJlc2VudENoYW5nZShlKSB7CiAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXkuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICB0aGlzLnNlc3Npb25zLmZvckVhY2goc2Vzc2lvbiA9PiB7CiAgICAgICAgICAgIGlmIChzZXNzaW9uLmltbWVyc2l2ZSAmJiAhc2Vzc2lvbi5lbmRlZCkgewogICAgICAgICAgICAgIGlmIChzZXNzaW9uLm1vZGlmaWVkQ2FudmFzTGF5ZXIpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHNlc3Npb24uYmFzZUxheWVyLmNvbnRleHQuY2FudmFzOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjYW52YXMpOwogICAgICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0aGlzLmltbWVyc2l2ZVNlc3Npb24gPT09IHNlc3Npb24pIHsKICAgICAgICAgICAgICAgIHRoaXMuaW1tZXJzaXZlU2Vzc2lvbiA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnQEB3ZWJ4ci1wb2x5ZmlsbC92ci1wcmVzZW50LWVuZCcsIHNlc3Npb24uaWQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBjbGFzcyBDYXJkYm9hcmRYUkRldmljZSBleHRlbmRzIFdlYlZSRGV2aWNlIHsKICAgICAgY29uc3RydWN0b3IoZ2xvYmFsLCBjYXJkYm9hcmRDb25maWcpIHsKICAgICAgICBjb25zdCBkaXNwbGF5ID0gbmV3IENhcmRib2FyZFZSRGlzcGxheShjYXJkYm9hcmRDb25maWcgfHwge30pOwogICAgICAgIHN1cGVyKGdsb2JhbCwgZGlzcGxheSk7CiAgICAgICAgdGhpcy5kaXNwbGF5ID0gZGlzcGxheTsKICAgICAgICB0aGlzLmZyYW1lID0gewogICAgICAgICAgcmlnaHRWaWV3TWF0cml4OiBuZXcgRmxvYXQzMkFycmF5KDE2KSwKICAgICAgICAgIGxlZnRWaWV3TWF0cml4OiBuZXcgRmxvYXQzMkFycmF5KDE2KSwKICAgICAgICAgIHJpZ2h0UHJvamVjdGlvbk1hdHJpeDogbmV3IEZsb2F0MzJBcnJheSgxNiksCiAgICAgICAgICBsZWZ0UHJvamVjdGlvbk1hdHJpeDogbmV3IEZsb2F0MzJBcnJheSgxNiksCiAgICAgICAgICBwb3NlOiBudWxsLAogICAgICAgICAgdGltZXN0YW1wOiBudWxsLAogICAgICAgIH07CiAgICAgIH0KICAgIH0KICAgIGxldCBTRVNTSU9OX0lEJDEgPSAwOwogICAgY2xhc3MgU2Vzc2lvbiQxIHsKICAgICAgY29uc3RydWN0b3IobW9kZSwgZW5hYmxlZEZlYXR1cmVzKSB7CiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTsKICAgICAgICB0aGlzLmVuYWJsZWRGZWF0dXJlcyA9IGVuYWJsZWRGZWF0dXJlczsKICAgICAgICB0aGlzLmVuZGVkID0gbnVsbDsKICAgICAgICB0aGlzLmJhc2VMYXllciA9IG51bGw7CiAgICAgICAgdGhpcy5pZCA9ICsrU0VTU0lPTl9JRCQxOwogICAgICB9CiAgICB9CiAgICBjbGFzcyBJbmxpbmVEZXZpY2UgZXh0ZW5kcyBYUkRldmljZSB7CiAgICAgIGNvbnN0cnVjdG9yKGdsb2JhbCkgewogICAgICAgIHN1cGVyKGdsb2JhbCk7CiAgICAgICAgdGhpcy5zZXNzaW9ucyA9IG5ldyBNYXAoKTsKICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBjcmVhdGUoKTsKICAgICAgICB0aGlzLmlkZW50aXR5TWF0cml4ID0gY3JlYXRlKCk7CiAgICAgIH0KICAgICAgb25CYXNlTGF5ZXJTZXQoc2Vzc2lvbklkLCBsYXllcikgewogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgICAgIHNlc3Npb24uYmFzZUxheWVyID0gbGF5ZXI7CiAgICAgIH0KICAgICAgaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpIHsKICAgICAgICByZXR1cm4gbW9kZSA9PSAnaW5saW5lJzsKICAgICAgfQogICAgICBpc0ZlYXR1cmVTdXBwb3J0ZWQoZmVhdHVyZURlc2NyaXB0b3IpIHsKICAgICAgICBzd2l0Y2goZmVhdHVyZURlc2NyaXB0b3IpIHsKICAgICAgICAgIGNhc2UgJ3ZpZXdlcic6IHJldHVybiB0cnVlOwogICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBhc3luYyByZXF1ZXN0U2Vzc2lvbihtb2RlLCBlbmFibGVkRmVhdHVyZXMpIHsKICAgICAgICBpZiAoIXRoaXMuaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpKSB7CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uJDEobW9kZSwgZW5hYmxlZEZlYXR1cmVzKTsKICAgICAgICB0aGlzLnNlc3Npb25zLnNldChzZXNzaW9uLmlkLCBzZXNzaW9uKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNlc3Npb24uaWQpOwogICAgICB9CiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykgewogICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTsKICAgICAgfQogICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpIHsKICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTsKICAgICAgfQogICAgICBvbkZyYW1lU3RhcnQoc2Vzc2lvbklkLCByZW5kZXJTdGF0ZSkgewogICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgICAgIGlmIChzZXNzaW9uLmJhc2VMYXllcikgewogICAgICAgICAgY29uc3QgY2FudmFzID0gc2Vzc2lvbi5iYXNlTGF5ZXIuY29udGV4dC5jYW52YXM7CiAgICAgICAgICBwZXJzcGVjdGl2ZSh0aGlzLnByb2plY3Rpb25NYXRyaXgsIHJlbmRlclN0YXRlLmlubGluZVZlcnRpY2FsRmllbGRPZlZpZXcsCiAgICAgICAgICAgICAgY2FudmFzLndpZHRoL2NhbnZhcy5oZWlnaHQsIHJlbmRlclN0YXRlLmRlcHRoTmVhciwgcmVuZGVyU3RhdGUuZGVwdGhGYXIpOwogICAgICAgIH0KICAgICAgfQogICAgICBvbkZyYW1lRW5kKHNlc3Npb25JZCkgewogICAgICB9CiAgICAgIGFzeW5jIGVuZFNlc3Npb24oc2Vzc2lvbklkKSB7CiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7CiAgICAgICAgc2Vzc2lvbi5lbmRlZCA9IHRydWU7CiAgICAgIH0KICAgICAgZG9lc1Nlc3Npb25TdXBwb3J0UmVmZXJlbmNlU3BhY2Uoc2Vzc2lvbklkLCB0eXBlKSB7CiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7CiAgICAgICAgaWYgKHNlc3Npb24uZW5kZWQpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlc3Npb24uZW5hYmxlZEZlYXR1cmVzLmhhcyh0eXBlKTsKICAgICAgfQogICAgICByZXF1ZXN0U3RhZ2VCb3VuZHMoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgYXN5bmMgcmVxdWVzdEZyYW1lT2ZSZWZlcmVuY2VUcmFuc2Zvcm0odHlwZSwgb3B0aW9ucykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGdldFByb2plY3Rpb25NYXRyaXgoZXllKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdGlvbk1hdHJpeDsKICAgICAgfQogICAgICBnZXRWaWV3cG9ydChzZXNzaW9uSWQsIGV5ZSwgbGF5ZXIsIHRhcmdldCkgewogICAgICAgIHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7CiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBsYXllci5jb250ZXh0LmNhbnZhczsKICAgICAgICB0YXJnZXQueCA9IHRhcmdldC55ID0gMDsKICAgICAgICB0YXJnZXQud2lkdGggPSB3aWR0aDsKICAgICAgICB0YXJnZXQuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGdldEJhc2VQb3NlTWF0cml4KCkgewogICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5TWF0cml4OwogICAgICB9CiAgICAgIGdldEJhc2VWaWV3TWF0cml4KGV5ZSkgewogICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5TWF0cml4OwogICAgICB9CiAgICAgIGdldElucHV0U291cmNlcygpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgICAgZ2V0SW5wdXRQb3NlKGlucHV0U291cmNlLCBjb29yZGluYXRlU3lzdGVtLCBwb3NlVHlwZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIG9uV2luZG93UmVzaXplKCkgewogICAgICB9CiAgICB9CgogICAgY29uc3QgZ2V0V2ViVlJEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiAoZ2xvYmFsKSB7CiAgICAgIGxldCBkZXZpY2UgPSBudWxsOwogICAgICBpZiAoJ2dldFZSRGlzcGxheXMnIGluIGdsb2JhbC5uYXZpZ2F0b3IpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgZGlzcGxheXMgPSBhd2FpdCBnbG9iYWwubmF2aWdhdG9yLmdldFZSRGlzcGxheXMoKTsKICAgICAgICAgIGlmIChkaXNwbGF5cyAmJiBkaXNwbGF5cy5sZW5ndGgpIHsKICAgICAgICAgICAgZGV2aWNlID0gbmV3IFdlYlZSRGV2aWNlKGdsb2JhbCwgZGlzcGxheXNbMF0pOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgIH0KICAgICAgcmV0dXJuIGRldmljZTsKICAgIH07CiAgICBjb25zdCByZXF1ZXN0WFJEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiAoZ2xvYmFsLCBjb25maWcpIHsKICAgICAgaWYgKGNvbmZpZy53ZWJ2cikgewogICAgICAgIGxldCB4ciA9IGF3YWl0IGdldFdlYlZSRGV2aWNlKGdsb2JhbCk7CiAgICAgICAgaWYgKHhyKSB7CiAgICAgICAgICByZXR1cm4geHI7CiAgICAgICAgfQogICAgICB9CiAgICAgIGxldCBtb2JpbGUgPSBpc01vYmlsZShnbG9iYWwpOwogICAgICBpZiAoKG1vYmlsZSAmJiBjb25maWcuY2FyZGJvYXJkKSB8fAogICAgICAgICAgKCFtb2JpbGUgJiYgY29uZmlnLmFsbG93Q2FyZGJvYXJkT25EZXNrdG9wKSkgewogICAgICAgIGlmICghZ2xvYmFsLlZSRnJhbWVEYXRhKSB7CiAgICAgICAgICBnbG9iYWwuVlJGcmFtZURhdGEgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMucmlnaHRWaWV3TWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgICAgICAgICAgIHRoaXMubGVmdFZpZXdNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICAgICAgICAgICAgdGhpcy5yaWdodFByb2plY3Rpb25NYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICAgICAgICAgICAgdGhpcy5sZWZ0UHJvamVjdGlvbk1hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpOwogICAgICAgICAgICB0aGlzLnBvc2UgPSBudWxsOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDYXJkYm9hcmRYUkRldmljZShnbG9iYWwsIGNvbmZpZy5jYXJkYm9hcmRDb25maWcpOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgSW5saW5lRGV2aWNlKGdsb2JhbCk7CiAgICB9OwoKICAgIGNvbnN0IENPTkZJR19ERUZBVUxUUyA9IHsKICAgICAgZ2xvYmFsOiBfZ2xvYmFsLAogICAgICB3ZWJ2cjogdHJ1ZSwKICAgICAgY2FyZGJvYXJkOiB0cnVlLAogICAgICBjYXJkYm9hcmRDb25maWc6IG51bGwsCiAgICAgIGFsbG93Q2FyZGJvYXJkT25EZXNrdG9wOiBmYWxzZSwKICAgIH07CiAgICBjb25zdCBwYXJ0aWFscyA9IFsnbmF2aWdhdG9yJywgJ0hUTUxDYW52YXNFbGVtZW50JywgJ1dlYkdMUmVuZGVyaW5nQ29udGV4dCddOwogICAgY2xhc3MgV2ViWFJQb2x5ZmlsbCB7CiAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZz17fSkgewogICAgICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuYXNzaWduKHt9LCBDT05GSUdfREVGQVVMVFMsIGNvbmZpZykpOwogICAgICAgIHRoaXMuZ2xvYmFsID0gdGhpcy5jb25maWcuZ2xvYmFsOwogICAgICAgIHRoaXMubmF0aXZlV2ViWFIgPSAneHInIGluIHRoaXMuZ2xvYmFsLm5hdmlnYXRvcjsKICAgICAgICB0aGlzLmluamVjdGVkID0gZmFsc2U7CiAgICAgICAgaWYgKCF0aGlzLm5hdGl2ZVdlYlhSKSB7CiAgICAgICAgICB0aGlzLl9pbmplY3RQb2x5ZmlsbCh0aGlzLmdsb2JhbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuX2luamVjdENvbXBhdGliaWxpdHlTaGltcyh0aGlzLmdsb2JhbCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIF9pbmplY3RQb2x5ZmlsbChnbG9iYWwpIHsKICAgICAgICBpZiAoIXBhcnRpYWxzLmV2ZXJ5KGlmYWNlID0+ICEhZ2xvYmFsW2lmYWNlXSkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2xvYmFsIG11c3QgaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgOiAke3BhcnRpYWxzfWApOwogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IGNsYXNzTmFtZSBvZiBPYmplY3Qua2V5cyhBUEkpKSB7CiAgICAgICAgICBpZiAoZ2xvYmFsW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Y2xhc3NOYW1lfSBhbHJlYWR5IGRlZmluZWQgb24gZ2xvYmFsLmApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZ2xvYmFsW2NsYXNzTmFtZV0gPSBBUElbY2xhc3NOYW1lXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgewogICAgICAgICAgY29uc3QgcG9seWZpbGxlZEN0eCA9IHBvbHlmaWxsTWFrZVhSQ29tcGF0aWJsZShnbG9iYWwuV2ViR0xSZW5kZXJpbmdDb250ZXh0KTsKICAgICAgICAgIGlmIChwb2x5ZmlsbGVkQ3R4KSB7CiAgICAgICAgICAgIHBvbHlmaWxsR2V0Q29udGV4dChnbG9iYWwuSFRNTENhbnZhc0VsZW1lbnQpOwogICAgICAgICAgICBpZiAoZ2xvYmFsLk9mZnNjcmVlbkNhbnZhcykgewogICAgICAgICAgICAgIHBvbHlmaWxsR2V0Q29udGV4dChnbG9iYWwuT2Zmc2NyZWVuQ2FudmFzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZ2xvYmFsLldlYkdMMlJlbmRlcmluZ0NvbnRleHQpewogICAgICAgICAgICAgIHBvbHlmaWxsTWFrZVhSQ29tcGF0aWJsZShnbG9iYWwuV2ViR0wyUmVuZGVyaW5nQ29udGV4dCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF3aW5kb3cuaXNTZWN1cmVDb250ZXh0KSB7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBXZWJYUiBQb2x5ZmlsbCBXYXJuaW5nOgpUaGlzIHBhZ2UgaXMgbm90IHJ1bm5pbmcgaW4gYSBzZWN1cmUgY29udGV4dCAoaHR0cHM6Ly8gb3IgbG9jYWxob3N0KSEKVGhpcyBtZWFucyB0aGF0IGFsdGhvdWdoIHRoZSBwYWdlIG1heSBiZSBhYmxlIHRvIHVzZSB0aGUgV2ViWFIgUG9seWZpbGwgaXQgd2lsbApub3QgYmUgYWJsZSB0byB1c2UgbmF0aXZlIFdlYlhSIGltcGxlbWVudGF0aW9ucywgYW5kIGFzIHN1Y2ggd2lsbCBub3QgYmUgYWJsZSB0bwphY2Nlc3MgZGVkaWNhdGVkIFZSIG9yIEFSIGhhcmR3YXJlLCBhbmQgd2lsbCBub3QgYmUgYWJsZSB0byB0YWtlIGFkdmFudGFnZSBvZgphbnkgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGEgbmF0aXZlIFdlYlhSIGltcGxlbWVudGF0aW9uIG1heSBvZmZlci4gUGxlYXNlCmhvc3QgdGhpcyBjb250ZW50IG9uIGEgc2VjdXJlIG9yaWdpbiBmb3IgdGhlIGJlc3QgdXNlciBleHBlcmllbmNlLgpgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLmluamVjdGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLl9wYXRjaE5hdmlnYXRvclhSKCk7CiAgICAgIH0KICAgICAgX3BhdGNoTmF2aWdhdG9yWFIoKSB7CiAgICAgICAgbGV0IGRldmljZVByb21pc2UgPSByZXF1ZXN0WFJEZXZpY2UodGhpcy5nbG9iYWwsIHRoaXMuY29uZmlnKTsKICAgICAgICB0aGlzLnhyID0gbmV3IEFQSS5YUlN5c3RlbShkZXZpY2VQcm9taXNlKTsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5nbG9iYWwubmF2aWdhdG9yLCAneHInLCB7CiAgICAgICAgICB2YWx1ZTogdGhpcy54ciwKICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICB9KTsKICAgICAgfQogICAgICBfaW5qZWN0Q29tcGF0aWJpbGl0eVNoaW1zKGdsb2JhbCkgewogICAgICAgIGlmICghcGFydGlhbHMuZXZlcnkoaWZhY2UgPT4gISFnbG9iYWxbaWZhY2VdKSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHbG9iYWwgbXVzdCBoYXZlIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyA6ICR7cGFydGlhbHN9YCk7CiAgICAgICAgfQogICAgICAgIGlmIChnbG9iYWwubmF2aWdhdG9yLnhyICYmCiAgICAgICAgICAgICdzdXBwb3J0c1Nlc3Npb24nIGluIGdsb2JhbC5uYXZpZ2F0b3IueHIgJiYKICAgICAgICAgICAgISgnaXNTZXNzaW9uU3VwcG9ydGVkJyBpbiBnbG9iYWwubmF2aWdhdG9yLnhyKSkgewogICAgICAgICAgbGV0IG9yaWdpbmFsU3VwcG9ydHNTZXNzaW9uID0gZ2xvYmFsLm5hdmlnYXRvci54ci5zdXBwb3J0c1Nlc3Npb247CiAgICAgICAgICBnbG9iYWwubmF2aWdhdG9yLnhyLmlzU2Vzc2lvblN1cHBvcnRlZCA9IGZ1bmN0aW9uKG1vZGUpIHsKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3VwcG9ydHNTZXNzaW9uLmNhbGwodGhpcywgbW9kZSkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfTsKICAgICAgICAgIGdsb2JhbC5uYXZpZ2F0b3IueHIuc3VwcG9ydHNTZXNzaW9uID0gZnVuY3Rpb24obW9kZSkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIm5hdmlnYXRvci54ci5zdXBwb3J0c1Nlc3Npb24oKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgIiArCiAgICAgICAgICAgICJjYWxsIG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoKSBpbnN0ZWFkIGFuZCBjaGVjayB0aGUgYm9vbGVhbiAiICsKICAgICAgICAgICAgInZhbHVlIHJldHVybmVkIHdoZW4gdGhlIHByb21pc2UgcmVzb2x2ZXMuIik7CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFN1cHBvcnRzU2Vzc2lvbi5jYWxsKHRoaXMsIG1vZGUpOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB2YXIgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgidmlkZW8iKVswXTsKCiAgICB2YXIgcG9seWZpbGwgPSBudWxsOwoKICAgIGxldCBjYW1lcmEsIHNjZW5lLCByZW5kZXJlcjsKICAgIGxldCB2aWRlb1BsYW5lLCB2aWRlb1RleHR1cmU7CiAgICBsZXQgcHJvZ3Jlc3NCYXIsIGJhck1hdGVyaWFsOwoKICAgIGlmKCF2aWRlbyl7CiAgICAgICAgY29uc29sZS5sb2coaW5pdCk7CiAgICAgICAgY29uc29sZS5sb2coYW5pbWF0ZSk7CiAgICAgICAgbG9nKCJObyB2aWRlbywgc2tpcHBpbmcgaW5qZWN0aW9uLiIpOwogICAgfWVsc2UgewoKICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgICAgbG9nKCJJbmplY3RlZCBzdHlsZXMiLCBudWxsLCBzdHlsZSk7CgogICAgICAgIHBvbHlmaWxsID0gbmV3IFdlYlhSUG9seWZpbGwod2luZG93LlZSX0NPTkZJRyk7CgogICAgICAgIGxvZygiV2ViWFJQb2x5ZmlsbCBpbnN0YW50aWF0ZWQuIiAsICJwcmUtaW5pdCIsIHBvbHlmaWxsKTsKICAgICAgICBsb2coIlZpZGVvIGZvdW5kOiAiLCBudWxsLCB2aWRlbyk7CgogICAgICAgIGluaXQoKTsKICAgICAgICBhbmltYXRlKCk7CiAgICB9CgoKICAgIC8vIEhlbGxvCgogICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICBsb2coIlN0YXJ0aW5nIiwgImluaXQiKTsKCiAgICAgICAgLy8gU3RhcnQgdmlkZW8KICAgICAgICB2aWRlby5wbGF5KCk7CiAgICAgICAgdmlkZW9UZXh0dXJlID0gbmV3IFZpZGVvVGV4dHVyZSh2aWRlbyk7CgogICAgICAgIC8vIFNldHVwIHNjZW5lCiAgICAgICAgc2NlbmUgPSBuZXcgU2NlbmUoKTsKICAgICAgICBjYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoNzAsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDApOwogICAgICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gMTsKCiAgICAgICAgLy8gQ3JlYXRlIHJlbmRlcmVyCiAgICAgICAgcmVuZGVyZXIgPSBuZXcgV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KTsKICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpOwogICAgICAgIHJlbmRlcmVyLnhyLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIHJlbmRlcmVyLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgid2ViZ2wiKTsKCiAgICAgICAgLy8gQ3JlYXRlIG1vZGFsIG92ZXJsYXkgY29udGFpbmVyCiAgICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBtb2RhbC5pZCA9ICd2ci1vdmVybGF5LW1vZGFsJzsKCiAgICAgICAgY29uc3QgY2FudmFzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgY2FudmFzQ29udGFpbmVyLmlkID0gJ3ZyLWNhbnZhcy1jb250YWluZXInOwoKICAgICAgICBjYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7CiAgICAgICAgbW9kYWwuYXBwZW5kQ2hpbGQoY2FudmFzQ29udGFpbmVyKTsKCiAgICAgICAgLy8gQWRkIFN0YXJ0IGJ1dHRvbgogICAgICAgIC8qY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgICBzdGFydEJ1dHRvbi5pZCA9ICd2ci1zdGFydC1idXR0b24nOwogICAgICAgIHN0YXJ0QnV0dG9uLnRleHRDb250ZW50ID0gJ0VudGVyIFZSJzsKICAgICAgICBzdGFydEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gewogICAgICAgICAgICBtb2RhbC5yZW1vdmVDaGlsZChzdGFydEJ1dHRvbik7IC8vIFJlbW92ZSBidXR0b24gYWZ0ZXIgY2xpY2sKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChWUkJ1dHRvbi5jcmVhdGVCdXR0b24ocmVuZGVyZXIpKTsKICAgICAgICB9OwogICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTsqLwoKICAgICAgICBjb25zb2xlLmxvZygidGVzdDEiKTsKICAgICAgICBsZXQgdnJfYnV0dG9uID0gbW9kYWwuYXBwZW5kQ2hpbGQoVlJCdXR0b24uY3JlYXRlQnV0dG9uKHJlbmRlcmVyKSk7CiAgICAgICAgY29uc29sZS5sb2coInRlc3QyIiwgdnJfYnV0dG9uKTsKCiAgICAgICAgLy8gQWRkIENsb3NlIGJ1dHRvbgogICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgICAgICAgY2xvc2VCdXR0b24uaWQgPSAndnItY2xvc2UtYnV0dG9uJzsKICAgICAgICBjbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdDbG9zZSc7CgogICAgICAgIC8qc3RhcnRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHsKICAgICAgICAgICAgbW9kYWwucmVtb3ZlQ2hpbGQoc3RhcnRCdXR0b24pOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIC8vIDEuIFJlcXVlc3QgYW4gaW1tZXJzaXZlIFZSIHNlc3Npb24gKG11c3QgYmUgaW5zaWRlIHVzZXIgZ2VzdHVyZSBoYW5kbGVyKQogICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHhyLnJlcXVlc3RTZXNzaW9uKCJpbmxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxGZWF0dXJlczogWyJsb2NhbCJdLAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy8gMi4gQXR0YWNoIHNlc3Npb24gdG8gcmVuZGVyZXIKICAgICAgICAgICAgICAgIGF3YWl0IHJlbmRlcmVyLnhyLnNldFNlc3Npb24oc2Vzc2lvbik7CgogICAgICAgICAgICAgICAgLy8gMy4gT3B0aW9uYWxseSBhcHBlbmQgdGhlIHN0YW5kYXJkIFZSQnV0dG9uIHRvIGFsbG93IGV4aXRpbmcgbGF0ZXIKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoVlJCdXR0b24uY3JlYXRlQnV0dG9uKHJlbmRlcmVyKSk7CgogICAgICAgICAgICAgICAgLy8gNC4gKE9wdGlvbmFsKSBSZXNpemUgcmVuZGVyZXIgdG8gZnVsbC13aW5kb3cgYmVmb3JlIHNlc3Npb24gYmVnaW5zCiAgICAgICAgICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpOwogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkZhaWxlZCB0byBzdGFydCBYUiBzZXNzaW9uOiIsIGVycik7CiAgICAgICAgICAgIH0KICAgICAgICB9OyovCgogICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTsKCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtb2RhbCk7CgogICAgICAgIC8vIEJhY2tncm91bmQKICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpOwogICAgICAgIGNvbnN0IHRleHR1cmUgPSBsb2FkZXIubG9hZCgnYm94LnBuZycpOwogICAgICAgIHNjZW5lLmJhY2tncm91bmQgPSB0ZXh0dXJlOwoKICAgICAgICAvLyBWaWRlbyBQbGFuZQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoMS42LCAwLjkpOwogICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgbWFwOiB2aWRlb1RleHR1cmUgfSk7CiAgICAgICAgdmlkZW9QbGFuZSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7CiAgICAgICAgdmlkZW9QbGFuZS5wb3NpdGlvbi5zZXQoMCwgMCwgLTEuNSk7CiAgICAgICAgc2NlbmUuYWRkKHZpZGVvUGxhbmUpOwoKICAgICAgICAvLyBDb250cm9scwogICAgICAgIGNyZWF0ZUJ1dHRvbign4pa2JywgLTAuNiwgLTEuNSwgKCkgPT4gdmlkZW8ucGxheSgpKTsKICAgICAgICBjcmVhdGVCdXR0b24oJ+KPqicsIC0wLjksIC0xLjUsICgpID0+IHsgdmlkZW8uY3VycmVudFRpbWUgPSBNYXRoLm1heCgwLCB2aWRlby5jdXJyZW50VGltZSAtIDUpOyB9KTsKICAgICAgICBjcmVhdGVCdXR0b24oJ+KPqScsIC0wLjMsIC0xLjUsICgpID0+IHsgdmlkZW8uY3VycmVudFRpbWUgPSBNYXRoLm1pbih2aWRlby5kdXJhdGlvbiwgdmlkZW8uY3VycmVudFRpbWUgKyA1KTsgfSk7CgogICAgICAgIC8vIFByb2dyZXNzIEJhcgogICAgICAgIGNvbnN0IGJhckdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoMS4yLCAwLjA1KTsKICAgICAgICBiYXJNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweDAwZmYwMCB9KTsKICAgICAgICBwcm9ncmVzc0JhciA9IG5ldyBNZXNoKGJhckdlb21ldHJ5LCBiYXJNYXRlcmlhbCk7CiAgICAgICAgcHJvZ3Jlc3NCYXIucG9zaXRpb24uc2V0KDAsIC0wLjksIC0xLjUpOwogICAgICAgIHNjZW5lLmFkZChwcm9ncmVzc0Jhcik7CgogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbihsYWJlbCwgeCwgeSwgb25DbGljaykgewogICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgIGNhbnZhcy53aWR0aCA9IDEyODsKICAgICAgICBjYW52YXMuaGVpZ2h0ID0gMTI4OwogICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzAwMCc7CiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIDEyOCwgMTI4KTsKICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNmZmYnOwogICAgICAgIGN0eC5mb250ID0gJ2JvbGQgNjRweCBzYW5zLXNlcmlmJzsKICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7CiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnOwogICAgICAgIGN0eC5maWxsVGV4dChsYWJlbCwgNjQsIDY0KTsKCiAgICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBDYW52YXNUZXh0dXJlKGNhbnZhcyk7CiAgICAgICAgY29uc3QgbWF0ID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgbWFwOiB0ZXh0dXJlLCB0cmFuc3BhcmVudDogdHJ1ZSB9KTsKICAgICAgICBjb25zdCBnZW8gPSBuZXcgUGxhbmVHZW9tZXRyeSgwLjMsIDAuMyk7CiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBNZXNoKGdlbywgbWF0KTsKICAgICAgICBtZXNoLnBvc2l0aW9uLnNldCh4LCB5LCAtMS41KTsKICAgICAgICBzY2VuZS5hZGQobWVzaCk7CiAgICAgICAgLy8gRm9yIGZ1dHVyZSBpbnRlcmFjdGl2aXR5IChlLmcuLCByYXljYXN0aW5nKTogc3RvcmUgY2xpY2sgaGFuZGxlcgogICAgICAgIG1lc2gudXNlckRhdGEub25DbGljayA9IG9uQ2xpY2s7CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3NCYXIoKSB7CiAgICAgICAgaWYgKCF2aWRlby5kdXJhdGlvbikgcmV0dXJuOwogICAgICAgIGNvbnN0IHJhdGlvID0gdmlkZW8uY3VycmVudFRpbWUgLyB2aWRlby5kdXJhdGlvbjsKICAgICAgICBwcm9ncmVzc0Jhci5zY2FsZS54ID0gcmF0aW87CiAgICAgICAgcHJvZ3Jlc3NCYXIucG9zaXRpb24ueCA9IC0wLjYgKyByYXRpbyAqIDAuNjsKICAgIH0KCiAgICBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHsKICAgICAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7CiAgICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7CiAgICAgICAgcmVuZGVyZXIuc2V0QW5pbWF0aW9uTG9vcChyZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgICB1cGRhdGVQcm9ncmVzc0JhcigpOwogICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTsKICAgIH0KCn0pKCk7Cg==';
const WEBVR_B64 = '';

(function () {
    'use strict';

    function log(msg, module, obj){
        console.log(`[VR Video Injector${module ? ' / ' : ''}${module ? module : ''}] ${msg}`, obj ? obj : ' ');
    }

    function err(msg, module, obj){
        console.error(`[ERROR - VR Video Injector${module ? ' / ' : ''}${module ? module : ''}] ${msg}`, obj ? obj : ' ');
    }

    // --- Chrome Promisified Wrappers ---

    function queryTabs(queryOptions) {
        return new Promise((resolve, reject) => {
            chrome.tabs.query(queryOptions, (tabs) => {
                if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                } else {
                    resolve(tabs);
                }
            });
        });
    }

    function executeScriptPromise(tabId, details) {
        return new Promise((resolve, reject) => {
            chrome.tabs.executeScript(tabId, details, (result) => {
                if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                } else {
                    resolve(result);
                }
            });
        });
    }

    function getStorageValue(key) {
        return new Promise((resolve, reject) => {
            //let timeout = setTimeout(() => {
            //    console.warn("chrome.storage.local.get callback never fired");
            //    reject(new Error("storage timeout"));
            //}, 2000);

            chrome.storage.local.get(key, (result) => {
                //clearTimeout(timeout);
                if (chrome.runtime.lastError) {
                    reject(chrome.runtime.lastError);
                } else {
                    resolve(result[key]);
                }
            });
        });
    }


    // --- Helpers ---

    async function getCurrentTab() {
        try {
            const tabs = await queryTabs({ active: true, currentWindow: true });
            if (!tabs.length) {
                throw new Error('No active tab found');
            }
            log("Current tab found", "extHelper.js", tabs[0]);
            return tabs[0];
        } catch (e) {
            err("Could not find tab", "extHelper.js", e);
            throw e;
        }
    }

    function utf8ToBase64(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (_, p1) =>
            String.fromCharCode(parseInt(p1, 16))
        ));
    }

    async function injectB64ScriptTagIntoTab(tab, B64, scriptName) {
        log(`Trying to inject ${scriptName}`, "injectB64ScriptTagIntoTab");

        const code = `
    (function() {
      console.log("[VR Video Injector / chrome.tabs.executeScript] Injecting ${scriptName}");
      const s = document.createElement('script');
      s.src = "data:text/javascript;base64,${B64}";
      (document.head || document.documentElement).appendChild(s);
    })();
  `;

        try {
            await executeScriptPromise(tab.id, { code, runAt: 'document_idle' });
            log(`Injected ${scriptName} successfully`, "injectB64ScriptTagIntoTab");
        } catch (e) {
            err(`Failed to inject ${scriptName}`, "injectB64ScriptTagIntoTab", e.message);
        }
    }

    async function injectConfiguration(tab, type) {
        const cfg_key = type === 'webxr' ? 'webxr_conf' : 'webvr_conf';
        log("Injecting configuration...", "injectConfiguration", cfg_key);

        try {
            console.log("chrome.storage.local available?", typeof chrome.storage?.local);
            const config = await getStorageValue(cfg_key);
            log("storage result:", "injectConfiguration", config);

            const configJson = JSON.stringify(config || {});
            const base64 = utf8ToBase64(`window.VR_CONFIG = ${configJson};`);

            log("Found configuration. injecting into page...", "injectConfiguration");
            await injectB64ScriptTagIntoTab(tab, base64, cfg_key);
        } catch (e) {
            err("Failed to inject configuration", "injectConfiguration", e.message);
        }
    }

    async function injectPlugin(msg) {
        const B64 = msg.type === 'webxr' ? WEBXR_B64 :
            msg.type === 'webvr' ? WEBVR_B64 : null;
        if (!B64) return;

        try {
            log("Injecting: ", "injectPlugin", msg);
            const tab = await getCurrentTab();
            log("Got tab: ", "injectPlugin", tab);
            try {
                await injectConfiguration(tab, msg.type);
            } catch (e) {
                err("injectConfiguration() failed", "injectPlugin", e.message);
            }
            try {
                await injectB64ScriptTagIntoTab(tab, B64, `main script: ${msg.type}`);
            } catch (e) {
                err("injectB64ScriptTagIntoTab() failed", "injectPlugin", e.message);
            }
        } catch (e) {
            err("Failed to inject plugin", "injectPlugin", e.message);
        }
    }

    document.getElementById('btn-webxr').addEventListener('click', async () => {
        log("Injecting WebXR", "browserAction");
        await injectPlugin({type: 'webxr'});
        window.close();
    });

    document.getElementById('btn-webvr').addEventListener('click', async () => {
        log("Injecting WebVR", "browserAction");
        await injectPlugin({type: 'webvr'});
        window.close();
    });

})();

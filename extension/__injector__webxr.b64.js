export const WEBXR_B64 = '(function () {
    'use strict';

    function log(msg, module, obj){
        console.log(`[VR Video Injector${module ? ' / ' : ''}${module ? module : ''}] ${msg}`, obj);
    }

    var styles = "#vr-overlay-modal {\r\n    position: fixed;\r\n    z-index: 999999;\r\n    top: 0; left: 0; right: 0; bottom: 0;\r\n    background: rgba(0,0,0,0.95);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n}\r\n#vr-canvas-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n#vr-start-button {\r\n    position: absolute;\r\n    z-index: 1000000;\r\n    top: 20px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    padding: 12px 24px;\r\n    font-size: 16px;\r\n    background-color: #00cc88;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n}\r\n#vr-close-button {\r\n    position: absolute;\r\n    top: 20px;\r\n    right: 20px;\r\n    z-index: 1000000;\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n    background-color: #cc3333;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n}\r\ncanvas.webgl {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n}";

    /**
     * @license
     * Copyright 2010-2025 Three.js Authors
     * SPDX-License-Identifier: MIT
     */
    const REVISION = '178';

    /**
     * Disables face culling.
     *
     * @type {number}
     * @constant
     */
    const CullFaceNone = 0;

    /**
     * Culls back faces.
     *
     * @type {number}
     * @constant
     */
    const CullFaceBack = 1;

    /**
     * Culls front faces.
     *
     * @type {number}
     * @constant
     */
    const CullFaceFront = 2;

    /**
     * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.
     *
     * @type {number}
     * @constant
     */
    const PCFShadowMap = 1;

    /**
     * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with
     * better soft shadows especially when using low-resolution shadow maps.
     *
     * @type {number}
     * @constant
     */
    const PCFSoftShadowMap = 2;

    /**
     * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.
     * When using VSMShadowMap all shadow receivers will also cast shadows.
     *
     * @type {number}
     * @constant
     */
    const VSMShadowMap = 3;

    /**
     * Only front faces are rendered.
     *
     * @type {number}
     * @constant
     */
    const FrontSide = 0;

    /**
     * Only back faces are rendered.
     *
     * @type {number}
     * @constant
     */
    const BackSide = 1;

    /**
     * Both front and back faces are rendered.
     *
     * @type {number}
     * @constant
     */
    const DoubleSide = 2;

    /**
     * No blending is performed which effectively disables
     * alpha transparency.
     *
     * @type {number}
     * @constant
     */
    const NoBlending = 0;

    /**
     * The default blending.
     *
     * @type {number}
     * @constant
     */
    const NormalBlending = 1;

    /**
     * Represents additive blending.
     *
     * @type {number}
     * @constant
     */
    const AdditiveBlending = 2;

    /**
     * Represents subtractive blending.
     *
     * @type {number}
     * @constant
     */
    const SubtractiveBlending = 3;

    /**
     * Represents multiply blending.
     *
     * @type {number}
     * @constant
     */
    const MultiplyBlending = 4;

    /**
     * Represents custom blending.
     *
     * @type {number}
     * @constant
     */
    const CustomBlending = 5;

    /**
     * A `source + destination` blending equation.
     *
     * @type {number}
     * @constant
     */
    const AddEquation = 100;

    /**
     * A `source - destination` blending equation.
     *
     * @type {number}
     * @constant
     */
    const SubtractEquation = 101;

    /**
     * A `destination - source` blending equation.
     *
     * @type {number}
     * @constant
     */
    const ReverseSubtractEquation = 102;

    /**
     * A blend equation that uses the minimum of source and destination.
     *
     * @type {number}
     * @constant
     */
    const MinEquation = 103;

    /**
     * A blend equation that uses the maximum of source and destination.
     *
     * @type {number}
     * @constant
     */
    const MaxEquation = 104;

    /**
     * Multiplies all colors by `0`.
     *
     * @type {number}
     * @constant
     */
    const ZeroFactor = 200;

    /**
     * Multiplies all colors by `1`.
     *
     * @type {number}
     * @constant
     */
    const OneFactor = 201;

    /**
     * Multiplies all colors by the source colors.
     *
     * @type {number}
     * @constant
     */
    const SrcColorFactor = 202;

    /**
     * Multiplies all colors by `1` minus each source color.
     *
     * @type {number}
     * @constant
     */
    const OneMinusSrcColorFactor = 203;

    /**
     * Multiplies all colors by the source alpha value.
     *
     * @type {number}
     * @constant
     */
    const SrcAlphaFactor = 204;

    /**
     * Multiplies all colors by 1 minus the source alpha value.
     *
     * @type {number}
     * @constant
     */
    const OneMinusSrcAlphaFactor = 205;

    /**
     * Multiplies all colors by the destination alpha value.
     *
     * @type {number}
     * @constant
     */
    const DstAlphaFactor = 206;

    /**
     * Multiplies all colors by `1` minus the destination alpha value.
     *
     * @type {number}
     * @constant
     */
    const OneMinusDstAlphaFactor = 207;

    /**
     * Multiplies all colors by the destination color.
     *
     * @type {number}
     * @constant
     */
    const DstColorFactor = 208;

    /**
     * Multiplies all colors by `1` minus each destination color.
     *
     * @type {number}
     * @constant
     */
    const OneMinusDstColorFactor = 209;

    /**
     * Multiplies the RGB colors by the smaller of either the source alpha
     * value or the value of `1` minus the destination alpha value. The alpha
     * value is multiplied by `1`.
     *
     * @type {number}
     * @constant
     */
    const SrcAlphaSaturateFactor = 210;

    /**
     * Multiplies all colors by a constant color.
     *
     * @type {number}
     * @constant
     */
    const ConstantColorFactor = 211;

    /**
     * Multiplies all colors by `1` minus a constant color.
     *
     * @type {number}
     * @constant
     */
    const OneMinusConstantColorFactor = 212;

    /**
     * Multiplies all colors by a constant alpha value.
     *
     * @type {number}
     * @constant
     */
    const ConstantAlphaFactor = 213;

    /**
     * Multiplies all colors by 1 minus a constant alpha value.
     *
     * @type {number}
     * @constant
     */
    const OneMinusConstantAlphaFactor = 214;

    /**
     * Never pass.
     *
     * @type {number}
     * @constant
     */
    const NeverDepth = 0;

    /**
     * Always pass.
     *
     * @type {number}
     * @constant
     */
    const AlwaysDepth = 1;

    /**
     * Pass if the incoming value is less than the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const LessDepth = 2;

    /**
     * Pass if the incoming value is less than or equal to the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const LessEqualDepth = 3;

    /**
     * Pass if the incoming value equals the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const EqualDepth = 4;

    /**
     * Pass if the incoming value is greater than or equal to the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const GreaterEqualDepth = 5;

    /**
     * Pass if the incoming value is greater than the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const GreaterDepth = 6;

    /**
     * Pass if the incoming value is not equal to the depth buffer value.
     *
     * @type {number}
     * @constant
     */
    const NotEqualDepth = 7;

    /**
     * Multiplies the environment map color with the surface color.
     *
     * @type {number}
     * @constant
     */
    const MultiplyOperation = 0;

    /**
     * Uses reflectivity to blend between the two colors.
     *
     * @type {number}
     * @constant
     */
    const MixOperation = 1;

    /**
     * Adds the two colors.
     *
     * @type {number}
     * @constant
     */
    const AddOperation = 2;

    /**
     * No tone mapping is applied.
     *
     * @type {number}
     * @constant
     */
    const NoToneMapping = 0;

    /**
     * Linear tone mapping.
     *
     * @type {number}
     * @constant
     */
    const LinearToneMapping = 1;

    /**
     * Reinhard tone mapping.
     *
     * @type {number}
     * @constant
     */
    const ReinhardToneMapping = 2;

    /**
     * Cineon tone mapping.
     *
     * @type {number}
     * @constant
     */
    const CineonToneMapping = 3;

    /**
     * ACES Filmic tone mapping.
     *
     * @type {number}
     * @constant
     */
    const ACESFilmicToneMapping = 4;

    /**
     * Custom tone mapping.
     *
     * Expects a custom implementation by modifying shader code of the material's fragment shader.
     *
     * @type {number}
     * @constant
     */
    const CustomToneMapping = 5;

    /**
     * AgX tone mapping.
     *
     * @type {number}
     * @constant
     */
    const AgXToneMapping = 6;

    /**
     * Neutral tone mapping.
     *
     * Implementation based on the Khronos 3D Commerce Group standard tone mapping.
     *
     * @type {number}
     * @constant
     */
    const NeutralToneMapping = 7;

    /**
     * Maps textures using the geometry's UV coordinates.
     *
     * @type {number}
     * @constant
     */
    const UVMapping = 300;

    /**
     * Reflection mapping for cube textures.
     *
     * @type {number}
     * @constant
     */
    const CubeReflectionMapping = 301;

    /**
     * Refraction mapping for cube textures.
     *
     * @type {number}
     * @constant
     */
    const CubeRefractionMapping = 302;

    /**
     * Reflection mapping for equirectangular textures.
     *
     * @type {number}
     * @constant
     */
    const EquirectangularReflectionMapping = 303;

    /**
     * Refraction mapping for equirectangular textures.
     *
     * @type {number}
     * @constant
     */
    const EquirectangularRefractionMapping = 304;

    /**
     * Reflection mapping for PMREM textures.
     *
     * @type {number}
     * @constant
     */
    const CubeUVReflectionMapping = 306;

    /**
     * The texture will simply repeat to infinity.
     *
     * @type {number}
     * @constant
     */
    const RepeatWrapping = 1000;

    /**
     * The last pixel of the texture stretches to the edge of the mesh.
     *
     * @type {number}
     * @constant
     */
    const ClampToEdgeWrapping = 1001;

    /**
     * The texture will repeats to infinity, mirroring on each repeat.
     *
     * @type {number}
     * @constant
     */
    const MirroredRepeatWrapping = 1002;

    /**
     * Returns the value of the texture element that is nearest (in Manhattan distance)
     * to the specified texture coordinates.
     *
     * @type {number}
     * @constant
     */
    const NearestFilter = 1003;

    /**
     * Chooses the mipmap that most closely matches the size of the pixel being textured
     * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)
     * to produce a texture value.
     *
     * @type {number}
     * @constant
     */
    const NearestMipmapNearestFilter = 1004;

    /**
     * Chooses the two mipmaps that most closely match the size of the pixel being textured and
     * uses the `NearestFilter` criterion to produce a texture value from each mipmap.
     * The final texture value is a weighted average of those two values.
     *
     * @type {number}
     * @constant
     */
    const NearestMipmapLinearFilter = 1005;

    /**
     * Returns the weighted average of the four texture elements that are closest to the specified
     * texture coordinates, and can include items wrapped or repeated from other parts of a texture,
     * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.
     *
     * @type {number}
     * @constant
     */
    const LinearFilter = 1006;

    /**
     * Chooses the mipmap that most closely matches the size of the pixel being textured and uses
     * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the
     * center of the pixel) to produce a texture value.
     *
     * @type {number}
     * @constant
     */
    const LinearMipmapNearestFilter = 1007;

    /**
     * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses
     * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value
     * is a weighted average of those two values.
     *
     * @type {number}
     * @constant
     */
    const LinearMipmapLinearFilter = 1008;

    /**
     * An unsigned byte data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedByteType = 1009;

    /**
     * A byte data type for textures.
     *
     * @type {number}
     * @constant
     */
    const ByteType = 1010;

    /**
     * A short data type for textures.
     *
     * @type {number}
     * @constant
     */
    const ShortType = 1011;

    /**
     * An unsigned short data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedShortType = 1012;

    /**
     * An int data type for textures.
     *
     * @type {number}
     * @constant
     */
    const IntType = 1013;

    /**
     * An unsigned int data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedIntType = 1014;

    /**
     * A float data type for textures.
     *
     * @type {number}
     * @constant
     */
    const FloatType = 1015;

    /**
     * A half float data type for textures.
     *
     * @type {number}
     * @constant
     */
    const HalfFloatType = 1016;

    /**
     * An unsigned short 4_4_4_4 (packed) data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedShort4444Type = 1017;

    /**
     * An unsigned short 5_5_5_1 (packed) data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedShort5551Type = 1018;

    /**
     * An unsigned int 24_8 data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedInt248Type = 1020;

    /**
     * An unsigned int 5_9_9_9 (packed) data type for textures.
     *
     * @type {number}
     * @constant
     */
    const UnsignedInt5999Type = 35902;

    /**
     * Discards the red, green and blue components and reads just the alpha component.
     *
     * @type {number}
     * @constant
     */
    const AlphaFormat = 1021;

    /**
     * Discards the alpha component and reads the red, green and blue component.
     *
     * @type {number}
     * @constant
     */
    const RGBFormat = 1022;

    /**
     * Reads the red, green, blue and alpha components.
     *
     * @type {number}
     * @constant
     */
    const RGBAFormat = 1023;

    /**
     * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.
     *
     * @type {number}
     * @constant
     */
    const DepthFormat = 1026;

    /**
     * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as
     * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.
     *
     * @type {number}
     * @constant
     */
    const DepthStencilFormat = 1027;

    /**
     * Discards the green, blue and alpha components and reads just the red component.
     *
     * @type {number}
     * @constant
     */
    const RedFormat = 1028;

    /**
     * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.
     *
     * @type {number}
     * @constant
     */
    const RedIntegerFormat = 1029;

    /**
     * Discards the alpha, and blue components and reads the red, and green components.
     *
     * @type {number}
     * @constant
     */
    const RGFormat = 1030;

    /**
     * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.
     *
     * @type {number}
     * @constant
     */
    const RGIntegerFormat = 1031;

    /**
     * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.
     *
     * @type {number}
     * @constant
     */
    const RGBAIntegerFormat = 1033;

    /**
     * A DXT1-compressed image in an RGB image format.
     *
     * @type {number}
     * @constant
     */
    const RGB_S3TC_DXT1_Format = 33776;

    /**
     * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.
     *
     * @type {number}
     * @constant
     */
    const RGBA_S3TC_DXT1_Format = 33777;

    /**
     * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.
     *
     * @type {number}
     * @constant
     */
    const RGBA_S3TC_DXT3_Format = 33778;

    /**
     * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3
     * compression in how the alpha compression is done.
     *
     * @type {number}
     * @constant
     */
    const RGBA_S3TC_DXT5_Format = 33779;

    /**
     * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.
     *
     * @type {number}
     * @constant
     */
    const RGB_PVRTC_4BPPV1_Format = 35840;

    /**
     * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.
     *
     * @type {number}
     * @constant
     */
    const RGB_PVRTC_2BPPV1_Format = 35841;

    /**
     * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.
     *
     * @type {number}
     * @constant
     */
    const RGBA_PVRTC_4BPPV1_Format = 35842;

    /**
     * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.
     *
     * @type {number}
     * @constant
     */
    const RGBA_PVRTC_2BPPV1_Format = 35843;

    /**
     * ETC1 RGB format.
     *
     * @type {number}
     * @constant
     */
    const RGB_ETC1_Format = 36196;

    /**
     * ETC2 RGB format.
     *
     * @type {number}
     * @constant
     */
    const RGB_ETC2_Format = 37492;

    /**
     * ETC2 RGBA format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ETC2_EAC_Format = 37496;

    /**
     * ASTC RGBA 4x4 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_4x4_Format = 37808;

    /**
     * ASTC RGBA 5x4 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_5x4_Format = 37809;

    /**
     * ASTC RGBA 5x5 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_5x5_Format = 37810;

    /**
     * ASTC RGBA 6x5 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_6x5_Format = 37811;

    /**
     * ASTC RGBA 6x6 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_6x6_Format = 37812;

    /**
     * ASTC RGBA 8x5 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_8x5_Format = 37813;

    /**
     * ASTC RGBA 8x6 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_8x6_Format = 37814;

    /**
     * ASTC RGBA 8x8 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_8x8_Format = 37815;

    /**
     * ASTC RGBA 10x5 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_10x5_Format = 37816;

    /**
     * ASTC RGBA 10x6 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_10x6_Format = 37817;

    /**
     * ASTC RGBA 10x8 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_10x8_Format = 37818;

    /**
     * ASTC RGBA 10x10 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_10x10_Format = 37819;

    /**
     * ASTC RGBA 12x10 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_12x10_Format = 37820;

    /**
     * ASTC RGBA 12x12 format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_ASTC_12x12_Format = 37821;

    /**
     * BPTC RGBA format.
     *
     * @type {number}
     * @constant
     */
    const RGBA_BPTC_Format = 36492;

    /**
     * BPTC Signed RGB format.
     *
     * @type {number}
     * @constant
     */
    const RGB_BPTC_SIGNED_Format = 36494;

    /**
     * BPTC Unsigned RGB format.
     *
     * @type {number}
     * @constant
     */
    const RGB_BPTC_UNSIGNED_Format = 36495;

    /**
     * RGTC1 Red format.
     *
     * @type {number}
     * @constant
     */
    const RED_RGTC1_Format = 36283;

    /**
     * RGTC1 Signed Red format.
     *
     * @type {number}
     * @constant
     */
    const SIGNED_RED_RGTC1_Format = 36284;

    /**
     * RGTC2 Red Green format.
     *
     * @type {number}
     * @constant
     */
    const RED_GREEN_RGTC2_Format = 36285;

    /**
     * RGTC2 Signed Red Green format.
     *
     * @type {number}
     * @constant
     */
    const SIGNED_RED_GREEN_RGTC2_Format = 36286;

    /**
     * Basic depth packing.
     *
     * @type {number}
     * @constant
     */
    const BasicDepthPacking = 3200;

    /**
     * A depth value is packed into 32 bit RGBA.
     *
     * @type {number}
     * @constant
     */
    const RGBADepthPacking = 3201;

    /**
     * Normal information is relative to the underlying surface.
     *
     * @type {number}
     * @constant
     */
    const TangentSpaceNormalMap = 0;

    /**
     * Normal information is relative to the object orientation.
     *
     * @type {number}
     * @constant
     */
    const ObjectSpaceNormalMap = 1;

    // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.

    /**
     * No color space.
     *
     * @type {string}
     * @constant
     */
    const NoColorSpace = '';

    /**
     * sRGB color space.
     *
     * @type {string}
     * @constant
     */
    const SRGBColorSpace = 'srgb';

    /**
     * sRGB-linear color space.
     *
     * @type {string}
     * @constant
     */
    const LinearSRGBColorSpace = 'srgb-linear';

    /**
     * Linear transfer function.
     *
     * @type {string}
     * @constant
     */
    const LinearTransfer = 'linear';

    /**
     * sRGB transfer function.
     *
     * @type {string}
     * @constant
     */
    const SRGBTransfer = 'srgb';

    /**
     * Keeps the current value.
     *
     * @type {number}
     * @constant
     */
    const KeepStencilOp = 7680;

    /**
     * Will always return true.
     *
     * @type {number}
     * @constant
     */
    const AlwaysStencilFunc = 519;

    /**
     * Never pass.
     *
     * @type {number}
     * @constant
     */
    const NeverCompare = 512;

    /**
     * Pass if the incoming value is less than the texture value.
     *
     * @type {number}
     * @constant
     */
    const LessCompare = 513;

    /**
     * Pass if the incoming value equals the texture value.
     *
     * @type {number}
     * @constant
     */
    const EqualCompare = 514;

    /**
     * Pass if the incoming value is less than or equal to the texture value.
     *
     * @type {number}
     * @constant
     */
    const LessEqualCompare = 515;

    /**
     * Pass if the incoming value is greater than the texture value.
     *
     * @type {number}
     * @constant
     */
    const GreaterCompare = 516;

    /**
     * Pass if the incoming value is not equal to the texture value.
     *
     * @type {number}
     * @constant
     */
    const NotEqualCompare = 517;

    /**
     * Pass if the incoming value is greater than or equal to the texture value.
     *
     * @type {number}
     * @constant
     */
    const GreaterEqualCompare = 518;

    /**
     * Always pass.
     *
     * @type {number}
     * @constant
     */
    const AlwaysCompare = 519;

    /**
     * The contents are intended to be specified once by the application, and used many
     * times as the source for drawing and image specification commands.
     *
     * @type {number}
     * @constant
     */
    const StaticDrawUsage = 35044;

    /**
     * GLSL 3 shader code.
     *
     * @type {string}
     * @constant
     */
    const GLSL3 = '300 es';

    /**
     * WebGL coordinate system.
     *
     * @type {number}
     * @constant
     */
    const WebGLCoordinateSystem = 2000;

    /**
     * WebGPU coordinate system.
     *
     * @type {number}
     * @constant
     */
    const WebGPUCoordinateSystem = 2001;

    /**
     * This type represents mouse buttons and interaction types in context of controls.
     *
     * @typedef {Object} ConstantsMouse
     * @property {number} MIDDLE - The left mouse button.
     * @property {number} LEFT - The middle mouse button.
     * @property {number} RIGHT - The right mouse button.
     * @property {number} ROTATE - A rotate interaction.
     * @property {number} DOLLY - A dolly interaction.
     * @property {number} PAN - A pan interaction.
     **/

    /**
     * This type represents touch interaction types in context of controls.
     *
     * @typedef {Object} ConstantsTouch
     * @property {number} ROTATE - A rotate interaction.
     * @property {number} PAN - A pan interaction.
     * @property {number} DOLLY_PAN - The dolly-pan interaction.
     * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.
     **/

    /**
     * This type represents the different timestamp query types.
     *
     * @typedef {Object} ConstantsTimestampQuery
     * @property {string} COMPUTE - A `compute` timestamp query.
     * @property {string} RENDER - A `render` timestamp query.
     **/

    /**
     * Represents the different interpolation sampling types.
     *
     * @typedef {Object} ConstantsInterpolationSamplingType
     * @property {string} PERSPECTIVE - Perspective-correct interpolation.
     * @property {string} LINEAR - Linear interpolation.
     * @property {string} FLAT - Flat interpolation.
     */

    /**
     * Represents the different interpolation sampling modes.
     *
     * @typedef {Object} ConstantsInterpolationSamplingMode
     * @property {string} NORMAL - Normal sampling mode.
     * @property {string} CENTROID - Centroid sampling mode.
     * @property {string} SAMPLE - Sample-specific sampling mode.
     * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.
     * @property {string} FLAT_EITHER - Flat interpolation using either vertex.
     */

    /**
     * This modules allows to dispatch event objects on custom JavaScript objects.
     *
     * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}
     *
     * Code Example:
     * ```js
     * class Car extends EventDispatcher {
     * 	start() {
     *		this.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );
     *	}
     *};
     *
     * // Using events with the custom object
     * const car = new Car();
     * car.addEventListener( 'start', function ( event ) {
     * 	alert( event.message );
     * } );
     *
     * car.start();
     * ```
     */
    class EventDispatcher {

    	/**
    	 * Adds the given event listener to the given event type.
    	 *
    	 * @param {string} type - The type of event to listen to.
    	 * @param {Function} listener - The function that gets called when the event is fired.
    	 */
    	addEventListener( type, listener ) {

    		if ( this._listeners === undefined ) this._listeners = {};

    		const listeners = this._listeners;

    		if ( listeners[ type ] === undefined ) {

    			listeners[ type ] = [];

    		}

    		if ( listeners[ type ].indexOf( listener ) === -1 ) {

    			listeners[ type ].push( listener );

    		}

    	}

    	/**
    	 * Returns `true` if the given event listener has been added to the given event type.
    	 *
    	 * @param {string} type - The type of event.
    	 * @param {Function} listener - The listener to check.
    	 * @return {boolean} Whether the given event listener has been added to the given event type.
    	 */
    	hasEventListener( type, listener ) {

    		const listeners = this._listeners;

    		if ( listeners === undefined ) return false;

    		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== -1;

    	}

    	/**
    	 * Removes the given event listener from the given event type.
    	 *
    	 * @param {string} type - The type of event.
    	 * @param {Function} listener - The listener to remove.
    	 */
    	removeEventListener( type, listener ) {

    		const listeners = this._listeners;

    		if ( listeners === undefined ) return;

    		const listenerArray = listeners[ type ];

    		if ( listenerArray !== undefined ) {

    			const index = listenerArray.indexOf( listener );

    			if ( index !== -1 ) {

    				listenerArray.splice( index, 1 );

    			}

    		}

    	}

    	/**
    	 * Dispatches an event object.
    	 *
    	 * @param {Object} event - The event that gets fired.
    	 */
    	dispatchEvent( event ) {

    		const listeners = this._listeners;

    		if ( listeners === undefined ) return;

    		const listenerArray = listeners[ event.type ];

    		if ( listenerArray !== undefined ) {

    			event.target = this;

    			// Make a copy, in case listeners are removed while iterating.
    			const array = listenerArray.slice( 0 );

    			for ( let i = 0, l = array.length; i < l; i ++ ) {

    				array[ i ].call( this, event );

    			}

    			event.target = null;

    		}

    	}

    }

    const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];


    const DEG2RAD = Math.PI / 180;
    const RAD2DEG = 180 / Math.PI;

    /**
     * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
     * (universally unique identifier).
     *
     * @return {string} The UUID.
     */
    function generateUUID() {

    	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

    	const d0 = Math.random() * 0xffffffff | 0;
    	const d1 = Math.random() * 0xffffffff | 0;
    	const d2 = Math.random() * 0xffffffff | 0;
    	const d3 = Math.random() * 0xffffffff | 0;
    	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
    			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
    			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
    			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

    	// .toLowerCase() here flattens concatenated strings to save heap memory space.
    	return uuid.toLowerCase();

    }

    /**
     * Clamps the given value between min and max.
     *
     * @param {number} value - The value to clamp.
     * @param {number} min - The min value.
     * @param {number} max - The max value.
     * @return {number} The clamped value.
     */
    function clamp( value, min, max ) {

    	return Math.max( min, Math.min( max, value ) );

    }

    /**
     * Computes the Euclidean modulo of the given parameters that
     * is `( ( n % m ) + m ) % m`.
     *
     * @param {number} n - The first parameter.
     * @param {number} m - The second parameter.
     * @return {number} The Euclidean modulo.
     */
    function euclideanModulo( n, m ) {

    	// https://en.wikipedia.org/wiki/Modulo_operation

    	return ( ( n % m ) + m ) % m;

    }

    /**
     * Returns a value linearly interpolated from two known points based on the given interval -
     * `t = 0` will return `x` and `t = 1` will return `y`.
     *
     * @param {number} x - The start point
     * @param {number} y - The end point.
     * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
     * @return {number} The interpolated value.
     */
    function lerp( x, y, t ) {

    	return ( 1 - t ) * x + t * y;

    }

    /**
     * Denormalizes the given value according to the given typed array.
     *
     * @param {number} value - The value to denormalize.
     * @param {TypedArray} array - The typed array that defines the data type of the value.
     * @return {number} The denormalize (float) value in the range `[0,1]`.
     */
    function denormalize( value, array ) {

    	switch ( array.constructor ) {

    		case Float32Array:

    			return value;

    		case Uint32Array:

    			return value / 4294967295.0;

    		case Uint16Array:

    			return value / 65535.0;

    		case Uint8Array:

    			return value / 255.0;

    		case Int32Array:

    			return Math.max( value / 2147483647.0, -1 );

    		case Int16Array:

    			return Math.max( value / 32767.0, -1 );

    		case Int8Array:

    			return Math.max( value / 127.0, -1 );

    		default:

    			throw new Error( 'Invalid component type.' );

    	}

    }

    /**
     * Normalizes the given value according to the given typed array.
     *
     * @param {number} value - The float value in the range `[0,1]` to normalize.
     * @param {TypedArray} array - The typed array that defines the data type of the value.
     * @return {number} The normalize value.
     */
    function normalize$3( value, array ) {

    	switch ( array.constructor ) {

    		case Float32Array:

    			return value;

    		case Uint32Array:

    			return Math.round( value * 4294967295.0 );

    		case Uint16Array:

    			return Math.round( value * 65535.0 );

    		case Uint8Array:

    			return Math.round( value * 255.0 );

    		case Int32Array:

    			return Math.round( value * 2147483647.0 );

    		case Int16Array:

    			return Math.round( value * 32767.0 );

    		case Int8Array:

    			return Math.round( value * 127.0 );

    		default:

    			throw new Error( 'Invalid component type.' );

    	}

    }

    /**
     * Class representing a 2D vector. A 2D vector is an ordered pair of numbers
     * (labeled x and y), which can be used to represent a number of things, such as:
     *
     * - A point in 2D space (i.e. a position on a plane).
     * - A direction and length across a plane. In three.js the length will
     * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`
     * and the direction is also measured from `(0, 0)` towards `(x, y)`.
     * - Any arbitrary ordered pair of numbers.
     *
     * There are other things a 2D vector can be used to represent, such as
     * momentum vectors, complex numbers and so on, however these are the most
     * common uses in three.js.
     *
     * Iterating through a vector instance will yield its components `(x, y)` in
     * the corresponding order.
     * ```js
     * const a = new THREE.Vector2( 0, 1 );
     *
     * //no arguments; will be initialised to (0, 0)
     * const b = new THREE.Vector2( );
     *
     * const d = a.distanceTo( b );
     * ```
     */
    class Vector2 {

    	/**
    	 * Constructs a new 2D vector.
    	 *
    	 * @param {number} [x=0] - The x value of this vector.
    	 * @param {number} [y=0] - The y value of this vector.
    	 */
    	constructor( x = 0, y = 0 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		Vector2.prototype.isVector2 = true;

    		/**
    		 * The x value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.x = x;

    		/**
    		 * The y value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.y = y;

    	}

    	/**
    	 * Alias for {@link Vector2#x}.
    	 *
    	 * @type {number}
    	 */
    	get width() {

    		return this.x;

    	}

    	set width( value ) {

    		this.x = value;

    	}

    	/**
    	 * Alias for {@link Vector2#y}.
    	 *
    	 * @type {number}
    	 */
    	get height() {

    		return this.y;

    	}

    	set height( value ) {

    		this.y = value;

    	}

    	/**
    	 * Sets the vector components.
    	 *
    	 * @param {number} x - The value of the x component.
    	 * @param {number} y - The value of the y component.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	set( x, y ) {

    		this.x = x;
    		this.y = y;

    		return this;

    	}

    	/**
    	 * Sets the vector components to the same value.
    	 *
    	 * @param {number} scalar - The value to set for all vector components.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;

    		return this;

    	}

    	/**
    	 * Sets the vector's x component to the given value
    	 *
    	 * @param {number} x - The value to set.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	/**
    	 * Sets the vector's y component to the given value
    	 *
    	 * @param {number} y - The value to set.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	/**
    	 * Allows to set a vector component with an index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y.
    	 * @param {number} value - The value to set.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	/**
    	 * Returns the value of the vector component which matches the given index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y.
    	 * @return {number} A vector component value.
    	 */
    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	/**
    	 * Returns a new vector with copied values from this instance.
    	 *
    	 * @return {Vector2} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this.x, this.y );

    	}

    	/**
    	 * Copies the values of the given vector to this instance.
    	 *
    	 * @param {Vector2} v - The vector to copy.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;

    		return this;

    	}

    	/**
    	 * Adds the given vector to this instance.
    	 *
    	 * @param {Vector2} v - The vector to add.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	add( v ) {

    		this.x += v.x;
    		this.y += v.y;

    		return this;

    	}

    	/**
    	 * Adds the given scalar value to all components of this instance.
    	 *
    	 * @param {number} s - The scalar to add.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	addScalar( s ) {

    		this.x += s;
    		this.y += s;

    		return this;

    	}

    	/**
    	 * Adds the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector2} a - The first vector.
    	 * @param {Vector2} b - The second vector.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;

    		return this;

    	}

    	/**
    	 * Adds the given vector scaled by the given factor to this instance.
    	 *
    	 * @param {Vector2} v - The vector.
    	 * @param {number} s - The factor that scales `v`.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vector from this instance.
    	 *
    	 * @param {Vector2} v - The vector to subtract.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	sub( v ) {

    		this.x -= v.x;
    		this.y -= v.y;

    		return this;

    	}

    	/**
    	 * Subtracts the given scalar value from all components of this instance.
    	 *
    	 * @param {number} s - The scalar to subtract.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector2} a - The first vector.
    	 * @param {Vector2} b - The second vector.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;

    		return this;

    	}

    	/**
    	 * Multiplies the given vector with this instance.
    	 *
    	 * @param {Vector2} v - The vector to multiply.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	multiply( v ) {

    		this.x *= v.x;
    		this.y *= v.y;

    		return this;

    	}

    	/**
    	 * Multiplies the given scalar value with all components of this instance.
    	 *
    	 * @param {number} scalar - The scalar to multiply.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;

    		return this;

    	}

    	/**
    	 * Divides this instance by the given vector.
    	 *
    	 * @param {Vector2} v - The vector to divide.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	divide( v ) {

    		this.x /= v.x;
    		this.y /= v.y;

    		return this;

    	}

    	/**
    	 * Divides this vector by the given scalar.
    	 *
    	 * @param {number} scalar - The scalar to divide.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	/**
    	 * Multiplies this vector (with an implicit 1 as the 3rd component) by
    	 * the given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The matrix to apply.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	applyMatrix3( m ) {

    		const x = this.x, y = this.y;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

    		return this;

    	}

    	/**
    	 * If this vector's x or y value is greater than the given vector's x or y
    	 * value, replace that value with the corresponding min value.
    	 *
    	 * @param {Vector2} v - The vector.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );

    		return this;

    	}

    	/**
    	 * If this vector's x or y value is less than the given vector's x or y
    	 * value, replace that value with the corresponding max value.
    	 *
    	 * @param {Vector2} v - The vector.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );

    		return this;

    	}

    	/**
    	 * If this vector's x or y value is greater than the max vector's x or y
    	 * value, it is replaced by the corresponding value.
    	 * If this vector's x or y value is less than the min vector's x or y value,
    	 * it is replaced by the corresponding value.
    	 *
    	 * @param {Vector2} min - The minimum x and y values.
    	 * @param {Vector2} max - The maximum x and y values in the desired range.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = clamp( this.x, min.x, max.x );
    		this.y = clamp( this.y, min.y, max.y );

    		return this;

    	}

    	/**
    	 * If this vector's x or y values are greater than the max value, they are
    	 * replaced by the max value.
    	 * If this vector's x or y values are less than the min value, they are
    	 * replaced by the min value.
    	 *
    	 * @param {number} minVal - The minimum value the components will be clamped to.
    	 * @param {number} maxVal - The maximum value the components will be clamped to.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	clampScalar( minVal, maxVal ) {

    		this.x = clamp( this.x, minVal, maxVal );
    		this.y = clamp( this.y, minVal, maxVal );

    		return this;

    	}

    	/**
    	 * If this vector's length is greater than the max value, it is replaced by
    	 * the max value.
    	 * If this vector's length is less than the min value, it is replaced by the
    	 * min value.
    	 *
    	 * @param {number} min - The minimum value the vector length will be clamped to.
    	 * @param {number} max - The maximum value the vector length will be clamped to.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );

    	}

    	/**
    	 * The components of this vector are rounded down to the nearest integer value.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded up to the nearest integer value.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded to the nearest integer value
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded towards zero (up if negative,
    	 * down if positive) to an integer value.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	roundToZero() {

    		this.x = Math.trunc( this.x );
    		this.y = Math.trunc( this.y );

    		return this;

    	}

    	/**
    	 * Inverts this vector - i.e. sets x = -x and y = -y.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;

    		return this;

    	}

    	/**
    	 * Calculates the dot product of the given vector with this instance.
    	 *
    	 * @param {Vector2} v - The vector to compute the dot product with.
    	 * @return {number} The result of the dot product.
    	 */
    	dot( v ) {

    		return this.x * v.x + this.y * v.y;

    	}

    	/**
    	 * Calculates the cross product of the given vector with this instance.
    	 *
    	 * @param {Vector2} v - The vector to compute the cross product with.
    	 * @return {number} The result of the cross product.
    	 */
    	cross( v ) {

    		return this.x * v.y - this.y * v.x;

    	}

    	/**
    	 * Computes the square of the Euclidean length (straight-line length) from
    	 * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
    	 * compare the length squared instead as it is slightly more efficient to calculate.
    	 *
    	 * @return {number} The square length of this vector.
    	 */
    	lengthSq() {

    		return this.x * this.x + this.y * this.y;

    	}

    	/**
    	 * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y );

    	}

    	/**
    	 * Computes the Manhattan length of this vector.
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y );

    	}

    	/**
    	 * Converts this vector to a unit vector - that is, sets it equal to a vector
    	 * with the same direction as this one, but with a vector length of `1`.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	/**
    	 * Computes the angle in radians of this vector with respect to the positive x-axis.
    	 *
    	 * @return {number} The angle in radians.
    	 */
    	angle() {

    		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

    		return angle;

    	}

    	/**
    	 * Returns the angle between the given vector and this instance in radians.
    	 *
    	 * @param {Vector2} v - The vector to compute the angle with.
    	 * @return {number} The angle in radians.
    	 */
    	angleTo( v ) {

    		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

    		if ( denominator === 0 ) return Math.PI / 2;

    		const theta = this.dot( v ) / denominator;

    		// clamp, to handle numerical problems

    		return Math.acos( clamp( theta, -1, 1 ) );

    	}

    	/**
    	 * Computes the distance from the given vector to this instance.
    	 *
    	 * @param {Vector2} v - The vector to compute the distance to.
    	 * @return {number} The distance.
    	 */
    	distanceTo( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	}

    	/**
    	 * Computes the squared distance from the given vector to this instance.
    	 * If you are just comparing the distance with another distance, you should compare
    	 * the distance squared instead as it is slightly more efficient to calculate.
    	 *
    	 * @param {Vector2} v - The vector to compute the squared distance to.
    	 * @return {number} The squared distance.
    	 */
    	distanceToSquared( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y;
    		return dx * dx + dy * dy;

    	}

    	/**
    	 * Computes the Manhattan distance from the given vector to this instance.
    	 *
    	 * @param {Vector2} v - The vector to compute the Manhattan distance to.
    	 * @return {number} The Manhattan distance.
    	 */
    	manhattanDistanceTo( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

    	}

    	/**
    	 * Sets this vector to a vector with the same direction as this one, but
    	 * with the specified length.
    	 *
    	 * @param {number} length - The new length of this vector.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	/**
    	 * Linearly interpolates between the given vector and this instance, where
    	 * alpha is the percent distance along the line - alpha = 0 will be this
    	 * vector, and alpha = 1 will be the given one.
    	 *
    	 * @param {Vector2} v - The vector to interpolate towards.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;

    		return this;

    	}

    	/**
    	 * Linearly interpolates between the given vectors, where alpha is the percent
    	 * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
    	 * be the second one. The result is stored in this instance.
    	 *
    	 * @param {Vector2} v1 - The first vector.
    	 * @param {Vector2} v2 - The second vector.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;

    		return this;

    	}

    	/**
    	 * Returns `true` if this vector is equal with the given one.
    	 *
    	 * @param {Vector2} v - The vector to test for equality.
    	 * @return {boolean} Whether this vector is equal with the given one.
    	 */
    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) );

    	}

    	/**
    	 * Sets this vector's x value to be `array[ offset ]` and y
    	 * value to be `array[ offset + 1 ]`.
    	 *
    	 * @param {Array<number>} array - An array holding the vector component values.
    	 * @param {number} [offset=0] - The offset into the array.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];

    		return this;

    	}

    	/**
    	 * Writes the components of this vector to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the vector components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The vector components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;

    		return array;

    	}

    	/**
    	 * Sets the components of this vector from the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
    	 * @param {number} index - The index into the attribute.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	fromBufferAttribute( attribute, index ) {

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );

    		return this;

    	}

    	/**
    	 * Rotates this vector around the given center by the given angle.
    	 *
    	 * @param {Vector2} center - The point around which to rotate.
    	 * @param {number} angle - The angle to rotate, in radians.
    	 * @return {Vector2} A reference to this vector.
    	 */
    	rotateAround( center, angle ) {

    		const c = Math.cos( angle ), s = Math.sin( angle );

    		const x = this.x - center.x;
    		const y = this.y - center.y;

    		this.x = x * c - y * s + center.x;
    		this.y = x * s + y * c + center.y;

    		return this;

    	}

    	/**
    	 * Sets each component of this vector to a pseudo-random value between `0` and
    	 * `1`, excluding `1`.
    	 *
    	 * @return {Vector2} A reference to this vector.
    	 */
    	random() {

    		this.x = Math.random();
    		this.y = Math.random();

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;

    	}

    }

    /**
     * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.
     *
     * Iterating through a vector instance will yield its components `(x, y, z, w)` in
     * the corresponding order.
     *
     * Note that three.js expects Quaternions to be normalized.
     * ```js
     * const quaternion = new THREE.Quaternion();
     * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );
     *
     * const vector = new THREE.Vector3( 1, 0, 0 );
     * vector.applyQuaternion( quaternion );
     * ```
     */
    class Quaternion {

    	/**
    	 * Constructs a new quaternion.
    	 *
    	 * @param {number} [x=0] - The x value of this quaternion.
    	 * @param {number} [y=0] - The y value of this quaternion.
    	 * @param {number} [z=0] - The z value of this quaternion.
    	 * @param {number} [w=1] - The w value of this quaternion.
    	 */
    	constructor( x = 0, y = 0, z = 0, w = 1 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isQuaternion = true;

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._w = w;

    	}

    	/**
    	 * Interpolates between two quaternions via SLERP. This implementation assumes the
    	 * quaternion data are managed  in flat arrays.
    	 *
    	 * @param {Array<number>} dst - The destination array.
    	 * @param {number} dstOffset - An offset into the destination array.
    	 * @param {Array<number>} src0 - The source array of the first quaternion.
    	 * @param {number} srcOffset0 - An offset into the first source array.
    	 * @param {Array<number>} src1 -  The source array of the second quaternion.
    	 * @param {number} srcOffset1 - An offset into the second source array.
    	 * @param {number} t - The interpolation factor in the range `[0,1]`.
    	 * @see {@link Quaternion#slerp}
    	 */
    	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

    		// fuzz-free, array-based Quaternion SLERP operation

    		let x0 = src0[ srcOffset0 + 0 ],
    			y0 = src0[ srcOffset0 + 1 ],
    			z0 = src0[ srcOffset0 + 2 ],
    			w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 + 0 ],
    			y1 = src1[ srcOffset1 + 1 ],
    			z1 = src1[ srcOffset1 + 2 ],
    			w1 = src1[ srcOffset1 + 3 ];

    		if ( t === 0 ) {

    			dst[ dstOffset + 0 ] = x0;
    			dst[ dstOffset + 1 ] = y0;
    			dst[ dstOffset + 2 ] = z0;
    			dst[ dstOffset + 3 ] = w0;
    			return;

    		}

    		if ( t === 1 ) {

    			dst[ dstOffset + 0 ] = x1;
    			dst[ dstOffset + 1 ] = y1;
    			dst[ dstOffset + 2 ] = z1;
    			dst[ dstOffset + 3 ] = w1;
    			return;

    		}

    		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

    			let s = 1 - t;
    			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
    				dir = ( cos >= 0 ? 1 : -1 ),
    				sqrSin = 1 - cos * cos;

    			// Skip the Slerp for tiny steps to avoid numeric problems:
    			if ( sqrSin > Number.EPSILON ) {

    				const sin = Math.sqrt( sqrSin ),
    					len = Math.atan2( sin, cos * dir );

    				s = Math.sin( s * len ) / sin;
    				t = Math.sin( t * len ) / sin;

    			}

    			const tDir = t * dir;

    			x0 = x0 * s + x1 * tDir;
    			y0 = y0 * s + y1 * tDir;
    			z0 = z0 * s + z1 * tDir;
    			w0 = w0 * s + w1 * tDir;

    			// Normalize in case we just did a lerp:
    			if ( s === 1 - t ) {

    				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

    				x0 *= f;
    				y0 *= f;
    				z0 *= f;
    				w0 *= f;

    			}

    		}

    		dst[ dstOffset ] = x0;
    		dst[ dstOffset + 1 ] = y0;
    		dst[ dstOffset + 2 ] = z0;
    		dst[ dstOffset + 3 ] = w0;

    	}

    	/**
    	 * Multiplies two quaternions. This implementation assumes the quaternion data are managed
    	 * in flat arrays.
    	 *
    	 * @param {Array<number>} dst - The destination array.
    	 * @param {number} dstOffset - An offset into the destination array.
    	 * @param {Array<number>} src0 - The source array of the first quaternion.
    	 * @param {number} srcOffset0 - An offset into the first source array.
    	 * @param {Array<number>} src1 -  The source array of the second quaternion.
    	 * @param {number} srcOffset1 - An offset into the second source array.
    	 * @return {Array<number>} The destination array.
    	 * @see {@link Quaternion#multiplyQuaternions}.
    	 */
    	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

    		const x0 = src0[ srcOffset0 ];
    		const y0 = src0[ srcOffset0 + 1 ];
    		const z0 = src0[ srcOffset0 + 2 ];
    		const w0 = src0[ srcOffset0 + 3 ];

    		const x1 = src1[ srcOffset1 ];
    		const y1 = src1[ srcOffset1 + 1 ];
    		const z1 = src1[ srcOffset1 + 2 ];
    		const w1 = src1[ srcOffset1 + 3 ];

    		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

    		return dst;

    	}

    	/**
    	 * The x value of this quaternion.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get x() {

    		return this._x;

    	}

    	set x( value ) {

    		this._x = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * The y value of this quaternion.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get y() {

    		return this._y;

    	}

    	set y( value ) {

    		this._y = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * The z value of this quaternion.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get z() {

    		return this._z;

    	}

    	set z( value ) {

    		this._z = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * The w value of this quaternion.
    	 *
    	 * @type {number}
    	 * @default 1
    	 */
    	get w() {

    		return this._w;

    	}

    	set w( value ) {

    		this._w = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * Sets the quaternion components.
    	 *
    	 * @param {number} x - The x value of this quaternion.
    	 * @param {number} y - The y value of this quaternion.
    	 * @param {number} z - The z value of this quaternion.
    	 * @param {number} w - The w value of this quaternion.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	set( x, y, z, w ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._w = w;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Returns a new quaternion with copied values from this instance.
    	 *
    	 * @return {Quaternion} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this._x, this._y, this._z, this._w );

    	}

    	/**
    	 * Copies the values of the given quaternion to this instance.
    	 *
    	 * @param {Quaternion} quaternion - The quaternion to copy.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	copy( quaternion ) {

    		this._x = quaternion.x;
    		this._y = quaternion.y;
    		this._z = quaternion.z;
    		this._w = quaternion.w;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets this quaternion from the rotation specified by the given
    	 * Euler angles.
    	 *
    	 * @param {Euler} euler - The Euler angles.
    	 * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	setFromEuler( euler, update = true ) {

    		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

    		// http://www.mathworks.com/matlabcentral/fileexchange/
    		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    		//	content/SpinCalc.m

    		const cos = Math.cos;
    		const sin = Math.sin;

    		const c1 = cos( x / 2 );
    		const c2 = cos( y / 2 );
    		const c3 = cos( z / 2 );

    		const s1 = sin( x / 2 );
    		const s2 = sin( y / 2 );
    		const s3 = sin( z / 2 );

    		switch ( order ) {

    			case 'XYZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'YXZ':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'ZXY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'ZYX':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			case 'YZX':
    				this._x = s1 * c2 * c3 + c1 * s2 * s3;
    				this._y = c1 * s2 * c3 + s1 * c2 * s3;
    				this._z = c1 * c2 * s3 - s1 * s2 * c3;
    				this._w = c1 * c2 * c3 - s1 * s2 * s3;
    				break;

    			case 'XZY':
    				this._x = s1 * c2 * c3 - c1 * s2 * s3;
    				this._y = c1 * s2 * c3 - s1 * c2 * s3;
    				this._z = c1 * c2 * s3 + s1 * s2 * c3;
    				this._w = c1 * c2 * c3 + s1 * s2 * s3;
    				break;

    			default:
    				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

    		}

    		if ( update === true ) this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets this quaternion from the given axis and angle.
    	 *
    	 * @param {Vector3} axis - The normalized axis.
    	 * @param {number} angle - The angle in radians.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	setFromAxisAngle( axis, angle ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

    		const halfAngle = angle / 2, s = Math.sin( halfAngle );

    		this._x = axis.x * s;
    		this._y = axis.y * s;
    		this._z = axis.z * s;
    		this._w = Math.cos( halfAngle );

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets this quaternion from the given rotation matrix.
    	 *
    	 * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	setFromRotationMatrix( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		const te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

    			trace = m11 + m22 + m33;

    		if ( trace > 0 ) {

    			const s = 0.5 / Math.sqrt( trace + 1.0 );

    			this._w = 0.25 / s;
    			this._x = ( m32 - m23 ) * s;
    			this._y = ( m13 - m31 ) * s;
    			this._z = ( m21 - m12 ) * s;

    		} else if ( m11 > m22 && m11 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

    			this._w = ( m32 - m23 ) / s;
    			this._x = 0.25 * s;
    			this._y = ( m12 + m21 ) / s;
    			this._z = ( m13 + m31 ) / s;

    		} else if ( m22 > m33 ) {

    			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

    			this._w = ( m13 - m31 ) / s;
    			this._x = ( m12 + m21 ) / s;
    			this._y = 0.25 * s;
    			this._z = ( m23 + m32 ) / s;

    		} else {

    			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

    			this._w = ( m21 - m12 ) / s;
    			this._x = ( m13 + m31 ) / s;
    			this._y = ( m23 + m32 ) / s;
    			this._z = 0.25 * s;

    		}

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets this quaternion to the rotation required to rotate the direction vector
    	 * `vFrom` to the direction vector `vTo`.
    	 *
    	 * @param {Vector3} vFrom - The first (normalized) direction vector.
    	 * @param {Vector3} vTo - The second (normalized) direction vector.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	setFromUnitVectors( vFrom, vTo ) {

    		// assumes direction vectors vFrom and vTo are normalized

    		let r = vFrom.dot( vTo ) + 1;

    		if ( r < 1e-8 ) { // the epsilon value has been discussed in #31286

    			// vFrom and vTo point in opposite directions

    			r = 0;

    			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

    				this._x = - vFrom.y;
    				this._y = vFrom.x;
    				this._z = 0;
    				this._w = r;

    			} else {

    				this._x = 0;
    				this._y = - vFrom.z;
    				this._z = vFrom.y;
    				this._w = r;

    			}

    		} else {

    			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

    			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
    			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
    			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
    			this._w = r;

    		}

    		return this.normalize();

    	}

    	/**
    	 * Returns the angle between this quaternion and the given one in radians.
    	 *
    	 * @param {Quaternion} q - The quaternion to compute the angle with.
    	 * @return {number} The angle in radians.
    	 */
    	angleTo( q ) {

    		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), -1, 1 ) ) );

    	}

    	/**
    	 * Rotates this quaternion by a given angular step to the given quaternion.
    	 * The method ensures that the final quaternion will not overshoot `q`.
    	 *
    	 * @param {Quaternion} q - The target quaternion.
    	 * @param {number} step - The angular step in radians.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	rotateTowards( q, step ) {

    		const angle = this.angleTo( q );

    		if ( angle === 0 ) return this;

    		const t = Math.min( 1, step / angle );

    		this.slerp( q, t );

    		return this;

    	}

    	/**
    	 * Sets this quaternion to the identity quaternion; that is, to the
    	 * quaternion that represents "no rotation".
    	 *
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	identity() {

    		return this.set( 0, 0, 0, 1 );

    	}

    	/**
    	 * Inverts this quaternion via {@link Quaternion#conjugate}. The
    	 * quaternion is assumed to have unit length.
    	 *
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	invert() {

    		return this.conjugate();

    	}

    	/**
    	 * Returns the rotational conjugate of this quaternion. The conjugate of a
    	 * quaternion represents the same rotation in the opposite direction about
    	 * the rotational axis.
    	 *
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	conjugate() {

    		this._x *= -1;
    		this._y *= -1;
    		this._z *= -1;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Calculates the dot product of this quaternion and the given one.
    	 *
    	 * @param {Quaternion} v - The quaternion to compute the dot product with.
    	 * @return {number} The result of the dot product.
    	 */
    	dot( v ) {

    		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

    	}

    	/**
    	 * Computes the squared Euclidean length (straight-line length) of this quaternion,
    	 * considered as a 4 dimensional vector. This can be useful if you are comparing the
    	 * lengths of two quaternions, as this is a slightly more efficient calculation than
    	 * {@link Quaternion#length}.
    	 *
    	 * @return {number} The squared Euclidean length.
    	 */
    	lengthSq() {

    		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

    	}

    	/**
    	 * Computes the Euclidean length (straight-line length) of this quaternion,
    	 * considered as a 4 dimensional vector.
    	 *
    	 * @return {number} The Euclidean length.
    	 */
    	length() {

    		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

    	}

    	/**
    	 * Normalizes this quaternion - that is, calculated the quaternion that performs
    	 * the same rotation as this one, but has a length equal to `1`.
    	 *
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	normalize() {

    		let l = this.length();

    		if ( l === 0 ) {

    			this._x = 0;
    			this._y = 0;
    			this._z = 0;
    			this._w = 1;

    		} else {

    			l = 1 / l;

    			this._x = this._x * l;
    			this._y = this._y * l;
    			this._z = this._z * l;
    			this._w = this._w * l;

    		}

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Multiplies this quaternion by the given one.
    	 *
    	 * @param {Quaternion} q - The quaternion.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	multiply( q ) {

    		return this.multiplyQuaternions( this, q );

    	}

    	/**
    	 * Pre-multiplies this quaternion by the given one.
    	 *
    	 * @param {Quaternion} q - The quaternion.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	premultiply( q ) {

    		return this.multiplyQuaternions( q, this );

    	}

    	/**
    	 * Multiplies the given quaternions and stores the result in this instance.
    	 *
    	 * @param {Quaternion} a - The first quaternion.
    	 * @param {Quaternion} b - The second quaternion.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	multiplyQuaternions( a, b ) {

    		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

    		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Performs a spherical linear interpolation between quaternions.
    	 *
    	 * @param {Quaternion} qb - The target quaternion.
    	 * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	slerp( qb, t ) {

    		if ( t === 0 ) return this;
    		if ( t === 1 ) return this.copy( qb );

    		const x = this._x, y = this._y, z = this._z, w = this._w;

    		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

    		if ( cosHalfTheta < 0 ) {

    			this._w = - qb._w;
    			this._x = - qb._x;
    			this._y = - qb._y;
    			this._z = - qb._z;

    			cosHalfTheta = - cosHalfTheta;

    		} else {

    			this.copy( qb );

    		}

    		if ( cosHalfTheta >= 1.0 ) {

    			this._w = w;
    			this._x = x;
    			this._y = y;
    			this._z = z;

    			return this;

    		}

    		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

    		if ( sqrSinHalfTheta <= Number.EPSILON ) {

    			const s = 1 - t;
    			this._w = s * w + t * this._w;
    			this._x = s * x + t * this._x;
    			this._y = s * y + t * this._y;
    			this._z = s * z + t * this._z;

    			this.normalize(); // normalize calls _onChangeCallback()

    			return this;

    		}

    		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
    		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
    		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    		this._w = ( w * ratioA + this._w * ratioB );
    		this._x = ( x * ratioA + this._x * ratioB );
    		this._y = ( y * ratioA + this._y * ratioB );
    		this._z = ( z * ratioA + this._z * ratioB );

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Performs a spherical linear interpolation between the given quaternions
    	 * and stores the result in this quaternion.
    	 *
    	 * @param {Quaternion} qa - The source quaternion.
    	 * @param {Quaternion} qb - The target quaternion.
    	 * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	slerpQuaternions( qa, qb, t ) {

    		return this.copy( qa ).slerp( qb, t );

    	}

    	/**
    	 * Sets this quaternion to a uniformly random, normalized quaternion.
    	 *
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	random() {

    		// Ken Shoemake
    		// Uniform random rotations
    		// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.

    		const theta1 = 2 * Math.PI * Math.random();
    		const theta2 = 2 * Math.PI * Math.random();

    		const x0 = Math.random();
    		const r1 = Math.sqrt( 1 - x0 );
    		const r2 = Math.sqrt( x0 );

    		return this.set(
    			r1 * Math.sin( theta1 ),
    			r1 * Math.cos( theta1 ),
    			r2 * Math.sin( theta2 ),
    			r2 * Math.cos( theta2 ),
    		);

    	}

    	/**
    	 * Returns `true` if this quaternion is equal with the given one.
    	 *
    	 * @param {Quaternion} quaternion - The quaternion to test for equality.
    	 * @return {boolean} Whether this quaternion is equal with the given one.
    	 */
    	equals( quaternion ) {

    		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

    	}

    	/**
    	 * Sets this quaternion's components from the given array.
    	 *
    	 * @param {Array<number>} array - An array holding the quaternion component values.
    	 * @param {number} [offset=0] - The offset into the array.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	fromArray( array, offset = 0 ) {

    		this._x = array[ offset ];
    		this._y = array[ offset + 1 ];
    		this._z = array[ offset + 2 ];
    		this._w = array[ offset + 3 ];

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Writes the components of this quaternion to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The quaternion components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._w;

    		return array;

    	}

    	/**
    	 * Sets the components of this quaternion from the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
    	 * @param {number} index - The index into the attribute.
    	 * @return {Quaternion} A reference to this quaternion.
    	 */
    	fromBufferAttribute( attribute, index ) {

    		this._x = attribute.getX( index );
    		this._y = attribute.getY( index );
    		this._z = attribute.getZ( index );
    		this._w = attribute.getW( index );

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * This methods defines the serialization result of this class. Returns the
    	 * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
    	 *
    	 * @return {Array<number>} The serialized quaternion.
    	 */
    	toJSON() {

    		return this.toArray();

    	}

    	_onChange( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	}

    	_onChangeCallback() {}

    	*[ Symbol.iterator ]() {

    		yield this._x;
    		yield this._y;
    		yield this._z;
    		yield this._w;

    	}

    }

    /**
     * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers
     * (labeled x, y and z), which can be used to represent a number of things, such as:
     *
     * - A point in 3D space.
     * - A direction and length in 3D space. In three.js the length will
     * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`
     * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.
     * - Any arbitrary ordered triplet of numbers.
     *
     * There are other things a 3D vector can be used to represent, such as
     * momentum vectors and so on, however these are the most
     * common uses in three.js.
     *
     * Iterating through a vector instance will yield its components `(x, y, z)` in
     * the corresponding order.
     * ```js
     * const a = new THREE.Vector3( 0, 1, 0 );
     *
     * //no arguments; will be initialised to (0, 0, 0)
     * const b = new THREE.Vector3( );
     *
     * const d = a.distanceTo( b );
     * ```
     */
    class Vector3 {

    	/**
    	 * Constructs a new 3D vector.
    	 *
    	 * @param {number} [x=0] - The x value of this vector.
    	 * @param {number} [y=0] - The y value of this vector.
    	 * @param {number} [z=0] - The z value of this vector.
    	 */
    	constructor( x = 0, y = 0, z = 0 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		Vector3.prototype.isVector3 = true;

    		/**
    		 * The x value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.x = x;

    		/**
    		 * The y value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.y = y;

    		/**
    		 * The z value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.z = z;

    	}

    	/**
    	 * Sets the vector components.
    	 *
    	 * @param {number} x - The value of the x component.
    	 * @param {number} y - The value of the y component.
    	 * @param {number} z - The value of the z component.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	set( x, y, z ) {

    		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

    		this.x = x;
    		this.y = y;
    		this.z = z;

    		return this;

    	}

    	/**
    	 * Sets the vector components to the same value.
    	 *
    	 * @param {number} scalar - The value to set for all vector components.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;

    		return this;

    	}

    	/**
    	 * Sets the vector's x component to the given value
    	 *
    	 * @param {number} x - The value to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	/**
    	 * Sets the vector's y component to the given value
    	 *
    	 * @param {number} y - The value to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	/**
    	 * Sets the vector's z component to the given value
    	 *
    	 * @param {number} z - The value to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setZ( z ) {

    		this.z = z;

    		return this;

    	}

    	/**
    	 * Allows to set a vector component with an index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
    	 * @param {number} value - The value to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	/**
    	 * Returns the value of the vector component which matches the given index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
    	 * @return {number} A vector component value.
    	 */
    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	/**
    	 * Returns a new vector with copied values from this instance.
    	 *
    	 * @return {Vector3} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this.x, this.y, this.z );

    	}

    	/**
    	 * Copies the values of the given vector to this instance.
    	 *
    	 * @param {Vector3} v - The vector to copy.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;

    		return this;

    	}

    	/**
    	 * Adds the given vector to this instance.
    	 *
    	 * @param {Vector3} v - The vector to add.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	add( v ) {

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;

    		return this;

    	}

    	/**
    	 * Adds the given scalar value to all components of this instance.
    	 *
    	 * @param {number} s - The scalar to add.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	addScalar( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;

    		return this;

    	}

    	/**
    	 * Adds the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector3} a - The first vector.
    	 * @param {Vector3} b - The second vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;

    		return this;

    	}

    	/**
    	 * Adds the given vector scaled by the given factor to this instance.
    	 *
    	 * @param {Vector3|Vector4} v - The vector.
    	 * @param {number} s - The factor that scales `v`.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vector from this instance.
    	 *
    	 * @param {Vector3} v - The vector to subtract.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	sub( v ) {

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;

    		return this;

    	}

    	/**
    	 * Subtracts the given scalar value from all components of this instance.
    	 *
    	 * @param {number} s - The scalar to subtract.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector3} a - The first vector.
    	 * @param {Vector3} b - The second vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;

    		return this;

    	}

    	/**
    	 * Multiplies the given vector with this instance.
    	 *
    	 * @param {Vector3} v - The vector to multiply.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	multiply( v ) {

    		this.x *= v.x;
    		this.y *= v.y;
    		this.z *= v.z;

    		return this;

    	}

    	/**
    	 * Multiplies the given scalar value with all components of this instance.
    	 *
    	 * @param {number} scalar - The scalar to multiply.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;

    		return this;

    	}

    	/**
    	 * Multiplies the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector3} a - The first vector.
    	 * @param {Vector3} b - The second vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	multiplyVectors( a, b ) {

    		this.x = a.x * b.x;
    		this.y = a.y * b.y;
    		this.z = a.z * b.z;

    		return this;

    	}

    	/**
    	 * Applies the given Euler rotation to this vector.
    	 *
    	 * @param {Euler} euler - The Euler angles.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyEuler( euler ) {

    		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

    	}

    	/**
    	 * Applies a rotation specified by an axis and an angle to this vector.
    	 *
    	 * @param {Vector3} axis - A normalized vector representing the rotation axis.
    	 * @param {number} angle - The angle in radians.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyAxisAngle( axis, angle ) {

    		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

    	}

    	/**
    	 * Multiplies this vector with the given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The 3x3 matrix.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyMatrix3( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
    		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

    		return this;

    	}

    	/**
    	 * Multiplies this vector by the given normal matrix and normalizes
    	 * the result.
    	 *
    	 * @param {Matrix3} m - The normal matrix.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyNormalMatrix( m ) {

    		return this.applyMatrix3( m ).normalize();

    	}

    	/**
    	 * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
    	 * divides by perspective.
    	 *
    	 * @param {Matrix4} m - The matrix to apply.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyMatrix4( m ) {

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

    		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
    		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
    		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

    		return this;

    	}

    	/**
    	 * Applies the given Quaternion to this vector.
    	 *
    	 * @param {Quaternion} q - The Quaternion.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	applyQuaternion( q ) {

    		// quaternion q is assumed to have unit length

    		const vx = this.x, vy = this.y, vz = this.z;
    		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

    		// t = 2 * cross( q.xyz, v );
    		const tx = 2 * ( qy * vz - qz * vy );
    		const ty = 2 * ( qz * vx - qx * vz );
    		const tz = 2 * ( qx * vy - qy * vx );

    		// v + q.w * t + cross( q.xyz, t );
    		this.x = vx + qw * tx + qy * tz - qz * ty;
    		this.y = vy + qw * ty + qz * tx - qx * tz;
    		this.z = vz + qw * tz + qx * ty - qy * tx;

    		return this;

    	}

    	/**
    	 * Projects this vector from world space into the camera's normalized
    	 * device coordinate (NDC) space.
    	 *
    	 * @param {Camera} camera - The camera.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	project( camera ) {

    		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

    	}

    	/**
    	 * Unprojects this vector from the camera's normalized device coordinate (NDC)
    	 * space into world space.
    	 *
    	 * @param {Camera} camera - The camera.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	unproject( camera ) {

    		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

    	}

    	/**
    	 * Transforms the direction of this vector by a matrix (the upper left 3 x 3
    	 * subset of the given 4x4 matrix and then normalizes the result.
    	 *
    	 * @param {Matrix4} m - The matrix.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	transformDirection( m ) {

    		// input: THREE.Matrix4 affine matrix
    		// vector interpreted as a direction

    		const x = this.x, y = this.y, z = this.z;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

    		return this.normalize();

    	}

    	/**
    	 * Divides this instance by the given vector.
    	 *
    	 * @param {Vector3} v - The vector to divide.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	divide( v ) {

    		this.x /= v.x;
    		this.y /= v.y;
    		this.z /= v.z;

    		return this;

    	}

    	/**
    	 * Divides this vector by the given scalar.
    	 *
    	 * @param {number} scalar - The scalar to divide.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	/**
    	 * If this vector's x, y or z value is greater than the given vector's x, y or z
    	 * value, replace that value with the corresponding min value.
    	 *
    	 * @param {Vector3} v - The vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );

    		return this;

    	}

    	/**
    	 * If this vector's x, y or z value is less than the given vector's x, y or z
    	 * value, replace that value with the corresponding max value.
    	 *
    	 * @param {Vector3} v - The vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );

    		return this;

    	}

    	/**
    	 * If this vector's x, y or z value is greater than the max vector's x, y or z
    	 * value, it is replaced by the corresponding value.
    	 * If this vector's x, y or z value is less than the min vector's x, y or z value,
    	 * it is replaced by the corresponding value.
    	 *
    	 * @param {Vector3} min - The minimum x, y and z values.
    	 * @param {Vector3} max - The maximum x, y and z values in the desired range.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = clamp( this.x, min.x, max.x );
    		this.y = clamp( this.y, min.y, max.y );
    		this.z = clamp( this.z, min.z, max.z );

    		return this;

    	}

    	/**
    	 * If this vector's x, y or z values are greater than the max value, they are
    	 * replaced by the max value.
    	 * If this vector's x, y or z values are less than the min value, they are
    	 * replaced by the min value.
    	 *
    	 * @param {number} minVal - The minimum value the components will be clamped to.
    	 * @param {number} maxVal - The maximum value the components will be clamped to.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	clampScalar( minVal, maxVal ) {

    		this.x = clamp( this.x, minVal, maxVal );
    		this.y = clamp( this.y, minVal, maxVal );
    		this.z = clamp( this.z, minVal, maxVal );

    		return this;

    	}

    	/**
    	 * If this vector's length is greater than the max value, it is replaced by
    	 * the max value.
    	 * If this vector's length is less than the min value, it is replaced by the
    	 * min value.
    	 *
    	 * @param {number} min - The minimum value the vector length will be clamped to.
    	 * @param {number} max - The maximum value the vector length will be clamped to.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );

    	}

    	/**
    	 * The components of this vector are rounded down to the nearest integer value.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded up to the nearest integer value.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded to the nearest integer value
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded towards zero (up if negative,
    	 * down if positive) to an integer value.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	roundToZero() {

    		this.x = Math.trunc( this.x );
    		this.y = Math.trunc( this.y );
    		this.z = Math.trunc( this.z );

    		return this;

    	}

    	/**
    	 * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;

    		return this;

    	}

    	/**
    	 * Calculates the dot product of the given vector with this instance.
    	 *
    	 * @param {Vector3} v - The vector to compute the dot product with.
    	 * @return {number} The result of the dot product.
    	 */
    	dot( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z;

    	}

    	// TODO lengthSquared?

    	/**
    	 * Computes the square of the Euclidean length (straight-line length) from
    	 * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
    	 * compare the length squared instead as it is slightly more efficient to calculate.
    	 *
    	 * @return {number} The square length of this vector.
    	 */
    	lengthSq() {

    		return this.x * this.x + this.y * this.y + this.z * this.z;

    	}

    	/**
    	 * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

    	}

    	/**
    	 * Computes the Manhattan length of this vector.
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

    	}

    	/**
    	 * Converts this vector to a unit vector - that is, sets it equal to a vector
    	 * with the same direction as this one, but with a vector length of `1`.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	/**
    	 * Sets this vector to a vector with the same direction as this one, but
    	 * with the specified length.
    	 *
    	 * @param {number} length - The new length of this vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	/**
    	 * Linearly interpolates between the given vector and this instance, where
    	 * alpha is the percent distance along the line - alpha = 0 will be this
    	 * vector, and alpha = 1 will be the given one.
    	 *
    	 * @param {Vector3} v - The vector to interpolate towards.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;

    		return this;

    	}

    	/**
    	 * Linearly interpolates between the given vectors, where alpha is the percent
    	 * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
    	 * be the second one. The result is stored in this instance.
    	 *
    	 * @param {Vector3} v1 - The first vector.
    	 * @param {Vector3} v2 - The second vector.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;

    		return this;

    	}

    	/**
    	 * Calculates the cross product of the given vector with this instance.
    	 *
    	 * @param {Vector3} v - The vector to compute the cross product with.
    	 * @return {Vector3} The result of the cross product.
    	 */
    	cross( v ) {

    		return this.crossVectors( this, v );

    	}

    	/**
    	 * Calculates the cross product of the given vectors and stores the result
    	 * in this instance.
    	 *
    	 * @param {Vector3} a - The first vector.
    	 * @param {Vector3} b - The second vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	crossVectors( a, b ) {

    		const ax = a.x, ay = a.y, az = a.z;
    		const bx = b.x, by = b.y, bz = b.z;

    		this.x = ay * bz - az * by;
    		this.y = az * bx - ax * bz;
    		this.z = ax * by - ay * bx;

    		return this;

    	}

    	/**
    	 * Projects this vector onto the given one.
    	 *
    	 * @param {Vector3} v - The vector to project to.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	projectOnVector( v ) {

    		const denominator = v.lengthSq();

    		if ( denominator === 0 ) return this.set( 0, 0, 0 );

    		const scalar = v.dot( this ) / denominator;

    		return this.copy( v ).multiplyScalar( scalar );

    	}

    	/**
    	 * Projects this vector onto a plane by subtracting this
    	 * vector projected onto the plane's normal from this vector.
    	 *
    	 * @param {Vector3} planeNormal - The plane normal.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	projectOnPlane( planeNormal ) {

    		_vector$c.copy( this ).projectOnVector( planeNormal );

    		return this.sub( _vector$c );

    	}

    	/**
    	 * Reflects this vector off a plane orthogonal to the given normal vector.
    	 *
    	 * @param {Vector3} normal - The (normalized) normal vector.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	reflect( normal ) {

    		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

    	}
    	/**
    	 * Returns the angle between the given vector and this instance in radians.
    	 *
    	 * @param {Vector3} v - The vector to compute the angle with.
    	 * @return {number} The angle in radians.
    	 */
    	angleTo( v ) {

    		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

    		if ( denominator === 0 ) return Math.PI / 2;

    		const theta = this.dot( v ) / denominator;

    		// clamp, to handle numerical problems

    		return Math.acos( clamp( theta, -1, 1 ) );

    	}

    	/**
    	 * Computes the distance from the given vector to this instance.
    	 *
    	 * @param {Vector3} v - The vector to compute the distance to.
    	 * @return {number} The distance.
    	 */
    	distanceTo( v ) {

    		return Math.sqrt( this.distanceToSquared( v ) );

    	}

    	/**
    	 * Computes the squared distance from the given vector to this instance.
    	 * If you are just comparing the distance with another distance, you should compare
    	 * the distance squared instead as it is slightly more efficient to calculate.
    	 *
    	 * @param {Vector3} v - The vector to compute the squared distance to.
    	 * @return {number} The squared distance.
    	 */
    	distanceToSquared( v ) {

    		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

    		return dx * dx + dy * dy + dz * dz;

    	}

    	/**
    	 * Computes the Manhattan distance from the given vector to this instance.
    	 *
    	 * @param {Vector3} v - The vector to compute the Manhattan distance to.
    	 * @return {number} The Manhattan distance.
    	 */
    	manhattanDistanceTo( v ) {

    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

    	}

    	/**
    	 * Sets the vector components from the given spherical coordinates.
    	 *
    	 * @param {Spherical} s - The spherical coordinates.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromSpherical( s ) {

    		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

    	}

    	/**
    	 * Sets the vector components from the given spherical coordinates.
    	 *
    	 * @param {number} radius - The radius.
    	 * @param {number} phi - The phi angle in radians.
    	 * @param {number} theta - The theta angle in radians.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromSphericalCoords( radius, phi, theta ) {

    		const sinPhiRadius = Math.sin( phi ) * radius;

    		this.x = sinPhiRadius * Math.sin( theta );
    		this.y = Math.cos( phi ) * radius;
    		this.z = sinPhiRadius * Math.cos( theta );

    		return this;

    	}

    	/**
    	 * Sets the vector components from the given cylindrical coordinates.
    	 *
    	 * @param {Cylindrical} c - The cylindrical coordinates.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromCylindrical( c ) {

    		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

    	}

    	/**
    	 * Sets the vector components from the given cylindrical coordinates.
    	 *
    	 * @param {number} radius - The radius.
    	 * @param {number} theta - The theta angle in radians.
    	 * @param {number} y - The y value.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromCylindricalCoords( radius, theta, y ) {

    		this.x = radius * Math.sin( theta );
    		this.y = y;
    		this.z = radius * Math.cos( theta );

    		return this;

    	}

    	/**
    	 * Sets the vector components to the position elements of the
    	 * given transformation matrix.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromMatrixPosition( m ) {

    		const e = m.elements;

    		this.x = e[ 12 ];
    		this.y = e[ 13 ];
    		this.z = e[ 14 ];

    		return this;

    	}

    	/**
    	 * Sets the vector components to the scale elements of the
    	 * given transformation matrix.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromMatrixScale( m ) {

    		const sx = this.setFromMatrixColumn( m, 0 ).length();
    		const sy = this.setFromMatrixColumn( m, 1 ).length();
    		const sz = this.setFromMatrixColumn( m, 2 ).length();

    		this.x = sx;
    		this.y = sy;
    		this.z = sz;

    		return this;

    	}

    	/**
    	 * Sets the vector components from the specified matrix column.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @param {number} index - The column index.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromMatrixColumn( m, index ) {

    		return this.fromArray( m.elements, index * 4 );

    	}

    	/**
    	 * Sets the vector components from the specified matrix column.
    	 *
    	 * @param {Matrix3} m - The 3x3 matrix.
    	 * @param {number} index - The column index.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromMatrix3Column( m, index ) {

    		return this.fromArray( m.elements, index * 3 );

    	}

    	/**
    	 * Sets the vector components from the given Euler angles.
    	 *
    	 * @param {Euler} e - The Euler angles to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromEuler( e ) {

    		this.x = e._x;
    		this.y = e._y;
    		this.z = e._z;

    		return this;

    	}

    	/**
    	 * Sets the vector components from the RGB components of the
    	 * given color.
    	 *
    	 * @param {Color} c - The color to set.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	setFromColor( c ) {

    		this.x = c.r;
    		this.y = c.g;
    		this.z = c.b;

    		return this;

    	}

    	/**
    	 * Returns `true` if this vector is equal with the given one.
    	 *
    	 * @param {Vector3} v - The vector to test for equality.
    	 * @return {boolean} Whether this vector is equal with the given one.
    	 */
    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

    	}

    	/**
    	 * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
    	 * and z value to be `array[ offset + 2 ]`.
    	 *
    	 * @param {Array<number>} array - An array holding the vector component values.
    	 * @param {number} [offset=0] - The offset into the array.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];

    		return this;

    	}

    	/**
    	 * Writes the components of this vector to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the vector components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The vector components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;

    		return array;

    	}

    	/**
    	 * Sets the components of this vector from the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
    	 * @param {number} index - The index into the attribute.
    	 * @return {Vector3} A reference to this vector.
    	 */
    	fromBufferAttribute( attribute, index ) {

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );

    		return this;

    	}

    	/**
    	 * Sets each component of this vector to a pseudo-random value between `0` and
    	 * `1`, excluding `1`.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	random() {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();

    		return this;

    	}

    	/**
    	 * Sets this vector to a uniformly random point on a unit sphere.
    	 *
    	 * @return {Vector3} A reference to this vector.
    	 */
    	randomDirection() {

    		// https://mathworld.wolfram.com/SpherePointPicking.html

    		const theta = Math.random() * Math.PI * 2;
    		const u = Math.random() * 2 - 1;
    		const c = Math.sqrt( 1 - u * u );

    		this.x = c * Math.cos( theta );
    		this.y = u;
    		this.z = c * Math.sin( theta );

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;
    		yield this.z;

    	}

    }

    const _vector$c = /*@__PURE__*/ new Vector3();
    const _quaternion$4 = /*@__PURE__*/ new Quaternion();

    /**
     * Represents a 3x3 matrix.
     *
     * A Note on Row-Major and Column-Major Ordering:
     *
     * The constructor and {@link Matrix3#set} method take arguments in
     * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}
     * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.
     * This means that calling:
     * ```js
     * const m = new THREE.Matrix();
     * m.set( 11, 12, 13,
     *        21, 22, 23,
     *        31, 32, 33 );
     * ```
     * will result in the elements array containing:
     * ```js
     * m.elements = [ 11, 21, 31,
     *                12, 22, 32,
     *                13, 23, 33 ];
     * ```
     * and internally all calculations are performed using column-major ordering.
     * However, as the actual ordering makes no difference mathematically and
     * most people are used to thinking about matrices in row-major order, the
     * three.js documentation shows matrices in row-major order. Just bear in
     * mind that if you are reading the source code, you'll have to take the
     * transpose of any matrices outlined here to make sense of the calculations.
     */
    class Matrix3 {

    	/**
    	 * Constructs a new 3x3 matrix. The arguments are supposed to be
    	 * in row-major order. If no arguments are provided, the constructor
    	 * initializes the matrix as an identity matrix.
    	 *
    	 * @param {number} [n11] - 1-1 matrix element.
    	 * @param {number} [n12] - 1-2 matrix element.
    	 * @param {number} [n13] - 1-3 matrix element.
    	 * @param {number} [n21] - 2-1 matrix element.
    	 * @param {number} [n22] - 2-2 matrix element.
    	 * @param {number} [n23] - 2-3 matrix element.
    	 * @param {number} [n31] - 3-1 matrix element.
    	 * @param {number} [n32] - 3-2 matrix element.
    	 * @param {number} [n33] - 3-3 matrix element.
    	 */
    	constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		Matrix3.prototype.isMatrix3 = true;

    		/**
    		 * A column-major list of matrix values.
    		 *
    		 * @type {Array<number>}
    		 */
    		this.elements = [

    			1, 0, 0,
    			0, 1, 0,
    			0, 0, 1

    		];

    		if ( n11 !== undefined ) {

    			this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

    		}

    	}

    	/**
    	 * Sets the elements of the matrix.The arguments are supposed to be
    	 * in row-major order.
    	 *
    	 * @param {number} [n11] - 1-1 matrix element.
    	 * @param {number} [n12] - 1-2 matrix element.
    	 * @param {number} [n13] - 1-3 matrix element.
    	 * @param {number} [n21] - 2-1 matrix element.
    	 * @param {number} [n22] - 2-2 matrix element.
    	 * @param {number} [n23] - 2-3 matrix element.
    	 * @param {number} [n31] - 3-1 matrix element.
    	 * @param {number} [n32] - 3-2 matrix element.
    	 * @param {number} [n33] - 3-3 matrix element.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
    		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
    		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

    		return this;

    	}

    	/**
    	 * Sets this matrix to the 3x3 identity matrix.
    	 *
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	identity() {

    		this.set(

    			1, 0, 0,
    			0, 1, 0,
    			0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Copies the values of the given matrix to this instance.
    	 *
    	 * @param {Matrix3} m - The matrix to copy.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	copy( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
    		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
    		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

    		return this;

    	}

    	/**
    	 * Extracts the basis of this matrix into the three axis vectors provided.
    	 *
    	 * @param {Vector3} xAxis - The basis's x axis.
    	 * @param {Vector3} yAxis - The basis's y axis.
    	 * @param {Vector3} zAxis - The basis's z axis.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	extractBasis( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrix3Column( this, 0 );
    		yAxis.setFromMatrix3Column( this, 1 );
    		zAxis.setFromMatrix3Column( this, 2 );

    		return this;

    	}

    	/**
    	 * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	setFromMatrix4( m ) {

    		const me = m.elements;

    		this.set(

    			me[ 0 ], me[ 4 ], me[ 8 ],
    			me[ 1 ], me[ 5 ], me[ 9 ],
    			me[ 2 ], me[ 6 ], me[ 10 ]

    		);

    		return this;

    	}

    	/**
    	 * Post-multiplies this matrix by the given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The matrix to multiply with.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	multiply( m ) {

    		return this.multiplyMatrices( this, m );

    	}

    	/**
    	 * Pre-multiplies this matrix by the given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The matrix to multiply with.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	premultiply( m ) {

    		return this.multiplyMatrices( m, this );

    	}

    	/**
    	 * Multiples the given 3x3 matrices and stores the result
    	 * in this matrix.
    	 *
    	 * @param {Matrix3} a - The first matrix.
    	 * @param {Matrix3} b - The second matrix.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	multiplyMatrices( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
    		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
    		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

    		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
    		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
    		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
    		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
    		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
    		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
    		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
    		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
    		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

    		return this;

    	}

    	/**
    	 * Multiplies every component of the matrix by the given scalar.
    	 *
    	 * @param {number} s - The scalar.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	multiplyScalar( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
    		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
    		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

    		return this;

    	}

    	/**
    	 * Computes and returns the determinant of this matrix.
    	 *
    	 * @return {number} The determinant.
    	 */
    	determinant() {

    		const te = this.elements;

    		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
    			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
    			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

    		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

    	}

    	/**
    	 * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
    	 * You can not invert with a determinant of zero. If you attempt this, the method produces
    	 * a zero matrix instead.
    	 *
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	invert() {

    		const te = this.elements,

    			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
    			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
    			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

    			t11 = n33 * n22 - n32 * n23,
    			t12 = n32 * n13 - n33 * n12,
    			t13 = n23 * n12 - n22 * n13,

    			det = n11 * t11 + n21 * t12 + n31 * t13;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
    		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

    		te[ 3 ] = t12 * detInv;
    		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
    		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

    		te[ 6 ] = t13 * detInv;
    		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
    		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

    		return this;

    	}

    	/**
    	 * Transposes this matrix in place.
    	 *
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	transpose() {

    		let tmp;
    		const m = this.elements;

    		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
    		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
    		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

    		return this;

    	}

    	/**
    	 * Computes the normal matrix which is the inverse transpose of the upper
    	 * left 3x3 portion of the given 4x4 matrix.
    	 *
    	 * @param {Matrix4} matrix4 - The 4x4 matrix.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	getNormalMatrix( matrix4 ) {

    		return this.setFromMatrix4( matrix4 ).invert().transpose();

    	}

    	/**
    	 * Transposes this matrix into the supplied array, and returns itself unchanged.
    	 *
    	 * @param {Array<number>} r - An array to store the transposed matrix elements.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	transposeIntoArray( r ) {

    		const m = this.elements;

    		r[ 0 ] = m[ 0 ];
    		r[ 1 ] = m[ 3 ];
    		r[ 2 ] = m[ 6 ];
    		r[ 3 ] = m[ 1 ];
    		r[ 4 ] = m[ 4 ];
    		r[ 5 ] = m[ 7 ];
    		r[ 6 ] = m[ 2 ];
    		r[ 7 ] = m[ 5 ];
    		r[ 8 ] = m[ 8 ];

    		return this;

    	}

    	/**
    	 * Sets the UV transform matrix from offset, repeat, rotation, and center.
    	 *
    	 * @param {number} tx - Offset x.
    	 * @param {number} ty - Offset y.
    	 * @param {number} sx - Repeat x.
    	 * @param {number} sy - Repeat y.
    	 * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
    	 * @param {number} cx - Center x of rotation.
    	 * @param {number} cy - Center y of rotation
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

    		const c = Math.cos( rotation );
    		const s = Math.sin( rotation );

    		this.set(
    			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
    			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
    			0, 0, 1
    		);

    		return this;

    	}

    	/**
    	 * Scales this matrix with the given scalar values.
    	 *
    	 * @param {number} sx - The amount to scale in the X axis.
    	 * @param {number} sy - The amount to scale in the Y axis.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	scale( sx, sy ) {

    		this.premultiply( _m3.makeScale( sx, sy ) );

    		return this;

    	}

    	/**
    	 * Rotates this matrix by the given angle.
    	 *
    	 * @param {number} theta - The rotation in radians.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	rotate( theta ) {

    		this.premultiply( _m3.makeRotation( - theta ) );

    		return this;

    	}

    	/**
    	 * Translates this matrix by the given scalar values.
    	 *
    	 * @param {number} tx - The amount to translate in the X axis.
    	 * @param {number} ty - The amount to translate in the Y axis.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	translate( tx, ty ) {

    		this.premultiply( _m3.makeTranslation( tx, ty ) );

    		return this;

    	}

    	// for 2D Transforms

    	/**
    	 * Sets this matrix as a 2D translation transform.
    	 *
    	 * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
    	 * @param {number} y - The amount to translate in the Y axis.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	makeTranslation( x, y ) {

    		if ( x.isVector2 ) {

    			this.set(

    				1, 0, x.x,
    				0, 1, x.y,
    				0, 0, 1

    			);

    		} else {

    			this.set(

    				1, 0, x,
    				0, 1, y,
    				0, 0, 1

    			);

    		}

    		return this;

    	}

    	/**
    	 * Sets this matrix as a 2D rotational transformation.
    	 *
    	 * @param {number} theta - The rotation in radians.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	makeRotation( theta ) {

    		// counterclockwise

    		const c = Math.cos( theta );
    		const s = Math.sin( theta );

    		this.set(

    			c, - s, 0,
    			s, c, 0,
    			0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a 2D scale transform.
    	 *
    	 * @param {number} x - The amount to scale in the X axis.
    	 * @param {number} y - The amount to scale in the Y axis.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	makeScale( x, y ) {

    		this.set(

    			x, 0, 0,
    			0, y, 0,
    			0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Returns `true` if this matrix is equal with the given one.
    	 *
    	 * @param {Matrix3} matrix - The matrix to test for equality.
    	 * @return {boolean} Whether this matrix is equal with the given one.
    	 */
    	equals( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 9; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	}

    	/**
    	 * Sets the elements of the matrix from the given array.
    	 *
    	 * @param {Array<number>} array - The matrix elements in column-major order.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Matrix3} A reference to this matrix.
    	 */
    	fromArray( array, offset = 0 ) {

    		for ( let i = 0; i < 9; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	}

    	/**
    	 * Writes the elements of this matrix to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The matrix elements in column-major order.
    	 */
    	toArray( array = [], offset = 0 ) {

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];

    		array[ offset + 3 ] = te[ 3 ];
    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];

    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];
    		array[ offset + 8 ] = te[ 8 ];

    		return array;

    	}

    	/**
    	 * Returns a matrix with copied values from this instance.
    	 *
    	 * @return {Matrix3} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().fromArray( this.elements );

    	}

    }

    const _m3 = /*@__PURE__*/ new Matrix3();

    function arrayNeedsUint32( array ) {

    	// assumes larger values usually on last

    	for ( let i = array.length - 1; i >= 0; -- i ) {

    		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

    	}

    	return false;

    }

    function createElementNS( name ) {

    	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

    }

    function createCanvasElement() {

    	const canvas = createElementNS( 'canvas' );
    	canvas.style.display = 'block';
    	return canvas;

    }

    const _cache = {};

    function warnOnce( message ) {

    	if ( message in _cache ) return;

    	_cache[ message ] = true;

    	console.warn( message );

    }

    function probeAsync( gl, sync, interval ) {

    	return new Promise( function ( resolve, reject ) {

    		function probe() {

    			switch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {

    				case gl.WAIT_FAILED:
    					reject();
    					break;

    				case gl.TIMEOUT_EXPIRED:
    					setTimeout( probe, interval );
    					break;

    				default:
    					resolve();

    			}

    		}

    		setTimeout( probe, interval );

    	} );

    }

    function toNormalizedProjectionMatrix( projectionMatrix ) {

    	const m = projectionMatrix.elements;

    	// Convert [-1, 1] to [0, 1] projection matrix
    	m[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];
    	m[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];
    	m[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];
    	m[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];

    }

    function toReversedProjectionMatrix( projectionMatrix ) {

    	const m = projectionMatrix.elements;
    	const isPerspectiveMatrix = m[ 11 ] === -1;

    	// Reverse [0, 1] projection matrix
    	if ( isPerspectiveMatrix ) {

    		m[ 10 ] = - m[ 10 ] - 1;
    		m[ 14 ] = - m[ 14 ];

    	} else {

    		m[ 10 ] = - m[ 10 ];
    		m[ 14 ] = - m[ 14 ] + 1;

    	}

    }

    const LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(
    	0.4123908, 0.3575843, 0.1804808,
    	0.2126390, 0.7151687, 0.0721923,
    	0.0193308, 0.1191948, 0.9505322
    );

    const XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(
    	3.2409699, -1.5373832, -0.4986108,
    	-0.9692436, 1.8759675, 0.0415551,
    	0.0556301, -0.203977, 1.0569715
    );

    function createColorManagement() {

    	const ColorManagement = {

    		enabled: true,

    		workingColorSpace: LinearSRGBColorSpace,

    		/**
    		 * Implementations of supported color spaces.
    		 *
    		 * Required:
    		 *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
    		 *	- whitePoint: reference white [ x y ]
    		 *	- transfer: transfer function (pre-defined)
    		 *	- toXYZ: Matrix3 RGB to XYZ transform
    		 *	- fromXYZ: Matrix3 XYZ to RGB transform
    		 *	- luminanceCoefficients: RGB luminance coefficients
    		 *
    		 * Optional:
    		 *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
    		 *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
    		 *
    		 * Reference:
    		 * - https://www.russellcottrell.com/photo/matrixCalculator.htm
    		 */
    		spaces: {},

    		convert: function ( color, sourceColorSpace, targetColorSpace ) {

    			if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

    				return color;

    			}

    			if ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {

    				color.r = SRGBToLinear( color.r );
    				color.g = SRGBToLinear( color.g );
    				color.b = SRGBToLinear( color.b );

    			}

    			if ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {

    				color.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );
    				color.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );

    			}

    			if ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {

    				color.r = LinearToSRGB( color.r );
    				color.g = LinearToSRGB( color.g );
    				color.b = LinearToSRGB( color.b );

    			}

    			return color;

    		},

    		workingToColorSpace: function ( color, targetColorSpace ) {

    			return this.convert( color, this.workingColorSpace, targetColorSpace );

    		},

    		colorSpaceToWorking: function ( color, sourceColorSpace ) {

    			return this.convert( color, sourceColorSpace, this.workingColorSpace );

    		},

    		getPrimaries: function ( colorSpace ) {

    			return this.spaces[ colorSpace ].primaries;

    		},

    		getTransfer: function ( colorSpace ) {

    			if ( colorSpace === NoColorSpace ) return LinearTransfer;

    			return this.spaces[ colorSpace ].transfer;

    		},

    		getLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {

    			return target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );

    		},

    		define: function ( colorSpaces ) {

    			Object.assign( this.spaces, colorSpaces );

    		},

    		// Internal APIs

    		_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {

    			return targetMatrix
    				.copy( this.spaces[ sourceColorSpace ].toXYZ )
    				.multiply( this.spaces[ targetColorSpace ].fromXYZ );

    		},

    		_getDrawingBufferColorSpace: function ( colorSpace ) {

    			return this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;

    		},

    		_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {

    			return this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;

    		},

    		// Deprecated

    		fromWorkingColorSpace: function ( color, targetColorSpace ) {

    			warnOnce( 'THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace().' ); // @deprecated, r177

    			return ColorManagement.workingToColorSpace( color, targetColorSpace );

    		},

    		toWorkingColorSpace: function ( color, sourceColorSpace ) {

    			warnOnce( 'THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking().' ); // @deprecated, r177

    			return ColorManagement.colorSpaceToWorking( color, sourceColorSpace );

    		},

    	};

    	/******************************************************************************
    	 * sRGB definitions
    	 */

    	const REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];
    	const REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];
    	const D65 = [ 0.3127, 0.3290 ];

    	ColorManagement.define( {

    		[ LinearSRGBColorSpace ]: {
    			primaries: REC709_PRIMARIES,
    			whitePoint: D65,
    			transfer: LinearTransfer,
    			toXYZ: LINEAR_REC709_TO_XYZ,
    			fromXYZ: XYZ_TO_LINEAR_REC709,
    			luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
    			workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
    			outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
    		},

    		[ SRGBColorSpace ]: {
    			primaries: REC709_PRIMARIES,
    			whitePoint: D65,
    			transfer: SRGBTransfer,
    			toXYZ: LINEAR_REC709_TO_XYZ,
    			fromXYZ: XYZ_TO_LINEAR_REC709,
    			luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
    			outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
    		},

    	} );

    	return ColorManagement;

    }

    const ColorManagement = /*@__PURE__*/ createColorManagement();

    function SRGBToLinear( c ) {

    	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

    }

    function LinearToSRGB( c ) {

    	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

    }

    let _canvas;

    /**
     * A class containing utility functions for images.
     *
     * @hideconstructor
     */
    class ImageUtils {

    	/**
    	 * Returns a data URI containing a representation of the given image.
    	 *
    	 * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
    	 * @param {string} [type='image/png'] - Indicates the image format.
    	 * @return {string} The data URI.
    	 */
    	static getDataURL( image, type = 'image/png' ) {

    		if ( /^data:/i.test( image.src ) ) {

    			return image.src;

    		}

    		if ( typeof HTMLCanvasElement === 'undefined' ) {

    			return image.src;

    		}

    		let canvas;

    		if ( image instanceof HTMLCanvasElement ) {

    			canvas = image;

    		} else {

    			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

    			_canvas.width = image.width;
    			_canvas.height = image.height;

    			const context = _canvas.getContext( '2d' );

    			if ( image instanceof ImageData ) {

    				context.putImageData( image, 0, 0 );

    			} else {

    				context.drawImage( image, 0, 0, image.width, image.height );

    			}

    			canvas = _canvas;

    		}

    		return canvas.toDataURL( type );

    	}

    	/**
    	 * Converts the given sRGB image data to linear color space.
    	 *
    	 * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
    	 * @return {HTMLCanvasElement|Object} The converted image.
    	 */
    	static sRGBToLinear( image ) {

    		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    			const canvas = createElementNS( 'canvas' );

    			canvas.width = image.width;
    			canvas.height = image.height;

    			const context = canvas.getContext( '2d' );
    			context.drawImage( image, 0, 0, image.width, image.height );

    			const imageData = context.getImageData( 0, 0, image.width, image.height );
    			const data = imageData.data;

    			for ( let i = 0; i < data.length; i ++ ) {

    				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

    			}

    			context.putImageData( imageData, 0, 0 );

    			return canvas;

    		} else if ( image.data ) {

    			const data = image.data.slice( 0 );

    			for ( let i = 0; i < data.length; i ++ ) {

    				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

    					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

    				} else {

    					// assuming float

    					data[ i ] = SRGBToLinear( data[ i ] );

    				}

    			}

    			return {
    				data: data,
    				width: image.width,
    				height: image.height
    			};

    		} else {

    			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
    			return image;

    		}

    	}

    }

    let _sourceId = 0;

    /**
     * Represents the data source of a texture.
     *
     * The main purpose of this class is to decouple the data definition from the texture
     * definition so the same data can be used with multiple texture instances.
     */
    class Source {

    	/**
    	 * Constructs a new video texture.
    	 *
    	 * @param {any} [data=null] - The data definition of a texture.
    	 */
    	constructor( data = null ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isSource = true;

    		/**
    		 * The ID of the source.
    		 *
    		 * @name Source#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _sourceId ++ } );

    		/**
    		 * The UUID of the source.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.uuid = generateUUID();

    		/**
    		 * The data definition of a texture.
    		 *
    		 * @type {any}
    		 */
    		this.data = data;

    		/**
    		 * This property is only relevant when {@link Source#needsUpdate} is set to `true` and
    		 * provides more control on how texture data should be processed. When `dataReady` is set
    		 * to `false`, the engine performs the memory allocation (if necessary) but does not transfer
    		 * the data into the GPU memory.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.dataReady = true;

    		/**
    		 * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.
    		 *
    		 * @type {number}
    		 * @readonly
    		 * @default 0
    		 */
    		this.version = 0;

    	}

    	getSize( target ) {

    		const data = this.data;

    		if ( data instanceof HTMLVideoElement ) {

    			target.set( data.videoWidth, data.videoHeight );

    		} else if ( data !== null ) {

    			target.set( data.width, data.height, data.depth || 0 );

    		} else {

    			target.set( 0, 0, 0 );

    		}

    		return target;

    	}

    	/**
    	 * When the property is set to `true`, the engine allocates the memory
    	 * for the texture (if necessary) and triggers the actual texture upload
    	 * to the GPU next time the source is used.
    	 *
    	 * @type {boolean}
    	 * @default false
    	 * @param {boolean} value
    	 */
    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    	/**
    	 * Serializes the source into JSON.
    	 *
    	 * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
    	 * @return {Object} A JSON object representing the serialized source.
    	 * @see {@link ObjectLoader#parse}
    	 */
    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

    			return meta.images[ this.uuid ];

    		}

    		const output = {
    			uuid: this.uuid,
    			url: ''
    		};

    		const data = this.data;

    		if ( data !== null ) {

    			let url;

    			if ( Array.isArray( data ) ) {

    				// cube texture

    				url = [];

    				for ( let i = 0, l = data.length; i < l; i ++ ) {

    					if ( data[ i ].isDataTexture ) {

    						url.push( serializeImage( data[ i ].image ) );

    					} else {

    						url.push( serializeImage( data[ i ] ) );

    					}

    				}

    			} else {

    				// texture

    				url = serializeImage( data );

    			}

    			output.url = url;

    		}

    		if ( ! isRootObject ) {

    			meta.images[ this.uuid ] = output;

    		}

    		return output;

    	}

    }

    function serializeImage( image ) {

    	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

    		// default images

    		return ImageUtils.getDataURL( image );

    	} else {

    		if ( image.data ) {

    			// images of DataTexture

    			return {
    				data: Array.from( image.data ),
    				width: image.width,
    				height: image.height,
    				type: image.data.constructor.name
    			};

    		} else {

    			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
    			return {};

    		}

    	}

    }

    let _textureId = 0;

    const _tempVec3 = /*@__PURE__*/ new Vector3();

    /**
     * Base class for all textures.
     *
     * Note: After the initial use of a texture, its dimensions, format, and type
     * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.
     *
     * @augments EventDispatcher
     */
    class Texture extends EventDispatcher {

    	/**
    	 * Constructs a new texture.
    	 *
    	 * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
    	 * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
    	 * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
    	 * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
    	 * @param {number} [magFilter=LinearFilter] - The mag filter value.
    	 * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
    	 * @param {number} [format=RGBAFormat] - The texture format.
    	 * @param {number} [type=UnsignedByteType] - The texture type.
    	 * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
    	 * @param {string} [colorSpace=NoColorSpace] - The color space.
    	 */
    	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isTexture = true;

    		/**
    		 * The ID of the texture.
    		 *
    		 * @name Texture#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _textureId ++ } );

    		/**
    		 * The UUID of the material.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.uuid = generateUUID();

    		/**
    		 * The name of the material.
    		 *
    		 * @type {string}
    		 */
    		this.name = '';

    		/**
    		 * The data definition of a texture. A reference to the data source can be
    		 * shared across textures. This is often useful in context of spritesheets
    		 * where multiple textures render the same data but with different texture
    		 * transformations.
    		 *
    		 * @type {Source}
    		 */
    		this.source = new Source( image );

    		/**
    		 * An array holding user-defined mipmaps.
    		 *
    		 * @type {Array<Object>}
    		 */
    		this.mipmaps = [];

    		/**
    		 * How the texture is applied to the object. The value `UVMapping`
    		 * is the default, where texture or uv coordinates are used to apply the map.
    		 *
    		 * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}
    		 * @default UVMapping
    		*/
    		this.mapping = mapping;

    		/**
    		 * Lets you select the uv attribute to map the texture to. `0` for `uv`,
    		 * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.channel = 0;

    		/**
    		 * This defines how the texture is wrapped horizontally and corresponds to
    		 * *U* in UV mapping.
    		 *
    		 * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}
    		 * @default ClampToEdgeWrapping
    		 */
    		this.wrapS = wrapS;

    		/**
    		 * This defines how the texture is wrapped horizontally and corresponds to
    		 * *V* in UV mapping.
    		 *
    		 * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}
    		 * @default ClampToEdgeWrapping
    		 */
    		this.wrapT = wrapT;

    		/**
    		 * How the texture is sampled when a texel covers more than one pixel.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default LinearFilter
    		 */
    		this.magFilter = magFilter;

    		/**
    		 * How the texture is sampled when a texel covers less than one pixel.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default LinearMipmapLinearFilter
    		 */
    		this.minFilter = minFilter;

    		/**
    		 * The number of samples taken along the axis through the pixel that has the
    		 * highest density of texels. By default, this value is `1`. A higher value
    		 * gives a less blurry result than a basic mipmap, at the cost of more
    		 * texture samples being used.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.anisotropy = anisotropy;

    		/**
    		 * The format of the texture.
    		 *
    		 * @type {number}
    		 * @default RGBAFormat
    		 */
    		this.format = format;

    		/**
    		 * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and
    		 * defines how the texture data is going to be stored on the GPU.
    		 *
    		 * This property allows to overwrite the default format.
    		 *
    		 * @type {?string}
    		 * @default null
    		 */
    		this.internalFormat = null;

    		/**
    		 * The data type of the texture.
    		 *
    		 * @type {number}
    		 * @default UnsignedByteType
    		 */
    		this.type = type;

    		/**
    		 * How much a single repetition of the texture is offset from the beginning,
    		 * in each direction U and V. Typical range is `0.0` to `1.0`.
    		 *
    		 * @type {Vector2}
    		 * @default (0,0)
    		 */
    		this.offset = new Vector2( 0, 0 );

    		/**
    		 * How many times the texture is repeated across the surface, in each
    		 * direction U and V. If repeat is set greater than `1` in either direction,
    		 * the corresponding wrap parameter should also be set to `RepeatWrapping`
    		 * or `MirroredRepeatWrapping` to achieve the desired tiling effect.
    		 *
    		 * @type {Vector2}
    		 * @default (1,1)
    		 */
    		this.repeat = new Vector2( 1, 1 );

    		/**
    		 * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds
    		 * to the center of the texture. Default is `(0, 0)`, the lower left.
    		 *
    		 * @type {Vector2}
    		 * @default (0,0)
    		 */
    		this.center = new Vector2( 0, 0 );

    		/**
    		 * How much the texture is rotated around the center point, in radians.
    		 * Positive values are counter-clockwise.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.rotation = 0;

    		/**
    		 * Whether to update the texture's uv-transformation {@link Texture#matrix}
    		 * from the properties {@link Texture#offset}, {@link Texture#repeat},
    		 * {@link Texture#rotation}, and {@link Texture#center}.
    		 *
    		 * Set this to `false` if you are specifying the uv-transform matrix directly.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.matrixAutoUpdate = true;

    		/**
    		 * The uv-transformation matrix of the texture.
    		 *
    		 * @type {Matrix3}
    		 */
    		this.matrix = new Matrix3();

    		/**
    		 * Whether to generate mipmaps (if possible) for a texture.
    		 *
    		 * Set this to `false` if you are creating mipmaps manually.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.generateMipmaps = true;

    		/**
    		 * If set to `true`, the alpha channel, if present, is multiplied into the
    		 * color channels when the texture is uploaded to the GPU.
    		 *
    		 * Note that this property has no effect when using `ImageBitmap`. You need to
    		 * configure premultiply alpha on bitmap creation instead.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.premultiplyAlpha = false;

    		/**
    		 * If set to `true`, the texture is flipped along the vertical axis when
    		 * uploaded to the GPU.
    		 *
    		 * Note that this property has no effect when using `ImageBitmap`. You need to
    		 * configure the flip on bitmap creation instead.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.flipY = true;

    		/**
    		 * Specifies the alignment requirements for the start of each pixel row in memory.
    		 * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),
    		 * `4` (word-alignment), and `8` (rows start on double-word boundaries).
    		 *
    		 * @type {number}
    		 * @default 4
    		 */
    		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

    		/**
    		 * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.
    		 *
    		 * @type {string}
    		 * @default NoColorSpace
    		 */
    		this.colorSpace = colorSpace;

    		/**
    		 * An object that can be used to store custom data about the texture. It
    		 * should not hold references to functions as these will not be cloned.
    		 *
    		 * @type {Object}
    		 */
    		this.userData = {};

    		/**
    		 * This can be used to only update a subregion or specific rows of the texture (for example, just the
    		 * first 3 rows). Use the `addUpdateRange()` function to add ranges to this array.
    		 *
    		 * @type {Array<Object>}
    		 */
    		this.updateRanges = [];

    		/**
    		 * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.
    		 *
    		 * @type {number}
    		 * @readonly
    		 * @default 0
    		 */
    		this.version = 0;

    		/**
    		 * A callback function, called when the texture is updated (e.g., when
    		 * {@link Texture#needsUpdate} has been set to true and then the texture is used).
    		 *
    		 * @type {?Function}
    		 * @default null
    		 */
    		this.onUpdate = null;

    		/**
    		 * An optional back reference to the textures render target.
    		 *
    		 * @type {?(RenderTarget|WebGLRenderTarget)}
    		 * @default null
    		 */
    		this.renderTarget = null;

    		/**
    		 * Indicates whether a texture belongs to a render target or not.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default false
    		 */
    		this.isRenderTargetTexture = false;

    		/**
    		 * Indicates if a texture should be handled like a texture array.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default false
    		 */
    		this.isArrayTexture = image && image.depth && image.depth > 1 ? true : false;

    		/**
    		 * Indicates whether this texture should be processed by `PMREMGenerator` or not
    		 * (only relevant for render target textures).
    		 *
    		 * @type {number}
    		 * @readonly
    		 * @default 0
    		 */
    		this.pmremVersion = 0;

    	}

    	/**
    	 * The width of the texture in pixels.
    	 */
    	get width() {

    		return this.source.getSize( _tempVec3 ).x;

    	}

    	/**
    	 * The height of the texture in pixels.
    	 */
    	get height() {

    		return this.source.getSize( _tempVec3 ).y;

    	}

    	/**
    	 * The depth of the texture in pixels.
    	 */
    	get depth() {

    		return this.source.getSize( _tempVec3 ).z;

    	}

    	/**
    	 * The image object holding the texture data.
    	 *
    	 * @type {?Object}
    	 */
    	get image() {

    		return this.source.data;

    	}

    	set image( value = null ) {

    		this.source.data = value;

    	}

    	/**
    	 * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
    	 * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
    	 */
    	updateMatrix() {

    		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

    	}

    	/**
    	 * Adds a range of data in the data texture to be updated on the GPU.
    	 *
    	 * @param {number} start - Position at which to start update.
    	 * @param {number} count - The number of components to update.
    	 */
    	addUpdateRange( start, count ) {

    		this.updateRanges.push( { start, count } );

    	}

    	/**
    	 * Clears the update ranges.
    	 */
    	clearUpdateRanges() {

    		this.updateRanges.length = 0;

    	}

    	/**
    	 * Returns a new texture with copied values from this instance.
    	 *
    	 * @return {Texture} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the values of the given texture to this instance.
    	 *
    	 * @param {Texture} source - The texture to copy.
    	 * @return {Texture} A reference to this instance.
    	 */
    	copy( source ) {

    		this.name = source.name;

    		this.source = source.source;
    		this.mipmaps = source.mipmaps.slice( 0 );

    		this.mapping = source.mapping;
    		this.channel = source.channel;

    		this.wrapS = source.wrapS;
    		this.wrapT = source.wrapT;

    		this.magFilter = source.magFilter;
    		this.minFilter = source.minFilter;

    		this.anisotropy = source.anisotropy;

    		this.format = source.format;
    		this.internalFormat = source.internalFormat;
    		this.type = source.type;

    		this.offset.copy( source.offset );
    		this.repeat.copy( source.repeat );
    		this.center.copy( source.center );
    		this.rotation = source.rotation;

    		this.matrixAutoUpdate = source.matrixAutoUpdate;
    		this.matrix.copy( source.matrix );

    		this.generateMipmaps = source.generateMipmaps;
    		this.premultiplyAlpha = source.premultiplyAlpha;
    		this.flipY = source.flipY;
    		this.unpackAlignment = source.unpackAlignment;
    		this.colorSpace = source.colorSpace;

    		this.renderTarget = source.renderTarget;
    		this.isRenderTargetTexture = source.isRenderTargetTexture;
    		this.isArrayTexture = source.isArrayTexture;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		this.needsUpdate = true;

    		return this;

    	}

    	/**
    	 * Sets this texture's properties based on `values`.
    	 * @param {Object} values - A container with texture parameters.
    	 */
    	setValues( values ) {

    		for ( const key in values ) {

    			const newValue = values[ key ];

    			if ( newValue === undefined ) {

    				console.warn( `THREE.Texture.setValues(): parameter '${ key }' has value of undefined.` );
    				continue;

    			}

    			const currentValue = this[ key ];

    			if ( currentValue === undefined ) {

    				console.warn( `THREE.Texture.setValues(): property '${ key }' does not exist.` );
    				continue;

    			}

    			if ( ( currentValue && newValue ) && ( currentValue.isVector2 && newValue.isVector2 ) ) {

    				currentValue.copy( newValue );

    			} else if ( ( currentValue && newValue ) && ( currentValue.isVector3 && newValue.isVector3 ) ) {

    				currentValue.copy( newValue );

    			} else if ( ( currentValue && newValue ) && ( currentValue.isMatrix3 && newValue.isMatrix3 ) ) {

    				currentValue.copy( newValue );

    			} else {

    				this[ key ] = newValue;

    			}

    		}

    	}

    	/**
    	 * Serializes the texture into JSON.
    	 *
    	 * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
    	 * @return {Object} A JSON object representing the serialized texture.
    	 * @see {@link ObjectLoader#parse}
    	 */
    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

    			return meta.textures[ this.uuid ];

    		}

    		const output = {

    			metadata: {
    				version: 4.7,
    				type: 'Texture',
    				generator: 'Texture.toJSON'
    			},

    			uuid: this.uuid,
    			name: this.name,

    			image: this.source.toJSON( meta ).uuid,

    			mapping: this.mapping,
    			channel: this.channel,

    			repeat: [ this.repeat.x, this.repeat.y ],
    			offset: [ this.offset.x, this.offset.y ],
    			center: [ this.center.x, this.center.y ],
    			rotation: this.rotation,

    			wrap: [ this.wrapS, this.wrapT ],

    			format: this.format,
    			internalFormat: this.internalFormat,
    			type: this.type,
    			colorSpace: this.colorSpace,

    			minFilter: this.minFilter,
    			magFilter: this.magFilter,
    			anisotropy: this.anisotropy,

    			flipY: this.flipY,

    			generateMipmaps: this.generateMipmaps,
    			premultiplyAlpha: this.premultiplyAlpha,
    			unpackAlignment: this.unpackAlignment

    		};

    		if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

    		if ( ! isRootObject ) {

    			meta.textures[ this.uuid ] = output;

    		}

    		return output;

    	}

    	/**
    	 * Frees the GPU-related resources allocated by this instance. Call this
    	 * method whenever this instance is no longer used in your app.
    	 *
    	 * @fires Texture#dispose
    	 */
    	dispose() {

    		/**
    		 * Fires when the texture has been disposed of.
    		 *
    		 * @event Texture#dispose
    		 * @type {Object}
    		 */
    		this.dispatchEvent( { type: 'dispose' } );

    	}

    	/**
    	 * Transforms the given uv vector with the textures uv transformation matrix.
    	 *
    	 * @param {Vector2} uv - The uv vector.
    	 * @return {Vector2} The transformed uv vector.
    	 */
    	transformUv( uv ) {

    		if ( this.mapping !== UVMapping ) return uv;

    		uv.applyMatrix3( this.matrix );

    		if ( uv.x < 0 || uv.x > 1 ) {

    			switch ( this.wrapS ) {

    				case RepeatWrapping:

    					uv.x = uv.x - Math.floor( uv.x );
    					break;

    				case ClampToEdgeWrapping:

    					uv.x = uv.x < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

    						uv.x = Math.ceil( uv.x ) - uv.x;

    					} else {

    						uv.x = uv.x - Math.floor( uv.x );

    					}

    					break;

    			}

    		}

    		if ( uv.y < 0 || uv.y > 1 ) {

    			switch ( this.wrapT ) {

    				case RepeatWrapping:

    					uv.y = uv.y - Math.floor( uv.y );
    					break;

    				case ClampToEdgeWrapping:

    					uv.y = uv.y < 0 ? 0 : 1;
    					break;

    				case MirroredRepeatWrapping:

    					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

    						uv.y = Math.ceil( uv.y ) - uv.y;

    					} else {

    						uv.y = uv.y - Math.floor( uv.y );

    					}

    					break;

    			}

    		}

    		if ( this.flipY ) {

    			uv.y = 1 - uv.y;

    		}

    		return uv;

    	}

    	/**
    	 * Setting this property to `true` indicates the engine the texture
    	 * must be updated in the next render. This triggers a texture upload
    	 * to the GPU and ensures correct texture parameter configuration.
    	 *
    	 * @type {boolean}
    	 * @default false
    	 * @param {boolean} value
    	 */
    	set needsUpdate( value ) {

    		if ( value === true ) {

    			this.version ++;
    			this.source.needsUpdate = true;

    		}

    	}

    	/**
    	 * Setting this property to `true` indicates the engine the PMREM
    	 * must be regenerated.
    	 *
    	 * @type {boolean}
    	 * @default false
    	 * @param {boolean} value
    	 */
    	set needsPMREMUpdate( value ) {

    		if ( value === true ) {

    			this.pmremVersion ++;

    		}

    	}

    }

    /**
     * The default image for all textures.
     *
     * @static
     * @type {?Image}
     * @default null
     */
    Texture.DEFAULT_IMAGE = null;

    /**
     * The default mapping for all textures.
     *
     * @static
     * @type {number}
     * @default UVMapping
     */
    Texture.DEFAULT_MAPPING = UVMapping;

    /**
     * The default anisotropy value for all textures.
     *
     * @static
     * @type {number}
     * @default 1
     */
    Texture.DEFAULT_ANISOTROPY = 1;

    /**
     * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers
     * (labeled x, y, z and w), which can be used to represent a number of things, such as:
     *
     * - A point in 4D space.
     * - A direction and length in 4D space. In three.js the length will
     * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`
     * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.
     * - Any arbitrary ordered quadruplet of numbers.
     *
     * There are other things a 4D vector can be used to represent, however these
     * are the most common uses in *three.js*.
     *
     * Iterating through a vector instance will yield its components `(x, y, z, w)` in
     * the corresponding order.
     * ```js
     * const a = new THREE.Vector4( 0, 1, 0, 0 );
     *
     * //no arguments; will be initialised to (0, 0, 0, 1)
     * const b = new THREE.Vector4( );
     *
     * const d = a.dot( b );
     * ```
     */
    class Vector4 {

    	/**
    	 * Constructs a new 4D vector.
    	 *
    	 * @param {number} [x=0] - The x value of this vector.
    	 * @param {number} [y=0] - The y value of this vector.
    	 * @param {number} [z=0] - The z value of this vector.
    	 * @param {number} [w=1] - The w value of this vector.
    	 */
    	constructor( x = 0, y = 0, z = 0, w = 1 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		Vector4.prototype.isVector4 = true;

    		/**
    		 * The x value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.x = x;

    		/**
    		 * The y value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.y = y;

    		/**
    		 * The z value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.z = z;

    		/**
    		 * The w value of this vector.
    		 *
    		 * @type {number}
    		 */
    		this.w = w;

    	}

    	/**
    	 * Alias for {@link Vector4#z}.
    	 *
    	 * @type {number}
    	 */
    	get width() {

    		return this.z;

    	}

    	set width( value ) {

    		this.z = value;

    	}

    	/**
    	 * Alias for {@link Vector4#w}.
    	 *
    	 * @type {number}
    	 */
    	get height() {

    		return this.w;

    	}

    	set height( value ) {

    		this.w = value;

    	}

    	/**
    	 * Sets the vector components.
    	 *
    	 * @param {number} x - The value of the x component.
    	 * @param {number} y - The value of the y component.
    	 * @param {number} z - The value of the z component.
    	 * @param {number} w - The value of the w component.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	set( x, y, z, w ) {

    		this.x = x;
    		this.y = y;
    		this.z = z;
    		this.w = w;

    		return this;

    	}

    	/**
    	 * Sets the vector components to the same value.
    	 *
    	 * @param {number} scalar - The value to set for all vector components.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setScalar( scalar ) {

    		this.x = scalar;
    		this.y = scalar;
    		this.z = scalar;
    		this.w = scalar;

    		return this;

    	}

    	/**
    	 * Sets the vector's x component to the given value
    	 *
    	 * @param {number} x - The value to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setX( x ) {

    		this.x = x;

    		return this;

    	}

    	/**
    	 * Sets the vector's y component to the given value
    	 *
    	 * @param {number} y - The value to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setY( y ) {

    		this.y = y;

    		return this;

    	}

    	/**
    	 * Sets the vector's z component to the given value
    	 *
    	 * @param {number} z - The value to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setZ( z ) {

    		this.z = z;

    		return this;

    	}

    	/**
    	 * Sets the vector's w component to the given value
    	 *
    	 * @param {number} w - The value to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setW( w ) {

    		this.w = w;

    		return this;

    	}

    	/**
    	 * Allows to set a vector component with an index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y,
    	 * `2` equals to z, `3` equals to w.
    	 * @param {number} value - The value to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setComponent( index, value ) {

    		switch ( index ) {

    			case 0: this.x = value; break;
    			case 1: this.y = value; break;
    			case 2: this.z = value; break;
    			case 3: this.w = value; break;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    		return this;

    	}

    	/**
    	 * Returns the value of the vector component which matches the given index.
    	 *
    	 * @param {number} index - The component index. `0` equals to x, `1` equals to y,
    	 * `2` equals to z, `3` equals to w.
    	 * @return {number} A vector component value.
    	 */
    	getComponent( index ) {

    		switch ( index ) {

    			case 0: return this.x;
    			case 1: return this.y;
    			case 2: return this.z;
    			case 3: return this.w;
    			default: throw new Error( 'index is out of range: ' + index );

    		}

    	}

    	/**
    	 * Returns a new vector with copied values from this instance.
    	 *
    	 * @return {Vector4} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this.x, this.y, this.z, this.w );

    	}

    	/**
    	 * Copies the values of the given vector to this instance.
    	 *
    	 * @param {Vector3|Vector4} v - The vector to copy.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	copy( v ) {

    		this.x = v.x;
    		this.y = v.y;
    		this.z = v.z;
    		this.w = ( v.w !== undefined ) ? v.w : 1;

    		return this;

    	}

    	/**
    	 * Adds the given vector to this instance.
    	 *
    	 * @param {Vector4} v - The vector to add.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	add( v ) {

    		this.x += v.x;
    		this.y += v.y;
    		this.z += v.z;
    		this.w += v.w;

    		return this;

    	}

    	/**
    	 * Adds the given scalar value to all components of this instance.
    	 *
    	 * @param {number} s - The scalar to add.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	addScalar( s ) {

    		this.x += s;
    		this.y += s;
    		this.z += s;
    		this.w += s;

    		return this;

    	}

    	/**
    	 * Adds the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector4} a - The first vector.
    	 * @param {Vector4} b - The second vector.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	addVectors( a, b ) {

    		this.x = a.x + b.x;
    		this.y = a.y + b.y;
    		this.z = a.z + b.z;
    		this.w = a.w + b.w;

    		return this;

    	}

    	/**
    	 * Adds the given vector scaled by the given factor to this instance.
    	 *
    	 * @param {Vector4} v - The vector.
    	 * @param {number} s - The factor that scales `v`.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	addScaledVector( v, s ) {

    		this.x += v.x * s;
    		this.y += v.y * s;
    		this.z += v.z * s;
    		this.w += v.w * s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vector from this instance.
    	 *
    	 * @param {Vector4} v - The vector to subtract.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	sub( v ) {

    		this.x -= v.x;
    		this.y -= v.y;
    		this.z -= v.z;
    		this.w -= v.w;

    		return this;

    	}

    	/**
    	 * Subtracts the given scalar value from all components of this instance.
    	 *
    	 * @param {number} s - The scalar to subtract.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	subScalar( s ) {

    		this.x -= s;
    		this.y -= s;
    		this.z -= s;
    		this.w -= s;

    		return this;

    	}

    	/**
    	 * Subtracts the given vectors and stores the result in this instance.
    	 *
    	 * @param {Vector4} a - The first vector.
    	 * @param {Vector4} b - The second vector.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	subVectors( a, b ) {

    		this.x = a.x - b.x;
    		this.y = a.y - b.y;
    		this.z = a.z - b.z;
    		this.w = a.w - b.w;

    		return this;

    	}

    	/**
    	 * Multiplies the given vector with this instance.
    	 *
    	 * @param {Vector4} v - The vector to multiply.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	multiply( v ) {

    		this.x *= v.x;
    		this.y *= v.y;
    		this.z *= v.z;
    		this.w *= v.w;

    		return this;

    	}

    	/**
    	 * Multiplies the given scalar value with all components of this instance.
    	 *
    	 * @param {number} scalar - The scalar to multiply.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	multiplyScalar( scalar ) {

    		this.x *= scalar;
    		this.y *= scalar;
    		this.z *= scalar;
    		this.w *= scalar;

    		return this;

    	}

    	/**
    	 * Multiplies this vector with the given 4x4 matrix.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	applyMatrix4( m ) {

    		const x = this.x, y = this.y, z = this.z, w = this.w;
    		const e = m.elements;

    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
    		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

    		return this;

    	}

    	/**
    	 * Divides this instance by the given vector.
    	 *
    	 * @param {Vector4} v - The vector to divide.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	divide( v ) {

    		this.x /= v.x;
    		this.y /= v.y;
    		this.z /= v.z;
    		this.w /= v.w;

    		return this;

    	}

    	/**
    	 * Divides this vector by the given scalar.
    	 *
    	 * @param {number} scalar - The scalar to divide.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	divideScalar( scalar ) {

    		return this.multiplyScalar( 1 / scalar );

    	}

    	/**
    	 * Sets the x, y and z components of this
    	 * vector to the quaternion's axis and w to the angle.
    	 *
    	 * @param {Quaternion} q - The Quaternion to set.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setAxisAngleFromQuaternion( q ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

    		// q is assumed to be normalized

    		this.w = 2 * Math.acos( q.w );

    		const s = Math.sqrt( 1 - q.w * q.w );

    		if ( s < 0.0001 ) {

    			this.x = 1;
    			this.y = 0;
    			this.z = 0;

    		} else {

    			this.x = q.x / s;
    			this.y = q.y / s;
    			this.z = q.z / s;

    		}

    		return this;

    	}

    	/**
    	 * Sets the x, y and z components of this
    	 * vector to the axis of rotation and w to the angle.
    	 *
    	 * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setAxisAngleFromRotationMatrix( m ) {

    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		let angle, x, y, z; // variables for result
    		const epsilon = 0.01,		// margin to allow for rounding errors
    			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

    			te = m.elements,

    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
    		     ( Math.abs( m13 - m31 ) < epsilon ) &&
    		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

    			// singularity found
    			// first check for identity matrix which must have +1 for all terms
    			// in leading diagonal and zero in other terms

    			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
    			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
    			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
    			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

    				// this singularity is identity matrix so angle = 0

    				this.set( 1, 0, 0, 0 );

    				return this; // zero angle, arbitrary axis

    			}

    			// otherwise this singularity is angle = 180

    			angle = Math.PI;

    			const xx = ( m11 + 1 ) / 2;
    			const yy = ( m22 + 1 ) / 2;
    			const zz = ( m33 + 1 ) / 2;
    			const xy = ( m12 + m21 ) / 4;
    			const xz = ( m13 + m31 ) / 4;
    			const yz = ( m23 + m32 ) / 4;

    			if ( ( xx > yy ) && ( xx > zz ) ) {

    				// m11 is the largest diagonal term

    				if ( xx < epsilon ) {

    					x = 0;
    					y = 0.707106781;
    					z = 0.707106781;

    				} else {

    					x = Math.sqrt( xx );
    					y = xy / x;
    					z = xz / x;

    				}

    			} else if ( yy > zz ) {

    				// m22 is the largest diagonal term

    				if ( yy < epsilon ) {

    					x = 0.707106781;
    					y = 0;
    					z = 0.707106781;

    				} else {

    					y = Math.sqrt( yy );
    					x = xy / y;
    					z = yz / y;

    				}

    			} else {

    				// m33 is the largest diagonal term so base result on this

    				if ( zz < epsilon ) {

    					x = 0.707106781;
    					y = 0.707106781;
    					z = 0;

    				} else {

    					z = Math.sqrt( zz );
    					x = xz / z;
    					y = yz / z;

    				}

    			}

    			this.set( x, y, z, angle );

    			return this; // return 180 deg rotation

    		}

    		// as we have reached here there are no singularities so we can handle normally

    		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
    			( m13 - m31 ) * ( m13 - m31 ) +
    			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

    		if ( Math.abs( s ) < 0.001 ) s = 1;

    		// prevent divide by zero, should not happen if matrix is orthogonal and should be
    		// caught by singularity test above, but I've left it in just in case

    		this.x = ( m32 - m23 ) / s;
    		this.y = ( m13 - m31 ) / s;
    		this.z = ( m21 - m12 ) / s;
    		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

    		return this;

    	}

    	/**
    	 * Sets the vector components to the position elements of the
    	 * given transformation matrix.
    	 *
    	 * @param {Matrix4} m - The 4x4 matrix.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setFromMatrixPosition( m ) {

    		const e = m.elements;

    		this.x = e[ 12 ];
    		this.y = e[ 13 ];
    		this.z = e[ 14 ];
    		this.w = e[ 15 ];

    		return this;

    	}

    	/**
    	 * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
    	 * value, replace that value with the corresponding min value.
    	 *
    	 * @param {Vector4} v - The vector.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	min( v ) {

    		this.x = Math.min( this.x, v.x );
    		this.y = Math.min( this.y, v.y );
    		this.z = Math.min( this.z, v.z );
    		this.w = Math.min( this.w, v.w );

    		return this;

    	}

    	/**
    	 * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
    	 * value, replace that value with the corresponding max value.
    	 *
    	 * @param {Vector4} v - The vector.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	max( v ) {

    		this.x = Math.max( this.x, v.x );
    		this.y = Math.max( this.y, v.y );
    		this.z = Math.max( this.z, v.z );
    		this.w = Math.max( this.w, v.w );

    		return this;

    	}

    	/**
    	 * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
    	 * value, it is replaced by the corresponding value.
    	 * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
    	 * it is replaced by the corresponding value.
    	 *
    	 * @param {Vector4} min - The minimum x, y and z values.
    	 * @param {Vector4} max - The maximum x, y and z values in the desired range.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	clamp( min, max ) {

    		// assumes min < max, componentwise

    		this.x = clamp( this.x, min.x, max.x );
    		this.y = clamp( this.y, min.y, max.y );
    		this.z = clamp( this.z, min.z, max.z );
    		this.w = clamp( this.w, min.w, max.w );

    		return this;

    	}

    	/**
    	 * If this vector's x, y, z or w values are greater than the max value, they are
    	 * replaced by the max value.
    	 * If this vector's x, y, z or w values are less than the min value, they are
    	 * replaced by the min value.
    	 *
    	 * @param {number} minVal - The minimum value the components will be clamped to.
    	 * @param {number} maxVal - The maximum value the components will be clamped to.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	clampScalar( minVal, maxVal ) {

    		this.x = clamp( this.x, minVal, maxVal );
    		this.y = clamp( this.y, minVal, maxVal );
    		this.z = clamp( this.z, minVal, maxVal );
    		this.w = clamp( this.w, minVal, maxVal );

    		return this;

    	}

    	/**
    	 * If this vector's length is greater than the max value, it is replaced by
    	 * the max value.
    	 * If this vector's length is less than the min value, it is replaced by the
    	 * min value.
    	 *
    	 * @param {number} min - The minimum value the vector length will be clamped to.
    	 * @param {number} max - The maximum value the vector length will be clamped to.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	clampLength( min, max ) {

    		const length = this.length();

    		return this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );

    	}

    	/**
    	 * The components of this vector are rounded down to the nearest integer value.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	floor() {

    		this.x = Math.floor( this.x );
    		this.y = Math.floor( this.y );
    		this.z = Math.floor( this.z );
    		this.w = Math.floor( this.w );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded up to the nearest integer value.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	ceil() {

    		this.x = Math.ceil( this.x );
    		this.y = Math.ceil( this.y );
    		this.z = Math.ceil( this.z );
    		this.w = Math.ceil( this.w );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded to the nearest integer value
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	round() {

    		this.x = Math.round( this.x );
    		this.y = Math.round( this.y );
    		this.z = Math.round( this.z );
    		this.w = Math.round( this.w );

    		return this;

    	}

    	/**
    	 * The components of this vector are rounded towards zero (up if negative,
    	 * down if positive) to an integer value.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	roundToZero() {

    		this.x = Math.trunc( this.x );
    		this.y = Math.trunc( this.y );
    		this.z = Math.trunc( this.z );
    		this.w = Math.trunc( this.w );

    		return this;

    	}

    	/**
    	 * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	negate() {

    		this.x = - this.x;
    		this.y = - this.y;
    		this.z = - this.z;
    		this.w = - this.w;

    		return this;

    	}

    	/**
    	 * Calculates the dot product of the given vector with this instance.
    	 *
    	 * @param {Vector4} v - The vector to compute the dot product with.
    	 * @return {number} The result of the dot product.
    	 */
    	dot( v ) {

    		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

    	}

    	/**
    	 * Computes the square of the Euclidean length (straight-line length) from
    	 * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
    	 * compare the length squared instead as it is slightly more efficient to calculate.
    	 *
    	 * @return {number} The square length of this vector.
    	 */
    	lengthSq() {

    		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

    	}

    	/**
    	 * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	length() {

    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

    	}

    	/**
    	 * Computes the Manhattan length of this vector.
    	 *
    	 * @return {number} The length of this vector.
    	 */
    	manhattanLength() {

    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

    	}

    	/**
    	 * Converts this vector to a unit vector - that is, sets it equal to a vector
    	 * with the same direction as this one, but with a vector length of `1`.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	normalize() {

    		return this.divideScalar( this.length() || 1 );

    	}

    	/**
    	 * Sets this vector to a vector with the same direction as this one, but
    	 * with the specified length.
    	 *
    	 * @param {number} length - The new length of this vector.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	setLength( length ) {

    		return this.normalize().multiplyScalar( length );

    	}

    	/**
    	 * Linearly interpolates between the given vector and this instance, where
    	 * alpha is the percent distance along the line - alpha = 0 will be this
    	 * vector, and alpha = 1 will be the given one.
    	 *
    	 * @param {Vector4} v - The vector to interpolate towards.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	lerp( v, alpha ) {

    		this.x += ( v.x - this.x ) * alpha;
    		this.y += ( v.y - this.y ) * alpha;
    		this.z += ( v.z - this.z ) * alpha;
    		this.w += ( v.w - this.w ) * alpha;

    		return this;

    	}

    	/**
    	 * Linearly interpolates between the given vectors, where alpha is the percent
    	 * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
    	 * be the second one. The result is stored in this instance.
    	 *
    	 * @param {Vector4} v1 - The first vector.
    	 * @param {Vector4} v2 - The second vector.
    	 * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	lerpVectors( v1, v2, alpha ) {

    		this.x = v1.x + ( v2.x - v1.x ) * alpha;
    		this.y = v1.y + ( v2.y - v1.y ) * alpha;
    		this.z = v1.z + ( v2.z - v1.z ) * alpha;
    		this.w = v1.w + ( v2.w - v1.w ) * alpha;

    		return this;

    	}

    	/**
    	 * Returns `true` if this vector is equal with the given one.
    	 *
    	 * @param {Vector4} v - The vector to test for equality.
    	 * @return {boolean} Whether this vector is equal with the given one.
    	 */
    	equals( v ) {

    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

    	}

    	/**
    	 * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
    	 * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
    	 *
    	 * @param {Array<number>} array - An array holding the vector component values.
    	 * @param {number} [offset=0] - The offset into the array.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	fromArray( array, offset = 0 ) {

    		this.x = array[ offset ];
    		this.y = array[ offset + 1 ];
    		this.z = array[ offset + 2 ];
    		this.w = array[ offset + 3 ];

    		return this;

    	}

    	/**
    	 * Writes the components of this vector to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the vector components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The vector components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.x;
    		array[ offset + 1 ] = this.y;
    		array[ offset + 2 ] = this.z;
    		array[ offset + 3 ] = this.w;

    		return array;

    	}

    	/**
    	 * Sets the components of this vector from the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
    	 * @param {number} index - The index into the attribute.
    	 * @return {Vector4} A reference to this vector.
    	 */
    	fromBufferAttribute( attribute, index ) {

    		this.x = attribute.getX( index );
    		this.y = attribute.getY( index );
    		this.z = attribute.getZ( index );
    		this.w = attribute.getW( index );

    		return this;

    	}

    	/**
    	 * Sets each component of this vector to a pseudo-random value between `0` and
    	 * `1`, excluding `1`.
    	 *
    	 * @return {Vector4} A reference to this vector.
    	 */
    	random() {

    		this.x = Math.random();
    		this.y = Math.random();
    		this.z = Math.random();
    		this.w = Math.random();

    		return this;

    	}

    	*[ Symbol.iterator ]() {

    		yield this.x;
    		yield this.y;
    		yield this.z;
    		yield this.w;

    	}

    }

    /**
     * A render target is a buffer where the video card draws pixels for a scene
     * that is being rendered in the background. It is used in different effects,
     * such as applying postprocessing to a rendered image before displaying it
     * on the screen.
     *
     * @augments EventDispatcher
     */
    class RenderTarget extends EventDispatcher {

    	/**
    	 * Render target options.
    	 *
    	 * @typedef {Object} RenderTarget~Options
    	 * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
    	 * @property {number} [magFilter=LinearFilter] - The mag filter.
    	 * @property {number} [minFilter=LinearFilter] - The min filter.
    	 * @property {number} [format=RGBAFormat] - The texture format.
    	 * @property {number} [type=UnsignedByteType] - The texture type.
    	 * @property {?string} [internalFormat=null] - The texture's internal format.
    	 * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
    	 * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
    	 * @property {number} [anisotropy=1] - The texture's anisotropy value.
    	 * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
    	 * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
    	 * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
    	 * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
    	 * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
    	 * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
    	 * @property {number} [samples=0] - The MSAA samples count.
    	 * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
    	 * @property {number} [depth=1] - The texture depth.
    	 * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
    	 */

    	/**
    	 * Constructs a new render target.
    	 *
    	 * @param {number} [width=1] - The width of the render target.
    	 * @param {number} [height=1] - The height of the render target.
    	 * @param {RenderTarget~Options} [options] - The configuration object.
    	 */
    	constructor( width = 1, height = 1, options = {} ) {

    		super();

    		options = Object.assign( {
    			generateMipmaps: false,
    			internalFormat: null,
    			minFilter: LinearFilter,
    			depthBuffer: true,
    			stencilBuffer: false,
    			resolveDepthBuffer: true,
    			resolveStencilBuffer: true,
    			depthTexture: null,
    			samples: 0,
    			count: 1,
    			depth: 1,
    			multiview: false
    		}, options );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isRenderTarget = true;

    		/**
    		 * The width of the render target.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.width = width;

    		/**
    		 * The height of the render target.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.height = height;

    		/**
    		 * The depth of the render target.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.depth = options.depth;

    		/**
    		 * A rectangular area inside the render target's viewport. Fragments that are
    		 * outside the area will be discarded.
    		 *
    		 * @type {Vector4}
    		 * @default (0,0,width,height)
    		 */
    		this.scissor = new Vector4( 0, 0, width, height );

    		/**
    		 * Indicates whether the scissor test should be enabled when rendering into
    		 * this render target or not.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.scissorTest = false;

    		/**
    		 * A rectangular area representing the render target's viewport.
    		 *
    		 * @type {Vector4}
    		 * @default (0,0,width,height)
    		 */
    		this.viewport = new Vector4( 0, 0, width, height );

    		const image = { width: width, height: height, depth: options.depth };

    		const texture = new Texture( image );

    		/**
    		 * An array of textures. Each color attachment is represented as a separate texture.
    		 * Has at least a single entry for the default color attachment.
    		 *
    		 * @type {Array<Texture>}
    		 */
    		this.textures = [];

    		const count = options.count;
    		for ( let i = 0; i < count; i ++ ) {

    			this.textures[ i ] = texture.clone();
    			this.textures[ i ].isRenderTargetTexture = true;
    			this.textures[ i ].renderTarget = this;

    		}

    		this._setTextureOptions( options );

    		/**
    		 * Whether to allocate a depth buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.depthBuffer = options.depthBuffer;

    		/**
    		 * Whether to allocate a stencil buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.stencilBuffer = options.stencilBuffer;

    		/**
    		 * Whether to resolve the depth buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.resolveDepthBuffer = options.resolveDepthBuffer;

    		/**
    		 * Whether to resolve the stencil buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.resolveStencilBuffer = options.resolveStencilBuffer;

    		this._depthTexture = null;
    		this.depthTexture = options.depthTexture;

    		/**
    		 * The number of MSAA samples.
    		 *
    		 * A value of `0` disables MSAA.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.samples = options.samples;

    		/**
    		 * Whether to this target is used in multiview rendering.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.multiview = options.multiview;

    	}

    	_setTextureOptions( options = {} ) {

    		const values = {
    			minFilter: LinearFilter,
    			generateMipmaps: false,
    			flipY: false,
    			internalFormat: null
    		};

    		if ( options.mapping !== undefined ) values.mapping = options.mapping;
    		if ( options.wrapS !== undefined ) values.wrapS = options.wrapS;
    		if ( options.wrapT !== undefined ) values.wrapT = options.wrapT;
    		if ( options.wrapR !== undefined ) values.wrapR = options.wrapR;
    		if ( options.magFilter !== undefined ) values.magFilter = options.magFilter;
    		if ( options.minFilter !== undefined ) values.minFilter = options.minFilter;
    		if ( options.format !== undefined ) values.format = options.format;
    		if ( options.type !== undefined ) values.type = options.type;
    		if ( options.anisotropy !== undefined ) values.anisotropy = options.anisotropy;
    		if ( options.colorSpace !== undefined ) values.colorSpace = options.colorSpace;
    		if ( options.flipY !== undefined ) values.flipY = options.flipY;
    		if ( options.generateMipmaps !== undefined ) values.generateMipmaps = options.generateMipmaps;
    		if ( options.internalFormat !== undefined ) values.internalFormat = options.internalFormat;

    		for ( let i = 0; i < this.textures.length; i ++ ) {

    			const texture = this.textures[ i ];
    			texture.setValues( values );

    		}

    	}

    	/**
    	 * The texture representing the default color attachment.
    	 *
    	 * @type {Texture}
    	 */
    	get texture() {

    		return this.textures[ 0 ];

    	}

    	set texture( value ) {

    		this.textures[ 0 ] = value;

    	}

    	set depthTexture( current ) {

    		if ( this._depthTexture !== null ) this._depthTexture.renderTarget = null;
    		if ( current !== null ) current.renderTarget = this;

    		this._depthTexture = current;

    	}

    	/**
    	 * Instead of saving the depth in a renderbuffer, a texture
    	 * can be used instead which is useful for further processing
    	 * e.g. in context of post-processing.
    	 *
    	 * @type {?DepthTexture}
    	 * @default null
    	 */
    	get depthTexture() {

    		return this._depthTexture;

    	}

    	/**
    	 * Sets the size of this render target.
    	 *
    	 * @param {number} width - The width.
    	 * @param {number} height - The height.
    	 * @param {number} [depth=1] - The depth.
    	 */
    	setSize( width, height, depth = 1 ) {

    		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

    			this.width = width;
    			this.height = height;
    			this.depth = depth;

    			for ( let i = 0, il = this.textures.length; i < il; i ++ ) {

    				this.textures[ i ].image.width = width;
    				this.textures[ i ].image.height = height;
    				this.textures[ i ].image.depth = depth;
    				this.textures[ i ].isArrayTexture = this.textures[ i ].image.depth > 1;

    			}

    			this.dispose();

    		}

    		this.viewport.set( 0, 0, width, height );
    		this.scissor.set( 0, 0, width, height );

    	}

    	/**
    	 * Returns a new render target with copied values from this instance.
    	 *
    	 * @return {RenderTarget} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the settings of the given render target. This is a structural copy so
    	 * no resources are shared between render targets after the copy. That includes
    	 * all MRT textures and the depth texture.
    	 *
    	 * @param {RenderTarget} source - The render target to copy.
    	 * @return {RenderTarget} A reference to this instance.
    	 */
    	copy( source ) {

    		this.width = source.width;
    		this.height = source.height;
    		this.depth = source.depth;

    		this.scissor.copy( source.scissor );
    		this.scissorTest = source.scissorTest;

    		this.viewport.copy( source.viewport );

    		this.textures.length = 0;

    		for ( let i = 0, il = source.textures.length; i < il; i ++ ) {

    			this.textures[ i ] = source.textures[ i ].clone();
    			this.textures[ i ].isRenderTargetTexture = true;
    			this.textures[ i ].renderTarget = this;

    			// ensure image object is not shared, see #20328

    			const image = Object.assign( {}, source.textures[ i ].image );
    			this.textures[ i ].source = new Source( image );

    		}

    		this.depthBuffer = source.depthBuffer;
    		this.stencilBuffer = source.stencilBuffer;

    		this.resolveDepthBuffer = source.resolveDepthBuffer;
    		this.resolveStencilBuffer = source.resolveStencilBuffer;

    		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

    		this.samples = source.samples;

    		return this;

    	}

    	/**
    	 * Frees the GPU-related resources allocated by this instance. Call this
    	 * method whenever this instance is no longer used in your app.
    	 *
    	 * @fires RenderTarget#dispose
    	 */
    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    }

    /**
     * A render target used in context of {@link WebGLRenderer}.
     *
     * @augments RenderTarget
     */
    class WebGLRenderTarget extends RenderTarget {

    	/**
    	 * Constructs a new 3D render target.
    	 *
    	 * @param {number} [width=1] - The width of the render target.
    	 * @param {number} [height=1] - The height of the render target.
    	 * @param {RenderTarget~Options} [options] - The configuration object.
    	 */
    	constructor( width = 1, height = 1, options = {} ) {

    		super( width, height, options );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isWebGLRenderTarget = true;

    	}

    }

    /**
     * Creates an array of textures directly from raw buffer data.
     *
     * @augments Texture
     */
    class DataArrayTexture extends Texture {

    	/**
    	 * Constructs a new data array texture.
    	 *
    	 * @param {?TypedArray} [data=null] - The buffer data.
    	 * @param {number} [width=1] - The width of the texture.
    	 * @param {number} [height=1] - The height of the texture.
    	 * @param {number} [depth=1] - The depth of the texture.
    	 */
    	constructor( data = null, width = 1, height = 1, depth = 1 ) {

    		super( null );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isDataArrayTexture = true;

    		/**
    		 * The image definition of a data texture.
    		 *
    		 * @type {{data:TypedArray,width:number,height:number,depth:number}}
    		 */
    		this.image = { data, width, height, depth };

    		/**
    		 * How the texture is sampled when a texel covers more than one pixel.
    		 *
    		 * Overwritten and set to `NearestFilter` by default.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default NearestFilter
    		 */
    		this.magFilter = NearestFilter;

    		/**
    		 * How the texture is sampled when a texel covers less than one pixel.
    		 *
    		 * Overwritten and set to `NearestFilter` by default.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default NearestFilter
    		 */
    		this.minFilter = NearestFilter;

    		/**
    		 * This defines how the texture is wrapped in the depth and corresponds to
    		 * *W* in UVW mapping.
    		 *
    		 * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}
    		 * @default ClampToEdgeWrapping
    		 */
    		this.wrapR = ClampToEdgeWrapping;

    		/**
    		 * Whether to generate mipmaps (if possible) for a texture.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.generateMipmaps = false;

    		/**
    		 * If set to `true`, the texture is flipped along the vertical axis when
    		 * uploaded to the GPU.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.flipY = false;

    		/**
    		 * Specifies the alignment requirements for the start of each pixel row in memory.
    		 *
    		 * Overwritten and set to `1` by default.
    		 *
    		 * @type {boolean}
    		 * @default 1
    		 */
    		this.unpackAlignment = 1;

    		/**
    		 * A set of all layers which need to be updated in the texture.
    		 *
    		 * @type {Set<number>}
    		 */
    		this.layerUpdates = new Set();

    	}

    	/**
    	 * Describes that a specific layer of the texture needs to be updated.
    	 * Normally when {@link Texture#needsUpdate} is set to `true`, the
    	 * entire data texture array is sent to the GPU. Marking specific
    	 * layers will only transmit subsets of all mipmaps associated with a
    	 * specific depth in the array which is often much more performant.
    	 *
    	 * @param {number} layerIndex - The layer index that should be updated.
    	 */
    	addLayerUpdate( layerIndex ) {

    		this.layerUpdates.add( layerIndex );

    	}

    	/**
    	 * Resets the layer updates registry.
    	 */
    	clearLayerUpdates() {

    		this.layerUpdates.clear();

    	}

    }

    /**
     * Creates a three-dimensional texture from raw data, with parameters to
     * divide it into width, height, and depth.
     *
     * @augments Texture
     */
    class Data3DTexture extends Texture {

    	/**
    	 * Constructs a new data array texture.
    	 *
    	 * @param {?TypedArray} [data=null] - The buffer data.
    	 * @param {number} [width=1] - The width of the texture.
    	 * @param {number} [height=1] - The height of the texture.
    	 * @param {number} [depth=1] - The depth of the texture.
    	 */
    	constructor( data = null, width = 1, height = 1, depth = 1 ) {

    		// We're going to add .setXXX() methods for setting properties later.
    		// Users can still set in Data3DTexture directly.
    		//
    		//	const texture = new THREE.Data3DTexture( data, width, height, depth );
    		// 	texture.anisotropy = 16;
    		//
    		// See #14839

    		super( null );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isData3DTexture = true;

    		/**
    		 * The image definition of a data texture.
    		 *
    		 * @type {{data:TypedArray,width:number,height:number,depth:number}}
    		 */
    		this.image = { data, width, height, depth };

    		/**
    		 * How the texture is sampled when a texel covers more than one pixel.
    		 *
    		 * Overwritten and set to `NearestFilter` by default.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default NearestFilter
    		 */
    		this.magFilter = NearestFilter;

    		/**
    		 * How the texture is sampled when a texel covers less than one pixel.
    		 *
    		 * Overwritten and set to `NearestFilter` by default.
    		 *
    		 * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}
    		 * @default NearestFilter
    		 */
    		this.minFilter = NearestFilter;

    		/**
    		 * This defines how the texture is wrapped in the depth and corresponds to
    		 * *W* in UVW mapping.
    		 *
    		 * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}
    		 * @default ClampToEdgeWrapping
    		 */
    		this.wrapR = ClampToEdgeWrapping;

    		/**
    		 * Whether to generate mipmaps (if possible) for a texture.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.generateMipmaps = false;

    		/**
    		 * If set to `true`, the texture is flipped along the vertical axis when
    		 * uploaded to the GPU.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.flipY = false;

    		/**
    		 * Specifies the alignment requirements for the start of each pixel row in memory.
    		 *
    		 * Overwritten and set to `1` by default.
    		 *
    		 * @type {boolean}
    		 * @default 1
    		 */
    		this.unpackAlignment = 1;

    	}

    }

    /**
     * Represents an axis-aligned bounding box (AABB) in 3D space.
     */
    class Box3 {

    	/**
    	 * Constructs a new bounding box.
    	 *
    	 * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
    	 * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
    	 */
    	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isBox3 = true;

    		/**
    		 * The lower boundary of the box.
    		 *
    		 * @type {Vector3}
    		 */
    		this.min = min;

    		/**
    		 * The upper boundary of the box.
    		 *
    		 * @type {Vector3}
    		 */
    		this.max = max;

    	}

    	/**
    	 * Sets the lower and upper boundaries of this box.
    	 * Please note that this method only copies the values from the given objects.
    	 *
    	 * @param {Vector3} min - The lower boundary of the box.
    	 * @param {Vector3} max - The upper boundary of the box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	set( min, max ) {

    		this.min.copy( min );
    		this.max.copy( max );

    		return this;

    	}

    	/**
    	 * Sets the upper and lower bounds of this box so it encloses the position data
    	 * in the given array.
    	 *
    	 * @param {Array<number>} array - An array holding 3D position data.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	setFromArray( array ) {

    		this.makeEmpty();

    		for ( let i = 0, il = array.length; i < il; i += 3 ) {

    			this.expandByPoint( _vector$b.fromArray( array, i ) );

    		}

    		return this;

    	}

    	/**
    	 * Sets the upper and lower bounds of this box so it encloses the position data
    	 * in the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	setFromBufferAttribute( attribute ) {

    		this.makeEmpty();

    		for ( let i = 0, il = attribute.count; i < il; i ++ ) {

    			this.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );

    		}

    		return this;

    	}

    	/**
    	 * Sets the upper and lower bounds of this box so it encloses the position data
    	 * in the given array.
    	 *
    	 * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	setFromPoints( points ) {

    		this.makeEmpty();

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			this.expandByPoint( points[ i ] );

    		}

    		return this;

    	}

    	/**
    	 * Centers this box on the given center vector and sets this box's width, height and
    	 * depth to the given size values.
    	 *
    	 * @param {Vector3} center - The center of the box.
    	 * @param {Vector3} size - The x, y and z dimensions of the box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	setFromCenterAndSize( center, size ) {

    		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );

    		this.min.copy( center ).sub( halfSize );
    		this.max.copy( center ).add( halfSize );

    		return this;

    	}

    	/**
    	 * Computes the world-axis-aligned bounding box for the given 3D object
    	 * (including its children), accounting for the object's, and children's,
    	 * world transforms. The function may result in a larger box than strictly necessary.
    	 *
    	 * @param {Object3D} object - The 3D object to compute the bounding box for.
    	 * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
    	 * world-axis-aligned bounding box at the expense of more computation.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	setFromObject( object, precise = false ) {

    		this.makeEmpty();

    		return this.expandByObject( object, precise );

    	}

    	/**
    	 * Returns a new box with copied values from this instance.
    	 *
    	 * @return {Box3} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the values of the given box to this instance.
    	 *
    	 * @param {Box3} box - The box to copy.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	copy( box ) {

    		this.min.copy( box.min );
    		this.max.copy( box.max );

    		return this;

    	}

    	/**
    	 * Makes this box empty which means in encloses a zero space in 3D.
    	 *
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	makeEmpty() {

    		this.min.x = this.min.y = this.min.z = + Infinity;
    		this.max.x = this.max.y = this.max.z = - Infinity;

    		return this;

    	}

    	/**
    	 * Returns true if this box includes zero points within its bounds.
    	 * Note that a box with equal lower and upper bounds still includes one
    	 * point, the one both bounds share.
    	 *
    	 * @return {boolean} Whether this box is empty or not.
    	 */
    	isEmpty() {

    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

    	}

    	/**
    	 * Returns the center point of this box.
    	 *
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The center point.
    	 */
    	getCenter( target ) {

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

    	}

    	/**
    	 * Returns the dimensions of this box.
    	 *
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The size.
    	 */
    	getSize( target ) {

    		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

    	}

    	/**
    	 * Expands the boundaries of this box to include the given point.
    	 *
    	 * @param {Vector3} point - The point that should be included by the bounding box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	expandByPoint( point ) {

    		this.min.min( point );
    		this.max.max( point );

    		return this;

    	}

    	/**
    	 * Expands this box equilaterally by the given vector. The width of this
    	 * box will be expanded by the x component of the vector in both
    	 * directions. The height of this box will be expanded by the y component of
    	 * the vector in both directions. The depth of this box will be
    	 * expanded by the z component of the vector in both directions.
    	 *
    	 * @param {Vector3} vector - The vector that should expand the bounding box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	expandByVector( vector ) {

    		this.min.sub( vector );
    		this.max.add( vector );

    		return this;

    	}

    	/**
    	 * Expands each dimension of the box by the given scalar. If negative, the
    	 * dimensions of the box will be contracted.
    	 *
    	 * @param {number} scalar - The scalar value that should expand the bounding box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	expandByScalar( scalar ) {

    		this.min.addScalar( - scalar );
    		this.max.addScalar( scalar );

    		return this;

    	}

    	/**
    	 * Expands the boundaries of this box to include the given 3D object and
    	 * its children, accounting for the object's, and children's, world
    	 * transforms. The function may result in a larger box than strictly
    	 * necessary (unless the precise parameter is set to true).
    	 *
    	 * @param {Object3D} object - The 3D object that should expand the bounding box.
    	 * @param {boolean} precise - If set to `true`, the method expands the bounding box
    	 * as little as necessary at the expense of more computation.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	expandByObject( object, precise = false ) {

    		// Computes the world-axis-aligned bounding box of an object (including its children),
    		// accounting for both the object's, and children's, world transforms

    		object.updateWorldMatrix( false, false );

    		const geometry = object.geometry;

    		if ( geometry !== undefined ) {

    			const positionAttribute = geometry.getAttribute( 'position' );

    			// precise AABB computation based on vertex data requires at least a position attribute.
    			// instancing isn't supported so far and uses the normal (conservative) code path.

    			if ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {

    				for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

    					if ( object.isMesh === true ) {

    						object.getVertexPosition( i, _vector$b );

    					} else {

    						_vector$b.fromBufferAttribute( positionAttribute, i );

    					}

    					_vector$b.applyMatrix4( object.matrixWorld );
    					this.expandByPoint( _vector$b );

    				}

    			} else {

    				if ( object.boundingBox !== undefined ) {

    					// object-level bounding box

    					if ( object.boundingBox === null ) {

    						object.computeBoundingBox();

    					}

    					_box$4.copy( object.boundingBox );


    				} else {

    					// geometry-level bounding box

    					if ( geometry.boundingBox === null ) {

    						geometry.computeBoundingBox();

    					}

    					_box$4.copy( geometry.boundingBox );

    				}

    				_box$4.applyMatrix4( object.matrixWorld );

    				this.union( _box$4 );

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			this.expandByObject( children[ i ], precise );

    		}

    		return this;

    	}

    	/**
    	 * Returns `true` if the given point lies within or on the boundaries of this box.
    	 *
    	 * @param {Vector3} point - The point to test.
    	 * @return {boolean} Whether the bounding box contains the given point or not.
    	 */
    	containsPoint( point ) {

    		return point.x >= this.min.x && point.x <= this.max.x &&
    			point.y >= this.min.y && point.y <= this.max.y &&
    			point.z >= this.min.z && point.z <= this.max.z;

    	}

    	/**
    	 * Returns `true` if this bounding box includes the entirety of the given bounding box.
    	 * If this box and the given one are identical, this function also returns `true`.
    	 *
    	 * @param {Box3} box - The bounding box to test.
    	 * @return {boolean} Whether the bounding box contains the given bounding box or not.
    	 */
    	containsBox( box ) {

    		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
    			this.min.y <= box.min.y && box.max.y <= this.max.y &&
    			this.min.z <= box.min.z && box.max.z <= this.max.z;

    	}

    	/**
    	 * Returns a point as a proportion of this box's width, height and depth.
    	 *
    	 * @param {Vector3} point - A point in 3D space.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} A point as a proportion of this box's width, height and depth.
    	 */
    	getParameter( point, target ) {

    		// This can potentially have a divide by zero if the box
    		// has a size dimension of 0.

    		return target.set(
    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
    			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
    			( point.z - this.min.z ) / ( this.max.z - this.min.z )
    		);

    	}

    	/**
    	 * Returns `true` if the given bounding box intersects with this bounding box.
    	 *
    	 * @param {Box3} box - The bounding box to test.
    	 * @return {boolean} Whether the given bounding box intersects with this bounding box.
    	 */
    	intersectsBox( box ) {

    		// using 6 splitting planes to rule out intersections.
    		return box.max.x >= this.min.x && box.min.x <= this.max.x &&
    			box.max.y >= this.min.y && box.min.y <= this.max.y &&
    			box.max.z >= this.min.z && box.min.z <= this.max.z;

    	}

    	/**
    	 * Returns `true` if the given bounding sphere intersects with this bounding box.
    	 *
    	 * @param {Sphere} sphere - The bounding sphere to test.
    	 * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
    	 */
    	intersectsSphere( sphere ) {

    		// Find the point on the AABB closest to the sphere center.
    		this.clampPoint( sphere.center, _vector$b );

    		// If that point is inside the sphere, the AABB and sphere intersect.
    		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

    	}

    	/**
    	 * Returns `true` if the given plane intersects with this bounding box.
    	 *
    	 * @param {Plane} plane - The plane to test.
    	 * @return {boolean} Whether the given plane intersects with this bounding box.
    	 */
    	intersectsPlane( plane ) {

    		// We compute the minimum and maximum dot product values. If those values
    		// are on the same side (back or front) of the plane, then there is no intersection.

    		let min, max;

    		if ( plane.normal.x > 0 ) {

    			min = plane.normal.x * this.min.x;
    			max = plane.normal.x * this.max.x;

    		} else {

    			min = plane.normal.x * this.max.x;
    			max = plane.normal.x * this.min.x;

    		}

    		if ( plane.normal.y > 0 ) {

    			min += plane.normal.y * this.min.y;
    			max += plane.normal.y * this.max.y;

    		} else {

    			min += plane.normal.y * this.max.y;
    			max += plane.normal.y * this.min.y;

    		}

    		if ( plane.normal.z > 0 ) {

    			min += plane.normal.z * this.min.z;
    			max += plane.normal.z * this.max.z;

    		} else {

    			min += plane.normal.z * this.max.z;
    			max += plane.normal.z * this.min.z;

    		}

    		return ( min <= - plane.constant && max >= - plane.constant );

    	}

    	/**
    	 * Returns `true` if the given triangle intersects with this bounding box.
    	 *
    	 * @param {Triangle} triangle - The triangle to test.
    	 * @return {boolean} Whether the given triangle intersects with this bounding box.
    	 */
    	intersectsTriangle( triangle ) {

    		if ( this.isEmpty() ) {

    			return false;

    		}

    		// compute box center and extents
    		this.getCenter( _center );
    		_extents.subVectors( this.max, _center );

    		// translate triangle to aabb origin
    		_v0$2.subVectors( triangle.a, _center );
    		_v1$7.subVectors( triangle.b, _center );
    		_v2$4.subVectors( triangle.c, _center );

    		// compute edge vectors for triangle
    		_f0.subVectors( _v1$7, _v0$2 );
    		_f1.subVectors( _v2$4, _v1$7 );
    		_f2.subVectors( _v0$2, _v2$4 );

    		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
    		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
    		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
    		let axes = [
    			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
    			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
    			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
    		];
    		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

    			return false;

    		}

    		// test 3 face normals from the aabb
    		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
    		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

    			return false;

    		}

    		// finally testing the face normal of the triangle
    		// use already existing triangle edge vectors here
    		_triangleNormal.crossVectors( _f0, _f1 );
    		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

    		return satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );

    	}

    	/**
    	 * Clamps the given point within the bounds of this box.
    	 *
    	 * @param {Vector3} point - The point to clamp.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The clamped point.
    	 */
    	clampPoint( point, target ) {

    		return target.copy( point ).clamp( this.min, this.max );

    	}

    	/**
    	 * Returns the euclidean distance from any edge of this box to the specified point. If
    	 * the given point lies inside of this box, the distance will be `0`.
    	 *
    	 * @param {Vector3} point - The point to compute the distance to.
    	 * @return {number} The euclidean distance.
    	 */
    	distanceToPoint( point ) {

    		return this.clampPoint( point, _vector$b ).distanceTo( point );

    	}

    	/**
    	 * Returns a bounding sphere that encloses this bounding box.
    	 *
    	 * @param {Sphere} target - The target sphere that is used to store the method's result.
    	 * @return {Sphere} The bounding sphere that encloses this bounding box.
    	 */
    	getBoundingSphere( target ) {

    		if ( this.isEmpty() ) {

    			target.makeEmpty();

    		} else {

    			this.getCenter( target.center );

    			target.radius = this.getSize( _vector$b ).length() * 0.5;

    		}

    		return target;

    	}

    	/**
    	 * Computes the intersection of this bounding box and the given one, setting the upper
    	 * bound of this box to the lesser of the two boxes' upper bounds and the
    	 * lower bound of this box to the greater of the two boxes' lower bounds. If
    	 * there's no overlap, makes this box empty.
    	 *
    	 * @param {Box3} box - The bounding box to intersect with.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	intersect( box ) {

    		this.min.max( box.min );
    		this.max.min( box.max );

    		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
    		if ( this.isEmpty() ) this.makeEmpty();

    		return this;

    	}

    	/**
    	 * Computes the union of this box and another and the given one, setting the upper
    	 * bound of this box to the greater of the two boxes' upper bounds and the
    	 * lower bound of this box to the lesser of the two boxes' lower bounds.
    	 *
    	 * @param {Box3} box - The bounding box that will be unioned with this instance.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	union( box ) {

    		this.min.min( box.min );
    		this.max.max( box.max );

    		return this;

    	}

    	/**
    	 * Transforms this bounding box by the given 4x4 transformation matrix.
    	 *
    	 * @param {Matrix4} matrix - The transformation matrix.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	applyMatrix4( matrix ) {

    		// transform of empty box is an empty box.
    		if ( this.isEmpty() ) return this;

    		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
    		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
    		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
    		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
    		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
    		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
    		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
    		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
    		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

    		this.setFromPoints( _points );

    		return this;

    	}

    	/**
    	 * Adds the given offset to both the upper and lower bounds of this bounding box,
    	 * effectively moving it in 3D space.
    	 *
    	 * @param {Vector3} offset - The offset that should be used to translate the bounding box.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	translate( offset ) {

    		this.min.add( offset );
    		this.max.add( offset );

    		return this;

    	}

    	/**
    	 * Returns `true` if this bounding box is equal with the given one.
    	 *
    	 * @param {Box3} box - The box to test for equality.
    	 * @return {boolean} Whether this bounding box is equal with the given one.
    	 */
    	equals( box ) {

    		return box.min.equals( this.min ) && box.max.equals( this.max );

    	}

    	/**
    	 * Returns a serialized structure of the bounding box.
    	 *
    	 * @return {Object} Serialized structure with fields representing the object state.
    	 */
    	toJSON() {

    		return {
    			min: this.min.toArray(),
    			max: this.max.toArray()
    		};

    	}

    	/**
    	 * Returns a serialized structure of the bounding box.
    	 *
    	 * @param {Object} json - The serialized json to set the box from.
    	 * @return {Box3} A reference to this bounding box.
    	 */
    	fromJSON( json ) {

    		this.min.fromArray( json.min );
    		this.max.fromArray( json.max );
    		return this;

    	}

    }

    const _points = [
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3(),
    	/*@__PURE__*/ new Vector3()
    ];

    const _vector$b = /*@__PURE__*/ new Vector3();

    const _box$4 = /*@__PURE__*/ new Box3();

    // triangle centered vertices

    const _v0$2 = /*@__PURE__*/ new Vector3();
    const _v1$7 = /*@__PURE__*/ new Vector3();
    const _v2$4 = /*@__PURE__*/ new Vector3();

    // triangle edge vectors

    const _f0 = /*@__PURE__*/ new Vector3();
    const _f1 = /*@__PURE__*/ new Vector3();
    const _f2 = /*@__PURE__*/ new Vector3();

    const _center = /*@__PURE__*/ new Vector3();
    const _extents = /*@__PURE__*/ new Vector3();
    const _triangleNormal = /*@__PURE__*/ new Vector3();
    const _testAxis = /*@__PURE__*/ new Vector3();

    function satForAxes( axes, v0, v1, v2, extents ) {

    	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

    		_testAxis.fromArray( axes, i );
    		// project the aabb onto the separating axis
    		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
    		// project all 3 vertices of the triangle onto the separating axis
    		const p0 = v0.dot( _testAxis );
    		const p1 = v1.dot( _testAxis );
    		const p2 = v2.dot( _testAxis );
    		// actual test, basically see if either of the most extreme of the triangle points intersects r
    		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

    			// points of the projected triangle are outside the projected half-length of the aabb
    			// the axis is separating and we can exit
    			return false;

    		}

    	}

    	return true;

    }

    const _box$3 = /*@__PURE__*/ new Box3();
    const _v1$6 = /*@__PURE__*/ new Vector3();
    const _v2$3 = /*@__PURE__*/ new Vector3();

    /**
     * An analytical 3D sphere defined by a center and radius. This class is mainly
     * used as a Bounding Sphere for 3D objects.
     */
    class Sphere {

    	/**
    	 * Constructs a new sphere.
    	 *
    	 * @param {Vector3} [center=(0,0,0)] - The center of the sphere
    	 * @param {number} [radius=-1] - The radius of the sphere.
    	 */
    	constructor( center = new Vector3(), radius = -1 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isSphere = true;

    		/**
    		 * The center of the sphere
    		 *
    		 * @type {Vector3}
    		 */
    		this.center = center;

    		/**
    		 * The radius of the sphere.
    		 *
    		 * @type {number}
    		 */
    		this.radius = radius;

    	}

    	/**
    	 * Sets the sphere's components by copying the given values.
    	 *
    	 * @param {Vector3} center - The center.
    	 * @param {number} radius - The radius.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	set( center, radius ) {

    		this.center.copy( center );
    		this.radius = radius;

    		return this;

    	}

    	/**
    	 * Computes the minimum bounding sphere for list of points.
    	 * If the optional center point is given, it is used as the sphere's
    	 * center. Otherwise, the center of the axis-aligned bounding box
    	 * encompassing the points is calculated.
    	 *
    	 * @param {Array<Vector3>} points - A list of points in 3D space.
    	 * @param {Vector3} [optionalCenter] - The center of the sphere.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	setFromPoints( points, optionalCenter ) {

    		const center = this.center;

    		if ( optionalCenter !== undefined ) {

    			center.copy( optionalCenter );

    		} else {

    			_box$3.setFromPoints( points ).getCenter( center );

    		}

    		let maxRadiusSq = 0;

    		for ( let i = 0, il = points.length; i < il; i ++ ) {

    			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

    		}

    		this.radius = Math.sqrt( maxRadiusSq );

    		return this;

    	}

    	/**
    	 * Copies the values of the given sphere to this instance.
    	 *
    	 * @param {Sphere} sphere - The sphere to copy.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	copy( sphere ) {

    		this.center.copy( sphere.center );
    		this.radius = sphere.radius;

    		return this;

    	}

    	/**
    	 * Returns `true` if the sphere is empty (the radius set to a negative number).
    	 *
    	 * Spheres with a radius of `0` contain only their center point and are not
    	 * considered to be empty.
    	 *
    	 * @return {boolean} Whether this sphere is empty or not.
    	 */
    	isEmpty() {

    		return ( this.radius < 0 );

    	}

    	/**
    	 * Makes this sphere empty which means in encloses a zero space in 3D.
    	 *
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	makeEmpty() {

    		this.center.set( 0, 0, 0 );
    		this.radius = -1;

    		return this;

    	}

    	/**
    	 * Returns `true` if this sphere contains the given point inclusive of
    	 * the surface of the sphere.
    	 *
    	 * @param {Vector3} point - The point to check.
    	 * @return {boolean} Whether this sphere contains the given point or not.
    	 */
    	containsPoint( point ) {

    		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

    	}

    	/**
    	 * Returns the closest distance from the boundary of the sphere to the
    	 * given point. If the sphere contains the point, the distance will
    	 * be negative.
    	 *
    	 * @param {Vector3} point - The point to compute the distance to.
    	 * @return {number} The distance to the point.
    	 */
    	distanceToPoint( point ) {

    		return ( point.distanceTo( this.center ) - this.radius );

    	}

    	/**
    	 * Returns `true` if this sphere intersects with the given one.
    	 *
    	 * @param {Sphere} sphere - The sphere to test.
    	 * @return {boolean} Whether this sphere intersects with the given one or not.
    	 */
    	intersectsSphere( sphere ) {

    		const radiusSum = this.radius + sphere.radius;

    		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

    	}

    	/**
    	 * Returns `true` if this sphere intersects with the given box.
    	 *
    	 * @param {Box3} box - The box to test.
    	 * @return {boolean} Whether this sphere intersects with the given box or not.
    	 */
    	intersectsBox( box ) {

    		return box.intersectsSphere( this );

    	}

    	/**
    	 * Returns `true` if this sphere intersects with the given plane.
    	 *
    	 * @param {Plane} plane - The plane to test.
    	 * @return {boolean} Whether this sphere intersects with the given plane or not.
    	 */
    	intersectsPlane( plane ) {

    		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

    	}

    	/**
    	 * Clamps a point within the sphere. If the point is outside the sphere, it
    	 * will clamp it to the closest point on the edge of the sphere. Points
    	 * already inside the sphere will not be affected.
    	 *
    	 * @param {Vector3} point - The plane to clamp.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The clamped point.
    	 */
    	clampPoint( point, target ) {

    		const deltaLengthSq = this.center.distanceToSquared( point );

    		target.copy( point );

    		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

    			target.sub( this.center ).normalize();
    			target.multiplyScalar( this.radius ).add( this.center );

    		}

    		return target;

    	}

    	/**
    	 * Returns a bounding box that encloses this sphere.
    	 *
    	 * @param {Box3} target - The target box that is used to store the method's result.
    	 * @return {Box3} The bounding box that encloses this sphere.
    	 */
    	getBoundingBox( target ) {

    		if ( this.isEmpty() ) {

    			// Empty sphere produces empty bounding box
    			target.makeEmpty();
    			return target;

    		}

    		target.set( this.center, this.center );
    		target.expandByScalar( this.radius );

    		return target;

    	}

    	/**
    	 * Transforms this sphere with the given 4x4 transformation matrix.
    	 *
    	 * @param {Matrix4} matrix - The transformation matrix.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	applyMatrix4( matrix ) {

    		this.center.applyMatrix4( matrix );
    		this.radius = this.radius * matrix.getMaxScaleOnAxis();

    		return this;

    	}

    	/**
    	 * Translates the sphere's center by the given offset.
    	 *
    	 * @param {Vector3} offset - The offset.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	translate( offset ) {

    		this.center.add( offset );

    		return this;

    	}

    	/**
    	 * Expands the boundaries of this sphere to include the given point.
    	 *
    	 * @param {Vector3} point - The point to include.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	expandByPoint( point ) {

    		if ( this.isEmpty() ) {

    			this.center.copy( point );

    			this.radius = 0;

    			return this;

    		}

    		_v1$6.subVectors( point, this.center );

    		const lengthSq = _v1$6.lengthSq();

    		if ( lengthSq > ( this.radius * this.radius ) ) {

    			// calculate the minimal sphere

    			const length = Math.sqrt( lengthSq );

    			const delta = ( length - this.radius ) * 0.5;

    			this.center.addScaledVector( _v1$6, delta / length );

    			this.radius += delta;

    		}

    		return this;

    	}

    	/**
    	 * Expands this sphere to enclose both the original sphere and the given sphere.
    	 *
    	 * @param {Sphere} sphere - The sphere to include.
    	 * @return {Sphere} A reference to this sphere.
    	 */
    	union( sphere ) {

    		if ( sphere.isEmpty() ) {

    			return this;

    		}

    		if ( this.isEmpty() ) {

    			this.copy( sphere );

    			return this;

    		}

    		if ( this.center.equals( sphere.center ) === true ) {

    			 this.radius = Math.max( this.radius, sphere.radius );

    		} else {

    			_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );

    			this.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );

    			this.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );

    		}

    		return this;

    	}

    	/**
    	 * Returns `true` if this sphere is equal with the given one.
    	 *
    	 * @param {Sphere} sphere - The sphere to test for equality.
    	 * @return {boolean} Whether this bounding sphere is equal with the given one.
    	 */
    	equals( sphere ) {

    		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

    	}

    	/**
    	 * Returns a new sphere with copied values from this instance.
    	 *
    	 * @return {Sphere} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Returns a serialized structure of the bounding sphere.
    	 *
    	 * @return {Object} Serialized structure with fields representing the object state.
    	 */
    	toJSON() {

    		return {
    			radius: this.radius,
    			center: this.center.toArray()
    		};

    	}

    	/**
    	 * Returns a serialized structure of the bounding sphere.
    	 *
    	 * @param {Object} json - The serialized json to set the sphere from.
    	 * @return {Box3} A reference to this bounding sphere.
    	 */
    	fromJSON( json ) {

    		this.radius = json.radius;
    		this.center.fromArray( json.center );
    		return this;

    	}

    }

    const _vector$a = /*@__PURE__*/ new Vector3();
    const _segCenter = /*@__PURE__*/ new Vector3();
    const _segDir = /*@__PURE__*/ new Vector3();
    const _diff = /*@__PURE__*/ new Vector3();

    const _edge1 = /*@__PURE__*/ new Vector3();
    const _edge2 = /*@__PURE__*/ new Vector3();
    const _normal$1 = /*@__PURE__*/ new Vector3();

    /**
     * A ray that emits from an origin in a certain direction. The class is used by
     * {@link Raycaster} to assist with raycasting. Raycasting is used for
     * mouse picking (working out what objects in the 3D space the mouse is over)
     * amongst other things.
     */
    class Ray {

    	/**
    	 * Constructs a new ray.
    	 *
    	 * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
    	 * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
    	 */
    	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, -1 ) ) {

    		/**
    		 * The origin of the ray.
    		 *
    		 * @type {Vector3}
    		 */
    		this.origin = origin;

    		/**
    		 * The (normalized) direction of the ray.
    		 *
    		 * @type {Vector3}
    		 */
    		this.direction = direction;

    	}

    	/**
    	 * Sets the ray's components by copying the given values.
    	 *
    	 * @param {Vector3} origin - The origin.
    	 * @param {Vector3} direction - The direction.
    	 * @return {Ray} A reference to this ray.
    	 */
    	set( origin, direction ) {

    		this.origin.copy( origin );
    		this.direction.copy( direction );

    		return this;

    	}

    	/**
    	 * Copies the values of the given ray to this instance.
    	 *
    	 * @param {Ray} ray - The ray to copy.
    	 * @return {Ray} A reference to this ray.
    	 */
    	copy( ray ) {

    		this.origin.copy( ray.origin );
    		this.direction.copy( ray.direction );

    		return this;

    	}

    	/**
    	 * Returns a vector that is located at a given distance along this ray.
    	 *
    	 * @param {number} t - The distance along the ray to retrieve a position for.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} A position on the ray.
    	 */
    	at( t, target ) {

    		return target.copy( this.origin ).addScaledVector( this.direction, t );

    	}

    	/**
    	 * Adjusts the direction of the ray to point at the given vector in world space.
    	 *
    	 * @param {Vector3} v - The target position.
    	 * @return {Ray} A reference to this ray.
    	 */
    	lookAt( v ) {

    		this.direction.copy( v ).sub( this.origin ).normalize();

    		return this;

    	}

    	/**
    	 * Shift the origin of this ray along its direction by the given distance.
    	 *
    	 * @param {number} t - The distance along the ray to interpolate.
    	 * @return {Ray} A reference to this ray.
    	 */
    	recast( t ) {

    		this.origin.copy( this.at( t, _vector$a ) );

    		return this;

    	}

    	/**
    	 * Returns the point along this ray that is closest to the given point.
    	 *
    	 * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The closest point on this ray.
    	 */
    	closestPointToPoint( point, target ) {

    		target.subVectors( point, this.origin );

    		const directionDistance = target.dot( this.direction );

    		if ( directionDistance < 0 ) {

    			return target.copy( this.origin );

    		}

    		return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

    	}

    	/**
    	 * Returns the distance of the closest approach between this ray and the given point.
    	 *
    	 * @param {Vector3} point - A point in 3D space to compute the distance to.
    	 * @return {number} The distance.
    	 */
    	distanceToPoint( point ) {

    		return Math.sqrt( this.distanceSqToPoint( point ) );

    	}

    	/**
    	 * Returns the squared distance of the closest approach between this ray and the given point.
    	 *
    	 * @param {Vector3} point - A point in 3D space to compute the distance to.
    	 * @return {number} The squared distance.
    	 */
    	distanceSqToPoint( point ) {

    		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );

    		// point behind the ray

    		if ( directionDistance < 0 ) {

    			return this.origin.distanceToSquared( point );

    		}

    		_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );

    		return _vector$a.distanceToSquared( point );

    	}

    	/**
    	 * Returns the squared distance between this ray and the given line segment.
    	 *
    	 * @param {Vector3} v0 - The start point of the line segment.
    	 * @param {Vector3} v1 - The end point of the line segment.
    	 * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
    	 * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
    	 * @return {number} The squared distance.
    	 */
    	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

    		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
    		// It returns the min distance between the ray and the segment
    		// defined by v0 and v1
    		// It can also set two optional targets :
    		// - The closest point on the ray
    		// - The closest point on the segment

    		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
    		_segDir.copy( v1 ).sub( v0 ).normalize();
    		_diff.copy( this.origin ).sub( _segCenter );

    		const segExtent = v0.distanceTo( v1 ) * 0.5;
    		const a01 = - this.direction.dot( _segDir );
    		const b0 = _diff.dot( this.direction );
    		const b1 = - _diff.dot( _segDir );
    		const c = _diff.lengthSq();
    		const det = Math.abs( 1 - a01 * a01 );
    		let s0, s1, sqrDist, extDet;

    		if ( det > 0 ) {

    			// The ray and segment are not parallel.

    			s0 = a01 * b1 - b0;
    			s1 = a01 * b0 - b1;
    			extDet = segExtent * det;

    			if ( s0 >= 0 ) {

    				if ( s1 >= - extDet ) {

    					if ( s1 <= extDet ) {

    						// region 0
    						// Minimum at interior points of ray and segment.

    						const invDet = 1 / det;
    						s0 *= invDet;
    						s1 *= invDet;
    						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

    					} else {

    						// region 1

    						s1 = segExtent;
    						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    					}

    				} else {

    					// region 5

    					s1 = - segExtent;
    					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			} else {

    				if ( s1 <= - extDet ) {

    					// region 4

    					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				} else if ( s1 <= extDet ) {

    					// region 3

    					s0 = 0;
    					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

    				} else {

    					// region 2

    					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
    					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
    					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    				}

    			}

    		} else {

    			// Ray and segment are parallel.

    			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
    			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
    			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    		}

    		if ( optionalPointOnRay ) {

    			optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

    		}

    		if ( optionalPointOnSegment ) {

    			optionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );

    		}

    		return sqrDist;

    	}

    	/**
    	 * Intersects this ray with the given sphere, returning the intersection
    	 * point or `null` if there is no intersection.
    	 *
    	 * @param {Sphere} sphere - The sphere to intersect.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The intersection point.
    	 */
    	intersectSphere( sphere, target ) {

    		_vector$a.subVectors( sphere.center, this.origin );
    		const tca = _vector$a.dot( this.direction );
    		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
    		const radius2 = sphere.radius * sphere.radius;

    		if ( d2 > radius2 ) return null;

    		const thc = Math.sqrt( radius2 - d2 );

    		// t0 = first intersect point - entrance on front of sphere
    		const t0 = tca - thc;

    		// t1 = second intersect point - exit point on back of sphere
    		const t1 = tca + thc;

    		// test to see if t1 is behind the ray - if so, return null
    		if ( t1 < 0 ) return null;

    		// test to see if t0 is behind the ray:
    		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
    		// in order to always return an intersect point that is in front of the ray.
    		if ( t0 < 0 ) return this.at( t1, target );

    		// else t0 is in front of the ray, so return the first collision point scaled by t0
    		return this.at( t0, target );

    	}

    	/**
    	 * Returns `true` if this ray intersects with the given sphere.
    	 *
    	 * @param {Sphere} sphere - The sphere to intersect.
    	 * @return {boolean} Whether this ray intersects with the given sphere or not.
    	 */
    	intersectsSphere( sphere ) {

    		if ( sphere.radius < 0 ) return false; // handle empty spheres, see #31187

    		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

    	}

    	/**
    	 * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
    	 * does not intersect with the plane.
    	 *
    	 * @param {Plane} plane - The plane to compute the distance to.
    	 * @return {?number} Whether this ray intersects with the given sphere or not.
    	 */
    	distanceToPlane( plane ) {

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( plane.distanceToPoint( this.origin ) === 0 ) {

    				return 0;

    			}

    			// Null is preferable to undefined since undefined means.... it is undefined

    			return null;

    		}

    		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

    		// Return if the ray never intersects the plane

    		return t >= 0 ? t : null;

    	}

    	/**
    	 * Intersects this ray with the given plane, returning the intersection
    	 * point or `null` if there is no intersection.
    	 *
    	 * @param {Plane} plane - The plane to intersect.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The intersection point.
    	 */
    	intersectPlane( plane, target ) {

    		const t = this.distanceToPlane( plane );

    		if ( t === null ) {

    			return null;

    		}

    		return this.at( t, target );

    	}

    	/**
    	 * Returns `true` if this ray intersects with the given plane.
    	 *
    	 * @param {Plane} plane - The plane to intersect.
    	 * @return {boolean} Whether this ray intersects with the given plane or not.
    	 */
    	intersectsPlane( plane ) {

    		// check if the ray lies on the plane first

    		const distToPoint = plane.distanceToPoint( this.origin );

    		if ( distToPoint === 0 ) {

    			return true;

    		}

    		const denominator = plane.normal.dot( this.direction );

    		if ( denominator * distToPoint < 0 ) {

    			return true;

    		}

    		// ray origin is behind the plane (and is pointing behind it)

    		return false;

    	}

    	/**
    	 * Intersects this ray with the given bounding box, returning the intersection
    	 * point or `null` if there is no intersection.
    	 *
    	 * @param {Box3} box - The box to intersect.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The intersection point.
    	 */
    	intersectBox( box, target ) {

    		let tmin, tmax, tymin, tymax, tzmin, tzmax;

    		const invdirx = 1 / this.direction.x,
    			invdiry = 1 / this.direction.y,
    			invdirz = 1 / this.direction.z;

    		const origin = this.origin;

    		if ( invdirx >= 0 ) {

    			tmin = ( box.min.x - origin.x ) * invdirx;
    			tmax = ( box.max.x - origin.x ) * invdirx;

    		} else {

    			tmin = ( box.max.x - origin.x ) * invdirx;
    			tmax = ( box.min.x - origin.x ) * invdirx;

    		}

    		if ( invdiry >= 0 ) {

    			tymin = ( box.min.y - origin.y ) * invdiry;
    			tymax = ( box.max.y - origin.y ) * invdiry;

    		} else {

    			tymin = ( box.max.y - origin.y ) * invdiry;
    			tymax = ( box.min.y - origin.y ) * invdiry;

    		}

    		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

    		if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

    		if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

    		if ( invdirz >= 0 ) {

    			tzmin = ( box.min.z - origin.z ) * invdirz;
    			tzmax = ( box.max.z - origin.z ) * invdirz;

    		} else {

    			tzmin = ( box.max.z - origin.z ) * invdirz;
    			tzmax = ( box.min.z - origin.z ) * invdirz;

    		}

    		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

    		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

    		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

    		//return point closest to the ray (positive side)

    		if ( tmax < 0 ) return null;

    		return this.at( tmin >= 0 ? tmin : tmax, target );

    	}

    	/**
    	 * Returns `true` if this ray intersects with the given box.
    	 *
    	 * @param {Box3} box - The box to intersect.
    	 * @return {boolean} Whether this ray intersects with the given box or not.
    	 */
    	intersectsBox( box ) {

    		return this.intersectBox( box, _vector$a ) !== null;

    	}

    	/**
    	 * Intersects this ray with the given triangle, returning the intersection
    	 * point or `null` if there is no intersection.
    	 *
    	 * @param {Vector3} a - The first vertex of the triangle.
    	 * @param {Vector3} b - The second vertex of the triangle.
    	 * @param {Vector3} c - The third vertex of the triangle.
    	 * @param {boolean} backfaceCulling - Whether to use backface culling or not.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The intersection point.
    	 */
    	intersectTriangle( a, b, c, backfaceCulling, target ) {

    		// Compute the offset origin, edges, and normal.

    		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

    		_edge1.subVectors( b, a );
    		_edge2.subVectors( c, a );
    		_normal$1.crossVectors( _edge1, _edge2 );

    		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
    		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
    		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
    		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
    		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
    		let DdN = this.direction.dot( _normal$1 );
    		let sign;

    		if ( DdN > 0 ) {

    			if ( backfaceCulling ) return null;
    			sign = 1;

    		} else if ( DdN < 0 ) {

    			sign = -1;
    			DdN = - DdN;

    		} else {

    			return null;

    		}

    		_diff.subVectors( this.origin, a );
    		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

    		// b1 < 0, no intersection
    		if ( DdQxE2 < 0 ) {

    			return null;

    		}

    		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

    		// b2 < 0, no intersection
    		if ( DdE1xQ < 0 ) {

    			return null;

    		}

    		// b1+b2 > 1, no intersection
    		if ( DdQxE2 + DdE1xQ > DdN ) {

    			return null;

    		}

    		// Line intersects triangle, check if ray does.
    		const QdN = - sign * _diff.dot( _normal$1 );

    		// t < 0, no intersection
    		if ( QdN < 0 ) {

    			return null;

    		}

    		// Ray intersects triangle.
    		return this.at( QdN / DdN, target );

    	}

    	/**
    	 * Transforms this ray with the given 4x4 transformation matrix.
    	 *
    	 * @param {Matrix4} matrix4 - The transformation matrix.
    	 * @return {Ray} A reference to this ray.
    	 */
    	applyMatrix4( matrix4 ) {

    		this.origin.applyMatrix4( matrix4 );
    		this.direction.transformDirection( matrix4 );

    		return this;

    	}

    	/**
    	 * Returns `true` if this ray is equal with the given one.
    	 *
    	 * @param {Ray} ray - The ray to test for equality.
    	 * @return {boolean} Whether this ray is equal with the given one.
    	 */
    	equals( ray ) {

    		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

    	}

    	/**
    	 * Returns a new ray with copied values from this instance.
    	 *
    	 * @return {Ray} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    /**
     * Represents a 4x4 matrix.
     *
     * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.
     * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}
     *
     * This allows a 3D vector representing a point in 3D space to undergo
     * transformations such as translation, rotation, shear, scale, reflection,
     * orthogonal or perspective projection and so on, by being multiplied by the
     * matrix. This is known as `applying` the matrix to the vector.
     *
     * A Note on Row-Major and Column-Major Ordering:
     *
     * The constructor and {@link Matrix3#set} method take arguments in
     * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}
     * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.
     * This means that calling:
     * ```js
     * const m = new THREE.Matrix4();
     * m.set( 11, 12, 13, 14,
     *        21, 22, 23, 24,
     *        31, 32, 33, 34,
     *        41, 42, 43, 44 );
     * ```
     * will result in the elements array containing:
     * ```js
     * m.elements = [ 11, 21, 31, 41,
     *                12, 22, 32, 42,
     *                13, 23, 33, 43,
     *                14, 24, 34, 44 ];
     * ```
     * and internally all calculations are performed using column-major ordering.
     * However, as the actual ordering makes no difference mathematically and
     * most people are used to thinking about matrices in row-major order, the
     * three.js documentation shows matrices in row-major order. Just bear in
     * mind that if you are reading the source code, you'll have to take the
     * transpose of any matrices outlined here to make sense of the calculations.
     */
    class Matrix4 {

    	/**
    	 * Constructs a new 4x4 matrix. The arguments are supposed to be
    	 * in row-major order. If no arguments are provided, the constructor
    	 * initializes the matrix as an identity matrix.
    	 *
    	 * @param {number} [n11] - 1-1 matrix element.
    	 * @param {number} [n12] - 1-2 matrix element.
    	 * @param {number} [n13] - 1-3 matrix element.
    	 * @param {number} [n14] - 1-4 matrix element.
    	 * @param {number} [n21] - 2-1 matrix element.
    	 * @param {number} [n22] - 2-2 matrix element.
    	 * @param {number} [n23] - 2-3 matrix element.
    	 * @param {number} [n24] - 2-4 matrix element.
    	 * @param {number} [n31] - 3-1 matrix element.
    	 * @param {number} [n32] - 3-2 matrix element.
    	 * @param {number} [n33] - 3-3 matrix element.
    	 * @param {number} [n34] - 3-4 matrix element.
    	 * @param {number} [n41] - 4-1 matrix element.
    	 * @param {number} [n42] - 4-2 matrix element.
    	 * @param {number} [n43] - 4-3 matrix element.
    	 * @param {number} [n44] - 4-4 matrix element.
    	 */
    	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		Matrix4.prototype.isMatrix4 = true;

    		/**
    		 * A column-major list of matrix values.
    		 *
    		 * @type {Array<number>}
    		 */
    		this.elements = [

    			1, 0, 0, 0,
    			0, 1, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		];

    		if ( n11 !== undefined ) {

    			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

    		}

    	}

    	/**
    	 * Sets the elements of the matrix.The arguments are supposed to be
    	 * in row-major order.
    	 *
    	 * @param {number} [n11] - 1-1 matrix element.
    	 * @param {number} [n12] - 1-2 matrix element.
    	 * @param {number} [n13] - 1-3 matrix element.
    	 * @param {number} [n14] - 1-4 matrix element.
    	 * @param {number} [n21] - 2-1 matrix element.
    	 * @param {number} [n22] - 2-2 matrix element.
    	 * @param {number} [n23] - 2-3 matrix element.
    	 * @param {number} [n24] - 2-4 matrix element.
    	 * @param {number} [n31] - 3-1 matrix element.
    	 * @param {number} [n32] - 3-2 matrix element.
    	 * @param {number} [n33] - 3-3 matrix element.
    	 * @param {number} [n34] - 3-4 matrix element.
    	 * @param {number} [n41] - 4-1 matrix element.
    	 * @param {number} [n42] - 4-2 matrix element.
    	 * @param {number} [n43] - 4-3 matrix element.
    	 * @param {number} [n44] - 4-4 matrix element.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

    		const te = this.elements;

    		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
    		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
    		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
    		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

    		return this;

    	}

    	/**
    	 * Sets this matrix to the 4x4 identity matrix.
    	 *
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	identity() {

    		this.set(

    			1, 0, 0, 0,
    			0, 1, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Returns a matrix with copied values from this instance.
    	 *
    	 * @return {Matrix4} A clone of this instance.
    	 */
    	clone() {

    		return new Matrix4().fromArray( this.elements );

    	}

    	/**
    	 * Copies the values of the given matrix to this instance.
    	 *
    	 * @param {Matrix4} m - The matrix to copy.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	copy( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
    		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
    		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
    		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

    		return this;

    	}

    	/**
    	 * Copies the translation component of the given matrix
    	 * into this matrix's translation component.
    	 *
    	 * @param {Matrix4} m - The matrix to copy the translation component.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	copyPosition( m ) {

    		const te = this.elements, me = m.elements;

    		te[ 12 ] = me[ 12 ];
    		te[ 13 ] = me[ 13 ];
    		te[ 14 ] = me[ 14 ];

    		return this;

    	}

    	/**
    	 * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The 3x3 matrix.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	setFromMatrix3( m ) {

    		const me = m.elements;

    		this.set(

    			me[ 0 ], me[ 3 ], me[ 6 ], 0,
    			me[ 1 ], me[ 4 ], me[ 7 ], 0,
    			me[ 2 ], me[ 5 ], me[ 8 ], 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Extracts the basis of this matrix into the three axis vectors provided.
    	 *
    	 * @param {Vector3} xAxis - The basis's x axis.
    	 * @param {Vector3} yAxis - The basis's y axis.
    	 * @param {Vector3} zAxis - The basis's z axis.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	extractBasis( xAxis, yAxis, zAxis ) {

    		xAxis.setFromMatrixColumn( this, 0 );
    		yAxis.setFromMatrixColumn( this, 1 );
    		zAxis.setFromMatrixColumn( this, 2 );

    		return this;

    	}

    	/**
    	 * Sets the given basis vectors to this matrix.
    	 *
    	 * @param {Vector3} xAxis - The basis's x axis.
    	 * @param {Vector3} yAxis - The basis's y axis.
    	 * @param {Vector3} zAxis - The basis's z axis.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeBasis( xAxis, yAxis, zAxis ) {

    		this.set(
    			xAxis.x, yAxis.x, zAxis.x, 0,
    			xAxis.y, yAxis.y, zAxis.y, 0,
    			xAxis.z, yAxis.z, zAxis.z, 0,
    			0, 0, 0, 1
    		);

    		return this;

    	}

    	/**
    	 * Extracts the rotation component of the given matrix
    	 * into this matrix's rotation component.
    	 *
    	 * Note: This method does not support reflection matrices.
    	 *
    	 * @param {Matrix4} m - The matrix.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	extractRotation( m ) {

    		const te = this.elements;
    		const me = m.elements;

    		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
    		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
    		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

    		te[ 0 ] = me[ 0 ] * scaleX;
    		te[ 1 ] = me[ 1 ] * scaleX;
    		te[ 2 ] = me[ 2 ] * scaleX;
    		te[ 3 ] = 0;

    		te[ 4 ] = me[ 4 ] * scaleY;
    		te[ 5 ] = me[ 5 ] * scaleY;
    		te[ 6 ] = me[ 6 ] * scaleY;
    		te[ 7 ] = 0;

    		te[ 8 ] = me[ 8 ] * scaleZ;
    		te[ 9 ] = me[ 9 ] * scaleZ;
    		te[ 10 ] = me[ 10 ] * scaleZ;
    		te[ 11 ] = 0;

    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	}

    	/**
    	 * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
    	 * the rotation specified by the given Euler angles. The rest of
    	 * the matrix is set to the identity. Depending on the {@link Euler#order},
    	 * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
    	 * for a complete list.
    	 *
    	 * @param {Euler} euler - The Euler angles.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationFromEuler( euler ) {

    		const te = this.elements;

    		const x = euler.x, y = euler.y, z = euler.z;
    		const a = Math.cos( x ), b = Math.sin( x );
    		const c = Math.cos( y ), d = Math.sin( y );
    		const e = Math.cos( z ), f = Math.sin( z );

    		if ( euler.order === 'XYZ' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - c * f;
    			te[ 8 ] = d;

    			te[ 1 ] = af + be * d;
    			te[ 5 ] = ae - bf * d;
    			te[ 9 ] = - b * c;

    			te[ 2 ] = bf - ae * d;
    			te[ 6 ] = be + af * d;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YXZ' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce + df * b;
    			te[ 4 ] = de * b - cf;
    			te[ 8 ] = a * d;

    			te[ 1 ] = a * f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b;

    			te[ 2 ] = cf * b - de;
    			te[ 6 ] = df + ce * b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZXY' ) {

    			const ce = c * e, cf = c * f, de = d * e, df = d * f;

    			te[ 0 ] = ce - df * b;
    			te[ 4 ] = - a * f;
    			te[ 8 ] = de + cf * b;

    			te[ 1 ] = cf + de * b;
    			te[ 5 ] = a * e;
    			te[ 9 ] = df - ce * b;

    			te[ 2 ] = - a * d;
    			te[ 6 ] = b;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'ZYX' ) {

    			const ae = a * e, af = a * f, be = b * e, bf = b * f;

    			te[ 0 ] = c * e;
    			te[ 4 ] = be * d - af;
    			te[ 8 ] = ae * d + bf;

    			te[ 1 ] = c * f;
    			te[ 5 ] = bf * d + ae;
    			te[ 9 ] = af * d - be;

    			te[ 2 ] = - d;
    			te[ 6 ] = b * c;
    			te[ 10 ] = a * c;

    		} else if ( euler.order === 'YZX' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = bd - ac * f;
    			te[ 8 ] = bc * f + ad;

    			te[ 1 ] = f;
    			te[ 5 ] = a * e;
    			te[ 9 ] = - b * e;

    			te[ 2 ] = - d * e;
    			te[ 6 ] = ad * f + bc;
    			te[ 10 ] = ac - bd * f;

    		} else if ( euler.order === 'XZY' ) {

    			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

    			te[ 0 ] = c * e;
    			te[ 4 ] = - f;
    			te[ 8 ] = d * e;

    			te[ 1 ] = ac * f + bd;
    			te[ 5 ] = a * e;
    			te[ 9 ] = ad * f - bc;

    			te[ 2 ] = bc * f - ad;
    			te[ 6 ] = b * e;
    			te[ 10 ] = bd * f + ac;

    		}

    		// bottom row
    		te[ 3 ] = 0;
    		te[ 7 ] = 0;
    		te[ 11 ] = 0;

    		// last column
    		te[ 12 ] = 0;
    		te[ 13 ] = 0;
    		te[ 14 ] = 0;
    		te[ 15 ] = 1;

    		return this;

    	}

    	/**
    	 * Sets the rotation component of this matrix to the rotation specified by
    	 * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
    	 * The rest of the matrix is set to the identity.
    	 *
    	 * @param {Quaternion} q - The Quaternion.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationFromQuaternion( q ) {

    		return this.compose( _zero, q, _one );

    	}

    	/**
    	 * Sets the rotation component of the transformation matrix, looking from `eye` towards
    	 * `target`, and oriented by the up-direction.
    	 *
    	 * @param {Vector3} eye - The eye vector.
    	 * @param {Vector3} target - The target vector.
    	 * @param {Vector3} up - The up vector.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	lookAt( eye, target, up ) {

    		const te = this.elements;

    		_z.subVectors( eye, target );

    		if ( _z.lengthSq() === 0 ) {

    			// eye and target are in the same position

    			_z.z = 1;

    		}

    		_z.normalize();
    		_x.crossVectors( up, _z );

    		if ( _x.lengthSq() === 0 ) {

    			// up and z are parallel

    			if ( Math.abs( up.z ) === 1 ) {

    				_z.x += 0.0001;

    			} else {

    				_z.z += 0.0001;

    			}

    			_z.normalize();
    			_x.crossVectors( up, _z );

    		}

    		_x.normalize();
    		_y.crossVectors( _z, _x );

    		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
    		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
    		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

    		return this;

    	}

    	/**
    	 * Post-multiplies this matrix by the given 4x4 matrix.
    	 *
    	 * @param {Matrix4} m - The matrix to multiply with.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	multiply( m ) {

    		return this.multiplyMatrices( this, m );

    	}

    	/**
    	 * Pre-multiplies this matrix by the given 4x4 matrix.
    	 *
    	 * @param {Matrix4} m - The matrix to multiply with.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	premultiply( m ) {

    		return this.multiplyMatrices( m, this );

    	}

    	/**
    	 * Multiples the given 4x4 matrices and stores the result
    	 * in this matrix.
    	 *
    	 * @param {Matrix4} a - The first matrix.
    	 * @param {Matrix4} b - The second matrix.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	multiplyMatrices( a, b ) {

    		const ae = a.elements;
    		const be = b.elements;
    		const te = this.elements;

    		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
    		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
    		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
    		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

    		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
    		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
    		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
    		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    		return this;

    	}

    	/**
    	 * Multiplies every component of the matrix by the given scalar.
    	 *
    	 * @param {number} s - The scalar.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	multiplyScalar( s ) {

    		const te = this.elements;

    		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
    		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
    		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
    		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

    		return this;

    	}

    	/**
    	 * Computes and returns the determinant of this matrix.
    	 *
    	 * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
    	 *
    	 * @return {number} The determinant.
    	 */
    	determinant() {

    		const te = this.elements;

    		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
    		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
    		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
    		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

    		//TODO: make this more efficient

    		return (
    			n41 * (
    				+ n14 * n23 * n32
    				 - n13 * n24 * n32
    				 - n14 * n22 * n33
    				 + n12 * n24 * n33
    				 + n13 * n22 * n34
    				 - n12 * n23 * n34
    			) +
    			n42 * (
    				+ n11 * n23 * n34
    				 - n11 * n24 * n33
    				 + n14 * n21 * n33
    				 - n13 * n21 * n34
    				 + n13 * n24 * n31
    				 - n14 * n23 * n31
    			) +
    			n43 * (
    				+ n11 * n24 * n32
    				 - n11 * n22 * n34
    				 - n14 * n21 * n32
    				 + n12 * n21 * n34
    				 + n14 * n22 * n31
    				 - n12 * n24 * n31
    			) +
    			n44 * (
    				- n13 * n22 * n31
    				 - n11 * n23 * n32
    				 + n11 * n22 * n33
    				 + n13 * n21 * n32
    				 - n12 * n21 * n33
    				 + n12 * n23 * n31
    			)

    		);

    	}

    	/**
    	 * Transposes this matrix in place.
    	 *
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	transpose() {

    		const te = this.elements;
    		let tmp;

    		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
    		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
    		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

    		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
    		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
    		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

    		return this;

    	}

    	/**
    	 * Sets the position component for this matrix from the given vector,
    	 * without affecting the rest of the matrix.
    	 *
    	 * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
    	 * @param {number} y - The y component of the vector.
    	 * @param {number} z - The z component of the vector.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	setPosition( x, y, z ) {

    		const te = this.elements;

    		if ( x.isVector3 ) {

    			te[ 12 ] = x.x;
    			te[ 13 ] = x.y;
    			te[ 14 ] = x.z;

    		} else {

    			te[ 12 ] = x;
    			te[ 13 ] = y;
    			te[ 14 ] = z;

    		}

    		return this;

    	}

    	/**
    	 * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
    	 * You can not invert with a determinant of zero. If you attempt this, the method produces
    	 * a zero matrix instead.
    	 *
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	invert() {

    		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
    		const te = this.elements,

    			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
    			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
    			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
    			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

    			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
    			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
    			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
    			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

    		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

    		const detInv = 1 / det;

    		te[ 0 ] = t11 * detInv;
    		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
    		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
    		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

    		te[ 4 ] = t12 * detInv;
    		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
    		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
    		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

    		te[ 8 ] = t13 * detInv;
    		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
    		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
    		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

    		te[ 12 ] = t14 * detInv;
    		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
    		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
    		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

    		return this;

    	}

    	/**
    	 * Multiplies the columns of this matrix by the given vector.
    	 *
    	 * @param {Vector3} v - The scale vector.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	scale( v ) {

    		const te = this.elements;
    		const x = v.x, y = v.y, z = v.z;

    		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
    		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
    		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
    		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

    		return this;

    	}

    	/**
    	 * Gets the maximum scale value of the three axes.
    	 *
    	 * @return {number} The maximum scale.
    	 */
    	getMaxScaleOnAxis() {

    		const te = this.elements;

    		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
    		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
    		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

    		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

    	}

    	/**
    	 * Sets this matrix as a translation transform from the given vector.
    	 *
    	 * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
    	 * @param {number} y - The amount to translate in the Y axis.
    	 * @param {number} z - The amount to translate in the z axis.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeTranslation( x, y, z ) {

    		if ( x.isVector3 ) {

    			this.set(

    				1, 0, 0, x.x,
    				0, 1, 0, x.y,
    				0, 0, 1, x.z,
    				0, 0, 0, 1

    			);

    		} else {

    			this.set(

    				1, 0, 0, x,
    				0, 1, 0, y,
    				0, 0, 1, z,
    				0, 0, 0, 1

    			);

    		}

    		return this;

    	}

    	/**
    	 * Sets this matrix as a rotational transformation around the X axis by
    	 * the given angle.
    	 *
    	 * @param {number} theta - The rotation in radians.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationX( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			1, 0, 0, 0,
    			0, c, - s, 0,
    			0, s, c, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a rotational transformation around the Y axis by
    	 * the given angle.
    	 *
    	 * @param {number} theta - The rotation in radians.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationY( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			 c, 0, s, 0,
    			 0, 1, 0, 0,
    			- s, 0, c, 0,
    			 0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a rotational transformation around the Z axis by
    	 * the given angle.
    	 *
    	 * @param {number} theta - The rotation in radians.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationZ( theta ) {

    		const c = Math.cos( theta ), s = Math.sin( theta );

    		this.set(

    			c, - s, 0, 0,
    			s, c, 0, 0,
    			0, 0, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a rotational transformation around the given axis by
    	 * the given angle.
    	 *
    	 * This is a somewhat controversial but mathematically sound alternative to
    	 * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
    	 *
    	 * @param {Vector3} axis - The normalized rotation axis.
    	 * @param {number} angle - The rotation in radians.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeRotationAxis( axis, angle ) {

    		// Based on http://www.gamedev.net/reference/articles/article1199.asp

    		const c = Math.cos( angle );
    		const s = Math.sin( angle );
    		const t = 1 - c;
    		const x = axis.x, y = axis.y, z = axis.z;
    		const tx = t * x, ty = t * y;

    		this.set(

    			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
    			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
    			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a scale transformation.
    	 *
    	 * @param {number} x - The amount to scale in the X axis.
    	 * @param {number} y - The amount to scale in the Y axis.
    	 * @param {number} z - The amount to scale in the Z axis.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeScale( x, y, z ) {

    		this.set(

    			x, 0, 0, 0,
    			0, y, 0, 0,
    			0, 0, z, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix as a shear transformation.
    	 *
    	 * @param {number} xy - The amount to shear X by Y.
    	 * @param {number} xz - The amount to shear X by Z.
    	 * @param {number} yx - The amount to shear Y by X.
    	 * @param {number} yz - The amount to shear Y by Z.
    	 * @param {number} zx - The amount to shear Z by X.
    	 * @param {number} zy - The amount to shear Z by Y.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeShear( xy, xz, yx, yz, zx, zy ) {

    		this.set(

    			1, yx, zx, 0,
    			xy, 1, zy, 0,
    			xz, yz, 1, 0,
    			0, 0, 0, 1

    		);

    		return this;

    	}

    	/**
    	 * Sets this matrix to the transformation composed of the given position,
    	 * rotation (Quaternion) and scale.
    	 *
    	 * @param {Vector3} position - The position vector.
    	 * @param {Quaternion} quaternion - The rotation as a Quaternion.
    	 * @param {Vector3} scale - The scale vector.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	compose( position, quaternion, scale ) {

    		const te = this.elements;

    		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    		const x2 = x + x,	y2 = y + y, z2 = z + z;
    		const xx = x * x2, xy = x * y2, xz = x * z2;
    		const yy = y * y2, yz = y * z2, zz = z * z2;
    		const wx = w * x2, wy = w * y2, wz = w * z2;

    		const sx = scale.x, sy = scale.y, sz = scale.z;

    		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
    		te[ 1 ] = ( xy + wz ) * sx;
    		te[ 2 ] = ( xz - wy ) * sx;
    		te[ 3 ] = 0;

    		te[ 4 ] = ( xy - wz ) * sy;
    		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
    		te[ 6 ] = ( yz + wx ) * sy;
    		te[ 7 ] = 0;

    		te[ 8 ] = ( xz + wy ) * sz;
    		te[ 9 ] = ( yz - wx ) * sz;
    		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
    		te[ 11 ] = 0;

    		te[ 12 ] = position.x;
    		te[ 13 ] = position.y;
    		te[ 14 ] = position.z;
    		te[ 15 ] = 1;

    		return this;

    	}

    	/**
    	 * Decomposes this matrix into its position, rotation and scale components
    	 * and provides the result in the given objects.
    	 *
    	 * Note: Not all matrices are decomposable in this way. For example, if an
    	 * object has a non-uniformly scaled parent, then the object's world matrix
    	 * may not be decomposable, and this method may not be appropriate.
    	 *
    	 * @param {Vector3} position - The position vector.
    	 * @param {Quaternion} quaternion - The rotation as a Quaternion.
    	 * @param {Vector3} scale - The scale vector.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	decompose( position, quaternion, scale ) {

    		const te = this.elements;

    		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
    		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
    		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

    		// if determine is negative, we need to invert one scale
    		const det = this.determinant();
    		if ( det < 0 ) sx = - sx;

    		position.x = te[ 12 ];
    		position.y = te[ 13 ];
    		position.z = te[ 14 ];

    		// scale the rotation part
    		_m1$2.copy( this );

    		const invSX = 1 / sx;
    		const invSY = 1 / sy;
    		const invSZ = 1 / sz;

    		_m1$2.elements[ 0 ] *= invSX;
    		_m1$2.elements[ 1 ] *= invSX;
    		_m1$2.elements[ 2 ] *= invSX;

    		_m1$2.elements[ 4 ] *= invSY;
    		_m1$2.elements[ 5 ] *= invSY;
    		_m1$2.elements[ 6 ] *= invSY;

    		_m1$2.elements[ 8 ] *= invSZ;
    		_m1$2.elements[ 9 ] *= invSZ;
    		_m1$2.elements[ 10 ] *= invSZ;

    		quaternion.setFromRotationMatrix( _m1$2 );

    		scale.x = sx;
    		scale.y = sy;
    		scale.z = sz;

    		return this;

    	}

    	/**
    	 * Creates a perspective projection matrix. This is used internally by
    	 * {@link PerspectiveCamera#updateProjectionMatrix}.

    	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
    	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
    	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
    	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
    	 * @param {number} near - The distance from the camera to the near plane.
    	 * @param {number} far - The distance from the camera to the far plane.
    	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

    		const te = this.elements;
    		const x = 2 * near / ( right - left );
    		const y = 2 * near / ( top - bottom );

    		const a = ( right + left ) / ( right - left );
    		const b = ( top + bottom ) / ( top - bottom );

    		let c, d;

    		if ( coordinateSystem === WebGLCoordinateSystem ) {

    			c = - ( far + near ) / ( far - near );
    			d = ( -2 * far * near ) / ( far - near );

    		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

    			c = - far / ( far - near );
    			d = ( - far * near ) / ( far - near );

    		} else {

    			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

    		}

    		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
    		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = -1;	te[ 15 ] = 0;

    		return this;

    	}

    	/**
    	 * Creates a orthographic projection matrix. This is used internally by
    	 * {@link OrthographicCamera#updateProjectionMatrix}.

    	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
    	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
    	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
    	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
    	 * @param {number} near - The distance from the camera to the near plane.
    	 * @param {number} far - The distance from the camera to the far plane.
    	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

    		const te = this.elements;
    		const w = 1.0 / ( right - left );
    		const h = 1.0 / ( top - bottom );
    		const p = 1.0 / ( far - near );

    		const x = ( right + left ) * w;
    		const y = ( top + bottom ) * h;

    		let z, zInv;

    		if ( coordinateSystem === WebGLCoordinateSystem ) {

    			z = ( far + near ) * p;
    			zInv = -2 * p;

    		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

    			z = near * p;
    			zInv = -1 * p;

    		} else {

    			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

    		}

    		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
    		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
    		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
    		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

    		return this;

    	}

    	/**
    	 * Returns `true` if this matrix is equal with the given one.
    	 *
    	 * @param {Matrix4} matrix - The matrix to test for equality.
    	 * @return {boolean} Whether this matrix is equal with the given one.
    	 */
    	equals( matrix ) {

    		const te = this.elements;
    		const me = matrix.elements;

    		for ( let i = 0; i < 16; i ++ ) {

    			if ( te[ i ] !== me[ i ] ) return false;

    		}

    		return true;

    	}

    	/**
    	 * Sets the elements of the matrix from the given array.
    	 *
    	 * @param {Array<number>} array - The matrix elements in column-major order.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    	fromArray( array, offset = 0 ) {

    		for ( let i = 0; i < 16; i ++ ) {

    			this.elements[ i ] = array[ i + offset ];

    		}

    		return this;

    	}

    	/**
    	 * Writes the elements of this matrix to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The matrix elements in column-major order.
    	 */
    	toArray( array = [], offset = 0 ) {

    		const te = this.elements;

    		array[ offset ] = te[ 0 ];
    		array[ offset + 1 ] = te[ 1 ];
    		array[ offset + 2 ] = te[ 2 ];
    		array[ offset + 3 ] = te[ 3 ];

    		array[ offset + 4 ] = te[ 4 ];
    		array[ offset + 5 ] = te[ 5 ];
    		array[ offset + 6 ] = te[ 6 ];
    		array[ offset + 7 ] = te[ 7 ];

    		array[ offset + 8 ] = te[ 8 ];
    		array[ offset + 9 ] = te[ 9 ];
    		array[ offset + 10 ] = te[ 10 ];
    		array[ offset + 11 ] = te[ 11 ];

    		array[ offset + 12 ] = te[ 12 ];
    		array[ offset + 13 ] = te[ 13 ];
    		array[ offset + 14 ] = te[ 14 ];
    		array[ offset + 15 ] = te[ 15 ];

    		return array;

    	}

    }

    const _v1$5 = /*@__PURE__*/ new Vector3();
    const _m1$2 = /*@__PURE__*/ new Matrix4();
    const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
    const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
    const _x = /*@__PURE__*/ new Vector3();
    const _y = /*@__PURE__*/ new Vector3();
    const _z = /*@__PURE__*/ new Vector3();

    const _matrix$2 = /*@__PURE__*/ new Matrix4();
    const _quaternion$3 = /*@__PURE__*/ new Quaternion();

    /**
     * A class representing Euler angles.
     *
     * Euler angles describe a rotational transformation by rotating an object on
     * its various axes in specified amounts per axis, and a specified axis
     * order.
     *
     * Iterating through an instance will yield its components (x, y, z,
     * order) in the corresponding order.
     *
     * ```js
     * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );
     * const b = new THREE.Vector3( 1, 0, 1 );
     * b.applyEuler(a);
     * ```
     */
    class Euler {

    	/**
    	 * Constructs a new euler instance.
    	 *
    	 * @param {number} [x=0] - The angle of the x axis in radians.
    	 * @param {number} [y=0] - The angle of the y axis in radians.
    	 * @param {number} [z=0] - The angle of the z axis in radians.
    	 * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
    	 */
    	constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isEuler = true;

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._order = order;

    	}

    	/**
    	 * The angle of the x axis in radians.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get x() {

    		return this._x;

    	}

    	set x( value ) {

    		this._x = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * The angle of the y axis in radians.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get y() {

    		return this._y;

    	}

    	set y( value ) {

    		this._y = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * The angle of the z axis in radians.
    	 *
    	 * @type {number}
    	 * @default 0
    	 */
    	get z() {

    		return this._z;

    	}

    	set z( value ) {

    		this._z = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * A string representing the order that the rotations are applied.
    	 *
    	 * @type {string}
    	 * @default 'XYZ'
    	 */
    	get order() {

    		return this._order;

    	}

    	set order( value ) {

    		this._order = value;
    		this._onChangeCallback();

    	}

    	/**
    	 * Sets the Euler components.
    	 *
    	 * @param {number} x - The angle of the x axis in radians.
    	 * @param {number} y - The angle of the y axis in radians.
    	 * @param {number} z - The angle of the z axis in radians.
    	 * @param {string} [order] - A string representing the order that the rotations are applied.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	set( x, y, z, order = this._order ) {

    		this._x = x;
    		this._y = y;
    		this._z = z;
    		this._order = order;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Returns a new Euler instance with copied values from this instance.
    	 *
    	 * @return {Euler} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this._x, this._y, this._z, this._order );

    	}

    	/**
    	 * Copies the values of the given Euler instance to this instance.
    	 *
    	 * @param {Euler} euler - The Euler instance to copy.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	copy( euler ) {

    		this._x = euler._x;
    		this._y = euler._y;
    		this._z = euler._z;
    		this._order = euler._order;

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets the angles of this Euler instance from a pure rotation matrix.
    	 *
    	 * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
    	 * @param {string} [order] - A string representing the order that the rotations are applied.
    	 * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	setFromRotationMatrix( m, order = this._order, update = true ) {

    		const te = m.elements;
    		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
    		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
    		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

    		switch ( order ) {

    			case 'XYZ':

    				this._y = Math.asin( clamp( m13, -1, 1 ) );

    				if ( Math.abs( m13 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m33 );
    					this._z = Math.atan2( - m12, m11 );

    				} else {

    					this._x = Math.atan2( m32, m22 );
    					this._z = 0;

    				}

    				break;

    			case 'YXZ':

    				this._x = Math.asin( - clamp( m23, -1, 1 ) );

    				if ( Math.abs( m23 ) < 0.9999999 ) {

    					this._y = Math.atan2( m13, m33 );
    					this._z = Math.atan2( m21, m22 );

    				} else {

    					this._y = Math.atan2( - m31, m11 );
    					this._z = 0;

    				}

    				break;

    			case 'ZXY':

    				this._x = Math.asin( clamp( m32, -1, 1 ) );

    				if ( Math.abs( m32 ) < 0.9999999 ) {

    					this._y = Math.atan2( - m31, m33 );
    					this._z = Math.atan2( - m12, m22 );

    				} else {

    					this._y = 0;
    					this._z = Math.atan2( m21, m11 );

    				}

    				break;

    			case 'ZYX':

    				this._y = Math.asin( - clamp( m31, -1, 1 ) );

    				if ( Math.abs( m31 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m33 );
    					this._z = Math.atan2( m21, m11 );

    				} else {

    					this._x = 0;
    					this._z = Math.atan2( - m12, m22 );

    				}

    				break;

    			case 'YZX':

    				this._z = Math.asin( clamp( m21, -1, 1 ) );

    				if ( Math.abs( m21 ) < 0.9999999 ) {

    					this._x = Math.atan2( - m23, m22 );
    					this._y = Math.atan2( - m31, m11 );

    				} else {

    					this._x = 0;
    					this._y = Math.atan2( m13, m33 );

    				}

    				break;

    			case 'XZY':

    				this._z = Math.asin( - clamp( m12, -1, 1 ) );

    				if ( Math.abs( m12 ) < 0.9999999 ) {

    					this._x = Math.atan2( m32, m22 );
    					this._y = Math.atan2( m13, m11 );

    				} else {

    					this._x = Math.atan2( - m23, m33 );
    					this._y = 0;

    				}

    				break;

    			default:

    				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

    		}

    		this._order = order;

    		if ( update === true ) this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Sets the angles of this Euler instance from a normalized quaternion.
    	 *
    	 * @param {Quaternion} q - A normalized Quaternion.
    	 * @param {string} [order] - A string representing the order that the rotations are applied.
    	 * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	setFromQuaternion( q, order, update ) {

    		_matrix$2.makeRotationFromQuaternion( q );

    		return this.setFromRotationMatrix( _matrix$2, order, update );

    	}

    	/**
    	 * Sets the angles of this Euler instance from the given vector.
    	 *
    	 * @param {Vector3} v - The vector.
    	 * @param {string} [order] - A string representing the order that the rotations are applied.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	setFromVector3( v, order = this._order ) {

    		return this.set( v.x, v.y, v.z, order );

    	}

    	/**
    	 * Resets the euler angle with a new order by creating a quaternion from this
    	 * euler angle and then setting this euler angle with the quaternion and the
    	 * new order.
    	 *
    	 * Warning: This discards revolution information.
    	 *
    	 * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	reorder( newOrder ) {

    		_quaternion$3.setFromEuler( this );

    		return this.setFromQuaternion( _quaternion$3, newOrder );

    	}

    	/**
    	 * Returns `true` if this Euler instance is equal with the given one.
    	 *
    	 * @param {Euler} euler - The Euler instance to test for equality.
    	 * @return {boolean} Whether this Euler instance is equal with the given one.
    	 */
    	equals( euler ) {

    		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

    	}

    	/**
    	 * Sets this Euler instance's components to values from the given array. The first three
    	 * entries of the array are assign to the x,y and z components. An optional fourth entry
    	 * defines the Euler order.
    	 *
    	 * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
    	 * @return {Euler} A reference to this Euler instance.
    	 */
    	fromArray( array ) {

    		this._x = array[ 0 ];
    		this._y = array[ 1 ];
    		this._z = array[ 2 ];
    		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

    		this._onChangeCallback();

    		return this;

    	}

    	/**
    	 * Writes the components of this Euler instance to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number,number,number,string>} The Euler components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this._x;
    		array[ offset + 1 ] = this._y;
    		array[ offset + 2 ] = this._z;
    		array[ offset + 3 ] = this._order;

    		return array;

    	}

    	_onChange( callback ) {

    		this._onChangeCallback = callback;

    		return this;

    	}

    	_onChangeCallback() {}

    	*[ Symbol.iterator ]() {

    		yield this._x;
    		yield this._y;
    		yield this._z;
    		yield this._order;

    	}

    }

    /**
     * The default Euler angle order.
     *
     * @static
     * @type {string}
     * @default 'XYZ'
     */
    Euler.DEFAULT_ORDER = 'XYZ';

    /**
     * A layers object assigns an 3D object to 1 or more of 32
     * layers numbered `0` to `31` - internally the layers are stored as a
     * bit mask], and by default all 3D objects are a member of layer `0`.
     *
     * This can be used to control visibility - an object must share a layer with
     * a camera to be visible when that camera's view is
     * rendered.
     *
     * All classes that inherit from {@link Object3D} have an `layers` property which
     * is an instance of this class.
     */
    class Layers {

    	/**
    	 * Constructs a new layers instance, with membership
    	 * initially set to layer `0`.
    	 */
    	constructor() {

    		/**
    		 * A bit mask storing which of the 32 layers this layers object is currently
    		 * a member of.
    		 *
    		 * @type {number}
    		 */
    		this.mask = 1 | 0;

    	}

    	/**
    	 * Sets membership to the given layer, and remove membership all other layers.
    	 *
    	 * @param {number} layer - The layer to set.
    	 */
    	set( layer ) {

    		this.mask = ( 1 << layer | 0 ) >>> 0;

    	}

    	/**
    	 * Adds membership of the given layer.
    	 *
    	 * @param {number} layer - The layer to enable.
    	 */
    	enable( layer ) {

    		this.mask |= 1 << layer | 0;

    	}

    	/**
    	 * Adds membership to all layers.
    	 */
    	enableAll() {

    		this.mask = 0xffffffff | 0;

    	}

    	/**
    	 * Toggles the membership of the given layer.
    	 *
    	 * @param {number} layer - The layer to toggle.
    	 */
    	toggle( layer ) {

    		this.mask ^= 1 << layer | 0;

    	}

    	/**
    	 * Removes membership of the given layer.
    	 *
    	 * @param {number} layer - The layer to enable.
    	 */
    	disable( layer ) {

    		this.mask &= ~ ( 1 << layer | 0 );

    	}

    	/**
    	 * Removes the membership from all layers.
    	 */
    	disableAll() {

    		this.mask = 0;

    	}

    	/**
    	 * Returns `true` if this and the given layers object have at least one
    	 * layer in common.
    	 *
    	 * @param {Layers} layers - The layers to test.
    	 * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
    	 */
    	test( layers ) {

    		return ( this.mask & layers.mask ) !== 0;

    	}

    	/**
    	 * Returns `true` if the given layer is enabled.
    	 *
    	 * @param {number} layer - The layer to test.
    	 * @return {boolean } Whether the given layer is enabled or not.
    	 */
    	isEnabled( layer ) {

    		return ( this.mask & ( 1 << layer | 0 ) ) !== 0;

    	}

    }

    let _object3DId = 0;

    const _v1$4 = /*@__PURE__*/ new Vector3();
    const _q1 = /*@__PURE__*/ new Quaternion();
    const _m1$1$1 = /*@__PURE__*/ new Matrix4();
    const _target = /*@__PURE__*/ new Vector3();

    const _position$3 = /*@__PURE__*/ new Vector3();
    const _scale$2 = /*@__PURE__*/ new Vector3();
    const _quaternion$2 = /*@__PURE__*/ new Quaternion();

    const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
    const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
    const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

    /**
     * Fires when the object has been added to its parent object.
     *
     * @event Object3D#added
     * @type {Object}
     */
    const _addedEvent = { type: 'added' };

    /**
     * Fires when the object has been removed from its parent object.
     *
     * @event Object3D#removed
     * @type {Object}
     */
    const _removedEvent = { type: 'removed' };

    /**
     * Fires when a new child object has been added.
     *
     * @event Object3D#childadded
     * @type {Object}
     */
    const _childaddedEvent = { type: 'childadded', child: null };

    /**
     * Fires when a child object has been removed.
     *
     * @event Object3D#childremoved
     * @type {Object}
     */
    const _childremovedEvent = { type: 'childremoved', child: null };

    /**
     * This is the base class for most objects in three.js and provides a set of
     * properties and methods for manipulating objects in 3D space.
     *
     * @augments EventDispatcher
     */
    class Object3D extends EventDispatcher {

    	/**
    	 * Constructs a new 3D object.
    	 */
    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isObject3D = true;

    		/**
    		 * The ID of the 3D object.
    		 *
    		 * @name Object3D#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

    		/**
    		 * The UUID of the 3D object.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.uuid = generateUUID();

    		/**
    		 * The name of the 3D object.
    		 *
    		 * @type {string}
    		 */
    		this.name = '';

    		/**
    		 * The type property is used for detecting the object type
    		 * in context of serialization/deserialization.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.type = 'Object3D';

    		/**
    		 * A reference to the parent object.
    		 *
    		 * @type {?Object3D}
    		 * @default null
    		 */
    		this.parent = null;

    		/**
    		 * An array holding the child 3D objects of this instance.
    		 *
    		 * @type {Array<Object3D>}
    		 */
    		this.children = [];

    		/**
    		 * Defines the `up` direction of the 3D object which influences
    		 * the orientation via methods like {@link Object3D#lookAt}.
    		 *
    		 * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.
    		 *
    		 * @type {Vector3}
    		 */
    		this.up = Object3D.DEFAULT_UP.clone();

    		const position = new Vector3();
    		const rotation = new Euler();
    		const quaternion = new Quaternion();
    		const scale = new Vector3( 1, 1, 1 );

    		function onRotationChange() {

    			quaternion.setFromEuler( rotation, false );

    		}

    		function onQuaternionChange() {

    			rotation.setFromQuaternion( quaternion, undefined, false );

    		}

    		rotation._onChange( onRotationChange );
    		quaternion._onChange( onQuaternionChange );

    		Object.defineProperties( this, {
    			/**
    			 * Represents the object's local position.
    			 *
    			 * @name Object3D#position
    			 * @type {Vector3}
    			 * @default (0,0,0)
    			 */
    			position: {
    				configurable: true,
    				enumerable: true,
    				value: position
    			},
    			/**
    			 * Represents the object's local rotation as Euler angles, in radians.
    			 *
    			 * @name Object3D#rotation
    			 * @type {Euler}
    			 * @default (0,0,0)
    			 */
    			rotation: {
    				configurable: true,
    				enumerable: true,
    				value: rotation
    			},
    			/**
    			 * Represents the object's local rotation as Quaternions.
    			 *
    			 * @name Object3D#quaternion
    			 * @type {Quaternion}
    			 */
    			quaternion: {
    				configurable: true,
    				enumerable: true,
    				value: quaternion
    			},
    			/**
    			 * Represents the object's local scale.
    			 *
    			 * @name Object3D#scale
    			 * @type {Vector3}
    			 * @default (1,1,1)
    			 */
    			scale: {
    				configurable: true,
    				enumerable: true,
    				value: scale
    			},
    			/**
    			 * Represents the object's model-view matrix.
    			 *
    			 * @name Object3D#modelViewMatrix
    			 * @type {Matrix4}
    			 */
    			modelViewMatrix: {
    				value: new Matrix4()
    			},
    			/**
    			 * Represents the object's normal matrix.
    			 *
    			 * @name Object3D#normalMatrix
    			 * @type {Matrix3}
    			 */
    			normalMatrix: {
    				value: new Matrix3()
    			}
    		} );

    		/**
    		 * Represents the object's transformation matrix in local space.
    		 *
    		 * @type {Matrix4}
    		 */
    		this.matrix = new Matrix4();

    		/**
    		 * Represents the object's transformation matrix in world space.
    		 * If the 3D object has no parent, then it's identical to the local transformation matrix
    		 *
    		 * @type {Matrix4}
    		 */
    		this.matrixWorld = new Matrix4();

    		/**
    		 * When set to `true`, the engine automatically computes the local matrix from position,
    		 * rotation and scale every frame.
    		 *
    		 * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;

    		/**
    		 * When set to `true`, the engine automatically computes the world matrix from the current local
    		 * matrix and the object's transformation hierarchy.
    		 *
    		 * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer

    		/**
    		 * When set to `true`, it calculates the world matrix in that frame and resets this property
    		 * to `false`.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.matrixWorldNeedsUpdate = false;

    		/**
    		 * The layer membership of the 3D object. The 3D object is only visible if it has
    		 * at least one layer in common with the camera in use. This property can also be
    		 * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.
    		 *
    		 * @type {Layers}
    		 */
    		this.layers = new Layers();

    		/**
    		 * When set to `true`, the 3D object gets rendered.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.visible = true;

    		/**
    		 * When set to `true`, the 3D object gets rendered into shadow maps.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.castShadow = false;

    		/**
    		 * When set to `true`, the 3D object is affected by shadows in the scene.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.receiveShadow = false;

    		/**
    		 * When set to `true`, the 3D object is honored by view frustum culling.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.frustumCulled = true;

    		/**
    		 * This value allows the default rendering order of scene graph objects to be
    		 * overridden although opaque and transparent objects remain sorted independently.
    		 * When this property is set for an instance of {@link Group},all descendants
    		 * objects will be sorted and rendered together. Sorting is from lowest to highest
    		 * render order.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.renderOrder = 0;

    		/**
    		 * An array holding the animation clips of the 3D object.
    		 *
    		 * @type {Array<AnimationClip>}
    		 */
    		this.animations = [];

    		/**
    		 * Custom depth material to be used when rendering to the depth map. Can only be used
    		 * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},
    		 * if you are modifying vertex positions in the vertex shader you must specify a custom depth
    		 * material for proper shadows.
    		 *
    		 * Only relevant in context of {@link WebGLRenderer}.
    		 *
    		 * @type {(Material|undefined)}
    		 * @default undefined
    		 */
    		this.customDepthMaterial = undefined;

    		/**
    		 * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.
    		 *
    		 * Only relevant in context of {@link WebGLRenderer}.
    		 *
    		 * @type {(Material|undefined)}
    		 * @default undefined
    		 */
    		this.customDistanceMaterial = undefined;

    		/**
    		 * An object that can be used to store custom data about the 3D object. It
    		 * should not hold references to functions as these will not be cloned.
    		 *
    		 * @type {Object}
    		 */
    		this.userData = {};

    	}

    	/**
    	 * A callback that is executed immediately before a 3D object is rendered to a shadow map.
    	 *
    	 * @param {Renderer|WebGLRenderer} renderer - The renderer.
    	 * @param {Object3D} object - The 3D object.
    	 * @param {Camera} camera - The camera that is used to render the scene.
    	 * @param {Camera} shadowCamera - The shadow camera.
    	 * @param {BufferGeometry} geometry - The 3D object's geometry.
    	 * @param {Material} depthMaterial - The depth material.
    	 * @param {Object} group - The geometry group data.
    	 */
    	onBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

    	/**
    	 * A callback that is executed immediately after a 3D object is rendered to a shadow map.
    	 *
    	 * @param {Renderer|WebGLRenderer} renderer - The renderer.
    	 * @param {Object3D} object - The 3D object.
    	 * @param {Camera} camera - The camera that is used to render the scene.
    	 * @param {Camera} shadowCamera - The shadow camera.
    	 * @param {BufferGeometry} geometry - The 3D object's geometry.
    	 * @param {Material} depthMaterial - The depth material.
    	 * @param {Object} group - The geometry group data.
    	 */
    	onAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

    	/**
    	 * A callback that is executed immediately before a 3D object is rendered.
    	 *
    	 * @param {Renderer|WebGLRenderer} renderer - The renderer.
    	 * @param {Object3D} object - The 3D object.
    	 * @param {Camera} camera - The camera that is used to render the scene.
    	 * @param {BufferGeometry} geometry - The 3D object's geometry.
    	 * @param {Material} material - The 3D object's material.
    	 * @param {Object} group - The geometry group data.
    	 */
    	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

    	/**
    	 * A callback that is executed immediately after a 3D object is rendered.
    	 *
    	 * @param {Renderer|WebGLRenderer} renderer - The renderer.
    	 * @param {Object3D} object - The 3D object.
    	 * @param {Camera} camera - The camera that is used to render the scene.
    	 * @param {BufferGeometry} geometry - The 3D object's geometry.
    	 * @param {Material} material - The 3D object's material.
    	 * @param {Object} group - The geometry group data.
    	 */
    	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

    	/**
    	 * Applies the given transformation matrix to the object and updates the object's position,
    	 * rotation and scale.
    	 *
    	 * @param {Matrix4} matrix - The transformation matrix.
    	 */
    	applyMatrix4( matrix ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		this.matrix.premultiply( matrix );

    		this.matrix.decompose( this.position, this.quaternion, this.scale );

    	}

    	/**
    	 * Applies a rotation represented by given the quaternion to the 3D object.
    	 *
    	 * @param {Quaternion} q - The quaternion.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	applyQuaternion( q ) {

    		this.quaternion.premultiply( q );

    		return this;

    	}

    	/**
    	 * Sets the given rotation represented as an axis/angle couple to the 3D object.
    	 *
    	 * @param {Vector3} axis - The (normalized) axis vector.
    	 * @param {number} angle - The angle in radians.
    	 */
    	setRotationFromAxisAngle( axis, angle ) {

    		// assumes axis is normalized

    		this.quaternion.setFromAxisAngle( axis, angle );

    	}

    	/**
    	 * Sets the given rotation represented as Euler angles to the 3D object.
    	 *
    	 * @param {Euler} euler - The Euler angles.
    	 */
    	setRotationFromEuler( euler ) {

    		this.quaternion.setFromEuler( euler, true );

    	}

    	/**
    	 * Sets the given rotation represented as rotation matrix to the 3D object.
    	 *
    	 * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
    	 * a pure rotation matrix (i.e, unscaled).
    	 */
    	setRotationFromMatrix( m ) {

    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    		this.quaternion.setFromRotationMatrix( m );

    	}

    	/**
    	 * Sets the given rotation represented as a Quaternion to the 3D object.
    	 *
    	 * @param {Quaternion} q - The Quaternion
    	 */
    	setRotationFromQuaternion( q ) {

    		// assumes q is normalized

    		this.quaternion.copy( q );

    	}

    	/**
    	 * Rotates the 3D object along an axis in local space.
    	 *
    	 * @param {Vector3} axis - The (normalized) axis vector.
    	 * @param {number} angle - The angle in radians.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	rotateOnAxis( axis, angle ) {

    		// rotate object on axis in object space
    		// axis is assumed to be normalized

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.multiply( _q1 );

    		return this;

    	}

    	/**
    	 * Rotates the 3D object along an axis in world space.
    	 *
    	 * @param {Vector3} axis - The (normalized) axis vector.
    	 * @param {number} angle - The angle in radians.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	rotateOnWorldAxis( axis, angle ) {

    		// rotate object on axis in world space
    		// axis is assumed to be normalized
    		// method assumes no rotated parent

    		_q1.setFromAxisAngle( axis, angle );

    		this.quaternion.premultiply( _q1 );

    		return this;

    	}

    	/**
    	 * Rotates the 3D object around its X axis in local space.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	rotateX( angle ) {

    		return this.rotateOnAxis( _xAxis, angle );

    	}

    	/**
    	 * Rotates the 3D object around its Y axis in local space.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	rotateY( angle ) {

    		return this.rotateOnAxis( _yAxis, angle );

    	}

    	/**
    	 * Rotates the 3D object around its Z axis in local space.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	rotateZ( angle ) {

    		return this.rotateOnAxis( _zAxis, angle );

    	}

    	/**
    	 * Translate the 3D object by a distance along the given axis in local space.
    	 *
    	 * @param {Vector3} axis - The (normalized) axis vector.
    	 * @param {number} distance - The distance in world units.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	translateOnAxis( axis, distance ) {

    		// translate object by distance along axis in object space
    		// axis is assumed to be normalized

    		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

    		this.position.add( _v1$4.multiplyScalar( distance ) );

    		return this;

    	}

    	/**
    	 * Translate the 3D object by a distance along its X-axis in local space.
    	 *
    	 * @param {number} distance - The distance in world units.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	translateX( distance ) {

    		return this.translateOnAxis( _xAxis, distance );

    	}

    	/**
    	 * Translate the 3D object by a distance along its Y-axis in local space.
    	 *
    	 * @param {number} distance - The distance in world units.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	translateY( distance ) {

    		return this.translateOnAxis( _yAxis, distance );

    	}

    	/**
    	 * Translate the 3D object by a distance along its Z-axis in local space.
    	 *
    	 * @param {number} distance - The distance in world units.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	translateZ( distance ) {

    		return this.translateOnAxis( _zAxis, distance );

    	}

    	/**
    	 * Converts the given vector from this 3D object's local space to world space.
    	 *
    	 * @param {Vector3} vector - The vector to convert.
    	 * @return {Vector3} The converted vector.
    	 */
    	localToWorld( vector ) {

    		this.updateWorldMatrix( true, false );

    		return vector.applyMatrix4( this.matrixWorld );

    	}

    	/**
    	 * Converts the given vector from this 3D object's word space to local space.
    	 *
    	 * @param {Vector3} vector - The vector to convert.
    	 * @return {Vector3} The converted vector.
    	 */
    	worldToLocal( vector ) {

    		this.updateWorldMatrix( true, false );

    		return vector.applyMatrix4( _m1$1$1.copy( this.matrixWorld ).invert() );

    	}

    	/**
    	 * Rotates the object to face a point in world space.
    	 *
    	 * This method does not support objects having non-uniformly-scaled parent(s).
    	 *
    	 * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
    	 * @param {number} [y] - The y coordinate in world space.
    	 * @param {number} [z] - The z coordinate in world space.
    	 */
    	lookAt( x, y, z ) {

    		// This method does not support objects having non-uniformly-scaled parent(s)

    		if ( x.isVector3 ) {

    			_target.copy( x );

    		} else {

    			_target.set( x, y, z );

    		}

    		const parent = this.parent;

    		this.updateWorldMatrix( true, false );

    		_position$3.setFromMatrixPosition( this.matrixWorld );

    		if ( this.isCamera || this.isLight ) {

    			_m1$1$1.lookAt( _position$3, _target, this.up );

    		} else {

    			_m1$1$1.lookAt( _target, _position$3, this.up );

    		}

    		this.quaternion.setFromRotationMatrix( _m1$1$1 );

    		if ( parent ) {

    			_m1$1$1.extractRotation( parent.matrixWorld );
    			_q1.setFromRotationMatrix( _m1$1$1 );
    			this.quaternion.premultiply( _q1.invert() );

    		}

    	}

    	/**
    	 * Adds the given 3D object as a child to this 3D object. An arbitrary number of
    	 * objects may be added. Any current parent on an object passed in here will be
    	 * removed, since an object can have at most one parent.
    	 *
    	 * @fires Object3D#added
    	 * @fires Object3D#childadded
    	 * @param {Object3D} object - The 3D object to add.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	add( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.add( arguments[ i ] );

    			}

    			return this;

    		}

    		if ( object === this ) {

    			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
    			return this;

    		}

    		if ( object && object.isObject3D ) {

    			object.removeFromParent();
    			object.parent = this;
    			this.children.push( object );

    			object.dispatchEvent( _addedEvent );

    			_childaddedEvent.child = object;
    			this.dispatchEvent( _childaddedEvent );
    			_childaddedEvent.child = null;

    		} else {

    			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

    		}

    		return this;

    	}

    	/**
    	 * Removes the given 3D object as child from this 3D object.
    	 * An arbitrary number of objects may be removed.
    	 *
    	 * @fires Object3D#removed
    	 * @fires Object3D#childremoved
    	 * @param {Object3D} object - The 3D object to remove.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	remove( object ) {

    		if ( arguments.length > 1 ) {

    			for ( let i = 0; i < arguments.length; i ++ ) {

    				this.remove( arguments[ i ] );

    			}

    			return this;

    		}

    		const index = this.children.indexOf( object );

    		if ( index !== -1 ) {

    			object.parent = null;
    			this.children.splice( index, 1 );

    			object.dispatchEvent( _removedEvent );

    			_childremovedEvent.child = object;
    			this.dispatchEvent( _childremovedEvent );
    			_childremovedEvent.child = null;

    		}

    		return this;

    	}

    	/**
    	 * Removes this 3D object from its current parent.
    	 *
    	 * @fires Object3D#removed
    	 * @fires Object3D#childremoved
    	 * @return {Object3D} A reference to this instance.
    	 */
    	removeFromParent() {

    		const parent = this.parent;

    		if ( parent !== null ) {

    			parent.remove( this );

    		}

    		return this;

    	}

    	/**
    	 * Removes all child objects.
    	 *
    	 * @fires Object3D#removed
    	 * @fires Object3D#childremoved
    	 * @return {Object3D} A reference to this instance.
    	 */
    	clear() {

    		return this.remove( ... this.children );

    	}

    	/**
    	 * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
    	 * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
    	 *
    	 * @fires Object3D#added
    	 * @fires Object3D#childadded
    	 * @param {Object3D} object - The 3D object to attach.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	attach( object ) {

    		// adds object as a child of this, while maintaining the object's world transform

    		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

    		this.updateWorldMatrix( true, false );

    		_m1$1$1.copy( this.matrixWorld ).invert();

    		if ( object.parent !== null ) {

    			object.parent.updateWorldMatrix( true, false );

    			_m1$1$1.multiply( object.parent.matrixWorld );

    		}

    		object.applyMatrix4( _m1$1$1 );

    		object.removeFromParent();
    		object.parent = this;
    		this.children.push( object );

    		object.updateWorldMatrix( false, true );

    		object.dispatchEvent( _addedEvent );

    		_childaddedEvent.child = object;
    		this.dispatchEvent( _childaddedEvent );
    		_childaddedEvent.child = null;

    		return this;

    	}

    	/**
    	 * Searches through the 3D object and its children, starting with the 3D object
    	 * itself, and returns the first with a matching ID.
    	 *
    	 * @param {number} id - The id.
    	 * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
    	 */
    	getObjectById( id ) {

    		return this.getObjectByProperty( 'id', id );

    	}

    	/**
    	 * Searches through the 3D object and its children, starting with the 3D object
    	 * itself, and returns the first with a matching name.
    	 *
    	 * @param {string} name - The name.
    	 * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
    	 */
    	getObjectByName( name ) {

    		return this.getObjectByProperty( 'name', name );

    	}

    	/**
    	 * Searches through the 3D object and its children, starting with the 3D object
    	 * itself, and returns the first with a matching property value.
    	 *
    	 * @param {string} name - The name of the property.
    	 * @param {any} value - The value.
    	 * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
    	 */
    	getObjectByProperty( name, value ) {

    		if ( this[ name ] === value ) return this;

    		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

    			const child = this.children[ i ];
    			const object = child.getObjectByProperty( name, value );

    			if ( object !== undefined ) {

    				return object;

    			}

    		}

    		return undefined;

    	}

    	/**
    	 * Searches through the 3D object and its children, starting with the 3D object
    	 * itself, and returns all 3D objects with a matching property value.
    	 *
    	 * @param {string} name - The name of the property.
    	 * @param {any} value - The value.
    	 * @param {Array<Object3D>} result - The method stores the result in this array.
    	 * @return {Array<Object3D>} The found 3D objects.
    	 */
    	getObjectsByProperty( name, value, result = [] ) {

    		if ( this[ name ] === value ) result.push( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].getObjectsByProperty( name, value, result );

    		}

    		return result;

    	}

    	/**
    	 * Returns a vector representing the position of the 3D object in world space.
    	 *
    	 * @param {Vector3} target - The target vector the result is stored to.
    	 * @return {Vector3} The 3D object's position in world space.
    	 */
    	getWorldPosition( target ) {

    		this.updateWorldMatrix( true, false );

    		return target.setFromMatrixPosition( this.matrixWorld );

    	}

    	/**
    	 * Returns a Quaternion representing the position of the 3D object in world space.
    	 *
    	 * @param {Quaternion} target - The target Quaternion the result is stored to.
    	 * @return {Quaternion} The 3D object's rotation in world space.
    	 */
    	getWorldQuaternion( target ) {

    		this.updateWorldMatrix( true, false );

    		this.matrixWorld.decompose( _position$3, target, _scale$2 );

    		return target;

    	}

    	/**
    	 * Returns a vector representing the scale of the 3D object in world space.
    	 *
    	 * @param {Vector3} target - The target vector the result is stored to.
    	 * @return {Vector3} The 3D object's scale in world space.
    	 */
    	getWorldScale( target ) {

    		this.updateWorldMatrix( true, false );

    		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

    		return target;

    	}

    	/**
    	 * Returns a vector representing the ("look") direction of the 3D object in world space.
    	 *
    	 * @param {Vector3} target - The target vector the result is stored to.
    	 * @return {Vector3} The 3D object's direction in world space.
    	 */
    	getWorldDirection( target ) {

    		this.updateWorldMatrix( true, false );

    		const e = this.matrixWorld.elements;

    		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

    	}

    	/**
    	 * Abstract method to get intersections between a casted ray and this
    	 * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
    	 * implement this method in order to use raycasting.
    	 *
    	 * @abstract
    	 * @param {Raycaster} raycaster - The raycaster.
    	 * @param {Array<Object>} intersects - An array holding the result of the method.
    	 */
    	raycast( /* raycaster, intersects */ ) {}

    	/**
    	 * Executes the callback on this 3D object and all descendants.
    	 *
    	 * Note: Modifying the scene graph inside the callback is discouraged.
    	 *
    	 * @param {Function} callback - A callback function that allows to process the current 3D object.
    	 */
    	traverse( callback ) {

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverse( callback );

    		}

    	}

    	/**
    	 * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
    	 * Descendants of invisible 3D objects are not traversed.
    	 *
    	 * Note: Modifying the scene graph inside the callback is discouraged.
    	 *
    	 * @param {Function} callback - A callback function that allows to process the current 3D object.
    	 */
    	traverseVisible( callback ) {

    		if ( this.visible === false ) return;

    		callback( this );

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			children[ i ].traverseVisible( callback );

    		}

    	}

    	/**
    	 * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
    	 *
    	 * Note: Modifying the scene graph inside the callback is discouraged.
    	 *
    	 * @param {Function} callback - A callback function that allows to process the current 3D object.
    	 */
    	traverseAncestors( callback ) {

    		const parent = this.parent;

    		if ( parent !== null ) {

    			callback( parent );

    			parent.traverseAncestors( callback );

    		}

    	}

    	/**
    	 * Updates the transformation matrix in local space by computing it from the current
    	 * position, rotation and scale values.
    	 */
    	updateMatrix() {

    		this.matrix.compose( this.position, this.quaternion, this.scale );

    		this.matrixWorldNeedsUpdate = true;

    	}

    	/**
    	 * Updates the transformation matrix in world space of this 3D objects and its descendants.
    	 *
    	 * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
    	 * local space. The computation of the local and world matrix can be controlled with the
    	 * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
    	 * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
    	 *
    	 * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
    	 * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
    	 */
    	updateMatrixWorld( force ) {

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.matrixWorldNeedsUpdate || force ) {

    			if ( this.matrixWorldAutoUpdate === true ) {

    				if ( this.parent === null ) {

    					this.matrixWorld.copy( this.matrix );

    				} else {

    					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    				}

    			}

    			this.matrixWorldNeedsUpdate = false;

    			force = true;

    		}

    		// make sure descendants are updated if required

    		const children = this.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			const child = children[ i ];

    			child.updateMatrixWorld( force );

    		}

    	}

    	/**
    	 * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
    	 * update of ancestor and descendant nodes.
    	 *
    	 * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
    	 * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
    	 */
    	updateWorldMatrix( updateParents, updateChildren ) {

    		const parent = this.parent;

    		if ( updateParents === true && parent !== null ) {

    			parent.updateWorldMatrix( true, false );

    		}

    		if ( this.matrixAutoUpdate ) this.updateMatrix();

    		if ( this.matrixWorldAutoUpdate === true ) {

    			if ( this.parent === null ) {

    				this.matrixWorld.copy( this.matrix );

    			} else {

    				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

    			}

    		}

    		// make sure descendants are updated

    		if ( updateChildren === true ) {

    			const children = this.children;

    			for ( let i = 0, l = children.length; i < l; i ++ ) {

    				const child = children[ i ];

    				child.updateWorldMatrix( false, true );

    			}

    		}

    	}

    	/**
    	 * Serializes the 3D object into JSON.
    	 *
    	 * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
    	 * @return {Object} A JSON object representing the serialized 3D object.
    	 * @see {@link ObjectLoader#parse}
    	 */
    	toJSON( meta ) {

    		// meta is a string when called from JSON.stringify
    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		const output = {};

    		// meta is a hash used to collect geometries, materials.
    		// not providing it implies that this is the root object
    		// being serialized.
    		if ( isRootObject ) {

    			// initialize meta obj
    			meta = {
    				geometries: {},
    				materials: {},
    				textures: {},
    				images: {},
    				shapes: {},
    				skeletons: {},
    				animations: {},
    				nodes: {}
    			};

    			output.metadata = {
    				version: 4.7,
    				type: 'Object',
    				generator: 'Object3D.toJSON'
    			};

    		}

    		// standard Object3D serialization

    		const object = {};

    		object.uuid = this.uuid;
    		object.type = this.type;

    		if ( this.name !== '' ) object.name = this.name;
    		if ( this.castShadow === true ) object.castShadow = true;
    		if ( this.receiveShadow === true ) object.receiveShadow = true;
    		if ( this.visible === false ) object.visible = false;
    		if ( this.frustumCulled === false ) object.frustumCulled = false;
    		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
    		if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

    		object.layers = this.layers.mask;
    		object.matrix = this.matrix.toArray();
    		object.up = this.up.toArray();

    		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

    		// object specific properties

    		if ( this.isInstancedMesh ) {

    			object.type = 'InstancedMesh';
    			object.count = this.count;
    			object.instanceMatrix = this.instanceMatrix.toJSON();
    			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

    		}

    		if ( this.isBatchedMesh ) {

    			object.type = 'BatchedMesh';
    			object.perObjectFrustumCulled = this.perObjectFrustumCulled;
    			object.sortObjects = this.sortObjects;

    			object.drawRanges = this._drawRanges;
    			object.reservedRanges = this._reservedRanges;

    			object.geometryInfo = this._geometryInfo.map( info => ( {
    				...info,
    				boundingBox: info.boundingBox ? info.boundingBox.toJSON() : undefined,
    				boundingSphere: info.boundingSphere ? info.boundingSphere.toJSON() : undefined
    			} ) );
    			object.instanceInfo = this._instanceInfo.map( info => ( { ...info } ) );

    			object.availableInstanceIds = this._availableInstanceIds.slice();
    			object.availableGeometryIds = this._availableGeometryIds.slice();

    			object.nextIndexStart = this._nextIndexStart;
    			object.nextVertexStart = this._nextVertexStart;
    			object.geometryCount = this._geometryCount;

    			object.maxInstanceCount = this._maxInstanceCount;
    			object.maxVertexCount = this._maxVertexCount;
    			object.maxIndexCount = this._maxIndexCount;

    			object.geometryInitialized = this._geometryInitialized;

    			object.matricesTexture = this._matricesTexture.toJSON( meta );

    			object.indirectTexture = this._indirectTexture.toJSON( meta );

    			if ( this._colorsTexture !== null ) {

    				object.colorsTexture = this._colorsTexture.toJSON( meta );

    			}

    			if ( this.boundingSphere !== null ) {

    				object.boundingSphere = this.boundingSphere.toJSON();

    			}

    			if ( this.boundingBox !== null ) {

    				object.boundingBox = this.boundingBox.toJSON();

    			}

    		}

    		//

    		function serialize( library, element ) {

    			if ( library[ element.uuid ] === undefined ) {

    				library[ element.uuid ] = element.toJSON( meta );

    			}

    			return element.uuid;

    		}

    		if ( this.isScene ) {

    			if ( this.background ) {

    				if ( this.background.isColor ) {

    					object.background = this.background.toJSON();

    				} else if ( this.background.isTexture ) {

    					object.background = this.background.toJSON( meta ).uuid;

    				}

    			}

    			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

    				object.environment = this.environment.toJSON( meta ).uuid;

    			}

    		} else if ( this.isMesh || this.isLine || this.isPoints ) {

    			object.geometry = serialize( meta.geometries, this.geometry );

    			const parameters = this.geometry.parameters;

    			if ( parameters !== undefined && parameters.shapes !== undefined ) {

    				const shapes = parameters.shapes;

    				if ( Array.isArray( shapes ) ) {

    					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

    						const shape = shapes[ i ];

    						serialize( meta.shapes, shape );

    					}

    				} else {

    					serialize( meta.shapes, shapes );

    				}

    			}

    		}

    		if ( this.isSkinnedMesh ) {

    			object.bindMode = this.bindMode;
    			object.bindMatrix = this.bindMatrix.toArray();

    			if ( this.skeleton !== undefined ) {

    				serialize( meta.skeletons, this.skeleton );

    				object.skeleton = this.skeleton.uuid;

    			}

    		}

    		if ( this.material !== undefined ) {

    			if ( Array.isArray( this.material ) ) {

    				const uuids = [];

    				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

    					uuids.push( serialize( meta.materials, this.material[ i ] ) );

    				}

    				object.material = uuids;

    			} else {

    				object.material = serialize( meta.materials, this.material );

    			}

    		}

    		//

    		if ( this.children.length > 0 ) {

    			object.children = [];

    			for ( let i = 0; i < this.children.length; i ++ ) {

    				object.children.push( this.children[ i ].toJSON( meta ).object );

    			}

    		}

    		//

    		if ( this.animations.length > 0 ) {

    			object.animations = [];

    			for ( let i = 0; i < this.animations.length; i ++ ) {

    				const animation = this.animations[ i ];

    				object.animations.push( serialize( meta.animations, animation ) );

    			}

    		}

    		if ( isRootObject ) {

    			const geometries = extractFromCache( meta.geometries );
    			const materials = extractFromCache( meta.materials );
    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );
    			const shapes = extractFromCache( meta.shapes );
    			const skeletons = extractFromCache( meta.skeletons );
    			const animations = extractFromCache( meta.animations );
    			const nodes = extractFromCache( meta.nodes );

    			if ( geometries.length > 0 ) output.geometries = geometries;
    			if ( materials.length > 0 ) output.materials = materials;
    			if ( textures.length > 0 ) output.textures = textures;
    			if ( images.length > 0 ) output.images = images;
    			if ( shapes.length > 0 ) output.shapes = shapes;
    			if ( skeletons.length > 0 ) output.skeletons = skeletons;
    			if ( animations.length > 0 ) output.animations = animations;
    			if ( nodes.length > 0 ) output.nodes = nodes;

    		}

    		output.object = object;

    		return output;

    		// extract data from the cache hash
    		// remove metadata on each item
    		// and return as array
    		function extractFromCache( cache ) {

    			const values = [];
    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    	}

    	/**
    	 * Returns a new 3D object with copied values from this instance.
    	 *
    	 * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
    	 * @return {Object3D} A clone of this instance.
    	 */
    	clone( recursive ) {

    		return new this.constructor().copy( this, recursive );

    	}

    	/**
    	 * Copies the values of the given 3D object to this instance.
    	 *
    	 * @param {Object3D} source - The 3D object to copy.
    	 * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
    	 * @return {Object3D} A reference to this instance.
    	 */
    	copy( source, recursive = true ) {

    		this.name = source.name;

    		this.up.copy( source.up );

    		this.position.copy( source.position );
    		this.rotation.order = source.rotation.order;
    		this.quaternion.copy( source.quaternion );
    		this.scale.copy( source.scale );

    		this.matrix.copy( source.matrix );
    		this.matrixWorld.copy( source.matrixWorld );

    		this.matrixAutoUpdate = source.matrixAutoUpdate;

    		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
    		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

    		this.layers.mask = source.layers.mask;
    		this.visible = source.visible;

    		this.castShadow = source.castShadow;
    		this.receiveShadow = source.receiveShadow;

    		this.frustumCulled = source.frustumCulled;
    		this.renderOrder = source.renderOrder;

    		this.animations = source.animations.slice();

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		if ( recursive === true ) {

    			for ( let i = 0; i < source.children.length; i ++ ) {

    				const child = source.children[ i ];
    				this.add( child.clone() );

    			}

    		}

    		return this;

    	}

    }

    /**
     * The default up direction for objects, also used as the default
     * position for {@link DirectionalLight} and {@link HemisphereLight}.
     *
     * @static
     * @type {Vector3}
     * @default (0,1,0)
     */
    Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );

    /**
     * The default setting for {@link Object3D#matrixAutoUpdate} for
     * newly created 3D objects.
     *
     * @static
     * @type {boolean}
     * @default true
     */
    Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;

    /**
     * The default setting for {@link Object3D#matrixWorldAutoUpdate} for
     * newly created 3D objects.
     *
     * @static
     * @type {boolean}
     * @default true
     */
    Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

    const _v0$1 = /*@__PURE__*/ new Vector3();
    const _v1$3 = /*@__PURE__*/ new Vector3();
    const _v2$2 = /*@__PURE__*/ new Vector3();
    const _v3$2 = /*@__PURE__*/ new Vector3();

    const _vab = /*@__PURE__*/ new Vector3();
    const _vac = /*@__PURE__*/ new Vector3();
    const _vbc = /*@__PURE__*/ new Vector3();
    const _vap = /*@__PURE__*/ new Vector3();
    const _vbp = /*@__PURE__*/ new Vector3();
    const _vcp = /*@__PURE__*/ new Vector3();

    const _v40 = /*@__PURE__*/ new Vector4();
    const _v41 = /*@__PURE__*/ new Vector4();
    const _v42 = /*@__PURE__*/ new Vector4();

    /**
     * A geometric triangle as defined by three vectors representing its three corners.
     */
    class Triangle {

    	/**
    	 * Constructs a new triangle.
    	 *
    	 * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
    	 * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
    	 * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
    	 */
    	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

    		/**
    		 * The first corner of the triangle.
    		 *
    		 * @type {Vector3}
    		 */
    		this.a = a;

    		/**
    		 * The second corner of the triangle.
    		 *
    		 * @type {Vector3}
    		 */
    		this.b = b;

    		/**
    		 * The third corner of the triangle.
    		 *
    		 * @type {Vector3}
    		 */
    		this.c = c;

    	}

    	/**
    	 * Computes the normal vector of a triangle.
    	 *
    	 * @param {Vector3} a - The first corner of the triangle.
    	 * @param {Vector3} b - The second corner of the triangle.
    	 * @param {Vector3} c - The third corner of the triangle.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The triangle's normal.
    	 */
    	static getNormal( a, b, c, target ) {

    		target.subVectors( c, b );
    		_v0$1.subVectors( a, b );
    		target.cross( _v0$1 );

    		const targetLengthSq = target.lengthSq();
    		if ( targetLengthSq > 0 ) {

    			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

    		}

    		return target.set( 0, 0, 0 );

    	}

    	/**
    	 * Computes a barycentric coordinates from the given vector.
    	 * Returns `null` if the triangle is degenerate.
    	 *
    	 * @param {Vector3} point - A point in 3D space.
    	 * @param {Vector3} a - The first corner of the triangle.
    	 * @param {Vector3} b - The second corner of the triangle.
    	 * @param {Vector3} c - The third corner of the triangle.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The barycentric coordinates for the given point
    	 */
    	static getBarycoord( point, a, b, c, target ) {

    		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html

    		_v0$1.subVectors( c, a );
    		_v1$3.subVectors( b, a );
    		_v2$2.subVectors( point, a );

    		const dot00 = _v0$1.dot( _v0$1 );
    		const dot01 = _v0$1.dot( _v1$3 );
    		const dot02 = _v0$1.dot( _v2$2 );
    		const dot11 = _v1$3.dot( _v1$3 );
    		const dot12 = _v1$3.dot( _v2$2 );

    		const denom = ( dot00 * dot11 - dot01 * dot01 );

    		// collinear or singular triangle
    		if ( denom === 0 ) {

    			target.set( 0, 0, 0 );
    			return null;

    		}

    		const invDenom = 1 / denom;
    		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
    		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

    		// barycentric coordinates must always sum to 1
    		return target.set( 1 - u - v, v, u );

    	}

    	/**
    	 * Returns `true` if the given point, when projected onto the plane of the
    	 * triangle, lies within the triangle.
    	 *
    	 * @param {Vector3} point - The point in 3D space to test.
    	 * @param {Vector3} a - The first corner of the triangle.
    	 * @param {Vector3} b - The second corner of the triangle.
    	 * @param {Vector3} c - The third corner of the triangle.
    	 * @return {boolean} Whether the given point, when projected onto the plane of the
    	 * triangle, lies within the triangle or not.
    	 */
    	static containsPoint( point, a, b, c ) {

    		// if the triangle is degenerate then we can't contain a point
    		if ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {

    			return false;

    		}

    		return ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );

    	}

    	/**
    	 * Computes the value barycentrically interpolated for the given point on the
    	 * triangle. Returns `null` if the triangle is degenerate.
    	 *
    	 * @param {Vector3} point - Position of interpolated point.
    	 * @param {Vector3} p1 - The first corner of the triangle.
    	 * @param {Vector3} p2 - The second corner of the triangle.
    	 * @param {Vector3} p3 - The third corner of the triangle.
    	 * @param {Vector3} v1 - Value to interpolate of first vertex.
    	 * @param {Vector3} v2 - Value to interpolate of second vertex.
    	 * @param {Vector3} v3 - Value to interpolate of third vertex.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The interpolated value.
    	 */
    	static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

    		if ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {

    			target.x = 0;
    			target.y = 0;
    			if ( 'z' in target ) target.z = 0;
    			if ( 'w' in target ) target.w = 0;
    			return null;

    		}

    		target.setScalar( 0 );
    		target.addScaledVector( v1, _v3$2.x );
    		target.addScaledVector( v2, _v3$2.y );
    		target.addScaledVector( v3, _v3$2.z );

    		return target;

    	}

    	/**
    	 * Computes the value barycentrically interpolated for the given attribute and indices.
    	 *
    	 * @param {BufferAttribute} attr - The attribute to interpolate.
    	 * @param {number} i1 - Index of first vertex.
    	 * @param {number} i2 - Index of second vertex.
    	 * @param {number} i3 - Index of third vertex.
    	 * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The interpolated attribute value.
    	 */
    	static getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {

    		_v40.setScalar( 0 );
    		_v41.setScalar( 0 );
    		_v42.setScalar( 0 );

    		_v40.fromBufferAttribute( attr, i1 );
    		_v41.fromBufferAttribute( attr, i2 );
    		_v42.fromBufferAttribute( attr, i3 );

    		target.setScalar( 0 );
    		target.addScaledVector( _v40, barycoord.x );
    		target.addScaledVector( _v41, barycoord.y );
    		target.addScaledVector( _v42, barycoord.z );

    		return target;

    	}

    	/**
    	 * Returns `true` if the triangle is oriented towards the given direction.
    	 *
    	 * @param {Vector3} a - The first corner of the triangle.
    	 * @param {Vector3} b - The second corner of the triangle.
    	 * @param {Vector3} c - The third corner of the triangle.
    	 * @param {Vector3} direction - The (normalized) direction vector.
    	 * @return {boolean} Whether the triangle is oriented towards the given direction or not.
    	 */
    	static isFrontFacing( a, b, c, direction ) {

    		_v0$1.subVectors( c, b );
    		_v1$3.subVectors( a, b );

    		// strictly front facing
    		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

    	}

    	/**
    	 * Sets the triangle's vertices by copying the given values.
    	 *
    	 * @param {Vector3} a - The first corner of the triangle.
    	 * @param {Vector3} b - The second corner of the triangle.
    	 * @param {Vector3} c - The third corner of the triangle.
    	 * @return {Triangle} A reference to this triangle.
    	 */
    	set( a, b, c ) {

    		this.a.copy( a );
    		this.b.copy( b );
    		this.c.copy( c );

    		return this;

    	}

    	/**
    	 * Sets the triangle's vertices by copying the given array values.
    	 *
    	 * @param {Array<Vector3>} points - An array with 3D points.
    	 * @param {number} i0 - The array index representing the first corner of the triangle.
    	 * @param {number} i1 - The array index representing the second corner of the triangle.
    	 * @param {number} i2 - The array index representing the third corner of the triangle.
    	 * @return {Triangle} A reference to this triangle.
    	 */
    	setFromPointsAndIndices( points, i0, i1, i2 ) {

    		this.a.copy( points[ i0 ] );
    		this.b.copy( points[ i1 ] );
    		this.c.copy( points[ i2 ] );

    		return this;

    	}

    	/**
    	 * Sets the triangle's vertices by copying the given attribute values.
    	 *
    	 * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
    	 * @param {number} i0 - The attribute index representing the first corner of the triangle.
    	 * @param {number} i1 - The attribute index representing the second corner of the triangle.
    	 * @param {number} i2 - The attribute index representing the third corner of the triangle.
    	 * @return {Triangle} A reference to this triangle.
    	 */
    	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

    		this.a.fromBufferAttribute( attribute, i0 );
    		this.b.fromBufferAttribute( attribute, i1 );
    		this.c.fromBufferAttribute( attribute, i2 );

    		return this;

    	}

    	/**
    	 * Returns a new triangle with copied values from this instance.
    	 *
    	 * @return {Triangle} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the values of the given triangle to this instance.
    	 *
    	 * @param {Triangle} triangle - The triangle to copy.
    	 * @return {Triangle} A reference to this triangle.
    	 */
    	copy( triangle ) {

    		this.a.copy( triangle.a );
    		this.b.copy( triangle.b );
    		this.c.copy( triangle.c );

    		return this;

    	}

    	/**
    	 * Computes the area of the triangle.
    	 *
    	 * @return {number} The triangle's area.
    	 */
    	getArea() {

    		_v0$1.subVectors( this.c, this.b );
    		_v1$3.subVectors( this.a, this.b );

    		return _v0$1.cross( _v1$3 ).length() * 0.5;

    	}

    	/**
    	 * Computes the midpoint of the triangle.
    	 *
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The triangle's midpoint.
    	 */
    	getMidpoint( target ) {

    		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

    	}

    	/**
    	 * Computes the normal of the triangle.
    	 *
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The triangle's normal.
    	 */
    	getNormal( target ) {

    		return Triangle.getNormal( this.a, this.b, this.c, target );

    	}

    	/**
    	 * Computes a plane the triangle lies within.
    	 *
    	 * @param {Plane} target - The target vector that is used to store the method's result.
    	 * @return {Plane} The plane the triangle lies within.
    	 */
    	getPlane( target ) {

    		return target.setFromCoplanarPoints( this.a, this.b, this.c );

    	}

    	/**
    	 * Computes a barycentric coordinates from the given vector.
    	 * Returns `null` if the triangle is degenerate.
    	 *
    	 * @param {Vector3} point - A point in 3D space.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The barycentric coordinates for the given point
    	 */
    	getBarycoord( point, target ) {

    		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

    	}

    	/**
    	 * Computes the value barycentrically interpolated for the given point on the
    	 * triangle. Returns `null` if the triangle is degenerate.
    	 *
    	 * @param {Vector3} point - Position of interpolated point.
    	 * @param {Vector3} v1 - Value to interpolate of first vertex.
    	 * @param {Vector3} v2 - Value to interpolate of second vertex.
    	 * @param {Vector3} v3 - Value to interpolate of third vertex.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The interpolated value.
    	 */
    	getInterpolation( point, v1, v2, v3, target ) {

    		return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

    	}

    	/**
    	 * Returns `true` if the given point, when projected onto the plane of the
    	 * triangle, lies within the triangle.
    	 *
    	 * @param {Vector3} point - The point in 3D space to test.
    	 * @return {boolean} Whether the given point, when projected onto the plane of the
    	 * triangle, lies within the triangle or not.
    	 */
    	containsPoint( point ) {

    		return Triangle.containsPoint( point, this.a, this.b, this.c );

    	}

    	/**
    	 * Returns `true` if the triangle is oriented towards the given direction.
    	 *
    	 * @param {Vector3} direction - The (normalized) direction vector.
    	 * @return {boolean} Whether the triangle is oriented towards the given direction or not.
    	 */
    	isFrontFacing( direction ) {

    		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

    	}

    	/**
    	 * Returns `true` if this triangle intersects with the given box.
    	 *
    	 * @param {Box3} box - The box to intersect.
    	 * @return {boolean} Whether this triangle intersects with the given box or not.
    	 */
    	intersectsBox( box ) {

    		return box.intersectsTriangle( this );

    	}

    	/**
    	 * Returns the closest point on the triangle to the given point.
    	 *
    	 * @param {Vector3} p - The point to compute the closest point for.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The closest point on the triangle.
    	 */
    	closestPointToPoint( p, target ) {

    		const a = this.a, b = this.b, c = this.c;
    		let v, w;

    		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
    		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
    		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
    		// basically, we're distinguishing which of the voronoi regions of the triangle
    		// the point lies in with the minimum amount of redundant computation.

    		_vab.subVectors( b, a );
    		_vac.subVectors( c, a );
    		_vap.subVectors( p, a );
    		const d1 = _vab.dot( _vap );
    		const d2 = _vac.dot( _vap );
    		if ( d1 <= 0 && d2 <= 0 ) {

    			// vertex region of A; barycentric coords (1, 0, 0)
    			return target.copy( a );

    		}

    		_vbp.subVectors( p, b );
    		const d3 = _vab.dot( _vbp );
    		const d4 = _vac.dot( _vbp );
    		if ( d3 >= 0 && d4 <= d3 ) {

    			// vertex region of B; barycentric coords (0, 1, 0)
    			return target.copy( b );

    		}

    		const vc = d1 * d4 - d3 * d2;
    		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

    			v = d1 / ( d1 - d3 );
    			// edge region of AB; barycentric coords (1-v, v, 0)
    			return target.copy( a ).addScaledVector( _vab, v );

    		}

    		_vcp.subVectors( p, c );
    		const d5 = _vab.dot( _vcp );
    		const d6 = _vac.dot( _vcp );
    		if ( d6 >= 0 && d5 <= d6 ) {

    			// vertex region of C; barycentric coords (0, 0, 1)
    			return target.copy( c );

    		}

    		const vb = d5 * d2 - d1 * d6;
    		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

    			w = d2 / ( d2 - d6 );
    			// edge region of AC; barycentric coords (1-w, 0, w)
    			return target.copy( a ).addScaledVector( _vac, w );

    		}

    		const va = d3 * d6 - d5 * d4;
    		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

    			_vbc.subVectors( c, b );
    			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
    			// edge region of BC; barycentric coords (0, 1-w, w)
    			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

    		}

    		// face region
    		const denom = 1 / ( va + vb + vc );
    		// u = va * denom
    		v = vb * denom;
    		w = vc * denom;

    		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

    	}

    	/**
    	 * Returns `true` if this triangle is equal with the given one.
    	 *
    	 * @param {Triangle} triangle - The triangle to test for equality.
    	 * @return {boolean} Whether this triangle is equal with the given one.
    	 */
    	equals( triangle ) {

    		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

    	}

    }

    const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
    	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
    	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
    	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
    	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
    	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
    	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
    	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
    	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
    	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
    	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
    	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
    	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
    	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
    	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
    	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
    	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
    	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
    	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
    	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
    	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
    	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
    	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
    	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

    const _hslA = { h: 0, s: 0, l: 0 };
    const _hslB = { h: 0, s: 0, l: 0 };

    function hue2rgb( p, q, t ) {

    	if ( t < 0 ) t += 1;
    	if ( t > 1 ) t -= 1;
    	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
    	if ( t < 1 / 2 ) return q;
    	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
    	return p;

    }

    /**
     * A Color instance is represented by RGB components in the linear <i>working
     * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs
     * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS
     * strings) are converted to the working color space automatically.
     *
     * ```js
     * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace
     * const color = new THREE.Color().setHex( 0x112233 );
     * ```
     * Source color spaces may be specified explicitly, to ensure correct conversions.
     * ```js
     * // assumed already LinearSRGBColorSpace; no conversion
     * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );
     *
     * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace
     * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );
     * ```
     * If THREE.ColorManagement is disabled, no conversions occur. For details,
     * see <i>Color management</i>. Iterating through a Color instance will yield
     * its components (r, g, b) in the corresponding order. A Color can be initialised
     * in any of the following ways:
     * ```js
     * //empty constructor - will default white
     * const color1 = new THREE.Color();
     *
     * //Hexadecimal color (recommended)
     * const color2 = new THREE.Color( 0xff0000 );
     *
     * //RGB string
     * const color3 = new THREE.Color("rgb(255, 0, 0)");
     * const color4 = new THREE.Color("rgb(100%, 0%, 0%)");
     *
     * //X11 color name - all 140 color names are supported.
     * //Note the lack of CamelCase in the name
     * const color5 = new THREE.Color( 'skyblue' );
     * //HSL string
     * const color6 = new THREE.Color("hsl(0, 100%, 50%)");
     *
     * //Separate RGB values between 0 and 1
     * const color7 = new THREE.Color( 1, 0, 0 );
     * ```
     */
    class Color {

    	/**
    	 * Constructs a new color.
    	 *
    	 * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
    	 * and that method is used throughout the rest of the documentation.
    	 *
    	 * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
    	 * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
    	 * @param {number} [g] - The green component.
    	 * @param {number} [b] - The blue component.
    	 */
    	constructor( r, g, b ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isColor = true;

    		/**
    		 * The red component.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.r = 1;

    		/**
    		 * The green component.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.g = 1;

    		/**
    		 * The blue component.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.b = 1;

    		return this.set( r, g, b );

    	}

    	/**
    	 * Sets the colors's components from the given values.
    	 *
    	 * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
    	 * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
    	 * @param {number} [g] - The green component.
    	 * @param {number} [b] - The blue component.
    	 * @return {Color} A reference to this color.
    	 */
    	set( r, g, b ) {

    		if ( g === undefined && b === undefined ) {

    			// r is THREE.Color, hex or string

    			const value = r;

    			if ( value && value.isColor ) {

    				this.copy( value );

    			} else if ( typeof value === 'number' ) {

    				this.setHex( value );

    			} else if ( typeof value === 'string' ) {

    				this.setStyle( value );

    			}

    		} else {

    			this.setRGB( r, g, b );

    		}

    		return this;

    	}

    	/**
    	 * Sets the colors's components to the given scalar value.
    	 *
    	 * @param {number} scalar - The scalar value.
    	 * @return {Color} A reference to this color.
    	 */
    	setScalar( scalar ) {

    		this.r = scalar;
    		this.g = scalar;
    		this.b = scalar;

    		return this;

    	}

    	/**
    	 * Sets this color from a hexadecimal value.
    	 *
    	 * @param {number} hex - The hexadecimal value.
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {Color} A reference to this color.
    	 */
    	setHex( hex, colorSpace = SRGBColorSpace ) {

    		hex = Math.floor( hex );

    		this.r = ( hex >> 16 & 255 ) / 255;
    		this.g = ( hex >> 8 & 255 ) / 255;
    		this.b = ( hex & 255 ) / 255;

    		ColorManagement.colorSpaceToWorking( this, colorSpace );

    		return this;

    	}

    	/**
    	 * Sets this color from RGB values.
    	 *
    	 * @param {number} r - Red channel value between `0.0` and `1.0`.
    	 * @param {number} g - Green channel value between `0.0` and `1.0`.
    	 * @param {number} b - Blue channel value between `0.0` and `1.0`.
    	 * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
    	 * @return {Color} A reference to this color.
    	 */
    	setRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {

    		this.r = r;
    		this.g = g;
    		this.b = b;

    		ColorManagement.colorSpaceToWorking( this, colorSpace );

    		return this;

    	}

    	/**
    	 * Sets this color from RGB values.
    	 *
    	 * @param {number} h - Hue value between `0.0` and `1.0`.
    	 * @param {number} s - Saturation value between `0.0` and `1.0`.
    	 * @param {number} l - Lightness value between `0.0` and `1.0`.
    	 * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
    	 * @return {Color} A reference to this color.
    	 */
    	setHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {

    		// h,s,l ranges are in 0.0 - 1.0
    		h = euclideanModulo( h, 1 );
    		s = clamp( s, 0, 1 );
    		l = clamp( l, 0, 1 );

    		if ( s === 0 ) {

    			this.r = this.g = this.b = l;

    		} else {

    			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
    			const q = ( 2 * l ) - p;

    			this.r = hue2rgb( q, p, h + 1 / 3 );
    			this.g = hue2rgb( q, p, h );
    			this.b = hue2rgb( q, p, h - 1 / 3 );

    		}

    		ColorManagement.colorSpaceToWorking( this, colorSpace );

    		return this;

    	}

    	/**
    	 * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
    	 * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
    	 * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
    	 * all 140 color names are supported).
    	 *
    	 * @param {string} style - Color as a CSS-style string.
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {Color} A reference to this color.
    	 */
    	setStyle( style, colorSpace = SRGBColorSpace ) {

    		function handleAlpha( string ) {

    			if ( string === undefined ) return;

    			if ( parseFloat( string ) < 1 ) {

    				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

    			}

    		}


    		let m;

    		if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

    			// rgb / hsl

    			let color;
    			const name = m[ 1 ];
    			const components = m[ 2 ];

    			switch ( name ) {

    				case 'rgb':
    				case 'rgba':

    					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// rgb(255,0,0) rgba(255,0,0,0.5)

    						handleAlpha( color[ 4 ] );

    						return this.setRGB(
    							Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
    							Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
    							Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
    							colorSpace
    						);

    					}

    					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

    						handleAlpha( color[ 4 ] );

    						return this.setRGB(
    							Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
    							Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
    							Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
    							colorSpace
    						);

    					}

    					break;

    				case 'hsl':
    				case 'hsla':

    					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

    						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

    						handleAlpha( color[ 4 ] );

    						return this.setHSL(
    							parseFloat( color[ 1 ] ) / 360,
    							parseFloat( color[ 2 ] ) / 100,
    							parseFloat( color[ 3 ] ) / 100,
    							colorSpace
    						);

    					}

    					break;

    				default:

    					console.warn( 'THREE.Color: Unknown color model ' + style );

    			}

    		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

    			// hex color

    			const hex = m[ 1 ];
    			const size = hex.length;

    			if ( size === 3 ) {

    				// #ff0
    				return this.setRGB(
    					parseInt( hex.charAt( 0 ), 16 ) / 15,
    					parseInt( hex.charAt( 1 ), 16 ) / 15,
    					parseInt( hex.charAt( 2 ), 16 ) / 15,
    					colorSpace
    				);

    			} else if ( size === 6 ) {

    				// #ff0000
    				return this.setHex( parseInt( hex, 16 ), colorSpace );

    			} else {

    				console.warn( 'THREE.Color: Invalid hex color ' + style );

    			}

    		} else if ( style && style.length > 0 ) {

    			return this.setColorName( style, colorSpace );

    		}

    		return this;

    	}

    	/**
    	 * Sets this color from a color name. Faster than {@link Color#setStyle} if
    	 * you don't need the other CSS-style formats.
    	 *
    	 * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
    	 * ```js
    	 * Color.NAMES.aliceblue // returns 0xF0F8FF
    	 * ```
    	 *
    	 * @param {string} style - The color name.
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {Color} A reference to this color.
    	 */
    	setColorName( style, colorSpace = SRGBColorSpace ) {

    		// color keywords
    		const hex = _colorKeywords[ style.toLowerCase() ];

    		if ( hex !== undefined ) {

    			// red
    			this.setHex( hex, colorSpace );

    		} else {

    			// unknown color
    			console.warn( 'THREE.Color: Unknown color ' + style );

    		}

    		return this;

    	}

    	/**
    	 * Returns a new color with copied values from this instance.
    	 *
    	 * @return {Color} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this.r, this.g, this.b );

    	}

    	/**
    	 * Copies the values of the given color to this instance.
    	 *
    	 * @param {Color} color - The color to copy.
    	 * @return {Color} A reference to this color.
    	 */
    	copy( color ) {

    		this.r = color.r;
    		this.g = color.g;
    		this.b = color.b;

    		return this;

    	}

    	/**
    	 * Copies the given color into this color, and then converts this color from
    	 * `SRGBColorSpace` to `LinearSRGBColorSpace`.
    	 *
    	 * @param {Color} color - The color to copy/convert.
    	 * @return {Color} A reference to this color.
    	 */
    	copySRGBToLinear( color ) {

    		this.r = SRGBToLinear( color.r );
    		this.g = SRGBToLinear( color.g );
    		this.b = SRGBToLinear( color.b );

    		return this;

    	}

    	/**
    	 * Copies the given color into this color, and then converts this color from
    	 * `LinearSRGBColorSpace` to `SRGBColorSpace`.
    	 *
    	 * @param {Color} color - The color to copy/convert.
    	 * @return {Color} A reference to this color.
    	 */
    	copyLinearToSRGB( color ) {

    		this.r = LinearToSRGB( color.r );
    		this.g = LinearToSRGB( color.g );
    		this.b = LinearToSRGB( color.b );

    		return this;

    	}

    	/**
    	 * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
    	 *
    	 * @return {Color} A reference to this color.
    	 */
    	convertSRGBToLinear() {

    		this.copySRGBToLinear( this );

    		return this;

    	}

    	/**
    	 * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
    	 *
    	 * @return {Color} A reference to this color.
    	 */
    	convertLinearToSRGB() {

    		this.copyLinearToSRGB( this );

    		return this;

    	}

    	/**
    	 * Returns the hexadecimal value of this color.
    	 *
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {number} The hexadecimal value.
    	 */
    	getHex( colorSpace = SRGBColorSpace ) {

    		ColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );

    		return Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );

    	}

    	/**
    	 * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
    	 *
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {string} The hexadecimal value as a string.
    	 */
    	getHexString( colorSpace = SRGBColorSpace ) {

    		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( -6 );

    	}

    	/**
    	 * Converts the colors RGB values into the HSL format and stores them into the
    	 * given target object.
    	 *
    	 * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
    	 * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
    	 * @return {{h:number,s:number,l:number}} The HSL representation of this color.
    	 */
    	getHSL( target, colorSpace = ColorManagement.workingColorSpace ) {

    		// h,s,l ranges are in 0.0 - 1.0

    		ColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );

    		const r = _color.r, g = _color.g, b = _color.b;

    		const max = Math.max( r, g, b );
    		const min = Math.min( r, g, b );

    		let hue, saturation;
    		const lightness = ( min + max ) / 2.0;

    		if ( min === max ) {

    			hue = 0;
    			saturation = 0;

    		} else {

    			const delta = max - min;

    			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

    			switch ( max ) {

    				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
    				case g: hue = ( b - r ) / delta + 2; break;
    				case b: hue = ( r - g ) / delta + 4; break;

    			}

    			hue /= 6;

    		}

    		target.h = hue;
    		target.s = saturation;
    		target.l = lightness;

    		return target;

    	}

    	/**
    	 * Returns the RGB values of this color and stores them into the given target object.
    	 *
    	 * @param {Color} target - The target color that is used to store the method's result.
    	 * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
    	 * @return {Color} The RGB representation of this color.
    	 */
    	getRGB( target, colorSpace = ColorManagement.workingColorSpace ) {

    		ColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );

    		target.r = _color.r;
    		target.g = _color.g;
    		target.b = _color.b;

    		return target;

    	}

    	/**
    	 * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
    	 *
    	 * @param {string} [colorSpace=SRGBColorSpace] - The color space.
    	 * @return {string} The CSS representation of this color.
    	 */
    	getStyle( colorSpace = SRGBColorSpace ) {

    		ColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );

    		const r = _color.r, g = _color.g, b = _color.b;

    		if ( colorSpace !== SRGBColorSpace ) {

    			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
    			return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

    		}

    		return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

    	}

    	/**
    	 * Adds the given HSL values to this color's values.
    	 * Internally, this converts the color's RGB values to HSL, adds HSL
    	 * and then converts the color back to RGB.
    	 *
    	 * @param {number} h - Hue value between `0.0` and `1.0`.
    	 * @param {number} s - Saturation value between `0.0` and `1.0`.
    	 * @param {number} l - Lightness value between `0.0` and `1.0`.
    	 * @return {Color} A reference to this color.
    	 */
    	offsetHSL( h, s, l ) {

    		this.getHSL( _hslA );

    		return this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );

    	}

    	/**
    	 * Adds the RGB values of the given color to the RGB values of this color.
    	 *
    	 * @param {Color} color - The color to add.
    	 * @return {Color} A reference to this color.
    	 */
    	add( color ) {

    		this.r += color.r;
    		this.g += color.g;
    		this.b += color.b;

    		return this;

    	}

    	/**
    	 * Adds the RGB values of the given colors and stores the result in this instance.
    	 *
    	 * @param {Color} color1 - The first color.
    	 * @param {Color} color2 - The second color.
    	 * @return {Color} A reference to this color.
    	 */
    	addColors( color1, color2 ) {

    		this.r = color1.r + color2.r;
    		this.g = color1.g + color2.g;
    		this.b = color1.b + color2.b;

    		return this;

    	}

    	/**
    	 * Adds the given scalar value to the RGB values of this color.
    	 *
    	 * @param {number} s - The scalar to add.
    	 * @return {Color} A reference to this color.
    	 */
    	addScalar( s ) {

    		this.r += s;
    		this.g += s;
    		this.b += s;

    		return this;

    	}

    	/**
    	 * Subtracts the RGB values of the given color from the RGB values of this color.
    	 *
    	 * @param {Color} color - The color to subtract.
    	 * @return {Color} A reference to this color.
    	 */
    	sub( color ) {

    		this.r = Math.max( 0, this.r - color.r );
    		this.g = Math.max( 0, this.g - color.g );
    		this.b = Math.max( 0, this.b - color.b );

    		return this;

    	}

    	/**
    	 * Multiplies the RGB values of the given color with the RGB values of this color.
    	 *
    	 * @param {Color} color - The color to multiply.
    	 * @return {Color} A reference to this color.
    	 */
    	multiply( color ) {

    		this.r *= color.r;
    		this.g *= color.g;
    		this.b *= color.b;

    		return this;

    	}

    	/**
    	 * Multiplies the given scalar value with the RGB values of this color.
    	 *
    	 * @param {number} s - The scalar to multiply.
    	 * @return {Color} A reference to this color.
    	 */
    	multiplyScalar( s ) {

    		this.r *= s;
    		this.g *= s;
    		this.b *= s;

    		return this;

    	}

    	/**
    	 * Linearly interpolates this color's RGB values toward the RGB values of the
    	 * given color. The alpha argument can be thought of as the ratio between
    	 * the two colors, where `0.0` is this color and `1.0` is the first argument.
    	 *
    	 * @param {Color} color - The color to converge on.
    	 * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
    	 * @return {Color} A reference to this color.
    	 */
    	lerp( color, alpha ) {

    		this.r += ( color.r - this.r ) * alpha;
    		this.g += ( color.g - this.g ) * alpha;
    		this.b += ( color.b - this.b ) * alpha;

    		return this;

    	}

    	/**
    	 * Linearly interpolates between the given colors and stores the result in this instance.
    	 * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
    	 * is the first and `1.0` is the second color.
    	 *
    	 * @param {Color} color1 - The first color.
    	 * @param {Color} color2 - The second color.
    	 * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
    	 * @return {Color} A reference to this color.
    	 */
    	lerpColors( color1, color2, alpha ) {

    		this.r = color1.r + ( color2.r - color1.r ) * alpha;
    		this.g = color1.g + ( color2.g - color1.g ) * alpha;
    		this.b = color1.b + ( color2.b - color1.b ) * alpha;

    		return this;

    	}

    	/**
    	 * Linearly interpolates this color's HSL values toward the HSL values of the
    	 * given color. It differs from {@link Color#lerp} by not interpolating straight
    	 * from one color to the other, but instead going through all the hues in between
    	 * those two colors. The alpha argument can be thought of as the ratio between
    	 * the two colors, where 0.0 is this color and 1.0 is the first argument.
    	 *
    	 * @param {Color} color - The color to converge on.
    	 * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
    	 * @return {Color} A reference to this color.
    	 */
    	lerpHSL( color, alpha ) {

    		this.getHSL( _hslA );
    		color.getHSL( _hslB );

    		const h = lerp( _hslA.h, _hslB.h, alpha );
    		const s = lerp( _hslA.s, _hslB.s, alpha );
    		const l = lerp( _hslA.l, _hslB.l, alpha );

    		this.setHSL( h, s, l );

    		return this;

    	}

    	/**
    	 * Sets the color's RGB components from the given 3D vector.
    	 *
    	 * @param {Vector3} v - The vector to set.
    	 * @return {Color} A reference to this color.
    	 */
    	setFromVector3( v ) {

    		this.r = v.x;
    		this.g = v.y;
    		this.b = v.z;

    		return this;

    	}

    	/**
    	 * Transforms this color with the given 3x3 matrix.
    	 *
    	 * @param {Matrix3} m - The matrix.
    	 * @return {Color} A reference to this color.
    	 */
    	applyMatrix3( m ) {

    		const r = this.r, g = this.g, b = this.b;
    		const e = m.elements;

    		this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
    		this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
    		this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

    		return this;

    	}

    	/**
    	 * Returns `true` if this color is equal with the given one.
    	 *
    	 * @param {Color} c - The color to test for equality.
    	 * @return {boolean} Whether this bounding color is equal with the given one.
    	 */
    	equals( c ) {

    		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

    	}

    	/**
    	 * Sets this color's RGB components from the given array.
    	 *
    	 * @param {Array<number>} array - An array holding the RGB values.
    	 * @param {number} [offset=0] - The offset into the array.
    	 * @return {Color} A reference to this color.
    	 */
    	fromArray( array, offset = 0 ) {

    		this.r = array[ offset ];
    		this.g = array[ offset + 1 ];
    		this.b = array[ offset + 2 ];

    		return this;

    	}

    	/**
    	 * Writes the RGB components of this color to the given array. If no array is provided,
    	 * the method returns a new instance.
    	 *
    	 * @param {Array<number>} [array=[]] - The target array holding the color components.
    	 * @param {number} [offset=0] - Index of the first element in the array.
    	 * @return {Array<number>} The color components.
    	 */
    	toArray( array = [], offset = 0 ) {

    		array[ offset ] = this.r;
    		array[ offset + 1 ] = this.g;
    		array[ offset + 2 ] = this.b;

    		return array;

    	}

    	/**
    	 * Sets the components of this color from the given buffer attribute.
    	 *
    	 * @param {BufferAttribute} attribute - The buffer attribute holding color data.
    	 * @param {number} index - The index into the attribute.
    	 * @return {Color} A reference to this color.
    	 */
    	fromBufferAttribute( attribute, index ) {

    		this.r = attribute.getX( index );
    		this.g = attribute.getY( index );
    		this.b = attribute.getZ( index );

    		return this;

    	}

    	/**
    	 * This methods defines the serialization result of this class. Returns the color
    	 * as a hexadecimal value.
    	 *
    	 * @return {number} The hexadecimal value.
    	 */
    	toJSON() {

    		return this.getHex();

    	}

    	*[ Symbol.iterator ]() {

    		yield this.r;
    		yield this.g;
    		yield this.b;

    	}

    }

    const _color = /*@__PURE__*/ new Color();

    /**
     * A dictionary with X11 color names.
     *
     * Note that multiple words such as Dark Orange become the string 'darkorange'.
     *
     * @static
     * @type {Object}
     */
    Color.NAMES = _colorKeywords;

    let _materialId = 0;

    /**
     * Abstract base class for materials.
     *
     * Materials define the appearance of renderable 3D objects.
     *
     * @abstract
     * @augments EventDispatcher
     */
    class Material extends EventDispatcher {

    	/**
    	 * Constructs a new material.
    	 */
    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isMaterial = true;

    		/**
    		 * The ID of the material.
    		 *
    		 * @name Material#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _materialId ++ } );

    		/**
    		 * The UUID of the material.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.uuid = generateUUID();

    		/**
    		 * The name of the material.
    		 *
    		 * @type {string}
    		 */
    		this.name = '';

    		/**
    		 * The type property is used for detecting the object type
    		 * in context of serialization/deserialization.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.type = 'Material';

    		/**
    		 * Defines the blending type of the material.
    		 *
    		 * It must be set to `CustomBlending` if custom blending properties like
    		 * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}
    		 * should have any effect.
    		 *
    		 * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}
    		 * @default NormalBlending
    		 */
    		this.blending = NormalBlending;

    		/**
    		 * Defines which side of faces will be rendered - front, back or both.
    		 *
    		 * @type {(FrontSide|BackSide|DoubleSide)}
    		 * @default FrontSide
    		 */
    		this.side = FrontSide;

    		/**
    		 * If set to `true`, vertex colors should be used.
    		 *
    		 * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or
    		 * four (RGBA) component color buffer attribute is used.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.vertexColors = false;

    		/**
    		 * Defines how transparent the material is.
    		 * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.
    		 *
    		 * If the {@link Material#transparent} is not set to `true`,
    		 * the material will remain fully opaque and this value will only affect its color.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.opacity = 1;

    		/**
    		 * Defines whether this material is transparent. This has an effect on
    		 * rendering as transparent objects need special treatment and are rendered
    		 * after non-transparent objects.
    		 *
    		 * When set to true, the extent to which the material is transparent is
    		 * controlled by {@link Material#opacity}.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.transparent = false;

    		/**
    		 * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or
    		 * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than
    		 * a random threshold. Randomization introduces some grain or noise, but approximates alpha
    		 * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.alphaHash = false;

    		/**
    		 * Defines the blending source factor.
    		 *
    		 * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
    		 * @default SrcAlphaFactor
    		 */
    		this.blendSrc = SrcAlphaFactor;

    		/**
    		 * Defines the blending destination factor.
    		 *
    		 * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
    		 * @default OneMinusSrcAlphaFactor
    		 */
    		this.blendDst = OneMinusSrcAlphaFactor;

    		/**
    		 * Defines the blending equation.
    		 *
    		 * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}
    		 * @default AddEquation
    		 */
    		this.blendEquation = AddEquation;

    		/**
    		 * Defines the blending source alpha factor.
    		 *
    		 * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
    		 * @default null
    		 */
    		this.blendSrcAlpha = null;

    		/**
    		 * Defines the blending destination alpha factor.
    		 *
    		 * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
    		 * @default null
    		 */
    		this.blendDstAlpha = null;

    		/**
    		 * Defines the blending equation of the alpha channel.
    		 *
    		 * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}
    		 * @default null
    		 */
    		this.blendEquationAlpha = null;

    		/**
    		 * Represents the RGB values of the constant blend color.
    		 *
    		 * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.
    		 *
    		 * @type {Color}
    		 * @default (0,0,0)
    		 */
    		this.blendColor = new Color( 0, 0, 0 );

    		/**
    		 * Represents the alpha value of the constant blend color.
    		 *
    		 * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.blendAlpha = 0;

    		/**
    		 * Defines the depth function.
    		 *
    		 * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}
    		 * @default LessEqualDepth
    		 */
    		this.depthFunc = LessEqualDepth;

    		/**
    		 * Whether to have depth test enabled when rendering this material.
    		 * When the depth test is disabled, the depth write will also be implicitly disabled.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.depthTest = true;

    		/**
    		 * Whether rendering this material has any effect on the depth buffer.
    		 *
    		 * When drawing 2D overlays it can be useful to disable the depth writing in
    		 * order to layer several things together without creating z-index artifacts.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.depthWrite = true;

    		/**
    		 * The bit mask to use when writing to the stencil buffer.
    		 *
    		 * @type {number}
    		 * @default 0xff
    		 */
    		this.stencilWriteMask = 0xff;

    		/**
    		 * The stencil comparison function to use.
    		 *
    		 * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}
    		 * @default AlwaysStencilFunc
    		 */
    		this.stencilFunc = AlwaysStencilFunc;

    		/**
    		 * The value to use when performing stencil comparisons or stencil operations.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.stencilRef = 0;

    		/**
    		 * The bit mask to use when comparing against the stencil buffer.
    		 *
    		 * @type {number}
    		 * @default 0xff
    		 */
    		this.stencilFuncMask = 0xff;

    		/**
    		 * Which stencil operation to perform when the comparison function returns `false`.
    		 *
    		 * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
    		 * @default KeepStencilOp
    		 */
    		this.stencilFail = KeepStencilOp;

    		/**
    		 * Which stencil operation to perform when the comparison function returns
    		 * `true` but the depth test fails.
    		 *
    		 * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
    		 * @default KeepStencilOp
    		 */
    		this.stencilZFail = KeepStencilOp;

    		/**
    		 * Which stencil operation to perform when the comparison function returns
    		 * `true` and the depth test passes.
    		 *
    		 * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
    		 * @default KeepStencilOp
    		 */
    		this.stencilZPass = KeepStencilOp;

    		/**
    		 * Whether stencil operations are performed against the stencil buffer. In
    		 * order to perform writes or comparisons against the stencil buffer this
    		 * value must be `true`.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.stencilWrite = false;

    		/**
    		 * User-defined clipping planes specified as THREE.Plane objects in world
    		 * space. These planes apply to the objects this material is attached to.
    		 * Points in space whose signed distance to the plane is negative are clipped
    		 * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to
    		 * be `true`.
    		 *
    		 * @type {?Array<Plane>}
    		 * @default null
    		 */
    		this.clippingPlanes = null;

    		/**
    		 * Changes the behavior of clipping planes so that only their intersection is
    		 * clipped, rather than their union.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.clipIntersection = false;

    		/**
    		 * Defines whether to clip shadows according to the clipping planes specified
    		 * on this material.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.clipShadows = false;

    		/**
    		 * Defines which side of faces cast shadows. If `null`, the side casting shadows
    		 * is determined as follows:
    		 *
    		 * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.
    		 * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.
    		 * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.
    		 *
    		 * @type {?(FrontSide|BackSide|DoubleSide)}
    		 * @default null
    		 */
    		this.shadowSide = null;

    		/**
    		 * Whether to render the material's color.
    		 *
    		 * This can be used in conjunction with {@link Object3D#renderOder} to create invisible
    		 * objects that occlude other objects.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.colorWrite = true;

    		/**
    		 * Override the renderer's default precision for this material.
    		 *
    		 * @type {?('highp'|'mediump'|'lowp')}
    		 * @default null
    		 */
    		this.precision = null;

    		/**
    		 * Whether to use polygon offset or not. When enabled, each fragment's depth value will
    		 * be offset after it is interpolated from the depth values of the appropriate vertices.
    		 * The offset is added before the depth test is performed and before the value is written
    		 * into the depth buffer.
    		 *
    		 * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for
    		 * rendering solids with highlighted edges.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.polygonOffset = false;

    		/**
    		 * Specifies a scale factor that is used to create a variable depth offset for each polygon.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.polygonOffsetFactor = 0;

    		/**
    		 * Is multiplied by an implementation-specific value to create a constant depth offset.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.polygonOffsetUnits = 0;

    		/**
    		 * Whether to apply dithering to the color to remove the appearance of banding.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.dithering = false;

    		/**
    		 * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts
    		 * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this
    		 * will smooth aliasing on clip plane edges and alphaTest-clipped edges.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.alphaToCoverage = false;

    		/**
    		 * Whether to premultiply the alpha (transparency) value.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.premultipliedAlpha = false;

    		/**
    		 * Whether double-sided, transparent objects should be rendered with a single pass or not.
    		 *
    		 * The engine renders double-sided, transparent objects with two draw calls (back faces first,
    		 * then front faces) to mitigate transparency artifacts. There are scenarios however where this
    		 * approach produces no quality gains but still doubles draw calls e.g. when rendering flat
    		 * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to
    		 * disable the two pass rendering to avoid performance issues.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.forceSinglePass = false;

    		/**
    		 * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.allowOverride = true;

    		/**
    		 * Defines whether 3D objects using this material are visible.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.visible = true;

    		/**
    		 * Defines whether this material is tone mapped according to the renderer's tone mapping setting.
    		 *
    		 * It is ignored when rendering to a render target or using post processing or when using
    		 * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.toneMapped = true;

    		/**
    		 * An object that can be used to store custom data about the Material. It
    		 * should not hold references to functions as these will not be cloned.
    		 *
    		 * @type {Object}
    		 */
    		this.userData = {};

    		/**
    		 * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.
    		 *
    		 * @type {number}
    		 * @readonly
    		 * @default 0
    		 */
    		this.version = 0;

    		this._alphaTest = 0;

    	}

    	/**
    	 * Sets the alpha value to be used when running an alpha test. The material
    	 * will not be rendered if the opacity is lower than this value.
    	 *
    	 * @type {number}
    	 * @readonly
    	 * @default 0
    	 */
    	get alphaTest() {

    		return this._alphaTest;

    	}

    	set alphaTest( value ) {

    		if ( this._alphaTest > 0 !== value > 0 ) {

    			this.version ++;

    		}

    		this._alphaTest = value;

    	}

    	/**
    	 * An optional callback that is executed immediately before the material is used to render a 3D object.
    	 *
    	 * This method can only be used when rendering with {@link WebGLRenderer}.
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 * @param {Scene} scene - The scene.
    	 * @param {Camera} camera - The camera that is used to render the scene.
    	 * @param {BufferGeometry} geometry - The 3D object's geometry.
    	 * @param {Object3D} object - The 3D object.
    	 * @param {Object} group - The geometry group data.
    	 */
    	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

    	/**
    	 * An optional callback that is executed immediately before the shader
    	 * program is compiled. This function is called with the shader source code
    	 * as a parameter. Useful for the modification of built-in materials.
    	 *
    	 * This method can only be used when rendering with {@link WebGLRenderer}. The
    	 * recommended approach when customizing materials is to use `WebGPURenderer` with the new
    	 * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
    	 *
    	 * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
    	 * @param {WebGLRenderer} renderer - A reference to the renderer.
    	 */
    	onBeforeCompile( /* shaderobject, renderer */ ) {}

    	/**
    	 * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
    	 * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
    	 * shader or recompile the shader for this material as needed.
    	 *
    	 * This method can only be used when rendering with {@link WebGLRenderer}.
    	 *
    	 * @return {string} The custom program cache key.
    	 */
    	customProgramCacheKey() {

    		return this.onBeforeCompile.toString();

    	}

    	/**
    	 * This method can be used to set default values from parameter objects.
    	 * It is a generic implementation so it can be used with different types
    	 * of materials.
    	 *
    	 * @param {Object} [values] - The material values to set.
    	 */
    	setValues( values ) {

    		if ( values === undefined ) return;

    		for ( const key in values ) {

    			const newValue = values[ key ];

    			if ( newValue === undefined ) {

    				console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
    				continue;

    			}

    			const currentValue = this[ key ];

    			if ( currentValue === undefined ) {

    				console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
    				continue;

    			}

    			if ( currentValue && currentValue.isColor ) {

    				currentValue.set( newValue );

    			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

    				currentValue.copy( newValue );

    			} else {

    				this[ key ] = newValue;

    			}

    		}

    	}

    	/**
    	 * Serializes the material into JSON.
    	 *
    	 * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
    	 * @return {Object} A JSON object representing the serialized material.
    	 * @see {@link ObjectLoader#parse}
    	 */
    	toJSON( meta ) {

    		const isRootObject = ( meta === undefined || typeof meta === 'string' );

    		if ( isRootObject ) {

    			meta = {
    				textures: {},
    				images: {}
    			};

    		}

    		const data = {
    			metadata: {
    				version: 4.7,
    				type: 'Material',
    				generator: 'Material.toJSON'
    			}
    		};

    		// standard Material serialization
    		data.uuid = this.uuid;
    		data.type = this.type;

    		if ( this.name !== '' ) data.name = this.name;

    		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

    		if ( this.roughness !== undefined ) data.roughness = this.roughness;
    		if ( this.metalness !== undefined ) data.metalness = this.metalness;

    		if ( this.sheen !== undefined ) data.sheen = this.sheen;
    		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
    		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
    		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
    		if ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

    		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
    		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
    		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
    		if ( this.shininess !== undefined ) data.shininess = this.shininess;
    		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
    		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

    		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

    			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

    			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

    		}

    		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

    			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
    			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

    		}

    		if ( this.dispersion !== undefined ) data.dispersion = this.dispersion;

    		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
    		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
    		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

    		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

    			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

    		}

    		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

    			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

    		}

    		if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
    		if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

    		if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

    			data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

    		}

    		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
    		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
    		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

    		if ( this.lightMap && this.lightMap.isTexture ) {

    			data.lightMap = this.lightMap.toJSON( meta ).uuid;
    			data.lightMapIntensity = this.lightMapIntensity;

    		}

    		if ( this.aoMap && this.aoMap.isTexture ) {

    			data.aoMap = this.aoMap.toJSON( meta ).uuid;
    			data.aoMapIntensity = this.aoMapIntensity;

    		}

    		if ( this.bumpMap && this.bumpMap.isTexture ) {

    			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
    			data.bumpScale = this.bumpScale;

    		}

    		if ( this.normalMap && this.normalMap.isTexture ) {

    			data.normalMap = this.normalMap.toJSON( meta ).uuid;
    			data.normalMapType = this.normalMapType;
    			data.normalScale = this.normalScale.toArray();

    		}

    		if ( this.displacementMap && this.displacementMap.isTexture ) {

    			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
    			data.displacementScale = this.displacementScale;
    			data.displacementBias = this.displacementBias;

    		}

    		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
    		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

    		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
    		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
    		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
    		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

    		if ( this.envMap && this.envMap.isTexture ) {

    			data.envMap = this.envMap.toJSON( meta ).uuid;

    			if ( this.combine !== undefined ) data.combine = this.combine;

    		}

    		if ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();
    		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
    		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
    		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

    		if ( this.gradientMap && this.gradientMap.isTexture ) {

    			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

    		}

    		if ( this.transmission !== undefined ) data.transmission = this.transmission;
    		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
    		if ( this.thickness !== undefined ) data.thickness = this.thickness;
    		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
    		if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
    		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

    		if ( this.size !== undefined ) data.size = this.size;
    		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
    		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

    		if ( this.blending !== NormalBlending ) data.blending = this.blending;
    		if ( this.side !== FrontSide ) data.side = this.side;
    		if ( this.vertexColors === true ) data.vertexColors = true;

    		if ( this.opacity < 1 ) data.opacity = this.opacity;
    		if ( this.transparent === true ) data.transparent = true;

    		if ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;
    		if ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;
    		if ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;
    		if ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;
    		if ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;
    		if ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;
    		if ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();
    		if ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;

    		if ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;
    		if ( this.depthTest === false ) data.depthTest = this.depthTest;
    		if ( this.depthWrite === false ) data.depthWrite = this.depthWrite;
    		if ( this.colorWrite === false ) data.colorWrite = this.colorWrite;

    		if ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;
    		if ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;
    		if ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;
    		if ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;
    		if ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;
    		if ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;
    		if ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;
    		if ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;

    		// rotation (SpriteMaterial)
    		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

    		if ( this.polygonOffset === true ) data.polygonOffset = true;
    		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
    		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

    		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
    		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
    		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
    		if ( this.scale !== undefined ) data.scale = this.scale;

    		if ( this.dithering === true ) data.dithering = true;

    		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
    		if ( this.alphaHash === true ) data.alphaHash = true;
    		if ( this.alphaToCoverage === true ) data.alphaToCoverage = true;
    		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;
    		if ( this.forceSinglePass === true ) data.forceSinglePass = true;

    		if ( this.wireframe === true ) data.wireframe = true;
    		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
    		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
    		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

    		if ( this.flatShading === true ) data.flatShading = true;

    		if ( this.visible === false ) data.visible = false;

    		if ( this.toneMapped === false ) data.toneMapped = false;

    		if ( this.fog === false ) data.fog = false;

    		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

    		// TODO: Copied from Object3D.toJSON

    		function extractFromCache( cache ) {

    			const values = [];

    			for ( const key in cache ) {

    				const data = cache[ key ];
    				delete data.metadata;
    				values.push( data );

    			}

    			return values;

    		}

    		if ( isRootObject ) {

    			const textures = extractFromCache( meta.textures );
    			const images = extractFromCache( meta.images );

    			if ( textures.length > 0 ) data.textures = textures;
    			if ( images.length > 0 ) data.images = images;

    		}

    		return data;

    	}

    	/**
    	 * Returns a new material with copied values from this instance.
    	 *
    	 * @return {Material} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the values of the given material to this instance.
    	 *
    	 * @param {Material} source - The material to copy.
    	 * @return {Material} A reference to this instance.
    	 */
    	copy( source ) {

    		this.name = source.name;

    		this.blending = source.blending;
    		this.side = source.side;
    		this.vertexColors = source.vertexColors;

    		this.opacity = source.opacity;
    		this.transparent = source.transparent;

    		this.blendSrc = source.blendSrc;
    		this.blendDst = source.blendDst;
    		this.blendEquation = source.blendEquation;
    		this.blendSrcAlpha = source.blendSrcAlpha;
    		this.blendDstAlpha = source.blendDstAlpha;
    		this.blendEquationAlpha = source.blendEquationAlpha;
    		this.blendColor.copy( source.blendColor );
    		this.blendAlpha = source.blendAlpha;

    		this.depthFunc = source.depthFunc;
    		this.depthTest = source.depthTest;
    		this.depthWrite = source.depthWrite;

    		this.stencilWriteMask = source.stencilWriteMask;
    		this.stencilFunc = source.stencilFunc;
    		this.stencilRef = source.stencilRef;
    		this.stencilFuncMask = source.stencilFuncMask;
    		this.stencilFail = source.stencilFail;
    		this.stencilZFail = source.stencilZFail;
    		this.stencilZPass = source.stencilZPass;
    		this.stencilWrite = source.stencilWrite;

    		const srcPlanes = source.clippingPlanes;
    		let dstPlanes = null;

    		if ( srcPlanes !== null ) {

    			const n = srcPlanes.length;
    			dstPlanes = new Array( n );

    			for ( let i = 0; i !== n; ++ i ) {

    				dstPlanes[ i ] = srcPlanes[ i ].clone();

    			}

    		}

    		this.clippingPlanes = dstPlanes;
    		this.clipIntersection = source.clipIntersection;
    		this.clipShadows = source.clipShadows;

    		this.shadowSide = source.shadowSide;

    		this.colorWrite = source.colorWrite;

    		this.precision = source.precision;

    		this.polygonOffset = source.polygonOffset;
    		this.polygonOffsetFactor = source.polygonOffsetFactor;
    		this.polygonOffsetUnits = source.polygonOffsetUnits;

    		this.dithering = source.dithering;

    		this.alphaTest = source.alphaTest;
    		this.alphaHash = source.alphaHash;
    		this.alphaToCoverage = source.alphaToCoverage;
    		this.premultipliedAlpha = source.premultipliedAlpha;
    		this.forceSinglePass = source.forceSinglePass;

    		this.visible = source.visible;

    		this.toneMapped = source.toneMapped;

    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

    		return this;

    	}

    	/**
    	 * Frees the GPU-related resources allocated by this instance. Call this
    	 * method whenever this instance is no longer used in your app.
    	 *
    	 * @fires Material#dispose
    	 */
    	dispose() {

    		/**
    		 * Fires when the material has been disposed of.
    		 *
    		 * @event Material#dispose
    		 * @type {Object}
    		 */
    		this.dispatchEvent( { type: 'dispose' } );

    	}

    	/**
    	 * Setting this property to `true` indicates the engine the material
    	 * needs to be recompiled.
    	 *
    	 * @type {boolean}
    	 * @default false
    	 * @param {boolean} value
    	 */
    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    }

    /**
     * A material for drawing geometries in a simple shaded (flat or wireframe) way.
     *
     * This material is not affected by lights.
     *
     * @augments Material
     */
    class MeshBasicMaterial extends Material {

    	/**
    	 * Constructs a new mesh basic material.
    	 *
    	 * @param {Object} [parameters] - An object with one or more properties
    	 * defining the material's appearance. Any property of the material
    	 * (including any property from inherited materials) can be passed
    	 * in here. Color values can be passed any type of value accepted
    	 * by {@link Color#set}.
    	 */
    	constructor( parameters ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isMeshBasicMaterial = true;

    		this.type = 'MeshBasicMaterial';

    		/**
    		 * Color of the material.
    		 *
    		 * @type {Color}
    		 * @default (1,1,1)
    		 */
    		this.color = new Color( 0xffffff ); // emissive

    		/**
    		 * The color map. May optionally include an alpha channel, typically combined
    		 * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
    		 * color is modulated by the diffuse `color`.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.map = null;

    		/**
    		 * The light map. Requires a second set of UVs.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.lightMap = null;

    		/**
    		 * Intensity of the baked light.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.lightMapIntensity = 1.0;

    		/**
    		 * The red channel of this texture is used as the ambient occlusion map.
    		 * Requires a second set of UVs.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.aoMap = null;

    		/**
    		 * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`
    		 * disables ambient occlusion. Where intensity is `1` and the AO map's
    		 * red channel is also `1`, ambient light is fully occluded on a surface.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.aoMapIntensity = 1.0;

    		/**
    		 * Specular map used by the material.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.specularMap = null;

    		/**
    		 * The alpha map is a grayscale texture that controls the opacity across the
    		 * surface (black: fully transparent; white: fully opaque).
    		 *
    		 * Only the color of the texture is used, ignoring the alpha channel if one
    		 * exists. For RGB and RGBA textures, the renderer will use the green channel
    		 * when sampling this texture due to the extra bit of precision provided for
    		 * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
    		 * luminance/alpha textures will also still work as expected.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.alphaMap = null;

    		/**
    		 * The environment map.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.envMap = null;

    		/**
    		 * The rotation of the environment map in radians.
    		 *
    		 * @type {Euler}
    		 * @default (0,0,0)
    		 */
    		this.envMapRotation = new Euler();

    		/**
    		 * How to combine the result of the surface's color with the environment map, if any.
    		 *
    		 * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to
    		 * blend between the two colors.
    		 *
    		 * @type {(MultiplyOperation|MixOperation|AddOperation)}
    		 * @default MultiplyOperation
    		 */
    		this.combine = MultiplyOperation;

    		/**
    		 * How much the environment map affects the surface.
    		 * The valid range is between `0` (no reflections) and `1` (full reflections).
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.reflectivity = 1;

    		/**
    		 * The index of refraction (IOR) of air (approximately 1) divided by the
    		 * index of refraction of the material. It is used with environment mapping
    		 * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.
    		 * The refraction ratio should not exceed `1`.
    		 *
    		 * @type {number}
    		 * @default 0.98
    		 */
    		this.refractionRatio = 0.98;

    		/**
    		 * Renders the geometry as a wireframe.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.wireframe = false;

    		/**
    		 * Controls the thickness of the wireframe.
    		 *
    		 * Can only be used with {@link SVGRenderer}.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.wireframeLinewidth = 1;

    		/**
    		 * Defines appearance of wireframe ends.
    		 *
    		 * Can only be used with {@link SVGRenderer}.
    		 *
    		 * @type {('round'|'bevel'|'miter')}
    		 * @default 'round'
    		 */
    		this.wireframeLinecap = 'round';

    		/**
    		 * Defines appearance of wireframe joints.
    		 *
    		 * Can only be used with {@link SVGRenderer}.
    		 *
    		 * @type {('round'|'bevel'|'miter')}
    		 * @default 'round'
    		 */
    		this.wireframeLinejoin = 'round';

    		/**
    		 * Whether the material is affected by fog or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.fog = true;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.color.copy( source.color );

    		this.map = source.map;

    		this.lightMap = source.lightMap;
    		this.lightMapIntensity = source.lightMapIntensity;

    		this.aoMap = source.aoMap;
    		this.aoMapIntensity = source.aoMapIntensity;

    		this.specularMap = source.specularMap;

    		this.alphaMap = source.alphaMap;

    		this.envMap = source.envMap;
    		this.envMapRotation.copy( source.envMapRotation );
    		this.combine = source.combine;
    		this.reflectivity = source.reflectivity;
    		this.refractionRatio = source.refractionRatio;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;
    		this.wireframeLinecap = source.wireframeLinecap;
    		this.wireframeLinejoin = source.wireframeLinejoin;

    		this.fog = source.fog;

    		return this;

    	}

    }

    const _vector$9 = /*@__PURE__*/ new Vector3();
    const _vector2$1 = /*@__PURE__*/ new Vector2();

    let _id$2 = 0;

    /**
     * This class stores data for an attribute (such as vertex positions, face
     * indices, normals, colors, UVs, and any custom attributes ) associated with
     * a geometry, which allows for more efficient passing of data to the GPU.
     *
     * When working with vector-like data, the `fromBufferAttribute( attribute, index )`
     * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.
     */
    class BufferAttribute {

    	/**
    	 * Constructs a new buffer attribute.
    	 *
    	 * @param {TypedArray} array - The array holding the attribute data.
    	 * @param {number} itemSize - The item size.
    	 * @param {boolean} [normalized=false] - Whether the data are normalized or not.
    	 */
    	constructor( array, itemSize, normalized = false ) {

    		if ( Array.isArray( array ) ) {

    			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

    		}

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isBufferAttribute = true;

    		/**
    		 * The ID of the buffer attribute.
    		 *
    		 * @name BufferAttribute#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _id$2 ++ } );

    		/**
    		 * The name of the buffer attribute.
    		 *
    		 * @type {string}
    		 */
    		this.name = '';

    		/**
    		 * The array holding the attribute data. It should have `itemSize * numVertices`
    		 * elements, where `numVertices` is the number of vertices in the associated geometry.
    		 *
    		 * @type {TypedArray}
    		 */
    		this.array = array;

    		/**
    		 * The number of values of the array that should be associated with a particular vertex.
    		 * For instance, if this attribute is storing a 3-component vector (such as a position,
    		 * normal, or color), then the value should be `3`.
    		 *
    		 * @type {number}
    		 */
    		this.itemSize = itemSize;

    		/**
    		 * Represents the number of items this buffer attribute stores. It is internally computed
    		 * by dividing the `array` length by the `itemSize`.
    		 *
    		 * @type {number}
    		 * @readonly
    		 */
    		this.count = array !== undefined ? array.length / itemSize : 0;

    		/**
    		 * Applies to integer data only. Indicates how the underlying data in the buffer maps to
    		 * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,
    		 * and `normalized` is `true`, the values `0 - +65535` in the array data will be mapped to
    		 * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted
    		 * to floats unmodified, i.e. `65535` becomes `65535.0f`.
    		 *
    		 * @type {boolean}
    		 */
    		this.normalized = normalized;

    		/**
    		 * Defines the intended usage pattern of the data store for optimization purposes.
    		 *
    		 * Note: After the initial use of a buffer, its usage cannot be changed. Instead,
    		 * instantiate a new one and set the desired usage before the next render.
    		 *
    		 * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}
    		 * @default StaticDrawUsage
    		 */
    		this.usage = StaticDrawUsage;

    		/**
    		 * This can be used to only update some components of stored vectors (for example, just the
    		 * component related to color). Use the `addUpdateRange()` function to add ranges to this array.
    		 *
    		 * @type {Array<Object>}
    		 */
    		this.updateRanges = [];

    		/**
    		 * Configures the bound GPU type for use in shaders.
    		 *
    		 * Note: this only has an effect for integer arrays and is not configurable for float arrays.
    		 * For lower precision float types, use `Float16BufferAttribute`.
    		 *
    		 * @type {(FloatType|IntType)}
    		 * @default FloatType
    		 */
    		this.gpuType = FloatType;

    		/**
    		 * A version number, incremented every time the `needsUpdate` is set to `true`.
    		 *
    		 * @type {number}
    		 */
    		this.version = 0;

    	}

    	/**
    	 * A callback function that is executed after the renderer has transferred the attribute
    	 * array data to the GPU.
    	 */
    	onUploadCallback() {}

    	/**
    	 * Flag to indicate that this attribute has changed and should be re-sent to
    	 * the GPU. Set this to `true` when you modify the value of the array.
    	 *
    	 * @type {number}
    	 * @default false
    	 * @param {boolean} value
    	 */
    	set needsUpdate( value ) {

    		if ( value === true ) this.version ++;

    	}

    	/**
    	 * Sets the usage of this buffer attribute.
    	 *
    	 * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
    	 * @return {BufferAttribute} A reference to this buffer attribute.
    	 */
    	setUsage( value ) {

    		this.usage = value;

    		return this;

    	}

    	/**
    	 * Adds a range of data in the data array to be updated on the GPU.
    	 *
    	 * @param {number} start - Position at which to start update.
    	 * @param {number} count - The number of components to update.
    	 */
    	addUpdateRange( start, count ) {

    		this.updateRanges.push( { start, count } );

    	}

    	/**
    	 * Clears the update ranges.
    	 */
    	clearUpdateRanges() {

    		this.updateRanges.length = 0;

    	}

    	/**
    	 * Copies the values of the given buffer attribute to this instance.
    	 *
    	 * @param {BufferAttribute} source - The buffer attribute to copy.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	copy( source ) {

    		this.name = source.name;
    		this.array = new source.array.constructor( source.array );
    		this.itemSize = source.itemSize;
    		this.count = source.count;
    		this.normalized = source.normalized;

    		this.usage = source.usage;
    		this.gpuType = source.gpuType;

    		return this;

    	}

    	/**
    	 * Copies a vector from the given buffer attribute to this one. The start
    	 * and destination position in the attribute buffers are represented by the
    	 * given indices.
    	 *
    	 * @param {number} index1 - The destination index into this buffer attribute.
    	 * @param {BufferAttribute} attribute - The buffer attribute to copy from.
    	 * @param {number} index2 - The source index into the given buffer attribute.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	copyAt( index1, attribute, index2 ) {

    		index1 *= this.itemSize;
    		index2 *= attribute.itemSize;

    		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

    		}

    		return this;

    	}

    	/**
    	 * Copies the given array data into this buffer attribute.
    	 *
    	 * @param {(TypedArray|Array)} array - The array to copy.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	copyArray( array ) {

    		this.array.set( array );

    		return this;

    	}

    	/**
    	 * Applies the given 3x3 matrix to the given attribute. Works with
    	 * item size `2` and `3`.
    	 *
    	 * @param {Matrix3} m - The matrix to apply.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	applyMatrix3( m ) {

    		if ( this.itemSize === 2 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector2$1.fromBufferAttribute( this, i );
    				_vector2$1.applyMatrix3( m );

    				this.setXY( i, _vector2$1.x, _vector2$1.y );

    			}

    		} else if ( this.itemSize === 3 ) {

    			for ( let i = 0, l = this.count; i < l; i ++ ) {

    				_vector$9.fromBufferAttribute( this, i );
    				_vector$9.applyMatrix3( m );

    				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    			}

    		}

    		return this;

    	}

    	/**
    	 * Applies the given 4x4 matrix to the given attribute. Only works with
    	 * item size `3`.
    	 *
    	 * @param {Matrix4} m - The matrix to apply.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	applyMatrix4( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.applyMatrix4( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	/**
    	 * Applies the given 3x3 normal matrix to the given attribute. Only works with
    	 * item size `3`.
    	 *
    	 * @param {Matrix3} m - The normal matrix to apply.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	applyNormalMatrix( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.applyNormalMatrix( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	/**
    	 * Applies the given 4x4 matrix to the given attribute. Only works with
    	 * item size `3` and with direction vectors.
    	 *
    	 * @param {Matrix4} m - The matrix to apply.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	transformDirection( m ) {

    		for ( let i = 0, l = this.count; i < l; i ++ ) {

    			_vector$9.fromBufferAttribute( this, i );

    			_vector$9.transformDirection( m );

    			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

    		}

    		return this;

    	}

    	/**
    	 * Sets the given array data in the buffer attribute.
    	 *
    	 * @param {(TypedArray|Array)} value - The array data to set.
    	 * @param {number} [offset=0] - The offset in this buffer attribute's array.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	set( value, offset = 0 ) {

    		// Matching BufferAttribute constructor, do not normalize the array.
    		this.array.set( value, offset );

    		return this;

    	}

    	/**
    	 * Returns the given component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} component - The component index.
    	 * @return {number} The returned value.
    	 */
    	getComponent( index, component ) {

    		let value = this.array[ index * this.itemSize + component ];

    		if ( this.normalized ) value = denormalize( value, this.array );

    		return value;

    	}

    	/**
    	 * Sets the given value to the given component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} component - The component index.
    	 * @param {number} value - The value to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setComponent( index, component, value ) {

    		if ( this.normalized ) value = normalize$3( value, this.array );

    		this.array[ index * this.itemSize + component ] = value;

    		return this;

    	}

    	/**
    	 * Returns the x component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @return {number} The x component.
    	 */
    	getX( index ) {

    		let x = this.array[ index * this.itemSize ];

    		if ( this.normalized ) x = denormalize( x, this.array );

    		return x;

    	}

    	/**
    	 * Sets the x component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} x - The value to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setX( index, x ) {

    		if ( this.normalized ) x = normalize$3( x, this.array );

    		this.array[ index * this.itemSize ] = x;

    		return this;

    	}

    	/**
    	 * Returns the y component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @return {number} The y component.
    	 */
    	getY( index ) {

    		let y = this.array[ index * this.itemSize + 1 ];

    		if ( this.normalized ) y = denormalize( y, this.array );

    		return y;

    	}

    	/**
    	 * Sets the y component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} y - The value to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setY( index, y ) {

    		if ( this.normalized ) y = normalize$3( y, this.array );

    		this.array[ index * this.itemSize + 1 ] = y;

    		return this;

    	}

    	/**
    	 * Returns the z component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @return {number} The z component.
    	 */
    	getZ( index ) {

    		let z = this.array[ index * this.itemSize + 2 ];

    		if ( this.normalized ) z = denormalize( z, this.array );

    		return z;

    	}

    	/**
    	 * Sets the z component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} z - The value to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setZ( index, z ) {

    		if ( this.normalized ) z = normalize$3( z, this.array );

    		this.array[ index * this.itemSize + 2 ] = z;

    		return this;

    	}

    	/**
    	 * Returns the w component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @return {number} The w component.
    	 */
    	getW( index ) {

    		let w = this.array[ index * this.itemSize + 3 ];

    		if ( this.normalized ) w = denormalize( w, this.array );

    		return w;

    	}

    	/**
    	 * Sets the w component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} w - The value to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setW( index, w ) {

    		if ( this.normalized ) w = normalize$3( w, this.array );

    		this.array[ index * this.itemSize + 3 ] = w;

    		return this;

    	}

    	/**
    	 * Sets the x and y component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} x - The value for the x component to set.
    	 * @param {number} y - The value for the y component to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setXY( index, x, y ) {

    		index *= this.itemSize;

    		if ( this.normalized ) {

    			x = normalize$3( x, this.array );
    			y = normalize$3( y, this.array );

    		}

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;

    		return this;

    	}

    	/**
    	 * Sets the x, y and z component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} x - The value for the x component to set.
    	 * @param {number} y - The value for the y component to set.
    	 * @param {number} z - The value for the z component to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setXYZ( index, x, y, z ) {

    		index *= this.itemSize;

    		if ( this.normalized ) {

    			x = normalize$3( x, this.array );
    			y = normalize$3( y, this.array );
    			z = normalize$3( z, this.array );

    		}

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;

    		return this;

    	}

    	/**
    	 * Sets the x, y, z and w component of the vector at the given index.
    	 *
    	 * @param {number} index - The index into the buffer attribute.
    	 * @param {number} x - The value for the x component to set.
    	 * @param {number} y - The value for the y component to set.
    	 * @param {number} z - The value for the z component to set.
    	 * @param {number} w - The value for the w component to set.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	setXYZW( index, x, y, z, w ) {

    		index *= this.itemSize;

    		if ( this.normalized ) {

    			x = normalize$3( x, this.array );
    			y = normalize$3( y, this.array );
    			z = normalize$3( z, this.array );
    			w = normalize$3( w, this.array );

    		}

    		this.array[ index + 0 ] = x;
    		this.array[ index + 1 ] = y;
    		this.array[ index + 2 ] = z;
    		this.array[ index + 3 ] = w;

    		return this;

    	}

    	/**
    	 * Sets the given callback function that is executed after the Renderer has transferred
    	 * the attribute array data to the GPU. Can be used to perform clean-up operations after
    	 * the upload when attribute data are not needed anymore on the CPU side.
    	 *
    	 * @param {Function} callback - The `onUpload()` callback.
    	 * @return {BufferAttribute} A reference to this instance.
    	 */
    	onUpload( callback ) {

    		this.onUploadCallback = callback;

    		return this;

    	}

    	/**
    	 * Returns a new buffer attribute with copied values from this instance.
    	 *
    	 * @return {BufferAttribute} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor( this.array, this.itemSize ).copy( this );

    	}

    	/**
    	 * Serializes the buffer attribute into JSON.
    	 *
    	 * @return {Object} A JSON object representing the serialized buffer attribute.
    	 */
    	toJSON() {

    		const data = {
    			itemSize: this.itemSize,
    			type: this.array.constructor.name,
    			array: Array.from( this.array ),
    			normalized: this.normalized
    		};

    		if ( this.name !== '' ) data.name = this.name;
    		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;

    		return data;

    	}

    }

    /**
     * Convenient class that can be used when creating a `UInt16` buffer attribute with
     * a plain `Array` instance.
     *
     * @augments BufferAttribute
     */
    class Uint16BufferAttribute extends BufferAttribute {

    	/**
    	 * Constructs a new buffer attribute.
    	 *
    	 * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
    	 * @param {number} itemSize - The item size.
    	 * @param {boolean} [normalized=false] - Whether the data are normalized or not.
    	 */
    	constructor( array, itemSize, normalized ) {

    		super( new Uint16Array( array ), itemSize, normalized );

    	}

    }

    /**
     * Convenient class that can be used when creating a `UInt32` buffer attribute with
     * a plain `Array` instance.
     *
     * @augments BufferAttribute
     */
    class Uint32BufferAttribute extends BufferAttribute {

    	/**
    	 * Constructs a new buffer attribute.
    	 *
    	 * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
    	 * @param {number} itemSize - The item size.
    	 * @param {boolean} [normalized=false] - Whether the data are normalized or not.
    	 */
    	constructor( array, itemSize, normalized ) {

    		super( new Uint32Array( array ), itemSize, normalized );

    	}

    }

    /**
     * Convenient class that can be used when creating a `Float32` buffer attribute with
     * a plain `Array` instance.
     *
     * @augments BufferAttribute
     */
    class Float32BufferAttribute extends BufferAttribute {

    	/**
    	 * Constructs a new buffer attribute.
    	 *
    	 * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
    	 * @param {number} itemSize - The item size.
    	 * @param {boolean} [normalized=false] - Whether the data are normalized or not.
    	 */
    	constructor( array, itemSize, normalized ) {

    		super( new Float32Array( array ), itemSize, normalized );

    	}

    }

    let _id$1 = 0;

    const _m1$3 = /*@__PURE__*/ new Matrix4();
    const _obj = /*@__PURE__*/ new Object3D();
    const _offset = /*@__PURE__*/ new Vector3();
    const _box$2 = /*@__PURE__*/ new Box3();
    const _boxMorphTargets = /*@__PURE__*/ new Box3();
    const _vector$8 = /*@__PURE__*/ new Vector3();

    /**
     * A representation of mesh, line, or point geometry. Includes vertex
     * positions, face indices, normals, colors, UVs, and custom attributes
     * within buffers, reducing the cost of passing all this data to the GPU.
     *
     * ```js
     * const geometry = new THREE.BufferGeometry();
     * // create a simple square shape. We duplicate the top left and bottom right
     * // vertices because each vertex needs to appear once per triangle.
     * const vertices = new Float32Array( [
     * 	-1.0, -1.0,  1.0, // v0
     * 	 1.0, -1.0,  1.0, // v1
     * 	 1.0,  1.0,  1.0, // v2
     *
     * 	 1.0,  1.0,  1.0, // v3
     * 	-1.0,  1.0,  1.0, // v4
     * 	-1.0, -1.0,  1.0  // v5
     * ] );
     * // itemSize = 3 because there are 3 values (components) per vertex
     * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
     * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
     * const mesh = new THREE.Mesh( geometry, material );
     * ```
     *
     * @augments EventDispatcher
     */
    class BufferGeometry extends EventDispatcher {

    	/**
    	 * Constructs a new geometry.
    	 */
    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isBufferGeometry = true;

    		/**
    		 * The ID of the geometry.
    		 *
    		 * @name BufferGeometry#id
    		 * @type {number}
    		 * @readonly
    		 */
    		Object.defineProperty( this, 'id', { value: _id$1 ++ } );

    		/**
    		 * The UUID of the geometry.
    		 *
    		 * @type {string}
    		 * @readonly
    		 */
    		this.uuid = generateUUID();

    		/**
    		 * The name of the geometry.
    		 *
    		 * @type {string}
    		 */
    		this.name = '';
    		this.type = 'BufferGeometry';

    		/**
    		 * Allows for vertices to be re-used across multiple triangles; this is
    		 * called using "indexed triangles". Each triangle is associated with the
    		 * indices of three vertices. This attribute therefore stores the index of
    		 * each vertex for each triangular face. If this attribute is not set, the
    		 * renderer assumes that each three contiguous positions represent a single triangle.
    		 *
    		 * @type {?BufferAttribute}
    		 * @default null
    		 */
    		this.index = null;

    		/**
    		 * A (storage) buffer attribute which was generated with a compute shader and
    		 * now defines indirect draw calls.
    		 *
    		 * Can only be used with {@link WebGPURenderer} and a WebGPU backend.
    		 *
    		 * @type {?BufferAttribute}
    		 * @default null
    		 */
    		this.indirect = null;

    		/**
    		 * This dictionary has as id the name of the attribute to be set and as value
    		 * the buffer attribute to set it to. Rather than accessing this property directly,
    		 * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.
    		 *
    		 * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}
    		 */
    		this.attributes = {};

    		/**
    		 * This dictionary holds the morph targets of the geometry.
    		 *
    		 * Note: Once the geometry has been rendered, the morph attribute data cannot
    		 * be changed. You will have to call `dispose()?, and create a new geometry instance.
    		 *
    		 * @type {Object}
    		 */
    		this.morphAttributes = {};

    		/**
    		 * Used to control the morph target behavior; when set to `true`, the morph
    		 * target data is treated as relative offsets, rather than as absolute
    		 * positions/normals.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.morphTargetsRelative = false;

    		/**
    		 * Split the geometry into groups, each of which will be rendered in a
    		 * separate draw call. This allows an array of materials to be used with the geometry.
    		 *
    		 * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.
    		 *
    		 * Every vertex and index must belong to exactly one group — groups must not share vertices or
    		 * indices, and must not leave vertices or indices unused.
    		 *
    		 * @type {Array<Object>}
    		 */
    		this.groups = [];

    		/**
    		 * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.
    		 *
    		 * @type {Box3}
    		 * @default null
    		 */
    		this.boundingBox = null;

    		/**
    		 * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.
    		 *
    		 * @type {Sphere}
    		 * @default null
    		 */
    		this.boundingSphere = null;

    		/**
    		 * Determines the part of the geometry to render. This should not be set directly,
    		 * instead use `setDrawRange()`.
    		 *
    		 * @type {{start:number,count:number}}
    		 */
    		this.drawRange = { start: 0, count: Infinity };

    		/**
    		 * An object that can be used to store custom data about the geometry.
    		 * It should not hold references to functions as these will not be cloned.
    		 *
    		 * @type {Object}
    		 */
    		this.userData = {};

    	}

    	/**
    	 * Returns the index of this geometry.
    	 *
    	 * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
    	 */
    	getIndex() {

    		return this.index;

    	}

    	/**
    	 * Sets the given index to this geometry.
    	 *
    	 * @param {Array<number>|BufferAttribute} index - The index to set.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	setIndex( index ) {

    		if ( Array.isArray( index ) ) {

    			this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

    		} else {

    			this.index = index;

    		}

    		return this;

    	}

    	/**
    	 * Sets the given indirect attribute to this geometry.
    	 *
    	 * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	setIndirect( indirect ) {

    		this.indirect = indirect;

    		return this;

    	}

    	/**
    	 * Returns the indirect attribute of this geometry.
    	 *
    	 * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
    	 */
    	getIndirect() {

    		return this.indirect;

    	}

    	/**
    	 * Returns the buffer attribute for the given name.
    	 *
    	 * @param {string} name - The attribute name.
    	 * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
    	 * Returns `undefined` if not attribute has been found.
    	 */
    	getAttribute( name ) {

    		return this.attributes[ name ];

    	}

    	/**
    	 * Sets the given attribute for the given name.
    	 *
    	 * @param {string} name - The attribute name.
    	 * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	setAttribute( name, attribute ) {

    		this.attributes[ name ] = attribute;

    		return this;

    	}

    	/**
    	 * Deletes the attribute for the given name.
    	 *
    	 * @param {string} name - The attribute name to delete.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	deleteAttribute( name ) {

    		delete this.attributes[ name ];

    		return this;

    	}

    	/**
    	 * Returns `true` if this geometry has an attribute for the given name.
    	 *
    	 * @param {string} name - The attribute name.
    	 * @return {boolean} Whether this geometry has an attribute for the given name or not.
    	 */
    	hasAttribute( name ) {

    		return this.attributes[ name ] !== undefined;

    	}

    	/**
    	 * Adds a group to this geometry.
    	 *
    	 * @param {number} start - The first element in this draw call. That is the first
    	 * vertex for non-indexed geometry, otherwise the first triangle index.
    	 * @param {number} count - Specifies how many vertices (or indices) are part of this group.
    	 * @param {number} [materialIndex=0] - The material array index to use.
    	 */
    	addGroup( start, count, materialIndex = 0 ) {

    		this.groups.push( {

    			start: start,
    			count: count,
    			materialIndex: materialIndex

    		} );

    	}

    	/**
    	 * Clears all groups.
    	 */
    	clearGroups() {

    		this.groups = [];

    	}

    	/**
    	 * Sets the draw range for this geometry.
    	 *
    	 * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
    	 * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
    	 * For indexed BufferGeometry, `count` is the number of indices to render.
    	 */
    	setDrawRange( start, count ) {

    		this.drawRange.start = start;
    		this.drawRange.count = count;

    	}

    	/**
    	 * Applies the given 4x4 transformation matrix to the geometry.
    	 *
    	 * @param {Matrix4} matrix - The matrix to apply.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	applyMatrix4( matrix ) {

    		const position = this.attributes.position;

    		if ( position !== undefined ) {

    			position.applyMatrix4( matrix );

    			position.needsUpdate = true;

    		}

    		const normal = this.attributes.normal;

    		if ( normal !== undefined ) {

    			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

    			normal.applyNormalMatrix( normalMatrix );

    			normal.needsUpdate = true;

    		}

    		const tangent = this.attributes.tangent;

    		if ( tangent !== undefined ) {

    			tangent.transformDirection( matrix );

    			tangent.needsUpdate = true;

    		}

    		if ( this.boundingBox !== null ) {

    			this.computeBoundingBox();

    		}

    		if ( this.boundingSphere !== null ) {

    			this.computeBoundingSphere();

    		}

    		return this;

    	}

    	/**
    	 * Applies the rotation represented by the Quaternion to the geometry.
    	 *
    	 * @param {Quaternion} q - The Quaternion to apply.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	applyQuaternion( q ) {

    		_m1$3.makeRotationFromQuaternion( q );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Rotates the geometry about the X axis. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#rotation} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	rotateX( angle ) {

    		// rotate geometry around world x-axis

    		_m1$3.makeRotationX( angle );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Rotates the geometry about the Y axis. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#rotation} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	rotateY( angle ) {

    		// rotate geometry around world y-axis

    		_m1$3.makeRotationY( angle );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Rotates the geometry about the Z axis. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#rotation} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {number} angle - The angle in radians.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	rotateZ( angle ) {

    		// rotate geometry around world z-axis

    		_m1$3.makeRotationZ( angle );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Translates the geometry. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#position} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {number} x - The x offset.
    	 * @param {number} y - The y offset.
    	 * @param {number} z - The z offset.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	translate( x, y, z ) {

    		// translate geometry

    		_m1$3.makeTranslation( x, y, z );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Scales the geometry. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#scale} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {number} x - The x scale.
    	 * @param {number} y - The y scale.
    	 * @param {number} z - The z scale.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	scale( x, y, z ) {

    		// scale geometry

    		_m1$3.makeScale( x, y, z );

    		this.applyMatrix4( _m1$3 );

    		return this;

    	}

    	/**
    	 * Rotates the geometry to face a point in 3D space. This is typically done as a one time
    	 * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
    	 * real-time mesh rotation.
    	 *
    	 * @param {Vector3} vector - The target point.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	lookAt( vector ) {

    		_obj.lookAt( vector );

    		_obj.updateMatrix();

    		this.applyMatrix4( _obj.matrix );

    		return this;

    	}

    	/**
    	 * Center the geometry based on its bounding box.
    	 *
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	center() {

    		this.computeBoundingBox();

    		this.boundingBox.getCenter( _offset ).negate();

    		this.translate( _offset.x, _offset.y, _offset.z );

    		return this;

    	}

    	/**
    	 * Defines a geometry by creating a `position` attribute based on the given array of points. The array
    	 * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
    	 * set to `0`.
    	 *
    	 * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
    	 * data from the array. The length of the array must match the vertex count.
    	 *
    	 * @param {Array<Vector2>|Array<Vector3>} points - The points.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	setFromPoints( points ) {

    		const positionAttribute = this.getAttribute( 'position' );

    		if ( positionAttribute === undefined ) {

    			const position = [];

    			for ( let i = 0, l = points.length; i < l; i ++ ) {

    				const point = points[ i ];
    				position.push( point.x, point.y, point.z || 0 );

    			}

    			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

    		} else {

    			const l = Math.min( points.length, positionAttribute.count ); // make sure data do not exceed buffer size

    			for ( let i = 0; i < l; i ++ ) {

    				const point = points[ i ];
    				positionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );

    			}

    			if ( points.length > positionAttribute.count ) {

    				console.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );

    			}

    			positionAttribute.needsUpdate = true;

    		}

    		return this;

    	}

    	/**
    	 * Computes the bounding box of the geometry, and updates the `boundingBox` member.
    	 * The bounding box is not computed by the engine; it must be computed by your app.
    	 * You may need to recompute the bounding box if the geometry vertices are modified.
    	 */
    	computeBoundingBox() {

    		if ( this.boundingBox === null ) {

    			this.boundingBox = new Box3();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position && position.isGLBufferAttribute ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );

    			this.boundingBox.set(
    				new Vector3( - Infinity, - Infinity, - Infinity ),
    				new Vector3( + Infinity, + Infinity, + Infinity )
    			);

    			return;

    		}

    		if ( position !== undefined ) {

    			this.boundingBox.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_box$2.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$8.addVectors( this.boundingBox.min, _box$2.min );
    						this.boundingBox.expandByPoint( _vector$8 );

    						_vector$8.addVectors( this.boundingBox.max, _box$2.max );
    						this.boundingBox.expandByPoint( _vector$8 );

    					} else {

    						this.boundingBox.expandByPoint( _box$2.min );
    						this.boundingBox.expandByPoint( _box$2.max );

    					}

    				}

    			}

    		} else {

    			this.boundingBox.makeEmpty();

    		}

    		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

    		}

    	}

    	/**
    	 * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
    	 * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
    	 * You may need to recompute the bounding sphere if the geometry vertices are modified.
    	 */
    	computeBoundingSphere() {

    		if ( this.boundingSphere === null ) {

    			this.boundingSphere = new Sphere();

    		}

    		const position = this.attributes.position;
    		const morphAttributesPosition = this.morphAttributes.position;

    		if ( position && position.isGLBufferAttribute ) {

    			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );

    			this.boundingSphere.set( new Vector3(), Infinity );

    			return;

    		}

    		if ( position ) {

    			// first, find the center of the bounding sphere

    			const center = this.boundingSphere.center;

    			_box$2.setFromBufferAttribute( position );

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

    					if ( this.morphTargetsRelative ) {

    						_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );
    						_box$2.expandByPoint( _vector$8 );

    						_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );
    						_box$2.expandByPoint( _vector$8 );

    					} else {

    						_box$2.expandByPoint( _boxMorphTargets.min );
    						_box$2.expandByPoint( _boxMorphTargets.max );

    					}

    				}

    			}

    			_box$2.getCenter( center );

    			// second, try to find a boundingSphere with a radius smaller than the
    			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

    			let maxRadiusSq = 0;

    			for ( let i = 0, il = position.count; i < il; i ++ ) {

    				_vector$8.fromBufferAttribute( position, i );

    				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

    			}

    			// process morph attributes if present

    			if ( morphAttributesPosition ) {

    				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

    					const morphAttribute = morphAttributesPosition[ i ];
    					const morphTargetsRelative = this.morphTargetsRelative;

    					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

    						_vector$8.fromBufferAttribute( morphAttribute, j );

    						if ( morphTargetsRelative ) {

    							_offset.fromBufferAttribute( position, j );
    							_vector$8.add( _offset );

    						}

    						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

    					}

    				}

    			}

    			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

    			if ( isNaN( this.boundingSphere.radius ) ) {

    				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

    			}

    		}

    	}

    	/**
    	 * Calculates and adds a tangent attribute to this geometry.
    	 *
    	 * The computation is only supported for indexed geometries and if position, normal, and uv attributes
    	 * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
    	 * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
    	 */
    	computeTangents() {

    		const index = this.index;
    		const attributes = this.attributes;

    		// based on http://www.terathon.com/code/tangent.html
    		// (per vertex tangents)

    		if ( index === null ||
    			 attributes.position === undefined ||
    			 attributes.normal === undefined ||
    			 attributes.uv === undefined ) {

    			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
    			return;

    		}

    		const positionAttribute = attributes.position;
    		const normalAttribute = attributes.normal;
    		const uvAttribute = attributes.uv;

    		if ( this.hasAttribute( 'tangent' ) === false ) {

    			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );

    		}

    		const tangentAttribute = this.getAttribute( 'tangent' );

    		const tan1 = [], tan2 = [];

    		for ( let i = 0; i < positionAttribute.count; i ++ ) {

    			tan1[ i ] = new Vector3();
    			tan2[ i ] = new Vector3();

    		}

    		const vA = new Vector3(),
    			vB = new Vector3(),
    			vC = new Vector3(),

    			uvA = new Vector2(),
    			uvB = new Vector2(),
    			uvC = new Vector2(),

    			sdir = new Vector3(),
    			tdir = new Vector3();

    		function handleTriangle( a, b, c ) {

    			vA.fromBufferAttribute( positionAttribute, a );
    			vB.fromBufferAttribute( positionAttribute, b );
    			vC.fromBufferAttribute( positionAttribute, c );

    			uvA.fromBufferAttribute( uvAttribute, a );
    			uvB.fromBufferAttribute( uvAttribute, b );
    			uvC.fromBufferAttribute( uvAttribute, c );

    			vB.sub( vA );
    			vC.sub( vA );

    			uvB.sub( uvA );
    			uvC.sub( uvA );

    			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

    			// silently ignore degenerate uv triangles having coincident or colinear vertices

    			if ( ! isFinite( r ) ) return;

    			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
    			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

    			tan1[ a ].add( sdir );
    			tan1[ b ].add( sdir );
    			tan1[ c ].add( sdir );

    			tan2[ a ].add( tdir );
    			tan2[ b ].add( tdir );
    			tan2[ c ].add( tdir );

    		}

    		let groups = this.groups;

    		if ( groups.length === 0 ) {

    			groups = [ {
    				start: 0,
    				count: index.count
    			} ];

    		}

    		for ( let i = 0, il = groups.length; i < il; ++ i ) {

    			const group = groups[ i ];

    			const start = group.start;
    			const count = group.count;

    			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

    				handleTriangle(
    					index.getX( j + 0 ),
    					index.getX( j + 1 ),
    					index.getX( j + 2 )
    				);

    			}

    		}

    		const tmp = new Vector3(), tmp2 = new Vector3();
    		const n = new Vector3(), n2 = new Vector3();

    		function handleVertex( v ) {

    			n.fromBufferAttribute( normalAttribute, v );
    			n2.copy( n );

    			const t = tan1[ v ];

    			// Gram-Schmidt orthogonalize

    			tmp.copy( t );
    			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

    			// Calculate handedness

    			tmp2.crossVectors( n2, t );
    			const test = tmp2.dot( tan2[ v ] );
    			const w = ( test < 0.0 ) ? -1 : 1.0;

    			tangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );

    		}

    		for ( let i = 0, il = groups.length; i < il; ++ i ) {

    			const group = groups[ i ];

    			const start = group.start;
    			const count = group.count;

    			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

    				handleVertex( index.getX( j + 0 ) );
    				handleVertex( index.getX( j + 1 ) );
    				handleVertex( index.getX( j + 2 ) );

    			}

    		}

    	}

    	/**
    	 * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
    	 * each vertex normal to be the average of the face normals of the faces that share that vertex.
    	 * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
    	 * to be the same as the face normal.
    	 */
    	computeVertexNormals() {

    		const index = this.index;
    		const positionAttribute = this.getAttribute( 'position' );

    		if ( positionAttribute !== undefined ) {

    			let normalAttribute = this.getAttribute( 'normal' );

    			if ( normalAttribute === undefined ) {

    				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
    				this.setAttribute( 'normal', normalAttribute );

    			} else {

    				// reset existing normals to zero

    				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

    					normalAttribute.setXYZ( i, 0, 0, 0 );

    				}

    			}

    			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
    			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
    			const cb = new Vector3(), ab = new Vector3();

    			// indexed elements

    			if ( index ) {

    				for ( let i = 0, il = index.count; i < il; i += 3 ) {

    					const vA = index.getX( i + 0 );
    					const vB = index.getX( i + 1 );
    					const vC = index.getX( i + 2 );

    					pA.fromBufferAttribute( positionAttribute, vA );
    					pB.fromBufferAttribute( positionAttribute, vB );
    					pC.fromBufferAttribute( positionAttribute, vC );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					nA.fromBufferAttribute( normalAttribute, vA );
    					nB.fromBufferAttribute( normalAttribute, vB );
    					nC.fromBufferAttribute( normalAttribute, vC );

    					nA.add( cb );
    					nB.add( cb );
    					nC.add( cb );

    					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
    					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
    					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

    				}

    			} else {

    				// non-indexed elements (unconnected triangle soup)

    				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

    					pA.fromBufferAttribute( positionAttribute, i + 0 );
    					pB.fromBufferAttribute( positionAttribute, i + 1 );
    					pC.fromBufferAttribute( positionAttribute, i + 2 );

    					cb.subVectors( pC, pB );
    					ab.subVectors( pA, pB );
    					cb.cross( ab );

    					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
    					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

    				}

    			}

    			this.normalizeNormals();

    			normalAttribute.needsUpdate = true;

    		}

    	}

    	/**
    	 * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
    	 * correct lighting on the geometry surfaces.
    	 */
    	normalizeNormals() {

    		const normals = this.attributes.normal;

    		for ( let i = 0, il = normals.count; i < il; i ++ ) {

    			_vector$8.fromBufferAttribute( normals, i );

    			_vector$8.normalize();

    			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

    		}

    	}

    	/**
    	 * Return a new non-index version of this indexed geometry. If the geometry
    	 * is already non-indexed, the method is a NOOP.
    	 *
    	 * @return {BufferGeometry} The non-indexed version of this indexed geometry.
    	 */
    	toNonIndexed() {

    		function convertBufferAttribute( attribute, indices ) {

    			const array = attribute.array;
    			const itemSize = attribute.itemSize;
    			const normalized = attribute.normalized;

    			const array2 = new array.constructor( indices.length * itemSize );

    			let index = 0, index2 = 0;

    			for ( let i = 0, l = indices.length; i < l; i ++ ) {

    				if ( attribute.isInterleavedBufferAttribute ) {

    					index = indices[ i ] * attribute.data.stride + attribute.offset;

    				} else {

    					index = indices[ i ] * itemSize;

    				}

    				for ( let j = 0; j < itemSize; j ++ ) {

    					array2[ index2 ++ ] = array[ index ++ ];

    				}

    			}

    			return new BufferAttribute( array2, itemSize, normalized );

    		}

    		//

    		if ( this.index === null ) {

    			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
    			return this;

    		}

    		const geometry2 = new BufferGeometry();

    		const indices = this.index.array;
    		const attributes = this.attributes;

    		// attributes

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];

    			const newAttribute = convertBufferAttribute( attribute, indices );

    			geometry2.setAttribute( name, newAttribute );

    		}

    		// morph attributes

    		const morphAttributes = this.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const morphArray = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

    				const attribute = morphAttribute[ i ];

    				const newAttribute = convertBufferAttribute( attribute, indices );

    				morphArray.push( newAttribute );

    			}

    			geometry2.morphAttributes[ name ] = morphArray;

    		}

    		geometry2.morphTargetsRelative = this.morphTargetsRelative;

    		// groups

    		const groups = this.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			geometry2.addGroup( group.start, group.count, group.materialIndex );

    		}

    		return geometry2;

    	}

    	/**
    	 * Serializes the geometry into JSON.
    	 *
    	 * @return {Object} A JSON object representing the serialized geometry.
    	 */
    	toJSON() {

    		const data = {
    			metadata: {
    				version: 4.7,
    				type: 'BufferGeometry',
    				generator: 'BufferGeometry.toJSON'
    			}
    		};

    		// standard BufferGeometry serialization

    		data.uuid = this.uuid;
    		data.type = this.type;
    		if ( this.name !== '' ) data.name = this.name;
    		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

    		if ( this.parameters !== undefined ) {

    			const parameters = this.parameters;

    			for ( const key in parameters ) {

    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

    			}

    			return data;

    		}

    		// for simplicity the code assumes attributes are not shared across geometries, see #15811

    		data.data = { attributes: {} };

    		const index = this.index;

    		if ( index !== null ) {

    			data.data.index = {
    				type: index.array.constructor.name,
    				array: Array.prototype.slice.call( index.array )
    			};

    		}

    		const attributes = this.attributes;

    		for ( const key in attributes ) {

    			const attribute = attributes[ key ];

    			data.data.attributes[ key ] = attribute.toJSON( data.data );

    		}

    		const morphAttributes = {};
    		let hasMorphAttributes = false;

    		for ( const key in this.morphAttributes ) {

    			const attributeArray = this.morphAttributes[ key ];

    			const array = [];

    			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

    				const attribute = attributeArray[ i ];

    				array.push( attribute.toJSON( data.data ) );

    			}

    			if ( array.length > 0 ) {

    				morphAttributes[ key ] = array;

    				hasMorphAttributes = true;

    			}

    		}

    		if ( hasMorphAttributes ) {

    			data.data.morphAttributes = morphAttributes;
    			data.data.morphTargetsRelative = this.morphTargetsRelative;

    		}

    		const groups = this.groups;

    		if ( groups.length > 0 ) {

    			data.data.groups = JSON.parse( JSON.stringify( groups ) );

    		}

    		const boundingSphere = this.boundingSphere;

    		if ( boundingSphere !== null ) {

    			data.data.boundingSphere = boundingSphere.toJSON();

    		}

    		return data;

    	}

    	/**
    	 * Returns a new geometry with copied values from this instance.
    	 *
    	 * @return {BufferGeometry} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    	/**
    	 * Copies the values of the given geometry to this instance.
    	 *
    	 * @param {BufferGeometry} source - The geometry to copy.
    	 * @return {BufferGeometry} A reference to this instance.
    	 */
    	copy( source ) {

    		// reset

    		this.index = null;
    		this.attributes = {};
    		this.morphAttributes = {};
    		this.groups = [];
    		this.boundingBox = null;
    		this.boundingSphere = null;

    		// used for storing cloned, shared data

    		const data = {};

    		// name

    		this.name = source.name;

    		// index

    		const index = source.index;

    		if ( index !== null ) {

    			this.setIndex( index.clone() );

    		}

    		// attributes

    		const attributes = source.attributes;

    		for ( const name in attributes ) {

    			const attribute = attributes[ name ];
    			this.setAttribute( name, attribute.clone( data ) );

    		}

    		// morph attributes

    		const morphAttributes = source.morphAttributes;

    		for ( const name in morphAttributes ) {

    			const array = [];
    			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

    			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

    				array.push( morphAttribute[ i ].clone( data ) );

    			}

    			this.morphAttributes[ name ] = array;

    		}

    		this.morphTargetsRelative = source.morphTargetsRelative;

    		// groups

    		const groups = source.groups;

    		for ( let i = 0, l = groups.length; i < l; i ++ ) {

    			const group = groups[ i ];
    			this.addGroup( group.start, group.count, group.materialIndex );

    		}

    		// bounding box

    		const boundingBox = source.boundingBox;

    		if ( boundingBox !== null ) {

    			this.boundingBox = boundingBox.clone();

    		}

    		// bounding sphere

    		const boundingSphere = source.boundingSphere;

    		if ( boundingSphere !== null ) {

    			this.boundingSphere = boundingSphere.clone();

    		}

    		// draw range

    		this.drawRange.start = source.drawRange.start;
    		this.drawRange.count = source.drawRange.count;

    		// user data

    		this.userData = source.userData;

    		return this;

    	}

    	/**
    	 * Frees the GPU-related resources allocated by this instance. Call this
    	 * method whenever this instance is no longer used in your app.
    	 *
    	 * @fires BufferGeometry#dispose
    	 */
    	dispose() {

    		this.dispatchEvent( { type: 'dispose' } );

    	}

    }

    const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
    const _ray$3 = /*@__PURE__*/ new Ray();
    const _sphere$6 = /*@__PURE__*/ new Sphere();
    const _sphereHitAt = /*@__PURE__*/ new Vector3();

    const _vA$1 = /*@__PURE__*/ new Vector3();
    const _vB$1 = /*@__PURE__*/ new Vector3();
    const _vC$1 = /*@__PURE__*/ new Vector3();

    const _tempA = /*@__PURE__*/ new Vector3();
    const _morphA = /*@__PURE__*/ new Vector3();

    const _intersectionPoint = /*@__PURE__*/ new Vector3();
    const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

    /**
     * Class representing triangular polygon mesh based objects.
     *
     * ```js
     * const geometry = new THREE.BoxGeometry( 1, 1, 1 );
     * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
     * const mesh = new THREE.Mesh( geometry, material );
     * scene.add( mesh );
     * ```
     *
     * @augments Object3D
     */
    class Mesh extends Object3D {

    	/**
    	 * Constructs a new mesh.
    	 *
    	 * @param {BufferGeometry} [geometry] - The mesh geometry.
    	 * @param {Material|Array<Material>} [material] - The mesh material.
    	 */
    	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isMesh = true;

    		this.type = 'Mesh';

    		/**
    		 * The mesh geometry.
    		 *
    		 * @type {BufferGeometry}
    		 */
    		this.geometry = geometry;

    		/**
    		 * The mesh material.
    		 *
    		 * @type {Material|Array<Material>}
    		 * @default MeshBasicMaterial
    		 */
    		this.material = material;

    		/**
    		 * A dictionary representing the morph targets in the geometry. The key is the
    		 * morph targets name, the value its attribute index. This member is `undefined`
    		 * by default and only set when morph targets are detected in the geometry.
    		 *
    		 * @type {Object<String,number>|undefined}
    		 * @default undefined
    		 */
    		this.morphTargetDictionary = undefined;

    		/**
    		 * An array of weights typically in the range `[0,1]` that specify how much of the morph
    		 * is applied. This member is `undefined` by default and only set when morph targets are
    		 * detected in the geometry.
    		 *
    		 * @type {Array<number>|undefined}
    		 * @default undefined
    		 */
    		this.morphTargetInfluences = undefined;

    		/**
    		 * The number of instances of this mesh.
    		 * Can only be used with {@link WebGPURenderer}.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.count = 1;

    		this.updateMorphTargets();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		if ( source.morphTargetInfluences !== undefined ) {

    			this.morphTargetInfluences = source.morphTargetInfluences.slice();

    		}

    		if ( source.morphTargetDictionary !== undefined ) {

    			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

    		}

    		this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
    		this.geometry = source.geometry;

    		return this;

    	}

    	/**
    	 * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
    	 * to make sure existing morph targets can influence this 3D object.
    	 */
    	updateMorphTargets() {

    		const geometry = this.geometry;

    		const morphAttributes = geometry.morphAttributes;
    		const keys = Object.keys( morphAttributes );

    		if ( keys.length > 0 ) {

    			const morphAttribute = morphAttributes[ keys[ 0 ] ];

    			if ( morphAttribute !== undefined ) {

    				this.morphTargetInfluences = [];
    				this.morphTargetDictionary = {};

    				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

    					const name = morphAttribute[ m ].name || String( m );

    					this.morphTargetInfluences.push( 0 );
    					this.morphTargetDictionary[ name ] = m;

    				}

    			}

    		}

    	}

    	/**
    	 * Returns the local-space position of the vertex at the given index, taking into
    	 * account the current animation state of both morph targets and skinning.
    	 *
    	 * @param {number} index - The vertex index.
    	 * @param {Vector3} target - The target object that is used to store the method's result.
    	 * @return {Vector3} The vertex position in local space.
    	 */
    	getVertexPosition( index, target ) {

    		const geometry = this.geometry;
    		const position = geometry.attributes.position;
    		const morphPosition = geometry.morphAttributes.position;
    		const morphTargetsRelative = geometry.morphTargetsRelative;

    		target.fromBufferAttribute( position, index );

    		const morphInfluences = this.morphTargetInfluences;

    		if ( morphPosition && morphInfluences ) {

    			_morphA.set( 0, 0, 0 );

    			for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

    				const influence = morphInfluences[ i ];
    				const morphAttribute = morphPosition[ i ];

    				if ( influence === 0 ) continue;

    				_tempA.fromBufferAttribute( morphAttribute, index );

    				if ( morphTargetsRelative ) {

    					_morphA.addScaledVector( _tempA, influence );

    				} else {

    					_morphA.addScaledVector( _tempA.sub( target ), influence );

    				}

    			}

    			target.add( _morphA );

    		}

    		return target;

    	}

    	/**
    	 * Computes intersection points between a casted ray and this line.
    	 *
    	 * @param {Raycaster} raycaster - The raycaster.
    	 * @param {Array<Object>} intersects - The target array that holds the intersection points.
    	 */
    	raycast( raycaster, intersects ) {

    		const geometry = this.geometry;
    		const material = this.material;
    		const matrixWorld = this.matrixWorld;

    		if ( material === undefined ) return;

    		// test with bounding sphere in world space

    		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    		_sphere$6.copy( geometry.boundingSphere );
    		_sphere$6.applyMatrix4( matrixWorld );

    		// check distance from ray origin to bounding sphere

    		_ray$3.copy( raycaster.ray ).recast( raycaster.near );

    		if ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {

    			if ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;

    			if ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

    		}

    		// convert ray to local space of mesh

    		_inverseMatrix$3.copy( matrixWorld ).invert();
    		_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );

    		// test with bounding box in local space

    		if ( geometry.boundingBox !== null ) {

    			if ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;

    		}

    		// test for intersections with geometry

    		this._computeIntersections( raycaster, intersects, _ray$3 );

    	}

    	_computeIntersections( raycaster, intersects, rayLocalSpace ) {

    		let intersection;

    		const geometry = this.geometry;
    		const material = this.material;

    		const index = geometry.index;
    		const position = geometry.attributes.position;
    		const uv = geometry.attributes.uv;
    		const uv1 = geometry.attributes.uv1;
    		const normal = geometry.attributes.normal;
    		const groups = geometry.groups;
    		const drawRange = geometry.drawRange;

    		if ( index !== null ) {

    			// indexed buffer geometry

    			if ( Array.isArray( material ) ) {

    				for ( let i = 0, il = groups.length; i < il; i ++ ) {

    					const group = groups[ i ];
    					const groupMaterial = material[ group.materialIndex ];

    					const start = Math.max( group.start, drawRange.start );
    					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

    					for ( let j = start, jl = end; j < jl; j += 3 ) {

    						const a = index.getX( j );
    						const b = index.getX( j + 1 );
    						const c = index.getX( j + 2 );

    						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
    							intersection.face.materialIndex = group.materialIndex;
    							intersects.push( intersection );

    						}

    					}

    				}

    			} else {

    				const start = Math.max( 0, drawRange.start );
    				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

    				for ( let i = start, il = end; i < il; i += 3 ) {

    					const a = index.getX( i );
    					const b = index.getX( i + 1 );
    					const c = index.getX( i + 2 );

    					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

    					if ( intersection ) {

    						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
    						intersects.push( intersection );

    					}

    				}

    			}

    		} else if ( position !== undefined ) {

    			// non-indexed buffer geometry

    			if ( Array.isArray( material ) ) {

    				for ( let i = 0, il = groups.length; i < il; i ++ ) {

    					const group = groups[ i ];
    					const groupMaterial = material[ group.materialIndex ];

    					const start = Math.max( group.start, drawRange.start );
    					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

    					for ( let j = start, jl = end; j < jl; j += 3 ) {

    						const a = j;
    						const b = j + 1;
    						const c = j + 2;

    						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

    						if ( intersection ) {

    							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
    							intersection.face.materialIndex = group.materialIndex;
    							intersects.push( intersection );

    						}

    					}

    				}

    			} else {

    				const start = Math.max( 0, drawRange.start );
    				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

    				for ( let i = start, il = end; i < il; i += 3 ) {

    					const a = i;
    					const b = i + 1;
    					const c = i + 2;

    					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

    					if ( intersection ) {

    						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
    						intersects.push( intersection );

    					}

    				}

    			}

    		}

    	}

    }

    function checkIntersection$1( object, material, raycaster, ray, pA, pB, pC, point ) {

    	let intersect;

    	if ( material.side === BackSide ) {

    		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

    	} else {

    		intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );

    	}

    	if ( intersect === null ) return null;

    	_intersectionPointWorld.copy( point );
    	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

    	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

    	if ( distance < raycaster.near || distance > raycaster.far ) return null;

    	return {
    		distance: distance,
    		point: _intersectionPointWorld.clone(),
    		object: object
    	};

    }

    function checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

    	object.getVertexPosition( a, _vA$1 );
    	object.getVertexPosition( b, _vB$1 );
    	object.getVertexPosition( c, _vC$1 );

    	const intersection = checkIntersection$1( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

    	if ( intersection ) {

    		const barycoord = new Vector3();
    		Triangle.getBarycoord( _intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord );

    		if ( uv ) {

    			intersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );

    		}

    		if ( uv1 ) {

    			intersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );

    		}

    		if ( normal ) {

    			intersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );

    			if ( intersection.normal.dot( ray.direction ) > 0 ) {

    				intersection.normal.multiplyScalar( -1 );

    			}

    		}

    		const face = {
    			a: a,
    			b: b,
    			c: c,
    			normal: new Vector3(),
    			materialIndex: 0
    		};

    		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

    		intersection.face = face;
    		intersection.barycoord = barycoord;

    	}

    	return intersection;

    }

    /**
     * A geometry class for a rectangular cuboid with a given width, height, and depth.
     * On creation, the cuboid is centred on the origin, with each edge parallel to one
     * of the axes.
     *
     * ```js
     * const geometry = new THREE.BoxGeometry( 1, 1, 1 );
     * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
     * const cube = new THREE.Mesh( geometry, material );
     * scene.add( cube );
     * ```
     *
     * @augments BufferGeometry
     */
    class BoxGeometry extends BufferGeometry {

    	/**
    	 * Constructs a new box geometry.
    	 *
    	 * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
    	 * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
    	 * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
    	 * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
    	 * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
    	 * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
    	 */
    	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

    		super();

    		this.type = 'BoxGeometry';

    		/**
    		 * Holds the constructor parameters that have been
    		 * used to generate the geometry. Any modification
    		 * after instantiation does not change the geometry.
    		 *
    		 * @type {Object}
    		 */
    		this.parameters = {
    			width: width,
    			height: height,
    			depth: depth,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments,
    			depthSegments: depthSegments
    		};

    		const scope = this;

    		// segments

    		widthSegments = Math.floor( widthSegments );
    		heightSegments = Math.floor( heightSegments );
    		depthSegments = Math.floor( depthSegments );

    		// buffers

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		// helper variables

    		let numberOfVertices = 0;
    		let groupStart = 0;

    		// build each side of the box geometry

    		buildPlane( 'z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0 ); // px
    		buildPlane( 'z', 'y', 'x', 1, -1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
    		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
    		buildPlane( 'x', 'z', 'y', 1, -1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
    		buildPlane( 'x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
    		buildPlane( 'x', 'y', 'z', -1, -1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

    		// build geometry

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

    			const segmentWidth = width / gridX;
    			const segmentHeight = height / gridY;

    			const widthHalf = width / 2;
    			const heightHalf = height / 2;
    			const depthHalf = depth / 2;

    			const gridX1 = gridX + 1;
    			const gridY1 = gridY + 1;

    			let vertexCounter = 0;
    			let groupCount = 0;

    			const vector = new Vector3();

    			// generate vertices, normals and uvs

    			for ( let iy = 0; iy < gridY1; iy ++ ) {

    				const y = iy * segmentHeight - heightHalf;

    				for ( let ix = 0; ix < gridX1; ix ++ ) {

    					const x = ix * segmentWidth - widthHalf;

    					// set values to correct vector component

    					vector[ u ] = x * udir;
    					vector[ v ] = y * vdir;
    					vector[ w ] = depthHalf;

    					// now apply vector to vertex buffer

    					vertices.push( vector.x, vector.y, vector.z );

    					// set values to correct vector component

    					vector[ u ] = 0;
    					vector[ v ] = 0;
    					vector[ w ] = depth > 0 ? 1 : -1;

    					// now apply vector to normal buffer

    					normals.push( vector.x, vector.y, vector.z );

    					// uvs

    					uvs.push( ix / gridX );
    					uvs.push( 1 - ( iy / gridY ) );

    					// counters

    					vertexCounter += 1;

    				}

    			}

    			// indices

    			// 1. you need three indices to draw a single face
    			// 2. a single segment consists of two faces
    			// 3. so we need to generate six (2*3) indices per segment

    			for ( let iy = 0; iy < gridY; iy ++ ) {

    				for ( let ix = 0; ix < gridX; ix ++ ) {

    					const a = numberOfVertices + ix + gridX1 * iy;
    					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
    					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
    					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

    					// faces

    					indices.push( a, b, d );
    					indices.push( b, c, d );

    					// increase counter

    					groupCount += 6;

    				}

    			}

    			// add a group to the geometry. this will ensure multi material support

    			scope.addGroup( groupStart, groupCount, materialIndex );

    			// calculate new start value for groups

    			groupStart += groupCount;

    			// update total number of vertices

    			numberOfVertices += vertexCounter;

    		}

    	}

    	copy( source ) {

    		super.copy( source );

    		this.parameters = Object.assign( {}, source.parameters );

    		return this;

    	}

    	/**
    	 * Factory method for creating an instance of this class from the given
    	 * JSON object.
    	 *
    	 * @param {Object} data - A JSON object representing the serialized geometry.
    	 * @return {BoxGeometry} A new instance.
    	 */
    	static fromJSON( data ) {

    		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

    	}

    }

    // Uniform Utilities

    function cloneUniforms( src ) {

    	const dst = {};

    	for ( const u in src ) {

    		dst[ u ] = {};

    		for ( const p in src[ u ] ) {

    			const property = src[ u ][ p ];

    			if ( property && ( property.isColor ||
    				property.isMatrix3 || property.isMatrix4 ||
    				property.isVector2 || property.isVector3 || property.isVector4 ||
    				property.isTexture || property.isQuaternion ) ) {

    				if ( property.isRenderTargetTexture ) {

    					console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
    					dst[ u ][ p ] = null;

    				} else {

    					dst[ u ][ p ] = property.clone();

    				}

    			} else if ( Array.isArray( property ) ) {

    				dst[ u ][ p ] = property.slice();

    			} else {

    				dst[ u ][ p ] = property;

    			}

    		}

    	}

    	return dst;

    }

    function mergeUniforms( uniforms ) {

    	const merged = {};

    	for ( let u = 0; u < uniforms.length; u ++ ) {

    		const tmp = cloneUniforms( uniforms[ u ] );

    		for ( const p in tmp ) {

    			merged[ p ] = tmp[ p ];

    		}

    	}

    	return merged;

    }

    function cloneUniformsGroups( src ) {

    	const dst = [];

    	for ( let u = 0; u < src.length; u ++ ) {

    		dst.push( src[ u ].clone() );

    	}

    	return dst;

    }

    function getUnlitUniformColorSpace( renderer ) {

    	const currentRenderTarget = renderer.getRenderTarget();

    	if ( currentRenderTarget === null ) {

    		// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
    		return renderer.outputColorSpace;

    	}

    	// https://github.com/mrdoob/three.js/issues/27868
    	if ( currentRenderTarget.isXRRenderTarget === true ) {

    		return currentRenderTarget.texture.colorSpace;

    	}

    	return ColorManagement.workingColorSpace;

    }

    // Legacy

    const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

    var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

    var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

    /**
     * A material rendered with custom shaders. A shader is a small program written in GLSL.
     * that runs on the GPU. You may want to use a custom shader if you need to implement an
     * effect not included with any of the built-in materials.
     *
     * There are the following notes to bear in mind when using a `ShaderMaterial`:
     *
     * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.
     * - Built in attributes and uniforms are passed to the shaders along with your code. If
     * you don't want that, use {@link RawShaderMaterial} instead.
     * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`
     * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has
     * to be placed right above the loop. The loop formatting has to correspond to a defined standard.
     *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.
     *   - The loop variable has to be *i*.
     *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly
     * value of *i* for the given iteration and can be used in preprocessor
     * statements.
     *
     * ```js
     * const material = new THREE.ShaderMaterial( {
     * 	uniforms: {
     * 		time: { value: 1.0 },
     * 		resolution: { value: new THREE.Vector2() }
     * 	},
     * 	vertexShader: document.getElementById( 'vertexShader' ).textContent,
     * 	fragmentShader: document.getElementById( 'fragmentShader' ).textContent
     * } );
     * ```
     *
     * @augments Material
     */
    class ShaderMaterial extends Material {

    	/**
    	 * Constructs a new shader material.
    	 *
    	 * @param {Object} [parameters] - An object with one or more properties
    	 * defining the material's appearance. Any property of the material
    	 * (including any property from inherited materials) can be passed
    	 * in here. Color values can be passed any type of value accepted
    	 * by {@link Color#set}.
    	 */
    	constructor( parameters ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isShaderMaterial = true;

    		this.type = 'ShaderMaterial';

    		/**
    		 * Defines custom constants using `#define` directives within the GLSL code
    		 * for both the vertex shader and the fragment shader; each key/value pair
    		 * yields another directive.
    		 * ```js
    		 * defines: {
    		 * 	FOO: 15,
    		 * 	BAR: true
    		 * }
    		 * ```
    		 * Yields the lines:
    		 * ```
    		 * #define FOO 15
    		 * #define BAR true
    		 * ```
    		 *
    		 * @type {Object}
    		 */
    		this.defines = {};

    		/**
    		 * An object of the form:
    		 * ```js
    		 * {
    		 * 	"uniform1": { value: 1.0 },
    		 * 	"uniform2": { value: 2 }
    		 * }
    		 * ```
    		 * specifying the uniforms to be passed to the shader code; keys are uniform
    		 * names, values are definitions of the form
    		 * ```
    		 * {
    		 * 	value: 1.0
    		 * }
    		 * ```
    		 * where `value` is the value of the uniform. Names must match the name of
    		 * the uniform, as defined in the GLSL code. Note that uniforms are refreshed
    		 * on every frame, so updating the value of the uniform will immediately
    		 * update the value available to the GLSL code.
    		 *
    		 * @type {Object}
    		 */
    		this.uniforms = {};

    		/**
    		 * An array holding uniforms groups for configuring UBOs.
    		 *
    		 * @type {Array<UniformsGroup>}
    		 */
    		this.uniformsGroups = [];

    		/**
    		 * Vertex shader GLSL code. This is the actual code for the shader.
    		 *
    		 * @type {string}
    		 */
    		this.vertexShader = default_vertex;

    		/**
    		 * Fragment shader GLSL code. This is the actual code for the shader.
    		 *
    		 * @type {string}
    		 */
    		this.fragmentShader = default_fragment;

    		/**
    		 * Controls line thickness or lines.
    		 *
    		 * WebGL and WebGPU ignore this setting and always render line primitives with a
    		 * width of one pixel.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.linewidth = 1;

    		/**
    		 * Renders the geometry as a wireframe.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.wireframe = false;

    		/**
    		 * Controls the thickness of the wireframe.
    		 *
    		 * WebGL and WebGPU ignore this property and always render
    		 * 1 pixel wide lines.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.wireframeLinewidth = 1;

    		/**
    		 * Define whether the material color is affected by global fog settings; `true`
    		 * to pass fog uniforms to the shader.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.fog = false;

    		/**
    		 * Defines whether this material uses lighting; `true` to pass uniform data
    		 * related to lighting to this shader.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.lights = false;

    		/**
    		 * Defines whether this material supports clipping; `true` to let the renderer
    		 * pass the clippingPlanes uniform.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.clipping = false;

    		/**
    		 * Overwritten and set to `true` by default.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.forceSinglePass = true;

    		/**
    		 * This object allows to enable certain WebGL 2 extensions.
    		 *
    		 * - clipCullDistance: set to `true` to use vertex shader clipping
    		 * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID
    		 *
    		 * @type {{clipCullDistance:false,multiDraw:false}}
    		 */
    		this.extensions = {
    			clipCullDistance: false, // set to use vertex shader clipping
    			multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID
    		};

    		/**
    		 * When the rendered geometry doesn't include these attributes but the
    		 * material does, these default values will be passed to the shaders. This
    		 * avoids errors when buffer data is missing.
    		 *
    		 * - color: [ 1, 1, 1 ]
    		 * - uv: [ 0, 0 ]
    		 * - uv1: [ 0, 0 ]
    		 *
    		 * @type {Object}
    		 */
    		this.defaultAttributeValues = {
    			'color': [ 1, 1, 1 ],
    			'uv': [ 0, 0 ],
    			'uv1': [ 0, 0 ]
    		};

    		/**
    		 * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}
    		 * to bind a generic vertex index to an attribute variable.
    		 *
    		 * @type {string|undefined}
    		 * @default undefined
    		 */
    		this.index0AttributeName = undefined;

    		/**
    		 * Can be used to force a uniform update while changing uniforms in
    		 * {@link Object3D#onBeforeRender}.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.uniformsNeedUpdate = false;

    		/**
    		 * Defines the GLSL version of custom shader code.
    		 *
    		 * @type {?(GLSL1|GLSL3)}
    		 * @default null
    		 */
    		this.glslVersion = null;

    		if ( parameters !== undefined ) {

    			this.setValues( parameters );

    		}

    	}

    	copy( source ) {

    		super.copy( source );

    		this.fragmentShader = source.fragmentShader;
    		this.vertexShader = source.vertexShader;

    		this.uniforms = cloneUniforms( source.uniforms );
    		this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );

    		this.defines = Object.assign( {}, source.defines );

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;

    		this.fog = source.fog;
    		this.lights = source.lights;
    		this.clipping = source.clipping;

    		this.extensions = Object.assign( {}, source.extensions );

    		this.glslVersion = source.glslVersion;

    		return this;

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.glslVersion = this.glslVersion;
    		data.uniforms = {};

    		for ( const name in this.uniforms ) {

    			const uniform = this.uniforms[ name ];
    			const value = uniform.value;

    			if ( value && value.isTexture ) {

    				data.uniforms[ name ] = {
    					type: 't',
    					value: value.toJSON( meta ).uuid
    				};

    			} else if ( value && value.isColor ) {

    				data.uniforms[ name ] = {
    					type: 'c',
    					value: value.getHex()
    				};

    			} else if ( value && value.isVector2 ) {

    				data.uniforms[ name ] = {
    					type: 'v2',
    					value: value.toArray()
    				};

    			} else if ( value && value.isVector3 ) {

    				data.uniforms[ name ] = {
    					type: 'v3',
    					value: value.toArray()
    				};

    			} else if ( value && value.isVector4 ) {

    				data.uniforms[ name ] = {
    					type: 'v4',
    					value: value.toArray()
    				};

    			} else if ( value && value.isMatrix3 ) {

    				data.uniforms[ name ] = {
    					type: 'm3',
    					value: value.toArray()
    				};

    			} else if ( value && value.isMatrix4 ) {

    				data.uniforms[ name ] = {
    					type: 'm4',
    					value: value.toArray()
    				};

    			} else {

    				data.uniforms[ name ] = {
    					value: value
    				};

    				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

    			}

    		}

    		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

    		data.vertexShader = this.vertexShader;
    		data.fragmentShader = this.fragmentShader;

    		data.lights = this.lights;
    		data.clipping = this.clipping;

    		const extensions = {};

    		for ( const key in this.extensions ) {

    			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

    		}

    		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

    		return data;

    	}

    }

    /**
     * Abstract base class for cameras. This class should always be inherited
     * when you build a new camera.
     *
     * @abstract
     * @augments Object3D
     */
    class Camera extends Object3D {

    	/**
    	 * Constructs a new camera.
    	 */
    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isCamera = true;

    		this.type = 'Camera';

    		/**
    		 * The inverse of the camera's world matrix.
    		 *
    		 * @type {Matrix4}
    		 */
    		this.matrixWorldInverse = new Matrix4();

    		/**
    		 * The camera's projection matrix.
    		 *
    		 * @type {Matrix4}
    		 */
    		this.projectionMatrix = new Matrix4();

    		/**
    		 * The inverse of the camera's projection matrix.
    		 *
    		 * @type {Matrix4}
    		 */
    		this.projectionMatrixInverse = new Matrix4();

    		/**
    		 * The coordinate system in which the camera is used.
    		 *
    		 * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}
    		 */
    		this.coordinateSystem = WebGLCoordinateSystem;

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.matrixWorldInverse.copy( source.matrixWorldInverse );

    		this.projectionMatrix.copy( source.projectionMatrix );
    		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

    		this.coordinateSystem = source.coordinateSystem;

    		return this;

    	}

    	/**
    	 * Returns a vector representing the ("look") direction of the 3D object in world space.
    	 *
    	 * This method is overwritten since cameras have a different forward vector compared to other
    	 * 3D objects. A camera looks down its local, negative z-axis by default.
    	 *
    	 * @param {Vector3} target - The target vector the result is stored to.
    	 * @return {Vector3} The 3D object's direction in world space.
    	 */
    	getWorldDirection( target ) {

    		return super.getWorldDirection( target ).negate();

    	}

    	updateMatrixWorld( force ) {

    		super.updateMatrixWorld( force );

    		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

    	}

    	updateWorldMatrix( updateParents, updateChildren ) {

    		super.updateWorldMatrix( updateParents, updateChildren );

    		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

    	}

    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    const _v3$1 = /*@__PURE__*/ new Vector3();
    const _minTarget = /*@__PURE__*/ new Vector2();
    const _maxTarget = /*@__PURE__*/ new Vector2();

    /**
     * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.
     *
     * This projection mode is designed to mimic the way the human eye sees. It
     * is the most common projection mode used for rendering a 3D scene.
     *
     * ```js
     * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );
     * scene.add( camera );
     * ```
     *
     * @augments Camera
     */
    class PerspectiveCamera extends Camera {

    	/**
    	 * Constructs a new perspective camera.
    	 *
    	 * @param {number} [fov=50] - The vertical field of view.
    	 * @param {number} [aspect=1] - The aspect ratio.
    	 * @param {number} [near=0.1] - The camera's near plane.
    	 * @param {number} [far=2000] - The camera's far plane.
    	 */
    	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isPerspectiveCamera = true;

    		this.type = 'PerspectiveCamera';

    		/**
    		 * The vertical field of view, from bottom to top of view,
    		 * in degrees.
    		 *
    		 * @type {number}
    		 * @default 50
    		 */
    		this.fov = fov;

    		/**
    		 * The zoom factor of the camera.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.zoom = 1;

    		/**
    		 * The camera's near plane. The valid range is greater than `0`
    		 * and less than the current value of {@link PerspectiveCamera#far}.
    		 *
    		 * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a
    		 * valid value for a perspective camera's near plane.
    		 *
    		 * @type {number}
    		 * @default 0.1
    		 */
    		this.near = near;

    		/**
    		 * The camera's far plane. Must be greater than the
    		 * current value of {@link PerspectiveCamera#near}.
    		 *
    		 * @type {number}
    		 * @default 2000
    		 */
    		this.far = far;

    		/**
    		 * Object distance used for stereoscopy and depth-of-field effects. This
    		 * parameter does not influence the projection matrix unless a
    		 * {@link StereoCamera} is being used.
    		 *
    		 * @type {number}
    		 * @default 10
    		 */
    		this.focus = 10;

    		/**
    		 * The aspect ratio, usually the canvas width / canvas height.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.aspect = aspect;

    		/**
    		 * Represents the frustum window specification. This property should not be edited
    		 * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.
    		 *
    		 * @type {?Object}
    		 * @default null
    		 */
    		this.view = null;

    		/**
    		 * Film size used for the larger axis. Default is `35` (millimeters). This
    		 * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}
    		 * is set to a nonzero value.
    		 *
    		 * @type {number}
    		 * @default 35
    		 */
    		this.filmGauge = 35;

    		/**
    		 * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.filmOffset = 0;

    		this.updateProjectionMatrix();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.fov = source.fov;
    		this.zoom = source.zoom;

    		this.near = source.near;
    		this.far = source.far;
    		this.focus = source.focus;

    		this.aspect = source.aspect;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		this.filmGauge = source.filmGauge;
    		this.filmOffset = source.filmOffset;

    		return this;

    	}

    	/**
    	 * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
    	 *
    	 * The default film gauge is 35, so that the focal length can be specified for
    	 * a 35mm (full frame) camera.
    	 *
    	 * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
    	 */
    	setFocalLength( focalLength ) {

    		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
    		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

    		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Returns the focal length from the current {@link PerspectiveCamera#fov} and
    	 * {@link PerspectiveCamera#filmGauge}.
    	 *
    	 * @return {number} The computed focal length.
    	 */
    	getFocalLength() {

    		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

    		return 0.5 * this.getFilmHeight() / vExtentSlope;

    	}

    	/**
    	 * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
    	 *
    	 * @return {number} The effective FOV.
    	 */
    	getEffectiveFOV() {

    		return RAD2DEG * 2 * Math.atan(
    			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

    	}

    	/**
    	 * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
    	 * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
    	 *
    	 * @return {number} The film width.
    	 */
    	getFilmWidth() {

    		// film not completely covered in portrait format (aspect < 1)
    		return this.filmGauge * Math.min( this.aspect, 1 );

    	}

    	/**
    	 * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
    	 * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
    	 *
    	 * @return {number} The film width.
    	 */
    	getFilmHeight() {

    		// film not completely covered in landscape format (aspect > 1)
    		return this.filmGauge / Math.max( this.aspect, 1 );

    	}

    	/**
    	 * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
    	 * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
    	 *
    	 * @param {number} distance - The viewing distance.
    	 * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
    	 * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
    	 */
    	getViewBounds( distance, minTarget, maxTarget ) {

    		_v3$1.set( -1, -1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

    		minTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

    		_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

    		maxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

    	}

    	/**
    	 * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
    	 *
    	 * @param {number} distance - The viewing distance.
    	 * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
    	 * @returns {Vector2} The view size.
    	 */
    	getViewSize( distance, target ) {

    		this.getViewBounds( distance, _minTarget, _maxTarget );

    		return target.subVectors( _maxTarget, _minTarget );

    	}

    	/**
    	 * Sets an offset in a larger frustum. This is useful for multi-window or
    	 * multi-monitor/multi-machine setups.
    	 *
    	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
    	 * the monitors are in grid like this
    	 *```
    	 *   +---+---+---+
    	 *   | A | B | C |
    	 *   +---+---+---+
    	 *   | D | E | F |
    	 *   +---+---+---+
    	 *```
    	 * then for each monitor you would call it like this:
    	 *```js
    	 * const w = 1920;
    	 * const h = 1080;
    	 * const fullWidth = w * 3;
    	 * const fullHeight = h * 2;
    	 *
    	 * // --A--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
    	 * // --B--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
    	 * // --C--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
    	 * // --D--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
    	 * // --E--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
    	 * // --F--
    	 * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
    	 * ```
    	 *
    	 * Note there is no reason monitors have to be the same size or in a grid.
    	 *
    	 * @param {number} fullWidth - The full width of multiview setup.
    	 * @param {number} fullHeight - The full height of multiview setup.
    	 * @param {number} x - The horizontal offset of the subcamera.
    	 * @param {number} y - The vertical offset of the subcamera.
    	 * @param {number} width - The width of subcamera.
    	 * @param {number} height - The height of subcamera.
    	 */
    	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

    		this.aspect = fullWidth / fullHeight;

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Removes the view offset from the projection matrix.
    	 */
    	clearViewOffset() {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Updates the camera's projection matrix. Must be called after any change of
    	 * camera properties.
    	 */
    	updateProjectionMatrix() {

    		const near = this.near;
    		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
    		let height = 2 * top;
    		let width = this.aspect * height;
    		let left = -0.5 * width;
    		const view = this.view;

    		if ( this.view !== null && this.view.enabled ) {

    			const fullWidth = view.fullWidth,
    				fullHeight = view.fullHeight;

    			left += view.offsetX * width / fullWidth;
    			top -= view.offsetY * height / fullHeight;
    			width *= view.width / fullWidth;
    			height *= view.height / fullHeight;

    		}

    		const skew = this.filmOffset;
    		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

    		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

    		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.object.fov = this.fov;
    		data.object.zoom = this.zoom;

    		data.object.near = this.near;
    		data.object.far = this.far;
    		data.object.focus = this.focus;

    		data.object.aspect = this.aspect;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		data.object.filmGauge = this.filmGauge;
    		data.object.filmOffset = this.filmOffset;

    		return data;

    	}

    }

    const fov = -90; // negative fov is not an error
    const aspect = 1;

    /**
     * A special type of camera that is positioned in 3D space to render its surroundings into a
     * cube render target. The render target can then be used as an environment map for rendering
     * realtime reflections in your scene.
     *
     * ```js
     * // Create cube render target
     * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );
     *
     * // Create cube camera
     * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );
     * scene.add( cubeCamera );
     *
     * // Create car
     * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );
     * const car = new THREE.Mesh( carGeometry, chromeMaterial );
     * scene.add( car );
     *
     * // Update the render target cube
     * car.visible = false;
     * cubeCamera.position.copy( car.position );
     * cubeCamera.update( renderer, scene );
     *
     * // Render the scene
     * car.visible = true;
     * renderer.render( scene, camera );
     * ```
     *
     * @augments Object3D
     */
    class CubeCamera extends Object3D {

    	/**
    	 * Constructs a new cube camera.
    	 *
    	 * @param {number} near - The camera's near plane.
    	 * @param {number} far - The camera's far plane.
    	 * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
    	 */
    	constructor( near, far, renderTarget ) {

    		super();

    		this.type = 'CubeCamera';

    		/**
    		 * A reference to the cube render target.
    		 *
    		 * @type {WebGLCubeRenderTarget}
    		 */
    		this.renderTarget = renderTarget;

    		/**
    		 * The current active coordinate system.
    		 *
    		 * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}
    		 * @default null
    		 */
    		this.coordinateSystem = null;

    		/**
    		 * The current active mipmap level
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.activeMipmapLevel = 0;

    		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPX.layers = this.layers;
    		this.add( cameraPX );

    		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNX.layers = this.layers;
    		this.add( cameraNX );

    		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPY.layers = this.layers;
    		this.add( cameraPY );

    		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNY.layers = this.layers;
    		this.add( cameraNY );

    		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
    		cameraPZ.layers = this.layers;
    		this.add( cameraPZ );

    		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
    		cameraNZ.layers = this.layers;
    		this.add( cameraNZ );

    	}

    	/**
    	 * Must be called when the coordinate system of the cube camera is changed.
    	 */
    	updateCoordinateSystem() {

    		const coordinateSystem = this.coordinateSystem;

    		const cameras = this.children.concat();

    		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

    		for ( const camera of cameras ) this.remove( camera );

    		if ( coordinateSystem === WebGLCoordinateSystem ) {

    			cameraPX.up.set( 0, 1, 0 );
    			cameraPX.lookAt( 1, 0, 0 );

    			cameraNX.up.set( 0, 1, 0 );
    			cameraNX.lookAt( -1, 0, 0 );

    			cameraPY.up.set( 0, 0, -1 );
    			cameraPY.lookAt( 0, 1, 0 );

    			cameraNY.up.set( 0, 0, 1 );
    			cameraNY.lookAt( 0, -1, 0 );

    			cameraPZ.up.set( 0, 1, 0 );
    			cameraPZ.lookAt( 0, 0, 1 );

    			cameraNZ.up.set( 0, 1, 0 );
    			cameraNZ.lookAt( 0, 0, -1 );

    		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

    			cameraPX.up.set( 0, -1, 0 );
    			cameraPX.lookAt( -1, 0, 0 );

    			cameraNX.up.set( 0, -1, 0 );
    			cameraNX.lookAt( 1, 0, 0 );

    			cameraPY.up.set( 0, 0, 1 );
    			cameraPY.lookAt( 0, 1, 0 );

    			cameraNY.up.set( 0, 0, -1 );
    			cameraNY.lookAt( 0, -1, 0 );

    			cameraPZ.up.set( 0, -1, 0 );
    			cameraPZ.lookAt( 0, 0, 1 );

    			cameraNZ.up.set( 0, -1, 0 );
    			cameraNZ.lookAt( 0, 0, -1 );

    		} else {

    			throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

    		}

    		for ( const camera of cameras ) {

    			this.add( camera );

    			camera.updateMatrixWorld();

    		}

    	}

    	/**
    	 * Calling this method will render the given scene with the given renderer
    	 * into the cube render target of the camera.
    	 *
    	 * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
    	 * @param {Scene} scene - The scene to render.
    	 */
    	update( renderer, scene ) {

    		if ( this.parent === null ) this.updateMatrixWorld();

    		const { renderTarget, activeMipmapLevel } = this;

    		if ( this.coordinateSystem !== renderer.coordinateSystem ) {

    			this.coordinateSystem = renderer.coordinateSystem;

    			this.updateCoordinateSystem();

    		}

    		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

    		const currentRenderTarget = renderer.getRenderTarget();
    		const currentActiveCubeFace = renderer.getActiveCubeFace();
    		const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();

    		const currentXrEnabled = renderer.xr.enabled;

    		renderer.xr.enabled = false;

    		const generateMipmaps = renderTarget.texture.generateMipmaps;

    		renderTarget.texture.generateMipmaps = false;

    		renderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );
    		renderer.render( scene, cameraPX );

    		renderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );
    		renderer.render( scene, cameraNX );

    		renderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );
    		renderer.render( scene, cameraPY );

    		renderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );
    		renderer.render( scene, cameraNY );

    		renderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );
    		renderer.render( scene, cameraPZ );

    		// mipmaps are generated during the last call of render()
    		// at this point, all sides of the cube render target are defined

    		renderTarget.texture.generateMipmaps = generateMipmaps;

    		renderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );
    		renderer.render( scene, cameraNZ );

    		renderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );

    		renderer.xr.enabled = currentXrEnabled;

    		renderTarget.texture.needsPMREMUpdate = true;

    	}

    }

    /**
     * Creates a cube texture made up of six images.
     *
     * ```js
     * const loader = new THREE.CubeTextureLoader();
     * loader.setPath( 'textures/cube/pisa/' );
     *
     * const textureCube = loader.load( [
     * 	'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'
     * ] );
     *
     * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );
     * ```
     *
     * @augments Texture
     */
    class CubeTexture extends Texture {

    	/**
    	 * Constructs a new cube texture.
    	 *
    	 * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
    	 * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
    	 * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
    	 * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
    	 * @param {number} [magFilter=LinearFilter] - The mag filter value.
    	 * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
    	 * @param {number} [format=RGBAFormat] - The texture format.
    	 * @param {number} [type=UnsignedByteType] - The texture type.
    	 * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
    	 * @param {string} [colorSpace=NoColorSpace] - The color space value.
    	 */
    	constructor( images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

    		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isCubeTexture = true;

    		/**
    		 * If set to `true`, the texture is flipped along the vertical axis when
    		 * uploaded to the GPU.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.flipY = false;

    	}

    	/**
    	 * Alias for {@link CubeTexture#image}.
    	 *
    	 * @type {Array<Image>}
    	 */
    	get images() {

    		return this.image;

    	}

    	set images( value ) {

    		this.image = value;

    	}

    }

    /**
     * A cube render target used in context of {@link WebGLRenderer}.
     *
     * @augments WebGLRenderTarget
     */
    class WebGLCubeRenderTarget extends WebGLRenderTarget {

    	/**
    	 * Constructs a new cube render target.
    	 *
    	 * @param {number} [size=1] - The size of the render target.
    	 * @param {RenderTarget~Options} [options] - The configuration object.
    	 */
    	constructor( size = 1, options = {} ) {

    		super( size, size, options );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isWebGLCubeRenderTarget = true;

    		const image = { width: size, height: size, depth: 1 };
    		const images = [ image, image, image, image, image, image ];

    		/**
    		 * Overwritten with a different texture type.
    		 *
    		 * @type {DataArrayTexture}
    		 */
    		this.texture = new CubeTexture( images );
    		this._setTextureOptions( options );

    		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
    		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
    		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

    		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
    		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
    		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

    		this.texture.isRenderTargetTexture = true;

    	}

    	/**
    	 * Converts the given equirectangular texture to a cube map.
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 * @param {Texture} texture - The equirectangular texture.
    	 * @return {WebGLCubeRenderTarget} A reference to this cube render target.
    	 */
    	fromEquirectangularTexture( renderer, texture ) {

    		this.texture.type = texture.type;
    		this.texture.colorSpace = texture.colorSpace;

    		this.texture.generateMipmaps = texture.generateMipmaps;
    		this.texture.minFilter = texture.minFilter;
    		this.texture.magFilter = texture.magFilter;

    		const shader = {

    			uniforms: {
    				tEquirect: { value: null },
    			},

    			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

    			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
    		};

    		const geometry = new BoxGeometry( 5, 5, 5 );

    		const material = new ShaderMaterial( {

    			name: 'CubemapFromEquirect',

    			uniforms: cloneUniforms( shader.uniforms ),
    			vertexShader: shader.vertexShader,
    			fragmentShader: shader.fragmentShader,
    			side: BackSide,
    			blending: NoBlending

    		} );

    		material.uniforms.tEquirect.value = texture;

    		const mesh = new Mesh( geometry, material );

    		const currentMinFilter = texture.minFilter;

    		// Avoid blurred poles
    		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

    		const camera = new CubeCamera( 1, 10, this );
    		camera.update( renderer, mesh );

    		texture.minFilter = currentMinFilter;

    		mesh.geometry.dispose();
    		mesh.material.dispose();

    		return this;

    	}

    	/**
    	 * Clears this cube render target.
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
    	 * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
    	 * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
    	 */
    	clear( renderer, color = true, depth = true, stencil = true ) {

    		const currentRenderTarget = renderer.getRenderTarget();

    		for ( let i = 0; i < 6; i ++ ) {

    			renderer.setRenderTarget( this, i );

    			renderer.clear( color, depth, stencil );

    		}

    		renderer.setRenderTarget( currentRenderTarget );

    	}

    }

    /**
     * This is almost identical to an {@link Object3D}. Its purpose is to
     * make working with groups of objects syntactically clearer.
     *
     * ```js
     * // Create a group and add the two cubes.
     * // These cubes can now be rotated / scaled etc as a group.
     * const group = new THREE.Group();
     *
     * group.add( meshA );
     * group.add( meshB );
     *
     * scene.add( group );
     * ```
     *
     * @augments Object3D
     */
    class Group extends Object3D {

    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isGroup = true;

    		this.type = 'Group';

    	}

    }

    const _moveEvent = { type: 'move' };

    /**
     * Class for representing a XR controller with its
     * different coordinate systems.
     *
     * @private
     */
    class WebXRController {

    	/**
    	 * Constructs a new XR controller.
    	 */
    	constructor() {

    		/**
    		 * A group representing the target ray space
    		 * of the XR controller.
    		 *
    		 * @private
    		 * @type {?Group}
    		 * @default null
    		 */
    		this._targetRay = null;

    		/**
    		 * A group representing the grip space
    		 * of the XR controller.
    		 *
    		 * @private
    		 * @type {?Group}
    		 * @default null
    		 */
    		this._grip = null;

    		/**
    		 * A group representing the hand space
    		 * of the XR controller.
    		 *
    		 * @private
    		 * @type {?Group}
    		 * @default null
    		 */
    		this._hand = null;

    	}

    	/**
    	 * Returns a group representing the hand space of the XR controller.
    	 *
    	 * @return {Group} A group representing the hand space of the XR controller.
    	 */
    	getHandSpace() {

    		if ( this._hand === null ) {

    			this._hand = new Group();
    			this._hand.matrixAutoUpdate = false;
    			this._hand.visible = false;

    			this._hand.joints = {};
    			this._hand.inputState = { pinching: false };

    		}

    		return this._hand;

    	}

    	/**
    	 * Returns a group representing the target ray space of the XR controller.
    	 *
    	 * @return {Group} A group representing the target ray space of the XR controller.
    	 */
    	getTargetRaySpace() {

    		if ( this._targetRay === null ) {

    			this._targetRay = new Group();
    			this._targetRay.matrixAutoUpdate = false;
    			this._targetRay.visible = false;
    			this._targetRay.hasLinearVelocity = false;
    			this._targetRay.linearVelocity = new Vector3();
    			this._targetRay.hasAngularVelocity = false;
    			this._targetRay.angularVelocity = new Vector3();

    		}

    		return this._targetRay;

    	}

    	/**
    	 * Returns a group representing the grip space of the XR controller.
    	 *
    	 * @return {Group} A group representing the grip space of the XR controller.
    	 */
    	getGripSpace() {

    		if ( this._grip === null ) {

    			this._grip = new Group();
    			this._grip.matrixAutoUpdate = false;
    			this._grip.visible = false;
    			this._grip.hasLinearVelocity = false;
    			this._grip.linearVelocity = new Vector3();
    			this._grip.hasAngularVelocity = false;
    			this._grip.angularVelocity = new Vector3();

    		}

    		return this._grip;

    	}

    	/**
    	 * Dispatches the given event to the groups representing
    	 * the different coordinate spaces of the XR controller.
    	 *
    	 * @param {Object} event - The event to dispatch.
    	 * @return {WebXRController} A reference to this instance.
    	 */
    	dispatchEvent( event ) {

    		if ( this._targetRay !== null ) {

    			this._targetRay.dispatchEvent( event );

    		}

    		if ( this._grip !== null ) {

    			this._grip.dispatchEvent( event );

    		}

    		if ( this._hand !== null ) {

    			this._hand.dispatchEvent( event );

    		}

    		return this;

    	}

    	/**
    	 * Connects the controller with the given XR input source.
    	 *
    	 * @param {XRInputSource} inputSource - The input source.
    	 * @return {WebXRController} A reference to this instance.
    	 */
    	connect( inputSource ) {

    		if ( inputSource && inputSource.hand ) {

    			const hand = this._hand;

    			if ( hand ) {

    				for ( const inputjoint of inputSource.hand.values() ) {

    					// Initialize hand with joints when connected
    					this._getHandJoint( hand, inputjoint );

    				}

    			}

    		}

    		this.dispatchEvent( { type: 'connected', data: inputSource } );

    		return this;

    	}

    	/**
    	 * Disconnects the controller from the given XR input source.
    	 *
    	 * @param {XRInputSource} inputSource - The input source.
    	 * @return {WebXRController} A reference to this instance.
    	 */
    	disconnect( inputSource ) {

    		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

    		if ( this._targetRay !== null ) {

    			this._targetRay.visible = false;

    		}

    		if ( this._grip !== null ) {

    			this._grip.visible = false;

    		}

    		if ( this._hand !== null ) {

    			this._hand.visible = false;

    		}

    		return this;

    	}

    	/**
    	 * Updates the controller with the given input source, XR frame and reference space.
    	 * This updates the transformations of the groups that represent the different
    	 * coordinate systems of the controller.
    	 *
    	 * @param {XRInputSource} inputSource - The input source.
    	 * @param {XRFrame} frame - The XR frame.
    	 * @param {XRReferenceSpace} referenceSpace - The reference space.
    	 * @return {WebXRController} A reference to this instance.
    	 */
    	update( inputSource, frame, referenceSpace ) {

    		let inputPose = null;
    		let gripPose = null;
    		let handPose = null;

    		const targetRay = this._targetRay;
    		const grip = this._grip;
    		const hand = this._hand;

    		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

    			if ( hand && inputSource.hand ) {

    				handPose = true;

    				for ( const inputjoint of inputSource.hand.values() ) {

    					// Update the joints groups with the XRJoint poses
    					const jointPose = frame.getJointPose( inputjoint, referenceSpace );

    					// The transform of this joint will be updated with the joint pose on each frame
    					const joint = this._getHandJoint( hand, inputjoint );

    					if ( jointPose !== null ) {

    						joint.matrix.fromArray( jointPose.transform.matrix );
    						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
    						joint.matrixWorldNeedsUpdate = true;
    						joint.jointRadius = jointPose.radius;

    					}

    					joint.visible = jointPose !== null;

    				}

    				// Custom events

    				// Check pinchz
    				const indexTip = hand.joints[ 'index-finger-tip' ];
    				const thumbTip = hand.joints[ 'thumb-tip' ];
    				const distance = indexTip.position.distanceTo( thumbTip.position );

    				const distanceToPinch = 0.02;
    				const threshold = 0.005;

    				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

    					hand.inputState.pinching = false;
    					this.dispatchEvent( {
    						type: 'pinchend',
    						handedness: inputSource.handedness,
    						target: this
    					} );

    				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

    					hand.inputState.pinching = true;
    					this.dispatchEvent( {
    						type: 'pinchstart',
    						handedness: inputSource.handedness,
    						target: this
    					} );

    				}

    			} else {

    				if ( grip !== null && inputSource.gripSpace ) {

    					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

    					if ( gripPose !== null ) {

    						grip.matrix.fromArray( gripPose.transform.matrix );
    						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
    						grip.matrixWorldNeedsUpdate = true;

    						if ( gripPose.linearVelocity ) {

    							grip.hasLinearVelocity = true;
    							grip.linearVelocity.copy( gripPose.linearVelocity );

    						} else {

    							grip.hasLinearVelocity = false;

    						}

    						if ( gripPose.angularVelocity ) {

    							grip.hasAngularVelocity = true;
    							grip.angularVelocity.copy( gripPose.angularVelocity );

    						} else {

    							grip.hasAngularVelocity = false;

    						}

    					}

    				}

    			}

    			if ( targetRay !== null ) {

    				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

    				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
    				if ( inputPose === null && gripPose !== null ) {

    					inputPose = gripPose;

    				}

    				if ( inputPose !== null ) {

    					targetRay.matrix.fromArray( inputPose.transform.matrix );
    					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
    					targetRay.matrixWorldNeedsUpdate = true;

    					if ( inputPose.linearVelocity ) {

    						targetRay.hasLinearVelocity = true;
    						targetRay.linearVelocity.copy( inputPose.linearVelocity );

    					} else {

    						targetRay.hasLinearVelocity = false;

    					}

    					if ( inputPose.angularVelocity ) {

    						targetRay.hasAngularVelocity = true;
    						targetRay.angularVelocity.copy( inputPose.angularVelocity );

    					} else {

    						targetRay.hasAngularVelocity = false;

    					}

    					this.dispatchEvent( _moveEvent );

    				}

    			}


    		}

    		if ( targetRay !== null ) {

    			targetRay.visible = ( inputPose !== null );

    		}

    		if ( grip !== null ) {

    			grip.visible = ( gripPose !== null );

    		}

    		if ( hand !== null ) {

    			hand.visible = ( handPose !== null );

    		}

    		return this;

    	}

    	/**
    	 * Returns a group representing the hand joint for the given input joint.
    	 *
    	 * @private
    	 * @param {Group} hand - The group representing the hand space.
    	 * @param {XRJointSpace} inputjoint - The hand joint data.
    	 * @return {Group} A group representing the hand joint for the given input joint.
    	 */
    	_getHandJoint( hand, inputjoint ) {

    		if ( hand.joints[ inputjoint.jointName ] === undefined ) {

    			const joint = new Group();
    			joint.matrixAutoUpdate = false;
    			joint.visible = false;
    			hand.joints[ inputjoint.jointName ] = joint;

    			hand.add( joint );

    		}

    		return hand.joints[ inputjoint.jointName ];

    	}

    }

    /**
     * Scenes allow you to set up what is to be rendered and where by three.js.
     * This is where you place 3D objects like meshes, lines or lights.
     *
     * @augments Object3D
     */
    class Scene extends Object3D {

    	/**
    	 * Constructs a new scene.
    	 */
    	constructor() {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isScene = true;

    		this.type = 'Scene';

    		/**
    		 * Defines the background of the scene. Valid inputs are:
    		 *
    		 * - A color for defining a uniform colored background.
    		 * - A texture for defining a (flat) textured background.
    		 * - Cube textures or equirectangular textures for defining a skybox.
    		 *
    		 * @type {?(Color|Texture)}
    		 * @default null
    		 */
    		this.background = null;

    		/**
    		 * Sets the environment map for all physical materials in the scene. However,
    		 * it's not possible to overwrite an existing texture assigned to the `envMap`
    		 * material property.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.environment = null;

    		/**
    		 * A fog instance defining the type of fog that affects everything
    		 * rendered in the scene.
    		 *
    		 * @type {?(Fog|FogExp2)}
    		 * @default null
    		 */
    		this.fog = null;

    		/**
    		 * Sets the blurriness of the background. Only influences environment maps
    		 * assigned to {@link Scene#background}. Valid input is a float between `0`
    		 * and `1`.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.backgroundBlurriness = 0;

    		/**
    		 * Attenuates the color of the background. Only applies to background textures.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.backgroundIntensity = 1;

    		/**
    		 * The rotation of the background in radians. Only influences environment maps
    		 * assigned to {@link Scene#background}.
    		 *
    		 * @type {Euler}
    		 * @default (0,0,0)
    		 */
    		this.backgroundRotation = new Euler();

    		/**
    		 * Attenuates the color of the environment. Only influences environment maps
    		 * assigned to {@link Scene#environment}.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.environmentIntensity = 1;

    		/**
    		 * The rotation of the environment map in radians. Only influences physical materials
    		 * in the scene when {@link Scene#environment} is used.
    		 *
    		 * @type {Euler}
    		 * @default (0,0,0)
    		 */
    		this.environmentRotation = new Euler();

    		/**
    		 * Forces everything in the scene to be rendered with the defined material. It is possible
    		 * to exclude materials from override by setting {@link Material#allowOverride} to `false`.
    		 *
    		 * @type {?Material}
    		 * @default null
    		 */
    		this.overrideMaterial = null;

    		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

    		}

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		if ( source.background !== null ) this.background = source.background.clone();
    		if ( source.environment !== null ) this.environment = source.environment.clone();
    		if ( source.fog !== null ) this.fog = source.fog.clone();

    		this.backgroundBlurriness = source.backgroundBlurriness;
    		this.backgroundIntensity = source.backgroundIntensity;
    		this.backgroundRotation.copy( source.backgroundRotation );

    		this.environmentIntensity = source.environmentIntensity;
    		this.environmentRotation.copy( source.environmentRotation );

    		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

    		this.matrixAutoUpdate = source.matrixAutoUpdate;

    		return this;

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

    		if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
    		if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;
    		data.object.backgroundRotation = this.backgroundRotation.toArray();

    		if ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;
    		data.object.environmentRotation = this.environmentRotation.toArray();

    		return data;

    	}

    }

    const _vector1 = /*@__PURE__*/ new Vector3();
    const _vector2 = /*@__PURE__*/ new Vector3();
    const _normalMatrix = /*@__PURE__*/ new Matrix3();

    /**
     * A two dimensional surface that extends infinitely in 3D space, represented
     * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}
     * by a unit length normal vector and a constant.
     */
    class Plane {

    	/**
    	 * Constructs a new plane.
    	 *
    	 * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
    	 * @param {number} [constant=0] - The signed distance from the origin to the plane.
    	 */
    	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isPlane = true;

    		/**
    		 * A unit length vector defining the normal of the plane.
    		 *
    		 * @type {Vector3}
    		 */
    		this.normal = normal;

    		/**
    		 * The signed distance from the origin to the plane.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.constant = constant;

    	}

    	/**
    	 * Sets the plane components by copying the given values.
    	 *
    	 * @param {Vector3} normal - The normal.
    	 * @param {number} constant - The constant.
    	 * @return {Plane} A reference to this plane.
    	 */
    	set( normal, constant ) {

    		this.normal.copy( normal );
    		this.constant = constant;

    		return this;

    	}

    	/**
    	 * Sets the plane components by defining `x`, `y`, `z` as the
    	 * plane normal and `w` as the constant.
    	 *
    	 * @param {number} x - The value for the normal's x component.
    	 * @param {number} y - The value for the normal's y component.
    	 * @param {number} z - The value for the normal's z component.
    	 * @param {number} w - The constant value.
    	 * @return {Plane} A reference to this plane.
    	 */
    	setComponents( x, y, z, w ) {

    		this.normal.set( x, y, z );
    		this.constant = w;

    		return this;

    	}

    	/**
    	 * Sets the plane from the given normal and coplanar point (that is a point
    	 * that lies onto the plane).
    	 *
    	 * @param {Vector3} normal - The normal.
    	 * @param {Vector3} point - A coplanar point.
    	 * @return {Plane} A reference to this plane.
    	 */
    	setFromNormalAndCoplanarPoint( normal, point ) {

    		this.normal.copy( normal );
    		this.constant = - point.dot( this.normal );

    		return this;

    	}

    	/**
    	 * Sets the plane from three coplanar points. The winding order is
    	 * assumed to be counter-clockwise, and determines the direction of
    	 * the plane normal.
    	 *
    	 * @param {Vector3} a - The first coplanar point.
    	 * @param {Vector3} b - The second coplanar point.
    	 * @param {Vector3} c - The third coplanar point.
    	 * @return {Plane} A reference to this plane.
    	 */
    	setFromCoplanarPoints( a, b, c ) {

    		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

    		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

    		this.setFromNormalAndCoplanarPoint( normal, a );

    		return this;

    	}

    	/**
    	 * Copies the values of the given plane to this instance.
    	 *
    	 * @param {Plane} plane - The plane to copy.
    	 * @return {Plane} A reference to this plane.
    	 */
    	copy( plane ) {

    		this.normal.copy( plane.normal );
    		this.constant = plane.constant;

    		return this;

    	}

    	/**
    	 * Normalizes the plane normal and adjusts the constant accordingly.
    	 *
    	 * @return {Plane} A reference to this plane.
    	 */
    	normalize() {

    		// Note: will lead to a divide by zero if the plane is invalid.

    		const inverseNormalLength = 1.0 / this.normal.length();
    		this.normal.multiplyScalar( inverseNormalLength );
    		this.constant *= inverseNormalLength;

    		return this;

    	}

    	/**
    	 * Negates both the plane normal and the constant.
    	 *
    	 * @return {Plane} A reference to this plane.
    	 */
    	negate() {

    		this.constant *= -1;
    		this.normal.negate();

    		return this;

    	}

    	/**
    	 * Returns the signed distance from the given point to this plane.
    	 *
    	 * @param {Vector3} point - The point to compute the distance for.
    	 * @return {number} The signed distance.
    	 */
    	distanceToPoint( point ) {

    		return this.normal.dot( point ) + this.constant;

    	}

    	/**
    	 * Returns the signed distance from the given sphere to this plane.
    	 *
    	 * @param {Sphere} sphere - The sphere to compute the distance for.
    	 * @return {number} The signed distance.
    	 */
    	distanceToSphere( sphere ) {

    		return this.distanceToPoint( sphere.center ) - sphere.radius;

    	}

    	/**
    	 * Projects a the given point onto the plane.
    	 *
    	 * @param {Vector3} point - The point to project.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The projected point on the plane.
    	 */
    	projectPoint( point, target ) {

    		return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

    	}

    	/**
    	 * Returns the intersection point of the passed line and the plane. Returns
    	 * `null` if the line does not intersect. Returns the line's starting point if
    	 * the line is coplanar with the plane.
    	 *
    	 * @param {Line3} line - The line to compute the intersection for.
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {?Vector3} The intersection point.
    	 */
    	intersectLine( line, target ) {

    		const direction = line.delta( _vector1 );

    		const denominator = this.normal.dot( direction );

    		if ( denominator === 0 ) {

    			// line is coplanar, return origin
    			if ( this.distanceToPoint( line.start ) === 0 ) {

    				return target.copy( line.start );

    			}

    			// Unsure if this is the correct method to handle this case.
    			return null;

    		}

    		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

    		if ( t < 0 || t > 1 ) {

    			return null;

    		}

    		return target.copy( line.start ).addScaledVector( direction, t );

    	}

    	/**
    	 * Returns `true` if the given line segment intersects with (passes through) the plane.
    	 *
    	 * @param {Line3} line - The line to test.
    	 * @return {boolean} Whether the given line segment intersects with the plane or not.
    	 */
    	intersectsLine( line ) {

    		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

    		const startSign = this.distanceToPoint( line.start );
    		const endSign = this.distanceToPoint( line.end );

    		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

    	}

    	/**
    	 * Returns `true` if the given bounding box intersects with the plane.
    	 *
    	 * @param {Box3} box - The bounding box to test.
    	 * @return {boolean} Whether the given bounding box intersects with the plane or not.
    	 */
    	intersectsBox( box ) {

    		return box.intersectsPlane( this );

    	}

    	/**
    	 * Returns `true` if the given bounding sphere intersects with the plane.
    	 *
    	 * @param {Sphere} sphere - The bounding sphere to test.
    	 * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
    	 */
    	intersectsSphere( sphere ) {

    		return sphere.intersectsPlane( this );

    	}

    	/**
    	 * Returns a coplanar vector to the plane, by calculating the
    	 * projection of the normal at the origin onto the plane.
    	 *
    	 * @param {Vector3} target - The target vector that is used to store the method's result.
    	 * @return {Vector3} The coplanar point.
    	 */
    	coplanarPoint( target ) {

    		return target.copy( this.normal ).multiplyScalar( - this.constant );

    	}

    	/**
    	 * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
    	 *
    	 * The optional normal matrix can be pre-computed like so:
    	 * ```js
    	 * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
    	 * ```
    	 *
    	 * @param {Matrix4} matrix - The transformation matrix.
    	 * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
    	 * @return {Plane} A reference to this plane.
    	 */
    	applyMatrix4( matrix, optionalNormalMatrix ) {

    		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

    		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

    		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

    		this.constant = - referencePoint.dot( normal );

    		return this;

    	}

    	/**
    	 * Translates the plane by the distance defined by the given offset vector.
    	 * Note that this only affects the plane constant and will not affect the normal vector.
    	 *
    	 * @param {Vector3} offset - The offset vector.
    	 * @return {Plane} A reference to this plane.
    	 */
    	translate( offset ) {

    		this.constant -= offset.dot( this.normal );

    		return this;

    	}

    	/**
    	 * Returns `true` if this plane is equal with the given one.
    	 *
    	 * @param {Plane} plane - The plane to test for equality.
    	 * @return {boolean} Whether this plane is equal with the given one.
    	 */
    	equals( plane ) {

    		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

    	}

    	/**
    	 * Returns a new plane with copied values from this instance.
    	 *
    	 * @return {Plane} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    const _sphere$3 = /*@__PURE__*/ new Sphere();
    const _defaultSpriteCenter = /*@__PURE__*/ new Vector2( 0.5, 0.5 );
    const _vector$6 = /*@__PURE__*/ new Vector3();

    /**
     * Frustums are used to determine what is inside the camera's field of view.
     * They help speed up the rendering process - objects which lie outside a camera's
     * frustum can safely be excluded from rendering.
     *
     * This class is mainly intended for use internally by a renderer.
     */
    class Frustum {

    	/**
    	 * Constructs a new frustum.
    	 *
    	 * @param {Plane} [p0] - The first plane that encloses the frustum.
    	 * @param {Plane} [p1] - The second plane that encloses the frustum.
    	 * @param {Plane} [p2] - The third plane that encloses the frustum.
    	 * @param {Plane} [p3] - The fourth plane that encloses the frustum.
    	 * @param {Plane} [p4] - The fifth plane that encloses the frustum.
    	 * @param {Plane} [p5] - The sixth plane that encloses the frustum.
    	 */
    	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

    		/**
    		 * This array holds the planes that enclose the frustum.
    		 *
    		 * @type {Array<Plane>}
    		 */
    		this.planes = [ p0, p1, p2, p3, p4, p5 ];

    	}

    	/**
    	 * Sets the frustum planes by copying the given planes.
    	 *
    	 * @param {Plane} [p0] - The first plane that encloses the frustum.
    	 * @param {Plane} [p1] - The second plane that encloses the frustum.
    	 * @param {Plane} [p2] - The third plane that encloses the frustum.
    	 * @param {Plane} [p3] - The fourth plane that encloses the frustum.
    	 * @param {Plane} [p4] - The fifth plane that encloses the frustum.
    	 * @param {Plane} [p5] - The sixth plane that encloses the frustum.
    	 * @return {Frustum} A reference to this frustum.
    	 */
    	set( p0, p1, p2, p3, p4, p5 ) {

    		const planes = this.planes;

    		planes[ 0 ].copy( p0 );
    		planes[ 1 ].copy( p1 );
    		planes[ 2 ].copy( p2 );
    		planes[ 3 ].copy( p3 );
    		planes[ 4 ].copy( p4 );
    		planes[ 5 ].copy( p5 );

    		return this;

    	}

    	/**
    	 * Copies the values of the given frustum to this instance.
    	 *
    	 * @param {Frustum} frustum - The frustum to copy.
    	 * @return {Frustum} A reference to this frustum.
    	 */
    	copy( frustum ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			planes[ i ].copy( frustum.planes[ i ] );

    		}

    		return this;

    	}

    	/**
    	 * Sets the frustum planes from the given projection matrix.
    	 *
    	 * @param {Matrix4} m - The projection matrix.
    	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
    	 * @return {Frustum} A reference to this frustum.
    	 */
    	setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {

    		const planes = this.planes;
    		const me = m.elements;
    		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
    		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
    		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
    		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

    		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
    		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
    		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
    		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
    		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

    		if ( coordinateSystem === WebGLCoordinateSystem ) {

    			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

    		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

    			planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

    		} else {

    			throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

    		}

    		return this;

    	}

    	/**
    	 * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
    	 *
    	 * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
    	 *
    	 * @param {Object3D} object - The 3D object to test.
    	 * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
    	 */
    	intersectsObject( object ) {

    		if ( object.boundingSphere !== undefined ) {

    			if ( object.boundingSphere === null ) object.computeBoundingSphere();

    			_sphere$3.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

    		} else {

    			const geometry = object.geometry;

    			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

    			_sphere$3.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

    		}

    		return this.intersectsSphere( _sphere$3 );

    	}

    	/**
    	 * Returns `true` if the given sprite is intersecting this frustum.
    	 *
    	 * @param {Sprite} sprite - The sprite to test.
    	 * @return {boolean} Whether the sprite is intersecting this frustum or not.
    	 */
    	intersectsSprite( sprite ) {

    		_sphere$3.center.set( 0, 0, 0 );

    		const offset = _defaultSpriteCenter.distanceTo( sprite.center );

    		_sphere$3.radius = 0.7071067811865476 + offset;
    		_sphere$3.applyMatrix4( sprite.matrixWorld );

    		return this.intersectsSphere( _sphere$3 );

    	}

    	/**
    	 * Returns `true` if the given bounding sphere is intersecting this frustum.
    	 *
    	 * @param {Sphere} sphere - The bounding sphere to test.
    	 * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
    	 */
    	intersectsSphere( sphere ) {

    		const planes = this.planes;
    		const center = sphere.center;
    		const negRadius = - sphere.radius;

    		for ( let i = 0; i < 6; i ++ ) {

    			const distance = planes[ i ].distanceToPoint( center );

    			if ( distance < negRadius ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	/**
    	 * Returns `true` if the given bounding box is intersecting this frustum.
    	 *
    	 * @param {Box3} box - The bounding box to test.
    	 * @return {boolean} Whether the bounding box is intersecting this frustum or not.
    	 */
    	intersectsBox( box ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			const plane = planes[ i ];

    			// corner at max distance

    			_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
    			_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
    			_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;

    			if ( plane.distanceToPoint( _vector$6 ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	/**
    	 * Returns `true` if the given point lies within the frustum.
    	 *
    	 * @param {Vector3} point - The point to test.
    	 * @return {boolean} Whether the point lies within this frustum or not.
    	 */
    	containsPoint( point ) {

    		const planes = this.planes;

    		for ( let i = 0; i < 6; i ++ ) {

    			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	/**
    	 * Returns a new frustum with copied values from this instance.
    	 *
    	 * @return {Frustum} A clone of this instance.
    	 */
    	clone() {

    		return new this.constructor().copy( this );

    	}

    }

    /**
     * A texture for use with a video.
     *
     * ```js
     * // assuming you have created a HTML video element with id="video"
     * const video = document.getElementById( 'video' );
     * const texture = new THREE.VideoTexture( video );
     * ```
     *
     * Note: After the initial use of a texture, its dimensions, format, and type
     * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.
     *
     * @augments Texture
     */
    class VideoTexture extends Texture {

    	/**
    	 * Constructs a new video texture.
    	 *
    	 * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.
    	 * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
    	 * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
    	 * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
    	 * @param {number} [magFilter=LinearFilter] - The mag filter value.
    	 * @param {number} [minFilter=LinearFilter] - The min filter value.
    	 * @param {number} [format=RGBAFormat] - The texture format.
    	 * @param {number} [type=UnsignedByteType] - The texture type.
    	 * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
    	 */
    	constructor( video, mapping, wrapS, wrapT, magFilter = LinearFilter, minFilter = LinearFilter, format, type, anisotropy ) {

    		super( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isVideoTexture = true;

    		/**
    		 * Whether to generate mipmaps (if possible) for a texture.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.generateMipmaps = false;

    		const scope = this;

    		function updateVideo() {

    			scope.needsUpdate = true;
    			video.requestVideoFrameCallback( updateVideo );

    		}

    		if ( 'requestVideoFrameCallback' in video ) {

    			video.requestVideoFrameCallback( updateVideo );

    		}

    	}

    	clone() {

    		return new this.constructor( this.image ).copy( this );

    	}

    	/**
    	 * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}
    	 * to `true` every time a new frame is available.
    	 *
    	 * Only relevant if `requestVideoFrameCallback` is not supported in the browser.
    	 */
    	update() {

    		const video = this.image;
    		const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;

    		if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {

    			this.needsUpdate = true;

    		}

    	}

    }

    /**
     * Creates a texture from a canvas element.
     *
     * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}
     * to `true` immediately since a canvas can directly be used for rendering.
     *
     * @augments Texture
     */
    class CanvasTexture extends Texture {

    	/**
    	 * Constructs a new texture.
    	 *
    	 * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.
    	 * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
    	 * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
    	 * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
    	 * @param {number} [magFilter=LinearFilter] - The mag filter value.
    	 * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
    	 * @param {number} [format=RGBAFormat] - The texture format.
    	 * @param {number} [type=UnsignedByteType] - The texture type.
    	 * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
    	 */
    	constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

    		super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isCanvasTexture = true;

    		this.needsUpdate = true;

    	}

    }

    /**
     * This class can be used to automatically save the depth information of a
     * rendering into a texture.
     *
     * @augments Texture
     */
    class DepthTexture extends Texture {

    	/**
    	 * Constructs a new depth texture.
    	 *
    	 * @param {number} width - The width of the texture.
    	 * @param {number} height - The height of the texture.
    	 * @param {number} [type=UnsignedIntType] - The texture type.
    	 * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
    	 * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
    	 * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
    	 * @param {number} [magFilter=LinearFilter] - The mag filter value.
    	 * @param {number} [minFilter=LinearFilter] - The min filter value.
    	 * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
    	 * @param {number} [format=DepthFormat] - The texture format.
    	 * @param {number} [depth=1] - The depth of the texture.
    	 */
    	constructor( width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat, depth = 1 ) {

    		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

    			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

    		}

    		const image = { width: width, height: height, depth: depth };

    		super( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isDepthTexture = true;

    		/**
    		 * If set to `true`, the texture is flipped along the vertical axis when
    		 * uploaded to the GPU.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.flipY = false;

    		/**
    		 * Whether to generate mipmaps (if possible) for a texture.
    		 *
    		 * Overwritten and set to `false` by default.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.generateMipmaps = false;

    		/**
    		 * Code corresponding to the depth compare function.
    		 *
    		 * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}
    		 * @default null
    		 */
    		this.compareFunction = null;

    	}


    	copy( source ) {

    		super.copy( source );

    		this.source = new Source( Object.assign( {}, source.image ) ); // see #30540
    		this.compareFunction = source.compareFunction;

    		return this;

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

    		return data;

    	}

    }

    /**
     * A geometry class for representing a plane.
     *
     * ```js
     * const geometry = new THREE.PlaneGeometry( 1, 1 );
     * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );
     * const plane = new THREE.Mesh( geometry, material );
     * scene.add( plane );
     * ```
     *
     * @augments BufferGeometry
     */
    class PlaneGeometry extends BufferGeometry {

    	/**
    	 * Constructs a new plane geometry.
    	 *
    	 * @param {number} [width=1] - The width along the X axis.
    	 * @param {number} [height=1] - The height along the Y axis
    	 * @param {number} [widthSegments=1] - The number of segments along the X axis.
    	 * @param {number} [heightSegments=1] - The number of segments along the Y axis.
    	 */
    	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

    		super();

    		this.type = 'PlaneGeometry';

    		/**
    		 * Holds the constructor parameters that have been
    		 * used to generate the geometry. Any modification
    		 * after instantiation does not change the geometry.
    		 *
    		 * @type {Object}
    		 */
    		this.parameters = {
    			width: width,
    			height: height,
    			widthSegments: widthSegments,
    			heightSegments: heightSegments
    		};

    		const width_half = width / 2;
    		const height_half = height / 2;

    		const gridX = Math.floor( widthSegments );
    		const gridY = Math.floor( heightSegments );

    		const gridX1 = gridX + 1;
    		const gridY1 = gridY + 1;

    		const segment_width = width / gridX;
    		const segment_height = height / gridY;

    		//

    		const indices = [];
    		const vertices = [];
    		const normals = [];
    		const uvs = [];

    		for ( let iy = 0; iy < gridY1; iy ++ ) {

    			const y = iy * segment_height - height_half;

    			for ( let ix = 0; ix < gridX1; ix ++ ) {

    				const x = ix * segment_width - width_half;

    				vertices.push( x, - y, 0 );

    				normals.push( 0, 0, 1 );

    				uvs.push( ix / gridX );
    				uvs.push( 1 - ( iy / gridY ) );

    			}

    		}

    		for ( let iy = 0; iy < gridY; iy ++ ) {

    			for ( let ix = 0; ix < gridX; ix ++ ) {

    				const a = ix + gridX1 * iy;
    				const b = ix + gridX1 * ( iy + 1 );
    				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
    				const d = ( ix + 1 ) + gridX1 * iy;

    				indices.push( a, b, d );
    				indices.push( b, c, d );

    			}

    		}

    		this.setIndex( indices );
    		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
    		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.parameters = Object.assign( {}, source.parameters );

    		return this;

    	}

    	/**
    	 * Factory method for creating an instance of this class from the given
    	 * JSON object.
    	 *
    	 * @param {Object} data - A JSON object representing the serialized geometry.
    	 * @return {PlaneGeometry} A new instance.
    	 */
    	static fromJSON( data ) {

    		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

    	}

    }

    /**
     * A material for drawing geometry by depth. Depth is based off of the camera
     * near and far plane. White is nearest, black is farthest.
     *
     * @augments Material
     */
    class MeshDepthMaterial extends Material {

    	/**
    	 * Constructs a new mesh depth material.
    	 *
    	 * @param {Object} [parameters] - An object with one or more properties
    	 * defining the material's appearance. Any property of the material
    	 * (including any property from inherited materials) can be passed
    	 * in here. Color values can be passed any type of value accepted
    	 * by {@link Color#set}.
    	 */
    	constructor( parameters ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isMeshDepthMaterial = true;

    		this.type = 'MeshDepthMaterial';

    		/**
    		 * Type for depth packing.
    		 *
    		 * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}
    		 * @default BasicDepthPacking
    		 */
    		this.depthPacking = BasicDepthPacking;

    		/**
    		 * The color map. May optionally include an alpha channel, typically combined
    		 * with {@link Material#transparent} or {@link Material#alphaTest}.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.map = null;

    		/**
    		 * The alpha map is a grayscale texture that controls the opacity across the
    		 * surface (black: fully transparent; white: fully opaque).
    		 *
    		 * Only the color of the texture is used, ignoring the alpha channel if one
    		 * exists. For RGB and RGBA textures, the renderer will use the green channel
    		 * when sampling this texture due to the extra bit of precision provided for
    		 * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
    		 * luminance/alpha textures will also still work as expected.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.alphaMap = null;

    		/**
    		 * The displacement map affects the position of the mesh's vertices. Unlike
    		 * other maps which only affect the light and shade of the material the
    		 * displaced vertices can cast shadows, block other objects, and otherwise
    		 * act as real geometry. The displacement texture is an image where the value
    		 * of each pixel (white being the highest) is mapped against, and
    		 * repositions, the vertices of the mesh.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.displacementMap = null;

    		/**
    		 * How much the displacement map affects the mesh (where black is no
    		 * displacement, and white is maximum displacement). Without a displacement
    		 * map set, this value is not applied.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.displacementScale = 1;

    		/**
    		 * The offset of the displacement map's values on the mesh's vertices.
    		 * The bias is added to the scaled sample of the displacement map.
    		 * Without a displacement map set, this value is not applied.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.displacementBias = 0;

    		/**
    		 * Renders the geometry as a wireframe.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.wireframe = false;

    		/**
    		 * Controls the thickness of the wireframe.
    		 *
    		 * WebGL and WebGPU ignore this property and always render
    		 * 1 pixel wide lines.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.wireframeLinewidth = 1;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.depthPacking = source.depthPacking;

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		this.wireframe = source.wireframe;
    		this.wireframeLinewidth = source.wireframeLinewidth;

    		return this;

    	}

    }

    /**
     * A material used internally for implementing shadow mapping with
     * point lights.
     *
     * Can also be used to customize the shadow casting of an object by assigning
     * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.
     * The following examples demonstrates this approach in order to ensure
     * transparent parts of objects do no cast shadows.
     *
     * @augments Material
     */
    class MeshDistanceMaterial extends Material {

    	/**
    	 * Constructs a new mesh distance material.
    	 *
    	 * @param {Object} [parameters] - An object with one or more properties
    	 * defining the material's appearance. Any property of the material
    	 * (including any property from inherited materials) can be passed
    	 * in here. Color values can be passed any type of value accepted
    	 * by {@link Color#set}.
    	 */
    	constructor( parameters ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isMeshDistanceMaterial = true;

    		this.type = 'MeshDistanceMaterial';

    		/**
    		 * The color map. May optionally include an alpha channel, typically combined
    		 * with {@link Material#transparent} or {@link Material#alphaTest}.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.map = null;

    		/**
    		 * The alpha map is a grayscale texture that controls the opacity across the
    		 * surface (black: fully transparent; white: fully opaque).
    		 *
    		 * Only the color of the texture is used, ignoring the alpha channel if one
    		 * exists. For RGB and RGBA textures, the renderer will use the green channel
    		 * when sampling this texture due to the extra bit of precision provided for
    		 * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
    		 * luminance/alpha textures will also still work as expected.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.alphaMap = null;

    		/**
    		 * The displacement map affects the position of the mesh's vertices. Unlike
    		 * other maps which only affect the light and shade of the material the
    		 * displaced vertices can cast shadows, block other objects, and otherwise
    		 * act as real geometry. The displacement texture is an image where the value
    		 * of each pixel (white being the highest) is mapped against, and
    		 * repositions, the vertices of the mesh.
    		 *
    		 * @type {?Texture}
    		 * @default null
    		 */
    		this.displacementMap = null;

    		/**
    		 * How much the displacement map affects the mesh (where black is no
    		 * displacement, and white is maximum displacement). Without a displacement
    		 * map set, this value is not applied.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.displacementScale = 1;

    		/**
    		 * The offset of the displacement map's values on the mesh's vertices.
    		 * The bias is added to the scaled sample of the displacement map.
    		 * Without a displacement map set, this value is not applied.
    		 *
    		 * @type {number}
    		 * @default 0
    		 */
    		this.displacementBias = 0;

    		this.setValues( parameters );

    	}

    	copy( source ) {

    		super.copy( source );

    		this.map = source.map;

    		this.alphaMap = source.alphaMap;

    		this.displacementMap = source.displacementMap;
    		this.displacementScale = source.displacementScale;
    		this.displacementBias = source.displacementBias;

    		return this;

    	}

    }

    /**
     * @class
     * @classdesc A simple caching system, used internally by {@link FileLoader}.
     * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.
     * @hideconstructor
     */
    const Cache = {

    	/**
    	 * Whether caching is enabled or not.
    	 *
    	 * @static
    	 * @type {boolean}
    	 * @default false
    	 */
    	enabled: false,

    	/**
    	 * A dictionary that holds cached files.
    	 *
    	 * @static
    	 * @type {Object<string,Object>}
    	 */
    	files: {},

    	/**
    	 * Adds a cache entry with a key to reference the file. If this key already
    	 * holds a file, it is overwritten.
    	 *
    	 * @static
    	 * @param {string} key - The key to reference the cached file.
    	 * @param {Object} file -  The file to be cached.
    	 */
    	add: function ( key, file ) {

    		if ( this.enabled === false ) return;

    		// console.log( 'THREE.Cache', 'Adding key:', key );

    		this.files[ key ] = file;

    	},

    	/**
    	 * Gets the cached value for the given key.
    	 *
    	 * @static
    	 * @param {string} key - The key to reference the cached file.
    	 * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.
    	 */
    	get: function ( key ) {

    		if ( this.enabled === false ) return;

    		// console.log( 'THREE.Cache', 'Checking key:', key );

    		return this.files[ key ];

    	},

    	/**
    	 * Removes the cached file associated with the given key.
    	 *
    	 * @static
    	 * @param {string} key - The key to reference the cached file.
    	 */
    	remove: function ( key ) {

    		delete this.files[ key ];

    	},

    	/**
    	 * Remove all values from the cache.
    	 *
    	 * @static
    	 */
    	clear: function () {

    		this.files = {};

    	}

    };

    /**
     * Handles and keeps track of loaded and pending data. A default global
     * instance of this class is created and used by loaders if not supplied
     * manually.
     *
     * In general that should be sufficient, however there are times when it can
     * be useful to have separate loaders - for example if you want to show
     * separate loading bars for objects and textures.
     *
     * ```js
     * const manager = new THREE.LoadingManager();
     * manager.onLoad = () => console.log( 'Loading complete!' );
     *
     * const loader1 = new OBJLoader( manager );
     * const loader2 = new ColladaLoader( manager );
     * ```
     */
    class LoadingManager {

    	/**
    	 * Constructs a new loading manager.
    	 *
    	 * @param {Function} [onLoad] - Executes when all items have been loaded.
    	 * @param {Function} [onProgress] - Executes when single items have been loaded.
    	 * @param {Function} [onError] - Executes when an error occurs.
    	 */
    	constructor( onLoad, onProgress, onError ) {

    		const scope = this;

    		let isLoading = false;
    		let itemsLoaded = 0;
    		let itemsTotal = 0;
    		let urlModifier = undefined;
    		const handlers = [];

    		// Refer to #5689 for the reason why we don't set .onStart
    		// in the constructor

    		/**
    		 * Executes when an item starts loading.
    		 *
    		 * @type {Function|undefined}
    		 * @default undefined
    		 */
    		this.onStart = undefined;

    		/**
    		 * Executes when all items have been loaded.
    		 *
    		 * @type {Function|undefined}
    		 * @default undefined
    		 */
    		this.onLoad = onLoad;

    		/**
    		 * Executes when single items have been loaded.
    		 *
    		 * @type {Function|undefined}
    		 * @default undefined
    		 */
    		this.onProgress = onProgress;

    		/**
    		 * Executes when an error occurs.
    		 *
    		 * @type {Function|undefined}
    		 * @default undefined
    		 */
    		this.onError = onError;

    		/**
    		 * This should be called by any loader using the manager when the loader
    		 * starts loading an item.
    		 *
    		 * @param {string} url - The URL to load.
    		 */
    		this.itemStart = function ( url ) {

    			itemsTotal ++;

    			if ( isLoading === false ) {

    				if ( scope.onStart !== undefined ) {

    					scope.onStart( url, itemsLoaded, itemsTotal );

    				}

    			}

    			isLoading = true;

    		};

    		/**
    		 * This should be called by any loader using the manager when the loader
    		 * ended loading an item.
    		 *
    		 * @param {string} url - The URL of the loaded item.
    		 */
    		this.itemEnd = function ( url ) {

    			itemsLoaded ++;

    			if ( scope.onProgress !== undefined ) {

    				scope.onProgress( url, itemsLoaded, itemsTotal );

    			}

    			if ( itemsLoaded === itemsTotal ) {

    				isLoading = false;

    				if ( scope.onLoad !== undefined ) {

    					scope.onLoad();

    				}

    			}

    		};

    		/**
    		 * This should be called by any loader using the manager when the loader
    		 * encounters an error when loading an item.
    		 *
    		 * @param {string} url - The URL of the item that produces an error.
    		 */
    		this.itemError = function ( url ) {

    			if ( scope.onError !== undefined ) {

    				scope.onError( url );

    			}

    		};

    		/**
    		 * Given a URL, uses the URL modifier callback (if any) and returns a
    		 * resolved URL. If no URL modifier is set, returns the original URL.
    		 *
    		 * @param {string} url - The URL to load.
    		 * @return {string} The resolved URL.
    		 */
    		this.resolveURL = function ( url ) {

    			if ( urlModifier ) {

    				return urlModifier( url );

    			}

    			return url;

    		};

    		/**
    		 * If provided, the callback will be passed each resource URL before a
    		 * request is sent. The callback may return the original URL, or a new URL to
    		 * override loading behavior. This behavior can be used to load assets from
    		 * .ZIP files, drag-and-drop APIs, and Data URIs.
    		 *
    		 * ```js
    		 * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};
    		 *
    		 * const manager = new THREE.LoadingManager();
    		 *
    		 * // Initialize loading manager with URL callback.
    		 * const objectURLs = [];
    		 * manager.setURLModifier( ( url ) => {
    		 *
    		 * 	url = URL.createObjectURL( blobs[ url ] );
    		 * 	objectURLs.push( url );
    		 * 	return url;
    		 *
    		 * } );
    		 *
    		 * // Load as usual, then revoke the blob URLs.
    		 * const loader = new GLTFLoader( manager );
    		 * loader.load( 'fish.gltf', (gltf) => {
    		 *
    		 * 	scene.add( gltf.scene );
    		 * 	objectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );
    		 *
    		 * } );
    		 * ```
    		 *
    		 * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.
    		 * @return {LoadingManager} A reference to this loading manager.
    		 */
    		this.setURLModifier = function ( transform ) {

    			urlModifier = transform;

    			return this;

    		};

    		/**
    		 * Registers a loader with the given regular expression. Can be used to
    		 * define what loader should be used in order to load specific files. A
    		 * typical use case is to overwrite the default loader for textures.
    		 *
    		 * ```js
    		 * // add handler for TGA textures
    		 * manager.addHandler( /\.tga$/i, new TGALoader() );
    		 * ```
    		 *
    		 * @param {string} regex - A regular expression.
    		 * @param {Loader} loader - A loader that should handle matched cases.
    		 * @return {LoadingManager} A reference to this loading manager.
    		 */
    		this.addHandler = function ( regex, loader ) {

    			handlers.push( regex, loader );

    			return this;

    		};

    		/**
    		 * Removes the loader for the given regular expression.
    		 *
    		 * @param {string} regex - A regular expression.
    		 * @return {LoadingManager} A reference to this loading manager.
    		 */
    		this.removeHandler = function ( regex ) {

    			const index = handlers.indexOf( regex );

    			if ( index !== -1 ) {

    				handlers.splice( index, 2 );

    			}

    			return this;

    		};

    		/**
    		 * Can be used to retrieve the registered loader for the given file path.
    		 *
    		 * @param {string} file - The file path.
    		 * @return {?Loader} The registered loader. Returns `null` if no loader was found.
    		 */
    		this.getHandler = function ( file ) {

    			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {

    				const regex = handlers[ i ];
    				const loader = handlers[ i + 1 ];

    				if ( regex.global ) regex.lastIndex = 0; // see #17920

    				if ( regex.test( file ) ) {

    					return loader;

    				}

    			}

    			return null;

    		};

    	}

    }

    /**
     * The global default loading manager.
     *
     * @constant
     * @type {LoadingManager}
     */
    const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();

    /**
     * Abstract base class for loaders.
     *
     * @abstract
     */
    class Loader {

    	/**
    	 * Constructs a new loader.
    	 *
    	 * @param {LoadingManager} [manager] - The loading manager.
    	 */
    	constructor( manager ) {

    		/**
    		 * The loading manager.
    		 *
    		 * @type {LoadingManager}
    		 * @default DefaultLoadingManager
    		 */
    		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

    		/**
    		 * The crossOrigin string to implement CORS for loading the url from a
    		 * different domain that allows CORS.
    		 *
    		 * @type {string}
    		 * @default 'anonymous'
    		 */
    		this.crossOrigin = 'anonymous';

    		/**
    		 * Whether the XMLHttpRequest uses credentials.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.withCredentials = false;

    		/**
    		 * The base path from which the asset will be loaded.
    		 *
    		 * @type {string}
    		 */
    		this.path = '';

    		/**
    		 * The base path from which additional resources like textures will be loaded.
    		 *
    		 * @type {string}
    		 */
    		this.resourcePath = '';

    		/**
    		 * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
    		 * used in HTTP request.
    		 *
    		 * @type {Object<string, any>}
    		 */
    		this.requestHeader = {};

    	}

    	/**
    	 * This method needs to be implemented by all concrete loaders. It holds the
    	 * logic for loading assets from the backend.
    	 *
    	 * @param {string} url - The path/URL of the file to be loaded.
    	 * @param {Function} onLoad - Executed when the loading process has been finished.
    	 * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
    	 * @param {onErrorCallback} [onError] - Executed when errors occur.
    	 */
    	load( /* url, onLoad, onProgress, onError */ ) {}

    	/**
    	 * A async version of {@link Loader#load}.
    	 *
    	 * @param {string} url - The path/URL of the file to be loaded.
    	 * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
    	 * @return {Promise} A Promise that resolves when the asset has been loaded.
    	 */
    	loadAsync( url, onProgress ) {

    		const scope = this;

    		return new Promise( function ( resolve, reject ) {

    			scope.load( url, resolve, onProgress, reject );

    		} );

    	}

    	/**
    	 * This method needs to be implemented by all concrete loaders. It holds the
    	 * logic for parsing the asset into three.js entities.
    	 *
    	 * @param {any} data - The data to parse.
    	 */
    	parse( /* data */ ) {}

    	/**
    	 * Sets the `crossOrigin` String to implement CORS for loading the URL
    	 * from a different domain that allows CORS.
    	 *
    	 * @param {string} crossOrigin - The `crossOrigin` value.
    	 * @return {Loader} A reference to this instance.
    	 */
    	setCrossOrigin( crossOrigin ) {

    		this.crossOrigin = crossOrigin;
    		return this;

    	}

    	/**
    	 * Whether the XMLHttpRequest uses credentials such as cookies, authorization
    	 * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
    	 *
    	 * Note: This setting has no effect if you are loading files locally or from the same domain.
    	 *
    	 * @param {boolean} value - The `withCredentials` value.
    	 * @return {Loader} A reference to this instance.
    	 */
    	setWithCredentials( value ) {

    		this.withCredentials = value;
    		return this;

    	}

    	/**
    	 * Sets the base path for the asset.
    	 *
    	 * @param {string} path - The base path.
    	 * @return {Loader} A reference to this instance.
    	 */
    	setPath( path ) {

    		this.path = path;
    		return this;

    	}

    	/**
    	 * Sets the base path for dependent resources like textures.
    	 *
    	 * @param {string} resourcePath - The resource path.
    	 * @return {Loader} A reference to this instance.
    	 */
    	setResourcePath( resourcePath ) {

    		this.resourcePath = resourcePath;
    		return this;

    	}

    	/**
    	 * Sets the given request header.
    	 *
    	 * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
    	 * for configuring the HTTP request.
    	 * @return {Loader} A reference to this instance.
    	 */
    	setRequestHeader( requestHeader ) {

    		this.requestHeader = requestHeader;
    		return this;

    	}

    }

    /**
     * Callback for onProgress in loaders.
     *
     * @callback onProgressCallback
     * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.
     */

    /**
     * Callback for onError in loaders.
     *
     * @callback onErrorCallback
     * @param {Error} error - The error which occurred during the loading process.
     */

    /**
     * The default material name that is used by loaders
     * when creating materials for loaded 3D objects.
     *
     * Note: Not all loaders might honor this setting.
     *
     * @static
     * @type {string}
     * @default '__DEFAULT'
     */
    Loader.DEFAULT_MATERIAL_NAME = '__DEFAULT';

    const _loading = new WeakMap();

    /**
     * A loader for loading images. The class loads images with the HTML `Image` API.
     *
     * ```js
     * const loader = new THREE.ImageLoader();
     * const image = await loader.loadAsync( 'image.png' );
     * ```
     * Please note that `ImageLoader` has dropped support for progress
     * events in `r84`. For an `ImageLoader` that supports progress events, see
     * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.
     *
     * @augments Loader
     */
    class ImageLoader extends Loader {

    	/**
    	 * Constructs a new image loader.
    	 *
    	 * @param {LoadingManager} [manager] - The loading manager.
    	 */
    	constructor( manager ) {

    		super( manager );

    	}

    	/**
    	 * Starts loading from the given URL and passes the loaded image
    	 * to the `onLoad()` callback. The method also returns a new `Image` object which can
    	 * directly be used for texture creation. If you do it this way, the texture
    	 * may pop up in your scene once the respective loading process is finished.
    	 *
    	 * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
    	 * @param {function(Image)} onLoad - Executed when the loading process has been finished.
    	 * @param {onProgressCallback} onProgress - Unsupported in this loader.
    	 * @param {onErrorCallback} onError - Executed when errors occur.
    	 * @return {Image} The image.
    	 */
    	load( url, onLoad, onProgress, onError ) {

    		if ( this.path !== undefined ) url = this.path + url;

    		url = this.manager.resolveURL( url );

    		const scope = this;

    		const cached = Cache.get( `image:${url}` );

    		if ( cached !== undefined ) {

    			if ( cached.complete === true ) {

    				scope.manager.itemStart( url );

    				setTimeout( function () {

    					if ( onLoad ) onLoad( cached );

    					scope.manager.itemEnd( url );

    				}, 0 );

    			} else {

    				let arr = _loading.get( cached );

    				if ( arr === undefined ) {

    					arr = [];
    					_loading.set( cached, arr );

    				}

    				arr.push( { onLoad, onError } );

    			}

    			return cached;

    		}

    		const image = createElementNS( 'img' );

    		function onImageLoad() {

    			removeEventListeners();

    			if ( onLoad ) onLoad( this );

    			//

    			const callbacks = _loading.get( this ) || [];

    			for ( let i = 0; i < callbacks.length; i ++ ) {

    				const callback = callbacks[ i ];
    				if ( callback.onLoad ) callback.onLoad( this );

    			}

    			_loading.delete( this );

    			scope.manager.itemEnd( url );

    		}

    		function onImageError( event ) {

    			removeEventListeners();

    			if ( onError ) onError( event );

    			Cache.remove( `image:${url}` );

    			//

    			const callbacks = _loading.get( this ) || [];

    			for ( let i = 0; i < callbacks.length; i ++ ) {

    				const callback = callbacks[ i ];
    				if ( callback.onError ) callback.onError( event );

    			}

    			_loading.delete( this );


    			scope.manager.itemError( url );
    			scope.manager.itemEnd( url );

    		}

    		function removeEventListeners() {

    			image.removeEventListener( 'load', onImageLoad, false );
    			image.removeEventListener( 'error', onImageError, false );

    		}

    		image.addEventListener( 'load', onImageLoad, false );
    		image.addEventListener( 'error', onImageError, false );

    		if ( url.slice( 0, 5 ) !== 'data:' ) {

    			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

    		}

    		Cache.add( `image:${url}`, image );
    		scope.manager.itemStart( url );

    		image.src = url;

    		return image;

    	}

    }

    /**
     * Class for loading textures. Images are internally
     * loaded via {@link ImageLoader}.
     *
     * ```js
     * const loader = new THREE.TextureLoader();
     * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );
     *
     * const material = new THREE.MeshBasicMaterial( { map:texture } );
     * ```
     * Please note that `TextureLoader` has dropped support for progress
     * events in `r84`. For a `TextureLoader` that supports progress events, see
     * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.
     *
     * @augments Loader
     */
    class TextureLoader extends Loader {

    	/**
    	 * Constructs a new texture loader.
    	 *
    	 * @param {LoadingManager} [manager] - The loading manager.
    	 */
    	constructor( manager ) {

    		super( manager );

    	}

    	/**
    	 * Starts loading from the given URL and pass the fully loaded texture
    	 * to the `onLoad()` callback. The method also returns a new texture object which can
    	 * directly be used for material creation. If you do it this way, the texture
    	 * may pop up in your scene once the respective loading process is finished.
    	 *
    	 * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
    	 * @param {function(Texture)} onLoad - Executed when the loading process has been finished.
    	 * @param {onProgressCallback} onProgress - Unsupported in this loader.
    	 * @param {onErrorCallback} onError - Executed when errors occur.
    	 * @return {Texture} The texture.
    	 */
    	load( url, onLoad, onProgress, onError ) {

    		const texture = new Texture();

    		const loader = new ImageLoader( this.manager );
    		loader.setCrossOrigin( this.crossOrigin );
    		loader.setPath( this.path );

    		loader.load( url, function ( image ) {

    			texture.image = image;
    			texture.needsUpdate = true;

    			if ( onLoad !== undefined ) {

    				onLoad( texture );

    			}

    		}, onProgress, onError );

    		return texture;

    	}

    }

    /**
     * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.
     *
     * In this projection mode, an object's size in the rendered image stays
     * constant regardless of its distance from the camera. This can be useful
     * for rendering 2D scenes and UI elements, amongst other things.
     *
     * ```js
     * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );
     * scene.add( camera );
     * ```
     *
     * @augments Camera
     */
    class OrthographicCamera extends Camera {

    	/**
    	 * Constructs a new orthographic camera.
    	 *
    	 * @param {number} [left=-1] - The left plane of the camera's frustum.
    	 * @param {number} [right=1] - The right plane of the camera's frustum.
    	 * @param {number} [top=1] - The top plane of the camera's frustum.
    	 * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
    	 * @param {number} [near=0.1] - The camera's near plane.
    	 * @param {number} [far=2000] - The camera's far plane.
    	 */
    	constructor( left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000 ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isOrthographicCamera = true;

    		this.type = 'OrthographicCamera';

    		/**
    		 * The zoom factor of the camera.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.zoom = 1;

    		/**
    		 * Represents the frustum window specification. This property should not be edited
    		 * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.
    		 *
    		 * @type {?Object}
    		 * @default null
    		 */
    		this.view = null;

    		/**
    		 * The left plane of the camera's frustum.
    		 *
    		 * @type {number}
    		 * @default -1
    		 */
    		this.left = left;

    		/**
    		 * The right plane of the camera's frustum.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.right = right;

    		/**
    		 * The top plane of the camera's frustum.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.top = top;

    		/**
    		 * The bottom plane of the camera's frustum.
    		 *
    		 * @type {number}
    		 * @default -1
    		 */
    		this.bottom = bottom;

    		/**
    		 * The camera's near plane. The valid range is greater than `0`
    		 * and less than the current value of {@link OrthographicCamera#far}.
    		 *
    		 * Note that, unlike for the {@link PerspectiveCamera}, `0` is a
    		 * valid value for an orthographic camera's near plane.
    		 *
    		 * @type {number}
    		 * @default 0.1
    		 */
    		this.near = near;

    		/**
    		 * The camera's far plane. Must be greater than the
    		 * current value of {@link OrthographicCamera#near}.
    		 *
    		 * @type {number}
    		 * @default 2000
    		 */
    		this.far = far;

    		this.updateProjectionMatrix();

    	}

    	copy( source, recursive ) {

    		super.copy( source, recursive );

    		this.left = source.left;
    		this.right = source.right;
    		this.top = source.top;
    		this.bottom = source.bottom;
    		this.near = source.near;
    		this.far = source.far;

    		this.zoom = source.zoom;
    		this.view = source.view === null ? null : Object.assign( {}, source.view );

    		return this;

    	}

    	/**
    	 * Sets an offset in a larger frustum. This is useful for multi-window or
    	 * multi-monitor/multi-machine setups.
    	 *
    	 * @param {number} fullWidth - The full width of multiview setup.
    	 * @param {number} fullHeight - The full height of multiview setup.
    	 * @param {number} x - The horizontal offset of the subcamera.
    	 * @param {number} y - The vertical offset of the subcamera.
    	 * @param {number} width - The width of subcamera.
    	 * @param {number} height - The height of subcamera.
    	 * @see {@link PerspectiveCamera#setViewOffset}
    	 */
    	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

    		if ( this.view === null ) {

    			this.view = {
    				enabled: true,
    				fullWidth: 1,
    				fullHeight: 1,
    				offsetX: 0,
    				offsetY: 0,
    				width: 1,
    				height: 1
    			};

    		}

    		this.view.enabled = true;
    		this.view.fullWidth = fullWidth;
    		this.view.fullHeight = fullHeight;
    		this.view.offsetX = x;
    		this.view.offsetY = y;
    		this.view.width = width;
    		this.view.height = height;

    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Removes the view offset from the projection matrix.
    	 */
    	clearViewOffset() {

    		if ( this.view !== null ) {

    			this.view.enabled = false;

    		}

    		this.updateProjectionMatrix();

    	}

    	/**
    	 * Updates the camera's projection matrix. Must be called after any change of
    	 * camera properties.
    	 */
    	updateProjectionMatrix() {

    		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
    		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
    		const cx = ( this.right + this.left ) / 2;
    		const cy = ( this.top + this.bottom ) / 2;

    		let left = cx - dx;
    		let right = cx + dx;
    		let top = cy + dy;
    		let bottom = cy - dy;

    		if ( this.view !== null && this.view.enabled ) {

    			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
    			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

    			left += scaleW * this.view.offsetX;
    			right = left + scaleW * this.view.width;
    			top -= scaleH * this.view.offsetY;
    			bottom = top - scaleH * this.view.height;

    		}

    		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

    		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

    	}

    	toJSON( meta ) {

    		const data = super.toJSON( meta );

    		data.object.zoom = this.zoom;
    		data.object.left = this.left;
    		data.object.right = this.right;
    		data.object.top = this.top;
    		data.object.bottom = this.bottom;
    		data.object.near = this.near;
    		data.object.far = this.far;

    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

    		return data;

    	}

    }

    /**
     * This type of camera can be used in order to efficiently render a scene with a
     * predefined set of cameras. This is an important performance aspect for
     * rendering VR scenes.
     *
     * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory
     * to define for each sub camera the `viewport` property which determines the
     * part of the viewport that is rendered with this camera.
     *
     * @augments PerspectiveCamera
     */
    class ArrayCamera extends PerspectiveCamera {

    	/**
    	 * Constructs a new array camera.
    	 *
    	 * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
    	 */
    	constructor( array = [] ) {

    		super();

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isArrayCamera = true;

    		/**
    		 * Whether this camera is used with multiview rendering or not.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default false
    		 */
    		this.isMultiViewCamera = false;

    		/**
    		 * An array of perspective sub cameras.
    		 *
    		 * @type {Array<PerspectiveCamera>}
    		 */
    		this.cameras = array;

    	}

    }

    /**
     * Determines how many bytes must be used to represent the texture.
     *
     * @param {number} width - The width of the texture.
     * @param {number} height - The height of the texture.
     * @param {number} format - The texture's format.
     * @param {number} type - The texture's type.
     * @return {number} The byte length.
     */
    function getByteLength( width, height, format, type ) {

    	const typeByteLength = getTextureTypeByteLength( type );

    	switch ( format ) {

    		// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    		case AlphaFormat:
    			return width * height;
    		case RedFormat:
    			return ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RedIntegerFormat:
    			return ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RGFormat:
    			return ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RGIntegerFormat:
    			return ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RGBFormat:
    			return ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RGBAFormat:
    			return ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;
    		case RGBAIntegerFormat:
    			return ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;

    		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    		case RGB_S3TC_DXT1_Format:
    		case RGBA_S3TC_DXT1_Format:
    			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;
    		case RGBA_S3TC_DXT3_Format:
    		case RGBA_S3TC_DXT5_Format:
    			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;

    		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    		case RGB_PVRTC_2BPPV1_Format:
    		case RGBA_PVRTC_2BPPV1_Format:
    			return ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;
    		case RGB_PVRTC_4BPPV1_Format:
    		case RGBA_PVRTC_4BPPV1_Format:
    			return ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;

    		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    		case RGB_ETC1_Format:
    		case RGB_ETC2_Format:
    			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;
    		case RGBA_ETC2_EAC_Format:
    			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;

    		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    		case RGBA_ASTC_4x4_Format:
    			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;
    		case RGBA_ASTC_5x4_Format:
    			return Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;
    		case RGBA_ASTC_5x5_Format:
    			return Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
    		case RGBA_ASTC_6x5_Format:
    			return Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
    		case RGBA_ASTC_6x6_Format:
    			return Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
    		case RGBA_ASTC_8x5_Format:
    			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
    		case RGBA_ASTC_8x6_Format:
    			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
    		case RGBA_ASTC_8x8_Format:
    			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;
    		case RGBA_ASTC_10x5_Format:
    			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
    		case RGBA_ASTC_10x6_Format:
    			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
    		case RGBA_ASTC_10x8_Format:
    			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;
    		case RGBA_ASTC_10x10_Format:
    			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;
    		case RGBA_ASTC_12x10_Format:
    			return Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;
    		case RGBA_ASTC_12x12_Format:
    			return Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;

    		// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    		case RGBA_BPTC_Format:
    		case RGB_BPTC_SIGNED_Format:
    		case RGB_BPTC_UNSIGNED_Format:
    			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;

    		// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    		case RED_RGTC1_Format:
    		case SIGNED_RED_RGTC1_Format:
    			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;
    		case RED_GREEN_RGTC2_Format:
    		case SIGNED_RED_GREEN_RGTC2_Format:
    			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;

    	}

    	throw new Error(
    		`Unable to determine texture byte length for ${format} format.`,
    	);

    }

    function getTextureTypeByteLength( type ) {

    	switch ( type ) {

    		case UnsignedByteType:
    		case ByteType:
    			return { byteLength: 1, components: 1 };
    		case UnsignedShortType:
    		case ShortType:
    		case HalfFloatType:
    			return { byteLength: 2, components: 1 };
    		case UnsignedShort4444Type:
    		case UnsignedShort5551Type:
    			return { byteLength: 2, components: 4 };
    		case UnsignedIntType:
    		case IntType:
    		case FloatType:
    			return { byteLength: 4, components: 1 };
    		case UnsignedInt5999Type:
    			return { byteLength: 4, components: 3 };

    	}

    	throw new Error( `Unknown texture type ${type}.` );

    }

    if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
    		revision: REVISION,
    	} } ) );

    }

    if ( typeof window !== 'undefined' ) {

    	if ( window.__THREE__ ) {

    		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

    	} else {

    		window.__THREE__ = REVISION;

    	}

    }

    /**
     * @license
     * Copyright 2010-2025 Three.js Authors
     * SPDX-License-Identifier: MIT
     */

    function WebGLAnimation() {

    	let context = null;
    	let isAnimating = false;
    	let animationLoop = null;
    	let requestId = null;

    	function onAnimationFrame( time, frame ) {

    		animationLoop( time, frame );

    		requestId = context.requestAnimationFrame( onAnimationFrame );

    	}

    	return {

    		start: function () {

    			if ( isAnimating === true ) return;
    			if ( animationLoop === null ) return;

    			requestId = context.requestAnimationFrame( onAnimationFrame );

    			isAnimating = true;

    		},

    		stop: function () {

    			context.cancelAnimationFrame( requestId );

    			isAnimating = false;

    		},

    		setAnimationLoop: function ( callback ) {

    			animationLoop = callback;

    		},

    		setContext: function ( value ) {

    			context = value;

    		}

    	};

    }

    function WebGLAttributes( gl ) {

    	const buffers = new WeakMap();

    	function createBuffer( attribute, bufferType ) {

    		const array = attribute.array;
    		const usage = attribute.usage;
    		const size = array.byteLength;

    		const buffer = gl.createBuffer();

    		gl.bindBuffer( bufferType, buffer );
    		gl.bufferData( bufferType, array, usage );

    		attribute.onUploadCallback();

    		let type;

    		if ( array instanceof Float32Array ) {

    			type = gl.FLOAT;

    		} else if ( typeof Float16Array !== 'undefined' && array instanceof Float16Array ) {

    			type = gl.HALF_FLOAT;

    		} else if ( array instanceof Uint16Array ) {

    			if ( attribute.isFloat16BufferAttribute ) {

    				type = gl.HALF_FLOAT;

    			} else {

    				type = gl.UNSIGNED_SHORT;

    			}

    		} else if ( array instanceof Int16Array ) {

    			type = gl.SHORT;

    		} else if ( array instanceof Uint32Array ) {

    			type = gl.UNSIGNED_INT;

    		} else if ( array instanceof Int32Array ) {

    			type = gl.INT;

    		} else if ( array instanceof Int8Array ) {

    			type = gl.BYTE;

    		} else if ( array instanceof Uint8Array ) {

    			type = gl.UNSIGNED_BYTE;

    		} else if ( array instanceof Uint8ClampedArray ) {

    			type = gl.UNSIGNED_BYTE;

    		} else {

    			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

    		}

    		return {
    			buffer: buffer,
    			type: type,
    			bytesPerElement: array.BYTES_PER_ELEMENT,
    			version: attribute.version,
    			size: size
    		};

    	}

    	function updateBuffer( buffer, attribute, bufferType ) {

    		const array = attribute.array;
    		const updateRanges = attribute.updateRanges;

    		gl.bindBuffer( bufferType, buffer );

    		if ( updateRanges.length === 0 ) {

    			// Not using update ranges
    			gl.bufferSubData( bufferType, 0, array );

    		} else {

    			// Before applying update ranges, we merge any adjacent / overlapping
    			// ranges to reduce load on `gl.bufferSubData`. Empirically, this has led
    			// to performance improvements for applications which make heavy use of
    			// update ranges. Likely due to GPU command overhead.
    			//
    			// Note that to reduce garbage collection between frames, we merge the
    			// update ranges in-place. This is safe because this method will clear the
    			// update ranges once updated.

    			updateRanges.sort( ( a, b ) => a.start - b.start );

    			// To merge the update ranges in-place, we work from left to right in the
    			// existing updateRanges array, merging ranges. This may result in a final
    			// array which is smaller than the original. This index tracks the last
    			// index representing a merged range, any data after this index can be
    			// trimmed once the merge algorithm is completed.
    			let mergeIndex = 0;

    			for ( let i = 1; i < updateRanges.length; i ++ ) {

    				const previousRange = updateRanges[ mergeIndex ];
    				const range = updateRanges[ i ];

    				// We add one here to merge adjacent ranges. This is safe because ranges
    				// operate over positive integers.
    				if ( range.start <= previousRange.start + previousRange.count + 1 ) {

    					previousRange.count = Math.max(
    						previousRange.count,
    						range.start + range.count - previousRange.start
    					);

    				} else {

    					++ mergeIndex;
    					updateRanges[ mergeIndex ] = range;

    				}

    			}

    			// Trim the array to only contain the merged ranges.
    			updateRanges.length = mergeIndex + 1;

    			for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

    				const range = updateRanges[ i ];

    				gl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,
    					array, range.start, range.count );

    			}

    			attribute.clearUpdateRanges();

    		}

    		attribute.onUploadCallback();

    	}

    	//

    	function get( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		return buffers.get( attribute );

    	}

    	function remove( attribute ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		const data = buffers.get( attribute );

    		if ( data ) {

    			gl.deleteBuffer( data.buffer );

    			buffers.delete( attribute );

    		}

    	}

    	function update( attribute, bufferType ) {

    		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

    		if ( attribute.isGLBufferAttribute ) {

    			const cached = buffers.get( attribute );

    			if ( ! cached || cached.version < attribute.version ) {

    				buffers.set( attribute, {
    					buffer: attribute.buffer,
    					type: attribute.type,
    					bytesPerElement: attribute.elementSize,
    					version: attribute.version
    				} );

    			}

    			return;

    		}

    		const data = buffers.get( attribute );

    		if ( data === undefined ) {

    			buffers.set( attribute, createBuffer( attribute, bufferType ) );

    		} else if ( data.version < attribute.version ) {

    			if ( data.size !== attribute.array.byteLength ) {

    				throw new Error( 'THREE.WebGLAttributes: The size of the buffer attribute\'s array buffer does not match the original size. Resizing buffer attributes is not supported.' );

    			}

    			updateBuffer( data.buffer, attribute, bufferType );

    			data.version = attribute.version;

    		}

    	}

    	return {

    		get: get,
    		remove: remove,
    		update: update

    	};

    }

    var alphahash_fragment = "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";

    var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";

    var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";

    var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

    var alphatest_fragment = "#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";

    var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

    var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

    var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

    var batching_pars_vertex = "#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif";

    var batching_vertex = "#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";

    var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";

    var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

    var bsdfs = "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";

    var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";

    var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

    var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";

    var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

    var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

    var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

    var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

    var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

    var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif";

    var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif";

    var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";

    var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

    var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

    var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

    var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";

    var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

    var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

    var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

    var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

    var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

    var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

    var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

    var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

    var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

    var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

    var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

    var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

    var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

    var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";

    var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

    var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";

    var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";

    var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

    var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";

    var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

    var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";

    var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

    var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";

    var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";

    var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

    var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

    var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

    var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";

    var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

    var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

    var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

    var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";

    var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

    var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

    var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

    var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

    var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

    var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

    var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";

    var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

    var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";

    var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif";

    var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";

    var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";

    var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

    var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

    var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

    var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

    var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";

    var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";

    var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";

    var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";

    var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

    var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

    var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";

    var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

    var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

    var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

    var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

    var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

    var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

    var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif";

    var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

    var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";

    var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

    var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

    var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";

    var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

    var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

    var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

    var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

    var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

    var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

    var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";

    var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";

    var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

    var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

    var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";

    var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

    const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

    const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

    const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

    const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

    const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

    const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

    const vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

    const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}";

    const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

    const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

    const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

    const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

    const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

    const vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

    const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

    const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

    const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

    const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

    const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

    const vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

    const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

    const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

    const ShaderChunk = {
    	alphahash_fragment: alphahash_fragment,
    	alphahash_pars_fragment: alphahash_pars_fragment,
    	alphamap_fragment: alphamap_fragment,
    	alphamap_pars_fragment: alphamap_pars_fragment,
    	alphatest_fragment: alphatest_fragment,
    	alphatest_pars_fragment: alphatest_pars_fragment,
    	aomap_fragment: aomap_fragment,
    	aomap_pars_fragment: aomap_pars_fragment,
    	batching_pars_vertex: batching_pars_vertex,
    	batching_vertex: batching_vertex,
    	begin_vertex: begin_vertex,
    	beginnormal_vertex: beginnormal_vertex,
    	bsdfs: bsdfs,
    	iridescence_fragment: iridescence_fragment,
    	bumpmap_pars_fragment: bumpmap_pars_fragment,
    	clipping_planes_fragment: clipping_planes_fragment,
    	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
    	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
    	clipping_planes_vertex: clipping_planes_vertex,
    	color_fragment: color_fragment,
    	color_pars_fragment: color_pars_fragment,
    	color_pars_vertex: color_pars_vertex,
    	color_vertex: color_vertex,
    	common: common,
    	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
    	defaultnormal_vertex: defaultnormal_vertex,
    	displacementmap_pars_vertex: displacementmap_pars_vertex,
    	displacementmap_vertex: displacementmap_vertex,
    	emissivemap_fragment: emissivemap_fragment,
    	emissivemap_pars_fragment: emissivemap_pars_fragment,
    	colorspace_fragment: colorspace_fragment,
    	colorspace_pars_fragment: colorspace_pars_fragment,
    	envmap_fragment: envmap_fragment,
    	envmap_common_pars_fragment: envmap_common_pars_fragment,
    	envmap_pars_fragment: envmap_pars_fragment,
    	envmap_pars_vertex: envmap_pars_vertex,
    	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
    	envmap_vertex: envmap_vertex,
    	fog_vertex: fog_vertex,
    	fog_pars_vertex: fog_pars_vertex,
    	fog_fragment: fog_fragment,
    	fog_pars_fragment: fog_pars_fragment,
    	gradientmap_pars_fragment: gradientmap_pars_fragment,
    	lightmap_pars_fragment: lightmap_pars_fragment,
    	lights_lambert_fragment: lights_lambert_fragment,
    	lights_lambert_pars_fragment: lights_lambert_pars_fragment,
    	lights_pars_begin: lights_pars_begin,
    	lights_toon_fragment: lights_toon_fragment,
    	lights_toon_pars_fragment: lights_toon_pars_fragment,
    	lights_phong_fragment: lights_phong_fragment,
    	lights_phong_pars_fragment: lights_phong_pars_fragment,
    	lights_physical_fragment: lights_physical_fragment,
    	lights_physical_pars_fragment: lights_physical_pars_fragment,
    	lights_fragment_begin: lights_fragment_begin,
    	lights_fragment_maps: lights_fragment_maps,
    	lights_fragment_end: lights_fragment_end,
    	logdepthbuf_fragment: logdepthbuf_fragment,
    	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
    	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
    	logdepthbuf_vertex: logdepthbuf_vertex,
    	map_fragment: map_fragment,
    	map_pars_fragment: map_pars_fragment,
    	map_particle_fragment: map_particle_fragment,
    	map_particle_pars_fragment: map_particle_pars_fragment,
    	metalnessmap_fragment: metalnessmap_fragment,
    	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
    	morphinstance_vertex: morphinstance_vertex,
    	morphcolor_vertex: morphcolor_vertex,
    	morphnormal_vertex: morphnormal_vertex,
    	morphtarget_pars_vertex: morphtarget_pars_vertex,
    	morphtarget_vertex: morphtarget_vertex,
    	normal_fragment_begin: normal_fragment_begin,
    	normal_fragment_maps: normal_fragment_maps,
    	normal_pars_fragment: normal_pars_fragment,
    	normal_pars_vertex: normal_pars_vertex,
    	normal_vertex: normal_vertex,
    	normalmap_pars_fragment: normalmap_pars_fragment,
    	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
    	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
    	clearcoat_pars_fragment: clearcoat_pars_fragment,
    	iridescence_pars_fragment: iridescence_pars_fragment,
    	opaque_fragment: opaque_fragment,
    	packing: packing,
    	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
    	project_vertex: project_vertex,
    	dithering_fragment: dithering_fragment,
    	dithering_pars_fragment: dithering_pars_fragment,
    	roughnessmap_fragment: roughnessmap_fragment,
    	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
    	shadowmap_pars_fragment: shadowmap_pars_fragment,
    	shadowmap_pars_vertex: shadowmap_pars_vertex,
    	shadowmap_vertex: shadowmap_vertex,
    	shadowmask_pars_fragment: shadowmask_pars_fragment,
    	skinbase_vertex: skinbase_vertex,
    	skinning_pars_vertex: skinning_pars_vertex,
    	skinning_vertex: skinning_vertex,
    	skinnormal_vertex: skinnormal_vertex,
    	specularmap_fragment: specularmap_fragment,
    	specularmap_pars_fragment: specularmap_pars_fragment,
    	tonemapping_fragment: tonemapping_fragment,
    	tonemapping_pars_fragment: tonemapping_pars_fragment,
    	transmission_fragment: transmission_fragment,
    	transmission_pars_fragment: transmission_pars_fragment,
    	uv_pars_fragment: uv_pars_fragment,
    	uv_pars_vertex: uv_pars_vertex,
    	uv_vertex: uv_vertex,
    	worldpos_vertex: worldpos_vertex,

    	background_vert: vertex$h,
    	background_frag: fragment$h,
    	backgroundCube_vert: vertex$g,
    	backgroundCube_frag: fragment$g,
    	cube_vert: vertex$f,
    	cube_frag: fragment$f,
    	depth_vert: vertex$e,
    	depth_frag: fragment$e,
    	distanceRGBA_vert: vertex$d,
    	distanceRGBA_frag: fragment$d,
    	equirect_vert: vertex$c,
    	equirect_frag: fragment$c,
    	linedashed_vert: vertex$b,
    	linedashed_frag: fragment$b,
    	meshbasic_vert: vertex$a,
    	meshbasic_frag: fragment$a,
    	meshlambert_vert: vertex$9,
    	meshlambert_frag: fragment$9,
    	meshmatcap_vert: vertex$8,
    	meshmatcap_frag: fragment$8,
    	meshnormal_vert: vertex$7,
    	meshnormal_frag: fragment$7,
    	meshphong_vert: vertex$6,
    	meshphong_frag: fragment$6,
    	meshphysical_vert: vertex$5,
    	meshphysical_frag: fragment$5,
    	meshtoon_vert: vertex$4,
    	meshtoon_frag: fragment$4,
    	points_vert: vertex$3,
    	points_frag: fragment$3,
    	shadow_vert: vertex$2,
    	shadow_frag: fragment$2,
    	sprite_vert: vertex$1,
    	sprite_frag: fragment$1
    };

    // Uniforms library for shared webgl shaders
    const UniformsLib = {

    	common: {

    		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
    		opacity: { value: 1.0 },

    		map: { value: null },
    		mapTransform: { value: /*@__PURE__*/ new Matrix3() },

    		alphaMap: { value: null },
    		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },

    		alphaTest: { value: 0 }

    	},

    	specularmap: {

    		specularMap: { value: null },
    		specularMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	envmap: {

    		envMap: { value: null },
    		envMapRotation: { value: /*@__PURE__*/ new Matrix3() },
    		flipEnvMap: { value: -1 },
    		reflectivity: { value: 1.0 }, // basic, lambert, phong
    		ior: { value: 1.5 }, // physical
    		refractionRatio: { value: 0.98 }, // basic, lambert, phong

    	},

    	aomap: {

    		aoMap: { value: null },
    		aoMapIntensity: { value: 1 },
    		aoMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	lightmap: {

    		lightMap: { value: null },
    		lightMapIntensity: { value: 1 },
    		lightMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	bumpmap: {

    		bumpMap: { value: null },
    		bumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		bumpScale: { value: 1 }

    	},

    	normalmap: {

    		normalMap: { value: null },
    		normalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		normalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }

    	},

    	displacementmap: {

    		displacementMap: { value: null },
    		displacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		displacementScale: { value: 1 },
    		displacementBias: { value: 0 }

    	},

    	emissivemap: {

    		emissiveMap: { value: null },
    		emissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	metalnessmap: {

    		metalnessMap: { value: null },
    		metalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	roughnessmap: {

    		roughnessMap: { value: null },
    		roughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	gradientmap: {

    		gradientMap: { value: null }

    	},

    	fog: {

    		fogDensity: { value: 0.00025 },
    		fogNear: { value: 1 },
    		fogFar: { value: 2000 },
    		fogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }

    	},

    	lights: {

    		ambientLightColor: { value: [] },

    		lightProbe: { value: [] },

    		directionalLights: { value: [], properties: {
    			direction: {},
    			color: {}
    		} },

    		directionalLightShadows: { value: [], properties: {
    			shadowIntensity: 1,
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		directionalShadowMap: { value: [] },
    		directionalShadowMatrix: { value: [] },

    		spotLights: { value: [], properties: {
    			color: {},
    			position: {},
    			direction: {},
    			distance: {},
    			coneCos: {},
    			penumbraCos: {},
    			decay: {}
    		} },

    		spotLightShadows: { value: [], properties: {
    			shadowIntensity: 1,
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {}
    		} },

    		spotLightMap: { value: [] },
    		spotShadowMap: { value: [] },
    		spotLightMatrix: { value: [] },

    		pointLights: { value: [], properties: {
    			color: {},
    			position: {},
    			decay: {},
    			distance: {}
    		} },

    		pointLightShadows: { value: [], properties: {
    			shadowIntensity: 1,
    			shadowBias: {},
    			shadowNormalBias: {},
    			shadowRadius: {},
    			shadowMapSize: {},
    			shadowCameraNear: {},
    			shadowCameraFar: {}
    		} },

    		pointShadowMap: { value: [] },
    		pointShadowMatrix: { value: [] },

    		hemisphereLights: { value: [], properties: {
    			direction: {},
    			skyColor: {},
    			groundColor: {}
    		} },

    		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    		rectAreaLights: { value: [], properties: {
    			color: {},
    			position: {},
    			width: {},
    			height: {}
    		} },

    		ltc_1: { value: null },
    		ltc_2: { value: null }

    	},

    	points: {

    		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
    		opacity: { value: 1.0 },
    		size: { value: 1.0 },
    		scale: { value: 1.0 },
    		map: { value: null },
    		alphaMap: { value: null },
    		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		alphaTest: { value: 0 },
    		uvTransform: { value: /*@__PURE__*/ new Matrix3() }

    	},

    	sprite: {

    		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
    		opacity: { value: 1.0 },
    		center: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },
    		rotation: { value: 0.0 },
    		map: { value: null },
    		mapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		alphaMap: { value: null },
    		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		alphaTest: { value: 0 }

    	}

    };

    const ShaderLib = {

    	basic: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.meshbasic_vert,
    		fragmentShader: ShaderChunk.meshbasic_frag

    	},

    	lambert: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshlambert_vert,
    		fragmentShader: ShaderChunk.meshlambert_frag

    	},

    	phong: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.specularmap,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
    				specular: { value: /*@__PURE__*/ new Color( 0x111111 ) },
    				shininess: { value: 30 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphong_vert,
    		fragmentShader: ShaderChunk.meshphong_frag

    	},

    	standard: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.envmap,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.roughnessmap,
    			UniformsLib.metalnessmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
    				roughness: { value: 1.0 },
    				metalness: { value: 0.0 },
    				envMapIntensity: { value: 1 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshphysical_vert,
    		fragmentShader: ShaderChunk.meshphysical_frag

    	},

    	toon: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.aomap,
    			UniformsLib.lightmap,
    			UniformsLib.emissivemap,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.gradientmap,
    			UniformsLib.fog,
    			UniformsLib.lights,
    			{
    				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshtoon_vert,
    		fragmentShader: ShaderChunk.meshtoon_frag

    	},

    	matcap: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			UniformsLib.fog,
    			{
    				matcap: { value: null }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshmatcap_vert,
    		fragmentShader: ShaderChunk.meshmatcap_frag

    	},

    	points: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.points,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.points_vert,
    		fragmentShader: ShaderChunk.points_frag

    	},

    	dashed: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.fog,
    			{
    				scale: { value: 1 },
    				dashSize: { value: 1 },
    				totalSize: { value: 2 }
    			}
    		] ),

    		vertexShader: ShaderChunk.linedashed_vert,
    		fragmentShader: ShaderChunk.linedashed_frag

    	},

    	depth: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap
    		] ),

    		vertexShader: ShaderChunk.depth_vert,
    		fragmentShader: ShaderChunk.depth_frag

    	},

    	normal: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.bumpmap,
    			UniformsLib.normalmap,
    			UniformsLib.displacementmap,
    			{
    				opacity: { value: 1.0 }
    			}
    		] ),

    		vertexShader: ShaderChunk.meshnormal_vert,
    		fragmentShader: ShaderChunk.meshnormal_frag

    	},

    	sprite: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.sprite,
    			UniformsLib.fog
    		] ),

    		vertexShader: ShaderChunk.sprite_vert,
    		fragmentShader: ShaderChunk.sprite_frag

    	},

    	background: {

    		uniforms: {
    			uvTransform: { value: /*@__PURE__*/ new Matrix3() },
    			t2D: { value: null },
    			backgroundIntensity: { value: 1 }
    		},

    		vertexShader: ShaderChunk.background_vert,
    		fragmentShader: ShaderChunk.background_frag

    	},

    	backgroundCube: {

    		uniforms: {
    			envMap: { value: null },
    			flipEnvMap: { value: -1 },
    			backgroundBlurriness: { value: 0 },
    			backgroundIntensity: { value: 1 },
    			backgroundRotation: { value: /*@__PURE__*/ new Matrix3() }
    		},

    		vertexShader: ShaderChunk.backgroundCube_vert,
    		fragmentShader: ShaderChunk.backgroundCube_frag

    	},

    	cube: {

    		uniforms: {
    			tCube: { value: null },
    			tFlip: { value: -1 },
    			opacity: { value: 1.0 }
    		},

    		vertexShader: ShaderChunk.cube_vert,
    		fragmentShader: ShaderChunk.cube_frag

    	},

    	equirect: {

    		uniforms: {
    			tEquirect: { value: null },
    		},

    		vertexShader: ShaderChunk.equirect_vert,
    		fragmentShader: ShaderChunk.equirect_frag

    	},

    	distanceRGBA: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.common,
    			UniformsLib.displacementmap,
    			{
    				referencePosition: { value: /*@__PURE__*/ new Vector3() },
    				nearDistance: { value: 1 },
    				farDistance: { value: 1000 }
    			}
    		] ),

    		vertexShader: ShaderChunk.distanceRGBA_vert,
    		fragmentShader: ShaderChunk.distanceRGBA_frag

    	},

    	shadow: {

    		uniforms: /*@__PURE__*/ mergeUniforms( [
    			UniformsLib.lights,
    			UniformsLib.fog,
    			{
    				color: { value: /*@__PURE__*/ new Color( 0x00000 ) },
    				opacity: { value: 1.0 }
    			},
    		] ),

    		vertexShader: ShaderChunk.shadow_vert,
    		fragmentShader: ShaderChunk.shadow_frag

    	}

    };

    ShaderLib.physical = {

    	uniforms: /*@__PURE__*/ mergeUniforms( [
    		ShaderLib.standard.uniforms,
    		{
    			clearcoat: { value: 0 },
    			clearcoatMap: { value: null },
    			clearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			clearcoatNormalMap: { value: null },
    			clearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },
    			clearcoatRoughness: { value: 0 },
    			clearcoatRoughnessMap: { value: null },
    			clearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			dispersion: { value: 0 },
    			iridescence: { value: 0 },
    			iridescenceMap: { value: null },
    			iridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			iridescenceIOR: { value: 1.3 },
    			iridescenceThicknessMinimum: { value: 100 },
    			iridescenceThicknessMaximum: { value: 400 },
    			iridescenceThicknessMap: { value: null },
    			iridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			sheen: { value: 0 },
    			sheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
    			sheenColorMap: { value: null },
    			sheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			sheenRoughness: { value: 1 },
    			sheenRoughnessMap: { value: null },
    			sheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			transmission: { value: 0 },
    			transmissionMap: { value: null },
    			transmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },
    			transmissionSamplerMap: { value: null },
    			thickness: { value: 0 },
    			thicknessMap: { value: null },
    			thicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			attenuationDistance: { value: 0 },
    			attenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
    			specularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },
    			specularColorMap: { value: null },
    			specularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			specularIntensity: { value: 1 },
    			specularIntensityMap: { value: null },
    			specularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    			anisotropyVector: { value: /*@__PURE__*/ new Vector2() },
    			anisotropyMap: { value: null },
    			anisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },
    		}
    	] ),

    	vertexShader: ShaderChunk.meshphysical_vert,
    	fragmentShader: ShaderChunk.meshphysical_frag

    };

    const _rgb = { r: 0, b: 0, g: 0 };
    const _e1$1 = /*@__PURE__*/ new Euler();
    const _m1$1 = /*@__PURE__*/ new Matrix4();

    function WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {

    	const clearColor = new Color( 0x000000 );
    	let clearAlpha = alpha === true ? 0 : 1;

    	let planeMesh;
    	let boxMesh;

    	let currentBackground = null;
    	let currentBackgroundVersion = 0;
    	let currentTonemapping = null;

    	function getBackground( scene ) {

    		let background = scene.isScene === true ? scene.background : null;

    		if ( background && background.isTexture ) {

    			const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
    			background = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );

    		}

    		return background;

    	}

    	function render( scene ) {

    		let forceClear = false;
    		const background = getBackground( scene );

    		if ( background === null ) {

    			setClear( clearColor, clearAlpha );

    		} else if ( background && background.isColor ) {

    			setClear( background, 1 );
    			forceClear = true;

    		}

    		const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();

    		if ( environmentBlendMode === 'additive' ) {

    			state.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );

    		} else if ( environmentBlendMode === 'alpha-blend' ) {

    			state.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );

    		}

    		if ( renderer.autoClear || forceClear ) {

    			// buffers might not be writable which is required to ensure a correct clear

    			state.buffers.depth.setTest( true );
    			state.buffers.depth.setMask( true );
    			state.buffers.color.setMask( true );

    			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

    		}

    	}

    	function addToRenderList( renderList, scene ) {

    		const background = getBackground( scene );

    		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

    			if ( boxMesh === undefined ) {

    				boxMesh = new Mesh(
    					new BoxGeometry( 1, 1, 1 ),
    					new ShaderMaterial( {
    						name: 'BackgroundCubeMaterial',
    						uniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),
    						vertexShader: ShaderLib.backgroundCube.vertexShader,
    						fragmentShader: ShaderLib.backgroundCube.fragmentShader,
    						side: BackSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false,
    						allowOverride: false
    					} )
    				);

    				boxMesh.geometry.deleteAttribute( 'normal' );
    				boxMesh.geometry.deleteAttribute( 'uv' );

    				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

    					this.matrixWorld.copyPosition( camera.matrixWorld );

    				};

    				// add "envMap" material property so the renderer can evaluate it like for built-in materials
    				Object.defineProperty( boxMesh.material, 'envMap', {

    					get: function () {

    						return this.uniforms.envMap.value;

    					}

    				} );

    				objects.update( boxMesh );

    			}

    			_e1$1.copy( scene.backgroundRotation );

    			// accommodate left-handed frame
    			_e1$1.x *= -1; _e1$1.y *= -1; _e1$1.z *= -1;

    			if ( background.isCubeTexture && background.isRenderTargetTexture === false ) {

    				// environment maps which are not cube render targets or PMREMs follow a different convention
    				_e1$1.y *= -1;
    				_e1$1.z *= -1;

    			}

    			boxMesh.material.uniforms.envMap.value = background;
    			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? -1 : 1;
    			boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
    			boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
    			boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4( _m1$1.makeRotationFromEuler( _e1$1 ) );
    			boxMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== background.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				boxMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = background.version;
    				currentTonemapping = renderer.toneMapping;

    			}

    			boxMesh.layers.enableAll();

    			// push to the pre-sorted opaque render list
    			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

    		} else if ( background && background.isTexture ) {

    			if ( planeMesh === undefined ) {

    				planeMesh = new Mesh(
    					new PlaneGeometry( 2, 2 ),
    					new ShaderMaterial( {
    						name: 'BackgroundMaterial',
    						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
    						vertexShader: ShaderLib.background.vertexShader,
    						fragmentShader: ShaderLib.background.fragmentShader,
    						side: FrontSide,
    						depthTest: false,
    						depthWrite: false,
    						fog: false,
    						allowOverride: false
    					} )
    				);

    				planeMesh.geometry.deleteAttribute( 'normal' );

    				// add "map" material property so the renderer can evaluate it like for built-in materials
    				Object.defineProperty( planeMesh.material, 'map', {

    					get: function () {

    						return this.uniforms.t2D.value;

    					}

    				} );

    				objects.update( planeMesh );

    			}

    			planeMesh.material.uniforms.t2D.value = background;
    			planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
    			planeMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;

    			if ( background.matrixAutoUpdate === true ) {

    				background.updateMatrix();

    			}

    			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

    			if ( currentBackground !== background ||
    				currentBackgroundVersion !== background.version ||
    				currentTonemapping !== renderer.toneMapping ) {

    				planeMesh.material.needsUpdate = true;

    				currentBackground = background;
    				currentBackgroundVersion = background.version;
    				currentTonemapping = renderer.toneMapping;

    			}

    			planeMesh.layers.enableAll();

    			// push to the pre-sorted opaque render list
    			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

    		}

    	}

    	function setClear( color, alpha ) {

    		color.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );

    		state.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );

    	}

    	function dispose() {

    		if ( boxMesh !== undefined ) {

    			boxMesh.geometry.dispose();
    			boxMesh.material.dispose();

    			boxMesh = undefined;

    		}

    		if ( planeMesh !== undefined ) {

    			planeMesh.geometry.dispose();
    			planeMesh.material.dispose();

    			planeMesh = undefined;

    		}

    	}

    	return {

    		getClearColor: function () {

    			return clearColor;

    		},
    		setClearColor: function ( color, alpha = 1 ) {

    			clearColor.set( color );
    			clearAlpha = alpha;
    			setClear( clearColor, clearAlpha );

    		},
    		getClearAlpha: function () {

    			return clearAlpha;

    		},
    		setClearAlpha: function ( alpha ) {

    			clearAlpha = alpha;
    			setClear( clearColor, clearAlpha );

    		},
    		render: render,
    		addToRenderList: addToRenderList,
    		dispose: dispose

    	};

    }

    function WebGLBindingStates( gl, attributes ) {

    	const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

    	const bindingStates = {};

    	const defaultState = createBindingState( null );
    	let currentState = defaultState;
    	let forceUpdate = false;

    	function setup( object, material, program, geometry, index ) {

    		let updateBuffers = false;

    		const state = getBindingState( geometry, program, material );

    		if ( currentState !== state ) {

    			currentState = state;
    			bindVertexArrayObject( currentState.object );

    		}

    		updateBuffers = needsUpdate( object, geometry, program, index );

    		if ( updateBuffers ) saveCache( object, geometry, program, index );

    		if ( index !== null ) {

    			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

    		}

    		if ( updateBuffers || forceUpdate ) {

    			forceUpdate = false;

    			setupVertexAttributes( object, material, program, geometry );

    			if ( index !== null ) {

    				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

    			}

    		}

    	}

    	function createVertexArrayObject() {

    		return gl.createVertexArray();

    	}

    	function bindVertexArrayObject( vao ) {

    		return gl.bindVertexArray( vao );

    	}

    	function deleteVertexArrayObject( vao ) {

    		return gl.deleteVertexArray( vao );

    	}

    	function getBindingState( geometry, program, material ) {

    		const wireframe = ( material.wireframe === true );

    		let programMap = bindingStates[ geometry.id ];

    		if ( programMap === undefined ) {

    			programMap = {};
    			bindingStates[ geometry.id ] = programMap;

    		}

    		let stateMap = programMap[ program.id ];

    		if ( stateMap === undefined ) {

    			stateMap = {};
    			programMap[ program.id ] = stateMap;

    		}

    		let state = stateMap[ wireframe ];

    		if ( state === undefined ) {

    			state = createBindingState( createVertexArrayObject() );
    			stateMap[ wireframe ] = state;

    		}

    		return state;

    	}

    	function createBindingState( vao ) {

    		const newAttributes = [];
    		const enabledAttributes = [];
    		const attributeDivisors = [];

    		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

    			newAttributes[ i ] = 0;
    			enabledAttributes[ i ] = 0;
    			attributeDivisors[ i ] = 0;

    		}

    		return {

    			// for backward compatibility on non-VAO support browser
    			geometry: null,
    			program: null,
    			wireframe: false,

    			newAttributes: newAttributes,
    			enabledAttributes: enabledAttributes,
    			attributeDivisors: attributeDivisors,
    			object: vao,
    			attributes: {},
    			index: null

    		};

    	}

    	function needsUpdate( object, geometry, program, index ) {

    		const cachedAttributes = currentState.attributes;
    		const geometryAttributes = geometry.attributes;

    		let attributesNum = 0;

    		const programAttributes = program.getAttributes();

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				const cachedAttribute = cachedAttributes[ name ];
    				let geometryAttribute = geometryAttributes[ name ];

    				if ( geometryAttribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

    				}

    				if ( cachedAttribute === undefined ) return true;

    				if ( cachedAttribute.attribute !== geometryAttribute ) return true;

    				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

    				attributesNum ++;

    			}

    		}

    		if ( currentState.attributesNum !== attributesNum ) return true;

    		if ( currentState.index !== index ) return true;

    		return false;

    	}

    	function saveCache( object, geometry, program, index ) {

    		const cache = {};
    		const attributes = geometry.attributes;
    		let attributesNum = 0;

    		const programAttributes = program.getAttributes();

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				let attribute = attributes[ name ];

    				if ( attribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

    				}

    				const data = {};
    				data.attribute = attribute;

    				if ( attribute && attribute.data ) {

    					data.data = attribute.data;

    				}

    				cache[ name ] = data;

    				attributesNum ++;

    			}

    		}

    		currentState.attributes = cache;
    		currentState.attributesNum = attributesNum;

    		currentState.index = index;

    	}

    	function initAttributes() {

    		const newAttributes = currentState.newAttributes;

    		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

    			newAttributes[ i ] = 0;

    		}

    	}

    	function enableAttribute( attribute ) {

    		enableAttributeAndDivisor( attribute, 0 );

    	}

    	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;
    		const attributeDivisors = currentState.attributeDivisors;

    		newAttributes[ attribute ] = 1;

    		if ( enabledAttributes[ attribute ] === 0 ) {

    			gl.enableVertexAttribArray( attribute );
    			enabledAttributes[ attribute ] = 1;

    		}

    		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

    			gl.vertexAttribDivisor( attribute, meshPerAttribute );
    			attributeDivisors[ attribute ] = meshPerAttribute;

    		}

    	}

    	function disableUnusedAttributes() {

    		const newAttributes = currentState.newAttributes;
    		const enabledAttributes = currentState.enabledAttributes;

    		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

    			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

    				gl.disableVertexAttribArray( i );
    				enabledAttributes[ i ] = 0;

    			}

    		}

    	}

    	function vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {

    		if ( integer === true ) {

    			gl.vertexAttribIPointer( index, size, type, stride, offset );

    		} else {

    			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

    		}

    	}

    	function setupVertexAttributes( object, material, program, geometry ) {

    		initAttributes();

    		const geometryAttributes = geometry.attributes;

    		const programAttributes = program.getAttributes();

    		const materialDefaultAttributeValues = material.defaultAttributeValues;

    		for ( const name in programAttributes ) {

    			const programAttribute = programAttributes[ name ];

    			if ( programAttribute.location >= 0 ) {

    				let geometryAttribute = geometryAttributes[ name ];

    				if ( geometryAttribute === undefined ) {

    					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
    					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

    				}

    				if ( geometryAttribute !== undefined ) {

    					const normalized = geometryAttribute.normalized;
    					const size = geometryAttribute.itemSize;

    					const attribute = attributes.get( geometryAttribute );

    					// TODO Attribute may not be available on context restore

    					if ( attribute === undefined ) continue;

    					const buffer = attribute.buffer;
    					const type = attribute.type;
    					const bytesPerElement = attribute.bytesPerElement;

    					// check for integer attributes

    					const integer = ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType );

    					if ( geometryAttribute.isInterleavedBufferAttribute ) {

    						const data = geometryAttribute.data;
    						const stride = data.stride;
    						const offset = geometryAttribute.offset;

    						if ( data.isInstancedInterleavedBuffer ) {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

    							}

    							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

    							}

    						} else {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttribute( programAttribute.location + i );

    							}

    						}

    						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

    						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    							vertexAttribPointer(
    								programAttribute.location + i,
    								size / programAttribute.locationSize,
    								type,
    								normalized,
    								stride * bytesPerElement,
    								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,
    								integer
    							);

    						}

    					} else {

    						if ( geometryAttribute.isInstancedBufferAttribute ) {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

    							}

    							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

    								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

    							}

    						} else {

    							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    								enableAttribute( programAttribute.location + i );

    							}

    						}

    						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

    						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

    							vertexAttribPointer(
    								programAttribute.location + i,
    								size / programAttribute.locationSize,
    								type,
    								normalized,
    								size * bytesPerElement,
    								( size / programAttribute.locationSize ) * i * bytesPerElement,
    								integer
    							);

    						}

    					}

    				} else if ( materialDefaultAttributeValues !== undefined ) {

    					const value = materialDefaultAttributeValues[ name ];

    					if ( value !== undefined ) {

    						switch ( value.length ) {

    							case 2:
    								gl.vertexAttrib2fv( programAttribute.location, value );
    								break;

    							case 3:
    								gl.vertexAttrib3fv( programAttribute.location, value );
    								break;

    							case 4:
    								gl.vertexAttrib4fv( programAttribute.location, value );
    								break;

    							default:
    								gl.vertexAttrib1fv( programAttribute.location, value );

    						}

    					}

    				}

    			}

    		}

    		disableUnusedAttributes();

    	}

    	function dispose() {

    		reset();

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			for ( const programId in programMap ) {

    				const stateMap = programMap[ programId ];

    				for ( const wireframe in stateMap ) {

    					deleteVertexArrayObject( stateMap[ wireframe ].object );

    					delete stateMap[ wireframe ];

    				}

    				delete programMap[ programId ];

    			}

    			delete bindingStates[ geometryId ];

    		}

    	}

    	function releaseStatesOfGeometry( geometry ) {

    		if ( bindingStates[ geometry.id ] === undefined ) return;

    		const programMap = bindingStates[ geometry.id ];

    		for ( const programId in programMap ) {

    			const stateMap = programMap[ programId ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ programId ];

    		}

    		delete bindingStates[ geometry.id ];

    	}

    	function releaseStatesOfProgram( program ) {

    		for ( const geometryId in bindingStates ) {

    			const programMap = bindingStates[ geometryId ];

    			if ( programMap[ program.id ] === undefined ) continue;

    			const stateMap = programMap[ program.id ];

    			for ( const wireframe in stateMap ) {

    				deleteVertexArrayObject( stateMap[ wireframe ].object );

    				delete stateMap[ wireframe ];

    			}

    			delete programMap[ program.id ];

    		}

    	}

    	function reset() {

    		resetDefaultState();
    		forceUpdate = true;

    		if ( currentState === defaultState ) return;

    		currentState = defaultState;
    		bindVertexArrayObject( currentState.object );

    	}

    	// for backward-compatibility

    	function resetDefaultState() {

    		defaultState.geometry = null;
    		defaultState.program = null;
    		defaultState.wireframe = false;

    	}

    	return {

    		setup: setup,
    		reset: reset,
    		resetDefaultState: resetDefaultState,
    		dispose: dispose,
    		releaseStatesOfGeometry: releaseStatesOfGeometry,
    		releaseStatesOfProgram: releaseStatesOfProgram,

    		initAttributes: initAttributes,
    		enableAttribute: enableAttribute,
    		disableUnusedAttributes: disableUnusedAttributes

    	};

    }

    function WebGLBufferRenderer( gl, extensions, info ) {

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	function render( start, count ) {

    		gl.drawArrays( mode, start, count );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		gl.drawArraysInstanced( mode, start, count, primcount );

    		info.update( count, mode, primcount );

    	}

    	function renderMultiDraw( starts, counts, drawCount ) {

    		if ( drawCount === 0 ) return;

    		const extension = extensions.get( 'WEBGL_multi_draw' );
    		extension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );

    		let elementCount = 0;
    		for ( let i = 0; i < drawCount; i ++ ) {

    			elementCount += counts[ i ];

    		}

    		info.update( elementCount, mode, 1 );

    	}

    	function renderMultiDrawInstances( starts, counts, drawCount, primcount ) {

    		if ( drawCount === 0 ) return;

    		const extension = extensions.get( 'WEBGL_multi_draw' );

    		if ( extension === null ) {

    			for ( let i = 0; i < starts.length; i ++ ) {

    				renderInstances( starts[ i ], counts[ i ], primcount[ i ] );

    			}

    		} else {

    			extension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );

    			let elementCount = 0;
    			for ( let i = 0; i < drawCount; i ++ ) {

    				elementCount += counts[ i ] * primcount[ i ];

    			}

    			info.update( elementCount, mode, 1 );

    		}

    	}

    	//

    	this.setMode = setMode;
    	this.render = render;
    	this.renderInstances = renderInstances;
    	this.renderMultiDraw = renderMultiDraw;
    	this.renderMultiDrawInstances = renderMultiDrawInstances;

    }

    function WebGLCapabilities( gl, extensions, parameters, utils ) {

    	let maxAnisotropy;

    	function getMaxAnisotropy() {

    		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

    		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

    			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

    			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

    		} else {

    			maxAnisotropy = 0;

    		}

    		return maxAnisotropy;

    	}

    	function textureFormatReadable( textureFormat ) {

    		if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

    			return false;

    		}

    		return true;

    	}

    	function textureTypeReadable( textureType ) {

    		const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) );

    		if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)
    			textureType !== FloatType && ! halfFloatSupportedByExt ) {

    			return false;

    		}

    		return true;

    	}

    	function getMaxPrecision( precision ) {

    		if ( precision === 'highp' ) {

    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
    				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

    				return 'highp';

    			}

    			precision = 'mediump';

    		}

    		if ( precision === 'mediump' ) {

    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
    				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

    				return 'mediump';

    			}

    		}

    		return 'lowp';

    	}

    	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
    	const maxPrecision = getMaxPrecision( precision );

    	if ( maxPrecision !== precision ) {

    		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
    		precision = maxPrecision;

    	}

    	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    	const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has( 'EXT_clip_control' );

    	const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
    	const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
    	const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
    	const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

    	const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
    	const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
    	const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
    	const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

    	const vertexTextures = maxVertexTextures > 0;

    	const maxSamples = gl.getParameter( gl.MAX_SAMPLES );

    	return {

    		isWebGL2: true, // keeping this for backwards compatibility

    		getMaxAnisotropy: getMaxAnisotropy,
    		getMaxPrecision: getMaxPrecision,

    		textureFormatReadable: textureFormatReadable,
    		textureTypeReadable: textureTypeReadable,

    		precision: precision,
    		logarithmicDepthBuffer: logarithmicDepthBuffer,
    		reverseDepthBuffer: reverseDepthBuffer,

    		maxTextures: maxTextures,
    		maxVertexTextures: maxVertexTextures,
    		maxTextureSize: maxTextureSize,
    		maxCubemapSize: maxCubemapSize,

    		maxAttributes: maxAttributes,
    		maxVertexUniforms: maxVertexUniforms,
    		maxVaryings: maxVaryings,
    		maxFragmentUniforms: maxFragmentUniforms,

    		vertexTextures: vertexTextures,

    		maxSamples: maxSamples

    	};

    }

    function WebGLClipping( properties ) {

    	const scope = this;

    	let globalState = null,
    		numGlobalPlanes = 0,
    		localClippingEnabled = false,
    		renderingShadows = false;

    	const plane = new Plane(),
    		viewNormalMatrix = new Matrix3(),

    		uniform = { value: null, needsUpdate: false };

    	this.uniform = uniform;
    	this.numPlanes = 0;
    	this.numIntersection = 0;

    	this.init = function ( planes, enableLocalClipping ) {

    		const enabled =
    			planes.length !== 0 ||
    			enableLocalClipping ||
    			// enable state of previous frame - the clipping code has to
    			// run another frame in order to reset the state:
    			numGlobalPlanes !== 0 ||
    			localClippingEnabled;

    		localClippingEnabled = enableLocalClipping;

    		numGlobalPlanes = planes.length;

    		return enabled;

    	};

    	this.beginShadows = function () {

    		renderingShadows = true;
    		projectPlanes( null );

    	};

    	this.endShadows = function () {

    		renderingShadows = false;

    	};

    	this.setGlobalState = function ( planes, camera ) {

    		globalState = projectPlanes( planes, camera, 0 );

    	};

    	this.setState = function ( material, camera, useCache ) {

    		const planes = material.clippingPlanes,
    			clipIntersection = material.clipIntersection,
    			clipShadows = material.clipShadows;

    		const materialProperties = properties.get( material );

    		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

    			// there's no local clipping

    			if ( renderingShadows ) {

    				// there's no global clipping

    				projectPlanes( null );

    			} else {

    				resetGlobalState();

    			}

    		} else {

    			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
    				lGlobal = nGlobal * 4;

    			let dstArray = materialProperties.clippingState || null;

    			uniform.value = dstArray; // ensure unique state

    			dstArray = projectPlanes( planes, camera, lGlobal, useCache );

    			for ( let i = 0; i !== lGlobal; ++ i ) {

    				dstArray[ i ] = globalState[ i ];

    			}

    			materialProperties.clippingState = dstArray;
    			this.numIntersection = clipIntersection ? this.numPlanes : 0;
    			this.numPlanes += nGlobal;

    		}


    	};

    	function resetGlobalState() {

    		if ( uniform.value !== globalState ) {

    			uniform.value = globalState;
    			uniform.needsUpdate = numGlobalPlanes > 0;

    		}

    		scope.numPlanes = numGlobalPlanes;
    		scope.numIntersection = 0;

    	}

    	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

    		const nPlanes = planes !== null ? planes.length : 0;
    		let dstArray = null;

    		if ( nPlanes !== 0 ) {

    			dstArray = uniform.value;

    			if ( skipTransform !== true || dstArray === null ) {

    				const flatSize = dstOffset + nPlanes * 4,
    					viewMatrix = camera.matrixWorldInverse;

    				viewNormalMatrix.getNormalMatrix( viewMatrix );

    				if ( dstArray === null || dstArray.length < flatSize ) {

    					dstArray = new Float32Array( flatSize );

    				}

    				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

    					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

    					plane.normal.toArray( dstArray, i4 );
    					dstArray[ i4 + 3 ] = plane.constant;

    				}

    			}

    			uniform.value = dstArray;
    			uniform.needsUpdate = true;

    		}

    		scope.numPlanes = nPlanes;
    		scope.numIntersection = 0;

    		return dstArray;

    	}

    }

    function WebGLCubeMaps( renderer ) {

    	let cubemaps = new WeakMap();

    	function mapTextureMapping( texture, mapping ) {

    		if ( mapping === EquirectangularReflectionMapping ) {

    			texture.mapping = CubeReflectionMapping;

    		} else if ( mapping === EquirectangularRefractionMapping ) {

    			texture.mapping = CubeRefractionMapping;

    		}

    		return texture;

    	}

    	function get( texture ) {

    		if ( texture && texture.isTexture ) {

    			const mapping = texture.mapping;

    			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

    				if ( cubemaps.has( texture ) ) {

    					const cubemap = cubemaps.get( texture ).texture;
    					return mapTextureMapping( cubemap, texture.mapping );

    				} else {

    					const image = texture.image;

    					if ( image && image.height > 0 ) {

    						const renderTarget = new WebGLCubeRenderTarget( image.height );
    						renderTarget.fromEquirectangularTexture( renderer, texture );
    						cubemaps.set( texture, renderTarget );

    						texture.addEventListener( 'dispose', onTextureDispose );

    						return mapTextureMapping( renderTarget.texture, texture.mapping );

    					} else {

    						// image not yet ready. try the conversion next frame

    						return null;

    					}

    				}

    			}

    		}

    		return texture;

    	}

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		const cubemap = cubemaps.get( texture );

    		if ( cubemap !== undefined ) {

    			cubemaps.delete( texture );
    			cubemap.dispose();

    		}

    	}

    	function dispose() {

    		cubemaps = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    const LOD_MIN = 4;

    // The standard deviations (radians) associated with the extra mips. These are
    // chosen to approximate a Trowbridge-Reitz distribution function times the
    // geometric shadowing function. These sigma values squared must match the
    // variance #defines in cube_uv_reflection_fragment.glsl.js.
    const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

    // The maximum length of the blur for loop. Smaller sigmas will use fewer
    // samples and exit early, but not recompile the shader.
    const MAX_SAMPLES = 20;

    const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
    const _clearColor = /*@__PURE__*/ new Color();
    let _oldTarget = null;
    let _oldActiveCubeFace = 0;
    let _oldActiveMipmapLevel = 0;
    let _oldXrEnabled = false;

    // Golden Ratio
    const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
    const INV_PHI = 1 / PHI;

    // Vertices of a dodecahedron (except the opposites, which represent the
    // same axis), used as axis directions evenly spread on a sphere.
    const _axisDirections = [
    	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),
    	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
    	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
    	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
    	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
    	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
    	/*@__PURE__*/ new Vector3( -1, 1, -1 ),
    	/*@__PURE__*/ new Vector3( 1, 1, -1 ),
    	/*@__PURE__*/ new Vector3( -1, 1, 1 ),
    	/*@__PURE__*/ new Vector3( 1, 1, 1 ) ];

    const _origin = /*@__PURE__*/ new Vector3();

    /**
     * This class generates a Prefiltered, Mipmapped Radiance Environment Map
     * (PMREM) from a cubeMap environment texture. This allows different levels of
     * blur to be quickly accessed based on material roughness. It is packed into a
     * special CubeUV format that allows us to perform custom interpolation so that
     * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
     * chain, it only goes down to the LOD_MIN level (above), and then creates extra
     * even more filtered 'mips' at the same LOD_MIN resolution, associated with
     * higher roughness levels. In this way we maintain resolution to smoothly
     * interpolate diffuse lighting while limiting sampling computation.
     *
     * Paper: Fast, Accurate Image-Based Lighting:
     * {@link https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view}
    */
    class PMREMGenerator {

    	/**
    	 * Constructs a new PMREM generator.
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 */
    	constructor( renderer ) {

    		this._renderer = renderer;
    		this._pingPongRenderTarget = null;

    		this._lodMax = 0;
    		this._cubeSize = 0;
    		this._lodPlanes = [];
    		this._sizeLods = [];
    		this._sigmas = [];

    		this._blurMaterial = null;
    		this._cubemapMaterial = null;
    		this._equirectMaterial = null;

    		this._compileMaterial( this._blurMaterial );

    	}

    	/**
    	 * Generates a PMREM from a supplied Scene, which can be faster than using an
    	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
    	 * in radians to be applied to the scene before PMREM generation. Optional near
    	 * and far planes ensure the scene is rendered in its entirety.
    	 *
    	 * @param {Scene} scene - The scene to be captured.
    	 * @param {number} [sigma=0] - The blur radius in radians.
    	 * @param {number} [near=0.1] - The near plane distance.
    	 * @param {number} [far=100] - The far plane distance.
    	 * @param {Object} [options={}] - The configuration options.
    	 * @param {number} [options.size=256] - The texture size of the PMREM.
    	 * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
    	 * @return {WebGLRenderTarget} The resulting PMREM.
    	 */
    	fromScene( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {

    		const {
    			size = 256,
    			position = _origin,
    		} = options;

    		_oldTarget = this._renderer.getRenderTarget();
    		_oldActiveCubeFace = this._renderer.getActiveCubeFace();
    		_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    		_oldXrEnabled = this._renderer.xr.enabled;

    		this._renderer.xr.enabled = false;

    		this._setSize( size );

    		const cubeUVRenderTarget = this._allocateTargets();
    		cubeUVRenderTarget.depthBuffer = true;

    		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position );

    		if ( sigma > 0 ) {

    			this._blur( cubeUVRenderTarget, 0, 0, sigma );

    		}

    		this._applyPMREM( cubeUVRenderTarget );
    		this._cleanup( cubeUVRenderTarget );

    		return cubeUVRenderTarget;

    	}

    	/**
    	 * Generates a PMREM from an equirectangular texture, which can be either LDR
    	 * or HDR. The ideal input image size is 1k (1024 x 512),
    	 * as this matches best with the 256 x 256 cubemap output.
    	 *
    	 * @param {Texture} equirectangular - The equirectangular texture to be converted.
    	 * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
    	 * @return {WebGLRenderTarget} The resulting PMREM.
    	 */
    	fromEquirectangular( equirectangular, renderTarget = null ) {

    		return this._fromTexture( equirectangular, renderTarget );

    	}

    	/**
    	 * Generates a PMREM from an cubemap texture, which can be either LDR
    	 * or HDR. The ideal input cube size is 256 x 256,
    	 * as this matches best with the 256 x 256 cubemap output.
    	 *
    	 * @param {Texture} cubemap - The cubemap texture to be converted.
    	 * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
    	 * @return {WebGLRenderTarget} The resulting PMREM.
    	 */
    	fromCubemap( cubemap, renderTarget = null ) {

    		return this._fromTexture( cubemap, renderTarget );

    	}

    	/**
    	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
    	 * your texture's network fetch for increased concurrency.
    	 */
    	compileCubemapShader() {

    		if ( this._cubemapMaterial === null ) {

    			this._cubemapMaterial = _getCubemapMaterial();
    			this._compileMaterial( this._cubemapMaterial );

    		}

    	}

    	/**
    	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
    	 * your texture's network fetch for increased concurrency.
    	 */
    	compileEquirectangularShader() {

    		if ( this._equirectMaterial === null ) {

    			this._equirectMaterial = _getEquirectMaterial();
    			this._compileMaterial( this._equirectMaterial );

    		}

    	}

    	/**
    	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
    	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
    	 * one of them will cause any others to also become unusable.
    	 */
    	dispose() {

    		this._dispose();

    		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
    		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

    	}

    	// private interface

    	_setSize( cubeSize ) {

    		this._lodMax = Math.floor( Math.log2( cubeSize ) );
    		this._cubeSize = Math.pow( 2, this._lodMax );

    	}

    	_dispose() {

    		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

    		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

    		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

    			this._lodPlanes[ i ].dispose();

    		}

    	}

    	_cleanup( outputTarget ) {

    		this._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );
    		this._renderer.xr.enabled = _oldXrEnabled;

    		outputTarget.scissorTest = false;
    		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

    	}

    	_fromTexture( texture, renderTarget ) {

    		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

    			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

    		} else { // Equirectangular

    			this._setSize( texture.image.width / 4 );

    		}

    		_oldTarget = this._renderer.getRenderTarget();
    		_oldActiveCubeFace = this._renderer.getActiveCubeFace();
    		_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    		_oldXrEnabled = this._renderer.xr.enabled;

    		this._renderer.xr.enabled = false;

    		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    		this._textureToCubeUV( texture, cubeUVRenderTarget );
    		this._applyPMREM( cubeUVRenderTarget );
    		this._cleanup( cubeUVRenderTarget );

    		return cubeUVRenderTarget;

    	}

    	_allocateTargets() {

    		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
    		const height = 4 * this._cubeSize;

    		const params = {
    			magFilter: LinearFilter,
    			minFilter: LinearFilter,
    			generateMipmaps: false,
    			type: HalfFloatType,
    			format: RGBAFormat,
    			colorSpace: LinearSRGBColorSpace,
    			depthBuffer: false
    		};

    		const cubeUVRenderTarget = _createRenderTarget( width, height, params );

    		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

    			if ( this._pingPongRenderTarget !== null ) {

    				this._dispose();

    			}

    			this._pingPongRenderTarget = _createRenderTarget( width, height, params );

    			const { _lodMax } = this;
    			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );

    			this._blurMaterial = _getBlurShader( _lodMax, width, height );

    		}

    		return cubeUVRenderTarget;

    	}

    	_compileMaterial( material ) {

    		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
    		this._renderer.compile( tmpMesh, _flatCamera );

    	}

    	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position ) {

    		const fov = 90;
    		const aspect = 1;
    		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
    		const upSign = [ 1, -1, 1, 1, 1, 1 ];
    		const forwardSign = [ 1, 1, 1, -1, -1, -1 ];
    		const renderer = this._renderer;

    		const originalAutoClear = renderer.autoClear;
    		const toneMapping = renderer.toneMapping;
    		renderer.getClearColor( _clearColor );

    		renderer.toneMapping = NoToneMapping;
    		renderer.autoClear = false;

    		const backgroundMaterial = new MeshBasicMaterial( {
    			name: 'PMREM.Background',
    			side: BackSide,
    			depthWrite: false,
    			depthTest: false,
    		} );

    		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

    		let useSolidColor = false;
    		const background = scene.background;

    		if ( background ) {

    			if ( background.isColor ) {

    				backgroundMaterial.color.copy( background );
    				scene.background = null;
    				useSolidColor = true;

    			}

    		} else {

    			backgroundMaterial.color.copy( _clearColor );
    			useSolidColor = true;

    		}

    		for ( let i = 0; i < 6; i ++ ) {

    			const col = i % 3;

    			if ( col === 0 ) {

    				cubeCamera.up.set( 0, upSign[ i ], 0 );
    				cubeCamera.position.set( position.x, position.y, position.z );
    				cubeCamera.lookAt( position.x + forwardSign[ i ], position.y, position.z );

    			} else if ( col === 1 ) {

    				cubeCamera.up.set( 0, 0, upSign[ i ] );
    				cubeCamera.position.set( position.x, position.y, position.z );
    				cubeCamera.lookAt( position.x, position.y + forwardSign[ i ], position.z );


    			} else {

    				cubeCamera.up.set( 0, upSign[ i ], 0 );
    				cubeCamera.position.set( position.x, position.y, position.z );
    				cubeCamera.lookAt( position.x, position.y, position.z + forwardSign[ i ] );

    			}

    			const size = this._cubeSize;

    			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

    			renderer.setRenderTarget( cubeUVRenderTarget );

    			if ( useSolidColor ) {

    				renderer.render( backgroundBox, cubeCamera );

    			}

    			renderer.render( scene, cubeCamera );

    		}

    		backgroundBox.geometry.dispose();
    		backgroundBox.material.dispose();

    		renderer.toneMapping = toneMapping;
    		renderer.autoClear = originalAutoClear;
    		scene.background = background;

    	}

    	_textureToCubeUV( texture, cubeUVRenderTarget ) {

    		const renderer = this._renderer;

    		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

    		if ( isCubeTexture ) {

    			if ( this._cubemapMaterial === null ) {

    				this._cubemapMaterial = _getCubemapMaterial();

    			}

    			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? -1 : 1;

    		} else {

    			if ( this._equirectMaterial === null ) {

    				this._equirectMaterial = _getEquirectMaterial();

    			}

    		}

    		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    		const mesh = new Mesh( this._lodPlanes[ 0 ], material );

    		const uniforms = material.uniforms;

    		uniforms[ 'envMap' ].value = texture;

    		const size = this._cubeSize;

    		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

    		renderer.setRenderTarget( cubeUVRenderTarget );
    		renderer.render( mesh, _flatCamera );

    	}

    	_applyPMREM( cubeUVRenderTarget ) {

    		const renderer = this._renderer;
    		const autoClear = renderer.autoClear;
    		renderer.autoClear = false;
    		const n = this._lodPlanes.length;

    		for ( let i = 1; i < n; i ++ ) {

    			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

    			const poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];

    			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

    		}

    		renderer.autoClear = autoClear;

    	}

    	/**
    	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
    	 * vertically and horizontally, but this breaks down on a cube. Here we apply
    	 * the blur latitudinally (around the poles), and then longitudinally (towards
    	 * the poles) to approximate the orthogonally-separable blur. It is least
    	 * accurate at the poles, but still does a decent job.
    	 *
    	 * @private
    	 * @param {WebGLRenderTarget} cubeUVRenderTarget
    	 * @param {number} lodIn
    	 * @param {number} lodOut
    	 * @param {number} sigma
    	 * @param {Vector3} [poleAxis]
    	 */
    	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

    		const pingPongRenderTarget = this._pingPongRenderTarget;

    		this._halfBlur(
    			cubeUVRenderTarget,
    			pingPongRenderTarget,
    			lodIn,
    			lodOut,
    			sigma,
    			'latitudinal',
    			poleAxis );

    		this._halfBlur(
    			pingPongRenderTarget,
    			cubeUVRenderTarget,
    			lodOut,
    			lodOut,
    			sigma,
    			'longitudinal',
    			poleAxis );

    	}

    	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

    		const renderer = this._renderer;
    		const blurMaterial = this._blurMaterial;

    		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

    			console.error(
    				'blur direction must be either latitudinal or longitudinal!' );

    		}

    		// Number of standard deviations at which to cut off the discrete approximation.
    		const STANDARD_DEVIATIONS = 3;

    		const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
    		const blurUniforms = blurMaterial.uniforms;

    		const pixels = this._sizeLods[ lodIn ] - 1;
    		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
    		const sigmaPixels = sigmaRadians / radiansPerPixel;
    		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

    		if ( samples > MAX_SAMPLES ) {

    			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

    		}

    		const weights = [];
    		let sum = 0;

    		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

    			const x = i / sigmaPixels;
    			const weight = Math.exp( - x * x / 2 );
    			weights.push( weight );

    			if ( i === 0 ) {

    				sum += weight;

    			} else if ( i < samples ) {

    				sum += 2 * weight;

    			}

    		}

    		for ( let i = 0; i < weights.length; i ++ ) {

    			weights[ i ] = weights[ i ] / sum;

    		}

    		blurUniforms[ 'envMap' ].value = targetIn.texture;
    		blurUniforms[ 'samples' ].value = samples;
    		blurUniforms[ 'weights' ].value = weights;
    		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

    		if ( poleAxis ) {

    			blurUniforms[ 'poleAxis' ].value = poleAxis;

    		}

    		const { _lodMax } = this;
    		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
    		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

    		const outputSize = this._sizeLods[ lodOut ];
    		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
    		const y = 4 * ( this._cubeSize - outputSize );

    		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
    		renderer.setRenderTarget( targetOut );
    		renderer.render( blurMesh, _flatCamera );

    	}

    }



    function _createPlanes( lodMax ) {

    	const lodPlanes = [];
    	const sizeLods = [];
    	const sigmas = [];

    	let lod = lodMax;

    	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

    	for ( let i = 0; i < totalLods; i ++ ) {

    		const sizeLod = Math.pow( 2, lod );
    		sizeLods.push( sizeLod );
    		let sigma = 1.0 / sizeLod;

    		if ( i > lodMax - LOD_MIN ) {

    			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

    		} else if ( i === 0 ) {

    			sigma = 0;

    		}

    		sigmas.push( sigma );

    		const texelSize = 1.0 / ( sizeLod - 2 );
    		const min = - texelSize;
    		const max = 1 + texelSize;
    		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

    		const cubeFaces = 6;
    		const vertices = 6;
    		const positionSize = 3;
    		const uvSize = 2;
    		const faceIndexSize = 1;

    		const position = new Float32Array( positionSize * vertices * cubeFaces );
    		const uv = new Float32Array( uvSize * vertices * cubeFaces );
    		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

    		for ( let face = 0; face < cubeFaces; face ++ ) {

    			const x = ( face % 3 ) * 2 / 3 - 1;
    			const y = face > 2 ? 0 : -1;
    			const coordinates = [
    				x, y, 0,
    				x + 2 / 3, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y, 0,
    				x + 2 / 3, y + 1, 0,
    				x, y + 1, 0
    			];
    			position.set( coordinates, positionSize * vertices * face );
    			uv.set( uv1, uvSize * vertices * face );
    			const fill = [ face, face, face, face, face, face ];
    			faceIndex.set( fill, faceIndexSize * vertices * face );

    		}

    		const planes = new BufferGeometry();
    		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
    		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
    		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
    		lodPlanes.push( planes );

    		if ( lod > LOD_MIN ) {

    			lod --;

    		}

    	}

    	return { lodPlanes, sizeLods, sigmas };

    }

    function _createRenderTarget( width, height, params ) {

    	const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
    	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
    	cubeUVRenderTarget.scissorTest = true;
    	return cubeUVRenderTarget;

    }

    function _setViewport( target, x, y, width, height ) {

    	target.viewport.set( x, y, width, height );
    	target.scissor.set( x, y, width, height );

    }

    function _getBlurShader( lodMax, width, height ) {

    	const weights = new Float32Array( MAX_SAMPLES );
    	const poleAxis = new Vector3( 0, 1, 0 );
    	const shaderMaterial = new ShaderMaterial( {

    		name: 'SphericalGaussianBlur',

    		defines: {
    			'n': MAX_SAMPLES,
    			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
    			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
    			'CUBEUV_MAX_MIP': `${lodMax}.0`,
    		},

    		uniforms: {
    			'envMap': { value: null },
    			'samples': { value: 1 },
    			'weights': { value: weights },
    			'latitudinal': { value: false },
    			'dTheta': { value: 0 },
    			'mipInt': { value: 0 },
    			'poleAxis': { value: poleAxis }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    	return shaderMaterial;

    }

    function _getEquirectMaterial() {

    	return new ShaderMaterial( {

    		name: 'EquirectangularToCubeUV',

    		uniforms: {
    			'envMap': { value: null }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    }

    function _getCubemapMaterial() {

    	return new ShaderMaterial( {

    		name: 'CubemapToCubeUV',

    		uniforms: {
    			'envMap': { value: null },
    			'flipEnvMap': { value: -1 }
    		},

    		vertexShader: _getCommonVertexShader(),

    		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

    		blending: NoBlending,
    		depthTest: false,
    		depthWrite: false

    	} );

    }

    function _getCommonVertexShader() {

    	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

    }

    function WebGLCubeUVMaps( renderer ) {

    	let cubeUVmaps = new WeakMap();

    	let pmremGenerator = null;

    	function get( texture ) {

    		if ( texture && texture.isTexture ) {

    			const mapping = texture.mapping;

    			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
    			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

    			// equirect/cube map to cubeUV conversion

    			if ( isEquirectMap || isCubeMap ) {

    				let renderTarget = cubeUVmaps.get( texture );

    				const currentPMREMVersion = renderTarget !== undefined ? renderTarget.texture.pmremVersion : 0;

    				if ( texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion ) {

    					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

    					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
    					renderTarget.texture.pmremVersion = texture.pmremVersion;

    					cubeUVmaps.set( texture, renderTarget );

    					return renderTarget.texture;

    				} else {

    					if ( renderTarget !== undefined ) {

    						return renderTarget.texture;

    					} else {

    						const image = texture.image;

    						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

    							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

    							renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
    							renderTarget.texture.pmremVersion = texture.pmremVersion;

    							cubeUVmaps.set( texture, renderTarget );

    							texture.addEventListener( 'dispose', onTextureDispose );

    							return renderTarget.texture;

    						} else {

    							// image not yet ready. try the conversion next frame

    							return null;

    						}

    					}

    				}

    			}

    		}

    		return texture;

    	}

    	function isCubeTextureComplete( image ) {

    		let count = 0;
    		const length = 6;

    		for ( let i = 0; i < length; i ++ ) {

    			if ( image[ i ] !== undefined ) count ++;

    		}

    		return count === length;


    	}

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		const cubemapUV = cubeUVmaps.get( texture );

    		if ( cubemapUV !== undefined ) {

    			cubeUVmaps.delete( texture );
    			cubemapUV.dispose();

    		}

    	}

    	function dispose() {

    		cubeUVmaps = new WeakMap();

    		if ( pmremGenerator !== null ) {

    			pmremGenerator.dispose();
    			pmremGenerator = null;

    		}

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    function WebGLExtensions( gl ) {

    	const extensions = {};

    	function getExtension( name ) {

    		if ( extensions[ name ] !== undefined ) {

    			return extensions[ name ];

    		}

    		let extension;

    		switch ( name ) {

    			case 'WEBGL_depth_texture':
    				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
    				break;

    			case 'EXT_texture_filter_anisotropic':
    				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
    				break;

    			case 'WEBGL_compressed_texture_s3tc':
    				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
    				break;

    			case 'WEBGL_compressed_texture_pvrtc':
    				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
    				break;

    			default:
    				extension = gl.getExtension( name );

    		}

    		extensions[ name ] = extension;

    		return extension;

    	}

    	return {

    		has: function ( name ) {

    			return getExtension( name ) !== null;

    		},

    		init: function () {

    			getExtension( 'EXT_color_buffer_float' );
    			getExtension( 'WEBGL_clip_cull_distance' );
    			getExtension( 'OES_texture_float_linear' );
    			getExtension( 'EXT_color_buffer_half_float' );
    			getExtension( 'WEBGL_multisampled_render_to_texture' );
    			getExtension( 'WEBGL_render_shared_exponent' );

    		},

    		get: function ( name ) {

    			const extension = getExtension( name );

    			if ( extension === null ) {

    				warnOnce( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

    			}

    			return extension;

    		}

    	};

    }

    function WebGLGeometries( gl, attributes, info, bindingStates ) {

    	const geometries = {};
    	const wireframeAttributes = new WeakMap();

    	function onGeometryDispose( event ) {

    		const geometry = event.target;

    		if ( geometry.index !== null ) {

    			attributes.remove( geometry.index );

    		}

    		for ( const name in geometry.attributes ) {

    			attributes.remove( geometry.attributes[ name ] );

    		}

    		geometry.removeEventListener( 'dispose', onGeometryDispose );

    		delete geometries[ geometry.id ];

    		const attribute = wireframeAttributes.get( geometry );

    		if ( attribute ) {

    			attributes.remove( attribute );
    			wireframeAttributes.delete( geometry );

    		}

    		bindingStates.releaseStatesOfGeometry( geometry );

    		if ( geometry.isInstancedBufferGeometry === true ) {

    			delete geometry._maxInstanceCount;

    		}

    		//

    		info.memory.geometries --;

    	}

    	function get( object, geometry ) {

    		if ( geometries[ geometry.id ] === true ) return geometry;

    		geometry.addEventListener( 'dispose', onGeometryDispose );

    		geometries[ geometry.id ] = true;

    		info.memory.geometries ++;

    		return geometry;

    	}

    	function update( geometry ) {

    		const geometryAttributes = geometry.attributes;

    		// Updating index buffer in VAO now. See WebGLBindingStates.

    		for ( const name in geometryAttributes ) {

    			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

    		}

    	}

    	function updateWireframeAttribute( geometry ) {

    		const indices = [];

    		const geometryIndex = geometry.index;
    		const geometryPosition = geometry.attributes.position;
    		let version = 0;

    		if ( geometryIndex !== null ) {

    			const array = geometryIndex.array;
    			version = geometryIndex.version;

    			for ( let i = 0, l = array.length; i < l; i += 3 ) {

    				const a = array[ i + 0 ];
    				const b = array[ i + 1 ];
    				const c = array[ i + 2 ];

    				indices.push( a, b, b, c, c, a );

    			}

    		} else if ( geometryPosition !== undefined ) {

    			const array = geometryPosition.array;
    			version = geometryPosition.version;

    			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

    				const a = i + 0;
    				const b = i + 1;
    				const c = i + 2;

    				indices.push( a, b, b, c, c, a );

    			}

    		} else {

    			return;

    		}

    		const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
    		attribute.version = version;

    		// Updating index buffer in VAO now. See WebGLBindingStates

    		//

    		const previousAttribute = wireframeAttributes.get( geometry );

    		if ( previousAttribute ) attributes.remove( previousAttribute );

    		//

    		wireframeAttributes.set( geometry, attribute );

    	}

    	function getWireframeAttribute( geometry ) {

    		const currentAttribute = wireframeAttributes.get( geometry );

    		if ( currentAttribute ) {

    			const geometryIndex = geometry.index;

    			if ( geometryIndex !== null ) {

    				// if the attribute is obsolete, create a new one

    				if ( currentAttribute.version < geometryIndex.version ) {

    					updateWireframeAttribute( geometry );

    				}

    			}

    		} else {

    			updateWireframeAttribute( geometry );

    		}

    		return wireframeAttributes.get( geometry );

    	}

    	return {

    		get: get,
    		update: update,

    		getWireframeAttribute: getWireframeAttribute

    	};

    }

    function WebGLIndexedBufferRenderer( gl, extensions, info ) {

    	let mode;

    	function setMode( value ) {

    		mode = value;

    	}

    	let type, bytesPerElement;

    	function setIndex( value ) {

    		type = value.type;
    		bytesPerElement = value.bytesPerElement;

    	}

    	function render( start, count ) {

    		gl.drawElements( mode, count, type, start * bytesPerElement );

    		info.update( count, mode, 1 );

    	}

    	function renderInstances( start, count, primcount ) {

    		if ( primcount === 0 ) return;

    		gl.drawElementsInstanced( mode, count, type, start * bytesPerElement, primcount );

    		info.update( count, mode, primcount );

    	}

    	function renderMultiDraw( starts, counts, drawCount ) {

    		if ( drawCount === 0 ) return;

    		const extension = extensions.get( 'WEBGL_multi_draw' );
    		extension.multiDrawElementsWEBGL( mode, counts, 0, type, starts, 0, drawCount );

    		let elementCount = 0;
    		for ( let i = 0; i < drawCount; i ++ ) {

    			elementCount += counts[ i ];

    		}

    		info.update( elementCount, mode, 1 );


    	}

    	function renderMultiDrawInstances( starts, counts, drawCount, primcount ) {

    		if ( drawCount === 0 ) return;

    		const extension = extensions.get( 'WEBGL_multi_draw' );

    		if ( extension === null ) {

    			for ( let i = 0; i < starts.length; i ++ ) {

    				renderInstances( starts[ i ] / bytesPerElement, counts[ i ], primcount[ i ] );

    			}

    		} else {

    			extension.multiDrawElementsInstancedWEBGL( mode, counts, 0, type, starts, 0, primcount, 0, drawCount );

    			let elementCount = 0;
    			for ( let i = 0; i < drawCount; i ++ ) {

    				elementCount += counts[ i ] * primcount[ i ];

    			}

    			info.update( elementCount, mode, 1 );

    		}

    	}

    	//

    	this.setMode = setMode;
    	this.setIndex = setIndex;
    	this.render = render;
    	this.renderInstances = renderInstances;
    	this.renderMultiDraw = renderMultiDraw;
    	this.renderMultiDrawInstances = renderMultiDrawInstances;

    }

    function WebGLInfo( gl ) {

    	const memory = {
    		geometries: 0,
    		textures: 0
    	};

    	const render = {
    		frame: 0,
    		calls: 0,
    		triangles: 0,
    		points: 0,
    		lines: 0
    	};

    	function update( count, mode, instanceCount ) {

    		render.calls ++;

    		switch ( mode ) {

    			case gl.TRIANGLES:
    				render.triangles += instanceCount * ( count / 3 );
    				break;

    			case gl.LINES:
    				render.lines += instanceCount * ( count / 2 );
    				break;

    			case gl.LINE_STRIP:
    				render.lines += instanceCount * ( count - 1 );
    				break;

    			case gl.LINE_LOOP:
    				render.lines += instanceCount * count;
    				break;

    			case gl.POINTS:
    				render.points += instanceCount * count;
    				break;

    			default:
    				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
    				break;

    		}

    	}

    	function reset() {

    		render.calls = 0;
    		render.triangles = 0;
    		render.points = 0;
    		render.lines = 0;

    	}

    	return {
    		memory: memory,
    		render: render,
    		programs: null,
    		autoReset: true,
    		reset: reset,
    		update: update
    	};

    }

    function WebGLMorphtargets( gl, capabilities, textures ) {

    	const morphTextures = new WeakMap();
    	const morph = new Vector4();

    	function update( object, geometry, program ) {

    		const objectInfluences = object.morphTargetInfluences;

    		// the following encodes morph targets into an array of data textures. Each layer represents a single morph target.

    		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    		let entry = morphTextures.get( geometry );

    		if ( entry === undefined || entry.count !== morphTargetsCount ) {

    			if ( entry !== undefined ) entry.texture.dispose();

    			const hasMorphPosition = geometry.morphAttributes.position !== undefined;
    			const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
    			const hasMorphColors = geometry.morphAttributes.color !== undefined;

    			const morphTargets = geometry.morphAttributes.position || [];
    			const morphNormals = geometry.morphAttributes.normal || [];
    			const morphColors = geometry.morphAttributes.color || [];

    			let vertexDataCount = 0;

    			if ( hasMorphPosition === true ) vertexDataCount = 1;
    			if ( hasMorphNormals === true ) vertexDataCount = 2;
    			if ( hasMorphColors === true ) vertexDataCount = 3;

    			let width = geometry.attributes.position.count * vertexDataCount;
    			let height = 1;

    			if ( width > capabilities.maxTextureSize ) {

    				height = Math.ceil( width / capabilities.maxTextureSize );
    				width = capabilities.maxTextureSize;

    			}

    			const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

    			const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
    			texture.type = FloatType;
    			texture.needsUpdate = true;

    			// fill buffer

    			const vertexDataStride = vertexDataCount * 4;

    			for ( let i = 0; i < morphTargetsCount; i ++ ) {

    				const morphTarget = morphTargets[ i ];
    				const morphNormal = morphNormals[ i ];
    				const morphColor = morphColors[ i ];

    				const offset = width * height * 4 * i;

    				for ( let j = 0; j < morphTarget.count; j ++ ) {

    					const stride = j * vertexDataStride;

    					if ( hasMorphPosition === true ) {

    						morph.fromBufferAttribute( morphTarget, j );

    						buffer[ offset + stride + 0 ] = morph.x;
    						buffer[ offset + stride + 1 ] = morph.y;
    						buffer[ offset + stride + 2 ] = morph.z;
    						buffer[ offset + stride + 3 ] = 0;

    					}

    					if ( hasMorphNormals === true ) {

    						morph.fromBufferAttribute( morphNormal, j );

    						buffer[ offset + stride + 4 ] = morph.x;
    						buffer[ offset + stride + 5 ] = morph.y;
    						buffer[ offset + stride + 6 ] = morph.z;
    						buffer[ offset + stride + 7 ] = 0;

    					}

    					if ( hasMorphColors === true ) {

    						morph.fromBufferAttribute( morphColor, j );

    						buffer[ offset + stride + 8 ] = morph.x;
    						buffer[ offset + stride + 9 ] = morph.y;
    						buffer[ offset + stride + 10 ] = morph.z;
    						buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

    					}

    				}

    			}

    			entry = {
    				count: morphTargetsCount,
    				texture: texture,
    				size: new Vector2( width, height )
    			};

    			morphTextures.set( geometry, entry );

    			function disposeTexture() {

    				texture.dispose();

    				morphTextures.delete( geometry );

    				geometry.removeEventListener( 'dispose', disposeTexture );

    			}

    			geometry.addEventListener( 'dispose', disposeTexture );

    		}

    		//
    		if ( object.isInstancedMesh === true && object.morphTexture !== null ) {

    			program.getUniforms().setValue( gl, 'morphTexture', object.morphTexture, textures );

    		} else {

    			let morphInfluencesSum = 0;

    			for ( let i = 0; i < objectInfluences.length; i ++ ) {

    				morphInfluencesSum += objectInfluences[ i ];

    			}

    			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;


    			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
    			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

    		}

    		program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
    		program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );

    	}

    	return {

    		update: update

    	};

    }

    function WebGLObjects( gl, geometries, attributes, info ) {

    	let updateMap = new WeakMap();

    	function update( object ) {

    		const frame = info.render.frame;

    		const geometry = object.geometry;
    		const buffergeometry = geometries.get( object, geometry );

    		// Update once per frame

    		if ( updateMap.get( buffergeometry ) !== frame ) {

    			geometries.update( buffergeometry );

    			updateMap.set( buffergeometry, frame );

    		}

    		if ( object.isInstancedMesh ) {

    			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

    				object.addEventListener( 'dispose', onInstancedMeshDispose );

    			}

    			if ( updateMap.get( object ) !== frame ) {

    				attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

    				if ( object.instanceColor !== null ) {

    					attributes.update( object.instanceColor, gl.ARRAY_BUFFER );

    				}

    				updateMap.set( object, frame );

    			}

    		}

    		if ( object.isSkinnedMesh ) {

    			const skeleton = object.skeleton;

    			if ( updateMap.get( skeleton ) !== frame ) {

    				skeleton.update();

    				updateMap.set( skeleton, frame );

    			}

    		}

    		return buffergeometry;

    	}

    	function dispose() {

    		updateMap = new WeakMap();

    	}

    	function onInstancedMeshDispose( event ) {

    		const instancedMesh = event.target;

    		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

    		attributes.remove( instancedMesh.instanceMatrix );

    		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

    	}

    	return {

    		update: update,
    		dispose: dispose

    	};

    }

    /**
     * Uniforms of a program.
     * Those form a tree structure with a special top-level container for the root,
     * which you get by calling 'new WebGLUniforms( gl, program )'.
     *
     *
     * Properties of inner nodes including the top-level container:
     *
     * .seq - array of nested uniforms
     * .map - nested uniforms by name
     *
     *
     * Methods of all nodes except the top-level container:
     *
     * .setValue( gl, value, [textures] )
     *
     * 		uploads a uniform value(s)
     *  	the 'textures' parameter is needed for sampler uniforms
     *
     *
     * Static methods of the top-level container (textures factorizations):
     *
     * .upload( gl, seq, values, textures )
     *
     * 		sets uniforms in 'seq' to 'values[id].value'
     *
     * .seqWithValue( seq, values ) : filteredSeq
     *
     * 		filters 'seq' entries with corresponding entry in values
     *
     *
     * Methods of the top-level container (textures factorizations):
     *
     * .setValue( gl, name, value, textures )
     *
     * 		sets uniform with  name 'name' to 'value'
     *
     * .setOptional( gl, obj, prop )
     *
     * 		like .set for an optional property of the object
     *
     */


    const emptyTexture = /*@__PURE__*/ new Texture();

    const emptyShadowTexture = /*@__PURE__*/ new DepthTexture( 1, 1 );

    const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
    const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
    const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();

    // --- Utilities ---

    // Array Caches (provide typed arrays for temporary by size)

    const arrayCacheF32 = [];
    const arrayCacheI32 = [];

    // Float32Array caches used for uploading Matrix uniforms

    const mat4array = new Float32Array( 16 );
    const mat3array = new Float32Array( 9 );
    const mat2array = new Float32Array( 4 );

    // Flattening for arrays of vectors and matrices

    function flatten( array, nBlocks, blockSize ) {

    	const firstElem = array[ 0 ];

    	if ( firstElem <= 0 || firstElem > 0 ) return array;
    	// unoptimized: ! isNaN( firstElem )
    	// see http://jacksondunstan.com/articles/983

    	const n = nBlocks * blockSize;
    	let r = arrayCacheF32[ n ];

    	if ( r === undefined ) {

    		r = new Float32Array( n );
    		arrayCacheF32[ n ] = r;

    	}

    	if ( nBlocks !== 0 ) {

    		firstElem.toArray( r, 0 );

    		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

    			offset += blockSize;
    			array[ i ].toArray( r, offset );

    		}

    	}

    	return r;

    }

    function arraysEqual( a, b ) {

    	if ( a.length !== b.length ) return false;

    	for ( let i = 0, l = a.length; i < l; i ++ ) {

    		if ( a[ i ] !== b[ i ] ) return false;

    	}

    	return true;

    }

    function copyArray( a, b ) {

    	for ( let i = 0, l = b.length; i < l; i ++ ) {

    		a[ i ] = b[ i ];

    	}

    }

    // Texture unit allocation

    function allocTexUnits( textures, n ) {

    	let r = arrayCacheI32[ n ];

    	if ( r === undefined ) {

    		r = new Int32Array( n );
    		arrayCacheI32[ n ] = r;

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		r[ i ] = textures.allocateTextureUnit();

    	}

    	return r;

    }

    // --- Setters ---

    // Note: Defining these methods externally, because they come in a bunch
    // and this way their names minify.

    // Single scalar

    function setValueV1f( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1f( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single float vector (from flat array or THREE.VectorN)

    function setValueV2f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

    			gl.uniform2f( this.addr, v.x, v.y );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform2fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV3f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

    			gl.uniform3f( this.addr, v.x, v.y, v.z );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;

    		}

    	} else if ( v.r !== undefined ) {

    		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

    			gl.uniform3f( this.addr, v.r, v.g, v.b );

    			cache[ 0 ] = v.r;
    			cache[ 1 ] = v.g;
    			cache[ 2 ] = v.b;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform3fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV4f( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

    			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;
    			cache[ 3 ] = v.w;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform4fv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    // Single matrix (from flat array or THREE.MatrixN)

    function setValueM2( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix2fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat2array.set( elements );

    		gl.uniformMatrix2fv( this.addr, false, mat2array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM3( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix3fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat3array.set( elements );

    		gl.uniformMatrix3fv( this.addr, false, mat3array );

    		copyArray( cache, elements );

    	}

    }

    function setValueM4( gl, v ) {

    	const cache = this.cache;
    	const elements = v.elements;

    	if ( elements === undefined ) {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniformMatrix4fv( this.addr, false, v );

    		copyArray( cache, v );

    	} else {

    		if ( arraysEqual( cache, elements ) ) return;

    		mat4array.set( elements );

    		gl.uniformMatrix4fv( this.addr, false, mat4array );

    		copyArray( cache, elements );

    	}

    }

    // Single integer / boolean

    function setValueV1i( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1i( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single integer / boolean vector (from flat array or THREE.VectorN)

    function setValueV2i( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

    			gl.uniform2i( this.addr, v.x, v.y );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform2iv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV3i( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

    			gl.uniform3i( this.addr, v.x, v.y, v.z );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform3iv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV4i( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

    			gl.uniform4i( this.addr, v.x, v.y, v.z, v.w );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;
    			cache[ 3 ] = v.w;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform4iv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    // Single unsigned integer

    function setValueV1ui( gl, v ) {

    	const cache = this.cache;

    	if ( cache[ 0 ] === v ) return;

    	gl.uniform1ui( this.addr, v );

    	cache[ 0 ] = v;

    }

    // Single unsigned integer vector (from flat array or THREE.VectorN)

    function setValueV2ui( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

    			gl.uniform2ui( this.addr, v.x, v.y );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform2uiv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV3ui( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

    			gl.uniform3ui( this.addr, v.x, v.y, v.z );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform3uiv( this.addr, v );

    		copyArray( cache, v );

    	}

    }

    function setValueV4ui( gl, v ) {

    	const cache = this.cache;

    	if ( v.x !== undefined ) {

    		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

    			gl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );

    			cache[ 0 ] = v.x;
    			cache[ 1 ] = v.y;
    			cache[ 2 ] = v.z;
    			cache[ 3 ] = v.w;

    		}

    	} else {

    		if ( arraysEqual( cache, v ) ) return;

    		gl.uniform4uiv( this.addr, v );

    		copyArray( cache, v );

    	}

    }


    // Single texture (2D / Cube)

    function setValueT1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	let emptyTexture2D;

    	if ( this.type === gl.SAMPLER_2D_SHADOW ) {

    		emptyShadowTexture.compareFunction = LessEqualCompare; // #28670
    		emptyTexture2D = emptyShadowTexture;

    	} else {

    		emptyTexture2D = emptyTexture;

    	}

    	textures.setTexture2D( v || emptyTexture2D, unit );

    }

    function setValueT3D1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture3D( v || empty3dTexture, unit );

    }

    function setValueT6( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTextureCube( v || emptyCubeTexture, unit );

    }

    function setValueT2DArray1( gl, v, textures ) {

    	const cache = this.cache;
    	const unit = textures.allocateTextureUnit();

    	if ( cache[ 0 ] !== unit ) {

    		gl.uniform1i( this.addr, unit );
    		cache[ 0 ] = unit;

    	}

    	textures.setTexture2DArray( v || emptyArrayTexture, unit );

    }

    // Helper to pick the right setter for the singular case

    function getSingularSetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1f; // FLOAT
    		case 0x8b50: return setValueV2f; // _VEC2
    		case 0x8b51: return setValueV3f; // _VEC3
    		case 0x8b52: return setValueV4f; // _VEC4

    		case 0x8b5a: return setValueM2; // _MAT2
    		case 0x8b5b: return setValueM3; // _MAT3
    		case 0x8b5c: return setValueM4; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

    		case 0x1405: return setValueV1ui; // UINT
    		case 0x8dc6: return setValueV2ui; // _VEC2
    		case 0x8dc7: return setValueV3ui; // _VEC3
    		case 0x8dc8: return setValueV4ui; // _VEC4

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1;

    		case 0x8b5f: // SAMPLER_3D
    		case 0x8dcb: // INT_SAMPLER_3D
    		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
    			return setValueT3D1;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6;

    		case 0x8dc1: // SAMPLER_2D_ARRAY
    		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
    		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
    		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
    			return setValueT2DArray1;

    	}

    }


    // Array of scalars

    function setValueV1fArray( gl, v ) {

    	gl.uniform1fv( this.addr, v );

    }

    // Array of vectors (from flat array or array of THREE.VectorN)

    function setValueV2fArray( gl, v ) {

    	const data = flatten( v, this.size, 2 );

    	gl.uniform2fv( this.addr, data );

    }

    function setValueV3fArray( gl, v ) {

    	const data = flatten( v, this.size, 3 );

    	gl.uniform3fv( this.addr, data );

    }

    function setValueV4fArray( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniform4fv( this.addr, data );

    }

    // Array of matrices (from flat array or array of THREE.MatrixN)

    function setValueM2Array( gl, v ) {

    	const data = flatten( v, this.size, 4 );

    	gl.uniformMatrix2fv( this.addr, false, data );

    }

    function setValueM3Array( gl, v ) {

    	const data = flatten( v, this.size, 9 );

    	gl.uniformMatrix3fv( this.addr, false, data );

    }

    function setValueM4Array( gl, v ) {

    	const data = flatten( v, this.size, 16 );

    	gl.uniformMatrix4fv( this.addr, false, data );

    }

    // Array of integer / boolean

    function setValueV1iArray( gl, v ) {

    	gl.uniform1iv( this.addr, v );

    }

    // Array of integer / boolean vectors (from flat array)

    function setValueV2iArray( gl, v ) {

    	gl.uniform2iv( this.addr, v );

    }

    function setValueV3iArray( gl, v ) {

    	gl.uniform3iv( this.addr, v );

    }

    function setValueV4iArray( gl, v ) {

    	gl.uniform4iv( this.addr, v );

    }

    // Array of unsigned integer

    function setValueV1uiArray( gl, v ) {

    	gl.uniform1uiv( this.addr, v );

    }

    // Array of unsigned integer vectors (from flat array)

    function setValueV2uiArray( gl, v ) {

    	gl.uniform2uiv( this.addr, v );

    }

    function setValueV3uiArray( gl, v ) {

    	gl.uniform3uiv( this.addr, v );

    }

    function setValueV4uiArray( gl, v ) {

    	gl.uniform4uiv( this.addr, v );

    }


    // Array of textures (2D / 3D / Cube / 2DArray)

    function setValueT1Array( gl, v, textures ) {

    	const cache = this.cache;

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	if ( ! arraysEqual( cache, units ) ) {

    		gl.uniform1iv( this.addr, units );

    		copyArray( cache, units );

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

    	}

    }

    function setValueT3DArray( gl, v, textures ) {

    	const cache = this.cache;

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	if ( ! arraysEqual( cache, units ) ) {

    		gl.uniform1iv( this.addr, units );

    		copyArray( cache, units );

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

    	}

    }

    function setValueT6Array( gl, v, textures ) {

    	const cache = this.cache;

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	if ( ! arraysEqual( cache, units ) ) {

    		gl.uniform1iv( this.addr, units );

    		copyArray( cache, units );

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

    	}

    }

    function setValueT2DArrayArray( gl, v, textures ) {

    	const cache = this.cache;

    	const n = v.length;

    	const units = allocTexUnits( textures, n );

    	if ( ! arraysEqual( cache, units ) ) {

    		gl.uniform1iv( this.addr, units );

    		copyArray( cache, units );

    	}

    	for ( let i = 0; i !== n; ++ i ) {

    		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

    	}

    }


    // Helper to pick the right setter for a pure (bottom-level) array

    function getPureArraySetter( type ) {

    	switch ( type ) {

    		case 0x1406: return setValueV1fArray; // FLOAT
    		case 0x8b50: return setValueV2fArray; // _VEC2
    		case 0x8b51: return setValueV3fArray; // _VEC3
    		case 0x8b52: return setValueV4fArray; // _VEC4

    		case 0x8b5a: return setValueM2Array; // _MAT2
    		case 0x8b5b: return setValueM3Array; // _MAT3
    		case 0x8b5c: return setValueM4Array; // _MAT4

    		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
    		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
    		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
    		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

    		case 0x1405: return setValueV1uiArray; // UINT
    		case 0x8dc6: return setValueV2uiArray; // _VEC2
    		case 0x8dc7: return setValueV3uiArray; // _VEC3
    		case 0x8dc8: return setValueV4uiArray; // _VEC4

    		case 0x8b5e: // SAMPLER_2D
    		case 0x8d66: // SAMPLER_EXTERNAL_OES
    		case 0x8dca: // INT_SAMPLER_2D
    		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
    		case 0x8b62: // SAMPLER_2D_SHADOW
    			return setValueT1Array;

    		case 0x8b5f: // SAMPLER_3D
    		case 0x8dcb: // INT_SAMPLER_3D
    		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
    			return setValueT3DArray;

    		case 0x8b60: // SAMPLER_CUBE
    		case 0x8dcc: // INT_SAMPLER_CUBE
    		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
    		case 0x8dc5: // SAMPLER_CUBE_SHADOW
    			return setValueT6Array;

    		case 0x8dc1: // SAMPLER_2D_ARRAY
    		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
    		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
    		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
    			return setValueT2DArrayArray;

    	}

    }

    // --- Uniform Classes ---

    class SingleUniform {

    	constructor( id, activeInfo, addr ) {

    		this.id = id;
    		this.addr = addr;
    		this.cache = [];
    		this.type = activeInfo.type;
    		this.setValue = getSingularSetter( activeInfo.type );

    		// this.path = activeInfo.name; // DEBUG

    	}

    }

    class PureArrayUniform {

    	constructor( id, activeInfo, addr ) {

    		this.id = id;
    		this.addr = addr;
    		this.cache = [];
    		this.type = activeInfo.type;
    		this.size = activeInfo.size;
    		this.setValue = getPureArraySetter( activeInfo.type );

    		// this.path = activeInfo.name; // DEBUG

    	}

    }

    class StructuredUniform {

    	constructor( id ) {

    		this.id = id;

    		this.seq = [];
    		this.map = {};

    	}

    	setValue( gl, value, textures ) {

    		const seq = this.seq;

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ];
    			u.setValue( gl, value[ u.id ], textures );

    		}

    	}

    }

    // --- Top-level ---

    // Parser - builds up the property tree from the path strings

    const RePathPart = /(\w+)(\])?(\[|\.)?/g;

    // extracts
    // 	- the identifier (member name or array index)
    //  - followed by an optional right bracket (found when array index)
    //  - followed by an optional left bracket or dot (type of subscript)
    //
    // Note: These portions can be read in a non-overlapping fashion and
    // allow straightforward parsing of the hierarchy that WebGL encodes
    // in the uniform names.

    function addUniform( container, uniformObject ) {

    	container.seq.push( uniformObject );
    	container.map[ uniformObject.id ] = uniformObject;

    }

    function parseUniform( activeInfo, addr, container ) {

    	const path = activeInfo.name,
    		pathLength = path.length;

    	// reset RegExp object, because of the early exit of a previous run
    	RePathPart.lastIndex = 0;

    	while ( true ) {

    		const match = RePathPart.exec( path ),
    			matchEnd = RePathPart.lastIndex;

    		let id = match[ 1 ];
    		const idIsIndex = match[ 2 ] === ']',
    			subscript = match[ 3 ];

    		if ( idIsIndex ) id = id | 0; // convert to integer

    		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

    			// bare name or "pure" bottom-level array "[0]" suffix

    			addUniform( container, subscript === undefined ?
    				new SingleUniform( id, activeInfo, addr ) :
    				new PureArrayUniform( id, activeInfo, addr ) );

    			break;

    		} else {

    			// step into inner node / create it in case it doesn't exist

    			const map = container.map;
    			let next = map[ id ];

    			if ( next === undefined ) {

    				next = new StructuredUniform( id );
    				addUniform( container, next );

    			}

    			container = next;

    		}

    	}

    }

    // Root Container

    class WebGLUniforms {

    	constructor( gl, program ) {

    		this.seq = [];
    		this.map = {};

    		const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

    		for ( let i = 0; i < n; ++ i ) {

    			const info = gl.getActiveUniform( program, i ),
    				addr = gl.getUniformLocation( program, info.name );

    			parseUniform( info, addr, this );

    		}

    	}

    	setValue( gl, name, value, textures ) {

    		const u = this.map[ name ];

    		if ( u !== undefined ) u.setValue( gl, value, textures );

    	}

    	setOptional( gl, object, name ) {

    		const v = object[ name ];

    		if ( v !== undefined ) this.setValue( gl, name, v );

    	}

    	static upload( gl, seq, values, textures ) {

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ],
    				v = values[ u.id ];

    			if ( v.needsUpdate !== false ) {

    				// note: always updating when .needsUpdate is undefined
    				u.setValue( gl, v.value, textures );

    			}

    		}

    	}

    	static seqWithValue( seq, values ) {

    		const r = [];

    		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

    			const u = seq[ i ];
    			if ( u.id in values ) r.push( u );

    		}

    		return r;

    	}

    }

    function WebGLShader( gl, type, string ) {

    	const shader = gl.createShader( type );

    	gl.shaderSource( shader, string );
    	gl.compileShader( shader );

    	return shader;

    }

    // From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/
    const COMPLETION_STATUS_KHR = 0x91B1;

    let programIdCount = 0;

    function handleSource( string, errorLine ) {

    	const lines = string.split( '\n' );
    	const lines2 = [];

    	const from = Math.max( errorLine - 6, 0 );
    	const to = Math.min( errorLine + 6, lines.length );

    	for ( let i = from; i < to; i ++ ) {

    		const line = i + 1;
    		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

    	}

    	return lines2.join( '\n' );

    }

    const _m0 = /*@__PURE__*/ new Matrix3();

    function getEncodingComponents( colorSpace ) {

    	ColorManagement._getMatrix( _m0, ColorManagement.workingColorSpace, colorSpace );

    	const encodingMatrix = `mat3( ${ _m0.elements.map( ( v ) => v.toFixed( 4 ) ) } )`;

    	switch ( ColorManagement.getTransfer( colorSpace ) ) {

    		case LinearTransfer:
    			return [ encodingMatrix, 'LinearTransferOETF' ];

    		case SRGBTransfer:
    			return [ encodingMatrix, 'sRGBTransferOETF' ];

    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported color space: ', colorSpace );
    			return [ encodingMatrix, 'LinearTransferOETF' ];

    	}

    }

    function getShaderErrors( gl, shader, type ) {

    	const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
    	const errors = gl.getShaderInfoLog( shader ).trim();

    	if ( status && errors === '' ) return '';

    	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
    	if ( errorMatches ) {

    		// --enable-privileged-webgl-extension
    		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

    		const errorLine = parseInt( errorMatches[ 1 ] );
    		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

    	} else {

    		return errors;

    	}

    }

    function getTexelEncodingFunction( functionName, colorSpace ) {

    	const components = getEncodingComponents( colorSpace );

    	return [

    		`vec4 ${functionName}( vec4 value ) {`,

    		`	return ${components[ 1 ]}( vec4( value.rgb * ${components[ 0 ]}, value.a ) );`,

    		'}',

    	].join( '\n' );

    }

    function getToneMappingFunction( functionName, toneMapping ) {

    	let toneMappingName;

    	switch ( toneMapping ) {

    		case LinearToneMapping:
    			toneMappingName = 'Linear';
    			break;

    		case ReinhardToneMapping:
    			toneMappingName = 'Reinhard';
    			break;

    		case CineonToneMapping:
    			toneMappingName = 'Cineon';
    			break;

    		case ACESFilmicToneMapping:
    			toneMappingName = 'ACESFilmic';
    			break;

    		case AgXToneMapping:
    			toneMappingName = 'AgX';
    			break;

    		case NeutralToneMapping:
    			toneMappingName = 'Neutral';
    			break;

    		case CustomToneMapping:
    			toneMappingName = 'Custom';
    			break;

    		default:
    			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
    			toneMappingName = 'Linear';

    	}

    	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

    }

    const _v0 = /*@__PURE__*/ new Vector3();

    function getLuminanceFunction() {

    	ColorManagement.getLuminanceCoefficients( _v0 );

    	const r = _v0.x.toFixed( 4 );
    	const g = _v0.y.toFixed( 4 );
    	const b = _v0.z.toFixed( 4 );

    	return [

    		'float luminance( const in vec3 rgb ) {',

    		`	const vec3 weights = vec3( ${ r }, ${ g }, ${ b } );`,

    		'	return dot( weights, rgb );',

    		'}'

    	].join( '\n' );

    }

    function generateVertexExtensions( parameters ) {

    	const chunks = [
    		parameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '',
    		parameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : '',
    	];

    	return chunks.filter( filterEmptyLine ).join( '\n' );

    }

    function generateDefines( defines ) {

    	const chunks = [];

    	for ( const name in defines ) {

    		const value = defines[ name ];

    		if ( value === false ) continue;

    		chunks.push( '#define ' + name + ' ' + value );

    	}

    	return chunks.join( '\n' );

    }

    function fetchAttributeLocations( gl, program ) {

    	const attributes = {};

    	const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

    	for ( let i = 0; i < n; i ++ ) {

    		const info = gl.getActiveAttrib( program, i );
    		const name = info.name;

    		let locationSize = 1;
    		if ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;
    		if ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;
    		if ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;

    		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

    		attributes[ name ] = {
    			type: info.type,
    			location: gl.getAttribLocation( program, name ),
    			locationSize: locationSize
    		};

    	}

    	return attributes;

    }

    function filterEmptyLine( string ) {

    	return string !== '';

    }

    function replaceLightNums( string, parameters ) {

    	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;

    	return string
    		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
    		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
    		.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
    		.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
    		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
    		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
    		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
    		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
    		.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
    		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
    		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

    }

    function replaceClippingPlaneNums( string, parameters ) {

    	return string
    		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
    		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

    }

    // Resolve Includes

    const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

    function resolveIncludes( string ) {

    	return string.replace( includePattern, includeReplacer );

    }

    const shaderChunkMap = new Map();

    function includeReplacer( match, include ) {

    	let string = ShaderChunk[ include ];

    	if ( string === undefined ) {

    		const newInclude = shaderChunkMap.get( include );

    		if ( newInclude !== undefined ) {

    			string = ShaderChunk[ newInclude ];
    			console.warn( 'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude );

    		} else {

    			throw new Error( 'Can not resolve #include <' + include + '>' );

    		}

    	}

    	return resolveIncludes( string );

    }

    // Unroll Loops

    const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

    function unrollLoops( string ) {

    	return string.replace( unrollLoopPattern, loopReplacer );

    }

    function loopReplacer( match, start, end, snippet ) {

    	let string = '';

    	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

    		string += snippet
    			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
    			.replace( /UNROLLED_LOOP_INDEX/g, i );

    	}

    	return string;

    }

    //

    function generatePrecision( parameters ) {

    	let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;

    	if ( parameters.precision === 'highp' ) {

    		precisionstring += '\n#define HIGH_PRECISION';

    	} else if ( parameters.precision === 'mediump' ) {

    		precisionstring += '\n#define MEDIUM_PRECISION';

    	} else if ( parameters.precision === 'lowp' ) {

    		precisionstring += '\n#define LOW_PRECISION';

    	}

    	return precisionstring;

    }

    function generateShadowMapTypeDefine( parameters ) {

    	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

    	if ( parameters.shadowMapType === PCFShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

    	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

    	} else if ( parameters.shadowMapType === VSMShadowMap ) {

    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

    	}

    	return shadowMapTypeDefine;

    }

    function generateEnvMapTypeDefine( parameters ) {

    	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeReflectionMapping:
    			case CubeRefractionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
    				break;

    			case CubeUVReflectionMapping:
    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
    				break;

    		}

    	}

    	return envMapTypeDefine;

    }

    function generateEnvMapModeDefine( parameters ) {

    	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

    	if ( parameters.envMap ) {

    		switch ( parameters.envMapMode ) {

    			case CubeRefractionMapping:

    				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
    				break;

    		}

    	}

    	return envMapModeDefine;

    }

    function generateEnvMapBlendingDefine( parameters ) {

    	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

    	if ( parameters.envMap ) {

    		switch ( parameters.combine ) {

    			case MultiplyOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
    				break;

    			case MixOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
    				break;

    			case AddOperation:
    				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
    				break;

    		}

    	}

    	return envMapBlendingDefine;

    }

    function generateCubeUVSize( parameters ) {

    	const imageHeight = parameters.envMapCubeUVHeight;

    	if ( imageHeight === null ) return null;

    	const maxMip = Math.log2( imageHeight ) - 2;

    	const texelHeight = 1.0 / imageHeight;

    	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

    	return { texelWidth, texelHeight, maxMip };

    }

    function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

    	// TODO Send this event to Three.js DevTools
    	// console.log( 'WebGLProgram', cacheKey );

    	const gl = renderer.getContext();

    	const defines = parameters.defines;

    	let vertexShader = parameters.vertexShader;
    	let fragmentShader = parameters.fragmentShader;

    	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
    	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
    	const envMapModeDefine = generateEnvMapModeDefine( parameters );
    	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
    	const envMapCubeUVSize = generateCubeUVSize( parameters );

    	const customVertexExtensions = generateVertexExtensions( parameters );

    	const customDefines = generateDefines( defines );

    	const program = gl.createProgram();

    	let prefixVertex, prefixFragment;
    	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

    	if ( parameters.isRawShaderMaterial ) {

    		prefixVertex = [

    			'#define SHADER_TYPE ' + parameters.shaderType,
    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixVertex.length > 0 ) {

    			prefixVertex += '\n';

    		}

    		prefixFragment = [

    			'#define SHADER_TYPE ' + parameters.shaderType,
    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines

    		].filter( filterEmptyLine ).join( '\n' );

    		if ( prefixFragment.length > 0 ) {

    			prefixFragment += '\n';

    		}

    	} else {

    		prefixVertex = [

    			generatePrecision( parameters ),

    			'#define SHADER_TYPE ' + parameters.shaderType,
    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			parameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '',
    			parameters.batching ? '#define USE_BATCHING' : '',
    			parameters.batchingColor ? '#define USE_BATCHING_COLOR' : '',
    			parameters.instancing ? '#define USE_INSTANCING' : '',
    			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
    			parameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '',

    			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
    			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

    			parameters.map ? '#define USE_MAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
    			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
    			parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

    			parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
    			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

    			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
    			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
    			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

    			parameters.transmission ? '#define USE_TRANSMISSION' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
    			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

    			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
    			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

    			//

    			parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',
    			parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',
    			parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',
    			parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',
    			parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',
    			parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',
    			parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',
    			parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',

    			parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',
    			parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',

    			parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',

    			parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',
    			parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',
    			parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',

    			parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',
    			parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',

    			parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',
    			parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',

    			parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',
    			parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',
    			parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',

    			parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',
    			parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',

    			//

    			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
    			parameters.vertexColors ? '#define USE_COLOR' : '',
    			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
    			parameters.vertexUv1s ? '#define USE_UV1' : '',
    			parameters.vertexUv2s ? '#define USE_UV2' : '',
    			parameters.vertexUv3s ? '#define USE_UV3' : '',

    			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.skinning ? '#define USE_SKINNING' : '',

    			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
    			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
    			( parameters.morphColors ) ? '#define USE_MORPHCOLORS' : '',
    			( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
    			( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

    			parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',

    			'uniform mat4 modelMatrix;',
    			'uniform mat4 modelViewMatrix;',
    			'uniform mat4 projectionMatrix;',
    			'uniform mat4 viewMatrix;',
    			'uniform mat3 normalMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			'#ifdef USE_INSTANCING',

    			'	attribute mat4 instanceMatrix;',

    			'#endif',

    			'#ifdef USE_INSTANCING_COLOR',

    			'	attribute vec3 instanceColor;',

    			'#endif',

    			'#ifdef USE_INSTANCING_MORPH',

    			'	uniform sampler2D morphTexture;',

    			'#endif',

    			'attribute vec3 position;',
    			'attribute vec3 normal;',
    			'attribute vec2 uv;',

    			'#ifdef USE_UV1',

    			'	attribute vec2 uv1;',

    			'#endif',

    			'#ifdef USE_UV2',

    			'	attribute vec2 uv2;',

    			'#endif',

    			'#ifdef USE_UV3',

    			'	attribute vec2 uv3;',

    			'#endif',

    			'#ifdef USE_TANGENT',

    			'	attribute vec4 tangent;',

    			'#endif',

    			'#if defined( USE_COLOR_ALPHA )',

    			'	attribute vec4 color;',

    			'#elif defined( USE_COLOR )',

    			'	attribute vec3 color;',

    			'#endif',

    			'#ifdef USE_SKINNING',

    			'	attribute vec4 skinIndex;',
    			'	attribute vec4 skinWeight;',

    			'#endif',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    		prefixFragment = [

    			generatePrecision( parameters ),

    			'#define SHADER_TYPE ' + parameters.shaderType,
    			'#define SHADER_NAME ' + parameters.shaderName,

    			customDefines,

    			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
    			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

    			parameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '',
    			parameters.map ? '#define USE_MAP' : '',
    			parameters.matcap ? '#define USE_MATCAP' : '',
    			parameters.envMap ? '#define USE_ENVMAP' : '',
    			parameters.envMap ? '#define ' + envMapTypeDefine : '',
    			parameters.envMap ? '#define ' + envMapModeDefine : '',
    			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
    			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
    			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
    			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
    			parameters.aoMap ? '#define USE_AOMAP' : '',
    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
    			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
    			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

    			parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
    			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

    			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
    			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
    			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
    			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

    			parameters.dispersion ? '#define USE_DISPERSION' : '',

    			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
    			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
    			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
    			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
    			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    			parameters.alphaTest ? '#define USE_ALPHATEST' : '',
    			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

    			parameters.sheen ? '#define USE_SHEEN' : '',
    			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
    			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

    			parameters.transmission ? '#define USE_TRANSMISSION' : '',
    			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
    			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

    			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
    			parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? '#define USE_COLOR' : '',
    			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
    			parameters.vertexUv1s ? '#define USE_UV1' : '',
    			parameters.vertexUv2s ? '#define USE_UV2' : '',
    			parameters.vertexUv3s ? '#define USE_UV3' : '',

    			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

    			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

    			parameters.flatShading ? '#define FLAT_SHADED' : '',

    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
    			parameters.flipSided ? '#define FLIP_SIDED' : '',

    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

    			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

    			parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

    			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
    			parameters.decodeVideoTextureEmissive ? '#define DECODE_VIDEO_TEXTURE_EMISSIVE' : '',

    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
    			parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',

    			'uniform mat4 viewMatrix;',
    			'uniform vec3 cameraPosition;',
    			'uniform bool isOrthographic;',

    			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
    			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
    			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

    			parameters.dithering ? '#define DITHERING' : '',
    			parameters.opaque ? '#define OPAQUE' : '',

    			ShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
    			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),
    			getLuminanceFunction(),

    			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

    			'\n'

    		].filter( filterEmptyLine ).join( '\n' );

    	}

    	vertexShader = resolveIncludes( vertexShader );
    	vertexShader = replaceLightNums( vertexShader, parameters );
    	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

    	fragmentShader = resolveIncludes( fragmentShader );
    	fragmentShader = replaceLightNums( fragmentShader, parameters );
    	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

    	vertexShader = unrollLoops( vertexShader );
    	fragmentShader = unrollLoops( fragmentShader );

    	if ( parameters.isRawShaderMaterial !== true ) {

    		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

    		versionString = '#version 300 es\n';

    		prefixVertex = [
    			customVertexExtensions,
    			'#define attribute in',
    			'#define varying out',
    			'#define texture2D texture'
    		].join( '\n' ) + '\n' + prefixVertex;

    		prefixFragment = [
    			'#define varying in',
    			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
    			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
    			'#define gl_FragDepthEXT gl_FragDepth',
    			'#define texture2D texture',
    			'#define textureCube texture',
    			'#define texture2DProj textureProj',
    			'#define texture2DLodEXT textureLod',
    			'#define texture2DProjLodEXT textureProjLod',
    			'#define textureCubeLodEXT textureLod',
    			'#define texture2DGradEXT textureGrad',
    			'#define texture2DProjGradEXT textureProjGrad',
    			'#define textureCubeGradEXT textureGrad'
    		].join( '\n' ) + '\n' + prefixFragment;

    	}

    	const vertexGlsl = versionString + prefixVertex + vertexShader;
    	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

    	// console.log( '*VERTEX*', vertexGlsl );
    	// console.log( '*FRAGMENT*', fragmentGlsl );

    	const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
    	const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

    	gl.attachShader( program, glVertexShader );
    	gl.attachShader( program, glFragmentShader );

    	// Force a particular attribute to index 0.

    	if ( parameters.index0AttributeName !== undefined ) {

    		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

    	} else if ( parameters.morphTargets === true ) {

    		// programs with morphTargets displace position out of attribute 0
    		gl.bindAttribLocation( program, 0, 'position' );

    	}

    	gl.linkProgram( program );

    	function onFirstUse( self ) {

    		// check for link errors
    		if ( renderer.debug.checkShaderErrors ) {

    			const programLog = gl.getProgramInfoLog( program ).trim();
    			const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
    			const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

    			let runnable = true;
    			let haveDiagnostics = true;

    			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

    				runnable = false;

    				if ( typeof renderer.debug.onShaderError === 'function' ) {

    					renderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );

    				} else {

    					// default error reporting

    					const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
    					const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

    					console.error(
    						'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
    						'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\n\n' +
    						'Material Name: ' + self.name + '\n' +
    						'Material Type: ' + self.type + '\n\n' +
    						'Program Info Log: ' + programLog + '\n' +
    						vertexErrors + '\n' +
    						fragmentErrors
    					);

    				}

    			} else if ( programLog !== '' ) {

    				console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

    			} else if ( vertexLog === '' || fragmentLog === '' ) {

    				haveDiagnostics = false;

    			}

    			if ( haveDiagnostics ) {

    				self.diagnostics = {

    					runnable: runnable,

    					programLog: programLog,

    					vertexShader: {

    						log: vertexLog,
    						prefix: prefixVertex

    					},

    					fragmentShader: {

    						log: fragmentLog,
    						prefix: prefixFragment

    					}

    				};

    			}

    		}

    		// Clean up

    		// Crashes in iOS9 and iOS10. #18402
    		// gl.detachShader( program, glVertexShader );
    		// gl.detachShader( program, glFragmentShader );

    		gl.deleteShader( glVertexShader );
    		gl.deleteShader( glFragmentShader );

    		cachedUniforms = new WebGLUniforms( gl, program );
    		cachedAttributes = fetchAttributeLocations( gl, program );

    	}

    	// set up caching for uniform locations

    	let cachedUniforms;

    	this.getUniforms = function () {

    		if ( cachedUniforms === undefined ) {

    			// Populates cachedUniforms and cachedAttributes
    			onFirstUse( this );

    		}

    		return cachedUniforms;

    	};

    	// set up caching for attribute locations

    	let cachedAttributes;

    	this.getAttributes = function () {

    		if ( cachedAttributes === undefined ) {

    			// Populates cachedAttributes and cachedUniforms
    			onFirstUse( this );

    		}

    		return cachedAttributes;

    	};

    	// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,
    	// flag the program as ready immediately. It may cause a stall when it's first used.

    	let programReady = ( parameters.rendererExtensionParallelShaderCompile === false );

    	this.isReady = function () {

    		if ( programReady === false ) {

    			programReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );

    		}

    		return programReady;

    	};

    	// free resource

    	this.destroy = function () {

    		bindingStates.releaseStatesOfProgram( this );

    		gl.deleteProgram( program );
    		this.program = undefined;

    	};

    	//

    	this.type = parameters.shaderType;
    	this.name = parameters.shaderName;
    	this.id = programIdCount ++;
    	this.cacheKey = cacheKey;
    	this.usedTimes = 1;
    	this.program = program;
    	this.vertexShader = glVertexShader;
    	this.fragmentShader = glFragmentShader;

    	return this;

    }

    let _id = 0;

    class WebGLShaderCache {

    	constructor() {

    		this.shaderCache = new Map();
    		this.materialCache = new Map();

    	}

    	update( material ) {

    		const vertexShader = material.vertexShader;
    		const fragmentShader = material.fragmentShader;

    		const vertexShaderStage = this._getShaderStage( vertexShader );
    		const fragmentShaderStage = this._getShaderStage( fragmentShader );

    		const materialShaders = this._getShaderCacheForMaterial( material );

    		if ( materialShaders.has( vertexShaderStage ) === false ) {

    			materialShaders.add( vertexShaderStage );
    			vertexShaderStage.usedTimes ++;

    		}

    		if ( materialShaders.has( fragmentShaderStage ) === false ) {

    			materialShaders.add( fragmentShaderStage );
    			fragmentShaderStage.usedTimes ++;

    		}

    		return this;

    	}

    	remove( material ) {

    		const materialShaders = this.materialCache.get( material );

    		for ( const shaderStage of materialShaders ) {

    			shaderStage.usedTimes --;

    			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

    		}

    		this.materialCache.delete( material );

    		return this;

    	}

    	getVertexShaderID( material ) {

    		return this._getShaderStage( material.vertexShader ).id;

    	}

    	getFragmentShaderID( material ) {

    		return this._getShaderStage( material.fragmentShader ).id;

    	}

    	dispose() {

    		this.shaderCache.clear();
    		this.materialCache.clear();

    	}

    	_getShaderCacheForMaterial( material ) {

    		const cache = this.materialCache;
    		let set = cache.get( material );

    		if ( set === undefined ) {

    			set = new Set();
    			cache.set( material, set );

    		}

    		return set;

    	}

    	_getShaderStage( code ) {

    		const cache = this.shaderCache;
    		let stage = cache.get( code );

    		if ( stage === undefined ) {

    			stage = new WebGLShaderStage( code );
    			cache.set( code, stage );

    		}

    		return stage;

    	}

    }

    class WebGLShaderStage {

    	constructor( code ) {

    		this.id = _id ++;

    		this.code = code;
    		this.usedTimes = 0;

    	}

    }

    function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

    	const _programLayers = new Layers();
    	const _customShaders = new WebGLShaderCache();
    	const _activeChannels = new Set();
    	const programs = [];

    	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    	const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;

    	let precision = capabilities.precision;

    	const shaderIDs = {
    		MeshDepthMaterial: 'depth',
    		MeshDistanceMaterial: 'distanceRGBA',
    		MeshNormalMaterial: 'normal',
    		MeshBasicMaterial: 'basic',
    		MeshLambertMaterial: 'lambert',
    		MeshPhongMaterial: 'phong',
    		MeshToonMaterial: 'toon',
    		MeshStandardMaterial: 'physical',
    		MeshPhysicalMaterial: 'physical',
    		MeshMatcapMaterial: 'matcap',
    		LineBasicMaterial: 'basic',
    		LineDashedMaterial: 'dashed',
    		PointsMaterial: 'points',
    		ShadowMaterial: 'shadow',
    		SpriteMaterial: 'sprite'
    	};

    	function getChannel( value ) {

    		_activeChannels.add( value );

    		if ( value === 0 ) return 'uv';

    		return `uv${ value }`;

    	}

    	function getParameters( material, lights, shadows, scene, object ) {

    		const fog = scene.fog;
    		const geometry = object.geometry;
    		const environment = material.isMeshStandardMaterial ? scene.environment : null;

    		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
    		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;

    		const shaderID = shaderIDs[ material.type ];

    		// heuristics to create shader parameters according to lights in the scene
    		// (not to blow over maxLights budget)

    		if ( material.precision !== null ) {

    			precision = capabilities.getMaxPrecision( material.precision );

    			if ( precision !== material.precision ) {

    				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

    			}

    		}

    		//

    		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    		let morphTextureStride = 0;

    		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
    		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
    		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

    		//

    		let vertexShader, fragmentShader;
    		let customVertexShaderID, customFragmentShaderID;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];

    			vertexShader = shader.vertexShader;
    			fragmentShader = shader.fragmentShader;

    		} else {

    			vertexShader = material.vertexShader;
    			fragmentShader = material.fragmentShader;

    			_customShaders.update( material );

    			customVertexShaderID = _customShaders.getVertexShaderID( material );
    			customFragmentShaderID = _customShaders.getFragmentShaderID( material );

    		}

    		const currentRenderTarget = renderer.getRenderTarget();
    		const reverseDepthBuffer = renderer.state.buffers.depth.getReversed();

    		const IS_INSTANCEDMESH = object.isInstancedMesh === true;
    		const IS_BATCHEDMESH = object.isBatchedMesh === true;

    		const HAS_MAP = !! material.map;
    		const HAS_MATCAP = !! material.matcap;
    		const HAS_ENVMAP = !! envMap;
    		const HAS_AOMAP = !! material.aoMap;
    		const HAS_LIGHTMAP = !! material.lightMap;
    		const HAS_BUMPMAP = !! material.bumpMap;
    		const HAS_NORMALMAP = !! material.normalMap;
    		const HAS_DISPLACEMENTMAP = !! material.displacementMap;
    		const HAS_EMISSIVEMAP = !! material.emissiveMap;

    		const HAS_METALNESSMAP = !! material.metalnessMap;
    		const HAS_ROUGHNESSMAP = !! material.roughnessMap;

    		const HAS_ANISOTROPY = material.anisotropy > 0;
    		const HAS_CLEARCOAT = material.clearcoat > 0;
    		const HAS_DISPERSION = material.dispersion > 0;
    		const HAS_IRIDESCENCE = material.iridescence > 0;
    		const HAS_SHEEN = material.sheen > 0;
    		const HAS_TRANSMISSION = material.transmission > 0;

    		const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;

    		const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;
    		const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;
    		const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;

    		const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;
    		const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;

    		const HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;
    		const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;

    		const HAS_SPECULARMAP = !! material.specularMap;
    		const HAS_SPECULAR_COLORMAP = !! material.specularColorMap;
    		const HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;

    		const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;
    		const HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;

    		const HAS_GRADIENTMAP = !! material.gradientMap;

    		const HAS_ALPHAMAP = !! material.alphaMap;

    		const HAS_ALPHATEST = material.alphaTest > 0;

    		const HAS_ALPHAHASH = !! material.alphaHash;

    		const HAS_EXTENSIONS = !! material.extensions;

    		let toneMapping = NoToneMapping;

    		if ( material.toneMapped ) {

    			if ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {

    				toneMapping = renderer.toneMapping;

    			}

    		}

    		const parameters = {

    			shaderID: shaderID,
    			shaderType: material.type,
    			shaderName: material.name,

    			vertexShader: vertexShader,
    			fragmentShader: fragmentShader,
    			defines: material.defines,

    			customVertexShaderID: customVertexShaderID,
    			customFragmentShaderID: customFragmentShaderID,

    			isRawShaderMaterial: material.isRawShaderMaterial === true,
    			glslVersion: material.glslVersion,

    			precision: precision,

    			batching: IS_BATCHEDMESH,
    			batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
    			instancing: IS_INSTANCEDMESH,
    			instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
    			instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,

    			supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
    			outputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),
    			alphaToCoverage: !! material.alphaToCoverage,

    			map: HAS_MAP,
    			matcap: HAS_MATCAP,
    			envMap: HAS_ENVMAP,
    			envMapMode: HAS_ENVMAP && envMap.mapping,
    			envMapCubeUVHeight: envMapCubeUVHeight,
    			aoMap: HAS_AOMAP,
    			lightMap: HAS_LIGHTMAP,
    			bumpMap: HAS_BUMPMAP,
    			normalMap: HAS_NORMALMAP,
    			displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
    			emissiveMap: HAS_EMISSIVEMAP,

    			normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
    			normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,

    			metalnessMap: HAS_METALNESSMAP,
    			roughnessMap: HAS_ROUGHNESSMAP,

    			anisotropy: HAS_ANISOTROPY,
    			anisotropyMap: HAS_ANISOTROPYMAP,

    			clearcoat: HAS_CLEARCOAT,
    			clearcoatMap: HAS_CLEARCOATMAP,
    			clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
    			clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,

    			dispersion: HAS_DISPERSION,

    			iridescence: HAS_IRIDESCENCE,
    			iridescenceMap: HAS_IRIDESCENCEMAP,
    			iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,

    			sheen: HAS_SHEEN,
    			sheenColorMap: HAS_SHEEN_COLORMAP,
    			sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,

    			specularMap: HAS_SPECULARMAP,
    			specularColorMap: HAS_SPECULAR_COLORMAP,
    			specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,

    			transmission: HAS_TRANSMISSION,
    			transmissionMap: HAS_TRANSMISSIONMAP,
    			thicknessMap: HAS_THICKNESSMAP,

    			gradientMap: HAS_GRADIENTMAP,

    			opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,

    			alphaMap: HAS_ALPHAMAP,
    			alphaTest: HAS_ALPHATEST,
    			alphaHash: HAS_ALPHAHASH,

    			combine: material.combine,

    			//

    			mapUv: HAS_MAP && getChannel( material.map.channel ),
    			aoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),
    			lightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),
    			bumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),
    			normalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),
    			displacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),
    			emissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),

    			metalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),
    			roughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),

    			anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),

    			clearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),
    			clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),
    			clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),

    			iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),
    			iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),

    			sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),
    			sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),

    			specularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),
    			specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),
    			specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),

    			transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),
    			thicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),

    			alphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),

    			//

    			vertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),
    			vertexColors: material.vertexColors,
    			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,

    			pointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),

    			fog: !! fog,
    			useFog: material.fog === true,
    			fogExp2: ( !! fog && fog.isFogExp2 ),

    			flatShading: ( material.flatShading === true && material.wireframe === false ),

    			sizeAttenuation: material.sizeAttenuation === true,
    			logarithmicDepthBuffer: logarithmicDepthBuffer,
    			reverseDepthBuffer: reverseDepthBuffer,

    			skinning: object.isSkinnedMesh === true,

    			morphTargets: geometry.morphAttributes.position !== undefined,
    			morphNormals: geometry.morphAttributes.normal !== undefined,
    			morphColors: geometry.morphAttributes.color !== undefined,
    			morphTargetsCount: morphTargetsCount,
    			morphTextureStride: morphTextureStride,

    			numDirLights: lights.directional.length,
    			numPointLights: lights.point.length,
    			numSpotLights: lights.spot.length,
    			numSpotLightMaps: lights.spotLightMap.length,
    			numRectAreaLights: lights.rectArea.length,
    			numHemiLights: lights.hemi.length,

    			numDirLightShadows: lights.directionalShadowMap.length,
    			numPointLightShadows: lights.pointShadowMap.length,
    			numSpotLightShadows: lights.spotShadowMap.length,
    			numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,

    			numLightProbes: lights.numLightProbes,

    			numClippingPlanes: clipping.numPlanes,
    			numClipIntersection: clipping.numIntersection,

    			dithering: material.dithering,

    			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
    			shadowMapType: renderer.shadowMap.type,

    			toneMapping: toneMapping,

    			decodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.map.colorSpace ) === SRGBTransfer ),
    			decodeVideoTextureEmissive: HAS_EMISSIVEMAP && ( material.emissiveMap.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.emissiveMap.colorSpace ) === SRGBTransfer ),

    			premultipliedAlpha: material.premultipliedAlpha,

    			doubleSided: material.side === DoubleSide,
    			flipSided: material.side === BackSide,

    			useDepthPacking: material.depthPacking >= 0,
    			depthPacking: material.depthPacking || 0,

    			index0AttributeName: material.index0AttributeName,

    			extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has( 'WEBGL_clip_cull_distance' ),
    			extensionMultiDraw: ( HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH ) && extensions.has( 'WEBGL_multi_draw' ),

    			rendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),

    			customProgramCacheKey: material.customProgramCacheKey()

    		};

    		// the usage of getChannel() determines the active texture channels for this shader

    		parameters.vertexUv1s = _activeChannels.has( 1 );
    		parameters.vertexUv2s = _activeChannels.has( 2 );
    		parameters.vertexUv3s = _activeChannels.has( 3 );

    		_activeChannels.clear();

    		return parameters;

    	}

    	function getProgramCacheKey( parameters ) {

    		const array = [];

    		if ( parameters.shaderID ) {

    			array.push( parameters.shaderID );

    		} else {

    			array.push( parameters.customVertexShaderID );
    			array.push( parameters.customFragmentShaderID );

    		}

    		if ( parameters.defines !== undefined ) {

    			for ( const name in parameters.defines ) {

    				array.push( name );
    				array.push( parameters.defines[ name ] );

    			}

    		}

    		if ( parameters.isRawShaderMaterial === false ) {

    			getProgramCacheKeyParameters( array, parameters );
    			getProgramCacheKeyBooleans( array, parameters );
    			array.push( renderer.outputColorSpace );

    		}

    		array.push( parameters.customProgramCacheKey );

    		return array.join();

    	}

    	function getProgramCacheKeyParameters( array, parameters ) {

    		array.push( parameters.precision );
    		array.push( parameters.outputColorSpace );
    		array.push( parameters.envMapMode );
    		array.push( parameters.envMapCubeUVHeight );
    		array.push( parameters.mapUv );
    		array.push( parameters.alphaMapUv );
    		array.push( parameters.lightMapUv );
    		array.push( parameters.aoMapUv );
    		array.push( parameters.bumpMapUv );
    		array.push( parameters.normalMapUv );
    		array.push( parameters.displacementMapUv );
    		array.push( parameters.emissiveMapUv );
    		array.push( parameters.metalnessMapUv );
    		array.push( parameters.roughnessMapUv );
    		array.push( parameters.anisotropyMapUv );
    		array.push( parameters.clearcoatMapUv );
    		array.push( parameters.clearcoatNormalMapUv );
    		array.push( parameters.clearcoatRoughnessMapUv );
    		array.push( parameters.iridescenceMapUv );
    		array.push( parameters.iridescenceThicknessMapUv );
    		array.push( parameters.sheenColorMapUv );
    		array.push( parameters.sheenRoughnessMapUv );
    		array.push( parameters.specularMapUv );
    		array.push( parameters.specularColorMapUv );
    		array.push( parameters.specularIntensityMapUv );
    		array.push( parameters.transmissionMapUv );
    		array.push( parameters.thicknessMapUv );
    		array.push( parameters.combine );
    		array.push( parameters.fogExp2 );
    		array.push( parameters.sizeAttenuation );
    		array.push( parameters.morphTargetsCount );
    		array.push( parameters.morphAttributeCount );
    		array.push( parameters.numDirLights );
    		array.push( parameters.numPointLights );
    		array.push( parameters.numSpotLights );
    		array.push( parameters.numSpotLightMaps );
    		array.push( parameters.numHemiLights );
    		array.push( parameters.numRectAreaLights );
    		array.push( parameters.numDirLightShadows );
    		array.push( parameters.numPointLightShadows );
    		array.push( parameters.numSpotLightShadows );
    		array.push( parameters.numSpotLightShadowsWithMaps );
    		array.push( parameters.numLightProbes );
    		array.push( parameters.shadowMapType );
    		array.push( parameters.toneMapping );
    		array.push( parameters.numClippingPlanes );
    		array.push( parameters.numClipIntersection );
    		array.push( parameters.depthPacking );

    	}

    	function getProgramCacheKeyBooleans( array, parameters ) {

    		_programLayers.disableAll();

    		if ( parameters.supportsVertexTextures )
    			_programLayers.enable( 0 );
    		if ( parameters.instancing )
    			_programLayers.enable( 1 );
    		if ( parameters.instancingColor )
    			_programLayers.enable( 2 );
    		if ( parameters.instancingMorph )
    			_programLayers.enable( 3 );
    		if ( parameters.matcap )
    			_programLayers.enable( 4 );
    		if ( parameters.envMap )
    			_programLayers.enable( 5 );
    		if ( parameters.normalMapObjectSpace )
    			_programLayers.enable( 6 );
    		if ( parameters.normalMapTangentSpace )
    			_programLayers.enable( 7 );
    		if ( parameters.clearcoat )
    			_programLayers.enable( 8 );
    		if ( parameters.iridescence )
    			_programLayers.enable( 9 );
    		if ( parameters.alphaTest )
    			_programLayers.enable( 10 );
    		if ( parameters.vertexColors )
    			_programLayers.enable( 11 );
    		if ( parameters.vertexAlphas )
    			_programLayers.enable( 12 );
    		if ( parameters.vertexUv1s )
    			_programLayers.enable( 13 );
    		if ( parameters.vertexUv2s )
    			_programLayers.enable( 14 );
    		if ( parameters.vertexUv3s )
    			_programLayers.enable( 15 );
    		if ( parameters.vertexTangents )
    			_programLayers.enable( 16 );
    		if ( parameters.anisotropy )
    			_programLayers.enable( 17 );
    		if ( parameters.alphaHash )
    			_programLayers.enable( 18 );
    		if ( parameters.batching )
    			_programLayers.enable( 19 );
    		if ( parameters.dispersion )
    			_programLayers.enable( 20 );
    		if ( parameters.batchingColor )
    			_programLayers.enable( 21 );
    		if ( parameters.gradientMap )
    			_programLayers.enable( 22 );

    		array.push( _programLayers.mask );
    		_programLayers.disableAll();

    		if ( parameters.fog )
    			_programLayers.enable( 0 );
    		if ( parameters.useFog )
    			_programLayers.enable( 1 );
    		if ( parameters.flatShading )
    			_programLayers.enable( 2 );
    		if ( parameters.logarithmicDepthBuffer )
    			_programLayers.enable( 3 );
    		if ( parameters.reverseDepthBuffer )
    			_programLayers.enable( 4 );
    		if ( parameters.skinning )
    			_programLayers.enable( 5 );
    		if ( parameters.morphTargets )
    			_programLayers.enable( 6 );
    		if ( parameters.morphNormals )
    			_programLayers.enable( 7 );
    		if ( parameters.morphColors )
    			_programLayers.enable( 8 );
    		if ( parameters.premultipliedAlpha )
    			_programLayers.enable( 9 );
    		if ( parameters.shadowMapEnabled )
    			_programLayers.enable( 10 );
    		if ( parameters.doubleSided )
    			_programLayers.enable( 11 );
    		if ( parameters.flipSided )
    			_programLayers.enable( 12 );
    		if ( parameters.useDepthPacking )
    			_programLayers.enable( 13 );
    		if ( parameters.dithering )
    			_programLayers.enable( 14 );
    		if ( parameters.transmission )
    			_programLayers.enable( 15 );
    		if ( parameters.sheen )
    			_programLayers.enable( 16 );
    		if ( parameters.opaque )
    			_programLayers.enable( 17 );
    		if ( parameters.pointsUvs )
    			_programLayers.enable( 18 );
    		if ( parameters.decodeVideoTexture )
    			_programLayers.enable( 19 );
    		if ( parameters.decodeVideoTextureEmissive )
    			_programLayers.enable( 20 );
    		if ( parameters.alphaToCoverage )
    			_programLayers.enable( 21 );

    		array.push( _programLayers.mask );

    	}

    	function getUniforms( material ) {

    		const shaderID = shaderIDs[ material.type ];
    		let uniforms;

    		if ( shaderID ) {

    			const shader = ShaderLib[ shaderID ];
    			uniforms = UniformsUtils.clone( shader.uniforms );

    		} else {

    			uniforms = material.uniforms;

    		}

    		return uniforms;

    	}

    	function acquireProgram( parameters, cacheKey ) {

    		let program;

    		// Check if code has been already compiled
    		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

    			const preexistingProgram = programs[ p ];

    			if ( preexistingProgram.cacheKey === cacheKey ) {

    				program = preexistingProgram;
    				++ program.usedTimes;

    				break;

    			}

    		}

    		if ( program === undefined ) {

    			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
    			programs.push( program );

    		}

    		return program;

    	}

    	function releaseProgram( program ) {

    		if ( -- program.usedTimes === 0 ) {

    			// Remove from unordered set
    			const i = programs.indexOf( program );
    			programs[ i ] = programs[ programs.length - 1 ];
    			programs.pop();

    			// Free WebGL resources
    			program.destroy();

    		}

    	}

    	function releaseShaderCache( material ) {

    		_customShaders.remove( material );

    	}

    	function dispose() {

    		_customShaders.dispose();

    	}

    	return {
    		getParameters: getParameters,
    		getProgramCacheKey: getProgramCacheKey,
    		getUniforms: getUniforms,
    		acquireProgram: acquireProgram,
    		releaseProgram: releaseProgram,
    		releaseShaderCache: releaseShaderCache,
    		// Exposed for resource monitoring & error feedback via renderer.info:
    		programs: programs,
    		dispose: dispose
    	};

    }

    function WebGLProperties() {

    	let properties = new WeakMap();

    	function has( object ) {

    		return properties.has( object );

    	}

    	function get( object ) {

    		let map = properties.get( object );

    		if ( map === undefined ) {

    			map = {};
    			properties.set( object, map );

    		}

    		return map;

    	}

    	function remove( object ) {

    		properties.delete( object );

    	}

    	function update( object, key, value ) {

    		properties.get( object )[ key ] = value;

    	}

    	function dispose() {

    		properties = new WeakMap();

    	}

    	return {
    		has: has,
    		get: get,
    		remove: remove,
    		update: update,
    		dispose: dispose
    	};

    }

    function painterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.material.id !== b.material.id ) {

    		return a.material.id - b.material.id;

    	} else if ( a.z !== b.z ) {

    		return a.z - b.z;

    	} else {

    		return a.id - b.id;

    	}

    }

    function reversePainterSortStable( a, b ) {

    	if ( a.groupOrder !== b.groupOrder ) {

    		return a.groupOrder - b.groupOrder;

    	} else if ( a.renderOrder !== b.renderOrder ) {

    		return a.renderOrder - b.renderOrder;

    	} else if ( a.z !== b.z ) {

    		return b.z - a.z;

    	} else {

    		return a.id - b.id;

    	}

    }


    function WebGLRenderList() {

    	const renderItems = [];
    	let renderItemsIndex = 0;

    	const opaque = [];
    	const transmissive = [];
    	const transparent = [];

    	function init() {

    		renderItemsIndex = 0;

    		opaque.length = 0;
    		transmissive.length = 0;
    		transparent.length = 0;

    	}

    	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

    		let renderItem = renderItems[ renderItemsIndex ];

    		if ( renderItem === undefined ) {

    			renderItem = {
    				id: object.id,
    				object: object,
    				geometry: geometry,
    				material: material,
    				groupOrder: groupOrder,
    				renderOrder: object.renderOrder,
    				z: z,
    				group: group
    			};

    			renderItems[ renderItemsIndex ] = renderItem;

    		} else {

    			renderItem.id = object.id;
    			renderItem.object = object;
    			renderItem.geometry = geometry;
    			renderItem.material = material;
    			renderItem.groupOrder = groupOrder;
    			renderItem.renderOrder = object.renderOrder;
    			renderItem.z = z;
    			renderItem.group = group;

    		}

    		renderItemsIndex ++;

    		return renderItem;

    	}

    	function push( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		if ( material.transmission > 0.0 ) {

    			transmissive.push( renderItem );

    		} else if ( material.transparent === true ) {

    			transparent.push( renderItem );

    		} else {

    			opaque.push( renderItem );

    		}

    	}

    	function unshift( object, geometry, material, groupOrder, z, group ) {

    		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

    		if ( material.transmission > 0.0 ) {

    			transmissive.unshift( renderItem );

    		} else if ( material.transparent === true ) {

    			transparent.unshift( renderItem );

    		} else {

    			opaque.unshift( renderItem );

    		}

    	}

    	function sort( customOpaqueSort, customTransparentSort ) {

    		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
    		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
    		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

    	}

    	function finish() {

    		// Clear references from inactive renderItems in the list

    		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

    			const renderItem = renderItems[ i ];

    			if ( renderItem.id === null ) break;

    			renderItem.id = null;
    			renderItem.object = null;
    			renderItem.geometry = null;
    			renderItem.material = null;
    			renderItem.group = null;

    		}

    	}

    	return {

    		opaque: opaque,
    		transmissive: transmissive,
    		transparent: transparent,

    		init: init,
    		push: push,
    		unshift: unshift,
    		finish: finish,

    		sort: sort
    	};

    }

    function WebGLRenderLists() {

    	let lists = new WeakMap();

    	function get( scene, renderCallDepth ) {

    		const listArray = lists.get( scene );
    		let list;

    		if ( listArray === undefined ) {

    			list = new WebGLRenderList();
    			lists.set( scene, [ list ] );

    		} else {

    			if ( renderCallDepth >= listArray.length ) {

    				list = new WebGLRenderList();
    				listArray.push( list );

    			} else {

    				list = listArray[ renderCallDepth ];

    			}

    		}

    		return list;

    	}

    	function dispose() {

    		lists = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    function UniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						direction: new Vector3(),
    						color: new Color()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						position: new Vector3(),
    						direction: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						coneCos: 0,
    						penumbraCos: 0,
    						decay: 0
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						position: new Vector3(),
    						color: new Color(),
    						distance: 0,
    						decay: 0
    					};
    					break;

    				case 'HemisphereLight':
    					uniforms = {
    						direction: new Vector3(),
    						skyColor: new Color(),
    						groundColor: new Color()
    					};
    					break;

    				case 'RectAreaLight':
    					uniforms = {
    						color: new Color(),
    						position: new Vector3(),
    						halfWidth: new Vector3(),
    						halfHeight: new Vector3()
    					};
    					break;

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }

    function ShadowUniformsCache() {

    	const lights = {};

    	return {

    		get: function ( light ) {

    			if ( lights[ light.id ] !== undefined ) {

    				return lights[ light.id ];

    			}

    			let uniforms;

    			switch ( light.type ) {

    				case 'DirectionalLight':
    					uniforms = {
    						shadowIntensity: 1,
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'SpotLight':
    					uniforms = {
    						shadowIntensity: 1,
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2()
    					};
    					break;

    				case 'PointLight':
    					uniforms = {
    						shadowIntensity: 1,
    						shadowBias: 0,
    						shadowNormalBias: 0,
    						shadowRadius: 1,
    						shadowMapSize: new Vector2(),
    						shadowCameraNear: 1,
    						shadowCameraFar: 1000
    					};
    					break;

    				// TODO (abelnation): set RectAreaLight shadow uniforms

    			}

    			lights[ light.id ] = uniforms;

    			return uniforms;

    		}

    	};

    }



    let nextVersion = 0;

    function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {

    	return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );

    }

    function WebGLLights( extensions ) {

    	const cache = new UniformsCache();

    	const shadowCache = ShadowUniformsCache();

    	const state = {

    		version: 0,

    		hash: {
    			directionalLength: -1,
    			pointLength: -1,
    			spotLength: -1,
    			rectAreaLength: -1,
    			hemiLength: -1,

    			numDirectionalShadows: -1,
    			numPointShadows: -1,
    			numSpotShadows: -1,
    			numSpotMaps: -1,

    			numLightProbes: -1
    		},

    		ambient: [ 0, 0, 0 ],
    		probe: [],
    		directional: [],
    		directionalShadow: [],
    		directionalShadowMap: [],
    		directionalShadowMatrix: [],
    		spot: [],
    		spotLightMap: [],
    		spotShadow: [],
    		spotShadowMap: [],
    		spotLightMatrix: [],
    		rectArea: [],
    		rectAreaLTC1: null,
    		rectAreaLTC2: null,
    		point: [],
    		pointShadow: [],
    		pointShadowMap: [],
    		pointShadowMatrix: [],
    		hemi: [],
    		numSpotLightShadowsWithMaps: 0,
    		numLightProbes: 0

    	};

    	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

    	const vector3 = new Vector3();
    	const matrix4 = new Matrix4();
    	const matrix42 = new Matrix4();

    	function setup( lights ) {

    		let r = 0, g = 0, b = 0;

    		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

    		let directionalLength = 0;
    		let pointLength = 0;
    		let spotLength = 0;
    		let rectAreaLength = 0;
    		let hemiLength = 0;

    		let numDirectionalShadows = 0;
    		let numPointShadows = 0;
    		let numSpotShadows = 0;
    		let numSpotMaps = 0;
    		let numSpotShadowsWithMaps = 0;

    		let numLightProbes = 0;

    		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
    		lights.sort( shadowCastingAndTexturingLightsFirst );

    		for ( let i = 0, l = lights.length; i < l; i ++ ) {

    			const light = lights[ i ];

    			const color = light.color;
    			const intensity = light.intensity;
    			const distance = light.distance;

    			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

    			if ( light.isAmbientLight ) {

    				r += color.r * intensity;
    				g += color.g * intensity;
    				b += color.b * intensity;

    			} else if ( light.isLightProbe ) {

    				for ( let j = 0; j < 9; j ++ ) {

    					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

    				}

    				numLightProbes ++;

    			} else if ( light.isDirectionalLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowIntensity = shadow.intensity;
    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.directionalShadow[ directionalLength ] = shadowUniforms;
    					state.directionalShadowMap[ directionalLength ] = shadowMap;
    					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

    					numDirectionalShadows ++;

    				}

    				state.directional[ directionalLength ] = uniforms;

    				directionalLength ++;

    			} else if ( light.isSpotLight ) {

    				const uniforms = cache.get( light );

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );

    				uniforms.color.copy( color ).multiplyScalar( intensity );
    				uniforms.distance = distance;

    				uniforms.coneCos = Math.cos( light.angle );
    				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
    				uniforms.decay = light.decay;

    				state.spot[ spotLength ] = uniforms;

    				const shadow = light.shadow;

    				if ( light.map ) {

    					state.spotLightMap[ numSpotMaps ] = light.map;
    					numSpotMaps ++;

    					// make sure the lightMatrix is up to date
    					// TODO : do it if required only
    					shadow.updateMatrices( light );

    					if ( light.castShadow ) numSpotShadowsWithMaps ++;

    				}

    				state.spotLightMatrix[ spotLength ] = shadow.matrix;

    				if ( light.castShadow ) {

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowIntensity = shadow.intensity;
    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;

    					state.spotShadow[ spotLength ] = shadowUniforms;
    					state.spotShadowMap[ spotLength ] = shadowMap;

    					numSpotShadows ++;

    				}

    				spotLength ++;

    			} else if ( light.isRectAreaLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( color ).multiplyScalar( intensity );

    				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
    				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

    				state.rectArea[ rectAreaLength ] = uniforms;

    				rectAreaLength ++;

    			} else if ( light.isPointLight ) {

    				const uniforms = cache.get( light );

    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
    				uniforms.distance = light.distance;
    				uniforms.decay = light.decay;

    				if ( light.castShadow ) {

    					const shadow = light.shadow;

    					const shadowUniforms = shadowCache.get( light );

    					shadowUniforms.shadowIntensity = shadow.intensity;
    					shadowUniforms.shadowBias = shadow.bias;
    					shadowUniforms.shadowNormalBias = shadow.normalBias;
    					shadowUniforms.shadowRadius = shadow.radius;
    					shadowUniforms.shadowMapSize = shadow.mapSize;
    					shadowUniforms.shadowCameraNear = shadow.camera.near;
    					shadowUniforms.shadowCameraFar = shadow.camera.far;

    					state.pointShadow[ pointLength ] = shadowUniforms;
    					state.pointShadowMap[ pointLength ] = shadowMap;
    					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

    					numPointShadows ++;

    				}

    				state.point[ pointLength ] = uniforms;

    				pointLength ++;

    			} else if ( light.isHemisphereLight ) {

    				const uniforms = cache.get( light );

    				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
    				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

    				state.hemi[ hemiLength ] = uniforms;

    				hemiLength ++;

    			}

    		}

    		if ( rectAreaLength > 0 ) {

    			if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

    				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
    				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

    			} else {

    				state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
    				state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

    			}

    		}

    		state.ambient[ 0 ] = r;
    		state.ambient[ 1 ] = g;
    		state.ambient[ 2 ] = b;

    		const hash = state.hash;

    		if ( hash.directionalLength !== directionalLength ||
    			hash.pointLength !== pointLength ||
    			hash.spotLength !== spotLength ||
    			hash.rectAreaLength !== rectAreaLength ||
    			hash.hemiLength !== hemiLength ||
    			hash.numDirectionalShadows !== numDirectionalShadows ||
    			hash.numPointShadows !== numPointShadows ||
    			hash.numSpotShadows !== numSpotShadows ||
    			hash.numSpotMaps !== numSpotMaps ||
    			hash.numLightProbes !== numLightProbes ) {

    			state.directional.length = directionalLength;
    			state.spot.length = spotLength;
    			state.rectArea.length = rectAreaLength;
    			state.point.length = pointLength;
    			state.hemi.length = hemiLength;

    			state.directionalShadow.length = numDirectionalShadows;
    			state.directionalShadowMap.length = numDirectionalShadows;
    			state.pointShadow.length = numPointShadows;
    			state.pointShadowMap.length = numPointShadows;
    			state.spotShadow.length = numSpotShadows;
    			state.spotShadowMap.length = numSpotShadows;
    			state.directionalShadowMatrix.length = numDirectionalShadows;
    			state.pointShadowMatrix.length = numPointShadows;
    			state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
    			state.spotLightMap.length = numSpotMaps;
    			state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
    			state.numLightProbes = numLightProbes;

    			hash.directionalLength = directionalLength;
    			hash.pointLength = pointLength;
    			hash.spotLength = spotLength;
    			hash.rectAreaLength = rectAreaLength;
    			hash.hemiLength = hemiLength;

    			hash.numDirectionalShadows = numDirectionalShadows;
    			hash.numPointShadows = numPointShadows;
    			hash.numSpotShadows = numSpotShadows;
    			hash.numSpotMaps = numSpotMaps;

    			hash.numLightProbes = numLightProbes;

    			state.version = nextVersion ++;

    		}

    	}

    	function setupView( lights, camera ) {

    		let directionalLength = 0;
    		let pointLength = 0;
    		let spotLength = 0;
    		let rectAreaLength = 0;
    		let hemiLength = 0;

    		const viewMatrix = camera.matrixWorldInverse;

    		for ( let i = 0, l = lights.length; i < l; i ++ ) {

    			const light = lights[ i ];

    			if ( light.isDirectionalLight ) {

    				const uniforms = state.directional[ directionalLength ];

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				directionalLength ++;

    			} else if ( light.isSpotLight ) {

    				const uniforms = state.spot[ spotLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				vector3.setFromMatrixPosition( light.target.matrixWorld );
    				uniforms.direction.sub( vector3 );
    				uniforms.direction.transformDirection( viewMatrix );

    				spotLength ++;

    			} else if ( light.isRectAreaLight ) {

    				const uniforms = state.rectArea[ rectAreaLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				// extract local rotation of light to derive width/height half vectors
    				matrix42.identity();
    				matrix4.copy( light.matrixWorld );
    				matrix4.premultiply( viewMatrix );
    				matrix42.extractRotation( matrix4 );

    				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
    				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

    				uniforms.halfWidth.applyMatrix4( matrix42 );
    				uniforms.halfHeight.applyMatrix4( matrix42 );

    				rectAreaLength ++;

    			} else if ( light.isPointLight ) {

    				const uniforms = state.point[ pointLength ];

    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
    				uniforms.position.applyMatrix4( viewMatrix );

    				pointLength ++;

    			} else if ( light.isHemisphereLight ) {

    				const uniforms = state.hemi[ hemiLength ];

    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
    				uniforms.direction.transformDirection( viewMatrix );

    				hemiLength ++;

    			}

    		}

    	}

    	return {
    		setup: setup,
    		setupView: setupView,
    		state: state
    	};

    }

    function WebGLRenderState( extensions ) {

    	const lights = new WebGLLights( extensions );

    	const lightsArray = [];
    	const shadowsArray = [];

    	function init( camera ) {

    		state.camera = camera;

    		lightsArray.length = 0;
    		shadowsArray.length = 0;

    	}

    	function pushLight( light ) {

    		lightsArray.push( light );

    	}

    	function pushShadow( shadowLight ) {

    		shadowsArray.push( shadowLight );

    	}

    	function setupLights() {

    		lights.setup( lightsArray );

    	}

    	function setupLightsView( camera ) {

    		lights.setupView( lightsArray, camera );

    	}

    	const state = {
    		lightsArray: lightsArray,
    		shadowsArray: shadowsArray,

    		camera: null,

    		lights: lights,

    		transmissionRenderTarget: {}
    	};

    	return {
    		init: init,
    		state: state,
    		setupLights: setupLights,
    		setupLightsView: setupLightsView,

    		pushLight: pushLight,
    		pushShadow: pushShadow
    	};

    }

    function WebGLRenderStates( extensions ) {

    	let renderStates = new WeakMap();

    	function get( scene, renderCallDepth = 0 ) {

    		const renderStateArray = renderStates.get( scene );
    		let renderState;

    		if ( renderStateArray === undefined ) {

    			renderState = new WebGLRenderState( extensions );
    			renderStates.set( scene, [ renderState ] );

    		} else {

    			if ( renderCallDepth >= renderStateArray.length ) {

    				renderState = new WebGLRenderState( extensions );
    				renderStateArray.push( renderState );

    			} else {

    				renderState = renderStateArray[ renderCallDepth ];

    			}

    		}

    		return renderState;

    	}

    	function dispose() {

    		renderStates = new WeakMap();

    	}

    	return {
    		get: get,
    		dispose: dispose
    	};

    }

    const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

    const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

    function WebGLShadowMap( renderer, objects, capabilities ) {

    	let _frustum = new Frustum();

    	const _shadowMapSize = new Vector2(),
    		_viewportSize = new Vector2(),

    		_viewport = new Vector4(),

    		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
    		_distanceMaterial = new MeshDistanceMaterial(),

    		_materialCache = {},

    		_maxTextureSize = capabilities.maxTextureSize;

    	const shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };

    	const shadowMaterialVertical = new ShaderMaterial( {
    		defines: {
    			VSM_SAMPLES: 8
    		},
    		uniforms: {
    			shadow_pass: { value: null },
    			resolution: { value: new Vector2() },
    			radius: { value: 4.0 }
    		},

    		vertexShader: vertex,
    		fragmentShader: fragment

    	} );

    	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

    	const fullScreenTri = new BufferGeometry();
    	fullScreenTri.setAttribute(
    		'position',
    		new BufferAttribute(
    			new Float32Array( [ -1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5 ] ),
    			3
    		)
    	);

    	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

    	const scope = this;

    	this.enabled = false;

    	this.autoUpdate = true;
    	this.needsUpdate = false;

    	this.type = PCFShadowMap;
    	let _previousType = this.type;

    	this.render = function ( lights, scene, camera ) {

    		if ( scope.enabled === false ) return;
    		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

    		if ( lights.length === 0 ) return;

    		const currentRenderTarget = renderer.getRenderTarget();
    		const activeCubeFace = renderer.getActiveCubeFace();
    		const activeMipmapLevel = renderer.getActiveMipmapLevel();

    		const _state = renderer.state;

    		// Set GL state for depth map.
    		_state.setBlending( NoBlending );
    		_state.buffers.color.setClear( 1, 1, 1, 1 );
    		_state.buffers.depth.setTest( true );
    		_state.setScissorTest( false );

    		// check for shadow map type changes

    		const toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );
    		const fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );

    		// render depth map

    		for ( let i = 0, il = lights.length; i < il; i ++ ) {

    			const light = lights[ i ];
    			const shadow = light.shadow;

    			if ( shadow === undefined ) {

    				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
    				continue;

    			}

    			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

    			_shadowMapSize.copy( shadow.mapSize );

    			const shadowFrameExtents = shadow.getFrameExtents();

    			_shadowMapSize.multiply( shadowFrameExtents );

    			_viewportSize.copy( shadow.mapSize );

    			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

    				if ( _shadowMapSize.x > _maxTextureSize ) {

    					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
    					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
    					shadow.mapSize.x = _viewportSize.x;

    				}

    				if ( _shadowMapSize.y > _maxTextureSize ) {

    					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
    					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
    					shadow.mapSize.y = _viewportSize.y;

    				}

    			}

    			if ( shadow.map === null || toVSM === true || fromVSM === true ) {

    				const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};

    				if ( shadow.map !== null ) {

    					shadow.map.dispose();

    				}

    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
    				shadow.map.texture.name = light.name + '.shadowMap';

    				shadow.camera.updateProjectionMatrix();

    			}

    			renderer.setRenderTarget( shadow.map );
    			renderer.clear();

    			const viewportCount = shadow.getViewportCount();

    			for ( let vp = 0; vp < viewportCount; vp ++ ) {

    				const viewport = shadow.getViewport( vp );

    				_viewport.set(
    					_viewportSize.x * viewport.x,
    					_viewportSize.y * viewport.y,
    					_viewportSize.x * viewport.z,
    					_viewportSize.y * viewport.w
    				);

    				_state.viewport( _viewport );

    				shadow.updateMatrices( light, vp );

    				_frustum = shadow.getFrustum();

    				renderObject( scene, camera, shadow.camera, light, this.type );

    			}

    			// do blur pass for VSM

    			if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {

    				VSMPass( shadow, camera );

    			}

    			shadow.needsUpdate = false;

    		}

    		_previousType = this.type;

    		scope.needsUpdate = false;

    		renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

    	};

    	function VSMPass( shadow, camera ) {

    		const geometry = objects.update( fullScreenMesh );

    		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

    			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
    			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

    			shadowMaterialVertical.needsUpdate = true;
    			shadowMaterialHorizontal.needsUpdate = true;

    		}

    		if ( shadow.mapPass === null ) {

    			shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );

    		}

    		// vertical pass

    		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    		renderer.setRenderTarget( shadow.mapPass );
    		renderer.clear();
    		renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

    		// horizontal pass

    		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
    		renderer.setRenderTarget( shadow.map );
    		renderer.clear();
    		renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

    	}

    	function getDepthMaterial( object, material, light, type ) {

    		let result = null;

    		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

    		if ( customMaterial !== undefined ) {

    			result = customMaterial;

    		} else {

    			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

    			if ( ( renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
    				( material.displacementMap && material.displacementScale !== 0 ) ||
    				( material.alphaMap && material.alphaTest > 0 ) ||
    				( material.map && material.alphaTest > 0 ) ||
    				( material.alphaToCoverage === true ) ) {

    				// in this case we need a unique material instance reflecting the
    				// appropriate state

    				const keyA = result.uuid, keyB = material.uuid;

    				let materialsForVariant = _materialCache[ keyA ];

    				if ( materialsForVariant === undefined ) {

    					materialsForVariant = {};
    					_materialCache[ keyA ] = materialsForVariant;

    				}

    				let cachedMaterial = materialsForVariant[ keyB ];

    				if ( cachedMaterial === undefined ) {

    					cachedMaterial = result.clone();
    					materialsForVariant[ keyB ] = cachedMaterial;
    					material.addEventListener( 'dispose', onMaterialDispose );

    				}

    				result = cachedMaterial;

    			}

    		}

    		result.visible = material.visible;
    		result.wireframe = material.wireframe;

    		if ( type === VSMShadowMap ) {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

    		} else {

    			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

    		}

    		result.alphaMap = material.alphaMap;
    		result.alphaTest = ( material.alphaToCoverage === true ) ? 0.5 : material.alphaTest; // approximate alphaToCoverage by using a fixed alphaTest value
    		result.map = material.map;

    		result.clipShadows = material.clipShadows;
    		result.clippingPlanes = material.clippingPlanes;
    		result.clipIntersection = material.clipIntersection;

    		result.displacementMap = material.displacementMap;
    		result.displacementScale = material.displacementScale;
    		result.displacementBias = material.displacementBias;

    		result.wireframeLinewidth = material.wireframeLinewidth;
    		result.linewidth = material.linewidth;

    		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

    			const materialProperties = renderer.properties.get( result );
    			materialProperties.light = light;

    		}

    		return result;

    	}

    	function renderObject( object, camera, shadowCamera, light, type ) {

    		if ( object.visible === false ) return;

    		const visible = object.layers.test( camera.layers );

    		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

    			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

    				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

    				const geometry = objects.update( object );
    				const material = object.material;

    				if ( Array.isArray( material ) ) {

    					const groups = geometry.groups;

    					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

    						const group = groups[ k ];
    						const groupMaterial = material[ group.materialIndex ];

    						if ( groupMaterial && groupMaterial.visible ) {

    							const depthMaterial = getDepthMaterial( object, groupMaterial, light, type );

    							object.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

    							renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

    							object.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

    						}

    					}

    				} else if ( material.visible ) {

    					const depthMaterial = getDepthMaterial( object, material, light, type );

    					object.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

    					renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

    					object.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

    				}

    			}

    		}

    		const children = object.children;

    		for ( let i = 0, l = children.length; i < l; i ++ ) {

    			renderObject( children[ i ], camera, shadowCamera, light, type );

    		}

    	}

    	function onMaterialDispose( event ) {

    		const material = event.target;

    		material.removeEventListener( 'dispose', onMaterialDispose );

    		// make sure to remove the unique distance/depth materials used for shadow map rendering

    		for ( const id in _materialCache ) {

    			const cache = _materialCache[ id ];

    			const uuid = event.target.uuid;

    			if ( uuid in cache ) {

    				const shadowMaterial = cache[ uuid ];
    				shadowMaterial.dispose();
    				delete cache[ uuid ];

    			}

    		}

    	}

    }

    const reversedFuncs = {
    	[ NeverDepth ]: AlwaysDepth,
    	[ LessDepth ]: GreaterDepth,
    	[ EqualDepth ]: NotEqualDepth,
    	[ LessEqualDepth ]: GreaterEqualDepth,

    	[ AlwaysDepth ]: NeverDepth,
    	[ GreaterDepth ]: LessDepth,
    	[ NotEqualDepth ]: EqualDepth,
    	[ GreaterEqualDepth ]: LessEqualDepth,
    };

    function WebGLState( gl, extensions ) {

    	function ColorBuffer() {

    		let locked = false;

    		const color = new Vector4();
    		let currentColorMask = null;
    		const currentColorClear = new Vector4( 0, 0, 0, 0 );

    		return {

    			setMask: function ( colorMask ) {

    				if ( currentColorMask !== colorMask && ! locked ) {

    					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
    					currentColorMask = colorMask;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( r, g, b, a, premultipliedAlpha ) {

    				if ( premultipliedAlpha === true ) {

    					r *= a; g *= a; b *= a;

    				}

    				color.set( r, g, b, a );

    				if ( currentColorClear.equals( color ) === false ) {

    					gl.clearColor( r, g, b, a );
    					currentColorClear.copy( color );

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentColorMask = null;
    				currentColorClear.set( -1, 0, 0, 0 ); // set to invalid state

    			}

    		};

    	}

    	function DepthBuffer() {

    		let locked = false;

    		let currentReversed = false;
    		let currentDepthMask = null;
    		let currentDepthFunc = null;
    		let currentDepthClear = null;

    		return {

    			setReversed: function ( reversed ) {

    				if ( currentReversed !== reversed ) {

    					const ext = extensions.get( 'EXT_clip_control' );

    					if ( reversed ) {

    						ext.clipControlEXT( ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT );

    					} else {

    						ext.clipControlEXT( ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT );

    					}

    					currentReversed = reversed;

    					const oldDepth = currentDepthClear;
    					currentDepthClear = null;
    					this.setClear( oldDepth );

    				}

    			},

    			getReversed: function () {

    				return currentReversed;

    			},

    			setTest: function ( depthTest ) {

    				if ( depthTest ) {

    					enable( gl.DEPTH_TEST );

    				} else {

    					disable( gl.DEPTH_TEST );

    				}

    			},

    			setMask: function ( depthMask ) {

    				if ( currentDepthMask !== depthMask && ! locked ) {

    					gl.depthMask( depthMask );
    					currentDepthMask = depthMask;

    				}

    			},

    			setFunc: function ( depthFunc ) {

    				if ( currentReversed ) depthFunc = reversedFuncs[ depthFunc ];

    				if ( currentDepthFunc !== depthFunc ) {

    					switch ( depthFunc ) {

    						case NeverDepth:

    							gl.depthFunc( gl.NEVER );
    							break;

    						case AlwaysDepth:

    							gl.depthFunc( gl.ALWAYS );
    							break;

    						case LessDepth:

    							gl.depthFunc( gl.LESS );
    							break;

    						case LessEqualDepth:

    							gl.depthFunc( gl.LEQUAL );
    							break;

    						case EqualDepth:

    							gl.depthFunc( gl.EQUAL );
    							break;

    						case GreaterEqualDepth:

    							gl.depthFunc( gl.GEQUAL );
    							break;

    						case GreaterDepth:

    							gl.depthFunc( gl.GREATER );
    							break;

    						case NotEqualDepth:

    							gl.depthFunc( gl.NOTEQUAL );
    							break;

    						default:

    							gl.depthFunc( gl.LEQUAL );

    					}

    					currentDepthFunc = depthFunc;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( depth ) {

    				if ( currentDepthClear !== depth ) {

    					if ( currentReversed ) {

    						depth = 1 - depth;

    					}

    					gl.clearDepth( depth );
    					currentDepthClear = depth;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentDepthMask = null;
    				currentDepthFunc = null;
    				currentDepthClear = null;
    				currentReversed = false;

    			}

    		};

    	}

    	function StencilBuffer() {

    		let locked = false;

    		let currentStencilMask = null;
    		let currentStencilFunc = null;
    		let currentStencilRef = null;
    		let currentStencilFuncMask = null;
    		let currentStencilFail = null;
    		let currentStencilZFail = null;
    		let currentStencilZPass = null;
    		let currentStencilClear = null;

    		return {

    			setTest: function ( stencilTest ) {

    				if ( ! locked ) {

    					if ( stencilTest ) {

    						enable( gl.STENCIL_TEST );

    					} else {

    						disable( gl.STENCIL_TEST );

    					}

    				}

    			},

    			setMask: function ( stencilMask ) {

    				if ( currentStencilMask !== stencilMask && ! locked ) {

    					gl.stencilMask( stencilMask );
    					currentStencilMask = stencilMask;

    				}

    			},

    			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

    				if ( currentStencilFunc !== stencilFunc ||
    				     currentStencilRef !== stencilRef ||
    				     currentStencilFuncMask !== stencilMask ) {

    					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

    					currentStencilFunc = stencilFunc;
    					currentStencilRef = stencilRef;
    					currentStencilFuncMask = stencilMask;

    				}

    			},

    			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

    				if ( currentStencilFail !== stencilFail ||
    				     currentStencilZFail !== stencilZFail ||
    				     currentStencilZPass !== stencilZPass ) {

    					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

    					currentStencilFail = stencilFail;
    					currentStencilZFail = stencilZFail;
    					currentStencilZPass = stencilZPass;

    				}

    			},

    			setLocked: function ( lock ) {

    				locked = lock;

    			},

    			setClear: function ( stencil ) {

    				if ( currentStencilClear !== stencil ) {

    					gl.clearStencil( stencil );
    					currentStencilClear = stencil;

    				}

    			},

    			reset: function () {

    				locked = false;

    				currentStencilMask = null;
    				currentStencilFunc = null;
    				currentStencilRef = null;
    				currentStencilFuncMask = null;
    				currentStencilFail = null;
    				currentStencilZFail = null;
    				currentStencilZPass = null;
    				currentStencilClear = null;

    			}

    		};

    	}

    	//

    	const colorBuffer = new ColorBuffer();
    	const depthBuffer = new DepthBuffer();
    	const stencilBuffer = new StencilBuffer();

    	const uboBindings = new WeakMap();
    	const uboProgramMap = new WeakMap();

    	let enabledCapabilities = {};

    	let currentBoundFramebuffers = {};
    	let currentDrawbuffers = new WeakMap();
    	let defaultDrawbuffers = [];

    	let currentProgram = null;

    	let currentBlendingEnabled = false;
    	let currentBlending = null;
    	let currentBlendEquation = null;
    	let currentBlendSrc = null;
    	let currentBlendDst = null;
    	let currentBlendEquationAlpha = null;
    	let currentBlendSrcAlpha = null;
    	let currentBlendDstAlpha = null;
    	let currentBlendColor = new Color( 0, 0, 0 );
    	let currentBlendAlpha = 0;
    	let currentPremultipledAlpha = false;

    	let currentFlipSided = null;
    	let currentCullFace = null;

    	let currentLineWidth = null;

    	let currentPolygonOffsetFactor = null;
    	let currentPolygonOffsetUnits = null;

    	const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

    	let lineWidthAvailable = false;
    	let version = 0;
    	const glVersion = gl.getParameter( gl.VERSION );

    	if ( glVersion.indexOf( 'WebGL' ) !== -1 ) {

    		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 1.0 );

    	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== -1 ) {

    		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
    		lineWidthAvailable = ( version >= 2.0 );

    	}

    	let currentTextureSlot = null;
    	let currentBoundTextures = {};

    	const scissorParam = gl.getParameter( gl.SCISSOR_BOX );
    	const viewportParam = gl.getParameter( gl.VIEWPORT );

    	const currentScissor = new Vector4().fromArray( scissorParam );
    	const currentViewport = new Vector4().fromArray( viewportParam );

    	function createTexture( type, target, count, dimensions ) {

    		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
    		const texture = gl.createTexture();

    		gl.bindTexture( type, texture );
    		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
    		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

    		for ( let i = 0; i < count; i ++ ) {

    			if ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) {

    				gl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

    			} else {

    				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

    			}

    		}

    		return texture;

    	}

    	const emptyTextures = {};
    	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
    	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );
    	emptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );
    	emptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );

    	// init

    	colorBuffer.setClear( 0, 0, 0, 1 );
    	depthBuffer.setClear( 1 );
    	stencilBuffer.setClear( 0 );

    	enable( gl.DEPTH_TEST );
    	depthBuffer.setFunc( LessEqualDepth );

    	setFlipSided( false );
    	setCullFace( CullFaceBack );
    	enable( gl.CULL_FACE );

    	setBlending( NoBlending );

    	//

    	function enable( id ) {

    		if ( enabledCapabilities[ id ] !== true ) {

    			gl.enable( id );
    			enabledCapabilities[ id ] = true;

    		}

    	}

    	function disable( id ) {

    		if ( enabledCapabilities[ id ] !== false ) {

    			gl.disable( id );
    			enabledCapabilities[ id ] = false;

    		}

    	}

    	function bindFramebuffer( target, framebuffer ) {

    		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

    			gl.bindFramebuffer( target, framebuffer );

    			currentBoundFramebuffers[ target ] = framebuffer;

    			// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

    			if ( target === gl.DRAW_FRAMEBUFFER ) {

    				currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

    			}

    			if ( target === gl.FRAMEBUFFER ) {

    				currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

    			}

    			return true;

    		}

    		return false;

    	}

    	function drawBuffers( renderTarget, framebuffer ) {

    		let drawBuffers = defaultDrawbuffers;

    		let needsUpdate = false;

    		if ( renderTarget ) {

    			drawBuffers = currentDrawbuffers.get( framebuffer );

    			if ( drawBuffers === undefined ) {

    				drawBuffers = [];
    				currentDrawbuffers.set( framebuffer, drawBuffers );

    			}

    			const textures = renderTarget.textures;

    			if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

    				for ( let i = 0, il = textures.length; i < il; i ++ ) {

    					drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

    				}

    				drawBuffers.length = textures.length;

    				needsUpdate = true;

    			}

    		} else {

    			if ( drawBuffers[ 0 ] !== gl.BACK ) {

    				drawBuffers[ 0 ] = gl.BACK;

    				needsUpdate = true;

    			}

    		}

    		if ( needsUpdate ) {

    			gl.drawBuffers( drawBuffers );

    		}

    	}

    	function useProgram( program ) {

    		if ( currentProgram !== program ) {

    			gl.useProgram( program );

    			currentProgram = program;

    			return true;

    		}

    		return false;

    	}

    	const equationToGL = {
    		[ AddEquation ]: gl.FUNC_ADD,
    		[ SubtractEquation ]: gl.FUNC_SUBTRACT,
    		[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
    	};

    	equationToGL[ MinEquation ] = gl.MIN;
    	equationToGL[ MaxEquation ] = gl.MAX;

    	const factorToGL = {
    		[ ZeroFactor ]: gl.ZERO,
    		[ OneFactor ]: gl.ONE,
    		[ SrcColorFactor ]: gl.SRC_COLOR,
    		[ SrcAlphaFactor ]: gl.SRC_ALPHA,
    		[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
    		[ DstColorFactor ]: gl.DST_COLOR,
    		[ DstAlphaFactor ]: gl.DST_ALPHA,
    		[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
    		[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
    		[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
    		[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA,
    		[ ConstantColorFactor ]: gl.CONSTANT_COLOR,
    		[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,
    		[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,
    		[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA
    	};

    	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {

    		if ( blending === NoBlending ) {

    			if ( currentBlendingEnabled === true ) {

    				disable( gl.BLEND );
    				currentBlendingEnabled = false;

    			}

    			return;

    		}

    		if ( currentBlendingEnabled === false ) {

    			enable( gl.BLEND );
    			currentBlendingEnabled = true;

    		}

    		if ( blending !== CustomBlending ) {

    			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

    				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

    					gl.blendEquation( gl.FUNC_ADD );

    					currentBlendEquation = AddEquation;
    					currentBlendEquationAlpha = AddEquation;

    				}

    				if ( premultipliedAlpha ) {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
    							break;

    						case AdditiveBlending:
    							gl.blendFunc( gl.ONE, gl.ONE );
    							break;

    						case SubtractiveBlending:
    							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
    							break;

    						case MultiplyBlending:
    							gl.blendFuncSeparate( gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				} else {

    					switch ( blending ) {

    						case NormalBlending:
    							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
    							break;

    						case AdditiveBlending:
    							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE );
    							break;

    						case SubtractiveBlending:
    							console.error( 'THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true' );
    							break;

    						case MultiplyBlending:
    							console.error( 'THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true' );
    							break;

    						default:
    							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
    							break;

    					}

    				}

    				currentBlendSrc = null;
    				currentBlendDst = null;
    				currentBlendSrcAlpha = null;
    				currentBlendDstAlpha = null;
    				currentBlendColor.set( 0, 0, 0 );
    				currentBlendAlpha = 0;

    				currentBlending = blending;
    				currentPremultipledAlpha = premultipliedAlpha;

    			}

    			return;

    		}

    		// custom blending

    		blendEquationAlpha = blendEquationAlpha || blendEquation;
    		blendSrcAlpha = blendSrcAlpha || blendSrc;
    		blendDstAlpha = blendDstAlpha || blendDst;

    		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

    			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

    			currentBlendEquation = blendEquation;
    			currentBlendEquationAlpha = blendEquationAlpha;

    		}

    		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

    			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

    			currentBlendSrc = blendSrc;
    			currentBlendDst = blendDst;
    			currentBlendSrcAlpha = blendSrcAlpha;
    			currentBlendDstAlpha = blendDstAlpha;

    		}

    		if ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {

    			gl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );

    			currentBlendColor.copy( blendColor );
    			currentBlendAlpha = blendAlpha;

    		}

    		currentBlending = blending;
    		currentPremultipledAlpha = false;

    	}

    	function setMaterial( material, frontFaceCW ) {

    		material.side === DoubleSide
    			? disable( gl.CULL_FACE )
    			: enable( gl.CULL_FACE );

    		let flipSided = ( material.side === BackSide );
    		if ( frontFaceCW ) flipSided = ! flipSided;

    		setFlipSided( flipSided );

    		( material.blending === NormalBlending && material.transparent === false )
    			? setBlending( NoBlending )
    			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );

    		depthBuffer.setFunc( material.depthFunc );
    		depthBuffer.setTest( material.depthTest );
    		depthBuffer.setMask( material.depthWrite );
    		colorBuffer.setMask( material.colorWrite );

    		const stencilWrite = material.stencilWrite;
    		stencilBuffer.setTest( stencilWrite );
    		if ( stencilWrite ) {

    			stencilBuffer.setMask( material.stencilWriteMask );
    			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
    			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

    		}

    		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

    		material.alphaToCoverage === true
    			? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
    			: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

    	}

    	//

    	function setFlipSided( flipSided ) {

    		if ( currentFlipSided !== flipSided ) {

    			if ( flipSided ) {

    				gl.frontFace( gl.CW );

    			} else {

    				gl.frontFace( gl.CCW );

    			}

    			currentFlipSided = flipSided;

    		}

    	}

    	function setCullFace( cullFace ) {

    		if ( cullFace !== CullFaceNone ) {

    			enable( gl.CULL_FACE );

    			if ( cullFace !== currentCullFace ) {

    				if ( cullFace === CullFaceBack ) {

    					gl.cullFace( gl.BACK );

    				} else if ( cullFace === CullFaceFront ) {

    					gl.cullFace( gl.FRONT );

    				} else {

    					gl.cullFace( gl.FRONT_AND_BACK );

    				}

    			}

    		} else {

    			disable( gl.CULL_FACE );

    		}

    		currentCullFace = cullFace;

    	}

    	function setLineWidth( width ) {

    		if ( width !== currentLineWidth ) {

    			if ( lineWidthAvailable ) gl.lineWidth( width );

    			currentLineWidth = width;

    		}

    	}

    	function setPolygonOffset( polygonOffset, factor, units ) {

    		if ( polygonOffset ) {

    			enable( gl.POLYGON_OFFSET_FILL );

    			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

    				gl.polygonOffset( factor, units );

    				currentPolygonOffsetFactor = factor;
    				currentPolygonOffsetUnits = units;

    			}

    		} else {

    			disable( gl.POLYGON_OFFSET_FILL );

    		}

    	}

    	function setScissorTest( scissorTest ) {

    		if ( scissorTest ) {

    			enable( gl.SCISSOR_TEST );

    		} else {

    			disable( gl.SCISSOR_TEST );

    		}

    	}

    	// texture

    	function activeTexture( webglSlot ) {

    		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

    		if ( currentTextureSlot !== webglSlot ) {

    			gl.activeTexture( webglSlot );
    			currentTextureSlot = webglSlot;

    		}

    	}

    	function bindTexture( webglType, webglTexture, webglSlot ) {

    		if ( webglSlot === undefined ) {

    			if ( currentTextureSlot === null ) {

    				webglSlot = gl.TEXTURE0 + maxTextures - 1;

    			} else {

    				webglSlot = currentTextureSlot;

    			}

    		}

    		let boundTexture = currentBoundTextures[ webglSlot ];

    		if ( boundTexture === undefined ) {

    			boundTexture = { type: undefined, texture: undefined };
    			currentBoundTextures[ webglSlot ] = boundTexture;

    		}

    		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

    			if ( currentTextureSlot !== webglSlot ) {

    				gl.activeTexture( webglSlot );
    				currentTextureSlot = webglSlot;

    			}

    			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

    			boundTexture.type = webglType;
    			boundTexture.texture = webglTexture;

    		}

    	}

    	function unbindTexture() {

    		const boundTexture = currentBoundTextures[ currentTextureSlot ];

    		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

    			gl.bindTexture( boundTexture.type, null );

    			boundTexture.type = undefined;
    			boundTexture.texture = undefined;

    		}

    	}

    	function compressedTexImage2D() {

    		try {

    			gl.compressedTexImage2D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function compressedTexImage3D() {

    		try {

    			gl.compressedTexImage3D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texSubImage2D() {

    		try {

    			gl.texSubImage2D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texSubImage3D() {

    		try {

    			gl.texSubImage3D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function compressedTexSubImage2D() {

    		try {

    			gl.compressedTexSubImage2D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function compressedTexSubImage3D() {

    		try {

    			gl.compressedTexSubImage3D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texStorage2D() {

    		try {

    			gl.texStorage2D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texStorage3D() {

    		try {

    			gl.texStorage3D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage2D() {

    		try {

    			gl.texImage2D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	function texImage3D() {

    		try {

    			gl.texImage3D( ...arguments );

    		} catch ( error ) {

    			console.error( 'THREE.WebGLState:', error );

    		}

    	}

    	//

    	function scissor( scissor ) {

    		if ( currentScissor.equals( scissor ) === false ) {

    			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
    			currentScissor.copy( scissor );

    		}

    	}

    	function viewport( viewport ) {

    		if ( currentViewport.equals( viewport ) === false ) {

    			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
    			currentViewport.copy( viewport );

    		}

    	}

    	function updateUBOMapping( uniformsGroup, program ) {

    		let mapping = uboProgramMap.get( program );

    		if ( mapping === undefined ) {

    			mapping = new WeakMap();

    			uboProgramMap.set( program, mapping );

    		}

    		let blockIndex = mapping.get( uniformsGroup );

    		if ( blockIndex === undefined ) {

    			blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );

    			mapping.set( uniformsGroup, blockIndex );

    		}

    	}

    	function uniformBlockBinding( uniformsGroup, program ) {

    		const mapping = uboProgramMap.get( program );
    		const blockIndex = mapping.get( uniformsGroup );

    		if ( uboBindings.get( program ) !== blockIndex ) {

    			// bind shader specific block index to global block point
    			gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );

    			uboBindings.set( program, blockIndex );

    		}

    	}

    	//

    	function reset() {

    		// reset state

    		gl.disable( gl.BLEND );
    		gl.disable( gl.CULL_FACE );
    		gl.disable( gl.DEPTH_TEST );
    		gl.disable( gl.POLYGON_OFFSET_FILL );
    		gl.disable( gl.SCISSOR_TEST );
    		gl.disable( gl.STENCIL_TEST );
    		gl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

    		gl.blendEquation( gl.FUNC_ADD );
    		gl.blendFunc( gl.ONE, gl.ZERO );
    		gl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );
    		gl.blendColor( 0, 0, 0, 0 );

    		gl.colorMask( true, true, true, true );
    		gl.clearColor( 0, 0, 0, 0 );

    		gl.depthMask( true );
    		gl.depthFunc( gl.LESS );

    		depthBuffer.setReversed( false );

    		gl.clearDepth( 1 );

    		gl.stencilMask( 0xffffffff );
    		gl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );
    		gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );
    		gl.clearStencil( 0 );

    		gl.cullFace( gl.BACK );
    		gl.frontFace( gl.CCW );

    		gl.polygonOffset( 0, 0 );

    		gl.activeTexture( gl.TEXTURE0 );

    		gl.bindFramebuffer( gl.FRAMEBUFFER, null );
    		gl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );
    		gl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );

    		gl.useProgram( null );

    		gl.lineWidth( 1 );

    		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
    		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

    		// reset internals

    		enabledCapabilities = {};

    		currentTextureSlot = null;
    		currentBoundTextures = {};

    		currentBoundFramebuffers = {};
    		currentDrawbuffers = new WeakMap();
    		defaultDrawbuffers = [];

    		currentProgram = null;

    		currentBlendingEnabled = false;
    		currentBlending = null;
    		currentBlendEquation = null;
    		currentBlendSrc = null;
    		currentBlendDst = null;
    		currentBlendEquationAlpha = null;
    		currentBlendSrcAlpha = null;
    		currentBlendDstAlpha = null;
    		currentBlendColor = new Color( 0, 0, 0 );
    		currentBlendAlpha = 0;
    		currentPremultipledAlpha = false;

    		currentFlipSided = null;
    		currentCullFace = null;

    		currentLineWidth = null;

    		currentPolygonOffsetFactor = null;
    		currentPolygonOffsetUnits = null;

    		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
    		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

    		colorBuffer.reset();
    		depthBuffer.reset();
    		stencilBuffer.reset();

    	}

    	return {

    		buffers: {
    			color: colorBuffer,
    			depth: depthBuffer,
    			stencil: stencilBuffer
    		},

    		enable: enable,
    		disable: disable,

    		bindFramebuffer: bindFramebuffer,
    		drawBuffers: drawBuffers,

    		useProgram: useProgram,

    		setBlending: setBlending,
    		setMaterial: setMaterial,

    		setFlipSided: setFlipSided,
    		setCullFace: setCullFace,

    		setLineWidth: setLineWidth,
    		setPolygonOffset: setPolygonOffset,

    		setScissorTest: setScissorTest,

    		activeTexture: activeTexture,
    		bindTexture: bindTexture,
    		unbindTexture: unbindTexture,
    		compressedTexImage2D: compressedTexImage2D,
    		compressedTexImage3D: compressedTexImage3D,
    		texImage2D: texImage2D,
    		texImage3D: texImage3D,

    		updateUBOMapping: updateUBOMapping,
    		uniformBlockBinding: uniformBlockBinding,

    		texStorage2D: texStorage2D,
    		texStorage3D: texStorage3D,
    		texSubImage2D: texSubImage2D,
    		texSubImage3D: texSubImage3D,
    		compressedTexSubImage2D: compressedTexSubImage2D,
    		compressedTexSubImage3D: compressedTexSubImage3D,

    		scissor: scissor,
    		viewport: viewport,

    		reset: reset

    	};

    }

    function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

    	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
    	const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );

    	const _imageDimensions = new Vector2();
    	const _videoTextures = new WeakMap();
    	let _canvas;

    	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

    	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

    	let useOffscreenCanvas = false;

    	try {

    		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
    			// eslint-disable-next-line compat/compat
    			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

    	} catch ( err ) {

    		// Ignore any errors

    	}

    	function createCanvas( width, height ) {

    		// Use OffscreenCanvas when available. Specially needed in web workers

    		return useOffscreenCanvas ?
    			// eslint-disable-next-line compat/compat
    			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

    	}

    	function resizeImage( image, needsNewCanvas, maxSize ) {

    		let scale = 1;

    		const dimensions = getDimensions( image );

    		// handle case if texture exceeds max size

    		if ( dimensions.width > maxSize || dimensions.height > maxSize ) {

    			scale = maxSize / Math.max( dimensions.width, dimensions.height );

    		}

    		// only perform resize if necessary

    		if ( scale < 1 ) {

    			// only perform resize for certain image types

    			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
    				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
    				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||
    				( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {

    				const width = Math.floor( scale * dimensions.width );
    				const height = Math.floor( scale * dimensions.height );

    				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

    				// cube textures can't reuse the same canvas

    				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

    				canvas.width = width;
    				canvas.height = height;

    				const context = canvas.getContext( '2d' );
    				context.drawImage( image, 0, 0, width, height );

    				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );

    				return canvas;

    			} else {

    				if ( 'data' in image ) {

    					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );

    				}

    				return image;

    			}

    		}

    		return image;

    	}

    	function textureNeedsGenerateMipmaps( texture ) {

    		return texture.generateMipmaps;

    	}

    	function generateMipmap( target ) {

    		_gl.generateMipmap( target );

    	}

    	function getTargetType( texture ) {

    		if ( texture.isWebGLCubeRenderTarget ) return _gl.TEXTURE_CUBE_MAP;
    		if ( texture.isWebGL3DRenderTarget ) return _gl.TEXTURE_3D;
    		if ( texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture ) return _gl.TEXTURE_2D_ARRAY;
    		return _gl.TEXTURE_2D;

    	}

    	function getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

    		if ( internalFormatName !== null ) {

    			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

    			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

    		}

    		let internalFormat = glFormat;

    		if ( glFormat === _gl.RED ) {

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

    		}

    		if ( glFormat === _gl.RED_INTEGER ) {

    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;
    			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;
    			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;
    			if ( glType === _gl.BYTE ) internalFormat = _gl.R8I;
    			if ( glType === _gl.SHORT ) internalFormat = _gl.R16I;
    			if ( glType === _gl.INT ) internalFormat = _gl.R32I;

    		}

    		if ( glFormat === _gl.RG ) {

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;

    		}

    		if ( glFormat === _gl.RG_INTEGER ) {

    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;
    			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;
    			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;
    			if ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;
    			if ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;
    			if ( glType === _gl.INT ) internalFormat = _gl.RG32I;

    		}

    		if ( glFormat === _gl.RGB_INTEGER ) {

    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8UI;
    			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGB16UI;
    			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGB32UI;
    			if ( glType === _gl.BYTE ) internalFormat = _gl.RGB8I;
    			if ( glType === _gl.SHORT ) internalFormat = _gl.RGB16I;
    			if ( glType === _gl.INT ) internalFormat = _gl.RGB32I;

    		}

    		if ( glFormat === _gl.RGBA_INTEGER ) {

    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8UI;
    			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGBA16UI;
    			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGBA32UI;
    			if ( glType === _gl.BYTE ) internalFormat = _gl.RGBA8I;
    			if ( glType === _gl.SHORT ) internalFormat = _gl.RGBA16I;
    			if ( glType === _gl.INT ) internalFormat = _gl.RGBA32I;

    		}

    		if ( glFormat === _gl.RGB ) {

    			if ( glType === _gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = _gl.RGB9_E5;

    		}

    		if ( glFormat === _gl.RGBA ) {

    			const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );

    			if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
    			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
    			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
    			if ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;
    			if ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;

    		}

    		if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
    			internalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||
    			internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

    			extensions.get( 'EXT_color_buffer_float' );

    		}

    		return internalFormat;

    	}

    	function getInternalDepthFormat( useStencil, depthType ) {

    		let glInternalFormat;
    		if ( useStencil ) {

    			if ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {

    				glInternalFormat = _gl.DEPTH24_STENCIL8;

    			} else if ( depthType === FloatType ) {

    				glInternalFormat = _gl.DEPTH32F_STENCIL8;

    			} else if ( depthType === UnsignedShortType ) {

    				glInternalFormat = _gl.DEPTH24_STENCIL8;
    				console.warn( 'DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.' );

    			}

    		} else {

    			if ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {

    				glInternalFormat = _gl.DEPTH_COMPONENT24;

    			} else if ( depthType === FloatType ) {

    				glInternalFormat = _gl.DEPTH_COMPONENT32F;

    			} else if ( depthType === UnsignedShortType ) {

    				glInternalFormat = _gl.DEPTH_COMPONENT16;

    			}

    		}

    		return glInternalFormat;

    	}

    	function getMipLevels( texture, image ) {

    		if ( textureNeedsGenerateMipmaps( texture ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {

    			return Math.log2( Math.max( image.width, image.height ) ) + 1;

    		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

    			// user-defined mipmaps

    			return texture.mipmaps.length;

    		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

    			return image.mipmaps.length;

    		} else {

    			// texture without mipmaps (only base level)

    			return 1;

    		}

    	}

    	//

    	function onTextureDispose( event ) {

    		const texture = event.target;

    		texture.removeEventListener( 'dispose', onTextureDispose );

    		deallocateTexture( texture );

    		if ( texture.isVideoTexture ) {

    			_videoTextures.delete( texture );

    		}

    	}

    	function onRenderTargetDispose( event ) {

    		const renderTarget = event.target;

    		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

    		deallocateRenderTarget( renderTarget );

    	}

    	//

    	function deallocateTexture( texture ) {

    		const textureProperties = properties.get( texture );

    		if ( textureProperties.__webglInit === undefined ) return;

    		// check if it's necessary to remove the WebGLTexture object

    		const source = texture.source;
    		const webglTextures = _sources.get( source );

    		if ( webglTextures ) {

    			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
    			webglTexture.usedTimes --;

    			// the WebGLTexture object is not used anymore, remove it

    			if ( webglTexture.usedTimes === 0 ) {

    				deleteTexture( texture );

    			}

    			// remove the weak map entry if no WebGLTexture uses the source anymore

    			if ( Object.keys( webglTextures ).length === 0 ) {

    				_sources.delete( source );

    			}

    		}

    		properties.remove( texture );

    	}

    	function deleteTexture( texture ) {

    		const textureProperties = properties.get( texture );
    		_gl.deleteTexture( textureProperties.__webglTexture );

    		const source = texture.source;
    		const webglTextures = _sources.get( source );
    		delete webglTextures[ textureProperties.__cacheKey ];

    		info.memory.textures --;

    	}

    	function deallocateRenderTarget( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		if ( renderTarget.depthTexture ) {

    			renderTarget.depthTexture.dispose();

    			properties.remove( renderTarget.depthTexture );

    		}

    		if ( renderTarget.isWebGLCubeRenderTarget ) {

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {

    					for ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );

    				} else {

    					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );

    				}

    				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

    			}

    		} else {

    			if ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {

    				for ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );

    			} else {

    				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );

    			}

    			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
    			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

    			if ( renderTargetProperties.__webglColorRenderbuffer ) {

    				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

    					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

    				}

    			}

    			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

    		}

    		const textures = renderTarget.textures;

    		for ( let i = 0, il = textures.length; i < il; i ++ ) {

    			const attachmentProperties = properties.get( textures[ i ] );

    			if ( attachmentProperties.__webglTexture ) {

    				_gl.deleteTexture( attachmentProperties.__webglTexture );

    				info.memory.textures --;

    			}

    			properties.remove( textures[ i ] );

    		}

    		properties.remove( renderTarget );

    	}

    	//

    	let textureUnits = 0;

    	function resetTextureUnits() {

    		textureUnits = 0;

    	}

    	function allocateTextureUnit() {

    		const textureUnit = textureUnits;

    		if ( textureUnit >= capabilities.maxTextures ) {

    			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

    		}

    		textureUnits += 1;

    		return textureUnit;

    	}

    	function getTextureCacheKey( texture ) {

    		const array = [];

    		array.push( texture.wrapS );
    		array.push( texture.wrapT );
    		array.push( texture.wrapR || 0 );
    		array.push( texture.magFilter );
    		array.push( texture.minFilter );
    		array.push( texture.anisotropy );
    		array.push( texture.internalFormat );
    		array.push( texture.format );
    		array.push( texture.type );
    		array.push( texture.generateMipmaps );
    		array.push( texture.premultiplyAlpha );
    		array.push( texture.flipY );
    		array.push( texture.unpackAlignment );
    		array.push( texture.colorSpace );

    		return array.join();

    	}

    	//

    	function setTexture2D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.isVideoTexture ) updateVideoTexture( texture );

    		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

    			const image = texture.image;

    			if ( image === null ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

    			} else if ( image.complete === false ) {

    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

    			} else {

    				uploadTexture( textureProperties, texture, slot );
    				return;

    			}

    		}

    		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    	}

    	function setTexture2DArray( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    	}

    	function setTexture3D( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    	}

    	function setTextureCube( texture, slot ) {

    		const textureProperties = properties.get( texture );

    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

    			uploadCubeTexture( textureProperties, texture, slot );
    			return;

    		}

    		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    	}

    	const wrappingToGL = {
    		[ RepeatWrapping ]: _gl.REPEAT,
    		[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,
    		[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT
    	};

    	const filterToGL = {
    		[ NearestFilter ]: _gl.NEAREST,
    		[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,
    		[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,

    		[ LinearFilter ]: _gl.LINEAR,
    		[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,
    		[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR
    	};

    	const compareToGL = {
    		[ NeverCompare ]: _gl.NEVER,
    		[ AlwaysCompare ]: _gl.ALWAYS,
    		[ LessCompare ]: _gl.LESS,
    		[ LessEqualCompare ]: _gl.LEQUAL,
    		[ EqualCompare ]: _gl.EQUAL,
    		[ GreaterEqualCompare ]: _gl.GEQUAL,
    		[ GreaterCompare ]: _gl.GREATER,
    		[ NotEqualCompare ]: _gl.NOTEQUAL
    	};

    	function setTextureParameters( textureType, texture ) {

    		if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false &&
    			( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||
    			texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter ) ) {

    			console.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );

    		}

    		_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
    		_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

    		if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

    		}

    		_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
    		_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

    		if ( texture.compareFunction ) {

    			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );
    			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

    		}

    		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

    			if ( texture.magFilter === NearestFilter ) return;
    			if ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;
    			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension

    			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

    				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
    				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
    				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

    			}

    		}

    	}

    	function initTexture( textureProperties, texture ) {

    		let forceUpload = false;

    		if ( textureProperties.__webglInit === undefined ) {

    			textureProperties.__webglInit = true;

    			texture.addEventListener( 'dispose', onTextureDispose );

    		}

    		// create Source <-> WebGLTextures mapping if necessary

    		const source = texture.source;
    		let webglTextures = _sources.get( source );

    		if ( webglTextures === undefined ) {

    			webglTextures = {};
    			_sources.set( source, webglTextures );

    		}

    		// check if there is already a WebGLTexture object for the given texture parameters

    		const textureCacheKey = getTextureCacheKey( texture );

    		if ( textureCacheKey !== textureProperties.__cacheKey ) {

    			// if not, create a new instance of WebGLTexture

    			if ( webglTextures[ textureCacheKey ] === undefined ) {

    				// create new entry

    				webglTextures[ textureCacheKey ] = {
    					texture: _gl.createTexture(),
    					usedTimes: 0
    				};

    				info.memory.textures ++;

    				// when a new instance of WebGLTexture was created, a texture upload is required
    				// even if the image contents are identical

    				forceUpload = true;

    			}

    			webglTextures[ textureCacheKey ].usedTimes ++;

    			// every time the texture cache key changes, it's necessary to check if an instance of
    			// WebGLTexture can be deleted in order to avoid a memory leak.

    			const webglTexture = webglTextures[ textureProperties.__cacheKey ];

    			if ( webglTexture !== undefined ) {

    				webglTextures[ textureProperties.__cacheKey ].usedTimes --;

    				if ( webglTexture.usedTimes === 0 ) {

    					deleteTexture( texture );

    				}

    			}

    			// store references to cache key and WebGLTexture object

    			textureProperties.__cacheKey = textureCacheKey;
    			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

    		}

    		return forceUpload;

    	}

    	function getRow( index, rowLength, componentStride ) {

    		return Math.floor( Math.floor( index / componentStride ) / rowLength );

    	}

    	function updateTexture( texture, image, glFormat, glType ) {

    		const componentStride = 4; // only RGBA supported

    		const updateRanges = texture.updateRanges;

    		if ( updateRanges.length === 0 ) {

    			state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

    		} else {

    			// Before applying update ranges, we merge any adjacent / overlapping
    			// ranges to reduce load on `gl.texSubImage2D`. Empirically, this has led
    			// to performance improvements for applications which make heavy use of
    			// update ranges. Likely due to GPU command overhead.
    			//
    			// Note that to reduce garbage collection between frames, we merge the
    			// update ranges in-place. This is safe because this method will clear the
    			// update ranges once updated.

    			updateRanges.sort( ( a, b ) => a.start - b.start );

    			// To merge the update ranges in-place, we work from left to right in the
    			// existing updateRanges array, merging ranges. This may result in a final
    			// array which is smaller than the original. This index tracks the last
    			// index representing a merged range, any data after this index can be
    			// trimmed once the merge algorithm is completed.
    			let mergeIndex = 0;

    			for ( let i = 1; i < updateRanges.length; i ++ ) {

    				const previousRange = updateRanges[ mergeIndex ];
    				const range = updateRanges[ i ];

    				// Only merge if in the same row and overlapping/adjacent
    				const previousEnd = previousRange.start + previousRange.count;
    				const currentRow = getRow( range.start, image.width, componentStride );
    				const previousRow = getRow( previousRange.start, image.width, componentStride );

    				// We add one here to merge adjacent ranges. This is safe because ranges
    				// operate over positive integers.
    				if (
    					range.start <= previousEnd + 1 &&
    					currentRow === previousRow &&
    					getRow( range.start + range.count - 1, image.width, componentStride ) === currentRow // ensure range doesn't spill
    				) {

    					previousRange.count = Math.max(
    						previousRange.count,
    						range.start + range.count - previousRange.start
    					);

    				} else {

    					++ mergeIndex;
    					updateRanges[ mergeIndex ] = range;

    				}


    			}

    			// Trim the array to only contain the merged ranges.
    			updateRanges.length = mergeIndex + 1;

    			const currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
    			const currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
    			const currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );

    			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );

    			for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

    				const range = updateRanges[ i ];

    				const pixelStart = Math.floor( range.start / componentStride );
    				const pixelCount = Math.ceil( range.count / componentStride );

    				const x = pixelStart % image.width;
    				const y = Math.floor( pixelStart / image.width );

    				// Assumes update ranges refer to contiguous memory
    				const width = pixelCount;
    				const height = 1;

    				_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, x );
    				_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, y );

    				state.texSubImage2D( _gl.TEXTURE_2D, 0, x, y, width, height, glFormat, glType, image.data );

    			}

    			texture.clearUpdateRanges();

    			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );

    		}

    	}

    	function uploadTexture( textureProperties, texture, slot ) {

    		let textureType = _gl.TEXTURE_2D;

    		if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;
    		if ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;

    		const forceUpload = initTexture( textureProperties, texture );
    		const source = texture.source;

    		state.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    		const sourceProperties = properties.get( source );

    		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

    			state.activeTexture( _gl.TEXTURE0 + slot );

    			const workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );
    			const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );
    			const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

    			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
    			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
    			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
    			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

    			let image = resizeImage( texture.image, false, capabilities.maxTextureSize );
    			image = verifyColorSpace( texture, image );

    			const glFormat = utils.convert( texture.format, texture.colorSpace );

    			const glType = utils.convert( texture.type );
    			let glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

    			setTextureParameters( textureType, texture );

    			let mipmap;
    			const mipmaps = texture.mipmaps;

    			const useTexStorage = ( texture.isVideoTexture !== true );
    			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
    			const dataReady = source.dataReady;
    			const levels = getMipLevels( texture, image );

    			if ( texture.isDepthTexture ) {

    				glInternalFormat = getInternalDepthFormat( texture.format === DepthStencilFormat, texture.type );

    				//

    				if ( allocateMemory ) {

    					if ( useTexStorage ) {

    						state.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );

    					} else {

    						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

    					}

    				}

    			} else if ( texture.isDataTexture ) {

    				// use manually created mipmaps if available
    				// if there are no manual mipmaps
    				// set 0 level mipmap and then use GL to generate other mipmap levels

    				if ( mipmaps.length > 0 ) {

    					if ( useTexStorage && allocateMemory ) {

    						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( useTexStorage ) {

    							if ( dataReady ) {

    								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    							}

    						} else {

    							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    						}

    					}

    					texture.generateMipmaps = false;

    				} else {

    					if ( useTexStorage ) {

    						if ( allocateMemory ) {

    							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

    						}

    						if ( dataReady ) {

    							updateTexture( texture, image, glFormat, glType );

    						}

    					} else {

    						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

    					}

    				}

    			} else if ( texture.isCompressedTexture ) {

    				if ( texture.isCompressedArrayTexture ) {

    					if ( useTexStorage && allocateMemory ) {

    						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( texture.format !== RGBAFormat ) {

    							if ( glFormat !== null ) {

    								if ( useTexStorage ) {

    									if ( dataReady ) {

    										if ( texture.layerUpdates.size > 0 ) {

    											const layerByteLength = getByteLength( mipmap.width, mipmap.height, texture.format, texture.type );

    											for ( const layerIndex of texture.layerUpdates ) {

    												const layerData = mipmap.data.subarray(
    													layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
    													( layerIndex + 1 ) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
    												);
    												state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData );

    											}

    											texture.clearLayerUpdates();

    										} else {

    											state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );

    										}

    									}

    								} else {

    									state.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );

    								}

    							} else {

    								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

    							}

    						} else {

    							if ( useTexStorage ) {

    								if ( dataReady ) {

    									state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

    								}

    							} else {

    								state.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );

    							}

    						}

    					}

    				} else {

    					if ( useTexStorage && allocateMemory ) {

    						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( texture.format !== RGBAFormat ) {

    							if ( glFormat !== null ) {

    								if ( useTexStorage ) {

    									if ( dataReady ) {

    										state.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

    									}

    								} else {

    									state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    								}

    							} else {

    								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

    							}

    						} else {

    							if ( useTexStorage ) {

    								if ( dataReady ) {

    									state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    								}

    							} else {

    								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    							}

    						}

    					}

    				}

    			} else if ( texture.isDataArrayTexture ) {

    				if ( useTexStorage ) {

    					if ( allocateMemory ) {

    						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );

    					}

    					if ( dataReady ) {

    						if ( texture.layerUpdates.size > 0 ) {

    							const layerByteLength = getByteLength( image.width, image.height, texture.format, texture.type );

    							for ( const layerIndex of texture.layerUpdates ) {

    								const layerData = image.data.subarray(
    									layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
    									( layerIndex + 1 ) * layerByteLength / image.data.BYTES_PER_ELEMENT
    								);
    								state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData );

    							}

    							texture.clearLayerUpdates();

    						} else {

    							state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

    						}

    					}

    				} else {

    					state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

    				}

    			} else if ( texture.isData3DTexture ) {

    				if ( useTexStorage ) {

    					if ( allocateMemory ) {

    						state.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );

    					}

    					if ( dataReady ) {

    						state.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

    					}

    				} else {

    					state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

    				}

    			} else if ( texture.isFramebufferTexture ) {

    				if ( allocateMemory ) {

    					if ( useTexStorage ) {

    						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

    					} else {

    						let width = image.width, height = image.height;

    						for ( let i = 0; i < levels; i ++ ) {

    							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );

    							width >>= 1;
    							height >>= 1;

    						}

    					}

    				}

    			} else {

    				// regular Texture (image, video, canvas)

    				// use manually created mipmaps if available
    				// if there are no manual mipmaps
    				// set 0 level mipmap and then use GL to generate other mipmap levels

    				if ( mipmaps.length > 0 ) {

    					if ( useTexStorage && allocateMemory ) {

    						const dimensions = getDimensions( mipmaps[ 0 ] );

    						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

    					}

    					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

    						mipmap = mipmaps[ i ];

    						if ( useTexStorage ) {

    							if ( dataReady ) {

    								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );

    							}

    						} else {

    							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

    						}

    					}

    					texture.generateMipmaps = false;

    				} else {

    					if ( useTexStorage ) {

    						if ( allocateMemory ) {

    							const dimensions = getDimensions( image );

    							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

    						}

    						if ( dataReady ) {

    							state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );

    						}

    					} else {

    						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );

    					}

    				}

    			}

    			if ( textureNeedsGenerateMipmaps( texture ) ) {

    				generateMipmap( textureType );

    			}

    			sourceProperties.__version = source.version;

    			if ( texture.onUpdate ) texture.onUpdate( texture );

    		}

    		textureProperties.__version = texture.version;

    	}

    	function uploadCubeTexture( textureProperties, texture, slot ) {

    		if ( texture.image.length !== 6 ) return;

    		const forceUpload = initTexture( textureProperties, texture );
    		const source = texture.source;

    		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

    		const sourceProperties = properties.get( source );

    		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

    			state.activeTexture( _gl.TEXTURE0 + slot );

    			const workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );
    			const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );
    			const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

    			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
    			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
    			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
    			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

    			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
    			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

    			const cubeImage = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( ! isCompressed && ! isDataTexture ) {

    					cubeImage[ i ] = resizeImage( texture.image[ i ], true, capabilities.maxCubemapSize );

    				} else {

    					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

    				}

    				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

    			}

    			const image = cubeImage[ 0 ],
    				glFormat = utils.convert( texture.format, texture.colorSpace ),
    				glType = utils.convert( texture.type ),
    				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );

    			const useTexStorage = ( texture.isVideoTexture !== true );
    			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
    			const dataReady = source.dataReady;
    			let levels = getMipLevels( texture, image );

    			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );

    			let mipmaps;

    			if ( isCompressed ) {

    				if ( useTexStorage && allocateMemory ) {

    					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );

    				}

    				for ( let i = 0; i < 6; i ++ ) {

    					mipmaps = cubeImage[ i ].mipmaps;

    					for ( let j = 0; j < mipmaps.length; j ++ ) {

    						const mipmap = mipmaps[ j ];

    						if ( texture.format !== RGBAFormat ) {

    							if ( glFormat !== null ) {

    								if ( useTexStorage ) {

    									if ( dataReady ) {

    										state.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

    									}

    								} else {

    									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

    								}

    							} else {

    								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

    							}

    						} else {

    							if ( useTexStorage ) {

    								if ( dataReady ) {

    									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

    								}

    							} else {

    								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

    							}

    						}

    					}

    				}

    			} else {

    				mipmaps = texture.mipmaps;

    				if ( useTexStorage && allocateMemory ) {

    					// TODO: Uniformly handle mipmap definitions
    					// Normal textures and compressed cube textures define base level + mips with their mipmap array
    					// Uncompressed cube textures use their mipmap array only for mips (no base level)

    					if ( mipmaps.length > 0 ) levels ++;

    					const dimensions = getDimensions( cubeImage[ 0 ] );

    					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );

    				}

    				for ( let i = 0; i < 6; i ++ ) {

    					if ( isDataTexture ) {

    						if ( useTexStorage ) {

    							if ( dataReady ) {

    								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

    							}

    						} else {

    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

    						}

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];
    							const mipmapImage = mipmap.image[ i ].image;

    							if ( useTexStorage ) {

    								if ( dataReady ) {

    									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

    								}

    							} else {

    								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

    							}

    						}

    					} else {

    						if ( useTexStorage ) {

    							if ( dataReady ) {

    								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

    							}

    						} else {

    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

    						}

    						for ( let j = 0; j < mipmaps.length; j ++ ) {

    							const mipmap = mipmaps[ j ];

    							if ( useTexStorage ) {

    								if ( dataReady ) {

    									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

    								}

    							} else {

    								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

    							}

    						}

    					}

    				}

    			}

    			if ( textureNeedsGenerateMipmaps( texture ) ) {

    				// We assume images for cube map have the same size.
    				generateMipmap( _gl.TEXTURE_CUBE_MAP );

    			}

    			sourceProperties.__version = source.version;

    			if ( texture.onUpdate ) texture.onUpdate( texture );

    		}

    		textureProperties.__version = texture.version;

    	}

    	// Render targets

    	// Setup storage for target texture and bind it to correct framebuffer
    	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {

    		const glFormat = utils.convert( texture.format, texture.colorSpace );
    		const glType = utils.convert( texture.type );
    		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( texture );

    		textureProperties.__renderTarget = renderTarget;

    		if ( ! renderTargetProperties.__hasExternalTextures ) {

    			const width = Math.max( 1, renderTarget.width >> level );
    			const height = Math.max( 1, renderTarget.height >> level );

    			if ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {

    				state.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );

    			} else {

    				state.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );

    			}

    		}

    		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    		if ( useMultisampledRTT( renderTarget ) ) {

    			multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

    		} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753

    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level );

    		}

    		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

    	}

    	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

    		if ( renderTarget.depthBuffer ) {

    			// retrieve the depth attachment types
    			const depthTexture = renderTarget.depthTexture;
    			const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
    			const glInternalFormat = getInternalDepthFormat( renderTarget.stencilBuffer, depthType );
    			const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;

    			// set up the attachment
    			const samples = getRenderTargetSamples( renderTarget );
    			const isUseMultisampledRTT = useMultisampledRTT( renderTarget );
    			if ( isUseMultisampledRTT ) {

    				multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    			} else if ( isMultisample ) {

    				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    			} else {

    				_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

    			}

    			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

    		} else {

    			const textures = renderTarget.textures;

    			for ( let i = 0; i < textures.length; i ++ ) {

    				const texture = textures[ i ];

    				const glFormat = utils.convert( texture.format, texture.colorSpace );
    				const glType = utils.convert( texture.type );
    				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
    				const samples = getRenderTargetSamples( renderTarget );

    				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

    					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				} else if ( useMultisampledRTT( renderTarget ) ) {

    					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    				} else {

    					_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

    				}

    			}

    		}

    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

    	}

    	// Setup resources for a Depth Texture for a FBO (needs an extension)
    	function setupDepthTexture( framebuffer, renderTarget ) {

    		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
    		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

    		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

    			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

    		}

    		const textureProperties = properties.get( renderTarget.depthTexture );
    		textureProperties.__renderTarget = renderTarget;

    		// upload an empty depth texture with framebuffer size
    		if ( ! textureProperties.__webglTexture ||
    				renderTarget.depthTexture.image.width !== renderTarget.width ||
    				renderTarget.depthTexture.image.height !== renderTarget.height ) {

    			renderTarget.depthTexture.image.width = renderTarget.width;
    			renderTarget.depthTexture.image.height = renderTarget.height;
    			renderTarget.depthTexture.needsUpdate = true;

    		}

    		setTexture2D( renderTarget.depthTexture, 0 );

    		const webglDepthTexture = textureProperties.__webglTexture;
    		const samples = getRenderTargetSamples( renderTarget );

    		if ( renderTarget.depthTexture.format === DepthFormat ) {

    			if ( useMultisampledRTT( renderTarget ) ) {

    				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

    			} else {

    				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

    			}

    		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

    			if ( useMultisampledRTT( renderTarget ) ) {

    				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

    			} else {

    				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

    			}

    		} else {

    			throw new Error( 'Unknown depthTexture format' );

    		}

    	}

    	// Setup GL resources for a non-texture depth buffer
    	function setupDepthRenderbuffer( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );
    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

    		// if the bound depth texture has changed
    		if ( renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture ) {

    			// fire the dispose event to get rid of stored state associated with the previously bound depth buffer
    			const depthTexture = renderTarget.depthTexture;
    			if ( renderTargetProperties.__depthDisposeCallback ) {

    				renderTargetProperties.__depthDisposeCallback();

    			}

    			// set up dispose listeners to track when the currently attached buffer is implicitly unbound
    			if ( depthTexture ) {

    				const disposeEvent = () => {

    					delete renderTargetProperties.__boundDepthTexture;
    					delete renderTargetProperties.__depthDisposeCallback;
    					depthTexture.removeEventListener( 'dispose', disposeEvent );

    				};

    				depthTexture.addEventListener( 'dispose', disposeEvent );
    				renderTargetProperties.__depthDisposeCallback = disposeEvent;

    			}

    			renderTargetProperties.__boundDepthTexture = depthTexture;

    		}

    		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

    			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

    			const mipmaps = renderTarget.texture.mipmaps;

    			if ( mipmaps && mipmaps.length > 0 ) {

    				setupDepthTexture( renderTargetProperties.__webglFramebuffer[ 0 ], renderTarget );

    			} else {

    				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

    			}

    		} else {

    			if ( isCube ) {

    				renderTargetProperties.__webglDepthbuffer = [];

    				for ( let i = 0; i < 6; i ++ ) {

    					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );

    					if ( renderTargetProperties.__webglDepthbuffer[ i ] === undefined ) {

    						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
    						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

    					} else {

    						// attach buffer if it's been created already
    						const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
    						const renderbuffer = renderTargetProperties.__webglDepthbuffer[ i ];
    						_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
    						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

    					}

    				}

    			} else {

    				const mipmaps = renderTarget.texture.mipmaps;

    				if ( mipmaps && mipmaps.length > 0 ) {

    					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ 0 ] );

    				} else {

    					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

    				}

    				if ( renderTargetProperties.__webglDepthbuffer === undefined ) {

    					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
    					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

    				} else {

    					// attach buffer if it's been created already
    					const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
    					const renderbuffer = renderTargetProperties.__webglDepthbuffer;
    					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
    					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

    				}

    			}

    		}

    		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

    	}

    	// rebind framebuffer with external textures
    	function rebindTextures( renderTarget, colorTexture, depthTexture ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		if ( colorTexture !== undefined ) {

    			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );

    		}

    		if ( depthTexture !== undefined ) {

    			setupDepthRenderbuffer( renderTarget );

    		}

    	}

    	// Set up GL resources for the render target
    	function setupRenderTarget( renderTarget ) {

    		const texture = renderTarget.texture;

    		const renderTargetProperties = properties.get( renderTarget );
    		const textureProperties = properties.get( texture );

    		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

    		const textures = renderTarget.textures;

    		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
    		const isMultipleRenderTargets = ( textures.length > 1 );

    		if ( ! isMultipleRenderTargets ) {

    			if ( textureProperties.__webglTexture === undefined ) {

    				textureProperties.__webglTexture = _gl.createTexture();

    			}

    			textureProperties.__version = texture.version;
    			info.memory.textures ++;

    		}

    		// Setup framebuffer

    		if ( isCube ) {

    			renderTargetProperties.__webglFramebuffer = [];

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

    					renderTargetProperties.__webglFramebuffer[ i ] = [];

    					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

    						renderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();

    					}

    				} else {

    					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

    				}

    			}

    		} else {

    			if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

    				renderTargetProperties.__webglFramebuffer = [];

    				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

    					renderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();

    				}

    			} else {

    				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

    			}

    			if ( isMultipleRenderTargets ) {

    				for ( let i = 0, il = textures.length; i < il; i ++ ) {

    					const attachmentProperties = properties.get( textures[ i ] );

    					if ( attachmentProperties.__webglTexture === undefined ) {

    						attachmentProperties.__webglTexture = _gl.createTexture();

    						info.memory.textures ++;

    					}

    				}

    			}

    			if ( ( renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

    				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
    				renderTargetProperties.__webglColorRenderbuffer = [];

    				state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

    				for ( let i = 0; i < textures.length; i ++ ) {

    					const texture = textures[ i ];
    					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

    					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    					const glFormat = utils.convert( texture.format, texture.colorSpace );
    					const glType = utils.convert( texture.type );
    					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );
    					const samples = getRenderTargetSamples( renderTarget );
    					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

    					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    				}

    				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

    				if ( renderTarget.depthBuffer ) {

    					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
    					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

    				}

    				state.bindFramebuffer( _gl.FRAMEBUFFER, null );

    			}

    		}

    		// Setup color buffer

    		if ( isCube ) {

    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
    			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );

    			for ( let i = 0; i < 6; i ++ ) {

    				if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

    					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

    						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );

    					}

    				} else {

    					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );

    				}

    			}

    			if ( textureNeedsGenerateMipmaps( texture ) ) {

    				generateMipmap( _gl.TEXTURE_CUBE_MAP );

    			}

    			state.unbindTexture();

    		} else if ( isMultipleRenderTargets ) {

    			for ( let i = 0, il = textures.length; i < il; i ++ ) {

    				const attachment = textures[ i ];
    				const attachmentProperties = properties.get( attachment );

    				state.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );
    				setTextureParameters( _gl.TEXTURE_2D, attachment );
    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );

    				if ( textureNeedsGenerateMipmaps( attachment ) ) {

    					generateMipmap( _gl.TEXTURE_2D );

    				}

    			}

    			state.unbindTexture();

    		} else {

    			let glTextureType = _gl.TEXTURE_2D;

    			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

    				glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;

    			}

    			state.bindTexture( glTextureType, textureProperties.__webglTexture );
    			setTextureParameters( glTextureType, texture );

    			if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

    				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

    					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );

    				}

    			} else {

    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );

    			}

    			if ( textureNeedsGenerateMipmaps( texture ) ) {

    				generateMipmap( glTextureType );

    			}

    			state.unbindTexture();

    		}

    		// Setup depth and stencil buffers

    		if ( renderTarget.depthBuffer ) {

    			setupDepthRenderbuffer( renderTarget );

    		}

    	}

    	function updateRenderTargetMipmap( renderTarget ) {

    		const textures = renderTarget.textures;

    		for ( let i = 0, il = textures.length; i < il; i ++ ) {

    			const texture = textures[ i ];

    			if ( textureNeedsGenerateMipmaps( texture ) ) {

    				const targetType = getTargetType( renderTarget );
    				const webglTexture = properties.get( texture ).__webglTexture;

    				state.bindTexture( targetType, webglTexture );
    				generateMipmap( targetType );
    				state.unbindTexture();

    			}

    		}

    	}

    	const invalidationArrayRead = [];
    	const invalidationArrayDraw = [];

    	function updateMultisampleRenderTarget( renderTarget ) {

    		if ( renderTarget.samples > 0 ) {

    			if ( useMultisampledRTT( renderTarget ) === false ) {

    				const textures = renderTarget.textures;
    				const width = renderTarget.width;
    				const height = renderTarget.height;
    				let mask = _gl.COLOR_BUFFER_BIT;
    				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
    				const renderTargetProperties = properties.get( renderTarget );
    				const isMultipleRenderTargets = ( textures.length > 1 );

    				// If MRT we need to remove FBO attachments
    				if ( isMultipleRenderTargets ) {

    					for ( let i = 0; i < textures.length; i ++ ) {

    						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
    						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );

    						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
    						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );

    					}

    				}

    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

    				const mipmaps = renderTarget.texture.mipmaps;

    				if ( mipmaps && mipmaps.length > 0 ) {

    					state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ 0 ] );

    				} else {

    					state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

    				}

    				for ( let i = 0; i < textures.length; i ++ ) {

    					if ( renderTarget.resolveDepthBuffer ) {

    						if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;

    						// resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)

    						if ( renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

    					}

    					if ( isMultipleRenderTargets ) {

    						_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    						const webglTexture = properties.get( textures[ i ] ).__webglTexture;
    						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );

    					}

    					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

    					if ( supportsInvalidateFramebuffer === true ) {

    						invalidationArrayRead.length = 0;
    						invalidationArrayDraw.length = 0;

    						invalidationArrayRead.push( _gl.COLOR_ATTACHMENT0 + i );

    						if ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false ) {

    							invalidationArrayRead.push( depthStyle );
    							invalidationArrayDraw.push( depthStyle );

    							_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, invalidationArrayDraw );

    						}

    						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArrayRead );

    					}

    				}

    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

    				// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
    				if ( isMultipleRenderTargets ) {

    					for ( let i = 0; i < textures.length; i ++ ) {

    						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
    						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

    						const webglTexture = properties.get( textures[ i ] ).__webglTexture;

    						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
    						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );

    					}

    				}

    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

    			} else {

    				if ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer ) {

    					const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;

    					_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );

    				}

    			}

    		}

    	}

    	function getRenderTargetSamples( renderTarget ) {

    		return Math.min( capabilities.maxSamples, renderTarget.samples );

    	}

    	function useMultisampledRTT( renderTarget ) {

    		const renderTargetProperties = properties.get( renderTarget );

    		return renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

    	}

    	function updateVideoTexture( texture ) {

    		const frame = info.render.frame;

    		// Check the last frame we updated the VideoTexture

    		if ( _videoTextures.get( texture ) !== frame ) {

    			_videoTextures.set( texture, frame );
    			texture.update();

    		}

    	}

    	function verifyColorSpace( texture, image ) {

    		const colorSpace = texture.colorSpace;
    		const format = texture.format;
    		const type = texture.type;

    		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true ) return image;

    		if ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {

    			// sRGB

    			if ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {

    				// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

    				if ( format !== RGBAFormat || type !== UnsignedByteType ) {

    					console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

    				}

    			} else {

    				console.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );

    			}

    		}

    		return image;

    	}

    	function getDimensions( image ) {

    		if ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {

    			// if intrinsic data are not available, fallback to width/height

    			_imageDimensions.width = image.naturalWidth || image.width;
    			_imageDimensions.height = image.naturalHeight || image.height;

    		} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {

    			_imageDimensions.width = image.displayWidth;
    			_imageDimensions.height = image.displayHeight;

    		} else {

    			_imageDimensions.width = image.width;
    			_imageDimensions.height = image.height;

    		}

    		return _imageDimensions;

    	}

    	//

    	this.allocateTextureUnit = allocateTextureUnit;
    	this.resetTextureUnits = resetTextureUnits;

    	this.setTexture2D = setTexture2D;
    	this.setTexture2DArray = setTexture2DArray;
    	this.setTexture3D = setTexture3D;
    	this.setTextureCube = setTextureCube;
    	this.rebindTextures = rebindTextures;
    	this.setupRenderTarget = setupRenderTarget;
    	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    	this.setupFrameBufferTexture = setupFrameBufferTexture;
    	this.useMultisampledRTT = useMultisampledRTT;

    }

    function WebGLUtils( gl, extensions ) {

    	function convert( p, colorSpace = NoColorSpace ) {

    		let extension;

    		const transfer = ColorManagement.getTransfer( colorSpace );

    		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
    		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
    		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
    		if ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;

    		if ( p === ByteType ) return gl.BYTE;
    		if ( p === ShortType ) return gl.SHORT;
    		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
    		if ( p === IntType ) return gl.INT;
    		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
    		if ( p === FloatType ) return gl.FLOAT;
    		if ( p === HalfFloatType ) return gl.HALF_FLOAT;

    		if ( p === AlphaFormat ) return gl.ALPHA;
    		if ( p === RGBFormat ) return gl.RGB;
    		if ( p === RGBAFormat ) return gl.RGBA;
    		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
    		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

    		// WebGL2 formats.

    		if ( p === RedFormat ) return gl.RED;
    		if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
    		if ( p === RGFormat ) return gl.RG;
    		if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
    		if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

    		// S3TC

    		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

    			if ( transfer === SRGBTransfer ) {

    				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

    				if ( extension !== null ) {

    					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
    					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

    				} else {

    					return null;

    				}

    			} else {

    				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

    				if ( extension !== null ) {

    					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
    					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
    					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

    				} else {

    					return null;

    				}

    			}

    		}

    		// PVRTC

    		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

    			if ( extension !== null ) {

    				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
    				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
    				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
    				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

    			} else {

    				return null;

    			}

    		}

    		// ETC

    		if ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

    			if ( extension !== null ) {

    				if ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
    				if ( p === RGBA_ETC2_EAC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

    			} else {

    				return null;

    			}

    		}

    		// ASTC

    		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
    			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
    			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
    			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
    			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

    			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

    			if ( extension !== null ) {

    				if ( p === RGBA_ASTC_4x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
    				if ( p === RGBA_ASTC_5x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
    				if ( p === RGBA_ASTC_5x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
    				if ( p === RGBA_ASTC_6x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
    				if ( p === RGBA_ASTC_6x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
    				if ( p === RGBA_ASTC_8x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
    				if ( p === RGBA_ASTC_8x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
    				if ( p === RGBA_ASTC_8x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
    				if ( p === RGBA_ASTC_10x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
    				if ( p === RGBA_ASTC_10x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
    				if ( p === RGBA_ASTC_10x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
    				if ( p === RGBA_ASTC_10x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
    				if ( p === RGBA_ASTC_12x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
    				if ( p === RGBA_ASTC_12x12_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

    			} else {

    				return null;

    			}

    		}

    		// BPTC

    		if ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {

    			extension = extensions.get( 'EXT_texture_compression_bptc' );

    			if ( extension !== null ) {

    				if ( p === RGBA_BPTC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
    				if ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
    				if ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;

    			} else {

    				return null;

    			}

    		}

    		// RGTC

    		if ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {

    			extension = extensions.get( 'EXT_texture_compression_rgtc' );

    			if ( extension !== null ) {

    				if ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;
    				if ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
    				if ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
    				if ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

    			} else {

    				return null;

    			}

    		}

    		//

    		if ( p === UnsignedInt248Type ) return gl.UNSIGNED_INT_24_8;

    		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

    		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

    	}

    	return { convert: convert };

    }

    const _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;

    const _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;

    /**
     * A XR module that manages the access to the Depth Sensing API.
     */
    class WebXRDepthSensing {

    	/**
    	 * Constructs a new depth sensing module.
    	 */
    	constructor() {

    		/**
    		 * A texture representing the depth of the user's environment.
    		 *
    		 * @type {?Texture}
    		 */
    		this.texture = null;

    		/**
    		 * A plane mesh for visualizing the depth texture.
    		 *
    		 * @type {?Mesh}
    		 */
    		this.mesh = null;

    		/**
    		 * The depth near value.
    		 *
    		 * @type {number}
    		 */
    		this.depthNear = 0;

    		/**
    		 * The depth near far.
    		 *
    		 * @type {number}
    		 */
    		this.depthFar = 0;

    	}

    	/**
    	 * Inits the depth sensing module
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 * @param {XRWebGLDepthInformation} depthData - The XR depth data.
    	 * @param {XRRenderState} renderState - The XR render state.
    	 */
    	init( renderer, depthData, renderState ) {

    		if ( this.texture === null ) {

    			const texture = new Texture();

    			const texProps = renderer.properties.get( texture );
    			texProps.__webglTexture = depthData.texture;

    			if ( ( depthData.depthNear !== renderState.depthNear ) || ( depthData.depthFar !== renderState.depthFar ) ) {

    				this.depthNear = depthData.depthNear;
    				this.depthFar = depthData.depthFar;

    			}

    			this.texture = texture;

    		}

    	}

    	/**
    	 * Returns a plane mesh that visualizes the depth texture.
    	 *
    	 * @param {ArrayCamera} cameraXR - The XR camera.
    	 * @return {?Mesh} The plane mesh.
    	 */
    	getMesh( cameraXR ) {

    		if ( this.texture !== null ) {

    			if ( this.mesh === null ) {

    				const viewport = cameraXR.cameras[ 0 ].viewport;
    				const material = new ShaderMaterial( {
    					vertexShader: _occlusion_vertex,
    					fragmentShader: _occlusion_fragment,
    					uniforms: {
    						depthColor: { value: this.texture },
    						depthWidth: { value: viewport.z },
    						depthHeight: { value: viewport.w }
    					}
    				} );

    				this.mesh = new Mesh( new PlaneGeometry( 20, 20 ), material );

    			}

    		}

    		return this.mesh;

    	}

    	/**
    	 * Resets the module
    	 */
    	reset() {

    		this.texture = null;
    		this.mesh = null;

    	}

    	/**
    	 * Returns a texture representing the depth of the user's environment.
    	 *
    	 * @return {?Texture} The depth texture.
    	 */
    	getDepthTexture() {

    		return this.texture;

    	}

    }

    /**
     * This class represents an abstraction of the WebXR Device API and is
     * internally used by {@link WebGLRenderer}. `WebXRManager` also provides a public
     * interface that allows users to enable/disable XR and perform XR related
     * tasks like for instance retrieving controllers.
     *
     * @augments EventDispatcher
     * @hideconstructor
     */
    class WebXRManager extends EventDispatcher {

    	/**
    	 * Constructs a new WebGL renderer.
    	 *
    	 * @param {WebGLRenderer} renderer - The renderer.
    	 * @param {WebGL2RenderingContext} gl - The rendering context.
    	 */
    	constructor( renderer, gl ) {

    		super();

    		const scope = this;

    		let session = null;

    		let framebufferScaleFactor = 1.0;

    		let referenceSpace = null;
    		let referenceSpaceType = 'local-floor';
    		// Set default foveation to maximum.
    		let foveation = 1.0;
    		let customReferenceSpace = null;

    		let pose = null;
    		let glBinding = null;
    		let glProjLayer = null;
    		let glBaseLayer = null;
    		let xrFrame = null;

    		const depthSensing = new WebXRDepthSensing();
    		const attributes = gl.getContextAttributes();

    		let initialRenderTarget = null;
    		let newRenderTarget = null;

    		const controllers = [];
    		const controllerInputSources = [];

    		const currentSize = new Vector2();
    		let currentPixelRatio = null;

    		//

    		const cameraL = new PerspectiveCamera();
    		cameraL.viewport = new Vector4();

    		const cameraR = new PerspectiveCamera();
    		cameraR.viewport = new Vector4();

    		const cameras = [ cameraL, cameraR ];

    		const cameraXR = new ArrayCamera();

    		let _currentDepthNear = null;
    		let _currentDepthFar = null;

    		//

    		/**
    		 * Whether the manager's XR camera should be automatically updated or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.cameraAutoUpdate = true;

    		/**
    		 * This flag notifies the renderer to be ready for XR rendering. Set it to `true`
    		 * if you are going to use XR in your app.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.enabled = false;

    		/**
    		 * Whether XR presentation is active or not.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default false
    		 */
    		this.isPresenting = false;

    		/**
    		 * Returns a group representing the `target ray` space of the XR controller.
    		 * Use this space for visualizing 3D objects that support the user in pointing
    		 * tasks like UI interaction.
    		 *
    		 * @param {number} index - The index of the controller.
    		 * @return {Group} A group representing the `target ray` space.
    		 */
    		this.getController = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getTargetRaySpace();

    		};

    		/**
    		 * Returns a group representing the `grip` space of the XR controller.
    		 * Use this space for visualizing 3D objects that support the user in pointing
    		 * tasks like UI interaction.
    		 *
    		 * Note: If you want to show something in the user's hand AND offer a
    		 * pointing ray at the same time, you'll want to attached the handheld object
    		 * to the group returned by `getControllerGrip()` and the ray to the
    		 * group returned by `getController()`. The idea is to have two
    		 * different groups in two different coordinate spaces for the same WebXR
    		 * controller.
    		 *
    		 * @param {number} index - The index of the controller.
    		 * @return {Group} A group representing the `grip` space.
    		 */
    		this.getControllerGrip = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getGripSpace();

    		};

    		/**
    		 * Returns a group representing the `hand` space of the XR controller.
    		 * Use this space for visualizing 3D objects that support the user in pointing
    		 * tasks like UI interaction.
    		 *
    		 * @param {number} index - The index of the controller.
    		 * @return {Group} A group representing the `hand` space.
    		 */
    		this.getHand = function ( index ) {

    			let controller = controllers[ index ];

    			if ( controller === undefined ) {

    				controller = new WebXRController();
    				controllers[ index ] = controller;

    			}

    			return controller.getHandSpace();

    		};

    		//

    		function onSessionEvent( event ) {

    			const controllerIndex = controllerInputSources.indexOf( event.inputSource );

    			if ( controllerIndex === -1 ) {

    				return;

    			}

    			const controller = controllers[ controllerIndex ];

    			if ( controller !== undefined ) {

    				controller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );
    				controller.dispatchEvent( { type: event.type, data: event.inputSource } );

    			}

    		}

    		function onSessionEnd() {

    			session.removeEventListener( 'select', onSessionEvent );
    			session.removeEventListener( 'selectstart', onSessionEvent );
    			session.removeEventListener( 'selectend', onSessionEvent );
    			session.removeEventListener( 'squeeze', onSessionEvent );
    			session.removeEventListener( 'squeezestart', onSessionEvent );
    			session.removeEventListener( 'squeezeend', onSessionEvent );
    			session.removeEventListener( 'end', onSessionEnd );
    			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

    			for ( let i = 0; i < controllers.length; i ++ ) {

    				const inputSource = controllerInputSources[ i ];

    				if ( inputSource === null ) continue;

    				controllerInputSources[ i ] = null;

    				controllers[ i ].disconnect( inputSource );

    			}

    			_currentDepthNear = null;
    			_currentDepthFar = null;

    			depthSensing.reset();

    			// restore framebuffer/rendering state

    			renderer.setRenderTarget( initialRenderTarget );

    			glBaseLayer = null;
    			glProjLayer = null;
    			glBinding = null;
    			session = null;
    			newRenderTarget = null;

    			//

    			animation.stop();

    			scope.isPresenting = false;

    			renderer.setPixelRatio( currentPixelRatio );
    			renderer.setSize( currentSize.width, currentSize.height, false );

    			scope.dispatchEvent( { type: 'sessionend' } );

    		}

    		/**
    		 * Sets the framebuffer scale factor.
    		 *
    		 * This method can not be used during a XR session.
    		 *
    		 * @param {number} value - The framebuffer scale factor.
    		 */
    		this.setFramebufferScaleFactor = function ( value ) {

    			framebufferScaleFactor = value;

    			if ( scope.isPresenting === true ) {

    				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

    			}

    		};

    		/**
    		 * Sets the reference space type. Can be used to configure a spatial relationship with the user's physical
    		 * environment. Depending on how the user moves in 3D space, setting an appropriate reference space can
    		 * improve tracking. Default is `local-floor`. Valid values can be found here
    		 * https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace#reference_space_types.
    		 *
    		 * This method can not be used during a XR session.
    		 *
    		 * @param {string} value - The reference space type.
    		 */
    		this.setReferenceSpaceType = function ( value ) {

    			referenceSpaceType = value;

    			if ( scope.isPresenting === true ) {

    				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

    			}

    		};

    		/**
    		 * Returns the XR reference space.
    		 *
    		 * @return {XRReferenceSpace} The XR reference space.
    		 */
    		this.getReferenceSpace = function () {

    			return customReferenceSpace || referenceSpace;

    		};

    		/**
    		 * Sets a custom XR reference space.
    		 *
    		 * @param {XRReferenceSpace} space - The XR reference space.
    		 */
    		this.setReferenceSpace = function ( space ) {

    			customReferenceSpace = space;

    		};

    		/**
    		 * Returns the current base layer.
    		 *
    		 * @return {?(XRWebGLLayer|XRProjectionLayer)} The XR base layer.
    		 */
    		this.getBaseLayer = function () {

    			return glProjLayer !== null ? glProjLayer : glBaseLayer;

    		};

    		/**
    		 * Returns the current XR binding.
    		 *
    		 * @return {?XRWebGLBinding} The XR binding.
    		 */
    		this.getBinding = function () {

    			return glBinding;

    		};

    		/**
    		 * Returns the current XR frame.
    		 *
    		 * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.
    		 */
    		this.getFrame = function () {

    			return xrFrame;

    		};

    		/**
    		 * Returns the current XR session.
    		 *
    		 * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.
    		 */
    		this.getSession = function () {

    			return session;

    		};

    		/**
    		 * After a XR session has been requested usually with one of the `*Button` modules, it
    		 * is injected into the renderer with this method. This method triggers the start of
    		 * the actual XR rendering.
    		 *
    		 * @async
    		 * @param {XRSession} value - The XR session to set.
    		 * @return {Promise} A Promise that resolves when the session has been set.
    		 */
    		this.setSession = async function ( value ) {

    			session = value;

    			if ( session !== null ) {

    				initialRenderTarget = renderer.getRenderTarget();

    				session.addEventListener( 'select', onSessionEvent );
    				session.addEventListener( 'selectstart', onSessionEvent );
    				session.addEventListener( 'selectend', onSessionEvent );
    				session.addEventListener( 'squeeze', onSessionEvent );
    				session.addEventListener( 'squeezestart', onSessionEvent );
    				session.addEventListener( 'squeezeend', onSessionEvent );
    				session.addEventListener( 'end', onSessionEnd );
    				session.addEventListener( 'inputsourceschange', onInputSourcesChange );

    				if ( attributes.xrCompatible !== true ) {

    					await gl.makeXRCompatible();

    				}

    				currentPixelRatio = renderer.getPixelRatio();
    				renderer.getSize( currentSize );

    				// Check that the browser implements the necessary APIs to use an
    				// XRProjectionLayer rather than an XRWebGLLayer
    				const useLayers = typeof XRWebGLBinding !== 'undefined' && 'createProjectionLayer' in XRWebGLBinding.prototype;

    				if ( ! useLayers ) {

    					const layerInit = {
    						antialias: attributes.antialias,
    						alpha: true,
    						depth: attributes.depth,
    						stencil: attributes.stencil,
    						framebufferScaleFactor: framebufferScaleFactor
    					};

    					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

    					session.updateRenderState( { baseLayer: glBaseLayer } );

    					renderer.setPixelRatio( 1 );
    					renderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );

    					newRenderTarget = new WebGLRenderTarget(
    						glBaseLayer.framebufferWidth,
    						glBaseLayer.framebufferHeight,
    						{
    							format: RGBAFormat,
    							type: UnsignedByteType,
    							colorSpace: renderer.outputColorSpace,
    							stencilBuffer: attributes.stencil,
    							resolveDepthBuffer: ( glBaseLayer.ignoreDepthValues === false ),
    							resolveStencilBuffer: ( glBaseLayer.ignoreDepthValues === false )

    						}
    					);

    				} else {

    					let depthFormat = null;
    					let depthType = null;
    					let glDepthFormat = null;

    					if ( attributes.depth ) {

    						glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
    						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
    						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;

    					}

    					const projectionlayerInit = {
    						colorFormat: gl.RGBA8,
    						depthFormat: glDepthFormat,
    						scaleFactor: framebufferScaleFactor
    					};

    					glBinding = new XRWebGLBinding( session, gl );

    					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

    					session.updateRenderState( { layers: [ glProjLayer ] } );

    					renderer.setPixelRatio( 1 );
    					renderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );

    					newRenderTarget = new WebGLRenderTarget(
    						glProjLayer.textureWidth,
    						glProjLayer.textureHeight,
    						{
    							format: RGBAFormat,
    							type: UnsignedByteType,
    							depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
    							stencilBuffer: attributes.stencil,
    							colorSpace: renderer.outputColorSpace,
    							samples: attributes.antialias ? 4 : 0,
    							resolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false ),
    							resolveStencilBuffer: ( glProjLayer.ignoreDepthValues === false )
    						} );

    				}

    				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

    				this.setFoveation( foveation );

    				customReferenceSpace = null;
    				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

    				animation.setContext( session );
    				animation.start();

    				scope.isPresenting = true;

    				scope.dispatchEvent( { type: 'sessionstart' } );

    			}

    		};

    		/**
    		 * Returns the environment blend mode from the current XR session.
    		 *
    		 * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.
    		 */
    		this.getEnvironmentBlendMode = function () {

    			if ( session !== null ) {

    				return session.environmentBlendMode;

    			}

    		};

    		/**
    		 * Returns the current depth texture computed via depth sensing.
    		 *
    		 * @return {?Texture} The depth texture.
    		 */
    		this.getDepthTexture = function () {

    			return depthSensing.getDepthTexture();

    		};

    		function onInputSourcesChange( event ) {

    			// Notify disconnected

    			for ( let i = 0; i < event.removed.length; i ++ ) {

    				const inputSource = event.removed[ i ];
    				const index = controllerInputSources.indexOf( inputSource );

    				if ( index >= 0 ) {

    					controllerInputSources[ index ] = null;
    					controllers[ index ].disconnect( inputSource );

    				}

    			}

    			// Notify connected

    			for ( let i = 0; i < event.added.length; i ++ ) {

    				const inputSource = event.added[ i ];

    				let controllerIndex = controllerInputSources.indexOf( inputSource );

    				if ( controllerIndex === -1 ) {

    					// Assign input source a controller that currently has no input source

    					for ( let i = 0; i < controllers.length; i ++ ) {

    						if ( i >= controllerInputSources.length ) {

    							controllerInputSources.push( inputSource );
    							controllerIndex = i;
    							break;

    						} else if ( controllerInputSources[ i ] === null ) {

    							controllerInputSources[ i ] = inputSource;
    							controllerIndex = i;
    							break;

    						}

    					}

    					// If all controllers do currently receive input we ignore new ones

    					if ( controllerIndex === -1 ) break;

    				}

    				const controller = controllers[ controllerIndex ];

    				if ( controller ) {

    					controller.connect( inputSource );

    				}

    			}

    		}

    		//

    		const cameraLPos = new Vector3();
    		const cameraRPos = new Vector3();

    		/**
    		 * Assumes 2 cameras that are parallel and share an X-axis, and that
    		 * the cameras' projection and world matrices have already been set.
    		 * And that near and far planes are identical for both cameras.
    		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
    		 *
    		 * @param {ArrayCamera} camera - The camera to update.
    		 * @param {PerspectiveCamera} cameraL - The left camera.
    		 * @param {PerspectiveCamera} cameraR - The right camera.
    		 */
    		function setProjectionFromUnion( camera, cameraL, cameraR ) {

    			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
    			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

    			const ipd = cameraLPos.distanceTo( cameraRPos );

    			const projL = cameraL.projectionMatrix.elements;
    			const projR = cameraR.projectionMatrix.elements;

    			// VR systems will have identical far and near planes, and
    			// most likely identical top and bottom frustum extents.
    			// Use the left camera for these values.
    			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
    			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
    			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
    			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

    			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
    			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
    			const left = near * leftFov;
    			const right = near * rightFov;

    			// Calculate the new camera's position offset from the
    			// left camera. xOffset should be roughly half `ipd`.
    			const zOffset = ipd / ( - leftFov + rightFov );
    			const xOffset = zOffset * - leftFov;

    			// TODO: Better way to apply this offset?
    			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
    			camera.translateX( xOffset );
    			camera.translateZ( zOffset );
    			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
    			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

    			// Check if the projection uses an infinite far plane.
    			if ( projL[ 10 ] === -1 ) {

    				// Use the projection matrix from the left eye.
    				// The camera offset is sufficient to include the view volumes
    				// of both eyes (assuming symmetric projections).
    				camera.projectionMatrix.copy( cameraL.projectionMatrix );
    				camera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );

    			} else {

    				// Find the union of the frustum values of the cameras and scale
    				// the values so that the near plane's position does not change in world space,
    				// although must now be relative to the new union camera.
    				const near2 = near + zOffset;
    				const far2 = far + zOffset;
    				const left2 = left - xOffset;
    				const right2 = right + ( ipd - xOffset );
    				const top2 = topFov * far / far2 * near2;
    				const bottom2 = bottomFov * far / far2 * near2;

    				camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
    				camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();

    			}

    		}

    		function updateCamera( camera, parent ) {

    			if ( parent === null ) {

    				camera.matrixWorld.copy( camera.matrix );

    			} else {

    				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

    			}

    			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

    		}

    		/**
    		 * Updates the state of the XR camera. Use this method on app level if you
    		 * set cameraAutoUpdate` to `false`. The method requires the non-XR
    		 * camera of the scene as a parameter. The passed in camera's transformation
    		 * is automatically adjusted to the position of the XR camera when calling
    		 * this method.
    		 *
    		 * @param {Camera} camera - The camera.
    		 */
    		this.updateCamera = function ( camera ) {

    			if ( session === null ) return;

    			let depthNear = camera.near;
    			let depthFar = camera.far;

    			if ( depthSensing.texture !== null ) {

    				if ( depthSensing.depthNear > 0 ) depthNear = depthSensing.depthNear;
    				if ( depthSensing.depthFar > 0 ) depthFar = depthSensing.depthFar;

    			}

    			cameraXR.near = cameraR.near = cameraL.near = depthNear;
    			cameraXR.far = cameraR.far = cameraL.far = depthFar;

    			if ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {

    				// Note that the new renderState won't apply until the next frame. See #18320

    				session.updateRenderState( {
    					depthNear: cameraXR.near,
    					depthFar: cameraXR.far
    				} );

    				_currentDepthNear = cameraXR.near;
    				_currentDepthFar = cameraXR.far;

    			}

    			cameraL.layers.mask = camera.layers.mask | 0b010;
    			cameraR.layers.mask = camera.layers.mask | 0b100;
    			cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;

    			const parent = camera.parent;
    			const cameras = cameraXR.cameras;

    			updateCamera( cameraXR, parent );

    			for ( let i = 0; i < cameras.length; i ++ ) {

    				updateCamera( cameras[ i ], parent );

    			}

    			// update projection matrix for proper view frustum culling

    			if ( cameras.length === 2 ) {

    				setProjectionFromUnion( cameraXR, cameraL, cameraR );

    			} else {

    				// assume single camera setup (AR)

    				cameraXR.projectionMatrix.copy( cameraL.projectionMatrix );

    			}

    			// update user camera and its children

    			updateUserCamera( camera, cameraXR, parent );

    		};

    		function updateUserCamera( camera, cameraXR, parent ) {

    			if ( parent === null ) {

    				camera.matrix.copy( cameraXR.matrixWorld );

    			} else {

    				camera.matrix.copy( parent.matrixWorld );
    				camera.matrix.invert();
    				camera.matrix.multiply( cameraXR.matrixWorld );

    			}

    			camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
    			camera.updateMatrixWorld( true );

    			camera.projectionMatrix.copy( cameraXR.projectionMatrix );
    			camera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );

    			if ( camera.isPerspectiveCamera ) {

    				camera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );
    				camera.zoom = 1;

    			}

    		}

    		/**
    		 * Returns an instance of {@link ArrayCamera} which represents the XR camera
    		 * of the active XR session. For each view it holds a separate camera object.
    		 *
    		 * The camera's `fov` is currently not used and does not reflect the fov of
    		 * the XR camera. If you need the fov on app level, you have to compute in
    		 * manually from the XR camera's projection matrices.
    		 *
    		 * @return {ArrayCamera} The XR camera.
    		 */
    		this.getCamera = function () {

    			return cameraXR;

    		};

    		/**
    		 * Returns the amount of foveation used by the XR compositor for the projection layer.
    		 *
    		 * @return {number} The amount of foveation.
    		 */
    		this.getFoveation = function () {

    			if ( glProjLayer === null && glBaseLayer === null ) {

    				return undefined;

    			}

    			return foveation;

    		};

    		/**
    		 * Sets the foveation value.
    		 *
    		 * @param {number} value - A number in the range `[0,1]` where `0` means no foveation (full resolution)
    		 * and `1` means maximum foveation (the edges render at lower resolution).
    		 */
    		this.setFoveation = function ( value ) {

    			// 0 = no foveation = full resolution
    			// 1 = maximum foveation = the edges render at lower resolution

    			foveation = value;

    			if ( glProjLayer !== null ) {

    				glProjLayer.fixedFoveation = value;

    			}

    			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

    				glBaseLayer.fixedFoveation = value;

    			}

    		};

    		/**
    		 * Returns `true` if depth sensing is supported.
    		 *
    		 * @return {boolean} Whether depth sensing is supported or not.
    		 */
    		this.hasDepthSensing = function () {

    			return depthSensing.texture !== null;

    		};

    		/**
    		 * Returns the depth sensing mesh.
    		 *
    		 * @return {Mesh} The depth sensing mesh.
    		 */
    		this.getDepthSensingMesh = function () {

    			return depthSensing.getMesh( cameraXR );

    		};

    		// Animation Loop

    		let onAnimationFrameCallback = null;

    		function onAnimationFrame( time, frame ) {

    			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
    			xrFrame = frame;

    			if ( pose !== null ) {

    				const views = pose.views;

    				if ( glBaseLayer !== null ) {

    					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
    					renderer.setRenderTarget( newRenderTarget );

    				}

    				let cameraXRNeedsUpdate = false;

    				// check if it's necessary to rebuild cameraXR's camera list

    				if ( views.length !== cameraXR.cameras.length ) {

    					cameraXR.cameras.length = 0;
    					cameraXRNeedsUpdate = true;

    				}

    				for ( let i = 0; i < views.length; i ++ ) {

    					const view = views[ i ];

    					let viewport = null;

    					if ( glBaseLayer !== null ) {

    						viewport = glBaseLayer.getViewport( view );

    					} else {

    						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
    						viewport = glSubImage.viewport;

    						// For side-by-side projection, we only produce a single texture for both eyes.
    						if ( i === 0 ) {

    							renderer.setRenderTargetTextures(
    								newRenderTarget,
    								glSubImage.colorTexture,
    								glSubImage.depthStencilTexture );

    							renderer.setRenderTarget( newRenderTarget );

    						}

    					}

    					let camera = cameras[ i ];

    					if ( camera === undefined ) {

    						camera = new PerspectiveCamera();
    						camera.layers.enable( i );
    						camera.viewport = new Vector4();
    						cameras[ i ] = camera;

    					}

    					camera.matrix.fromArray( view.transform.matrix );
    					camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
    					camera.projectionMatrix.fromArray( view.projectionMatrix );
    					camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();
    					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

    					if ( i === 0 ) {

    						cameraXR.matrix.copy( camera.matrix );
    						cameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );

    					}

    					if ( cameraXRNeedsUpdate === true ) {

    						cameraXR.cameras.push( camera );

    					}

    				}

    				//

    				const enabledFeatures = session.enabledFeatures;
    				const gpuDepthSensingEnabled = enabledFeatures &&
    					enabledFeatures.includes( 'depth-sensing' ) &&
    					session.depthUsage == 'gpu-optimized';

    				if ( gpuDepthSensingEnabled && glBinding ) {

    					const depthData = glBinding.getDepthInformation( views[ 0 ] );

    					if ( depthData && depthData.isValid && depthData.texture ) {

    						depthSensing.init( renderer, depthData, session.renderState );

    					}

    				}

    			}

    			//

    			for ( let i = 0; i < controllers.length; i ++ ) {

    				const inputSource = controllerInputSources[ i ];
    				const controller = controllers[ i ];

    				if ( inputSource !== null && controller !== undefined ) {

    					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

    				}

    			}

    			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

    			if ( frame.detectedPlanes ) {

    				scope.dispatchEvent( { type: 'planesdetected', data: frame } );

    			}

    			xrFrame = null;

    		}

    		const animation = new WebGLAnimation();

    		animation.setAnimationLoop( onAnimationFrame );

    		this.setAnimationLoop = function ( callback ) {

    			onAnimationFrameCallback = callback;

    		};

    		this.dispose = function () {};

    	}

    }

    const _e1 = /*@__PURE__*/ new Euler();
    const _m1 = /*@__PURE__*/ new Matrix4();

    function WebGLMaterials( renderer, properties ) {

    	function refreshTransformUniform( map, uniform ) {

    		if ( map.matrixAutoUpdate === true ) {

    			map.updateMatrix();

    		}

    		uniform.value.copy( map.matrix );

    	}

    	function refreshFogUniforms( uniforms, fog ) {

    		fog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );

    		if ( fog.isFog ) {

    			uniforms.fogNear.value = fog.near;
    			uniforms.fogFar.value = fog.far;

    		} else if ( fog.isFogExp2 ) {

    			uniforms.fogDensity.value = fog.density;

    		}

    	}

    	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

    		if ( material.isMeshBasicMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshLambertMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshToonMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsToon( uniforms, material );

    		} else if ( material.isMeshPhongMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsPhong( uniforms, material );

    		} else if ( material.isMeshStandardMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsStandard( uniforms, material );

    			if ( material.isMeshPhysicalMaterial ) {

    				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

    			}

    		} else if ( material.isMeshMatcapMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsMatcap( uniforms, material );

    		} else if ( material.isMeshDepthMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isMeshDistanceMaterial ) {

    			refreshUniformsCommon( uniforms, material );
    			refreshUniformsDistance( uniforms, material );

    		} else if ( material.isMeshNormalMaterial ) {

    			refreshUniformsCommon( uniforms, material );

    		} else if ( material.isLineBasicMaterial ) {

    			refreshUniformsLine( uniforms, material );

    			if ( material.isLineDashedMaterial ) {

    				refreshUniformsDash( uniforms, material );

    			}

    		} else if ( material.isPointsMaterial ) {

    			refreshUniformsPoints( uniforms, material, pixelRatio, height );

    		} else if ( material.isSpriteMaterial ) {

    			refreshUniformsSprites( uniforms, material );

    		} else if ( material.isShadowMaterial ) {

    			uniforms.color.value.copy( material.color );
    			uniforms.opacity.value = material.opacity;

    		} else if ( material.isShaderMaterial ) {

    			material.uniformsNeedUpdate = false; // #15581

    		}

    	}

    	function refreshUniformsCommon( uniforms, material ) {

    		uniforms.opacity.value = material.opacity;

    		if ( material.color ) {

    			uniforms.diffuse.value.copy( material.color );

    		}

    		if ( material.emissive ) {

    			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

    		}

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    			refreshTransformUniform( material.map, uniforms.mapTransform );

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

    		}

    		if ( material.bumpMap ) {

    			uniforms.bumpMap.value = material.bumpMap;

    			refreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );

    			uniforms.bumpScale.value = material.bumpScale;

    			if ( material.side === BackSide ) {

    				uniforms.bumpScale.value *= -1;

    			}

    		}

    		if ( material.normalMap ) {

    			uniforms.normalMap.value = material.normalMap;

    			refreshTransformUniform( material.normalMap, uniforms.normalMapTransform );

    			uniforms.normalScale.value.copy( material.normalScale );

    			if ( material.side === BackSide ) {

    				uniforms.normalScale.value.negate();

    			}

    		}

    		if ( material.displacementMap ) {

    			uniforms.displacementMap.value = material.displacementMap;

    			refreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );

    			uniforms.displacementScale.value = material.displacementScale;
    			uniforms.displacementBias.value = material.displacementBias;

    		}

    		if ( material.emissiveMap ) {

    			uniforms.emissiveMap.value = material.emissiveMap;

    			refreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );

    		}

    		if ( material.specularMap ) {

    			uniforms.specularMap.value = material.specularMap;

    			refreshTransformUniform( material.specularMap, uniforms.specularMapTransform );

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    		const materialProperties = properties.get( material );

    		const envMap = materialProperties.envMap;
    		const envMapRotation = materialProperties.envMapRotation;

    		if ( envMap ) {

    			uniforms.envMap.value = envMap;

    			_e1.copy( envMapRotation );

    			// accommodate left-handed frame
    			_e1.x *= -1; _e1.y *= -1; _e1.z *= -1;

    			if ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {

    				// environment maps which are not cube render targets or PMREMs follow a different convention
    				_e1.y *= -1;
    				_e1.z *= -1;

    			}

    			uniforms.envMapRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );

    			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? -1 : 1;

    			uniforms.reflectivity.value = material.reflectivity;
    			uniforms.ior.value = material.ior;
    			uniforms.refractionRatio.value = material.refractionRatio;

    		}

    		if ( material.lightMap ) {

    			uniforms.lightMap.value = material.lightMap;
    			uniforms.lightMapIntensity.value = material.lightMapIntensity;

    			refreshTransformUniform( material.lightMap, uniforms.lightMapTransform );

    		}

    		if ( material.aoMap ) {

    			uniforms.aoMap.value = material.aoMap;
    			uniforms.aoMapIntensity.value = material.aoMapIntensity;

    			refreshTransformUniform( material.aoMap, uniforms.aoMapTransform );

    		}

    	}

    	function refreshUniformsLine( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    			refreshTransformUniform( material.map, uniforms.mapTransform );

    		}

    	}

    	function refreshUniformsDash( uniforms, material ) {

    		uniforms.dashSize.value = material.dashSize;
    		uniforms.totalSize.value = material.dashSize + material.gapSize;
    		uniforms.scale.value = material.scale;

    	}

    	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.size.value = material.size * pixelRatio;
    		uniforms.scale.value = height * 0.5;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    			refreshTransformUniform( material.map, uniforms.uvTransform );

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    	}

    	function refreshUniformsSprites( uniforms, material ) {

    		uniforms.diffuse.value.copy( material.color );
    		uniforms.opacity.value = material.opacity;
    		uniforms.rotation.value = material.rotation;

    		if ( material.map ) {

    			uniforms.map.value = material.map;

    			refreshTransformUniform( material.map, uniforms.mapTransform );

    		}

    		if ( material.alphaMap ) {

    			uniforms.alphaMap.value = material.alphaMap;

    			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

    		}

    		if ( material.alphaTest > 0 ) {

    			uniforms.alphaTest.value = material.alphaTest;

    		}

    	}

    	function refreshUniformsPhong( uniforms, material ) {

    		uniforms.specular.value.copy( material.specular );
    		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

    	}

    	function refreshUniformsToon( uniforms, material ) {

    		if ( material.gradientMap ) {

    			uniforms.gradientMap.value = material.gradientMap;

    		}

    	}

    	function refreshUniformsStandard( uniforms, material ) {

    		uniforms.metalness.value = material.metalness;

    		if ( material.metalnessMap ) {

    			uniforms.metalnessMap.value = material.metalnessMap;

    			refreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );

    		}

    		uniforms.roughness.value = material.roughness;

    		if ( material.roughnessMap ) {

    			uniforms.roughnessMap.value = material.roughnessMap;

    			refreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );

    		}

    		if ( material.envMap ) {

    			//uniforms.envMap.value = material.envMap; // part of uniforms common

    			uniforms.envMapIntensity.value = material.envMapIntensity;

    		}

    	}

    	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

    		uniforms.ior.value = material.ior; // also part of uniforms common

    		if ( material.sheen > 0 ) {

    			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

    			uniforms.sheenRoughness.value = material.sheenRoughness;

    			if ( material.sheenColorMap ) {

    				uniforms.sheenColorMap.value = material.sheenColorMap;

    				refreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );

    			}

    			if ( material.sheenRoughnessMap ) {

    				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

    				refreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );

    			}

    		}

    		if ( material.clearcoat > 0 ) {

    			uniforms.clearcoat.value = material.clearcoat;
    			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

    			if ( material.clearcoatMap ) {

    				uniforms.clearcoatMap.value = material.clearcoatMap;

    				refreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );

    			}

    			if ( material.clearcoatRoughnessMap ) {

    				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

    				refreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );

    			}

    			if ( material.clearcoatNormalMap ) {

    				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

    				refreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );

    				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );

    				if ( material.side === BackSide ) {

    					uniforms.clearcoatNormalScale.value.negate();

    				}

    			}

    		}

    		if ( material.dispersion > 0 ) {

    			uniforms.dispersion.value = material.dispersion;

    		}

    		if ( material.iridescence > 0 ) {

    			uniforms.iridescence.value = material.iridescence;
    			uniforms.iridescenceIOR.value = material.iridescenceIOR;
    			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
    			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

    			if ( material.iridescenceMap ) {

    				uniforms.iridescenceMap.value = material.iridescenceMap;

    				refreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );

    			}

    			if ( material.iridescenceThicknessMap ) {

    				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

    				refreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );

    			}

    		}

    		if ( material.transmission > 0 ) {

    			uniforms.transmission.value = material.transmission;
    			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
    			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

    			if ( material.transmissionMap ) {

    				uniforms.transmissionMap.value = material.transmissionMap;

    				refreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );

    			}

    			uniforms.thickness.value = material.thickness;

    			if ( material.thicknessMap ) {

    				uniforms.thicknessMap.value = material.thicknessMap;

    				refreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );

    			}

    			uniforms.attenuationDistance.value = material.attenuationDistance;
    			uniforms.attenuationColor.value.copy( material.attenuationColor );

    		}

    		if ( material.anisotropy > 0 ) {

    			uniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

    			if ( material.anisotropyMap ) {

    				uniforms.anisotropyMap.value = material.anisotropyMap;

    				refreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );

    			}

    		}

    		uniforms.specularIntensity.value = material.specularIntensity;
    		uniforms.specularColor.value.copy( material.specularColor );

    		if ( material.specularColorMap ) {

    			uniforms.specularColorMap.value = material.specularColorMap;

    			refreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );

    		}

    		if ( material.specularIntensityMap ) {

    			uniforms.specularIntensityMap.value = material.specularIntensityMap;

    			refreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );

    		}

    	}

    	function refreshUniformsMatcap( uniforms, material ) {

    		if ( material.matcap ) {

    			uniforms.matcap.value = material.matcap;

    		}

    	}

    	function refreshUniformsDistance( uniforms, material ) {

    		const light = properties.get( material ).light;

    		uniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );
    		uniforms.nearDistance.value = light.shadow.camera.near;
    		uniforms.farDistance.value = light.shadow.camera.far;

    	}

    	return {
    		refreshFogUniforms: refreshFogUniforms,
    		refreshMaterialUniforms: refreshMaterialUniforms
    	};

    }

    function WebGLUniformsGroups( gl, info, capabilities, state ) {

    	let buffers = {};
    	let updateList = {};
    	let allocatedBindingPoints = [];

    	const maxBindingPoints = gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ); // binding points are global whereas block indices are per shader program

    	function bind( uniformsGroup, program ) {

    		const webglProgram = program.program;
    		state.uniformBlockBinding( uniformsGroup, webglProgram );

    	}

    	function update( uniformsGroup, program ) {

    		let buffer = buffers[ uniformsGroup.id ];

    		if ( buffer === undefined ) {

    			prepareUniformsGroup( uniformsGroup );

    			buffer = createBuffer( uniformsGroup );
    			buffers[ uniformsGroup.id ] = buffer;

    			uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );

    		}

    		// ensure to update the binding points/block indices mapping for this program

    		const webglProgram = program.program;
    		state.updateUBOMapping( uniformsGroup, webglProgram );

    		// update UBO once per frame

    		const frame = info.render.frame;

    		if ( updateList[ uniformsGroup.id ] !== frame ) {

    			updateBufferData( uniformsGroup );

    			updateList[ uniformsGroup.id ] = frame;

    		}

    	}

    	function createBuffer( uniformsGroup ) {

    		// the setup of an UBO is independent of a particular shader program but global

    		const bindingPointIndex = allocateBindingPointIndex();
    		uniformsGroup.__bindingPointIndex = bindingPointIndex;

    		const buffer = gl.createBuffer();
    		const size = uniformsGroup.__size;
    		const usage = uniformsGroup.usage;

    		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );
    		gl.bufferData( gl.UNIFORM_BUFFER, size, usage );
    		gl.bindBuffer( gl.UNIFORM_BUFFER, null );
    		gl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );

    		return buffer;

    	}

    	function allocateBindingPointIndex() {

    		for ( let i = 0; i < maxBindingPoints; i ++ ) {

    			if ( allocatedBindingPoints.indexOf( i ) === -1 ) {

    				allocatedBindingPoints.push( i );
    				return i;

    			}

    		}

    		console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );

    		return 0;

    	}

    	function updateBufferData( uniformsGroup ) {

    		const buffer = buffers[ uniformsGroup.id ];
    		const uniforms = uniformsGroup.uniforms;
    		const cache = uniformsGroup.__cache;

    		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );

    		for ( let i = 0, il = uniforms.length; i < il; i ++ ) {

    			const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

    			for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

    				const uniform = uniformArray[ j ];

    				if ( hasUniformChanged( uniform, i, j, cache ) === true ) {

    					const offset = uniform.__offset;

    					const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

    					let arrayOffset = 0;

    					for ( let k = 0; k < values.length; k ++ ) {

    						const value = values[ k ];

    						const info = getUniformSize( value );

    						// TODO add integer and struct support
    						if ( typeof value === 'number' || typeof value === 'boolean' ) {

    							uniform.__data[ 0 ] = value;
    							gl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );

    						} else if ( value.isMatrix3 ) {

    							// manually converting 3x3 to 3x4

    							uniform.__data[ 0 ] = value.elements[ 0 ];
    							uniform.__data[ 1 ] = value.elements[ 1 ];
    							uniform.__data[ 2 ] = value.elements[ 2 ];
    							uniform.__data[ 3 ] = 0;
    							uniform.__data[ 4 ] = value.elements[ 3 ];
    							uniform.__data[ 5 ] = value.elements[ 4 ];
    							uniform.__data[ 6 ] = value.elements[ 5 ];
    							uniform.__data[ 7 ] = 0;
    							uniform.__data[ 8 ] = value.elements[ 6 ];
    							uniform.__data[ 9 ] = value.elements[ 7 ];
    							uniform.__data[ 10 ] = value.elements[ 8 ];
    							uniform.__data[ 11 ] = 0;

    						} else {

    							value.toArray( uniform.__data, arrayOffset );

    							arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;

    						}

    					}

    					gl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );

    				}

    			}

    		}

    		gl.bindBuffer( gl.UNIFORM_BUFFER, null );

    	}

    	function hasUniformChanged( uniform, index, indexArray, cache ) {

    		const value = uniform.value;
    		const indexString = index + '_' + indexArray;

    		if ( cache[ indexString ] === undefined ) {

    			// cache entry does not exist so far

    			if ( typeof value === 'number' || typeof value === 'boolean' ) {

    				cache[ indexString ] = value;

    			} else {

    				cache[ indexString ] = value.clone();

    			}

    			return true;

    		} else {

    			const cachedObject = cache[ indexString ];

    			// compare current value with cached entry

    			if ( typeof value === 'number' || typeof value === 'boolean' ) {

    				if ( cachedObject !== value ) {

    					cache[ indexString ] = value;
    					return true;

    				}

    			} else {

    				if ( cachedObject.equals( value ) === false ) {

    					cachedObject.copy( value );
    					return true;

    				}

    			}

    		}

    		return false;

    	}

    	function prepareUniformsGroup( uniformsGroup ) {

    		// determine total buffer size according to the STD140 layout
    		// Hint: STD140 is the only supported layout in WebGL 2

    		const uniforms = uniformsGroup.uniforms;

    		let offset = 0; // global buffer offset in bytes
    		const chunkSize = 16; // size of a chunk in bytes

    		for ( let i = 0, l = uniforms.length; i < l; i ++ ) {

    			const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

    			for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

    				const uniform = uniformArray[ j ];

    				const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

    				for ( let k = 0, kl = values.length; k < kl; k ++ ) {

    					const value = values[ k ];

    					const info = getUniformSize( value );

    					const chunkOffset = offset % chunkSize; // offset in the current chunk
    					const chunkPadding = chunkOffset % info.boundary; // required padding to match boundary
    					const chunkStart = chunkOffset + chunkPadding; // the start position in the current chunk for the data

    					offset += chunkPadding;

    					// Check for chunk overflow
    					if ( chunkStart !== 0 && ( chunkSize - chunkStart ) < info.storage ) {

    						// Add padding and adjust offset
    						offset += ( chunkSize - chunkStart );

    					}

    					// the following two properties will be used for partial buffer updates
    					uniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );
    					uniform.__offset = offset;

    					// Update the global offset
    					offset += info.storage;

    				}

    			}

    		}

    		// ensure correct final padding

    		const chunkOffset = offset % chunkSize;

    		if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );

    		//

    		uniformsGroup.__size = offset;
    		uniformsGroup.__cache = {};

    		return this;

    	}

    	function getUniformSize( value ) {

    		const info = {
    			boundary: 0, // bytes
    			storage: 0 // bytes
    		};

    		// determine sizes according to STD140

    		if ( typeof value === 'number' || typeof value === 'boolean' ) {

    			// float/int/bool

    			info.boundary = 4;
    			info.storage = 4;

    		} else if ( value.isVector2 ) {

    			// vec2

    			info.boundary = 8;
    			info.storage = 8;

    		} else if ( value.isVector3 || value.isColor ) {

    			// vec3

    			info.boundary = 16;
    			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes

    		} else if ( value.isVector4 ) {

    			// vec4

    			info.boundary = 16;
    			info.storage = 16;

    		} else if ( value.isMatrix3 ) {

    			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)

    			info.boundary = 48;
    			info.storage = 48;

    		} else if ( value.isMatrix4 ) {

    			// mat4

    			info.boundary = 64;
    			info.storage = 64;

    		} else if ( value.isTexture ) {

    			console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );

    		} else {

    			console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );

    		}

    		return info;

    	}

    	function onUniformsGroupsDispose( event ) {

    		const uniformsGroup = event.target;

    		uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );

    		const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
    		allocatedBindingPoints.splice( index, 1 );

    		gl.deleteBuffer( buffers[ uniformsGroup.id ] );

    		delete buffers[ uniformsGroup.id ];
    		delete updateList[ uniformsGroup.id ];

    	}

    	function dispose() {

    		for ( const id in buffers ) {

    			gl.deleteBuffer( buffers[ id ] );

    		}

    		allocatedBindingPoints = [];
    		buffers = {};
    		updateList = {};

    	}

    	return {

    		bind: bind,
    		update: update,

    		dispose: dispose

    	};

    }

    /**
     * This renderer uses WebGL 2 to display scenes.
     *
     * WebGL 1 is not supported since `r163`.
     */
    class WebGLRenderer {

    	/**
    	 * Constructs a new WebGL renderer.
    	 *
    	 * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
    	 */
    	constructor( parameters = {} ) {

    		const {
    			canvas = createCanvasElement(),
    			context = null,
    			depth = true,
    			stencil = false,
    			alpha = false,
    			antialias = false,
    			premultipliedAlpha = true,
    			preserveDrawingBuffer = false,
    			powerPreference = 'default',
    			failIfMajorPerformanceCaveat = false,
    			reverseDepthBuffer = false,
    		} = parameters;

    		/**
    		 * This flag can be used for type testing.
    		 *
    		 * @type {boolean}
    		 * @readonly
    		 * @default true
    		 */
    		this.isWebGLRenderer = true;

    		let _alpha;

    		if ( context !== null ) {

    			if ( typeof WebGLRenderingContext !== 'undefined' && context instanceof WebGLRenderingContext ) {

    				throw new Error( 'THREE.WebGLRenderer: WebGL 1 is not supported since r163.' );

    			}

    			_alpha = context.getContextAttributes().alpha;

    		} else {

    			_alpha = alpha;

    		}

    		const uintClearColor = new Uint32Array( 4 );
    		const intClearColor = new Int32Array( 4 );

    		let currentRenderList = null;
    		let currentRenderState = null;

    		// render() can be called from within a callback triggered by another render.
    		// We track this so that the nested render call gets its list and state isolated from the parent render call.

    		const renderListStack = [];
    		const renderStateStack = [];

    		// public properties

    		/**
    		 * A canvas where the renderer draws its output.This is automatically created by the renderer
    		 * in the constructor (if not provided already); you just need to add it to your page like so:
    		 * ```js
    		 * document.body.appendChild( renderer.domElement );
    		 * ```
    		 *
    		 * @type {DOMElement}
    		 */
    		this.domElement = canvas;

    		/**
    		 * A object with debug configuration settings.
    		 *
    		 * - `checkShaderErrors`: If it is `true`, defines whether material shader programs are
    		 * checked for errors during compilation and linkage process. It may be useful to disable
    		 * this check in production for performance gain. It is strongly recommended to keep these
    		 * checks enabled during development. If the shader does not compile and link - it will not
    		 * work and associated material will not render.
    		 * - `onShaderError(gl, program, glVertexShader,glFragmentShader)`: A callback function that
    		 * can be used for custom error reporting. The callback receives the WebGL context, an instance
    		 * of WebGLProgram as well two instances of WebGLShader representing the vertex and fragment shader.
    		 * Assigning a custom function disables the default error reporting.
    		 *
    		 * @type {Object}
    		 */
    		this.debug = {

    			/**
    			 * Enables error checking and reporting when shader programs are being compiled.
    			 * @type {boolean}
    			 */
    			checkShaderErrors: true,
    			/**
    			 * Callback for custom error reporting.
    			 * @type {?Function}
    			 */
    			onShaderError: null
    		};

    		// clearing

    		/**
    		 * Whether the renderer should automatically clear its output before rendering a frame or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.autoClear = true;

    		/**
    		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
    		 * the color buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.autoClearColor = true;

    		/**
    		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
    		 * the depth buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.autoClearDepth = true;

    		/**
    		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
    		 * the stencil buffer or not.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.autoClearStencil = true;

    		// scene graph

    		/**
    		 * Whether the renderer should sort objects or not.
    		 *
    		 * Note: Sorting is used to attempt to properly render objects that have some
    		 * degree of transparency. By definition, sorting objects may not work in all
    		 * cases. Depending on the needs of application, it may be necessary to turn
    		 * off sorting and use other methods to deal with transparency rendering e.g.
    		 * manually determining each object's rendering order.
    		 *
    		 * @type {boolean}
    		 * @default true
    		 */
    		this.sortObjects = true;

    		// user-defined clipping

    		/**
    		 * User-defined clipping planes specified in world space. These planes apply globally.
    		 * Points in space whose dot product with the plane is negative are cut away.
    		 *
    		 * @type {Array<Plane>}
    		 */
    		this.clippingPlanes = [];

    		/**
    		 * Whether the renderer respects object-level clipping planes or not.
    		 *
    		 * @type {boolean}
    		 * @default false
    		 */
    		this.localClippingEnabled = false;

    		// tone mapping

    		/**
    		 * The tone mapping technique of the renderer.
    		 *
    		 * @type {(NoToneMapping|LinearToneMapping|ReinhardToneMapping|CineonToneMapping|ACESFilmicToneMapping|CustomToneMapping|AgXToneMapping|NeutralToneMapping)}
    		 * @default NoToneMapping
    		 */
    		this.toneMapping = NoToneMapping;

    		/**
    		 * Exposure level of tone mapping.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.toneMappingExposure = 1.0;

    		// transmission

    		/**
    		 * The normalized resolution scale for the transmission render target, measured in percentage
    		 * of viewport dimensions. Lowering this value can result in significant performance improvements
    		 * when using {@link MeshPhysicalMaterial#transmission}.
    		 *
    		 * @type {number}
    		 * @default 1
    		 */
    		this.transmissionResolutionScale = 1.0;

    		// internal properties

    		const _this = this;

    		let _isContextLost = false;

    		// internal state cache

    		this._outputColorSpace = SRGBColorSpace;

    		let _currentActiveCubeFace = 0;
    		let _currentActiveMipmapLevel = 0;
    		let _currentRenderTarget = null;
    		let _currentMaterialId = -1;

    		let _currentCamera = null;

    		const _currentViewport = new Vector4();
    		const _currentScissor = new Vector4();
    		let _currentScissorTest = null;

    		const _currentClearColor = new Color( 0x000000 );
    		let _currentClearAlpha = 0;

    		//

    		let _width = canvas.width;
    		let _height = canvas.height;

    		let _pixelRatio = 1;
    		let _opaqueSort = null;
    		let _transparentSort = null;

    		const _viewport = new Vector4( 0, 0, _width, _height );
    		const _scissor = new Vector4( 0, 0, _width, _height );
    		let _scissorTest = false;

    		// frustum

    		const _frustum = new Frustum();

    		// clipping

    		let _clippingEnabled = false;
    		let _localClippingEnabled = false;

    		// camera matrices cache

    		const _currentProjectionMatrix = new Matrix4();
    		const _projScreenMatrix = new Matrix4();

    		const _vector3 = new Vector3();

    		const _vector4 = new Vector4();

    		const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

    		let _renderBackground = false;

    		function getTargetPixelRatio() {

    			return _currentRenderTarget === null ? _pixelRatio : 1;

    		}

    		// initialize

    		let _gl = context;

    		function getContext( contextName, contextAttributes ) {

    			return canvas.getContext( contextName, contextAttributes );

    		}

    		try {

    			const contextAttributes = {
    				alpha: true,
    				depth,
    				stencil,
    				antialias,
    				premultipliedAlpha,
    				preserveDrawingBuffer,
    				powerPreference,
    				failIfMajorPerformanceCaveat,
    			};

    			// OffscreenCanvas does not have setAttribute, see #22811
    			if ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );

    			// event listeners must be registered before WebGL context is created, see #12753
    			canvas.addEventListener( 'webglcontextlost', onContextLost, false );
    			canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
    			canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

    			if ( _gl === null ) {

    				const contextName = 'webgl2';

    				_gl = getContext( contextName, contextAttributes );

    				if ( _gl === null ) {

    					if ( getContext( contextName ) ) {

    						throw new Error( 'Error creating WebGL context with your selected attributes.' );

    					} else {

    						throw new Error( 'Error creating WebGL context.' );

    					}

    				}

    			}

    		} catch ( error ) {

    			console.error( 'THREE.WebGLRenderer: ' + error.message );
    			throw error;

    		}

    		let extensions, capabilities, state, info;
    		let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    		let programCache, materials, renderLists, renderStates, clipping, shadowMap;

    		let background, morphtargets, bufferRenderer, indexedBufferRenderer;

    		let utils, bindingStates, uniformsGroups;

    		function initGLContext() {

    			extensions = new WebGLExtensions( _gl );
    			extensions.init();

    			utils = new WebGLUtils( _gl, extensions );

    			capabilities = new WebGLCapabilities( _gl, extensions, parameters, utils );

    			state = new WebGLState( _gl, extensions );

    			if ( capabilities.reverseDepthBuffer && reverseDepthBuffer ) {

    				state.buffers.depth.setReversed( true );

    			}

    			info = new WebGLInfo( _gl );
    			properties = new WebGLProperties();
    			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
    			cubemaps = new WebGLCubeMaps( _this );
    			cubeuvmaps = new WebGLCubeUVMaps( _this );
    			attributes = new WebGLAttributes( _gl );
    			bindingStates = new WebGLBindingStates( _gl, attributes );
    			geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
    			objects = new WebGLObjects( _gl, geometries, attributes, info );
    			morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
    			clipping = new WebGLClipping( properties );
    			programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
    			materials = new WebGLMaterials( _this, properties );
    			renderLists = new WebGLRenderLists();
    			renderStates = new WebGLRenderStates( extensions );
    			background = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );
    			shadowMap = new WebGLShadowMap( _this, objects, capabilities );
    			uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );

    			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info );
    			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );

    			info.programs = programCache.programs;

    			/**
    			 * Holds details about the capabilities of the current rendering context.
    			 *
    			 * @name WebGLRenderer#capabilities
    			 * @type {WebGLRenderer~Capabilities}
    			 */
    			_this.capabilities = capabilities;

    			/**
    			 * Provides methods for retrieving and testing WebGL extensions.
    			 *
    			 * - `get(extensionName:string)`: Used to check whether a WebGL extension is supported
    			 * and return the extension object if available.
    			 * - `has(extensionName:string)`: returns `true` if the extension is supported.
    			 *
    			 * @name WebGLRenderer#extensions
    			 * @type {Object}
    			 */
    			_this.extensions = extensions;

    			/**
    			 * Used to track properties of other objects like native WebGL objects.
    			 *
    			 * @name WebGLRenderer#properties
    			 * @type {Object}
    			 */
    			_this.properties = properties;

    			/**
    			 * Manages the render lists of the renderer.
    			 *
    			 * @name WebGLRenderer#renderLists
    			 * @type {Object}
    			 */
    			_this.renderLists = renderLists;



    			/**
    			 * Interface for managing shadows.
    			 *
    			 * @name WebGLRenderer#shadowMap
    			 * @type {WebGLRenderer~ShadowMap}
    			 */
    			_this.shadowMap = shadowMap;

    			/**
    			 * Interface for managing the WebGL state.
    			 *
    			 * @name WebGLRenderer#state
    			 * @type {Object}
    			 */
    			_this.state = state;

    			/**
    			 * Holds a series of statistical information about the GPU memory
    			 * and the rendering process. Useful for debugging and monitoring.
    			 *
    			 * By default these data are reset at each render call but when having
    			 * multiple render passes per frame (e.g. when using post processing) it can
    			 * be preferred to reset with a custom pattern. First, set `autoReset` to
    			 * `false`.
    			 * ```js
    			 * renderer.info.autoReset = false;
    			 * ```
    			 * Call `reset()` whenever you have finished to render a single frame.
    			 * ```js
    			 * renderer.info.reset();
    			 * ```
    			 *
    			 * @name WebGLRenderer#info
    			 * @type {WebGLRenderer~Info}
    			 */
    			_this.info = info;

    		}

    		initGLContext();

    		// xr

    		const xr = new WebXRManager( _this, _gl );

    		/**
    		 * A reference to the XR manager.
    		 *
    		 * @type {WebXRManager}
    		 */
    		this.xr = xr;

    		/**
    		 * Returns the rendering context.
    		 *
    		 * @return {WebGL2RenderingContext} The rendering context.
    		 */
    		this.getContext = function () {

    			return _gl;

    		};

    		/**
    		 * Returns the rendering context attributes.
    		 *
    		 * @return {WebGLContextAttributes} The rendering context attributes.
    		 */
    		this.getContextAttributes = function () {

    			return _gl.getContextAttributes();

    		};

    		/**
    		 * Simulates a loss of the WebGL context. This requires support for the `WEBGL_lose_context` extension.
    		 */
    		this.forceContextLoss = function () {

    			const extension = extensions.get( 'WEBGL_lose_context' );
    			if ( extension ) extension.loseContext();

    		};

    		/**
    		 * Simulates a restore of the WebGL context. This requires support for the `WEBGL_lose_context` extension.
    		 */
    		this.forceContextRestore = function () {

    			const extension = extensions.get( 'WEBGL_lose_context' );
    			if ( extension ) extension.restoreContext();

    		};

    		/**
    		 * Returns the pixel ratio.
    		 *
    		 * @return {number} The pixel ratio.
    		 */
    		this.getPixelRatio = function () {

    			return _pixelRatio;

    		};

    		/**
    		 * Sets the given pixel ratio and resizes the canvas if necessary.
    		 *
    		 * @param {number} value - The pixel ratio.
    		 */
    		this.setPixelRatio = function ( value ) {

    			if ( value === undefined ) return;

    			_pixelRatio = value;

    			this.setSize( _width, _height, false );

    		};

    		/**
    		 * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.
    		 *
    		 * @param {Vector2} target - The method writes the result in this target object.
    		 * @return {Vector2} The renderer's size in logical pixels.
    		 */
    		this.getSize = function ( target ) {

    			return target.set( _width, _height );

    		};

    		/**
    		 * Resizes the output canvas to (width, height) with device pixel ratio taken
    		 * into account, and also sets the viewport to fit that size, starting in (0,
    		 * 0). Setting `updateStyle` to false prevents any style changes to the output canvas.
    		 *
    		 * @param {number} width - The width in logical pixels.
    		 * @param {number} height - The height in logical pixels.
    		 * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.
    		 */
    		this.setSize = function ( width, height, updateStyle = true ) {

    			if ( xr.isPresenting ) {

    				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
    				return;

    			}

    			_width = width;
    			_height = height;

    			canvas.width = Math.floor( width * _pixelRatio );
    			canvas.height = Math.floor( height * _pixelRatio );

    			if ( updateStyle === true ) {

    				canvas.style.width = width + 'px';
    				canvas.style.height = height + 'px';

    			}

    			this.setViewport( 0, 0, width, height );

    		};

    		/**
    		 * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.
    		 *
    		 * @param {Vector2} target - The method writes the result in this target object.
    		 * @return {Vector2} The drawing buffer size.
    		 */
    		this.getDrawingBufferSize = function ( target ) {

    			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

    		};

    		/**
    		 * This method allows to define the drawing buffer size by specifying
    		 * width, height and pixel ratio all at once. The size of the drawing
    		 * buffer is computed with this formula:
    		 * ```js
    		 * size.x = width * pixelRatio;
    		 * size.y = height * pixelRatio;
    		 * ```
    		 *
    		 * @param {number} width - The width in logical pixels.
    		 * @param {number} height - The height in logical pixels.
    		 * @param {number} pixelRatio - The pixel ratio.
    		 */
    		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

    			_width = width;
    			_height = height;

    			_pixelRatio = pixelRatio;

    			canvas.width = Math.floor( width * pixelRatio );
    			canvas.height = Math.floor( height * pixelRatio );

    			this.setViewport( 0, 0, width, height );

    		};

    		/**
    		 * Returns the current viewport definition.
    		 *
    		 * @param {Vector2} target - The method writes the result in this target object.
    		 * @return {Vector2} The current viewport definition.
    		 */
    		this.getCurrentViewport = function ( target ) {

    			return target.copy( _currentViewport );

    		};

    		/**
    		 * Returns the viewport definition.
    		 *
    		 * @param {Vector4} target - The method writes the result in this target object.
    		 * @return {Vector4} The viewport definition.
    		 */
    		this.getViewport = function ( target ) {

    			return target.copy( _viewport );

    		};

    		/**
    		 * Sets the viewport to render from `(x, y)` to `(x + width, y + height)`.
    		 *
    		 * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.
    		 * Or alternatively a four-component vector specifying all the parameters of the viewport.
    		 * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.
    		 * @param {number} width - The width of the viewport in logical pixel unit.
    		 * @param {number} height - The height of the viewport in logical pixel unit.
    		 */
    		this.setViewport = function ( x, y, width, height ) {

    			if ( x.isVector4 ) {

    				_viewport.set( x.x, x.y, x.z, x.w );

    			} else {

    				_viewport.set( x, y, width, height );

    			}

    			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).round() );

    		};

    		/**
    		 * Returns the scissor region.
    		 *
    		 * @param {Vector4} target - The method writes the result in this target object.
    		 * @return {Vector4} The scissor region.
    		 */
    		this.getScissor = function ( target ) {

    			return target.copy( _scissor );

    		};

    		/**
    		 * Sets the scissor region to render from `(x, y)` to `(x + width, y + height)`.
    		 *
    		 * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the scissor region origin in logical pixel unit.
    		 * Or alternatively a four-component vector specifying all the parameters of the scissor region.
    		 * @param {number} y - The vertical coordinate for the lower left corner of the scissor region origin  in logical pixel unit.
    		 * @param {number} width - The width of the scissor region in logical pixel unit.
    		 * @param {number} height - The height of the scissor region in logical pixel unit.
    		 */
    		this.setScissor = function ( x, y, width, height ) {

    			if ( x.isVector4 ) {

    				_scissor.set( x.x, x.y, x.z, x.w );

    			} else {

    				_scissor.set( x, y, width, height );

    			}

    			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).round() );

    		};

    		/**
    		 * Returns `true` if the scissor test is enabled.
    		 *
    		 * @return {boolean} Whether the scissor test is enabled or not.
    		 */
    		this.getScissorTest = function () {

    			return _scissorTest;

    		};

    		/**
    		 * Enable or disable the scissor test. When this is enabled, only the pixels
    		 * within the defined scissor area will be affected by further renderer
    		 * actions.
    		 *
    		 * @param {boolean} boolean - Whether the scissor test is enabled or not.
    		 */
    		this.setScissorTest = function ( boolean ) {

    			state.setScissorTest( _scissorTest = boolean );

    		};

    		/**
    		 * Sets a custom opaque sort function for the render lists. Pass `null`
    		 * to use the default `painterSortStable` function.
    		 *
    		 * @param {?Function} method - The opaque sort function.
    		 */
    		this.setOpaqueSort = function ( method ) {

    			_opaqueSort = method;

    		};

    		/**
    		 * Sets a custom transparent sort function for the render lists. Pass `null`
    		 * to use the default `reversePainterSortStable` function.
    		 *
    		 * @param {?Function} method - The opaque sort function.
    		 */
    		this.setTransparentSort = function ( method ) {

    			_transparentSort = method;

    		};

    		// Clearing

    		/**
    		 * Returns the clear color.
    		 *
    		 * @param {Color} target - The method writes the result in this target object.
    		 * @return {Color} The clear color.
    		 */
    		this.getClearColor = function ( target ) {

    			return target.copy( background.getClearColor() );

    		};

    		/**
    		 * Sets the clear color and alpha.
    		 *
    		 * @param {Color} color - The clear color.
    		 * @param {number} [alpha=1] - The clear alpha.
    		 */
    		this.setClearColor = function () {

    			background.setClearColor( ...arguments );

    		};

    		/**
    		 * Returns the clear alpha. Ranges within `[0,1]`.
    		 *
    		 * @return {number} The clear alpha.
    		 */
    		this.getClearAlpha = function () {

    			return background.getClearAlpha();

    		};

    		/**
    		 * Sets the clear alpha.
    		 *
    		 * @param {number} alpha - The clear alpha.
    		 */
    		this.setClearAlpha = function () {

    			background.setClearAlpha( ...arguments );

    		};

    		/**
    		 * Tells the renderer to clear its color, depth or stencil drawing buffer(s).
    		 * This method initializes the buffers to the current clear color values.
    		 *
    		 * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
    		 * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
    		 * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
    		 */
    		this.clear = function ( color = true, depth = true, stencil = true ) {

    			let bits = 0;

    			if ( color ) {

    				// check if we're trying to clear an integer target
    				let isIntegerFormat = false;
    				if ( _currentRenderTarget !== null ) {

    					const targetFormat = _currentRenderTarget.texture.format;
    					isIntegerFormat = targetFormat === RGBAIntegerFormat ||
    						targetFormat === RGIntegerFormat ||
    						targetFormat === RedIntegerFormat;

    				}

    				// use the appropriate clear functions to clear the target if it's a signed
    				// or unsigned integer target
    				if ( isIntegerFormat ) {

    					const targetType = _currentRenderTarget.texture.type;
    					const isUnsignedType = targetType === UnsignedByteType ||
    						targetType === UnsignedIntType ||
    						targetType === UnsignedShortType ||
    						targetType === UnsignedInt248Type ||
    						targetType === UnsignedShort4444Type ||
    						targetType === UnsignedShort5551Type;

    					const clearColor = background.getClearColor();
    					const a = background.getClearAlpha();
    					const r = clearColor.r;
    					const g = clearColor.g;
    					const b = clearColor.b;

    					if ( isUnsignedType ) {

    						uintClearColor[ 0 ] = r;
    						uintClearColor[ 1 ] = g;
    						uintClearColor[ 2 ] = b;
    						uintClearColor[ 3 ] = a;
    						_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );

    					} else {

    						intClearColor[ 0 ] = r;
    						intClearColor[ 1 ] = g;
    						intClearColor[ 2 ] = b;
    						intClearColor[ 3 ] = a;
    						_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );

    					}

    				} else {

    					bits |= _gl.COLOR_BUFFER_BIT;

    				}

    			}

    			if ( depth ) {

    				bits |= _gl.DEPTH_BUFFER_BIT;

    			}

    			if ( stencil ) {

    				bits |= _gl.STENCIL_BUFFER_BIT;
    				this.state.buffers.stencil.setMask( 0xffffffff );

    			}

    			_gl.clear( bits );

    		};

    		/**
    		 * Clears the color buffer. Equivalent to calling `renderer.clear( true, false, false )`.
    		 */
    		this.clearColor = function () {

    			this.clear( true, false, false );

    		};

    		/**
    		 * Clears the depth buffer. Equivalent to calling `renderer.clear( false, true, false )`.
    		 */
    		this.clearDepth = function () {

    			this.clear( false, true, false );

    		};

    		/**
    		 * Clears the stencil buffer. Equivalent to calling `renderer.clear( false, false, true )`.
    		 */
    		this.clearStencil = function () {

    			this.clear( false, false, true );

    		};

    		/**
    		 * Frees the GPU-related resources allocated by this instance. Call this
    		 * method whenever this instance is no longer used in your app.
    		 */
    		this.dispose = function () {

    			canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
    			canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
    			canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

    			background.dispose();
    			renderLists.dispose();
    			renderStates.dispose();
    			properties.dispose();
    			cubemaps.dispose();
    			cubeuvmaps.dispose();
    			objects.dispose();
    			bindingStates.dispose();
    			uniformsGroups.dispose();
    			programCache.dispose();

    			xr.dispose();

    			xr.removeEventListener( 'sessionstart', onXRSessionStart );
    			xr.removeEventListener( 'sessionend', onXRSessionEnd );

    			animation.stop();

    		};

    		// Events

    		function onContextLost( event ) {

    			event.preventDefault();

    			console.log( 'THREE.WebGLRenderer: Context Lost.' );

    			_isContextLost = true;

    		}

    		function onContextRestore( /* event */ ) {

    			console.log( 'THREE.WebGLRenderer: Context Restored.' );

    			_isContextLost = false;

    			const infoAutoReset = info.autoReset;
    			const shadowMapEnabled = shadowMap.enabled;
    			const shadowMapAutoUpdate = shadowMap.autoUpdate;
    			const shadowMapNeedsUpdate = shadowMap.needsUpdate;
    			const shadowMapType = shadowMap.type;

    			initGLContext();

    			info.autoReset = infoAutoReset;
    			shadowMap.enabled = shadowMapEnabled;
    			shadowMap.autoUpdate = shadowMapAutoUpdate;
    			shadowMap.needsUpdate = shadowMapNeedsUpdate;
    			shadowMap.type = shadowMapType;

    		}

    		function onContextCreationError( event ) {

    			console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

    		}

    		function onMaterialDispose( event ) {

    			const material = event.target;

    			material.removeEventListener( 'dispose', onMaterialDispose );

    			deallocateMaterial( material );

    		}

    		// Buffer deallocation

    		function deallocateMaterial( material ) {

    			releaseMaterialProgramReferences( material );

    			properties.remove( material );

    		}


    		function releaseMaterialProgramReferences( material ) {

    			const programs = properties.get( material ).programs;

    			if ( programs !== undefined ) {

    				programs.forEach( function ( program ) {

    					programCache.releaseProgram( program );

    				} );

    				if ( material.isShaderMaterial ) {

    					programCache.releaseShaderCache( material );

    				}

    			}

    		}

    		// Buffer rendering

    		this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

    			if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

    			const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

    			const program = setProgram( camera, scene, geometry, material, object );

    			state.setMaterial( material, frontFaceCW );

    			//

    			let index = geometry.index;
    			let rangeFactor = 1;

    			if ( material.wireframe === true ) {

    				index = geometries.getWireframeAttribute( geometry );

    				if ( index === undefined ) return;

    				rangeFactor = 2;

    			}

    			//

    			const drawRange = geometry.drawRange;
    			const position = geometry.attributes.position;

    			let drawStart = drawRange.start * rangeFactor;
    			let drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;

    			if ( group !== null ) {

    				drawStart = Math.max( drawStart, group.start * rangeFactor );
    				drawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );

    			}

    			if ( index !== null ) {

    				drawStart = Math.max( drawStart, 0 );
    				drawEnd = Math.min( drawEnd, index.count );

    			} else if ( position !== undefined && position !== null ) {

    				drawStart = Math.max( drawStart, 0 );
    				drawEnd = Math.min( drawEnd, position.count );

    			}

    			const drawCount = drawEnd - drawStart;

    			if ( drawCount < 0 || drawCount === Infinity ) return;

    			//

    			bindingStates.setup( object, material, program, geometry, index );

    			let attribute;
    			let renderer = bufferRenderer;

    			if ( index !== null ) {

    				attribute = attributes.get( index );

    				renderer = indexedBufferRenderer;
    				renderer.setIndex( attribute );

    			}

    			//

    			if ( object.isMesh ) {

    				if ( material.wireframe === true ) {

    					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
    					renderer.setMode( _gl.LINES );

    				} else {

    					renderer.setMode( _gl.TRIANGLES );

    				}

    			} else if ( object.isLine ) {

    				let lineWidth = material.linewidth;

    				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

    				state.setLineWidth( lineWidth * getTargetPixelRatio() );

    				if ( object.isLineSegments ) {

    					renderer.setMode( _gl.LINES );

    				} else if ( object.isLineLoop ) {

    					renderer.setMode( _gl.LINE_LOOP );

    				} else {

    					renderer.setMode( _gl.LINE_STRIP );

    				}

    			} else if ( object.isPoints ) {

    				renderer.setMode( _gl.POINTS );

    			} else if ( object.isSprite ) {

    				renderer.setMode( _gl.TRIANGLES );

    			}

    			if ( object.isBatchedMesh ) {

    				if ( object._multiDrawInstances !== null ) {

    					// @deprecated, r174
    					warnOnce( 'THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.' );
    					renderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );

    				} else {

    					if ( ! extensions.get( 'WEBGL_multi_draw' ) ) {

    						const starts = object._multiDrawStarts;
    						const counts = object._multiDrawCounts;
    						const drawCount = object._multiDrawCount;
    						const bytesPerElement = index ? attributes.get( index ).bytesPerElement : 1;
    						const uniforms = properties.get( material ).currentProgram.getUniforms();
    						for ( let i = 0; i < drawCount; i ++ ) {

    							uniforms.setValue( _gl, '_gl_DrawID', i );
    							renderer.render( starts[ i ] / bytesPerElement, counts[ i ] );

    						}

    					} else {

    						renderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );

    					}

    				}

    			} else if ( object.isInstancedMesh ) {

    				renderer.renderInstances( drawStart, drawCount, object.count );

    			} else if ( geometry.isInstancedBufferGeometry ) {

    				const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
    				const instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );

    				renderer.renderInstances( drawStart, drawCount, instanceCount );

    			} else {

    				renderer.render( drawStart, drawCount );

    			}

    		};

    		// Compile

    		function prepareMaterial( material, scene, object ) {

    			if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

    				material.side = BackSide;
    				material.needsUpdate = true;
    				getProgram( material, scene, object );

    				material.side = FrontSide;
    				material.needsUpdate = true;
    				getProgram( material, scene, object );

    				material.side = DoubleSide;

    			} else {

    				getProgram( material, scene, object );

    			}

    		}

    		/**
    		 * Compiles all materials in the scene with the camera. This is useful to precompile shaders
    		 * before the first rendering. If you want to add a 3D object to an existing scene, use the third
    		 * optional parameter for applying the target scene.
    		 *
    		 * Note that the (target) scene's lighting and environment must be configured before calling this method.
    		 *
    		 * @param {Object3D} scene - The scene or another type of 3D object to precompile.
    		 * @param {Camera} camera - The camera.
    		 * @param {?Scene} [targetScene=null] - The target scene.
    		 * @return {Set<Material>} The precompiled materials.
    		 */
    		this.compile = function ( scene, camera, targetScene = null ) {

    			if ( targetScene === null ) targetScene = scene;

    			currentRenderState = renderStates.get( targetScene );
    			currentRenderState.init( camera );

    			renderStateStack.push( currentRenderState );

    			// gather lights from both the target scene and the new object that will be added to the scene.

    			targetScene.traverseVisible( function ( object ) {

    				if ( object.isLight && object.layers.test( camera.layers ) ) {

    					currentRenderState.pushLight( object );

    					if ( object.castShadow ) {

    						currentRenderState.pushShadow( object );

    					}

    				}

    			} );

    			if ( scene !== targetScene ) {

    				scene.traverseVisible( function ( object ) {

    					if ( object.isLight && object.layers.test( camera.layers ) ) {

    						currentRenderState.pushLight( object );

    						if ( object.castShadow ) {

    							currentRenderState.pushShadow( object );

    						}

    					}

    				} );

    			}

    			currentRenderState.setupLights();

    			// Only initialize materials in the new scene, not the targetScene.

    			const materials = new Set();

    			scene.traverse( function ( object ) {

    				if ( ! ( object.isMesh || object.isPoints || object.isLine || object.isSprite ) ) {

    					return;

    				}

    				const material = object.material;

    				if ( material ) {

    					if ( Array.isArray( material ) ) {

    						for ( let i = 0; i < material.length; i ++ ) {

    							const material2 = material[ i ];

    							prepareMaterial( material2, targetScene, object );
    							materials.add( material2 );

    						}

    					} else {

    						prepareMaterial( material, targetScene, object );
    						materials.add( material );

    					}

    				}

    			} );

    			currentRenderState = renderStateStack.pop();

    			return materials;

    		};

    		// compileAsync

    		/**
    		 * Asynchronous version of {@link WebGLRenderer#compile}.
    		 *
    		 * This method makes use of the `KHR_parallel_shader_compile` WebGL extension. Hence,
    		 * it is recommended to use this version of `compile()` whenever possible.
    		 *
    		 * @async
    		 * @param {Object3D} scene - The scene or another type of 3D object to precompile.
    		 * @param {Camera} camera - The camera.
    		 * @param {?Scene} [targetScene=null] - The target scene.
    		 * @return {Promise} A Promise that resolves when the given scene can be rendered without unnecessary stalling due to shader compilation.
    		 */
    		this.compileAsync = function ( scene, camera, targetScene = null ) {

    			const materials = this.compile( scene, camera, targetScene );

    			// Wait for all the materials in the new object to indicate that they're
    			// ready to be used before resolving the promise.

    			return new Promise( ( resolve ) => {

    				function checkMaterialsReady() {

    					materials.forEach( function ( material ) {

    						const materialProperties = properties.get( material );
    						const program = materialProperties.currentProgram;

    						if ( program.isReady() ) {

    							// remove any programs that report they're ready to use from the list
    							materials.delete( material );

    						}

    					} );

    					// once the list of compiling materials is empty, call the callback

    					if ( materials.size === 0 ) {

    						resolve( scene );
    						return;

    					}

    					// if some materials are still not ready, wait a bit and check again

    					setTimeout( checkMaterialsReady, 10 );

    				}

    				if ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {

    					// If we can check the compilation status of the materials without
    					// blocking then do so right away.

    					checkMaterialsReady();

    				} else {

    					// Otherwise start by waiting a bit to give the materials we just
    					// initialized a chance to finish.

    					setTimeout( checkMaterialsReady, 10 );

    				}

    			} );

    		};

    		// Animation Loop

    		let onAnimationFrameCallback = null;

    		function onAnimationFrame( time ) {

    			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

    		}

    		function onXRSessionStart() {

    			animation.stop();

    		}

    		function onXRSessionEnd() {

    			animation.start();

    		}

    		const animation = new WebGLAnimation();
    		animation.setAnimationLoop( onAnimationFrame );

    		if ( typeof self !== 'undefined' ) animation.setContext( self );

    		this.setAnimationLoop = function ( callback ) {

    			onAnimationFrameCallback = callback;
    			xr.setAnimationLoop( callback );

    			( callback === null ) ? animation.stop() : animation.start();

    		};

    		xr.addEventListener( 'sessionstart', onXRSessionStart );
    		xr.addEventListener( 'sessionend', onXRSessionEnd );

    		// Rendering

    		/**
    		 * Renders the given scene (or other type of 3D object) using the given camera.
    		 *
    		 * The render is done to a previously specified render target set by calling {@link WebGLRenderer#setRenderTarget}
    		 * or to the canvas as usual.
    		 *
    		 * By default render buffers are cleared before rendering but you can prevent
    		 * this by setting the property `autoClear` to `false`. If you want to prevent
    		 * only certain buffers being cleared you can `autoClearColor`, `autoClearDepth`
    		 * or `autoClearStencil` to `false`. To force a clear, use {@link WebGLRenderer#clear}.
    		 *
    		 * @param {Object3D} scene - The scene to render.
    		 * @param {Camera} camera - The camera.
    		 */
    		this.render = function ( scene, camera ) {

    			if ( camera !== undefined && camera.isCamera !== true ) {

    				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
    				return;

    			}

    			if ( _isContextLost === true ) return;

    			// update scene graph

    			if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

    			// update camera matrices and frustum

    			if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

    			if ( xr.enabled === true && xr.isPresenting === true ) {

    				if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

    				camera = xr.getCamera(); // use XR camera for rendering

    			}

    			//
    			if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

    			currentRenderState = renderStates.get( scene, renderStateStack.length );
    			currentRenderState.init( camera );

    			renderStateStack.push( currentRenderState );

    			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    			_frustum.setFromProjectionMatrix( _projScreenMatrix );

    			_localClippingEnabled = this.localClippingEnabled;
    			_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );

    			currentRenderList = renderLists.get( scene, renderListStack.length );
    			currentRenderList.init();

    			renderListStack.push( currentRenderList );

    			if ( xr.enabled === true && xr.isPresenting === true ) {

    				const depthSensingMesh = _this.xr.getDepthSensingMesh();

    				if ( depthSensingMesh !== null ) {

    					projectObject( depthSensingMesh, camera, - Infinity, _this.sortObjects );

    				}

    			}

    			projectObject( scene, camera, 0, _this.sortObjects );

    			currentRenderList.finish();

    			if ( _this.sortObjects === true ) {

    				currentRenderList.sort( _opaqueSort, _transparentSort );

    			}

    			_renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
    			if ( _renderBackground ) {

    				background.addToRenderList( currentRenderList, scene );

    			}

    			//

    			this.info.render.frame ++;

    			if ( _clippingEnabled === true ) clipping.beginShadows();

    			const shadowsArray = currentRenderState.state.shadowsArray;

    			shadowMap.render( shadowsArray, scene, camera );

    			if ( _clippingEnabled === true ) clipping.endShadows();

    			//

    			if ( this.info.autoReset === true ) this.info.reset();

    			// render scene

    			const opaqueObjects = currentRenderList.opaque;
    			const transmissiveObjects = currentRenderList.transmissive;

    			currentRenderState.setupLights();

    			if ( camera.isArrayCamera ) {

    				const cameras = camera.cameras;

    				if ( transmissiveObjects.length > 0 ) {

    					for ( let i = 0, l = cameras.length; i < l; i ++ ) {

    						const camera2 = cameras[ i ];

    						renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera2 );

    					}

    				}

    				if ( _renderBackground ) background.render( scene );

    				for ( let i = 0, l = cameras.length; i < l; i ++ ) {

    					const camera2 = cameras[ i ];

    					renderScene( currentRenderList, scene, camera2, camera2.viewport );

    				}

    			} else {

    				if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );

    				if ( _renderBackground ) background.render( scene );

    				renderScene( currentRenderList, scene, camera );

    			}

    			//

    			if ( _currentRenderTarget !== null && _currentActiveMipmapLevel === 0 ) {

    				// resolve multisample renderbuffers to a single-sample texture if necessary

    				textures.updateMultisampleRenderTarget( _currentRenderTarget );

    				// Generate mipmap if we're using any kind of mipmap filtering

    				textures.updateRenderTargetMipmap( _currentRenderTarget );

    			}

    			//

    			if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

    			// _gl.finish();

    			bindingStates.resetDefaultState();
    			_currentMaterialId = -1;
    			_currentCamera = null;

    			renderStateStack.pop();

    			if ( renderStateStack.length > 0 ) {

    				currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

    				if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, currentRenderState.state.camera );

    			} else {

    				currentRenderState = null;

    			}

    			renderListStack.pop();

    			if ( renderListStack.length > 0 ) {

    				currentRenderList = renderListStack[ renderListStack.length - 1 ];

    			} else {

    				currentRenderList = null;

    			}

    		};

    		function projectObject( object, camera, groupOrder, sortObjects ) {

    			if ( object.visible === false ) return;

    			const visible = object.layers.test( camera.layers );

    			if ( visible ) {

    				if ( object.isGroup ) {

    					groupOrder = object.renderOrder;

    				} else if ( object.isLOD ) {

    					if ( object.autoUpdate === true ) object.update( camera );

    				} else if ( object.isLight ) {

    					currentRenderState.pushLight( object );

    					if ( object.castShadow ) {

    						currentRenderState.pushShadow( object );

    					}

    				} else if ( object.isSprite ) {

    					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

    						if ( sortObjects ) {

    							_vector4.setFromMatrixPosition( object.matrixWorld )
    								.applyMatrix4( _projScreenMatrix );

    						}

    						const geometry = objects.update( object );
    						const material = object.material;

    						if ( material.visible ) {

    							currentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );

    						}

    					}

    				} else if ( object.isMesh || object.isLine || object.isPoints ) {

    					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

    						const geometry = objects.update( object );
    						const material = object.material;

    						if ( sortObjects ) {

    							if ( object.boundingSphere !== undefined ) {

    								if ( object.boundingSphere === null ) object.computeBoundingSphere();
    								_vector4.copy( object.boundingSphere.center );

    							} else {

    								if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    								_vector4.copy( geometry.boundingSphere.center );

    							}

    							_vector4
    								.applyMatrix4( object.matrixWorld )
    								.applyMatrix4( _projScreenMatrix );

    						}

    						if ( Array.isArray( material ) ) {

    							const groups = geometry.groups;

    							for ( let i = 0, l = groups.length; i < l; i ++ ) {

    								const group = groups[ i ];
    								const groupMaterial = material[ group.materialIndex ];

    								if ( groupMaterial && groupMaterial.visible ) {

    									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );

    								}

    							}

    						} else if ( material.visible ) {

    							currentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );

    						}

    					}

    				}

    			}

    			const children = object.children;

    			for ( let i = 0, l = children.length; i < l; i ++ ) {

    				projectObject( children[ i ], camera, groupOrder, sortObjects );

    			}

    		}

    		function renderScene( currentRenderList, scene, camera, viewport ) {

    			const opaqueObjects = currentRenderList.opaque;
    			const transmissiveObjects = currentRenderList.transmissive;
    			const transparentObjects = currentRenderList.transparent;

    			currentRenderState.setupLightsView( camera );

    			if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

    			if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

    			if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
    			if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
    			if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

    			// Ensure depth buffer writing is enabled so it can be cleared on next render

    			state.buffers.depth.setTest( true );
    			state.buffers.depth.setMask( true );
    			state.buffers.color.setMask( true );

    			state.setPolygonOffset( false );

    		}

    		function renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {

    			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

    			if ( overrideMaterial !== null ) {

    				return;

    			}

    			if ( currentRenderState.state.transmissionRenderTarget[ camera.id ] === undefined ) {

    				currentRenderState.state.transmissionRenderTarget[ camera.id ] = new WebGLRenderTarget( 1, 1, {
    					generateMipmaps: true,
    					type: ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) ) ? HalfFloatType : UnsignedByteType,
    					minFilter: LinearMipmapLinearFilter,
    					samples: 4,
    					stencilBuffer: stencil,
    					resolveDepthBuffer: false,
    					resolveStencilBuffer: false,
    					colorSpace: ColorManagement.workingColorSpace,
    				} );

    				// debug

    				/*
    				const geometry = new PlaneGeometry();
    				const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );

    				const mesh = new Mesh( geometry, material );
    				scene.add( mesh );
    				*/

    			}

    			const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[ camera.id ];

    			const activeViewport = camera.viewport || _currentViewport;
    			transmissionRenderTarget.setSize( activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale );

    			//

    			const currentRenderTarget = _this.getRenderTarget();
    			const currentActiveCubeFace = _this.getActiveCubeFace();
    			const currentActiveMipmapLevel = _this.getActiveMipmapLevel();

    			_this.setRenderTarget( transmissionRenderTarget );

    			_this.getClearColor( _currentClearColor );
    			_currentClearAlpha = _this.getClearAlpha();
    			if ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );

    			_this.clear();

    			if ( _renderBackground ) background.render( scene );

    			// Turn off the features which can affect the frag color for opaque objects pass.
    			// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
    			const currentToneMapping = _this.toneMapping;
    			_this.toneMapping = NoToneMapping;

    			// Remove viewport from camera to avoid nested render calls resetting viewport to it (e.g Reflector).
    			// Transmission render pass requires viewport to match the transmissionRenderTarget.
    			const currentCameraViewport = camera.viewport;
    			if ( camera.viewport !== undefined ) camera.viewport = undefined;

    			currentRenderState.setupLightsView( camera );

    			if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

    			renderObjects( opaqueObjects, scene, camera );

    			textures.updateMultisampleRenderTarget( transmissionRenderTarget );
    			textures.updateRenderTargetMipmap( transmissionRenderTarget );

    			if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === false ) { // see #28131

    				let renderTargetNeedsUpdate = false;

    				for ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {

    					const renderItem = transmissiveObjects[ i ];

    					const object = renderItem.object;
    					const geometry = renderItem.geometry;
    					const material = renderItem.material;
    					const group = renderItem.group;

    					if ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {

    						const currentSide = material.side;

    						material.side = BackSide;
    						material.needsUpdate = true;

    						renderObject( object, scene, camera, geometry, material, group );

    						material.side = currentSide;
    						material.needsUpdate = true;

    						renderTargetNeedsUpdate = true;

    					}

    				}

    				if ( renderTargetNeedsUpdate === true ) {

    					textures.updateMultisampleRenderTarget( transmissionRenderTarget );
    					textures.updateRenderTargetMipmap( transmissionRenderTarget );

    				}

    			}

    			_this.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );

    			_this.setClearColor( _currentClearColor, _currentClearAlpha );

    			if ( currentCameraViewport !== undefined ) camera.viewport = currentCameraViewport;

    			_this.toneMapping = currentToneMapping;

    		}

    		function renderObjects( renderList, scene, camera ) {

    			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

    			for ( let i = 0, l = renderList.length; i < l; i ++ ) {

    				const renderItem = renderList[ i ];

    				const object = renderItem.object;
    				const geometry = renderItem.geometry;
    				const group = renderItem.group;
    				let material = renderItem.material;

    				if ( material.allowOverride === true && overrideMaterial !== null ) {

    					material = overrideMaterial;

    				}

    				if ( object.layers.test( camera.layers ) ) {

    					renderObject( object, scene, camera, geometry, material, group );

    				}

    			}

    		}

    		function renderObject( object, scene, camera, geometry, material, group ) {

    			object.onBeforeRender( _this, scene, camera, geometry, material, group );

    			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
    			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

    			material.onBeforeRender( _this, scene, camera, geometry, object, group );

    			if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

    				material.side = BackSide;
    				material.needsUpdate = true;
    				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    				material.side = FrontSide;
    				material.needsUpdate = true;
    				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    				material.side = DoubleSide;

    			} else {

    				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

    			}

    			object.onAfterRender( _this, scene, camera, geometry, material, group );

    		}

    		function getProgram( material, scene, object ) {

    			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    			const materialProperties = properties.get( material );

    			const lights = currentRenderState.state.lights;
    			const shadowsArray = currentRenderState.state.shadowsArray;

    			const lightsStateVersion = lights.state.version;

    			const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
    			const programCacheKey = programCache.getProgramCacheKey( parameters );

    			let programs = materialProperties.programs;

    			// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

    			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    			materialProperties.fog = scene.fog;
    			materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );
    			materialProperties.envMapRotation = ( materialProperties.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;

    			if ( programs === undefined ) {

    				// new material

    				material.addEventListener( 'dispose', onMaterialDispose );

    				programs = new Map();
    				materialProperties.programs = programs;

    			}

    			let program = programs.get( programCacheKey );

    			if ( program !== undefined ) {

    				// early out if program and light state is identical

    				if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

    					updateCommonMaterialProperties( material, parameters );

    					return program;

    				}

    			} else {

    				parameters.uniforms = programCache.getUniforms( material );

    				material.onBeforeCompile( parameters, _this );

    				program = programCache.acquireProgram( parameters, programCacheKey );
    				programs.set( programCacheKey, program );

    				materialProperties.uniforms = parameters.uniforms;

    			}

    			const uniforms = materialProperties.uniforms;

    			if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

    				uniforms.clippingPlanes = clipping.uniform;

    			}

    			updateCommonMaterialProperties( material, parameters );

    			// store the light setup it was created for

    			materialProperties.needsLights = materialNeedsLights( material );
    			materialProperties.lightsStateVersion = lightsStateVersion;

    			if ( materialProperties.needsLights ) {

    				// wire up the material to this renderer's lighting state

    				uniforms.ambientLightColor.value = lights.state.ambient;
    				uniforms.lightProbe.value = lights.state.probe;
    				uniforms.directionalLights.value = lights.state.directional;
    				uniforms.directionalLightShadows.value = lights.state.directionalShadow;
    				uniforms.spotLights.value = lights.state.spot;
    				uniforms.spotLightShadows.value = lights.state.spotShadow;
    				uniforms.rectAreaLights.value = lights.state.rectArea;
    				uniforms.ltc_1.value = lights.state.rectAreaLTC1;
    				uniforms.ltc_2.value = lights.state.rectAreaLTC2;
    				uniforms.pointLights.value = lights.state.point;
    				uniforms.pointLightShadows.value = lights.state.pointShadow;
    				uniforms.hemisphereLights.value = lights.state.hemi;

    				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
    				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
    				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
    				uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
    				uniforms.spotLightMap.value = lights.state.spotLightMap;
    				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
    				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
    				// TODO (abelnation): add area lights shadow info to uniforms

    			}

    			materialProperties.currentProgram = program;
    			materialProperties.uniformsList = null;

    			return program;

    		}

    		function getUniformList( materialProperties ) {

    			if ( materialProperties.uniformsList === null ) {

    				const progUniforms = materialProperties.currentProgram.getUniforms();
    				materialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );

    			}

    			return materialProperties.uniformsList;

    		}

    		function updateCommonMaterialProperties( material, parameters ) {

    			const materialProperties = properties.get( material );

    			materialProperties.outputColorSpace = parameters.outputColorSpace;
    			materialProperties.batching = parameters.batching;
    			materialProperties.batchingColor = parameters.batchingColor;
    			materialProperties.instancing = parameters.instancing;
    			materialProperties.instancingColor = parameters.instancingColor;
    			materialProperties.instancingMorph = parameters.instancingMorph;
    			materialProperties.skinning = parameters.skinning;
    			materialProperties.morphTargets = parameters.morphTargets;
    			materialProperties.morphNormals = parameters.morphNormals;
    			materialProperties.morphColors = parameters.morphColors;
    			materialProperties.morphTargetsCount = parameters.morphTargetsCount;
    			materialProperties.numClippingPlanes = parameters.numClippingPlanes;
    			materialProperties.numIntersection = parameters.numClipIntersection;
    			materialProperties.vertexAlphas = parameters.vertexAlphas;
    			materialProperties.vertexTangents = parameters.vertexTangents;
    			materialProperties.toneMapping = parameters.toneMapping;

    		}

    		function setProgram( camera, scene, geometry, material, object ) {

    			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    			textures.resetTextureUnits();

    			const fog = scene.fog;
    			const environment = material.isMeshStandardMaterial ? scene.environment : null;
    			const colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );
    			const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
    			const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
    			const vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );
    			const morphTargets = !! geometry.morphAttributes.position;
    			const morphNormals = !! geometry.morphAttributes.normal;
    			const morphColors = !! geometry.morphAttributes.color;

    			let toneMapping = NoToneMapping;

    			if ( material.toneMapped ) {

    				if ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {

    					toneMapping = _this.toneMapping;

    				}

    			}

    			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

    			const materialProperties = properties.get( material );
    			const lights = currentRenderState.state.lights;

    			if ( _clippingEnabled === true ) {

    				if ( _localClippingEnabled === true || camera !== _currentCamera ) {

    					const useCache =
    						camera === _currentCamera &&
    						material.id === _currentMaterialId;

    					// we might want to call this function with some ClippingGroup
    					// object instead of the material, once it becomes feasible
    					// (#8465, #8379)
    					clipping.setState( material, camera, useCache );

    				}

    			}

    			//

    			let needsProgramChange = false;

    			if ( material.version === materialProperties.__version ) {

    				if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.outputColorSpace !== colorSpace ) {

    					needsProgramChange = true;

    				} else if ( object.isBatchedMesh && materialProperties.batching === false ) {

    					needsProgramChange = true;

    				} else if ( ! object.isBatchedMesh && materialProperties.batching === true ) {

    					needsProgramChange = true;

    				} else if ( object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null ) {

    					needsProgramChange = true;

    				} else if ( object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null ) {

    					needsProgramChange = true;

    				} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

    					needsProgramChange = true;

    				} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

    					needsProgramChange = true;

    				} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

    					needsProgramChange = true;

    				} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

    					needsProgramChange = true;

    				} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {

    					needsProgramChange = true;

    				} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {

    					needsProgramChange = true;

    				} else if ( object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null ) {

    					needsProgramChange = true;

    				} else if ( object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.envMap !== envMap ) {

    					needsProgramChange = true;

    				} else if ( material.fog === true && materialProperties.fog !== fog ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.numClippingPlanes !== undefined &&
    					( materialProperties.numClippingPlanes !== clipping.numPlanes ||
    					materialProperties.numIntersection !== clipping.numIntersection ) ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.vertexTangents !== vertexTangents ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.morphTargets !== morphTargets ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.morphNormals !== morphNormals ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.morphColors !== morphColors ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.toneMapping !== toneMapping ) {

    					needsProgramChange = true;

    				} else if ( materialProperties.morphTargetsCount !== morphTargetsCount ) {

    					needsProgramChange = true;

    				}

    			} else {

    				needsProgramChange = true;
    				materialProperties.__version = material.version;

    			}

    			//

    			let program = materialProperties.currentProgram;

    			if ( needsProgramChange === true ) {

    				program = getProgram( material, scene, object );

    			}

    			let refreshProgram = false;
    			let refreshMaterial = false;
    			let refreshLights = false;

    			const p_uniforms = program.getUniforms(),
    				m_uniforms = materialProperties.uniforms;

    			if ( state.useProgram( program.program ) ) {

    				refreshProgram = true;
    				refreshMaterial = true;
    				refreshLights = true;

    			}

    			if ( material.id !== _currentMaterialId ) {

    				_currentMaterialId = material.id;

    				refreshMaterial = true;

    			}

    			if ( refreshProgram || _currentCamera !== camera ) {

    				// common camera uniforms

    				const reverseDepthBuffer = state.buffers.depth.getReversed();

    				if ( reverseDepthBuffer ) {

    					_currentProjectionMatrix.copy( camera.projectionMatrix );

    					toNormalizedProjectionMatrix( _currentProjectionMatrix );
    					toReversedProjectionMatrix( _currentProjectionMatrix );

    					p_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );

    				} else {

    					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

    				}

    				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

    				const uCamPos = p_uniforms.map.cameraPosition;

    				if ( uCamPos !== undefined ) {

    					uCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );

    				}

    				if ( capabilities.logarithmicDepthBuffer ) {

    					p_uniforms.setValue( _gl, 'logDepthBufFC',
    						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

    				}

    				// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067

    				if ( material.isMeshPhongMaterial ||
    					material.isMeshToonMaterial ||
    					material.isMeshLambertMaterial ||
    					material.isMeshBasicMaterial ||
    					material.isMeshStandardMaterial ||
    					material.isShaderMaterial ) {

    					p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

    				}

    				if ( _currentCamera !== camera ) {

    					_currentCamera = camera;

    					// lighting uniforms depend on the camera so enforce an update
    					// now, in case this material supports lights - or later, when
    					// the next material that does gets activated:

    					refreshMaterial = true;		// set to true on material change
    					refreshLights = true;		// remains set until update done

    				}

    			}

    			// skinning and morph target uniforms must be set even if material didn't change
    			// auto-setting of texture unit for bone and morph texture must go before other textures
    			// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

    			if ( object.isSkinnedMesh ) {

    				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
    				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

    				const skeleton = object.skeleton;

    				if ( skeleton ) {

    					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

    					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );

    				}

    			}

    			if ( object.isBatchedMesh ) {

    				p_uniforms.setOptional( _gl, object, 'batchingTexture' );
    				p_uniforms.setValue( _gl, 'batchingTexture', object._matricesTexture, textures );

    				p_uniforms.setOptional( _gl, object, 'batchingIdTexture' );
    				p_uniforms.setValue( _gl, 'batchingIdTexture', object._indirectTexture, textures );

    				p_uniforms.setOptional( _gl, object, 'batchingColorTexture' );
    				if ( object._colorsTexture !== null ) {

    					p_uniforms.setValue( _gl, 'batchingColorTexture', object._colorsTexture, textures );

    				}

    			}

    			const morphAttributes = geometry.morphAttributes;

    			if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined ) ) {

    				morphtargets.update( object, geometry, program );

    			}

    			if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

    				materialProperties.receiveShadow = object.receiveShadow;
    				p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

    			}

    			// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512

    			if ( material.isMeshGouraudMaterial && material.envMap !== null ) {

    				m_uniforms.envMap.value = envMap;

    				m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? -1 : 1;

    			}

    			if ( material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null ) {

    				m_uniforms.envMapIntensity.value = scene.environmentIntensity;

    			}

    			if ( refreshMaterial ) {

    				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

    				if ( materialProperties.needsLights ) {

    					// the current material requires lighting info

    					// note: all lighting uniforms are always set correctly
    					// they simply reference the renderer's state for their
    					// values
    					//
    					// use the current material's .needsUpdate flags to set
    					// the GL state when required

    					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

    				}

    				// refresh uniforms common to several materials

    				if ( fog && material.fog === true ) {

    					materials.refreshFogUniforms( m_uniforms, fog );

    				}

    				materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[ camera.id ] );

    				WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );

    			}

    			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

    				WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );
    				material.uniformsNeedUpdate = false;

    			}

    			if ( material.isSpriteMaterial ) {

    				p_uniforms.setValue( _gl, 'center', object.center );

    			}

    			// common matrices

    			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
    			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
    			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

    			// UBOs

    			if ( material.isShaderMaterial || material.isRawShaderMaterial ) {

    				const groups = material.uniformsGroups;

    				for ( let i = 0, l = groups.length; i < l; i ++ ) {

    					const group = groups[ i ];

    					uniformsGroups.update( group, program );
    					uniformsGroups.bind( group, program );

    				}

    			}

    			return program;

    		}

    		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

    		function markUniformsLightsNeedsUpdate( uniforms, value ) {

    			uniforms.ambientLightColor.needsUpdate = value;
    			uniforms.lightProbe.needsUpdate = value;

    			uniforms.directionalLights.needsUpdate = value;
    			uniforms.directionalLightShadows.needsUpdate = value;
    			uniforms.pointLights.needsUpdate = value;
    			uniforms.pointLightShadows.needsUpdate = value;
    			uniforms.spotLights.needsUpdate = value;
    			uniforms.spotLightShadows.needsUpdate = value;
    			uniforms.rectAreaLights.needsUpdate = value;
    			uniforms.hemisphereLights.needsUpdate = value;

    		}

    		function materialNeedsLights( material ) {

    			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
    				material.isMeshStandardMaterial || material.isShadowMaterial ||
    				( material.isShaderMaterial && material.lights === true );

    		}

    		/**
    		 * Returns the active cube face.
    		 *
    		 * @return {number} The active cube face.
    		 */
    		this.getActiveCubeFace = function () {

    			return _currentActiveCubeFace;

    		};

    		/**
    		 * Returns the active mipmap level.
    		 *
    		 * @return {number} The active mipmap level.
    		 */
    		this.getActiveMipmapLevel = function () {

    			return _currentActiveMipmapLevel;

    		};

    		/**
    		 * Returns the active render target.
    		 *
    		 * @return {?WebGLRenderTarget} The active render target. Returns `null` if no render target
    		 * is currently set.
    		 */
    		this.getRenderTarget = function () {

    			return _currentRenderTarget;

    		};

    		this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

    			const renderTargetProperties = properties.get( renderTarget );

    			renderTargetProperties.__autoAllocateDepthBuffer = renderTarget.resolveDepthBuffer === false;
    			if ( renderTargetProperties.__autoAllocateDepthBuffer === false ) {

    				// The multisample_render_to_texture extension doesn't work properly if there
    				// are midframe flushes and an external depth buffer. Disable use of the extension.
    				renderTargetProperties.__useRenderToTexture = false;

    			}

    			properties.get( renderTarget.texture ).__webglTexture = colorTexture;
    			properties.get( renderTarget.depthTexture ).__webglTexture = renderTargetProperties.__autoAllocateDepthBuffer ? undefined : depthTexture;

    			renderTargetProperties.__hasExternalTextures = true;

    		};

    		this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

    			const renderTargetProperties = properties.get( renderTarget );
    			renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
    			renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

    		};

    		const _scratchFrameBuffer = _gl.createFramebuffer();

    		/**
    		 * Sets the active rendertarget.
    		 *
    		 * @param {?WebGLRenderTarget} renderTarget - The render target to set. When `null` is given,
    		 * the canvas is set as the active render target instead.
    		 * @param {number} [activeCubeFace=0] - The active cube face when using a cube render target.
    		 * Indicates the z layer to render in to when using 3D or array render targets.
    		 * @param {number} [activeMipmapLevel=0] - The active mipmap level.
    		 */
    		this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

    			_currentRenderTarget = renderTarget;
    			_currentActiveCubeFace = activeCubeFace;
    			_currentActiveMipmapLevel = activeMipmapLevel;

    			let useDefaultFramebuffer = true;
    			let framebuffer = null;
    			let isCube = false;
    			let isRenderTarget3D = false;

    			if ( renderTarget ) {

    				const renderTargetProperties = properties.get( renderTarget );

    				if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

    					// We need to make sure to rebind the framebuffer.
    					state.bindFramebuffer( _gl.FRAMEBUFFER, null );
    					useDefaultFramebuffer = false;

    				} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

    					textures.setupRenderTarget( renderTarget );

    				} else if ( renderTargetProperties.__hasExternalTextures ) {

    					// Color and depth texture must be rebound in order for the swapchain to update.
    					textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

    				} else if ( renderTarget.depthBuffer ) {

    					// check if the depth texture is already bound to the frame buffer and that it's been initialized
    					const depthTexture = renderTarget.depthTexture;
    					if ( renderTargetProperties.__boundDepthTexture !== depthTexture ) {

    						// check if the depth texture is compatible
    						if (
    							depthTexture !== null &&
    							properties.has( depthTexture ) &&
    							( renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height )
    						) {

    							throw new Error( 'WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.' );

    						}

    						// Swap the depth buffer to the currently attached one
    						textures.setupDepthRenderbuffer( renderTarget );

    					}

    				}

    				const texture = renderTarget.texture;

    				if ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

    					isRenderTarget3D = true;

    				}

    				const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

    				if ( renderTarget.isWebGLCubeRenderTarget ) {

    					if ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {

    						framebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];

    					} else {

    						framebuffer = __webglFramebuffer[ activeCubeFace ];

    					}

    					isCube = true;

    				} else if ( ( renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

    					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

    				} else {

    					if ( Array.isArray( __webglFramebuffer ) ) {

    						framebuffer = __webglFramebuffer[ activeMipmapLevel ];

    					} else {

    						framebuffer = __webglFramebuffer;

    					}

    				}

    				_currentViewport.copy( renderTarget.viewport );
    				_currentScissor.copy( renderTarget.scissor );
    				_currentScissorTest = renderTarget.scissorTest;

    			} else {

    				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
    				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
    				_currentScissorTest = _scissorTest;

    			}

    			// Use a scratch frame buffer if rendering to a mip level to avoid depth buffers
    			// being bound that are different sizes.
    			if ( activeMipmapLevel !== 0 ) {

    				framebuffer = _scratchFrameBuffer;

    			}

    			const framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    			if ( framebufferBound && useDefaultFramebuffer ) {

    				state.drawBuffers( renderTarget, framebuffer );

    			}

    			state.viewport( _currentViewport );
    			state.scissor( _currentScissor );
    			state.setScissorTest( _currentScissorTest );

    			if ( isCube ) {

    				const textureProperties = properties.get( renderTarget.texture );
    				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

    			} else if ( isRenderTarget3D ) {

    				const textureProperties = properties.get( renderTarget.texture );
    				const layer = activeCubeFace;
    				_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer );

    			} else if ( renderTarget !== null && activeMipmapLevel !== 0 ) {

    				// Only bind the frame buffer if we are using a scratch frame buffer to render to a mipmap.
    				// If we rebind the texture when using a multi sample buffer then an error about inconsistent samples will be thrown.
    				const textureProperties = properties.get( renderTarget.texture );
    				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel );

    			}

    			_currentMaterialId = -1; // reset current material to ensure correct uniform bindings

    		};

    		/**
    		 * Reads the pixel data from the given render target into the given buffer.
    		 *
    		 * @param {WebGLRenderTarget} renderTarget - The render target to read from.
    		 * @param {number} x - The `x` coordinate of the copy region's origin.
    		 * @param {number} y - The `y` coordinate of the copy region's origin.
    		 * @param {number} width - The width of the copy region.
    		 * @param {number} height - The height of the copy region.
    		 * @param {TypedArray} buffer - The result buffer.
    		 * @param {number} [activeCubeFaceIndex] - The active cube face index.
    		 * @param {number} [textureIndex=0] - The texture index of an MRT render target.
    		 */
    		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex, textureIndex = 0 ) {

    			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

    				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
    				return;

    			}

    			let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

    			if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

    				framebuffer = framebuffer[ activeCubeFaceIndex ];

    			}

    			if ( framebuffer ) {

    				state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    				try {

    					const texture = renderTarget.textures[ textureIndex ];
    					const textureFormat = texture.format;
    					const textureType = texture.type;

    					if ( ! capabilities.textureFormatReadable( textureFormat ) ) {

    						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
    						return;

    					}

    					if ( ! capabilities.textureTypeReadable( textureType ) ) {

    						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
    						return;

    					}

    					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

    					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

    						// when using MRT, select the correct color buffer for the subsequent read command

    						if ( renderTarget.textures.length > 1 ) _gl.readBuffer( _gl.COLOR_ATTACHMENT0 + textureIndex );

    						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

    					}

    				} finally {

    					// restore framebuffer of current render target if necessary

    					const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
    					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    				}

    			}

    		};

    		/**
    		 * Asynchronous, non-blocking version of {@link WebGLRenderer#readRenderTargetPixels}.
    		 *
    		 * It is recommended to use this version of `readRenderTargetPixels()` whenever possible.
    		 *
    		 * @async
    		 * @param {WebGLRenderTarget} renderTarget - The render target to read from.
    		 * @param {number} x - The `x` coordinate of the copy region's origin.
    		 * @param {number} y - The `y` coordinate of the copy region's origin.
    		 * @param {number} width - The width of the copy region.
    		 * @param {number} height - The height of the copy region.
    		 * @param {TypedArray} buffer - The result buffer.
    		 * @param {number} [activeCubeFaceIndex] - The active cube face index.
    		 * @param {number} [textureIndex=0] - The texture index of an MRT render target.
    		 * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.
    		 */
    		this.readRenderTargetPixelsAsync = async function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex, textureIndex = 0 ) {

    			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

    				throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );

    			}

    			let framebuffer = properties.get( renderTarget ).__webglFramebuffer;
    			if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

    				framebuffer = framebuffer[ activeCubeFaceIndex ];

    			}

    			if ( framebuffer ) {

    				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
    				if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

    					// set the active frame buffer to the one we want to read
    					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

    					const texture = renderTarget.textures[ textureIndex ];
    					const textureFormat = texture.format;
    					const textureType = texture.type;

    					if ( ! capabilities.textureFormatReadable( textureFormat ) ) {

    						throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.' );

    					}

    					if ( ! capabilities.textureTypeReadable( textureType ) ) {

    						throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.' );

    					}

    					const glBuffer = _gl.createBuffer();
    					_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );
    					_gl.bufferData( _gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ );

    					// when using MRT, select the corect color buffer for the subsequent read command

    					if ( renderTarget.textures.length > 1 ) _gl.readBuffer( _gl.COLOR_ATTACHMENT0 + textureIndex );

    					_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), 0 );

    					// reset the frame buffer to the currently set buffer before waiting
    					const currFramebuffer = _currentRenderTarget !== null ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
    					state.bindFramebuffer( _gl.FRAMEBUFFER, currFramebuffer );

    					// check if the commands have finished every 8 ms
    					const sync = _gl.fenceSync( _gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );

    					_gl.flush();

    					await probeAsync( _gl, sync, 4 );

    					// read the data and delete the buffer
    					_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );
    					_gl.getBufferSubData( _gl.PIXEL_PACK_BUFFER, 0, buffer );
    					_gl.deleteBuffer( glBuffer );
    					_gl.deleteSync( sync );

    					return buffer;

    				} else {

    					throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.' );

    				}

    			}

    		};

    		/**
    		 * Copies pixels from the current bound framebuffer into the given texture.
    		 *
    		 * @param {FramebufferTexture} texture - The texture.
    		 * @param {?Vector2} [position=null] - The start position of the copy operation.
    		 * @param {number} [level=0] - The mip level. The default represents the base mip.
    		 */
    		this.copyFramebufferToTexture = function ( texture, position = null, level = 0 ) {

    			const levelScale = Math.pow( 2, - level );
    			const width = Math.floor( texture.image.width * levelScale );
    			const height = Math.floor( texture.image.height * levelScale );

    			const x = position !== null ? position.x : 0;
    			const y = position !== null ? position.y : 0;

    			textures.setTexture2D( texture, 0 );

    			_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, x, y, width, height );

    			state.unbindTexture();

    		};

    		const _srcFramebuffer = _gl.createFramebuffer();
    		const _dstFramebuffer = _gl.createFramebuffer();

    		/**
    		 * Copies data of the given source texture into a destination texture.
    		 *
    		 * When using render target textures as `srcTexture` and `dstTexture`, you must make sure both render targets are initialized
    		 * {@link WebGLRenderer#initRenderTarget}.
    		 *
    		 * @param {Texture} srcTexture - The source texture.
    		 * @param {Texture} dstTexture - The destination texture.
    		 * @param {?(Box2|Box3)} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.
    		 * @param {?(Vector2|Vector3)} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.
    		 * @param {number} [srcLevel=0] - The source mipmap level to copy.
    		 * @param {?number} [dstLevel=null] - The destination mipmap level.
    		 */
    		this.copyTextureToTexture = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = null ) {

    			// support the previous signature with just a single dst mipmap level
    			if ( dstLevel === null ) {

    				if ( srcLevel !== 0 ) {

    					// @deprecated, r171
    					warnOnce( 'WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.' );
    					dstLevel = srcLevel;
    					srcLevel = 0;

    				} else {

    					dstLevel = 0;

    				}

    			}

    			// gather the necessary dimensions to copy
    			let width, height, depth, minX, minY, minZ;
    			let dstX, dstY, dstZ;
    			const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ dstLevel ] : srcTexture.image;
    			if ( srcRegion !== null ) {

    				width = srcRegion.max.x - srcRegion.min.x;
    				height = srcRegion.max.y - srcRegion.min.y;
    				depth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
    				minX = srcRegion.min.x;
    				minY = srcRegion.min.y;
    				minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;

    			} else {

    				const levelScale = Math.pow( 2, - srcLevel );
    				width = Math.floor( image.width * levelScale );
    				height = Math.floor( image.height * levelScale );
    				if ( srcTexture.isDataArrayTexture ) {

    					depth = image.depth;

    				} else if ( srcTexture.isData3DTexture ) {

    					depth = Math.floor( image.depth * levelScale );

    				} else {

    					depth = 1;

    				}

    				minX = 0;
    				minY = 0;
    				minZ = 0;

    			}

    			if ( dstPosition !== null ) {

    				dstX = dstPosition.x;
    				dstY = dstPosition.y;
    				dstZ = dstPosition.z;

    			} else {

    				dstX = 0;
    				dstY = 0;
    				dstZ = 0;

    			}

    			// Set up the destination target
    			const glFormat = utils.convert( dstTexture.format );
    			const glType = utils.convert( dstTexture.type );
    			let glTarget;

    			if ( dstTexture.isData3DTexture ) {

    				textures.setTexture3D( dstTexture, 0 );
    				glTarget = _gl.TEXTURE_3D;

    			} else if ( dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture ) {

    				textures.setTexture2DArray( dstTexture, 0 );
    				glTarget = _gl.TEXTURE_2D_ARRAY;

    			} else {

    				textures.setTexture2D( dstTexture, 0 );
    				glTarget = _gl.TEXTURE_2D;

    			}

    			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
    			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
    			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

    			// used for copying data from cpu
    			const currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
    			const currentUnpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );
    			const currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
    			const currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );
    			const currentUnpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );

    			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );
    			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, minX );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, minY );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, minZ );

    			// set up the src texture
    			const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;
    			const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;
    			if ( srcTexture.isDepthTexture ) {

    				const srcTextureProperties = properties.get( srcTexture );
    				const dstTextureProperties = properties.get( dstTexture );
    				const srcRenderTargetProperties = properties.get( srcTextureProperties.__renderTarget );
    				const dstRenderTargetProperties = properties.get( dstTextureProperties.__renderTarget );
    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer );
    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer );

    				for ( let i = 0; i < depth; i ++ ) {

    					// if the source or destination are a 3d target then a layer needs to be bound
    					if ( isSrc3D ) {

    						_gl.framebufferTextureLayer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( srcTexture ).__webglTexture, srcLevel, minZ + i );
    						_gl.framebufferTextureLayer( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( dstTexture ).__webglTexture, dstLevel, dstZ + i );

    					}

    					_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST );

    				}

    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

    			} else if ( srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has( srcTexture ) ) {

    				// get the appropriate frame buffers
    				const srcTextureProperties = properties.get( srcTexture );
    				const dstTextureProperties = properties.get( dstTexture );

    				// bind the frame buffer targets
    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, _srcFramebuffer );
    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, _dstFramebuffer );

    				for ( let i = 0; i < depth; i ++ ) {

    					// assign the correct layers and mip maps to the frame buffers
    					if ( isSrc3D ) {

    						_gl.framebufferTextureLayer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i );

    					} else {

    						_gl.framebufferTexture2D( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel );

    					}

    					if ( isDst3D ) {

    						_gl.framebufferTextureLayer( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i );

    					} else {

    						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel );

    					}

    					// copy the data using the fastest function that can achieve the copy
    					if ( srcLevel !== 0 ) {

    						_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST );

    					} else if ( isDst3D ) {

    						_gl.copyTexSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ + i, minX, minY, width, height );

    					} else {

    						_gl.copyTexSubImage2D( glTarget, dstLevel, dstX, dstY, minX, minY, width, height );

    					}

    				}

    				// unbind read, draw buffers
    				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
    				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

    			} else {

    				if ( isDst3D ) {

    					// copy data into the 3d texture
    					if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

    						_gl.texSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );

    					} else if ( dstTexture.isCompressedArrayTexture ) {

    						_gl.compressedTexSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );

    					} else {

    						_gl.texSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );

    					}

    				} else {

    					// copy data into the 2d texture
    					if ( srcTexture.isDataTexture ) {

    						_gl.texSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data );

    					} else if ( srcTexture.isCompressedTexture ) {

    						_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data );

    					} else {

    						_gl.texSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image );

    					}

    				}

    			}

    			// reset values
    			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );
    			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );
    			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );

    			// Generate mipmaps only when copying level 0
    			if ( dstLevel === 0 && dstTexture.generateMipmaps ) {

    				_gl.generateMipmap( glTarget );

    			}

    			state.unbindTexture();

    		};

    		this.copyTextureToTexture3D = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

    			// @deprecated, r170
    			warnOnce( 'WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.' );

    			return this.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );

    		};

    		/**
    		 * Initializes the given WebGLRenderTarget memory. Useful for initializing a render target so data
    		 * can be copied into it using {@link WebGLRenderer#copyTextureToTexture} before it has been
    		 * rendered to.
    		 *
    		 * @param {WebGLRenderTarget} target - The render target.
    		 */
    		this.initRenderTarget = function ( target ) {

    			if ( properties.get( target ).__webglFramebuffer === undefined ) {

    				textures.setupRenderTarget( target );

    			}

    		};

    		/**
    		 * Initializes the given texture. Useful for preloading a texture rather than waiting until first
    		 * render (which can cause noticeable lags due to decode and GPU upload overhead).
    		 *
    		 * @param {Texture} texture - The texture.
    		 */
    		this.initTexture = function ( texture ) {

    			if ( texture.isCubeTexture ) {

    				textures.setTextureCube( texture, 0 );

    			} else if ( texture.isData3DTexture ) {

    				textures.setTexture3D( texture, 0 );

    			} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

    				textures.setTexture2DArray( texture, 0 );

    			} else {

    				textures.setTexture2D( texture, 0 );

    			}

    			state.unbindTexture();

    		};

    		/**
    		 * Can be used to reset the internal WebGL state. This method is mostly
    		 * relevant for applications which share a single WebGL context across
    		 * multiple WebGL libraries.
    		 */
    		this.resetState = function () {

    			_currentActiveCubeFace = 0;
    			_currentActiveMipmapLevel = 0;
    			_currentRenderTarget = null;

    			state.reset();
    			bindingStates.reset();

    		};

    		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

    			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

    		}

    	}

    	/**
    	 * Defines the coordinate system of the renderer.
    	 *
    	 * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
    	 *
    	 * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
    	 * @default WebGLCoordinateSystem
    	 * @readonly
    	 */
    	get coordinateSystem() {

    		return WebGLCoordinateSystem;

    	}

    	/**
    	 * Defines the output color space of the renderer.
    	 *
    	 * @type {SRGBColorSpace|LinearSRGBColorSpace}
    	 * @default SRGBColorSpace
    	 */
    	get outputColorSpace() {

    		return this._outputColorSpace;

    	}

    	set outputColorSpace( colorSpace ) {

    		this._outputColorSpace = colorSpace;

    		const gl = this.getContext();
    		gl.drawingBufferColorSpace = ColorManagement._getDrawingBufferColorSpace( colorSpace );
    		gl.unpackColorSpace = ColorManagement._getUnpackColorSpace();

    	}

    }

    /**
     * A utility class for creating a button that allows to initiate
     * immersive VR sessions based on WebXR. The button can be created
     * with a factory method and then appended ot the website's DOM.
     *
     * ```js
     * document.body.appendChild( VRButton.createButton( renderer ) );
     * ```
     *
     * @hideconstructor
     * @three_import import { VRButton } from 'three/addons/webxr/VRButton.js';
     */
    class VRButton {

    	/**
    	 * Constructs a new VR button.
    	 *
    	 * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.
    	 * @param {XRSessionInit} [sessionInit] - The a configuration object for the AR session.
    	 * @return {HTMLElement} The button or an error message if `immersive-ar` isn't supported.
    	 */
    	static createButton( renderer, sessionInit = {} ) {

    		const button = document.createElement( 'button' );

    		function showEnterVR( /*device*/ ) {

    			let currentSession = null;

    			async function onSessionStarted( session ) {

    				session.addEventListener( 'end', onSessionEnded );

    				await renderer.xr.setSession( session );
    				button.textContent = 'EXIT VR';

    				currentSession = session;

    			}

    			function onSessionEnded( /*event*/ ) {

    				currentSession.removeEventListener( 'end', onSessionEnded );

    				button.textContent = 'ENTER VR';

    				currentSession = null;

    			}

    			//

    			button.style.display = '';

    			button.style.cursor = 'pointer';
    			button.style.left = 'calc(50% - 50px)';
    			button.style.width = '100px';

    			button.textContent = 'ENTER VR';

    			// WebXR's requestReferenceSpace only works if the corresponding feature
    			// was requested at session creation time. For simplicity, just ask for
    			// the interesting ones as optional features, but be aware that the
    			// requestReferenceSpace call will fail if it turns out to be unavailable.
    			// ('local' is always available for immersive sessions and doesn't need to
    			// be requested separately.)

    			const sessionOptions = {
    				...sessionInit,
    				optionalFeatures: [
    					'local-floor',
    					'bounded-floor',
    					'layers',
    					...( sessionInit.optionalFeatures || [] )
    				],
    			};

    			button.onmouseenter = function () {

    				button.style.opacity = '1.0';

    			};

    			button.onmouseleave = function () {

    				button.style.opacity = '0.5';

    			};

    			button.onclick = function () {

    				if ( currentSession === null ) {

    					navigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );

    				} else {

    					currentSession.end();

    					if ( navigator.xr.offerSession !== undefined ) {

    						navigator.xr.offerSession( 'immersive-vr', sessionOptions )
    							.then( onSessionStarted )
    							.catch( ( err ) => {

    								console.warn( err );

    							} );

    					}

    				}

    			};

    			if ( navigator.xr.offerSession !== undefined ) {

    				navigator.xr.offerSession( 'immersive-vr', sessionOptions )
    					.then( onSessionStarted )
    					.catch( ( err ) => {

    						console.warn( err );

    					} );

    			}

    		}

    		function disableButton() {

    			button.style.display = '';

    			button.style.cursor = 'auto';
    			button.style.left = 'calc(50% - 75px)';
    			button.style.width = '150px';

    			button.onmouseenter = null;
    			button.onmouseleave = null;

    			button.onclick = null;

    		}

    		function showWebXRNotFound() {

    			disableButton();

    			button.textContent = 'VR NOT SUPPORTED';

    		}

    		function showVRNotAllowed( exception ) {

    			disableButton();

    			console.warn( 'Exception when trying to call xr.isSessionSupported', exception );

    			button.textContent = 'VR NOT ALLOWED';

    		}

    		function stylizeElement( element ) {

    			element.style.position = 'absolute';
    			element.style.bottom = '20px';
    			element.style.padding = '12px 6px';
    			element.style.border = '1px solid #fff';
    			element.style.borderRadius = '4px';
    			element.style.background = 'rgba(0,0,0,0.1)';
    			element.style.color = '#fff';
    			element.style.font = 'normal 13px sans-serif';
    			element.style.textAlign = 'center';
    			element.style.opacity = '0.5';
    			element.style.outline = 'none';
    			element.style.zIndex = '999';

    		}

    		if ( 'xr' in navigator ) {

    			button.id = 'VRButton';
    			button.style.display = 'none';

    			stylizeElement( button );

    			navigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {

    				supported ? showEnterVR() : showWebXRNotFound();

    				if ( supported && VRButton.xrSessionIsGranted ) {

    					button.click();

    				}

    			} ).catch( showVRNotAllowed );

    			return button;

    		} else {

    			const message = document.createElement( 'a' );

    			if ( window.isSecureContext === false ) {

    				message.href = document.location.href.replace( /^http:/, 'https:' );
    				message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message

    			} else {

    				message.href = 'https://immersiveweb.dev/';
    				message.innerHTML = 'WEBXR NOT AVAILABLE';

    			}

    			message.style.left = 'calc(50% - 90px)';
    			message.style.width = '180px';
    			message.style.textDecoration = 'none';

    			stylizeElement( message );

    			return message;

    		}

    	}

    	/**
    	 * Registers a `sessiongranted` event listener. When a session is granted, the {@link VRButton#xrSessionIsGranted}
    	 * flag will evaluate to `true`. This method is automatically called by the module itself so there
    	 * should be no need to use it on app level.
    	 */
    	static registerSessionGrantedListener() {

    		if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {

    			// WebXRViewer (based on Firefox) has a bug where addEventListener
    			// throws a silent exception and aborts execution entirely.
    			if ( /WebXRViewer\//i.test( navigator.userAgent ) ) return;

    			navigator.xr.addEventListener( 'sessiongranted', () => {

    				VRButton.xrSessionIsGranted = true;

    			} );

    		}

    	}

    }

    /**
     * Whether a XR session has been granted or not.
     *
     * @static
     * @type {boolean}
     * @default false
     */
    VRButton.xrSessionIsGranted = false;
    VRButton.registerSessionGrantedListener();

    /**
     * @license
     * webxr-polyfill
     * Copyright (c) 2017 Google
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @license
     * cardboard-vr-display
     * Copyright (c) 2015-2017 Google
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @license
     * webvr-polyfill-dpdb 
     * Copyright (c) 2017 Google
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @license
     * wglu-preserve-state
     * Copyright (c) 2016, Brandon Jones.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */

    /**
     * @license
     * nosleep.js
     * Copyright (c) 2017, Rich Tibbett
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */

    const _global = typeof global !== 'undefined' ? global :
                    typeof self !== 'undefined' ? self :
                    typeof window !== 'undefined' ? window : {};

    const PRIVATE = Symbol('@@webxr-polyfill/EventTarget');
    class EventTarget {
      constructor() {
        this[PRIVATE] = {
          listeners: new Map(),
        };
      }
      addEventListener(type, listener) {
        if (typeof type !== 'string') { throw new Error('`type` must be a string'); }
        if (typeof listener !== 'function') { throw new Error('`listener` must be a function'); }
        const typedListeners = this[PRIVATE].listeners.get(type) || [];
        typedListeners.push(listener);
        this[PRIVATE].listeners.set(type, typedListeners);
      }
      removeEventListener(type, listener) {
        if (typeof type !== 'string') { throw new Error('`type` must be a string'); }
        if (typeof listener !== 'function') { throw new Error('`listener` must be a function'); }
        const typedListeners = this[PRIVATE].listeners.get(type) || [];
        for (let i = typedListeners.length; i >= 0; i--) {
          if (typedListeners[i] === listener) {
            typedListeners.pop();
          }
        }
      }
      dispatchEvent(type, event) {
        const typedListeners = this[PRIVATE].listeners.get(type) || [];
        const queue = [];
        for (let i = 0; i < typedListeners.length; i++) {
          queue[i] = typedListeners[i];
        }
        for (let listener of queue) {
          listener(event);
        }
        if (typeof this[`on${type}`] === 'function') {
          this[`on${type}`](event);
        }
      }
    }

    const EPSILON = 0.000001;
    let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;

    function create() {
      let out = new ARRAY_TYPE(16);
      if(ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
      }
      out[0] = 1;
      out[5] = 1;
      out[10] = 1;
      out[15] = 1;
      return out;
    }

    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }

    function invert(out, a) {
      let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
      let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
      let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
      let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
      let b00 = a00 * a11 - a01 * a10;
      let b01 = a00 * a12 - a02 * a10;
      let b02 = a00 * a13 - a03 * a10;
      let b03 = a01 * a12 - a02 * a11;
      let b04 = a01 * a13 - a03 * a11;
      let b05 = a02 * a13 - a03 * a12;
      let b06 = a20 * a31 - a21 * a30;
      let b07 = a20 * a32 - a22 * a30;
      let b08 = a20 * a33 - a23 * a30;
      let b09 = a21 * a32 - a22 * a31;
      let b10 = a21 * a33 - a23 * a31;
      let b11 = a22 * a33 - a23 * a32;
      let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (!det) {
        return null;
      }
      det = 1.0 / det;
      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
      out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
      out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
      out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
      out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
      out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
      out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
      return out;
    }


    function multiply(out, a, b) {
      let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
      let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
      let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
      let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
      let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
      out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
      b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
      out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
      b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
      out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
      b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
      out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
      out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
      out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
      out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
      return out;
    }












    function fromRotationTranslation(out, q, v) {
      let x = q[0], y = q[1], z = q[2], w = q[3];
      let x2 = x + x;
      let y2 = y + y;
      let z2 = z + z;
      let xx = x * x2;
      let xy = x * y2;
      let xz = x * z2;
      let yy = y * y2;
      let yz = y * z2;
      let zz = z * z2;
      let wx = w * x2;
      let wy = w * y2;
      let wz = w * z2;
      out[0] = 1 - (yy + zz);
      out[1] = xy + wz;
      out[2] = xz - wy;
      out[3] = 0;
      out[4] = xy - wz;
      out[5] = 1 - (xx + zz);
      out[6] = yz + wx;
      out[7] = 0;
      out[8] = xz + wy;
      out[9] = yz - wx;
      out[10] = 1 - (xx + yy);
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }

    function getTranslation(out, mat) {
      out[0] = mat[12];
      out[1] = mat[13];
      out[2] = mat[14];
      return out;
    }

    function getRotation(out, mat) {
      let trace = mat[0] + mat[5] + mat[10];
      let S = 0;
      if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (mat[6] - mat[9]) / S;
        out[1] = (mat[8] - mat[2]) / S;
        out[2] = (mat[1] - mat[4]) / S;
      } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {
        S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
        out[3] = (mat[6] - mat[9]) / S;
        out[0] = 0.25 * S;
        out[1] = (mat[1] + mat[4]) / S;
        out[2] = (mat[8] + mat[2]) / S;
      } else if (mat[5] > mat[10]) {
        S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
        out[3] = (mat[8] - mat[2]) / S;
        out[0] = (mat[1] + mat[4]) / S;
        out[1] = 0.25 * S;
        out[2] = (mat[6] + mat[9]) / S;
      } else {
        S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
        out[3] = (mat[1] - mat[4]) / S;
        out[0] = (mat[8] + mat[2]) / S;
        out[1] = (mat[6] + mat[9]) / S;
        out[2] = 0.25 * S;
      }
      return out;
    }




    function perspective(out, fovy, aspect, near, far) {
      let f = 1.0 / Math.tan(fovy / 2), nf;
      out[0] = f / aspect;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = f;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[15] = 0;
      if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = (2 * far * near) * nf;
      } else {
        out[10] = -1;
        out[14] = -2 * near;
      }
      return out;
    }

    function create$1() {
      let out = new ARRAY_TYPE(3);
      if(ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }
      return out;
    }
    function clone$1(a) {
      var out = new ARRAY_TYPE(3);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }
    function length(a) {
      let x = a[0];
      let y = a[1];
      let z = a[2];
      return Math.sqrt(x*x + y*y + z*z);
    }
    function fromValues$1(x, y, z) {
      let out = new ARRAY_TYPE(3);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
    }
    function copy$1(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }

    function add$1(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      return out;
    }








    function scale$1(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      return out;
    }






    function normalize(out, a) {
      let x = a[0];
      let y = a[1];
      let z = a[2];
      let len = x*x + y*y + z*z;
      if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
      }
      return out;
    }
    function dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function cross(out, a, b) {
      let ax = a[0], ay = a[1], az = a[2];
      let bx = b[0], by = b[1], bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out;
    }






    function transformQuat(out, a, q) {
        let qx = q[0], qy = q[1], qz = q[2], qw = q[3];
        let x = a[0], y = a[1], z = a[2];
        let uvx = qy * z - qz * y,
            uvy = qz * x - qx * z,
            uvz = qx * y - qy * x;
        let uuvx = qy * uvz - qz * uvy,
            uuvy = qz * uvx - qx * uvz,
            uuvz = qx * uvy - qy * uvx;
        let w2 = qw * 2;
        uvx *= w2;
        uvy *= w2;
        uvz *= w2;
        uuvx *= 2;
        uuvy *= 2;
        uuvz *= 2;
        out[0] = x + uvx + uuvx;
        out[1] = y + uvy + uuvy;
        out[2] = z + uvz + uuvz;
        return out;
    }



    function angle(a, b) {
      let tempA = fromValues$1(a[0], a[1], a[2]);
      let tempB = fromValues$1(b[0], b[1], b[2]);
      normalize(tempA, tempA);
      normalize(tempB, tempB);
      let cosine = dot(tempA, tempB);
      if(cosine > 1.0) {
        return 0;
      }
      else if(cosine < -1) {
        return Math.PI;
      } else {
        return Math.acos(cosine);
      }
    }








    const len = length;

    ((function() {
      let vec = create$1();
      return function(a, stride, offset, count, fn, arg) {
        let i, l;
        if(!stride) {
          stride = 3;
        }
        if(!offset) {
          offset = 0;
        }
        if(count) {
          l = Math.min((count * stride) + offset, a.length);
        } else {
          l = a.length;
        }
        for(i = offset; i < l; i += stride) {
          vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
          fn(vec, vec, arg);
          a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        return a;
      };
    }))();

    function create$2() {
      let out = new ARRAY_TYPE(9);
      if(ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
      }
      out[0] = 1;
      out[4] = 1;
      out[8] = 1;
      return out;
    }

    function create$3() {
      let out = new ARRAY_TYPE(4);
      if(ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
      }
      return out;
    }
    function clone$3(a) {
      let out = new ARRAY_TYPE(4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    function fromValues$3(x, y, z, w) {
      let out = new ARRAY_TYPE(4);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
    }
    function copy$3(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }


















    function normalize$1(out, a) {
      let x = a[0];
      let y = a[1];
      let z = a[2];
      let w = a[3];
      let len = x*x + y*y + z*z + w*w;
      if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
      }
      return out;
    }















    ((function() {
      let vec = create$3();
      return function(a, stride, offset, count, fn, arg) {
        let i, l;
        if(!stride) {
          stride = 4;
        }
        if(!offset) {
          offset = 0;
        }
        if(count) {
          l = Math.min((count * stride) + offset, a.length);
        } else {
          l = a.length;
        }
        for(i = offset; i < l; i += stride) {
          vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
          fn(vec, vec, arg);
          a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        return a;
      };
    }))();

    function create$4() {
      let out = new ARRAY_TYPE(4);
      if(ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }
      out[3] = 1;
      return out;
    }

    function setAxisAngle(out, axis, rad) {
      rad = rad * 0.5;
      let s = Math.sin(rad);
      out[0] = s * axis[0];
      out[1] = s * axis[1];
      out[2] = s * axis[2];
      out[3] = Math.cos(rad);
      return out;
    }

    function multiply$4(out, a, b) {
      let ax = a[0], ay = a[1], az = a[2], aw = a[3];
      let bx = b[0], by = b[1], bz = b[2], bw = b[3];
      out[0] = ax * bw + aw * bx + ay * bz - az * by;
      out[1] = ay * bw + aw * by + az * bx - ax * bz;
      out[2] = az * bw + aw * bz + ax * by - ay * bx;
      out[3] = aw * bw - ax * bx - ay * by - az * bz;
      return out;
    }




    function slerp(out, a, b, t) {
      let ax = a[0], ay = a[1], az = a[2], aw = a[3];
      let bx = b[0], by = b[1], bz = b[2], bw = b[3];
      let omega, cosom, sinom, scale0, scale1;
      cosom = ax * bx + ay * by + az * bz + aw * bw;
      if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
      }
      if ( (1.0 - cosom) > EPSILON ) {
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        scale0 = 1.0 - t;
        scale1 = t;
      }
      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }

    function invert$2(out, a) {
      let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
      let dot$$1 = a0*a0 + a1*a1 + a2*a2 + a3*a3;
      let invDot = dot$$1 ? 1.0/dot$$1 : 0;
      out[0] = -a0*invDot;
      out[1] = -a1*invDot;
      out[2] = -a2*invDot;
      out[3] = a3*invDot;
      return out;
    }

    function fromMat3(out, m) {
      let fTrace = m[0] + m[4] + m[8];
      let fRoot;
      if ( fTrace > 0.0 ) {
        fRoot = Math.sqrt(fTrace + 1.0);
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
      } else {
        let i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        let j = (i+1)%3;
        let k = (i+2)%3;
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
      }
      return out;
    }
    function fromEuler(out, x, y, z) {
        let halfToRad = 0.5 * Math.PI / 180.0;
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        let sx = Math.sin(x);
        let cx = Math.cos(x);
        let sy = Math.sin(y);
        let cy = Math.cos(y);
        let sz = Math.sin(z);
        let cz = Math.cos(z);
        out[0] = sx * cy * cz - cx * sy * sz;
        out[1] = cx * sy * cz + sx * cy * sz;
        out[2] = cx * cy * sz - sx * sy * cz;
        out[3] = cx * cy * cz + sx * sy * sz;
        return out;
    }

    const clone$4 = clone$3;
    const fromValues$4 = fromValues$3;
    const copy$4 = copy$3;










    const normalize$2 = normalize$1;


    ((function() {
      let tmpvec3 = create$1();
      let xUnitVec3 = fromValues$1(1,0,0);
      let yUnitVec3 = fromValues$1(0,1,0);
      return function(out, a, b) {
        let dot$$1 = dot(a, b);
        if (dot$$1 < -0.999999) {
          cross(tmpvec3, xUnitVec3, a);
          if (len(tmpvec3) < 0.000001)
            cross(tmpvec3, yUnitVec3, a);
          normalize(tmpvec3, tmpvec3);
          setAxisAngle(out, tmpvec3, Math.PI);
          return out;
        } else if (dot$$1 > 0.999999) {
          out[0] = 0;
          out[1] = 0;
          out[2] = 0;
          out[3] = 1;
          return out;
        } else {
          cross(tmpvec3, a, b);
          out[0] = tmpvec3[0];
          out[1] = tmpvec3[1];
          out[2] = tmpvec3[2];
          out[3] = 1 + dot$$1;
          return normalize$2(out, out);
        }
      };
    }))();
    ((function () {
      let temp1 = create$4();
      let temp2 = create$4();
      return function (out, a, b, c, d, t) {
        slerp(temp1, a, d, t);
        slerp(temp2, b, c, t);
        slerp(out, temp1, temp2, 2 * t * (1 - t));
        return out;
      };
    })());
    ((function() {
      let matr = create$2();
      return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return normalize$2(out, fromMat3(out, matr));
      };
    }))();

    const PRIVATE$1 = Symbol('@@webxr-polyfill/XRRigidTransform');
    class XRRigidTransform$1 {
      constructor() {
        this[PRIVATE$1] = {
          matrix: null,
          position: null,
          orientation: null,
          inverse: null,
        };
        if (arguments.length === 0) {
          this[PRIVATE$1].matrix = identity(new Float32Array(16));
        } else if (arguments.length === 1) {
          if (arguments[0] instanceof Float32Array) {
            this[PRIVATE$1].matrix = arguments[0];
          } else {
            this[PRIVATE$1].position = this._getPoint(arguments[0]);
            this[PRIVATE$1].orientation = DOMPointReadOnly.fromPoint({
                x: 0, y: 0, z: 0, w: 1
            });
          }
        } else if (arguments.length === 2) {
          this[PRIVATE$1].position = this._getPoint(arguments[0]);
          this[PRIVATE$1].orientation = this._getPoint(arguments[1]);
        } else {
          throw new Error("Too many arguments!");
        }
        if (this[PRIVATE$1].matrix) {
            let position = create$1();
            getTranslation(position, this[PRIVATE$1].matrix);
            this[PRIVATE$1].position = DOMPointReadOnly.fromPoint({
                x: position[0],
                y: position[1],
                z: position[2]
            });
            let orientation = create$4();
            getRotation(orientation, this[PRIVATE$1].matrix);
            this[PRIVATE$1].orientation = DOMPointReadOnly.fromPoint({
              x: orientation[0],
              y: orientation[1],
              z: orientation[2],
              w: orientation[3]
            });
        } else {
            this[PRIVATE$1].matrix = identity(new Float32Array(16));
            fromRotationTranslation(
              this[PRIVATE$1].matrix,
              fromValues$4(
                this[PRIVATE$1].orientation.x,
                this[PRIVATE$1].orientation.y,
                this[PRIVATE$1].orientation.z,
                this[PRIVATE$1].orientation.w),
              fromValues$1(
                this[PRIVATE$1].position.x,
                this[PRIVATE$1].position.y,
                this[PRIVATE$1].position.z)
            );
        }
      }
      _getPoint(arg) {
        if (arg instanceof DOMPointReadOnly) {
          return arg;
        }
        return DOMPointReadOnly.fromPoint(arg);
      }
      get matrix() { return this[PRIVATE$1].matrix; }
      get position() { return this[PRIVATE$1].position; }
      get orientation() { return this[PRIVATE$1].orientation; }
      get inverse() {
        if (this[PRIVATE$1].inverse === null) {
          let invMatrix = identity(new Float32Array(16));
          invert(invMatrix, this[PRIVATE$1].matrix);
          this[PRIVATE$1].inverse = new XRRigidTransform$1(invMatrix);
          this[PRIVATE$1].inverse[PRIVATE$1].inverse = this;
        }
        return this[PRIVATE$1].inverse;
      }
    }

    const PRIVATE$2 = Symbol('@@webxr-polyfill/XRSpace');

    class XRSpace {
      constructor(specialType = null, inputSource = null) {
        this[PRIVATE$2] = {
          specialType,
          inputSource,
          baseMatrix: null,
          inverseBaseMatrix: null,
          lastFrameId: -1
        };
      }
      get _specialType() {
        return this[PRIVATE$2].specialType;
      }
      get _inputSource() {
        return this[PRIVATE$2].inputSource;
      }
      _ensurePoseUpdated(device, frameId) {
        if (frameId == this[PRIVATE$2].lastFrameId) return;
        this[PRIVATE$2].lastFrameId = frameId;
        this._onPoseUpdate(device);
      }
      _onPoseUpdate(device) {
        if (this[PRIVATE$2].specialType == 'viewer') {
          this._baseMatrix = device.getBasePoseMatrix();
        }
      }
      set _baseMatrix(matrix) {
        this[PRIVATE$2].baseMatrix = matrix;
        this[PRIVATE$2].inverseBaseMatrix = null;
      }
      get _baseMatrix() {
        if (!this[PRIVATE$2].baseMatrix) {
          if (this[PRIVATE$2].inverseBaseMatrix) {
            this[PRIVATE$2].baseMatrix = new Float32Array(16);
            invert(this[PRIVATE$2].baseMatrix, this[PRIVATE$2].inverseBaseMatrix);
          }
        }
        return this[PRIVATE$2].baseMatrix;
      }
      set _inverseBaseMatrix(matrix) {
        this[PRIVATE$2].inverseBaseMatrix = matrix;
        this[PRIVATE$2].baseMatrix = null;
      }
      get _inverseBaseMatrix() {
        if (!this[PRIVATE$2].inverseBaseMatrix) {
          if (this[PRIVATE$2].baseMatrix) {
            this[PRIVATE$2].inverseBaseMatrix = new Float32Array(16);
            invert(this[PRIVATE$2].inverseBaseMatrix, this[PRIVATE$2].baseMatrix);
          }
        }
        return this[PRIVATE$2].inverseBaseMatrix;
      }
      _getSpaceRelativeTransform(space) {
        if (!this._inverseBaseMatrix || !space._baseMatrix) {
          return null;
        }
        let out = new Float32Array(16);
        multiply(out, this._inverseBaseMatrix, space._baseMatrix);
        return new XRRigidTransform$1(out);
      }
    }

    const DEFAULT_EMULATION_HEIGHT = 1.6;
    const PRIVATE$3 = Symbol('@@webxr-polyfill/XRReferenceSpace');
    const XRReferenceSpaceTypes = [
      'viewer',
      'local',
      'local-floor',
      'bounded-floor',
      'unbounded'
    ];
    function isFloor(type) {
      return type === 'bounded-floor' || type === 'local-floor';
    }
    class XRReferenceSpace extends XRSpace {
      constructor(type, transform = null) {
        if (!XRReferenceSpaceTypes.includes(type)) {
          throw new Error(`XRReferenceSpaceType must be one of ${XRReferenceSpaceTypes}`);
        }
        super(type);
        if (type === 'bounded-floor' && !transform) {
          throw new Error(`XRReferenceSpace cannot use 'bounded-floor' type if the platform does not provide the floor level`);
        }
        if (isFloor(type) && !transform) {
          transform = identity(new Float32Array(16));
          transform[13] = DEFAULT_EMULATION_HEIGHT;
        }
        this._inverseBaseMatrix = transform || identity(new Float32Array(16));
        this[PRIVATE$3] = {
          type,
          transform,
          originOffset : identity(new Float32Array(16)),
        };
      }
      _transformBasePoseMatrix(out, pose) {
        multiply(out, this._inverseBaseMatrix, pose);
      }
      _originOffsetMatrix() {
        return this[PRIVATE$3].originOffset;
      }
      _adjustForOriginOffset(transformMatrix) {
        let inverseOriginOffsetMatrix = new Float32Array(16);
        invert(inverseOriginOffsetMatrix, this[PRIVATE$3].originOffset);
        multiply(transformMatrix, inverseOriginOffsetMatrix, transformMatrix);
      }
      _getSpaceRelativeTransform(space) {
        let transform = super._getSpaceRelativeTransform(space);
        this._adjustForOriginOffset(transform.matrix);
        return new XRRigidTransform(transform.matrix);
      }
      getOffsetReferenceSpace(additionalOffset) {
        let newSpace = new XRReferenceSpace(
          this[PRIVATE$3].type,
          this[PRIVATE$3].transform,
          this[PRIVATE$3].bounds);
        multiply(newSpace[PRIVATE$3].originOffset, this[PRIVATE$3].originOffset, additionalOffset.matrix);
        return newSpace;
      }
    }

    const PRIVATE$4 = Symbol('@@webxr-polyfill/XR');
    const XRSessionModes = ['inline', 'immersive-vr', 'immersive-ar'];
    const DEFAULT_SESSION_OPTIONS = {
      'inline': {
        requiredFeatures: ['viewer'],
        optionalFeatures: [],
      },
      'immersive-vr': {
        requiredFeatures: ['viewer', 'local'],
        optionalFeatures: [],
      },
      'immersive-ar': {
        requiredFeatures: ['viewer', 'local'],
        optionalFeatures: [],
      }
    };
    const POLYFILL_REQUEST_SESSION_ERROR =
`Polyfill Error: Must call navigator.xr.isSessionSupported() with any XRSessionMode
or navigator.xr.requestSession('inline') prior to requesting an immersive
session. This is a limitation specific to the WebXR Polyfill and does not apply
to native implementations of the API.`    ;
    class XRSystem extends EventTarget {
      constructor(devicePromise) {
        super();
        this[PRIVATE$4] = {
          device: null,
          devicePromise,
          immersiveSession: null,
          inlineSessions: new Set(),
        };
        devicePromise.then((device) => { this[PRIVATE$4].device = device; });
      }
      async isSessionSupported(mode) {
        if (!this[PRIVATE$4].device) {
          await this[PRIVATE$4].devicePromise;
        }
        if (mode != 'inline') {
          return Promise.resolve(this[PRIVATE$4].device.isSessionSupported(mode));
        }
        return Promise.resolve(true);
      }
      async requestSession(mode, options) {
        if (!this[PRIVATE$4].device) {
          if (mode != 'inline') {
            throw new Error(POLYFILL_REQUEST_SESSION_ERROR);
          } else {
            await this[PRIVATE$4].devicePromise;
          }
        }
        if (!XRSessionModes.includes(mode)) {
          throw new TypeError(
              `The provided value '${mode}' is not a valid enum value of type XRSessionMode`);
        }
        const defaultOptions = DEFAULT_SESSION_OPTIONS[mode];
        const requiredFeatures = defaultOptions.requiredFeatures.concat(
            options && options.requiredFeatures ? options.requiredFeatures : []);
        const optionalFeatures = defaultOptions.optionalFeatures.concat(
            options && options.optionalFeatures ? options.optionalFeatures : []);
        const enabledFeatures = new Set();
        let requirementsFailed = false;
        for (let feature of requiredFeatures) {
          if (!this[PRIVATE$4].device.isFeatureSupported(feature)) {
            console.error(`The required feature '${feature}' is not supported`);
            requirementsFailed = true;
          } else {
            enabledFeatures.add(feature);
          }
        }
        if (requirementsFailed) {
          throw new DOMException('Session does not support some required features', 'NotSupportedError');
        }
        for (let feature of optionalFeatures) {
          if (!this[PRIVATE$4].device.isFeatureSupported(feature)) {
            console.log(`The optional feature '${feature}' is not supported`);
          } else {
            enabledFeatures.add(feature);
          }
        }
        const sessionId = await this[PRIVATE$4].device.requestSession(mode, enabledFeatures);
        const session = new XRSession(this[PRIVATE$4].device, mode, sessionId);
        if (mode == 'inline') {
          this[PRIVATE$4].inlineSessions.add(session);
        } else {
          this[PRIVATE$4].immersiveSession = session;
        }
        const onSessionEnd = () => {
          if (mode == 'inline') {
            this[PRIVATE$4].inlineSessions.delete(session);
          } else {
            this[PRIVATE$4].immersiveSession = null;
          }
          session.removeEventListener('end', onSessionEnd);
        };
        session.addEventListener('end', onSessionEnd);
        return session;
      }
    }

    let now;
    if ('performance' in _global === false) {
      let startTime = Date.now();
      now = () => Date.now() - startTime;
    } else {
      now = () => performance.now();
    }
    var now$1 = now;

    const PRIVATE$5 = Symbol('@@webxr-polyfill/XRPose');
    class XRPose$1 {
      constructor(transform, emulatedPosition) {
        this[PRIVATE$5] = {
          transform,
          emulatedPosition,
        };
      }
      get transform() { return this[PRIVATE$5].transform; }
      get emulatedPosition() { return this[PRIVATE$5].emulatedPosition; }
    }

    const PRIVATE$6 = Symbol('@@webxr-polyfill/XRViewerPose');
    class XRViewerPose extends XRPose$1 {
      constructor(transform, views, emulatedPosition = false) {
        super(transform, emulatedPosition);
        this[PRIVATE$6] = {
          views
        };
      }
      get views() {
        return this[PRIVATE$6].views;
      }
    }

    const PRIVATE$7 = Symbol('@@webxr-polyfill/XRViewport');
    class XRViewport {
      constructor(target) {
        this[PRIVATE$7] = { target };
      }
      get x() { return this[PRIVATE$7].target.x; }
      get y() { return this[PRIVATE$7].target.y; }
      get width() { return this[PRIVATE$7].target.width; }
      get height() { return this[PRIVATE$7].target.height; }
    }

    const XREyes = ['left', 'right', 'none'];
    const PRIVATE$8 = Symbol('@@webxr-polyfill/XRView');
    class XRView {
      constructor(device, transform, eye, sessionId) {
        if (!XREyes.includes(eye)) {
          throw new Error(`XREye must be one of: ${XREyes}`);
        }
        const temp = Object.create(null);
        const viewport = new XRViewport(temp);
        this[PRIVATE$8] = {
          device,
          eye,
          viewport,
          temp,
          sessionId,
          transform,
        };
      }
      get eye() { return this[PRIVATE$8].eye; }
      get projectionMatrix() { return this[PRIVATE$8].device.getProjectionMatrix(this.eye); }
      get transform() { return this[PRIVATE$8].transform; }
      _getViewport(layer) {
        if (this[PRIVATE$8].device.getViewport(this[PRIVATE$8].sessionId,
                                               this.eye,
                                               layer,
                                               this[PRIVATE$8].temp)) {
          return this[PRIVATE$8].viewport;
        }
        return undefined;
      }
    }

    const PRIVATE$9 = Symbol('@@webxr-polyfill/XRFrame');
    const NON_ACTIVE_MSG = "XRFrame access outside the callback that produced it is invalid.";
    const NON_ANIMFRAME_MSG = "getViewerPose can only be called on XRFrame objects passed to XRSession.requestAnimationFrame callbacks.";
    let NEXT_FRAME_ID = 0;
    class XRFrame {
      constructor(device, session, sessionId) {
        this[PRIVATE$9] = {
          id: ++NEXT_FRAME_ID,
          active: false,
          animationFrame: false,
          device,
          session,
          sessionId
        };
      }
      get session() { return this[PRIVATE$9].session; }
      getViewerPose(referenceSpace) {
        if (!this[PRIVATE$9].animationFrame) {
          throw new DOMException(NON_ANIMFRAME_MSG, 'InvalidStateError');
        }
        if (!this[PRIVATE$9].active) {
          throw new DOMException(NON_ACTIVE_MSG, 'InvalidStateError');
        }
        const device = this[PRIVATE$9].device;
        const session = this[PRIVATE$9].session;
        session[PRIVATE$15].viewerSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
        referenceSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
        let viewerTransform = referenceSpace._getSpaceRelativeTransform(session[PRIVATE$15].viewerSpace);
        const views = [];
        for (let viewSpace of session[PRIVATE$15].viewSpaces) {
          viewSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
          let viewTransform = referenceSpace._getSpaceRelativeTransform(viewSpace);
          let view = new XRView(device, viewTransform, viewSpace.eye, this[PRIVATE$9].sessionId);
          views.push(view);
        }
        let viewerPose = new XRViewerPose(viewerTransform, views, false                             );
        return viewerPose;
      }
      getPose(space, baseSpace) {
        if (!this[PRIVATE$9].active) {
          throw new DOMException(NON_ACTIVE_MSG, 'InvalidStateError');
        }
        const device = this[PRIVATE$9].device;
        if (space._specialType === "target-ray" || space._specialType === "grip") {
          return device.getInputPose(
            space._inputSource, baseSpace, space._specialType);
        } else {
          space._ensurePoseUpdated(device, this[PRIVATE$9].id);
          baseSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
          let transform = baseSpace._getSpaceRelativeTransform(space);
          if (!transform) { return null; }
          return new XRPose(transform, false                             );
        }
      }
    }

    const PRIVATE$10 = Symbol('@@webxr-polyfill/XRRenderState');
    const XRRenderStateInit = Object.freeze({
      depthNear: 0.1,
      depthFar: 1000.0,
      inlineVerticalFieldOfView: null,
      baseLayer: null
    });
    class XRRenderState {
      constructor(stateInit = {}) {
        const config = Object.assign({}, XRRenderStateInit, stateInit);
        this[PRIVATE$10] = { config };
      }
      get depthNear() { return this[PRIVATE$10].config.depthNear; }
      get depthFar() { return this[PRIVATE$10].config.depthFar; }
      get inlineVerticalFieldOfView() { return this[PRIVATE$10].config.inlineVerticalFieldOfView; }
      get baseLayer() { return this[PRIVATE$10].config.baseLayer; }
    }

    const POLYFILLED_XR_COMPATIBLE = Symbol('@@webxr-polyfill/polyfilled-xr-compatible');
    const XR_COMPATIBLE = Symbol('@@webxr-polyfill/xr-compatible');

    const PRIVATE$11 = Symbol('@@webxr-polyfill/XRWebGLLayer');
    const XRWebGLLayerInit = Object.freeze({
      antialias: true,
      depth: false,
      stencil: false,
      alpha: true,
      multiview: false,
      ignoreDepthValues: false,
      framebufferScaleFactor: 1.0,
    });
    let XRWebGLLayer$1 = class XRWebGLLayer {
      constructor(session, context, layerInit={}) {
        const config = Object.assign({}, XRWebGLLayerInit, layerInit);
        if (!(session instanceof XRSession$1)) {
          throw new Error('session must be a XRSession');
        }
        if (session.ended) {
          throw new Error(`InvalidStateError`);
        }
        if (context[POLYFILLED_XR_COMPATIBLE]) {
          if (context[XR_COMPATIBLE] !== true) {
            throw new Error(`InvalidStateError`);
          }
        }
        const framebuffer = context.getParameter(context.FRAMEBUFFER_BINDING);
        this[PRIVATE$11] = {
          context,
          config,
          framebuffer,
          session,
        };
      }
      get context() { return this[PRIVATE$11].context; }
      get antialias() { return this[PRIVATE$11].config.antialias; }
      get ignoreDepthValues() { return true; }
      get framebuffer() { return this[PRIVATE$11].framebuffer; }
      get framebufferWidth() { return this[PRIVATE$11].context.drawingBufferWidth; }
      get framebufferHeight() { return this[PRIVATE$11].context.drawingBufferHeight; }
      get _session() { return this[PRIVATE$11].session; }
      getViewport(view) {
        return view._getViewport(this);
      }
      static getNativeFramebufferScaleFactor(session) {
        if (!session) {
          throw new TypeError('getNativeFramebufferScaleFactor must be passed a session.')
        }
        if (session[PRIVATE$15].ended) { return 0.0; }
        return 1.0;
      }
    };

    const PRIVATE$12 = Symbol('@@webxr-polyfill/XRInputSourceEvent');
    class XRInputSourceEvent extends Event {
      constructor(type, eventInitDict) {
        super(type, eventInitDict);
        this[PRIVATE$12] = {
          frame: eventInitDict.frame,
          inputSource: eventInitDict.inputSource
        };
        Object.setPrototypeOf(this, XRInputSourceEvent.prototype);
      }
      get frame() { return this[PRIVATE$12].frame; }
      get inputSource() { return this[PRIVATE$12].inputSource; }
    }

    const PRIVATE$13 = Symbol('@@webxr-polyfill/XRSessionEvent');
    class XRSessionEvent extends Event {
      constructor(type, eventInitDict) {
        super(type, eventInitDict);
        this[PRIVATE$13] = {
          session: eventInitDict.session
        };
        Object.setPrototypeOf(this, XRSessionEvent.prototype);
      }
      get session() { return this[PRIVATE$13].session; }
    }

    const PRIVATE$14 = Symbol('@@webxr-polyfill/XRInputSourcesChangeEvent');
    class XRInputSourcesChangeEvent extends Event {
      constructor(type, eventInitDict) {
        super(type, eventInitDict);
        this[PRIVATE$14] = {
          session: eventInitDict.session,
          added: eventInitDict.added,
          removed: eventInitDict.removed
        };
        Object.setPrototypeOf(this, XRInputSourcesChangeEvent.prototype);
      }
      get session() { return this[PRIVATE$14].session; }
      get added() { return this[PRIVATE$14].added; }
      get removed() { return this[PRIVATE$14].removed; }
    }

    const PRIVATE$15 = Symbol('@@webxr-polyfill/XRSession');
    class XRViewSpace extends XRSpace {
      constructor(eye) {
        super(eye);
      }
      get eye() {
        return this._specialType;
      }
      _onPoseUpdate(device) {
        this._inverseBaseMatrix = device.getBaseViewMatrix(this._specialType);
      }
    }
    class XRSession$1 extends EventTarget {
      constructor(device, mode, id) {
        super();
        let immersive = mode != 'inline';
        let initialRenderState = new XRRenderState({
          inlineVerticalFieldOfView: immersive ? null : Math.PI * 0.5
        });
        this[PRIVATE$15] = {
          device,
          mode,
          immersive,
          ended: false,
          suspended: false,
          frameCallbacks: [],
          currentFrameCallbacks: null,
          frameHandle: 0,
          deviceFrameHandle: null,
          id,
          activeRenderState: initialRenderState,
          pendingRenderState: null,
          viewerSpace: new XRReferenceSpace("viewer"),
          viewSpaces: [],
          currentInputSources: []
        };
        if (immersive) {
          this[PRIVATE$15].viewSpaces.push(new XRViewSpace('left'),
                                        new XRViewSpace('right'));
        } else {
          this[PRIVATE$15].viewSpaces.push(new XRViewSpace('none'));
        }
        this[PRIVATE$15].onDeviceFrame = () => {
          if (this[PRIVATE$15].ended || this[PRIVATE$15].suspended) {
            return;
          }
          this[PRIVATE$15].deviceFrameHandle = null;
          this[PRIVATE$15].startDeviceFrameLoop();
          if (this[PRIVATE$15].pendingRenderState !== null) {
            this[PRIVATE$15].activeRenderState = new XRRenderState(this[PRIVATE$15].pendingRenderState);
            this[PRIVATE$15].pendingRenderState = null;
            if (this[PRIVATE$15].activeRenderState.baseLayer) {
              this[PRIVATE$15].device.onBaseLayerSet(
                this[PRIVATE$15].id,
                this[PRIVATE$15].activeRenderState.baseLayer);
            }
          }
          if (this[PRIVATE$15].activeRenderState.baseLayer === null) {
            return;
          }
          const frame = new XRFrame(device, this, this[PRIVATE$15].id);
          const callbacks = this[PRIVATE$15].currentFrameCallbacks = this[PRIVATE$15].frameCallbacks;
          this[PRIVATE$15].frameCallbacks = [];
          frame[PRIVATE$9].active = true;
          frame[PRIVATE$9].animationFrame = true;
          this[PRIVATE$15].device.onFrameStart(this[PRIVATE$15].id, this[PRIVATE$15].activeRenderState);
          this._checkInputSourcesChange();
          const rightNow = now$1();
          for (let i = 0; i < callbacks.length; i++) {
            try {
              if (!callbacks[i].cancelled && typeof callbacks[i].callback === 'function') {
                callbacks[i].callback(rightNow, frame);
              }
            } catch(err) {
              console.error(err);
            }
          }
          this[PRIVATE$15].currentFrameCallbacks = null;
          frame[PRIVATE$9].active = false;
          this[PRIVATE$15].device.onFrameEnd(this[PRIVATE$15].id);
        };
        this[PRIVATE$15].startDeviceFrameLoop = () => {
          if (this[PRIVATE$15].deviceFrameHandle === null) {
            this[PRIVATE$15].deviceFrameHandle = this[PRIVATE$15].device.requestAnimationFrame(
              this[PRIVATE$15].onDeviceFrame
            );
          }
        };
        this[PRIVATE$15].stopDeviceFrameLoop = () => {
          const handle = this[PRIVATE$15].deviceFrameHandle;
          if (handle !== null) {
            this[PRIVATE$15].device.cancelAnimationFrame(handle);
            this[PRIVATE$15].deviceFrameHandle = null;
          }
        };
        this[PRIVATE$15].onPresentationEnd = sessionId => {
          if (sessionId !== this[PRIVATE$15].id) {
            this[PRIVATE$15].suspended = false;
            this[PRIVATE$15].startDeviceFrameLoop();
            this.dispatchEvent('focus', { session: this });
            return;
          }
          this[PRIVATE$15].ended = true;
          this[PRIVATE$15].stopDeviceFrameLoop();
          device.removeEventListener('@@webxr-polyfill/vr-present-end', this[PRIVATE$15].onPresentationEnd);
          device.removeEventListener('@@webxr-polyfill/vr-present-start', this[PRIVATE$15].onPresentationStart);
          device.removeEventListener('@@webxr-polyfill/input-select-start', this[PRIVATE$15].onSelectStart);
          device.removeEventListener('@@webxr-polyfill/input-select-end', this[PRIVATE$15].onSelectEnd);
          this.dispatchEvent('end', new XRSessionEvent('end', { session: this }));
        };
        device.addEventListener('@@webxr-polyfill/vr-present-end', this[PRIVATE$15].onPresentationEnd);
        this[PRIVATE$15].onPresentationStart = sessionId => {
          if (sessionId === this[PRIVATE$15].id) {
            return;
          }
          this[PRIVATE$15].suspended = true;
          this[PRIVATE$15].stopDeviceFrameLoop();
          this.dispatchEvent('blur', { session: this });
        };
        device.addEventListener('@@webxr-polyfill/vr-present-start', this[PRIVATE$15].onPresentationStart);
        this[PRIVATE$15].onSelectStart = evt => {
          if (evt.sessionId !== this[PRIVATE$15].id) {
            return;
          }
          this[PRIVATE$15].dispatchInputSourceEvent('selectstart',  evt.inputSource);
        };
        device.addEventListener('@@webxr-polyfill/input-select-start', this[PRIVATE$15].onSelectStart);
        this[PRIVATE$15].onSelectEnd = evt => {
          if (evt.sessionId !== this[PRIVATE$15].id) {
            return;
          }
          this[PRIVATE$15].dispatchInputSourceEvent('selectend',  evt.inputSource);
          this[PRIVATE$15].dispatchInputSourceEvent('select',  evt.inputSource);
        };
        device.addEventListener('@@webxr-polyfill/input-select-end', this[PRIVATE$15].onSelectEnd);
        this[PRIVATE$15].onSqueezeStart = evt => {
          if (evt.sessionId !== this[PRIVATE$15].id) {
            return;
          }
          this[PRIVATE$15].dispatchInputSourceEvent('squeezestart',  evt.inputSource);
        };
        device.addEventListener('@@webxr-polyfill/input-squeeze-start', this[PRIVATE$15].onSqueezeStart);
        this[PRIVATE$15].onSqueezeEnd = evt => {
          if (evt.sessionId !== this[PRIVATE$15].id) {
            return;
          }
          this[PRIVATE$15].dispatchInputSourceEvent('squeezeend',  evt.inputSource);
          this[PRIVATE$15].dispatchInputSourceEvent('squeeze',  evt.inputSource);
        };
        device.addEventListener('@@webxr-polyfill/input-squeeze-end', this[PRIVATE$15].onSqueezeEnd);
        this[PRIVATE$15].dispatchInputSourceEvent = (type, inputSource) => {
          const frame = new XRFrame(device, this, this[PRIVATE$15].id);
          const event = new XRInputSourceEvent(type, { frame, inputSource });
          frame[PRIVATE$9].active = true;
          this.dispatchEvent(type, event);
          frame[PRIVATE$9].active = false;
        };
        this[PRIVATE$15].startDeviceFrameLoop();
        this.onblur = undefined;
        this.onfocus = undefined;
        this.onresetpose = undefined;
        this.onend = undefined;
        this.onselect = undefined;
        this.onselectstart = undefined;
        this.onselectend = undefined;
      }
      get renderState() { return this[PRIVATE$15].activeRenderState; }
      get environmentBlendMode() {
        return this[PRIVATE$15].device.environmentBlendMode || 'opaque';
      }
      async requestReferenceSpace(type) {
        if (this[PRIVATE$15].ended) {
          return;
        }
        if (!XRReferenceSpaceTypes.includes(type)) {
          throw new TypeError(`XRReferenceSpaceType must be one of ${XRReferenceSpaceTypes}`);
        }
        if (!this[PRIVATE$15].device.doesSessionSupportReferenceSpace(this[PRIVATE$15].id, type)) {
          throw new DOMException(`The ${type} reference space is not supported by this session.`, 'NotSupportedError');
        }
        if (type === 'viewer') {
          return this[PRIVATE$15].viewerSpace;
        }
        let transform = await this[PRIVATE$15].device.requestFrameOfReferenceTransform(type);
        if (type === 'bounded-floor') {
          if (!transform) {
            throw new DOMException(`${type} XRReferenceSpace not supported by this device.`, 'NotSupportedError');
          }
          let bounds = this[PRIVATE$15].device.requestStageBounds();
          if (!bounds) {
            throw new DOMException(`${type} XRReferenceSpace not supported by this device.`, 'NotSupportedError');
          }
          throw new DOMException(`The WebXR polyfill does not support the ${type} reference space yet.`, 'NotSupportedError');
        }
        return new XRReferenceSpace(type, transform);
      }
      requestAnimationFrame(callback) {
        if (this[PRIVATE$15].ended) {
          return;
        }
        const handle = ++this[PRIVATE$15].frameHandle;
        this[PRIVATE$15].frameCallbacks.push({
          handle,
          callback,
          cancelled: false
        });
        return handle;
      }
      cancelAnimationFrame(handle) {
        let callbacks = this[PRIVATE$15].frameCallbacks;
        let index = callbacks.findIndex(d => d && d.handle === handle);
        if (index > -1) {
          callbacks[index].cancelled = true;
          callbacks.splice(index, 1);
        }
        callbacks = this[PRIVATE$15].currentFrameCallbacks;
        if (callbacks) {
          index = callbacks.findIndex(d => d && d.handle === handle);
          if (index > -1) {
            callbacks[index].cancelled = true;
          }
        }
      }
      get inputSources() {
        return this[PRIVATE$15].device.getInputSources();
      }
      async end() {
        if (this[PRIVATE$15].ended) {
          return;
        }
        if (this[PRIVATE$15].immersive) {
          this[PRIVATE$15].ended = true;
          this[PRIVATE$15].device.removeEventListener('@@webxr-polyfill/vr-present-start',
                                                     this[PRIVATE$15].onPresentationStart);
          this[PRIVATE$15].device.removeEventListener('@@webxr-polyfill/vr-present-end',
                                                     this[PRIVATE$15].onPresentationEnd);
          this[PRIVATE$15].device.removeEventListener('@@webxr-polyfill/input-select-start',
                                                     this[PRIVATE$15].onSelectStart);
          this[PRIVATE$15].device.removeEventListener('@@webxr-polyfill/input-select-end',
                                                     this[PRIVATE$15].onSelectEnd);
          this.dispatchEvent('end', new XRSessionEvent('end', { session: this }));
        }
        this[PRIVATE$15].stopDeviceFrameLoop();
        return this[PRIVATE$15].device.endSession(this[PRIVATE$15].id);
      }
      updateRenderState(newState) {
        if (this[PRIVATE$15].ended) {
          const message = "Can't call updateRenderState on an XRSession " +
                          "that has already ended.";
          throw new Error(message);
        }
        if (newState.baseLayer && (newState.baseLayer._session !== this)) {
          const message = "Called updateRenderState with a base layer that was " +
                          "created by a different session.";
          throw new Error(message);
        }
        const fovSet = (newState.inlineVerticalFieldOfView !== null) &&
                       (newState.inlineVerticalFieldOfView !== undefined);
        if (fovSet) {
          if (this[PRIVATE$15].immersive) {
            const message = "inlineVerticalFieldOfView must not be set for an " +
                            "XRRenderState passed to updateRenderState for an " +
                            "immersive session.";
            throw new Error(message);
          } else {
            newState.inlineVerticalFieldOfView = Math.min(
              3.13, Math.max(0.01, newState.inlineVerticalFieldOfView));
          }
        }
        if (this[PRIVATE$15].pendingRenderState === null) {
          const activeRenderState = this[PRIVATE$15].activeRenderState;
          this[PRIVATE$15].pendingRenderState = {
            depthNear: activeRenderState.depthNear,
            depthFar: activeRenderState.depthFar,
            inlineVerticalFieldOfView: activeRenderState.inlineVerticalFieldOfView,
            baseLayer: activeRenderState.baseLayer
          };
        }
        Object.assign(this[PRIVATE$15].pendingRenderState, newState);
      }
      _checkInputSourcesChange() {
        const added = [];
        const removed = [];
        const newInputSources = this.inputSources;
        const oldInputSources = this[PRIVATE$15].currentInputSources;
        for (const newInputSource of newInputSources) {
          if (!oldInputSources.includes(newInputSource)) {
            added.push(newInputSource);
          }
        }
        for (const oldInputSource of oldInputSources) {
          if (!newInputSources.includes(oldInputSource)) {
            removed.push(oldInputSource);
          }
        }
        if (added.length > 0 || removed.length > 0) {
          this.dispatchEvent('inputsourceschange', new XRInputSourcesChangeEvent('inputsourceschange', {
            session: this,
            added: added,
            removed: removed
          }));
        }
        this[PRIVATE$15].currentInputSources.length = 0;
        for (const newInputSource of newInputSources) {
          this[PRIVATE$15].currentInputSources.push(newInputSource);
        }
      }
    }

    const PRIVATE$16 = Symbol('@@webxr-polyfill/XRInputSource');
    class XRInputSource {
      constructor(impl) {
        this[PRIVATE$16] = {
          impl,
          gripSpace: new XRSpace("grip", this),
          targetRaySpace: new XRSpace("target-ray", this)
        };
      }
      get handedness() { return this[PRIVATE$16].impl.handedness; }
      get targetRayMode() { return this[PRIVATE$16].impl.targetRayMode; }
      get gripSpace() {
        let mode = this[PRIVATE$16].impl.targetRayMode;
        if (mode === "gaze" || mode === "screen") {
          return null;
        }
        return this[PRIVATE$16].gripSpace;
      }
      get targetRaySpace() { return this[PRIVATE$16].targetRaySpace; }
      get profiles() { return this[PRIVATE$16].impl.profiles; }
      get gamepad() { return this[PRIVATE$16].impl.gamepad; }
    }

    const PRIVATE$17 = Symbol('@@webxr-polyfill/XRReferenceSpaceEvent');
    class XRReferenceSpaceEvent extends Event {
      constructor(type, eventInitDict) {
        super(type, eventInitDict);
        this[PRIVATE$17] = {
          referenceSpace: eventInitDict.referenceSpace,
          transform: eventInitDict.transform || null
        };
        Object.setPrototypeOf(this, XRReferenceSpaceEvent.prototype);
      }
      get referenceSpace() { return this[PRIVATE$17].referenceSpace; }
      get transform() { return this[PRIVATE$17].transform; }
    }

    var API = {
      XRSystem,
      XRSession: XRSession$1,
      XRSessionEvent,
      XRFrame,
      XRView,
      XRViewport,
      XRViewerPose,
      XRWebGLLayer: XRWebGLLayer$1,
      XRSpace,
      XRReferenceSpace,
      XRReferenceSpaceEvent,
      XRInputSource,
      XRInputSourceEvent,
      XRInputSourcesChangeEvent,
      XRRenderState,
      XRRigidTransform: XRRigidTransform$1,
      XRPose: XRPose$1,
    };

    const polyfillMakeXRCompatible = Context => {
      if (typeof Context.prototype.makeXRCompatible === 'function') {
        return false;
      }
      Context.prototype.makeXRCompatible = function () {
        this[XR_COMPATIBLE] = true;
        return Promise.resolve();
      };
      return true;
    };
    const polyfillGetContext = (Canvas) => {
      const getContext = Canvas.prototype.getContext;
      Canvas.prototype.getContext = function (contextType, glAttribs) {
        const ctx = getContext.call(this, contextType, glAttribs);
        if (ctx) {
          ctx[POLYFILLED_XR_COMPATIBLE] = true;
          if (glAttribs && ('xrCompatible' in glAttribs)) {
            ctx[XR_COMPATIBLE] = glAttribs.xrCompatible;
          }
        }
        return ctx;
      };
    };

    const isImageBitmapSupported = global =>
      !!(global.ImageBitmapRenderingContext &&
         global.createImageBitmap);
    const isMobile = global => {
      var check = false;
      (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true;})(global.navigator.userAgent||global.navigator.vendor||global.opera);
      return check;
    };
    const applyCanvasStylesForMinimalRendering = canvas => {
      canvas.style.display = 'block';
      canvas.style.position = 'absolute';
      canvas.style.width = canvas.style.height = '1px';
      canvas.style.top = canvas.style.left = '0px';
    };

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var cardboardVrDisplay = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	module.exports = factory();
    }(commonjsGlobal, (function () { var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }
        return _arr;
      }
      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    var MIN_TIMESTEP = 0.001;
    var MAX_TIMESTEP = 1;
    var dataUri = function dataUri(mimeType, svg) {
      return 'data:' + mimeType + ',' + encodeURIComponent(svg);
    };
    var lerp = function lerp(a, b, t) {
      return a + (b - a) * t;
    };
    var isIOS = function () {
      var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);
      return function () {
        return isIOS;
      };
    }();
    var isWebViewAndroid = function () {
      var isWebViewAndroid = navigator.userAgent.indexOf('Version') !== -1 && navigator.userAgent.indexOf('Android') !== -1 && navigator.userAgent.indexOf('Chrome') !== -1;
      return function () {
        return isWebViewAndroid;
      };
    }();
    var isSafari = function () {
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      return function () {
        return isSafari;
      };
    }();
    var isFirefoxAndroid = function () {
      var isFirefoxAndroid = navigator.userAgent.indexOf('Firefox') !== -1 && navigator.userAgent.indexOf('Android') !== -1;
      return function () {
        return isFirefoxAndroid;
      };
    }();
    var getChromeVersion = function () {
      var match = navigator.userAgent.match(/.*Chrome\/([0-9]+)/);
      var value = match ? parseInt(match[1], 10) : null;
      return function () {
        return value;
      };
    }();
    var isSafariWithoutDeviceMotion = function () {
      var value = false;
      value = isIOS() && isSafari() && navigator.userAgent.indexOf('13_4') !== -1;
      return function () {
        return value;
      };
    }();
    var isChromeWithoutDeviceMotion = function () {
      var value = false;
      if (getChromeVersion() === 65) {
        var match = navigator.userAgent.match(/.*Chrome\/([0-9\.]*)/);
        if (match) {
          var _match$1$split = match[1].split('.'),
              _match$1$split2 = slicedToArray(_match$1$split, 4);
              _match$1$split2[0];
              _match$1$split2[1];
              var branch = _match$1$split2[2],
              build = _match$1$split2[3];
          value = parseInt(branch, 10) === 3325 && parseInt(build, 10) < 148;
        }
      }
      return function () {
        return value;
      };
    }();
    var isR7 = function () {
      var isR7 = navigator.userAgent.indexOf('R7 Build') !== -1;
      return function () {
        return isR7;
      };
    }();
    var isLandscapeMode = function isLandscapeMode() {
      var rtn = window.orientation == 90 || window.orientation == -90;
      return isR7() ? !rtn : rtn;
    };
    var isTimestampDeltaValid = function isTimestampDeltaValid(timestampDeltaS) {
      if (isNaN(timestampDeltaS)) {
        return false;
      }
      if (timestampDeltaS <= MIN_TIMESTEP) {
        return false;
      }
      if (timestampDeltaS > MAX_TIMESTEP) {
        return false;
      }
      return true;
    };
    var getScreenWidth = function getScreenWidth() {
      return Math.max(window.screen.width, window.screen.height) * window.devicePixelRatio;
    };
    var getScreenHeight = function getScreenHeight() {
      return Math.min(window.screen.width, window.screen.height) * window.devicePixelRatio;
    };
    var requestFullscreen = function requestFullscreen(element) {
      if (isWebViewAndroid()) {
        return false;
      }
      if (element.requestFullscreen) {
        element.requestFullscreen();
      } else if (element.webkitRequestFullscreen) {
        element.webkitRequestFullscreen();
      } else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen();
      } else if (element.msRequestFullscreen) {
        element.msRequestFullscreen();
      } else {
        return false;
      }
      return true;
    };
    var exitFullscreen = function exitFullscreen() {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else {
        return false;
      }
      return true;
    };
    var getFullscreenElement = function getFullscreenElement() {
      return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
    };
    var linkProgram = function linkProgram(gl, vertexSource, fragmentSource, attribLocationMap) {
      var vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vertexShader, vertexSource);
      gl.compileShader(vertexShader);
      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fragmentShader, fragmentSource);
      gl.compileShader(fragmentShader);
      var program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      for (var attribName in attribLocationMap) {
        gl.bindAttribLocation(program, attribLocationMap[attribName], attribName);
      }gl.linkProgram(program);
      gl.deleteShader(vertexShader);
      gl.deleteShader(fragmentShader);
      return program;
    };
    var getProgramUniforms = function getProgramUniforms(gl, program) {
      var uniforms = {};
      var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
      var uniformName = '';
      for (var i = 0; i < uniformCount; i++) {
        var uniformInfo = gl.getActiveUniform(program, i);
        uniformName = uniformInfo.name.replace('[0]', '');
        uniforms[uniformName] = gl.getUniformLocation(program, uniformName);
      }
      return uniforms;
    };
    var orthoMatrix = function orthoMatrix(out, left, right, bottom, top, near, far) {
      var lr = 1 / (left - right),
          bt = 1 / (bottom - top),
          nf = 1 / (near - far);
      out[0] = -2 * lr;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = -2 * bt;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 2 * nf;
      out[11] = 0;
      out[12] = (left + right) * lr;
      out[13] = (top + bottom) * bt;
      out[14] = (far + near) * nf;
      out[15] = 1;
      return out;
    };
    var isMobile = function isMobile() {
      var check = false;
      (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
      })(navigator.userAgent || navigator.vendor || window.opera);
      return check;
    };
    var extend = function extend(dest, src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dest[key] = src[key];
        }
      }
      return dest;
    };
    var safariCssSizeWorkaround = function safariCssSizeWorkaround(canvas) {
      if (isIOS()) {
        var width = canvas.style.width;
        var height = canvas.style.height;
        canvas.style.width = parseInt(width) + 1 + 'px';
        canvas.style.height = parseInt(height) + 'px';
        setTimeout(function () {
          canvas.style.width = width;
          canvas.style.height = height;
        }, 100);
      }
      window.canvas = canvas;
    };
    var frameDataFromPose = function () {
      var piOver180 = Math.PI / 180.0;
      var rad45 = Math.PI * 0.25;
      function mat4_perspectiveFromFieldOfView(out, fov, near, far) {
        var upTan = Math.tan(fov ? fov.upDegrees * piOver180 : rad45),
            downTan = Math.tan(fov ? fov.downDegrees * piOver180 : rad45),
            leftTan = Math.tan(fov ? fov.leftDegrees * piOver180 : rad45),
            rightTan = Math.tan(fov ? fov.rightDegrees * piOver180 : rad45),
            xScale = 2.0 / (leftTan + rightTan),
            yScale = 2.0 / (upTan + downTan);
        out[0] = xScale;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        out[4] = 0.0;
        out[5] = yScale;
        out[6] = 0.0;
        out[7] = 0.0;
        out[8] = -((leftTan - rightTan) * xScale * 0.5);
        out[9] = (upTan - downTan) * yScale * 0.5;
        out[10] = far / (near - far);
        out[11] = -1;
        out[12] = 0.0;
        out[13] = 0.0;
        out[14] = far * near / (near - far);
        out[15] = 0.0;
        return out;
      }
      function mat4_fromRotationTranslation(out, q, v) {
        var x = q[0],
            y = q[1],
            z = q[2],
            w = q[3],
            x2 = x + x,
            y2 = y + y,
            z2 = z + z,
            xx = x * x2,
            xy = x * y2,
            xz = x * z2,
            yy = y * y2,
            yz = y * z2,
            zz = z * z2,
            wx = w * x2,
            wy = w * y2,
            wz = w * z2;
        out[0] = 1 - (yy + zz);
        out[1] = xy + wz;
        out[2] = xz - wy;
        out[3] = 0;
        out[4] = xy - wz;
        out[5] = 1 - (xx + zz);
        out[6] = yz + wx;
        out[7] = 0;
        out[8] = xz + wy;
        out[9] = yz - wx;
        out[10] = 1 - (xx + yy);
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
      }
      function mat4_translate(out, a, v) {
        var x = v[0],
            y = v[1],
            z = v[2],
            a00,
            a01,
            a02,
            a03,
            a10,
            a11,
            a12,
            a13,
            a20,
            a21,
            a22,
            a23;
        if (a === out) {
          out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
          out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
          out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
          out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        } else {
          a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];
          a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];
          a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];
          out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;
          out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;
          out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;
          out[12] = a00 * x + a10 * y + a20 * z + a[12];
          out[13] = a01 * x + a11 * y + a21 * z + a[13];
          out[14] = a02 * x + a12 * y + a22 * z + a[14];
          out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
      }
      function mat4_invert(out, a) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2],
            a03 = a[3],
            a10 = a[4],
            a11 = a[5],
            a12 = a[6],
            a13 = a[7],
            a20 = a[8],
            a21 = a[9],
            a22 = a[10],
            a23 = a[11],
            a30 = a[12],
            a31 = a[13],
            a32 = a[14],
            a33 = a[15],
            b00 = a00 * a11 - a01 * a10,
            b01 = a00 * a12 - a02 * a10,
            b02 = a00 * a13 - a03 * a10,
            b03 = a01 * a12 - a02 * a11,
            b04 = a01 * a13 - a03 * a11,
            b05 = a02 * a13 - a03 * a12,
            b06 = a20 * a31 - a21 * a30,
            b07 = a20 * a32 - a22 * a30,
            b08 = a20 * a33 - a23 * a30,
            b09 = a21 * a32 - a22 * a31,
            b10 = a21 * a33 - a23 * a31,
            b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
          return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
      }
      var defaultOrientation = new Float32Array([0, 0, 0, 1]);
      var defaultPosition = new Float32Array([0, 0, 0]);
      function updateEyeMatrices(projection, view, pose, fov, offset, vrDisplay) {
        mat4_perspectiveFromFieldOfView(projection, fov || null, vrDisplay.depthNear, vrDisplay.depthFar);
        var orientation = pose.orientation || defaultOrientation;
        var position = pose.position || defaultPosition;
        mat4_fromRotationTranslation(view, orientation, position);
        if (offset) mat4_translate(view, view, offset);
        mat4_invert(view, view);
      }
      return function (frameData, pose, vrDisplay) {
        if (!frameData || !pose) return false;
        frameData.pose = pose;
        frameData.timestamp = pose.timestamp;
        updateEyeMatrices(frameData.leftProjectionMatrix, frameData.leftViewMatrix, pose, vrDisplay._getFieldOfView("left"), vrDisplay._getEyeOffset("left"), vrDisplay);
        updateEyeMatrices(frameData.rightProjectionMatrix, frameData.rightViewMatrix, pose, vrDisplay._getFieldOfView("right"), vrDisplay._getEyeOffset("right"), vrDisplay);
        return true;
      };
    }();
    var isInsideCrossOriginIFrame = function isInsideCrossOriginIFrame() {
      var isFramed = window.self !== window.top;
      var refOrigin = getOriginFromUrl(document.referrer);
      var thisOrigin = getOriginFromUrl(window.location.href);
      return isFramed && refOrigin !== thisOrigin;
    };
    var getOriginFromUrl = function getOriginFromUrl(url) {
      var domainIdx;
      var protoSepIdx = url.indexOf("://");
      if (protoSepIdx !== -1) {
        domainIdx = protoSepIdx + 3;
      } else {
        domainIdx = 0;
      }
      var domainEndIdx = url.indexOf('/', domainIdx);
      if (domainEndIdx === -1) {
        domainEndIdx = url.length;
      }
      return url.substring(0, domainEndIdx);
    };
    var getQuaternionAngle = function getQuaternionAngle(quat) {
      if (quat.w > 1) {
        console.warn('getQuaternionAngle: w > 1');
        return 0;
      }
      var angle = 2 * Math.acos(quat.w);
      return angle;
    };
    var warnOnce = function () {
      var observedWarnings = {};
      return function (key, message) {
        if (observedWarnings[key] === undefined) {
          console.warn('webvr-polyfill: ' + message);
          observedWarnings[key] = true;
        }
      };
    }();
    var deprecateWarning = function deprecateWarning(deprecated, suggested) {
      var alternative = suggested ? 'Please use ' + suggested + ' instead.' : '';
      warnOnce(deprecated, deprecated + ' has been deprecated. ' + 'This may not work on native WebVR displays. ' + alternative);
    };
    function WGLUPreserveGLState(gl, bindings, callback) {
      if (!bindings) {
        callback(gl);
        return;
      }
      var boundValues = [];
      var activeTexture = null;
      for (var i = 0; i < bindings.length; ++i) {
        var binding = bindings[i];
        switch (binding) {
          case gl.TEXTURE_BINDING_2D:
          case gl.TEXTURE_BINDING_CUBE_MAP:
            var textureUnit = bindings[++i];
            if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31) {
              console.error("TEXTURE_BINDING_2D or TEXTURE_BINDING_CUBE_MAP must be followed by a valid texture unit");
              boundValues.push(null, null);
              break;
            }
            if (!activeTexture) {
              activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
            }
            gl.activeTexture(textureUnit);
            boundValues.push(gl.getParameter(binding), null);
            break;
          case gl.ACTIVE_TEXTURE:
            activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
            boundValues.push(null);
            break;
          default:
            boundValues.push(gl.getParameter(binding));
            break;
        }
      }
      callback(gl);
      for (var i = 0; i < bindings.length; ++i) {
        var binding = bindings[i];
        var boundValue = boundValues[i];
        switch (binding) {
          case gl.ACTIVE_TEXTURE:
            break;
          case gl.ARRAY_BUFFER_BINDING:
            gl.bindBuffer(gl.ARRAY_BUFFER, boundValue);
            break;
          case gl.COLOR_CLEAR_VALUE:
            gl.clearColor(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
            break;
          case gl.COLOR_WRITEMASK:
            gl.colorMask(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
            break;
          case gl.CURRENT_PROGRAM:
            gl.useProgram(boundValue);
            break;
          case gl.ELEMENT_ARRAY_BUFFER_BINDING:
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, boundValue);
            break;
          case gl.FRAMEBUFFER_BINDING:
            gl.bindFramebuffer(gl.FRAMEBUFFER, boundValue);
            break;
          case gl.RENDERBUFFER_BINDING:
            gl.bindRenderbuffer(gl.RENDERBUFFER, boundValue);
            break;
          case gl.TEXTURE_BINDING_2D:
            var textureUnit = bindings[++i];
            if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
              break;
            gl.activeTexture(textureUnit);
            gl.bindTexture(gl.TEXTURE_2D, boundValue);
            break;
          case gl.TEXTURE_BINDING_CUBE_MAP:
            var textureUnit = bindings[++i];
            if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
              break;
            gl.activeTexture(textureUnit);
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, boundValue);
            break;
          case gl.VIEWPORT:
            gl.viewport(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
            break;
          case gl.BLEND:
          case gl.CULL_FACE:
          case gl.DEPTH_TEST:
          case gl.SCISSOR_TEST:
          case gl.STENCIL_TEST:
            if (boundValue) {
              gl.enable(binding);
            } else {
              gl.disable(binding);
            }
            break;
          default:
            console.log("No GL restore behavior for 0x" + binding.toString(16));
            break;
        }
        if (activeTexture) {
          gl.activeTexture(activeTexture);
        }
      }
    }
    var glPreserveState = WGLUPreserveGLState;
    var distortionVS = ['attribute vec2 position;', 'attribute vec3 texCoord;', 'varying vec2 vTexCoord;', 'uniform vec4 viewportOffsetScale[2];', 'void main() {', '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];', '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;', '  gl_Position = vec4( position, 1.0, 1.0 );', '}'].join('\n');
    var distortionFS = ['precision mediump float;', 'uniform sampler2D diffuse;', 'varying vec2 vTexCoord;', 'void main() {', '  gl_FragColor = texture2D(diffuse, vTexCoord);', '}'].join('\n');
    function CardboardDistorter(gl, cardboardUI, bufferScale, dirtySubmitFrameBindings) {
      this.gl = gl;
      this.cardboardUI = cardboardUI;
      this.bufferScale = bufferScale;
      this.dirtySubmitFrameBindings = dirtySubmitFrameBindings;
      this.ctxAttribs = gl.getContextAttributes();
      this.instanceExt = gl.getExtension('ANGLE_instanced_arrays');
      this.meshWidth = 20;
      this.meshHeight = 20;
      this.bufferWidth = gl.drawingBufferWidth;
      this.bufferHeight = gl.drawingBufferHeight;
      this.realBindFramebuffer = gl.bindFramebuffer;
      this.realEnable = gl.enable;
      this.realDisable = gl.disable;
      this.realColorMask = gl.colorMask;
      this.realClearColor = gl.clearColor;
      this.realViewport = gl.viewport;
      if (!isIOS()) {
        this.realCanvasWidth = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'width');
        this.realCanvasHeight = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'height');
      }
      this.isPatched = false;
      this.lastBoundFramebuffer = null;
      this.cullFace = false;
      this.depthTest = false;
      this.blend = false;
      this.scissorTest = false;
      this.stencilTest = false;
      this.viewport = [0, 0, 0, 0];
      this.colorMask = [true, true, true, true];
      this.clearColor = [0, 0, 0, 0];
      this.attribs = {
        position: 0,
        texCoord: 1
      };
      this.program = linkProgram(gl, distortionVS, distortionFS, this.attribs);
      this.uniforms = getProgramUniforms(gl, this.program);
      this.viewportOffsetScale = new Float32Array(8);
      this.setTextureBounds();
      this.vertexBuffer = gl.createBuffer();
      this.indexBuffer = gl.createBuffer();
      this.indexCount = 0;
      this.renderTarget = gl.createTexture();
      this.framebuffer = gl.createFramebuffer();
      this.depthStencilBuffer = null;
      this.depthBuffer = null;
      this.stencilBuffer = null;
      if (this.ctxAttribs.depth && this.ctxAttribs.stencil) {
        this.depthStencilBuffer = gl.createRenderbuffer();
      } else if (this.ctxAttribs.depth) {
        this.depthBuffer = gl.createRenderbuffer();
      } else if (this.ctxAttribs.stencil) {
        this.stencilBuffer = gl.createRenderbuffer();
      }
      this.patch();
      this.onResize();
    }
    CardboardDistorter.prototype.destroy = function () {
      var gl = this.gl;
      this.unpatch();
      gl.deleteProgram(this.program);
      gl.deleteBuffer(this.vertexBuffer);
      gl.deleteBuffer(this.indexBuffer);
      gl.deleteTexture(this.renderTarget);
      gl.deleteFramebuffer(this.framebuffer);
      if (this.depthStencilBuffer) {
        gl.deleteRenderbuffer(this.depthStencilBuffer);
      }
      if (this.depthBuffer) {
        gl.deleteRenderbuffer(this.depthBuffer);
      }
      if (this.stencilBuffer) {
        gl.deleteRenderbuffer(this.stencilBuffer);
      }
      if (this.cardboardUI) {
        this.cardboardUI.destroy();
      }
    };
    CardboardDistorter.prototype.onResize = function () {
      var gl = this.gl;
      var self = this;
      var glState = [gl.RENDERBUFFER_BINDING, gl.TEXTURE_BINDING_2D, gl.TEXTURE0];
      glPreserveState(gl, glState, function (gl) {
        self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);
        if (self.scissorTest) {
          self.realDisable.call(gl, gl.SCISSOR_TEST);
        }
        self.realColorMask.call(gl, true, true, true, true);
        self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
        self.realClearColor.call(gl, 0, 0, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);
        self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.framebuffer);
        gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
        gl.texImage2D(gl.TEXTURE_2D, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, self.bufferWidth, self.bufferHeight, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, gl.UNSIGNED_BYTE, null);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, self.renderTarget, 0);
        if (self.ctxAttribs.depth && self.ctxAttribs.stencil) {
          gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthStencilBuffer);
          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, self.bufferWidth, self.bufferHeight);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, self.depthStencilBuffer);
        } else if (self.ctxAttribs.depth) {
          gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthBuffer);
          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, self.bufferWidth, self.bufferHeight);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, self.depthBuffer);
        } else if (self.ctxAttribs.stencil) {
          gl.bindRenderbuffer(gl.RENDERBUFFER, self.stencilBuffer);
          gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, self.bufferWidth, self.bufferHeight);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, self.stencilBuffer);
        }
        if (!gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
          console.error('Framebuffer incomplete!');
        }
        self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
        if (self.scissorTest) {
          self.realEnable.call(gl, gl.SCISSOR_TEST);
        }
        self.realColorMask.apply(gl, self.colorMask);
        self.realViewport.apply(gl, self.viewport);
        self.realClearColor.apply(gl, self.clearColor);
      });
      if (this.cardboardUI) {
        this.cardboardUI.onResize();
      }
    };
    CardboardDistorter.prototype.patch = function () {
      if (this.isPatched) {
        return;
      }
      var self = this;
      var canvas = this.gl.canvas;
      var gl = this.gl;
      if (!isIOS()) {
        canvas.width = getScreenWidth() * this.bufferScale;
        canvas.height = getScreenHeight() * this.bufferScale;
        Object.defineProperty(canvas, 'width', {
          configurable: true,
          enumerable: true,
          get: function get() {
            return self.bufferWidth;
          },
          set: function set(value) {
            self.bufferWidth = value;
            self.realCanvasWidth.set.call(canvas, value);
            self.onResize();
          }
        });
        Object.defineProperty(canvas, 'height', {
          configurable: true,
          enumerable: true,
          get: function get() {
            return self.bufferHeight;
          },
          set: function set(value) {
            self.bufferHeight = value;
            self.realCanvasHeight.set.call(canvas, value);
            self.onResize();
          }
        });
      }
      this.lastBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
      if (this.lastBoundFramebuffer == null) {
        this.lastBoundFramebuffer = this.framebuffer;
        this.gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
      }
      this.gl.bindFramebuffer = function (target, framebuffer) {
        self.lastBoundFramebuffer = framebuffer ? framebuffer : self.framebuffer;
        self.realBindFramebuffer.call(gl, target, self.lastBoundFramebuffer);
      };
      this.cullFace = gl.getParameter(gl.CULL_FACE);
      this.depthTest = gl.getParameter(gl.DEPTH_TEST);
      this.blend = gl.getParameter(gl.BLEND);
      this.scissorTest = gl.getParameter(gl.SCISSOR_TEST);
      this.stencilTest = gl.getParameter(gl.STENCIL_TEST);
      gl.enable = function (pname) {
        switch (pname) {
          case gl.CULL_FACE:
            self.cullFace = true;break;
          case gl.DEPTH_TEST:
            self.depthTest = true;break;
          case gl.BLEND:
            self.blend = true;break;
          case gl.SCISSOR_TEST:
            self.scissorTest = true;break;
          case gl.STENCIL_TEST:
            self.stencilTest = true;break;
        }
        self.realEnable.call(gl, pname);
      };
      gl.disable = function (pname) {
        switch (pname) {
          case gl.CULL_FACE:
            self.cullFace = false;break;
          case gl.DEPTH_TEST:
            self.depthTest = false;break;
          case gl.BLEND:
            self.blend = false;break;
          case gl.SCISSOR_TEST:
            self.scissorTest = false;break;
          case gl.STENCIL_TEST:
            self.stencilTest = false;break;
        }
        self.realDisable.call(gl, pname);
      };
      this.colorMask = gl.getParameter(gl.COLOR_WRITEMASK);
      gl.colorMask = function (r, g, b, a) {
        self.colorMask[0] = r;
        self.colorMask[1] = g;
        self.colorMask[2] = b;
        self.colorMask[3] = a;
        self.realColorMask.call(gl, r, g, b, a);
      };
      this.clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
      gl.clearColor = function (r, g, b, a) {
        self.clearColor[0] = r;
        self.clearColor[1] = g;
        self.clearColor[2] = b;
        self.clearColor[3] = a;
        self.realClearColor.call(gl, r, g, b, a);
      };
      this.viewport = gl.getParameter(gl.VIEWPORT);
      gl.viewport = function (x, y, w, h) {
        self.viewport[0] = x;
        self.viewport[1] = y;
        self.viewport[2] = w;
        self.viewport[3] = h;
        self.realViewport.call(gl, x, y, w, h);
      };
      this.isPatched = true;
      safariCssSizeWorkaround(canvas);
    };
    CardboardDistorter.prototype.unpatch = function () {
      if (!this.isPatched) {
        return;
      }
      var gl = this.gl;
      var canvas = this.gl.canvas;
      if (!isIOS()) {
        Object.defineProperty(canvas, 'width', this.realCanvasWidth);
        Object.defineProperty(canvas, 'height', this.realCanvasHeight);
      }
      canvas.width = this.bufferWidth;
      canvas.height = this.bufferHeight;
      gl.bindFramebuffer = this.realBindFramebuffer;
      gl.enable = this.realEnable;
      gl.disable = this.realDisable;
      gl.colorMask = this.realColorMask;
      gl.clearColor = this.realClearColor;
      gl.viewport = this.realViewport;
      if (this.lastBoundFramebuffer == this.framebuffer) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      this.isPatched = false;
      setTimeout(function () {
        safariCssSizeWorkaround(canvas);
      }, 1);
    };
    CardboardDistorter.prototype.setTextureBounds = function (leftBounds, rightBounds) {
      if (!leftBounds) {
        leftBounds = [0, 0, 0.5, 1];
      }
      if (!rightBounds) {
        rightBounds = [0.5, 0, 0.5, 1];
      }
      this.viewportOffsetScale[0] = leftBounds[0];
      this.viewportOffsetScale[1] = leftBounds[1];
      this.viewportOffsetScale[2] = leftBounds[2];
      this.viewportOffsetScale[3] = leftBounds[3];
      this.viewportOffsetScale[4] = rightBounds[0];
      this.viewportOffsetScale[5] = rightBounds[1];
      this.viewportOffsetScale[6] = rightBounds[2];
      this.viewportOffsetScale[7] = rightBounds[3];
    };
    CardboardDistorter.prototype.submitFrame = function () {
      var gl = this.gl;
      var self = this;
      var glState = [];
      if (!this.dirtySubmitFrameBindings) {
        glState.push(gl.CURRENT_PROGRAM, gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING, gl.TEXTURE_BINDING_2D, gl.TEXTURE0);
      }
      glPreserveState(gl, glState, function (gl) {
        self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);
        var positionDivisor = 0;
        var texCoordDivisor = 0;
        if (self.instanceExt) {
          positionDivisor = gl.getVertexAttrib(self.attribs.position, self.instanceExt.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
          texCoordDivisor = gl.getVertexAttrib(self.attribs.texCoord, self.instanceExt.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
        }
        if (self.cullFace) {
          self.realDisable.call(gl, gl.CULL_FACE);
        }
        if (self.depthTest) {
          self.realDisable.call(gl, gl.DEPTH_TEST);
        }
        if (self.blend) {
          self.realDisable.call(gl, gl.BLEND);
        }
        if (self.scissorTest) {
          self.realDisable.call(gl, gl.SCISSOR_TEST);
        }
        if (self.stencilTest) {
          self.realDisable.call(gl, gl.STENCIL_TEST);
        }
        self.realColorMask.call(gl, true, true, true, true);
        self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
        if (self.ctxAttribs.alpha || isIOS()) {
          self.realClearColor.call(gl, 0, 0, 0, 1);
          gl.clear(gl.COLOR_BUFFER_BIT);
        }
        gl.useProgram(self.program);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
        gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
        gl.enableVertexAttribArray(self.attribs.position);
        gl.enableVertexAttribArray(self.attribs.texCoord);
        gl.vertexAttribPointer(self.attribs.position, 2, gl.FLOAT, false, 20, 0);
        gl.vertexAttribPointer(self.attribs.texCoord, 3, gl.FLOAT, false, 20, 8);
        if (self.instanceExt) {
          if (positionDivisor != 0) {
            self.instanceExt.vertexAttribDivisorANGLE(self.attribs.position, 0);
          }
          if (texCoordDivisor != 0) {
            self.instanceExt.vertexAttribDivisorANGLE(self.attribs.texCoord, 0);
          }
        }
        gl.activeTexture(gl.TEXTURE0);
        gl.uniform1i(self.uniforms.diffuse, 0);
        gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
        gl.uniform4fv(self.uniforms.viewportOffsetScale, self.viewportOffsetScale);
        gl.drawElements(gl.TRIANGLES, self.indexCount, gl.UNSIGNED_SHORT, 0);
        if (self.cardboardUI) {
          self.cardboardUI.renderNoState();
        }
        self.realBindFramebuffer.call(self.gl, gl.FRAMEBUFFER, self.framebuffer);
        if (!self.ctxAttribs.preserveDrawingBuffer) {
          self.realClearColor.call(gl, 0, 0, 0, 0);
          gl.clear(gl.COLOR_BUFFER_BIT);
        }
        if (!self.dirtySubmitFrameBindings) {
          self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
        }
        if (self.cullFace) {
          self.realEnable.call(gl, gl.CULL_FACE);
        }
        if (self.depthTest) {
          self.realEnable.call(gl, gl.DEPTH_TEST);
        }
        if (self.blend) {
          self.realEnable.call(gl, gl.BLEND);
        }
        if (self.scissorTest) {
          self.realEnable.call(gl, gl.SCISSOR_TEST);
        }
        if (self.stencilTest) {
          self.realEnable.call(gl, gl.STENCIL_TEST);
        }
        self.realColorMask.apply(gl, self.colorMask);
        self.realViewport.apply(gl, self.viewport);
        if (self.ctxAttribs.alpha || !self.ctxAttribs.preserveDrawingBuffer) {
          self.realClearColor.apply(gl, self.clearColor);
        }
        if (self.instanceExt) {
          if (positionDivisor != 0) {
            self.instanceExt.vertexAttribDivisorANGLE(self.attribs.position, positionDivisor);
          }
          if (texCoordDivisor != 0) {
            self.instanceExt.vertexAttribDivisorANGLE(self.attribs.texCoord, texCoordDivisor);
          }
        }
      });
      if (isIOS()) {
        var canvas = gl.canvas;
        if (canvas.width != self.bufferWidth || canvas.height != self.bufferHeight) {
          self.bufferWidth = canvas.width;
          self.bufferHeight = canvas.height;
          self.onResize();
        }
      }
    };
    CardboardDistorter.prototype.updateDeviceInfo = function (deviceInfo) {
      var gl = this.gl;
      var self = this;
      var glState = [gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING];
      glPreserveState(gl, glState, function (gl) {
        var vertices = self.computeMeshVertices_(self.meshWidth, self.meshHeight, deviceInfo);
        gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        if (!self.indexCount) {
          var indices = self.computeMeshIndices_(self.meshWidth, self.meshHeight);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
          self.indexCount = indices.length;
        }
      });
    };
    CardboardDistorter.prototype.computeMeshVertices_ = function (width, height, deviceInfo) {
      var vertices = new Float32Array(2 * width * height * 5);
      var lensFrustum = deviceInfo.getLeftEyeVisibleTanAngles();
      var noLensFrustum = deviceInfo.getLeftEyeNoLensTanAngles();
      var viewport = deviceInfo.getLeftEyeVisibleScreenRect(noLensFrustum);
      var vidx = 0;
      for (var e = 0; e < 2; e++) {
        for (var j = 0; j < height; j++) {
          for (var i = 0; i < width; i++, vidx++) {
            var u = i / (width - 1);
            var v = j / (height - 1);
            var s = u;
            var t = v;
            var x = lerp(lensFrustum[0], lensFrustum[2], u);
            var y = lerp(lensFrustum[3], lensFrustum[1], v);
            var d = Math.sqrt(x * x + y * y);
            var r = deviceInfo.distortion.distortInverse(d);
            var p = x * r / d;
            var q = y * r / d;
            u = (p - noLensFrustum[0]) / (noLensFrustum[2] - noLensFrustum[0]);
            v = (q - noLensFrustum[3]) / (noLensFrustum[1] - noLensFrustum[3]);
            u = (viewport.x + u * viewport.width - 0.5) * 2.0;
            v = (viewport.y + v * viewport.height - 0.5) * 2.0;
            vertices[vidx * 5 + 0] = u;
            vertices[vidx * 5 + 1] = v;
            vertices[vidx * 5 + 2] = s;
            vertices[vidx * 5 + 3] = t;
            vertices[vidx * 5 + 4] = e;
          }
        }
        var w = lensFrustum[2] - lensFrustum[0];
        lensFrustum[0] = -(w + lensFrustum[0]);
        lensFrustum[2] = w - lensFrustum[2];
        w = noLensFrustum[2] - noLensFrustum[0];
        noLensFrustum[0] = -(w + noLensFrustum[0]);
        noLensFrustum[2] = w - noLensFrustum[2];
        viewport.x = 1 - (viewport.x + viewport.width);
      }
      return vertices;
    };
    CardboardDistorter.prototype.computeMeshIndices_ = function (width, height) {
      var indices = new Uint16Array(2 * (width - 1) * (height - 1) * 6);
      var halfwidth = width / 2;
      var halfheight = height / 2;
      var vidx = 0;
      var iidx = 0;
      for (var e = 0; e < 2; e++) {
        for (var j = 0; j < height; j++) {
          for (var i = 0; i < width; i++, vidx++) {
            if (i == 0 || j == 0) continue;
            if (i <= halfwidth == j <= halfheight) {
              indices[iidx++] = vidx;
              indices[iidx++] = vidx - width - 1;
              indices[iidx++] = vidx - width;
              indices[iidx++] = vidx - width - 1;
              indices[iidx++] = vidx;
              indices[iidx++] = vidx - 1;
            } else {
              indices[iidx++] = vidx - 1;
              indices[iidx++] = vidx - width;
              indices[iidx++] = vidx;
              indices[iidx++] = vidx - width;
              indices[iidx++] = vidx - 1;
              indices[iidx++] = vidx - width - 1;
            }
          }
        }
      }
      return indices;
    };
    CardboardDistorter.prototype.getOwnPropertyDescriptor_ = function (proto, attrName) {
      var descriptor = Object.getOwnPropertyDescriptor(proto, attrName);
      if (descriptor.get === undefined || descriptor.set === undefined) {
        descriptor.configurable = true;
        descriptor.enumerable = true;
        descriptor.get = function () {
          return this.getAttribute(attrName);
        };
        descriptor.set = function (val) {
          this.setAttribute(attrName, val);
        };
      }
      return descriptor;
    };
    var uiVS = ['attribute vec2 position;', 'uniform mat4 projectionMat;', 'void main() {', '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );', '}'].join('\n');
    var uiFS = ['precision mediump float;', 'uniform vec4 color;', 'void main() {', '  gl_FragColor = color;', '}'].join('\n');
    var DEG2RAD = Math.PI / 180.0;
    var kAnglePerGearSection = 60;
    var kOuterRimEndAngle = 12;
    var kInnerRimBeginAngle = 20;
    var kOuterRadius = 1;
    var kMiddleRadius = 0.75;
    var kInnerRadius = 0.3125;
    var kCenterLineThicknessDp = 4;
    var kButtonWidthDp = 28;
    var kTouchSlopFactor = 1.5;
    function CardboardUI(gl) {
      this.gl = gl;
      this.attribs = {
        position: 0
      };
      this.program = linkProgram(gl, uiVS, uiFS, this.attribs);
      this.uniforms = getProgramUniforms(gl, this.program);
      this.vertexBuffer = gl.createBuffer();
      this.gearOffset = 0;
      this.gearVertexCount = 0;
      this.arrowOffset = 0;
      this.arrowVertexCount = 0;
      this.projMat = new Float32Array(16);
      this.listener = null;
      this.onResize();
    }
    CardboardUI.prototype.destroy = function () {
      var gl = this.gl;
      if (this.listener) {
        gl.canvas.removeEventListener('click', this.listener, false);
      }
      gl.deleteProgram(this.program);
      gl.deleteBuffer(this.vertexBuffer);
    };
    CardboardUI.prototype.listen = function (optionsCallback, backCallback) {
      var canvas = this.gl.canvas;
      this.listener = function (event) {
        var midline = canvas.clientWidth / 2;
        var buttonSize = kButtonWidthDp * kTouchSlopFactor;
        if (event.clientX > midline - buttonSize && event.clientX < midline + buttonSize && event.clientY > canvas.clientHeight - buttonSize) {
          optionsCallback(event);
        }
        else if (event.clientX < buttonSize && event.clientY < buttonSize) {
            backCallback(event);
          }
      };
      canvas.addEventListener('click', this.listener, false);
    };
    CardboardUI.prototype.onResize = function () {
      var gl = this.gl;
      var self = this;
      var glState = [gl.ARRAY_BUFFER_BINDING];
      glPreserveState(gl, glState, function (gl) {
        var vertices = [];
        var midline = gl.drawingBufferWidth / 2;
        var physicalPixels = Math.max(screen.width, screen.height) * window.devicePixelRatio;
        var scalingRatio = gl.drawingBufferWidth / physicalPixels;
        var dps = scalingRatio * window.devicePixelRatio;
        var lineWidth = kCenterLineThicknessDp * dps / 2;
        var buttonSize = kButtonWidthDp * kTouchSlopFactor * dps;
        var buttonScale = kButtonWidthDp * dps / 2;
        var buttonBorder = (kButtonWidthDp * kTouchSlopFactor - kButtonWidthDp) * dps;
        vertices.push(midline - lineWidth, buttonSize);
        vertices.push(midline - lineWidth, gl.drawingBufferHeight);
        vertices.push(midline + lineWidth, buttonSize);
        vertices.push(midline + lineWidth, gl.drawingBufferHeight);
        self.gearOffset = vertices.length / 2;
        function addGearSegment(theta, r) {
          var angle = (90 - theta) * DEG2RAD;
          var x = Math.cos(angle);
          var y = Math.sin(angle);
          vertices.push(kInnerRadius * x * buttonScale + midline, kInnerRadius * y * buttonScale + buttonScale);
          vertices.push(r * x * buttonScale + midline, r * y * buttonScale + buttonScale);
        }
        for (var i = 0; i <= 6; i++) {
          var segmentTheta = i * kAnglePerGearSection;
          addGearSegment(segmentTheta, kOuterRadius);
          addGearSegment(segmentTheta + kOuterRimEndAngle, kOuterRadius);
          addGearSegment(segmentTheta + kInnerRimBeginAngle, kMiddleRadius);
          addGearSegment(segmentTheta + (kAnglePerGearSection - kInnerRimBeginAngle), kMiddleRadius);
          addGearSegment(segmentTheta + (kAnglePerGearSection - kOuterRimEndAngle), kOuterRadius);
        }
        self.gearVertexCount = vertices.length / 2 - self.gearOffset;
        self.arrowOffset = vertices.length / 2;
        function addArrowVertex(x, y) {
          vertices.push(buttonBorder + x, gl.drawingBufferHeight - buttonBorder - y);
        }
        var angledLineWidth = lineWidth / Math.sin(45 * DEG2RAD);
        addArrowVertex(0, buttonScale);
        addArrowVertex(buttonScale, 0);
        addArrowVertex(buttonScale + angledLineWidth, angledLineWidth);
        addArrowVertex(angledLineWidth, buttonScale + angledLineWidth);
        addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
        addArrowVertex(0, buttonScale);
        addArrowVertex(buttonScale, buttonScale * 2);
        addArrowVertex(buttonScale + angledLineWidth, buttonScale * 2 - angledLineWidth);
        addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
        addArrowVertex(0, buttonScale);
        addArrowVertex(angledLineWidth, buttonScale - lineWidth);
        addArrowVertex(kButtonWidthDp * dps, buttonScale - lineWidth);
        addArrowVertex(angledLineWidth, buttonScale + lineWidth);
        addArrowVertex(kButtonWidthDp * dps, buttonScale + lineWidth);
        self.arrowVertexCount = vertices.length / 2 - self.arrowOffset;
        gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      });
    };
    CardboardUI.prototype.render = function () {
      var gl = this.gl;
      var self = this;
      var glState = [gl.CULL_FACE, gl.DEPTH_TEST, gl.BLEND, gl.SCISSOR_TEST, gl.STENCIL_TEST, gl.COLOR_WRITEMASK, gl.VIEWPORT, gl.CURRENT_PROGRAM, gl.ARRAY_BUFFER_BINDING];
      glPreserveState(gl, glState, function (gl) {
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.BLEND);
        gl.disable(gl.SCISSOR_TEST);
        gl.disable(gl.STENCIL_TEST);
        gl.colorMask(true, true, true, true);
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
        self.renderNoState();
      });
    };
    CardboardUI.prototype.renderNoState = function () {
      var gl = this.gl;
      gl.useProgram(this.program);
      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
      gl.enableVertexAttribArray(this.attribs.position);
      gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 8, 0);
      gl.uniform4f(this.uniforms.color, 1.0, 1.0, 1.0, 1.0);
      orthoMatrix(this.projMat, 0, gl.drawingBufferWidth, 0, gl.drawingBufferHeight, 0.1, 1024.0);
      gl.uniformMatrix4fv(this.uniforms.projectionMat, false, this.projMat);
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
      gl.drawArrays(gl.TRIANGLE_STRIP, this.gearOffset, this.gearVertexCount);
      gl.drawArrays(gl.TRIANGLE_STRIP, this.arrowOffset, this.arrowVertexCount);
    };
    function Distortion(coefficients) {
      this.coefficients = coefficients;
    }
    Distortion.prototype.distortInverse = function (radius) {
      var r0 = 0;
      var r1 = 1;
      var dr0 = radius - this.distort(r0);
      while (Math.abs(r1 - r0) > 0.0001             ) {
        var dr1 = radius - this.distort(r1);
        var r2 = r1 - dr1 * ((r1 - r0) / (dr1 - dr0));
        r0 = r1;
        r1 = r2;
        dr0 = dr1;
      }
      return r1;
    };
    Distortion.prototype.distort = function (radius) {
      var r2 = radius * radius;
      var ret = 0;
      for (var i = 0; i < this.coefficients.length; i++) {
        ret = r2 * (ret + this.coefficients[i]);
      }
      return (ret + 1) * radius;
    };
    var degToRad = Math.PI / 180;
    var radToDeg = 180 / Math.PI;
    var Vector3 = function Vector3(x, y, z) {
      this.x = x || 0;
      this.y = y || 0;
      this.z = z || 0;
    };
    Vector3.prototype = {
      constructor: Vector3,
      set: function set(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      },
      copy: function copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
      },
      length: function length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      },
      normalize: function normalize() {
        var scalar = this.length();
        if (scalar !== 0) {
          var invScalar = 1 / scalar;
          this.multiplyScalar(invScalar);
        } else {
          this.x = 0;
          this.y = 0;
          this.z = 0;
        }
        return this;
      },
      multiplyScalar: function multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
      },
      applyQuaternion: function applyQuaternion(q) {
        var x = this.x;
        var y = this.y;
        var z = this.z;
        var qx = q.x;
        var qy = q.y;
        var qz = q.z;
        var qw = q.w;
        var ix = qw * x + qy * z - qz * y;
        var iy = qw * y + qz * x - qx * z;
        var iz = qw * z + qx * y - qy * x;
        var iw = -qx * x - qy * y - qz * z;
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
      },
      dot: function dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
      },
      crossVectors: function crossVectors(a, b) {
        var ax = a.x,
            ay = a.y,
            az = a.z;
        var bx = b.x,
            by = b.y,
            bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
      }
    };
    var Quaternion = function Quaternion(x, y, z, w) {
      this.x = x || 0;
      this.y = y || 0;
      this.z = z || 0;
      this.w = w !== undefined ? w : 1;
    };
    Quaternion.prototype = {
      constructor: Quaternion,
      set: function set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
      },
      copy: function copy(quaternion) {
        this.x = quaternion.x;
        this.y = quaternion.y;
        this.z = quaternion.z;
        this.w = quaternion.w;
        return this;
      },
      setFromEulerXYZ: function setFromEulerXYZ(x, y, z) {
        var c1 = Math.cos(x / 2);
        var c2 = Math.cos(y / 2);
        var c3 = Math.cos(z / 2);
        var s1 = Math.sin(x / 2);
        var s2 = Math.sin(y / 2);
        var s3 = Math.sin(z / 2);
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
        return this;
      },
      setFromEulerYXZ: function setFromEulerYXZ(x, y, z) {
        var c1 = Math.cos(x / 2);
        var c2 = Math.cos(y / 2);
        var c3 = Math.cos(z / 2);
        var s1 = Math.sin(x / 2);
        var s2 = Math.sin(y / 2);
        var s3 = Math.sin(z / 2);
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
        return this;
      },
      setFromAxisAngle: function setFromAxisAngle(axis, angle) {
        var halfAngle = angle / 2,
            s = Math.sin(halfAngle);
        this.x = axis.x * s;
        this.y = axis.y * s;
        this.z = axis.z * s;
        this.w = Math.cos(halfAngle);
        return this;
      },
      multiply: function multiply(q) {
        return this.multiplyQuaternions(this, q);
      },
      multiplyQuaternions: function multiplyQuaternions(a, b) {
        var qax = a.x,
            qay = a.y,
            qaz = a.z,
            qaw = a.w;
        var qbx = b.x,
            qby = b.y,
            qbz = b.z,
            qbw = b.w;
        this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        return this;
      },
      inverse: function inverse() {
        this.x *= -1;
        this.y *= -1;
        this.z *= -1;
        this.normalize();
        return this;
      },
      normalize: function normalize() {
        var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        if (l === 0) {
          this.x = 0;
          this.y = 0;
          this.z = 0;
          this.w = 1;
        } else {
          l = 1 / l;
          this.x = this.x * l;
          this.y = this.y * l;
          this.z = this.z * l;
          this.w = this.w * l;
        }
        return this;
      },
      slerp: function slerp(qb, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(qb);
        var x = this.x,
            y = this.y,
            z = this.z,
            w = this.w;
        var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;
        if (cosHalfTheta < 0) {
          this.w = -qb.w;
          this.x = -qb.x;
          this.y = -qb.y;
          this.z = -qb.z;
          cosHalfTheta = -cosHalfTheta;
        } else {
          this.copy(qb);
        }
        if (cosHalfTheta >= 1.0) {
          this.w = w;
          this.x = x;
          this.y = y;
          this.z = z;
          return this;
        }
        var halfTheta = Math.acos(cosHalfTheta);
        var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
        if (Math.abs(sinHalfTheta) < 0.001) {
          this.w = 0.5 * (w + this.w);
          this.x = 0.5 * (x + this.x);
          this.y = 0.5 * (y + this.y);
          this.z = 0.5 * (z + this.z);
          return this;
        }
        var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
            ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this.w = w * ratioA + this.w * ratioB;
        this.x = x * ratioA + this.x * ratioB;
        this.y = y * ratioA + this.y * ratioB;
        this.z = z * ratioA + this.z * ratioB;
        return this;
      },
      setFromUnitVectors: function () {
        var v1, r;
        var EPS = 0.000001;
        return function (vFrom, vTo) {
          if (v1 === undefined) v1 = new Vector3();
          r = vFrom.dot(vTo) + 1;
          if (r < EPS) {
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
              v1.set(-vFrom.y, vFrom.x, 0);
            } else {
              v1.set(0, -vFrom.z, vFrom.y);
            }
          } else {
            v1.crossVectors(vFrom, vTo);
          }
          this.x = v1.x;
          this.y = v1.y;
          this.z = v1.z;
          this.w = r;
          this.normalize();
          return this;
        };
      }()
    };
    function Device(params) {
      this.width = params.width || getScreenWidth();
      this.height = params.height || getScreenHeight();
      this.widthMeters = params.widthMeters;
      this.heightMeters = params.heightMeters;
      this.bevelMeters = params.bevelMeters;
    }
    var DEFAULT_ANDROID = new Device({
      widthMeters: 0.110,
      heightMeters: 0.062,
      bevelMeters: 0.004
    });
    var DEFAULT_IOS = new Device({
      widthMeters: 0.1038,
      heightMeters: 0.0584,
      bevelMeters: 0.004
    });
    var Viewers = {
      CardboardV1: new CardboardViewer({
        id: 'CardboardV1',
        label: 'Cardboard I/O 2014',
        fov: 40,
        interLensDistance: 0.060,
        baselineLensDistance: 0.035,
        screenLensDistance: 0.042,
        distortionCoefficients: [0.441, 0.156],
        inverseCoefficients: [-0.4410035, 0.42756155, -0.4804439, 0.5460139, -0.58821183, 0.5733938, -0.48303202, 0.33299083, -0.17573841, 0.0651772, -0.01488963, 0.001559834]
      }),
      CardboardV2: new CardboardViewer({
        id: 'CardboardV2',
        label: 'Cardboard I/O 2015',
        fov: 60,
        interLensDistance: 0.064,
        baselineLensDistance: 0.035,
        screenLensDistance: 0.039,
        distortionCoefficients: [0.34, 0.55],
        inverseCoefficients: [-0.33836704, -0.18162185, 0.862655, -1.2462051, 1.0560602, -0.58208317, 0.21609078, -0.05444823, 0.009177956, -9904169e-10, 6.183535E-5, -16981803e-13]
      })
    };
    function DeviceInfo(deviceParams, additionalViewers) {
      this.viewer = Viewers.CardboardV2;
      this.updateDeviceParams(deviceParams);
      this.distortion = new Distortion(this.viewer.distortionCoefficients);
      for (var i = 0; i < additionalViewers.length; i++) {
        var viewer = additionalViewers[i];
        Viewers[viewer.id] = new CardboardViewer(viewer);
      }
    }
    DeviceInfo.prototype.updateDeviceParams = function (deviceParams) {
      this.device = this.determineDevice_(deviceParams) || this.device;
    };
    DeviceInfo.prototype.getDevice = function () {
      return this.device;
    };
    DeviceInfo.prototype.setViewer = function (viewer) {
      this.viewer = viewer;
      this.distortion = new Distortion(this.viewer.distortionCoefficients);
    };
    DeviceInfo.prototype.determineDevice_ = function (deviceParams) {
      if (!deviceParams) {
        if (isIOS()) {
          console.warn('Using fallback iOS device measurements.');
          return DEFAULT_IOS;
        } else {
          console.warn('Using fallback Android device measurements.');
          return DEFAULT_ANDROID;
        }
      }
      var METERS_PER_INCH = 0.0254;
      var metersPerPixelX = METERS_PER_INCH / deviceParams.xdpi;
      var metersPerPixelY = METERS_PER_INCH / deviceParams.ydpi;
      var width = getScreenWidth();
      var height = getScreenHeight();
      return new Device({
        widthMeters: metersPerPixelX * width,
        heightMeters: metersPerPixelY * height,
        bevelMeters: deviceParams.bevelMm * 0.001
      });
    };
    DeviceInfo.prototype.getDistortedFieldOfViewLeftEye = function () {
      var viewer = this.viewer;
      var device = this.device;
      var distortion = this.distortion;
      var eyeToScreenDistance = viewer.screenLensDistance;
      var outerDist = (device.widthMeters - viewer.interLensDistance) / 2;
      var innerDist = viewer.interLensDistance / 2;
      var bottomDist = viewer.baselineLensDistance - device.bevelMeters;
      var topDist = device.heightMeters - bottomDist;
      var outerAngle = radToDeg * Math.atan(distortion.distort(outerDist / eyeToScreenDistance));
      var innerAngle = radToDeg * Math.atan(distortion.distort(innerDist / eyeToScreenDistance));
      var bottomAngle = radToDeg * Math.atan(distortion.distort(bottomDist / eyeToScreenDistance));
      var topAngle = radToDeg * Math.atan(distortion.distort(topDist / eyeToScreenDistance));
      return {
        leftDegrees: Math.min(outerAngle, viewer.fov),
        rightDegrees: Math.min(innerAngle, viewer.fov),
        downDegrees: Math.min(bottomAngle, viewer.fov),
        upDegrees: Math.min(topAngle, viewer.fov)
      };
    };
    DeviceInfo.prototype.getLeftEyeVisibleTanAngles = function () {
      var viewer = this.viewer;
      var device = this.device;
      var distortion = this.distortion;
      var fovLeft = Math.tan(-degToRad * viewer.fov);
      var fovTop = Math.tan(degToRad * viewer.fov);
      var fovRight = Math.tan(degToRad * viewer.fov);
      var fovBottom = Math.tan(-degToRad * viewer.fov);
      var halfWidth = device.widthMeters / 4;
      var halfHeight = device.heightMeters / 2;
      var verticalLensOffset = viewer.baselineLensDistance - device.bevelMeters - halfHeight;
      var centerX = viewer.interLensDistance / 2 - halfWidth;
      var centerY = -verticalLensOffset;
      var centerZ = viewer.screenLensDistance;
      var screenLeft = distortion.distort((centerX - halfWidth) / centerZ);
      var screenTop = distortion.distort((centerY + halfHeight) / centerZ);
      var screenRight = distortion.distort((centerX + halfWidth) / centerZ);
      var screenBottom = distortion.distort((centerY - halfHeight) / centerZ);
      var result = new Float32Array(4);
      result[0] = Math.max(fovLeft, screenLeft);
      result[1] = Math.min(fovTop, screenTop);
      result[2] = Math.min(fovRight, screenRight);
      result[3] = Math.max(fovBottom, screenBottom);
      return result;
    };
    DeviceInfo.prototype.getLeftEyeNoLensTanAngles = function () {
      var viewer = this.viewer;
      var device = this.device;
      var distortion = this.distortion;
      var result = new Float32Array(4);
      var fovLeft = distortion.distortInverse(Math.tan(-degToRad * viewer.fov));
      var fovTop = distortion.distortInverse(Math.tan(degToRad * viewer.fov));
      var fovRight = distortion.distortInverse(Math.tan(degToRad * viewer.fov));
      var fovBottom = distortion.distortInverse(Math.tan(-degToRad * viewer.fov));
      var halfWidth = device.widthMeters / 4;
      var halfHeight = device.heightMeters / 2;
      var verticalLensOffset = viewer.baselineLensDistance - device.bevelMeters - halfHeight;
      var centerX = viewer.interLensDistance / 2 - halfWidth;
      var centerY = -verticalLensOffset;
      var centerZ = viewer.screenLensDistance;
      var screenLeft = (centerX - halfWidth) / centerZ;
      var screenTop = (centerY + halfHeight) / centerZ;
      var screenRight = (centerX + halfWidth) / centerZ;
      var screenBottom = (centerY - halfHeight) / centerZ;
      result[0] = Math.max(fovLeft, screenLeft);
      result[1] = Math.min(fovTop, screenTop);
      result[2] = Math.min(fovRight, screenRight);
      result[3] = Math.max(fovBottom, screenBottom);
      return result;
    };
    DeviceInfo.prototype.getLeftEyeVisibleScreenRect = function (undistortedFrustum) {
      var viewer = this.viewer;
      var device = this.device;
      var dist = viewer.screenLensDistance;
      var eyeX = (device.widthMeters - viewer.interLensDistance) / 2;
      var eyeY = viewer.baselineLensDistance - device.bevelMeters;
      var left = (undistortedFrustum[0] * dist + eyeX) / device.widthMeters;
      var top = (undistortedFrustum[1] * dist + eyeY) / device.heightMeters;
      var right = (undistortedFrustum[2] * dist + eyeX) / device.widthMeters;
      var bottom = (undistortedFrustum[3] * dist + eyeY) / device.heightMeters;
      return {
        x: left,
        y: bottom,
        width: right - left,
        height: top - bottom
      };
    };
    DeviceInfo.prototype.getFieldOfViewLeftEye = function (opt_isUndistorted) {
      return opt_isUndistorted ? this.getUndistortedFieldOfViewLeftEye() : this.getDistortedFieldOfViewLeftEye();
    };
    DeviceInfo.prototype.getFieldOfViewRightEye = function (opt_isUndistorted) {
      var fov = this.getFieldOfViewLeftEye(opt_isUndistorted);
      return {
        leftDegrees: fov.rightDegrees,
        rightDegrees: fov.leftDegrees,
        upDegrees: fov.upDegrees,
        downDegrees: fov.downDegrees
      };
    };
    DeviceInfo.prototype.getUndistortedFieldOfViewLeftEye = function () {
      var p = this.getUndistortedParams_();
      return {
        leftDegrees: radToDeg * Math.atan(p.outerDist),
        rightDegrees: radToDeg * Math.atan(p.innerDist),
        downDegrees: radToDeg * Math.atan(p.bottomDist),
        upDegrees: radToDeg * Math.atan(p.topDist)
      };
    };
    DeviceInfo.prototype.getUndistortedViewportLeftEye = function () {
      var p = this.getUndistortedParams_();
      var viewer = this.viewer;
      var device = this.device;
      var eyeToScreenDistance = viewer.screenLensDistance;
      var screenWidth = device.widthMeters / eyeToScreenDistance;
      var screenHeight = device.heightMeters / eyeToScreenDistance;
      var xPxPerTanAngle = device.width / screenWidth;
      var yPxPerTanAngle = device.height / screenHeight;
      var x = Math.round((p.eyePosX - p.outerDist) * xPxPerTanAngle);
      var y = Math.round((p.eyePosY - p.bottomDist) * yPxPerTanAngle);
      return {
        x: x,
        y: y,
        width: Math.round((p.eyePosX + p.innerDist) * xPxPerTanAngle) - x,
        height: Math.round((p.eyePosY + p.topDist) * yPxPerTanAngle) - y
      };
    };
    DeviceInfo.prototype.getUndistortedParams_ = function () {
      var viewer = this.viewer;
      var device = this.device;
      var distortion = this.distortion;
      var eyeToScreenDistance = viewer.screenLensDistance;
      var halfLensDistance = viewer.interLensDistance / 2 / eyeToScreenDistance;
      var screenWidth = device.widthMeters / eyeToScreenDistance;
      var screenHeight = device.heightMeters / eyeToScreenDistance;
      var eyePosX = screenWidth / 2 - halfLensDistance;
      var eyePosY = (viewer.baselineLensDistance - device.bevelMeters) / eyeToScreenDistance;
      var maxFov = viewer.fov;
      var viewerMax = distortion.distortInverse(Math.tan(degToRad * maxFov));
      var outerDist = Math.min(eyePosX, viewerMax);
      var innerDist = Math.min(halfLensDistance, viewerMax);
      var bottomDist = Math.min(eyePosY, viewerMax);
      var topDist = Math.min(screenHeight - eyePosY, viewerMax);
      return {
        outerDist: outerDist,
        innerDist: innerDist,
        topDist: topDist,
        bottomDist: bottomDist,
        eyePosX: eyePosX,
        eyePosY: eyePosY
      };
    };
    function CardboardViewer(params) {
      this.id = params.id;
      this.label = params.label;
      this.fov = params.fov;
      this.interLensDistance = params.interLensDistance;
      this.baselineLensDistance = params.baselineLensDistance;
      this.screenLensDistance = params.screenLensDistance;
      this.distortionCoefficients = params.distortionCoefficients;
      this.inverseCoefficients = params.inverseCoefficients;
    }
    DeviceInfo.Viewers = Viewers;
    var format = 1;
    var last_updated = "2019-11-09T17:36:14Z";
    var devices = [{"type":"android","rules":[{"mdmh":"asus/*/Nexus 7/*"},{"ua":"Nexus 7"}],"dpi":[320.8,323],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_X00PD/*"},{"ua":"ASUS_X00PD"}],"dpi":245,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_X008D/*"},{"ua":"ASUS_X008D"}],"dpi":282,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_Z00AD/*"},{"ua":"ASUS_Z00AD"}],"dpi":[403,404.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 2 XL/*"},{"ua":"Pixel 2 XL"}],"dpi":537.9,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 3 XL/*"},{"ua":"Pixel 3 XL"}],"dpi":[558.5,553.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel XL/*"},{"ua":"Pixel XL"}],"dpi":[537.9,533],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 3/*"},{"ua":"Pixel 3"}],"dpi":442.4,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 2/*"},{"ua":"Pixel 2"}],"dpi":441,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"Google/*/Pixel/*"},{"ua":"Pixel"}],"dpi":[432.6,436.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"HTC/*/HTC6435LVW/*"},{"ua":"HTC6435LVW"}],"dpi":[449.7,443.3],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One XL/*"},{"ua":"HTC One XL"}],"dpi":[315.3,314.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"htc/*/Nexus 9/*"},{"ua":"Nexus 9"}],"dpi":289,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One M9/*"},{"ua":"HTC One M9"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One_M8/*"},{"ua":"HTC One_M8"}],"dpi":[449.7,447.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One/*"},{"ua":"HTC One"}],"dpi":472.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/Nexus 6P/*"},{"ua":"Nexus 6P"}],"dpi":[515.1,518],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/BLN-L24/*"},{"ua":"HONORBLN-L24"}],"dpi":480,"bw":4,"ac":500},{"type":"android","rules":[{"mdmh":"Huawei/*/BKL-L09/*"},{"ua":"BKL-L09"}],"dpi":403,"bw":3.47,"ac":500},{"type":"android","rules":[{"mdmh":"LENOVO/*/Lenovo PB2-690Y/*"},{"ua":"Lenovo PB2-690Y"}],"dpi":[457.2,454.713],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 5X/*"},{"ua":"Nexus 5X"}],"dpi":[422,419.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGMS345/*"},{"ua":"LGMS345"}],"dpi":[221.7,219.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/LG-D800/*"},{"ua":"LG-D800"}],"dpi":[422,424.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/LG-D850/*"},{"ua":"LG-D850"}],"dpi":[537.9,541.9],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/VS985 4G/*"},{"ua":"VS985 4G"}],"dpi":[537.9,535.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 5/*"},{"ua":"Nexus 5 B"}],"dpi":[442.4,444.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 4/*"},{"ua":"Nexus 4"}],"dpi":[319.8,318.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LG-P769/*"},{"ua":"LG-P769"}],"dpi":[240.6,247.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGMS323/*"},{"ua":"LGMS323"}],"dpi":[206.6,204.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGLS996/*"},{"ua":"LGLS996"}],"dpi":[403.4,401.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/4560MMX/*"},{"ua":"4560MMX"}],"dpi":[240,219.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/A250/*"},{"ua":"Micromax A250"}],"dpi":[480,446.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/Micromax AQ4501/*"},{"ua":"Micromax AQ4501"}],"dpi":240,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/G5/*"},{"ua":"Moto G (5) Plus"}],"dpi":[403.4,403],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/DROID RAZR/*"},{"ua":"DROID RAZR"}],"dpi":[368.1,256.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT830C/*"},{"ua":"XT830C"}],"dpi":[254,255.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1021/*"},{"ua":"XT1021"}],"dpi":[254,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1023/*"},{"ua":"XT1023"}],"dpi":[254,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1028/*"},{"ua":"XT1028"}],"dpi":[326.6,327.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1034/*"},{"ua":"XT1034"}],"dpi":[326.6,328.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1053/*"},{"ua":"XT1053"}],"dpi":[315.3,316.1],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1562/*"},{"ua":"XT1562"}],"dpi":[403.4,402.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/Nexus 6/*"},{"ua":"Nexus 6 B"}],"dpi":[494.3,489.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1063/*"},{"ua":"XT1063"}],"dpi":[295,296.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1064/*"},{"ua":"XT1064"}],"dpi":[295,295.6],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1092/*"},{"ua":"XT1092"}],"dpi":[422,424.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1095/*"},{"ua":"XT1095"}],"dpi":[422,423.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/G4/*"},{"ua":"Moto G (4)"}],"dpi":401,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/A0001/*"},{"ua":"A0001"}],"dpi":[403.4,401],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1001/*"},{"ua":"ONE E1001"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1003/*"},{"ua":"ONE E1003"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1005/*"},{"ua":"ONE E1005"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2001/*"},{"ua":"ONE A2001"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2003/*"},{"ua":"ONE A2003"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2005/*"},{"ua":"ONE A2005"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3000/*"},{"ua":"ONEPLUS A3000"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3003/*"},{"ua":"ONEPLUS A3003"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3010/*"},{"ua":"ONEPLUS A3010"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A5000/*"},{"ua":"ONEPLUS A5000 "}],"dpi":[403.411,399.737],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A5010/*"},{"ua":"ONEPLUS A5010"}],"dpi":[403,400],"bw":2,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6000/*"},{"ua":"ONEPLUS A6000"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6003/*"},{"ua":"ONEPLUS A6003"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6010/*"},{"ua":"ONEPLUS A6010"}],"dpi":401,"bw":2,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6013/*"},{"ua":"ONEPLUS A6013"}],"dpi":401,"bw":2,"ac":500},{"type":"android","rules":[{"mdmh":"OPPO/*/X909/*"},{"ua":"X909"}],"dpi":[442.4,444.1],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9082/*"},{"ua":"GT-I9082"}],"dpi":[184.7,185.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G360P/*"},{"ua":"SM-G360P"}],"dpi":[196.7,205.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/Nexus S/*"},{"ua":"Nexus S"}],"dpi":[234.5,229.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300/*"},{"ua":"GT-I9300"}],"dpi":[304.8,303.9],"bw":5,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-T230NU/*"},{"ua":"SM-T230NU"}],"dpi":216,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SGH-T399/*"},{"ua":"SGH-T399"}],"dpi":[217.7,231.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SGH-M919/*"},{"ua":"SGH-M919"}],"dpi":[440.8,437.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N9005/*"},{"ua":"SM-N9005"}],"dpi":[386.4,387],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SAMSUNG-SM-N900A/*"},{"ua":"SAMSUNG-SM-N900A"}],"dpi":[386.4,387.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9500/*"},{"ua":"GT-I9500"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9505/*"},{"ua":"GT-I9505"}],"dpi":439.4,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G900F/*"},{"ua":"SM-G900F"}],"dpi":[415.6,431.6],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G900M/*"},{"ua":"SM-G900M"}],"dpi":[415.6,431.6],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G800F/*"},{"ua":"SM-G800F"}],"dpi":326.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G906S/*"},{"ua":"SM-G906S"}],"dpi":[562.7,572.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300/*"},{"ua":"GT-I9300"}],"dpi":[306.7,304.8],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-T535/*"},{"ua":"SM-T535"}],"dpi":[142.6,136.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920C/*"},{"ua":"SM-N920C"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920P/*"},{"ua":"SM-N920P"}],"dpi":[386.3655,390.144],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920W8/*"},{"ua":"SM-N920W8"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300I/*"},{"ua":"GT-I9300I"}],"dpi":[304.8,305.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9195/*"},{"ua":"GT-I9195"}],"dpi":[249.4,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SPH-L520/*"},{"ua":"SPH-L520"}],"dpi":[249.4,255.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SAMSUNG-SGH-I717/*"},{"ua":"SAMSUNG-SGH-I717"}],"dpi":285.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SPH-D710/*"},{"ua":"SPH-D710"}],"dpi":[217.7,204.2],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-N7100/*"},{"ua":"GT-N7100"}],"dpi":265.1,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SCH-I605/*"},{"ua":"SCH-I605"}],"dpi":265.1,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/Galaxy Nexus/*"},{"ua":"Galaxy Nexus"}],"dpi":[315.3,314.2],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N910H/*"},{"ua":"SM-N910H"}],"dpi":[515.1,518],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N910C/*"},{"ua":"SM-N910C"}],"dpi":[515.2,520.2],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G130M/*"},{"ua":"SM-G130M"}],"dpi":[165.9,164.8],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G928I/*"},{"ua":"SM-G928I"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G920F/*"},{"ua":"SM-G920F"}],"dpi":580.6,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G920P/*"},{"ua":"SM-G920P"}],"dpi":[522.5,577],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G925F/*"},{"ua":"SM-G925F"}],"dpi":580.6,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G925V/*"},{"ua":"SM-G925V"}],"dpi":[522.5,576.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G930F/*"},{"ua":"SM-G930F"}],"dpi":576.6,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G935F/*"},{"ua":"SM-G935F"}],"dpi":533,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G950F/*"},{"ua":"SM-G950F"}],"dpi":[562.707,565.293],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G955U/*"},{"ua":"SM-G955U"}],"dpi":[522.514,525.762],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G955F/*"},{"ua":"SM-G955F"}],"dpi":[522.514,525.762],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960F/*"},{"ua":"SM-G960F"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G9600/*"},{"ua":"SM-G9600"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960T/*"},{"ua":"SM-G960T"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960N/*"},{"ua":"SM-G960N"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960U/*"},{"ua":"SM-G960U"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G9608/*"},{"ua":"SM-G9608"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960FD/*"},{"ua":"SM-G960FD"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960W/*"},{"ua":"SM-G960W"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G965F/*"},{"ua":"SM-G965F"}],"dpi":529,"bw":2,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/C6903/*"},{"ua":"C6903"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"Sony/*/D6653/*"},{"ua":"D6653"}],"dpi":[428.6,427.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/E6653/*"},{"ua":"E6653"}],"dpi":[428.6,425.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/E6853/*"},{"ua":"E6853"}],"dpi":[403.4,401.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/SGP321/*"},{"ua":"SGP321"}],"dpi":[224.7,224.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"TCT/*/ALCATEL ONE TOUCH Fierce/*"},{"ua":"ALCATEL ONE TOUCH Fierce"}],"dpi":[240,247.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"THL/*/thl 5000/*"},{"ua":"thl 5000"}],"dpi":[480,443.3],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Fly/*/IQ4412/*"},{"ua":"IQ4412"}],"dpi":307.9,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"ZTE/*/ZTE Blade L2/*"},{"ua":"ZTE Blade L2"}],"dpi":240,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"BENEVE/*/VR518/*"},{"ua":"VR518"}],"dpi":480,"bw":3,"ac":500},{"type":"ios","rules":[{"res":[640,960]}],"dpi":[325.1,328.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[640,1136]}],"dpi":[317.1,320.2],"bw":3,"ac":1000},{"type":"ios","rules":[{"res":[750,1334]}],"dpi":326.4,"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1242,2208]}],"dpi":[453.6,458.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1125,2001]}],"dpi":[410.9,415.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1125,2436]}],"dpi":458,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/EML-L29/*"},{"ua":"EML-L29"}],"dpi":428,"bw":3.45,"ac":500},{"type":"android","rules":[{"mdmh":"Nokia/*/Nokia 7.1/*"},{"ua":"Nokia 7.1"}],"dpi":[432,431.9],"bw":3,"ac":500},{"type":"ios","rules":[{"res":[1242,2688]}],"dpi":458,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G570M/*"},{"ua":"SM-G570M"}],"dpi":320,"bw":3.684,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G970F/*"},{"ua":"SM-G970F"}],"dpi":438,"bw":2.281,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G973F/*"},{"ua":"SM-G973F"}],"dpi":550,"bw":2.002,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G975F/*"},{"ua":"SM-G975F"}],"dpi":522,"bw":2.054,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G977F/*"},{"ua":"SM-G977F"}],"dpi":505,"bw":2.334,"ac":500},{"type":"ios","rules":[{"res":[828,1792]}],"dpi":326,"bw":5,"ac":500}];
    var DPDB_CACHE = {
    	format: format,
    	last_updated: last_updated,
    	devices: devices
    };
    function Dpdb(url, onDeviceParamsUpdated) {
      this.dpdb = DPDB_CACHE;
      this.recalculateDeviceParams_();
      if (url) {
        this.onDeviceParamsUpdated = onDeviceParamsUpdated;
        var xhr = new XMLHttpRequest();
        var obj = this;
        xhr.open('GET', url, true);
        xhr.addEventListener('load', function () {
          obj.loading = false;
          if (xhr.status >= 200 && xhr.status <= 299) {
            obj.dpdb = JSON.parse(xhr.response);
            obj.recalculateDeviceParams_();
          } else {
            console.error('Error loading online DPDB!');
          }
        });
        xhr.send();
      }
    }
    Dpdb.prototype.getDeviceParams = function () {
      return this.deviceParams;
    };
    Dpdb.prototype.recalculateDeviceParams_ = function () {
      var newDeviceParams = this.calcDeviceParams_();
      if (newDeviceParams) {
        this.deviceParams = newDeviceParams;
        if (this.onDeviceParamsUpdated) {
          this.onDeviceParamsUpdated(this.deviceParams);
        }
      } else {
        console.error('Failed to recalculate device parameters.');
      }
    };
    Dpdb.prototype.calcDeviceParams_ = function () {
      var db = this.dpdb;
      if (!db) {
        console.error('DPDB not available.');
        return null;
      }
      if (db.format != 1) {
        console.error('DPDB has unexpected format version.');
        return null;
      }
      if (!db.devices || !db.devices.length) {
        console.error('DPDB does not have a devices section.');
        return null;
      }
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      var width = getScreenWidth();
      var height = getScreenHeight();
      if (!db.devices) {
        console.error('DPDB has no devices section.');
        return null;
      }
      for (var i = 0; i < db.devices.length; i++) {
        var device = db.devices[i];
        if (!device.rules) {
          console.warn('Device[' + i + '] has no rules section.');
          continue;
        }
        if (device.type != 'ios' && device.type != 'android') {
          console.warn('Device[' + i + '] has invalid type.');
          continue;
        }
        if (isIOS() != (device.type == 'ios')) continue;
        var matched = false;
        for (var j = 0; j < device.rules.length; j++) {
          var rule = device.rules[j];
          if (this.ruleMatches_(rule, userAgent, width, height)) {
            matched = true;
            break;
          }
        }
        if (!matched) continue;
        var xdpi = device.dpi[0] || device.dpi;
        var ydpi = device.dpi[1] || device.dpi;
        return new DeviceParams({ xdpi: xdpi, ydpi: ydpi, bevelMm: device.bw });
      }
      console.warn('No DPDB device match.');
      return null;
    };
    Dpdb.prototype.ruleMatches_ = function (rule, ua, screenWidth, screenHeight) {
      if (!rule.ua && !rule.res) return false;
      if (rule.ua && rule.ua.substring(0, 2) === 'SM') rule.ua = rule.ua.substring(0, 7);
      if (rule.ua && ua.indexOf(rule.ua) < 0) return false;
      if (rule.res) {
        if (!rule.res[0] || !rule.res[1]) return false;
        var resX = rule.res[0];
        var resY = rule.res[1];
        if (Math.min(screenWidth, screenHeight) != Math.min(resX, resY) || Math.max(screenWidth, screenHeight) != Math.max(resX, resY)) {
          return false;
        }
      }
      return true;
    };
    function DeviceParams(params) {
      this.xdpi = params.xdpi;
      this.ydpi = params.ydpi;
      this.bevelMm = params.bevelMm;
    }
    function SensorSample(sample, timestampS) {
      this.set(sample, timestampS);
    }
    SensorSample.prototype.set = function (sample, timestampS) {
      this.sample = sample;
      this.timestampS = timestampS;
    };
    SensorSample.prototype.copy = function (sensorSample) {
      this.set(sensorSample.sample, sensorSample.timestampS);
    };
    function ComplementaryFilter(kFilter, isDebug) {
      this.kFilter = kFilter;
      this.isDebug = isDebug;
      this.currentAccelMeasurement = new SensorSample();
      this.currentGyroMeasurement = new SensorSample();
      this.previousGyroMeasurement = new SensorSample();
      if (isIOS()) {
        this.filterQ = new Quaternion(-1, 0, 0, 1);
      } else {
        this.filterQ = new Quaternion(1, 0, 0, 1);
      }
      this.previousFilterQ = new Quaternion();
      this.previousFilterQ.copy(this.filterQ);
      this.accelQ = new Quaternion();
      this.isOrientationInitialized = false;
      this.estimatedGravity = new Vector3();
      this.measuredGravity = new Vector3();
      this.gyroIntegralQ = new Quaternion();
    }
    ComplementaryFilter.prototype.addAccelMeasurement = function (vector, timestampS) {
      this.currentAccelMeasurement.set(vector, timestampS);
    };
    ComplementaryFilter.prototype.addGyroMeasurement = function (vector, timestampS) {
      this.currentGyroMeasurement.set(vector, timestampS);
      var deltaT = timestampS - this.previousGyroMeasurement.timestampS;
      if (isTimestampDeltaValid(deltaT)) {
        this.run_();
      }
      this.previousGyroMeasurement.copy(this.currentGyroMeasurement);
    };
    ComplementaryFilter.prototype.run_ = function () {
      if (!this.isOrientationInitialized) {
        this.accelQ = this.accelToQuaternion_(this.currentAccelMeasurement.sample);
        this.previousFilterQ.copy(this.accelQ);
        this.isOrientationInitialized = true;
        return;
      }
      var deltaT = this.currentGyroMeasurement.timestampS - this.previousGyroMeasurement.timestampS;
      var gyroDeltaQ = this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample, deltaT);
      this.gyroIntegralQ.multiply(gyroDeltaQ);
      this.filterQ.copy(this.previousFilterQ);
      this.filterQ.multiply(gyroDeltaQ);
      var invFilterQ = new Quaternion();
      invFilterQ.copy(this.filterQ);
      invFilterQ.inverse();
      this.estimatedGravity.set(0, 0, -1);
      this.estimatedGravity.applyQuaternion(invFilterQ);
      this.estimatedGravity.normalize();
      this.measuredGravity.copy(this.currentAccelMeasurement.sample);
      this.measuredGravity.normalize();
      var deltaQ = new Quaternion();
      deltaQ.setFromUnitVectors(this.estimatedGravity, this.measuredGravity);
      deltaQ.inverse();
      if (this.isDebug) {
        console.log('Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)', radToDeg * getQuaternionAngle(deltaQ), this.estimatedGravity.x.toFixed(1), this.estimatedGravity.y.toFixed(1), this.estimatedGravity.z.toFixed(1), this.measuredGravity.x.toFixed(1), this.measuredGravity.y.toFixed(1), this.measuredGravity.z.toFixed(1));
      }
      var targetQ = new Quaternion();
      targetQ.copy(this.filterQ);
      targetQ.multiply(deltaQ);
      this.filterQ.slerp(targetQ, 1 - this.kFilter);
      this.previousFilterQ.copy(this.filterQ);
    };
    ComplementaryFilter.prototype.getOrientation = function () {
      return this.filterQ;
    };
    ComplementaryFilter.prototype.accelToQuaternion_ = function (accel) {
      var normAccel = new Vector3();
      normAccel.copy(accel);
      normAccel.normalize();
      var quat = new Quaternion();
      quat.setFromUnitVectors(new Vector3(0, 0, -1), normAccel);
      quat.inverse();
      return quat;
    };
    ComplementaryFilter.prototype.gyroToQuaternionDelta_ = function (gyro, dt) {
      var quat = new Quaternion();
      var axis = new Vector3();
      axis.copy(gyro);
      axis.normalize();
      quat.setFromAxisAngle(axis, gyro.length() * dt);
      return quat;
    };
    function PosePredictor(predictionTimeS, isDebug) {
      this.predictionTimeS = predictionTimeS;
      this.isDebug = isDebug;
      this.previousQ = new Quaternion();
      this.previousTimestampS = null;
      this.deltaQ = new Quaternion();
      this.outQ = new Quaternion();
    }
    PosePredictor.prototype.getPrediction = function (currentQ, gyro, timestampS) {
      if (!this.previousTimestampS) {
        this.previousQ.copy(currentQ);
        this.previousTimestampS = timestampS;
        return currentQ;
      }
      var axis = new Vector3();
      axis.copy(gyro);
      axis.normalize();
      var angularSpeed = gyro.length();
      if (angularSpeed < degToRad * 20) {
        if (this.isDebug) {
          console.log('Moving slowly, at %s deg/s: no prediction', (radToDeg * angularSpeed).toFixed(1));
        }
        this.outQ.copy(currentQ);
        this.previousQ.copy(currentQ);
        return this.outQ;
      }
      var predictAngle = angularSpeed * this.predictionTimeS;
      this.deltaQ.setFromAxisAngle(axis, predictAngle);
      this.outQ.copy(this.previousQ);
      this.outQ.multiply(this.deltaQ);
      this.previousQ.copy(currentQ);
      this.previousTimestampS = timestampS;
      return this.outQ;
    };
    function FusionPoseSensor(kFilter, predictionTime, yawOnly, isDebug) {
      this.yawOnly = yawOnly;
      this.accelerometer = new Vector3();
      this.gyroscope = new Vector3();
      this.filter = new ComplementaryFilter(kFilter, isDebug);
      this.posePredictor = new PosePredictor(predictionTime, isDebug);
      this.isFirefoxAndroid = isFirefoxAndroid();
      this.isIOS = isIOS();
      var chromeVersion = getChromeVersion();
      this.isDeviceMotionInRadians = !this.isIOS && chromeVersion && chromeVersion < 66;
      this.isWithoutDeviceMotion = isChromeWithoutDeviceMotion() || isSafariWithoutDeviceMotion();
      this.filterToWorldQ = new Quaternion();
      if (isIOS()) {
        this.filterToWorldQ.setFromAxisAngle(new Vector3(1, 0, 0), Math.PI / 2);
      } else {
        this.filterToWorldQ.setFromAxisAngle(new Vector3(1, 0, 0), -Math.PI / 2);
      }
      this.inverseWorldToScreenQ = new Quaternion();
      this.worldToScreenQ = new Quaternion();
      this.originalPoseAdjustQ = new Quaternion();
      this.originalPoseAdjustQ.setFromAxisAngle(new Vector3(0, 0, 1), -window.orientation * Math.PI / 180);
      this.setScreenTransform_();
      if (isLandscapeMode()) {
        this.filterToWorldQ.multiply(this.inverseWorldToScreenQ);
      }
      this.resetQ = new Quaternion();
      this.orientationOut_ = new Float32Array(4);
      this.start();
    }
    FusionPoseSensor.prototype.getPosition = function () {
      return null;
    };
    FusionPoseSensor.prototype.getOrientation = function () {
      var orientation = void 0;
      if (this.isWithoutDeviceMotion && this._deviceOrientationQ) {
        this.deviceOrientationFixQ = this.deviceOrientationFixQ || function () {
          var z = new Quaternion().setFromAxisAngle(new Vector3(0, 0, -1), 0);
          var y = new Quaternion();
          if (window.orientation === -90) {
            y.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / -2);
          } else {
            y.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2);
          }
          return z.multiply(y);
        }();
        this.deviceOrientationFilterToWorldQ = this.deviceOrientationFilterToWorldQ || function () {
          var q = new Quaternion();
          q.setFromAxisAngle(new Vector3(1, 0, 0), -Math.PI / 2);
          return q;
        }();
        orientation = this._deviceOrientationQ;
        var out = new Quaternion();
        out.copy(orientation);
        out.multiply(this.deviceOrientationFilterToWorldQ);
        out.multiply(this.resetQ);
        out.multiply(this.worldToScreenQ);
        out.multiplyQuaternions(this.deviceOrientationFixQ, out);
        if (this.yawOnly) {
          out.x = 0;
          out.z = 0;
          out.normalize();
        }
        this.orientationOut_[0] = out.x;
        this.orientationOut_[1] = out.y;
        this.orientationOut_[2] = out.z;
        this.orientationOut_[3] = out.w;
        return this.orientationOut_;
      } else {
        var filterOrientation = this.filter.getOrientation();
        orientation = this.posePredictor.getPrediction(filterOrientation, this.gyroscope, this.previousTimestampS);
      }
      var out = new Quaternion();
      out.copy(this.filterToWorldQ);
      out.multiply(this.resetQ);
      out.multiply(orientation);
      out.multiply(this.worldToScreenQ);
      if (this.yawOnly) {
        out.x = 0;
        out.z = 0;
        out.normalize();
      }
      this.orientationOut_[0] = out.x;
      this.orientationOut_[1] = out.y;
      this.orientationOut_[2] = out.z;
      this.orientationOut_[3] = out.w;
      return this.orientationOut_;
    };
    FusionPoseSensor.prototype.resetPose = function () {
      this.resetQ.copy(this.filter.getOrientation());
      this.resetQ.x = 0;
      this.resetQ.y = 0;
      this.resetQ.z *= -1;
      this.resetQ.normalize();
      if (isLandscapeMode()) {
        this.resetQ.multiply(this.inverseWorldToScreenQ);
      }
      this.resetQ.multiply(this.originalPoseAdjustQ);
    };
    FusionPoseSensor.prototype.onDeviceOrientation_ = function (e) {
      this._deviceOrientationQ = this._deviceOrientationQ || new Quaternion();
      var alpha = e.alpha,
          beta = e.beta,
          gamma = e.gamma;
      alpha = (alpha || 0) * Math.PI / 180;
      beta = (beta || 0) * Math.PI / 180;
      gamma = (gamma || 0) * Math.PI / 180;
      this._deviceOrientationQ.setFromEulerYXZ(beta, alpha, -gamma);
    };
    FusionPoseSensor.prototype.onDeviceMotion_ = function (deviceMotion) {
      this.updateDeviceMotion_(deviceMotion);
    };
    FusionPoseSensor.prototype.updateDeviceMotion_ = function (deviceMotion) {
      var accGravity = deviceMotion.accelerationIncludingGravity;
      var rotRate = deviceMotion.rotationRate;
      var timestampS = deviceMotion.timeStamp / 1000;
      var deltaS = timestampS - this.previousTimestampS;
      if (deltaS < 0) {
        warnOnce('fusion-pose-sensor:invalid:non-monotonic', 'Invalid timestamps detected: non-monotonic timestamp from devicemotion');
        this.previousTimestampS = timestampS;
        return;
      } else if (deltaS <= MIN_TIMESTEP || deltaS > MAX_TIMESTEP) {
        warnOnce('fusion-pose-sensor:invalid:outside-threshold', 'Invalid timestamps detected: Timestamp from devicemotion outside expected range.');
        this.previousTimestampS = timestampS;
        return;
      }
      this.accelerometer.set(-accGravity.x, -accGravity.y, -accGravity.z);
      if (rotRate) {
        if (isR7()) {
          this.gyroscope.set(-rotRate.beta, rotRate.alpha, rotRate.gamma);
        } else {
          this.gyroscope.set(rotRate.alpha, rotRate.beta, rotRate.gamma);
        }
        if (!this.isDeviceMotionInRadians) {
          this.gyroscope.multiplyScalar(Math.PI / 180);
        }
        this.filter.addGyroMeasurement(this.gyroscope, timestampS);
      }
      this.filter.addAccelMeasurement(this.accelerometer, timestampS);
      this.previousTimestampS = timestampS;
    };
    FusionPoseSensor.prototype.onOrientationChange_ = function (screenOrientation) {
      this.setScreenTransform_();
    };
    FusionPoseSensor.prototype.onMessage_ = function (event) {
      var message = event.data;
      if (!message || !message.type) {
        return;
      }
      var type = message.type.toLowerCase();
      if (type !== 'devicemotion') {
        return;
      }
      this.updateDeviceMotion_(message.deviceMotionEvent);
    };
    FusionPoseSensor.prototype.setScreenTransform_ = function () {
      this.worldToScreenQ.set(0, 0, 0, 1);
      switch (window.orientation) {
        case 0:
          break;
        case 90:
          this.worldToScreenQ.setFromAxisAngle(new Vector3(0, 0, 1), -Math.PI / 2);
          break;
        case -90:
          this.worldToScreenQ.setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2);
          break;
      }
      this.inverseWorldToScreenQ.copy(this.worldToScreenQ);
      this.inverseWorldToScreenQ.inverse();
    };
    FusionPoseSensor.prototype.start = function () {
      this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(this);
      this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(this);
      this.onMessageCallback_ = this.onMessage_.bind(this);
      this.onDeviceOrientationCallback_ = this.onDeviceOrientation_.bind(this);
      if (isIOS() && isInsideCrossOriginIFrame()) {
        window.addEventListener('message', this.onMessageCallback_);
      }
      window.addEventListener('orientationchange', this.onOrientationChangeCallback_);
      if (this.isWithoutDeviceMotion) {
        window.addEventListener('deviceorientation', this.onDeviceOrientationCallback_);
      } else {
        window.addEventListener('devicemotion', this.onDeviceMotionCallback_);
      }
    };
    FusionPoseSensor.prototype.stop = function () {
      window.removeEventListener('devicemotion', this.onDeviceMotionCallback_);
      window.removeEventListener('deviceorientation', this.onDeviceOrientationCallback_);
      window.removeEventListener('orientationchange', this.onOrientationChangeCallback_);
      window.removeEventListener('message', this.onMessageCallback_);
    };
    var SENSOR_FREQUENCY = 60;
    var X_AXIS = new Vector3(1, 0, 0);
    var Z_AXIS = new Vector3(0, 0, 1);
    var SENSOR_TO_VR = new Quaternion();
    SENSOR_TO_VR.setFromAxisAngle(X_AXIS, -Math.PI / 2);
    SENSOR_TO_VR.multiply(new Quaternion().setFromAxisAngle(Z_AXIS, Math.PI / 2));
    var PoseSensor = function () {
      function PoseSensor(config) {
        classCallCheck(this, PoseSensor);
        this.config = config;
        this.sensor = null;
        this.fusionSensor = null;
        this._out = new Float32Array(4);
        this.api = null;
        this.errors = [];
        this._sensorQ = new Quaternion();
        this._outQ = new Quaternion();
        this._onSensorRead = this._onSensorRead.bind(this);
        this._onSensorError = this._onSensorError.bind(this);
        this.init();
      }
      createClass(PoseSensor, [{
        key: 'init',
        value: function init() {
          var sensor = null;
          try {
            sensor = new RelativeOrientationSensor({
              frequency: SENSOR_FREQUENCY,
              referenceFrame: 'screen'
            });
            sensor.addEventListener('error', this._onSensorError);
          } catch (error) {
            this.errors.push(error);
            if (error.name === 'SecurityError') {
              console.error('Cannot construct sensors due to the Feature Policy');
              console.warn('Attempting to fall back using "devicemotion"; however this will ' + 'fail in the future without correct permissions.');
              this.useDeviceMotion();
            } else if (error.name === 'ReferenceError') {
              this.useDeviceMotion();
            } else {
              console.error(error);
            }
          }
          if (sensor) {
            this.api = 'sensor';
            this.sensor = sensor;
            this.sensor.addEventListener('reading', this._onSensorRead);
            this.sensor.start();
          }
        }
      }, {
        key: 'useDeviceMotion',
        value: function useDeviceMotion() {
          this.api = 'devicemotion';
          this.fusionSensor = new FusionPoseSensor(this.config.K_FILTER, this.config.PREDICTION_TIME_S, this.config.YAW_ONLY, this.config.DEBUG);
          if (this.sensor) {
            this.sensor.removeEventListener('reading', this._onSensorRead);
            this.sensor.removeEventListener('error', this._onSensorError);
            this.sensor = null;
          }
        }
      }, {
        key: 'getOrientation',
        value: function getOrientation() {
          if (this.fusionSensor) {
            return this.fusionSensor.getOrientation();
          }
          if (!this.sensor || !this.sensor.quaternion) {
            this._out[0] = this._out[1] = this._out[2] = 0;
            this._out[3] = 1;
            return this._out;
          }
          var q = this.sensor.quaternion;
          this._sensorQ.set(q[0], q[1], q[2], q[3]);
          var out = this._outQ;
          out.copy(SENSOR_TO_VR);
          out.multiply(this._sensorQ);
          if (this.config.YAW_ONLY) {
            out.x = out.z = 0;
            out.normalize();
          }
          this._out[0] = out.x;
          this._out[1] = out.y;
          this._out[2] = out.z;
          this._out[3] = out.w;
          return this._out;
        }
      }, {
        key: '_onSensorError',
        value: function _onSensorError(event) {
          this.errors.push(event.error);
          if (event.error.name === 'NotAllowedError') {
            console.error('Permission to access sensor was denied');
          } else if (event.error.name === 'NotReadableError') {
            console.error('Sensor could not be read');
          } else {
            console.error(event.error);
          }
          this.useDeviceMotion();
        }
      }, {
        key: '_onSensorRead',
        value: function _onSensorRead() {}
      }]);
      return PoseSensor;
    }();
    var rotateInstructionsAsset = "<svg width='198' height='240' viewBox='0 0 198 240' xmlns='http://www.w3.org/2000/svg'><g fill='none' fill-rule='evenodd'><path d='M149.625 109.527l6.737 3.891v.886c0 .177.013.36.038.549.01.081.02.162.027.242.14 1.415.974 2.998 2.105 3.999l5.72 5.062.081-.09s4.382-2.53 5.235-3.024l25.97 14.993v54.001c0 .771-.386 1.217-.948 1.217-.233 0-.495-.076-.772-.236l-23.967-13.838-.014.024-27.322 15.775-.85-1.323c-4.731-1.529-9.748-2.74-14.951-3.61a.27.27 0 0 0-.007.024l-5.067 16.961-7.891 4.556-.037-.063v27.59c0 .772-.386 1.217-.948 1.217-.232 0-.495-.076-.772-.236l-42.473-24.522c-.95-.549-1.72-1.877-1.72-2.967v-1.035l-.021.047a5.111 5.111 0 0 0-1.816-.399 5.682 5.682 0 0 0-.546.001 13.724 13.724 0 0 1-1.918-.041c-1.655-.153-3.2-.6-4.404-1.296l-46.576-26.89.005.012-10.278-18.75c-1.001-1.827-.241-4.216 1.698-5.336l56.011-32.345a4.194 4.194 0 0 1 2.099-.572c1.326 0 2.572.659 3.227 1.853l.005-.003.227.413-.006.004a9.63 9.63 0 0 0 1.477 2.018l.277.27c1.914 1.85 4.468 2.801 7.113 2.801 1.949 0 3.948-.517 5.775-1.572.013 0 7.319-4.219 7.319-4.219a4.194 4.194 0 0 1 2.099-.572c1.326 0 2.572.658 3.226 1.853l3.25 5.928.022-.018 6.785 3.917-.105-.182 46.881-26.965m0-1.635c-.282 0-.563.073-.815.218l-46.169 26.556-5.41-3.124-3.005-5.481c-.913-1.667-2.699-2.702-4.66-2.703-1.011 0-2.02.274-2.917.792a3825 3825 0 0 1-7.275 4.195l-.044.024a9.937 9.937 0 0 1-4.957 1.353c-2.292 0-4.414-.832-5.976-2.342l-.252-.245a7.992 7.992 0 0 1-1.139-1.534 1.379 1.379 0 0 0-.06-.122l-.227-.414a1.718 1.718 0 0 0-.095-.154c-.938-1.574-2.673-2.545-4.571-2.545-1.011 0-2.02.274-2.917.792L3.125 155.502c-2.699 1.559-3.738 4.94-2.314 7.538l10.278 18.75c.177.323.448.563.761.704l46.426 26.804c1.403.81 3.157 1.332 5.072 1.508a15.661 15.661 0 0 0 2.146.046 4.766 4.766 0 0 1 .396 0c.096.004.19.011.283.022.109 1.593 1.159 3.323 2.529 4.114l42.472 24.522c.524.302 1.058.455 1.59.455 1.497 0 2.583-1.2 2.583-2.852v-26.562l7.111-4.105a1.64 1.64 0 0 0 .749-.948l4.658-15.593c4.414.797 8.692 1.848 12.742 3.128l.533.829a1.634 1.634 0 0 0 2.193.531l26.532-15.317L193 192.433c.523.302 1.058.455 1.59.455 1.497 0 2.583-1.199 2.583-2.852v-54.001c0-.584-.312-1.124-.818-1.416l-25.97-14.993a1.633 1.633 0 0 0-1.636.001c-.606.351-2.993 1.73-4.325 2.498l-4.809-4.255c-.819-.725-1.461-1.933-1.561-2.936a7.776 7.776 0 0 0-.033-.294 2.487 2.487 0 0 1-.023-.336v-.886c0-.584-.312-1.123-.817-1.416l-6.739-3.891a1.633 1.633 0 0 0-.817-.219' fill='#455A64'/><path d='M96.027 132.636l46.576 26.891c1.204.695 1.979 1.587 2.242 2.541l-.01.007-81.374 46.982h-.001c-1.654-.152-3.199-.6-4.403-1.295l-46.576-26.891 83.546-48.235' fill='#FAFAFA'/><path d='M63.461 209.174c-.008 0-.015 0-.022-.002-1.693-.156-3.228-.609-4.441-1.309l-46.576-26.89a.118.118 0 0 1 0-.203l83.546-48.235a.117.117 0 0 1 .117 0l46.576 26.891c1.227.708 2.021 1.612 2.296 2.611a.116.116 0 0 1-.042.124l-.021.016-81.375 46.981a.11.11 0 0 1-.058.016zm-50.747-28.303l46.401 26.79c1.178.68 2.671 1.121 4.32 1.276l81.272-46.922c-.279-.907-1.025-1.73-2.163-2.387l-46.517-26.857-83.313 48.1z' fill='#607D8B'/><path d='M148.327 165.471a5.85 5.85 0 0 1-.546.001c-1.894-.083-3.302-1.038-3.145-2.132a2.693 2.693 0 0 0-.072-1.105l-81.103 46.822c.628.058 1.272.073 1.918.042.182-.009.364-.009.546-.001 1.894.083 3.302 1.038 3.145 2.132l79.257-45.759' fill='#FFF'/><path d='M69.07 211.347a.118.118 0 0 1-.115-.134c.045-.317-.057-.637-.297-.925-.505-.61-1.555-1.022-2.738-1.074a5.966 5.966 0 0 0-.535.001 14.03 14.03 0 0 1-1.935-.041.117.117 0 0 1-.103-.092.116.116 0 0 1 .055-.126l81.104-46.822a.117.117 0 0 1 .171.07c.104.381.129.768.074 1.153-.045.316.057.637.296.925.506.61 1.555 1.021 2.739 1.073.178.008.357.008.535-.001a.117.117 0 0 1 .064.218l-79.256 45.759a.114.114 0 0 1-.059.016zm-3.405-2.372c.089 0 .177.002.265.006 1.266.056 2.353.488 2.908 1.158.227.274.35.575.36.882l78.685-45.429c-.036 0-.072-.001-.107-.003-1.267-.056-2.354-.489-2.909-1.158-.282-.34-.402-.724-.347-1.107a2.604 2.604 0 0 0-.032-.91L63.846 208.97a13.91 13.91 0 0 0 1.528.012c.097-.005.194-.007.291-.007z' fill='#607D8B'/><path d='M2.208 162.134c-1.001-1.827-.241-4.217 1.698-5.337l56.011-32.344c1.939-1.12 4.324-.546 5.326 1.281l.232.41a9.344 9.344 0 0 0 1.47 2.021l.278.27c3.325 3.214 8.583 3.716 12.888 1.23l7.319-4.22c1.94-1.119 4.324-.546 5.325 1.282l3.25 5.928-83.519 48.229-10.278-18.75z' fill='#FAFAFA'/><path d='M12.486 181.001a.112.112 0 0 1-.031-.005.114.114 0 0 1-.071-.056L2.106 162.19c-1.031-1.88-.249-4.345 1.742-5.494l56.01-32.344a4.328 4.328 0 0 1 2.158-.588c1.415 0 2.65.702 3.311 1.882.01.008.018.017.024.028l.227.414a.122.122 0 0 1 .013.038 9.508 9.508 0 0 0 1.439 1.959l.275.266c1.846 1.786 4.344 2.769 7.031 2.769 1.977 0 3.954-.538 5.717-1.557a.148.148 0 0 1 .035-.013l7.284-4.206a4.321 4.321 0 0 1 2.157-.588c1.427 0 2.672.716 3.329 1.914l3.249 5.929a.116.116 0 0 1-.044.157l-83.518 48.229a.116.116 0 0 1-.059.016zm49.53-57.004c-.704 0-1.41.193-2.041.557l-56.01 32.345c-1.882 1.086-2.624 3.409-1.655 5.179l10.221 18.645 83.317-48.112-3.195-5.829c-.615-1.122-1.783-1.792-3.124-1.792a4.08 4.08 0 0 0-2.04.557l-7.317 4.225a.148.148 0 0 1-.035.013 11.7 11.7 0 0 1-5.801 1.569c-2.748 0-5.303-1.007-7.194-2.835l-.278-.27a9.716 9.716 0 0 1-1.497-2.046.096.096 0 0 1-.013-.037l-.191-.347a.11.11 0 0 1-.023-.029c-.615-1.123-1.783-1.793-3.124-1.793z' fill='#607D8B'/><path d='M42.434 155.808c-2.51-.001-4.697-1.258-5.852-3.365-1.811-3.304-.438-7.634 3.059-9.654l12.291-7.098a7.599 7.599 0 0 1 3.789-1.033c2.51 0 4.697 1.258 5.852 3.365 1.811 3.304.439 7.634-3.059 9.654l-12.291 7.098a7.606 7.606 0 0 1-3.789 1.033zm13.287-20.683a7.128 7.128 0 0 0-3.555.971l-12.291 7.098c-3.279 1.893-4.573 5.942-2.883 9.024 1.071 1.955 3.106 3.122 5.442 3.122a7.13 7.13 0 0 0 3.556-.97l12.291-7.098c3.279-1.893 4.572-5.942 2.883-9.024-1.072-1.955-3.106-3.123-5.443-3.123z' fill='#607D8B'/><path d='M149.588 109.407l6.737 3.89v.887c0 .176.013.36.037.549.011.081.02.161.028.242.14 1.415.973 2.998 2.105 3.999l7.396 6.545c.177.156.358.295.541.415 1.579 1.04 2.95.466 3.062-1.282.049-.784.057-1.595.023-2.429l-.003-.16v-1.151l25.987 15.003v54c0 1.09-.77 1.53-1.72.982l-42.473-24.523c-.95-.548-1.72-1.877-1.72-2.966v-34.033' fill='#FAFAFA'/><path d='M194.553 191.25c-.257 0-.54-.085-.831-.253l-42.472-24.521c-.981-.567-1.779-1.943-1.779-3.068v-34.033h.234v34.033c0 1.051.745 2.336 1.661 2.866l42.473 24.521c.424.245.816.288 1.103.122.285-.164.442-.52.442-1.002v-53.933l-25.753-14.868.003 1.106c.034.832.026 1.654-.024 2.439-.054.844-.396 1.464-.963 1.746-.619.309-1.45.173-2.28-.373a5.023 5.023 0 0 1-.553-.426l-7.397-6.544c-1.158-1.026-1.999-2.625-2.143-4.076a9.624 9.624 0 0 0-.027-.238 4.241 4.241 0 0 1-.038-.564v-.82l-6.68-3.856.117-.202 6.738 3.89.058.034v.954c0 .171.012.351.036.533.011.083.021.165.029.246.138 1.395.948 2.935 2.065 3.923l7.397 6.545c.173.153.35.289.527.406.758.499 1.504.63 2.047.359.49-.243.786-.795.834-1.551.05-.778.057-1.591.024-2.417l-.004-.163v-1.355l.175.1 25.987 15.004.059.033v54.068c0 .569-.198.996-.559 1.204a1.002 1.002 0 0 1-.506.131' fill='#607D8B'/><path d='M145.685 163.161l24.115 13.922-25.978 14.998-1.462-.307c-6.534-2.17-13.628-3.728-21.019-4.616-4.365-.524-8.663 1.096-9.598 3.62a2.746 2.746 0 0 0-.011 1.928c1.538 4.267 4.236 8.363 7.995 12.135l.532.845-25.977 14.997-24.115-13.922 75.518-43.6' fill='#FFF'/><path d='M94.282 220.818l-.059-.033-24.29-14.024.175-.101 75.577-43.634.058.033 24.29 14.024-26.191 15.122-.045-.01-1.461-.307c-6.549-2.174-13.613-3.725-21.009-4.614a13.744 13.744 0 0 0-1.638-.097c-3.758 0-7.054 1.531-7.837 3.642a2.62 2.62 0 0 0-.01 1.848c1.535 4.258 4.216 8.326 7.968 12.091l.016.021.526.835.006.01.064.102-.105.061-25.977 14.998-.058.033zm-23.881-14.057l23.881 13.788 24.802-14.32c.546-.315.846-.489 1.017-.575l-.466-.74c-3.771-3.787-6.467-7.881-8.013-12.168a2.851 2.851 0 0 1 .011-2.008c.815-2.199 4.203-3.795 8.056-3.795.557 0 1.117.033 1.666.099 7.412.891 14.491 2.445 21.041 4.621.836.175 1.215.254 1.39.304l25.78-14.884-23.881-13.788-75.284 43.466z' fill='#607D8B'/><path d='M167.23 125.979v50.871l-27.321 15.773-6.461-14.167c-.91-1.996-3.428-1.738-5.624.574a10.238 10.238 0 0 0-2.33 4.018l-6.46 21.628-27.322 15.774v-50.871l75.518-43.6' fill='#FFF'/><path d='M91.712 220.567a.127.127 0 0 1-.059-.016.118.118 0 0 1-.058-.101v-50.871c0-.042.023-.08.058-.101l75.519-43.6a.117.117 0 0 1 .175.101v50.871c0 .041-.023.08-.059.1l-27.321 15.775a.118.118 0 0 1-.094.01.12.12 0 0 1-.071-.063l-6.46-14.168c-.375-.822-1.062-1.275-1.934-1.275-1.089 0-2.364.686-3.5 1.881a10.206 10.206 0 0 0-2.302 3.972l-6.46 21.627a.118.118 0 0 1-.054.068L91.77 220.551a.12.12 0 0 1-.058.016zm.117-50.92v50.601l27.106-15.65 6.447-21.583a10.286 10.286 0 0 1 2.357-4.065c1.18-1.242 2.517-1.954 3.669-1.954.969 0 1.731.501 2.146 1.411l6.407 14.051 27.152-15.676v-50.601l-75.284 43.466z' fill='#607D8B'/><path d='M168.543 126.213v50.87l-27.322 15.774-6.46-14.168c-.91-1.995-3.428-1.738-5.624.574a10.248 10.248 0 0 0-2.33 4.019l-6.461 21.627-27.321 15.774v-50.87l75.518-43.6' fill='#FFF'/><path d='M93.025 220.8a.123.123 0 0 1-.059-.015.12.12 0 0 1-.058-.101v-50.871c0-.042.023-.08.058-.101l75.518-43.6a.112.112 0 0 1 .117 0c.036.02.059.059.059.1v50.871a.116.116 0 0 1-.059.101l-27.321 15.774a.111.111 0 0 1-.094.01.115.115 0 0 1-.071-.062l-6.46-14.168c-.375-.823-1.062-1.275-1.935-1.275-1.088 0-2.363.685-3.499 1.881a10.19 10.19 0 0 0-2.302 3.971l-6.461 21.628a.108.108 0 0 1-.053.067l-27.322 15.775a.12.12 0 0 1-.058.015zm.117-50.919v50.6l27.106-15.649 6.447-21.584a10.293 10.293 0 0 1 2.357-4.065c1.179-1.241 2.516-1.954 3.668-1.954.969 0 1.732.502 2.147 1.412l6.407 14.051 27.152-15.676v-50.601l-75.284 43.466z' fill='#607D8B'/><path d='M169.8 177.083l-27.322 15.774-6.46-14.168c-.91-1.995-3.428-1.738-5.625.574a10.246 10.246 0 0 0-2.329 4.019l-6.461 21.627-27.321 15.774v-50.87l75.518-43.6v50.87z' fill='#FAFAFA'/><path d='M94.282 220.917a.234.234 0 0 1-.234-.233v-50.871c0-.083.045-.161.117-.202l75.518-43.601a.234.234 0 1 1 .35.202v50.871a.233.233 0 0 1-.116.202l-27.322 15.775a.232.232 0 0 1-.329-.106l-6.461-14.168c-.36-.789-.992-1.206-1.828-1.206-1.056 0-2.301.672-3.415 1.844a10.099 10.099 0 0 0-2.275 3.924l-6.46 21.628a.235.235 0 0 1-.107.136l-27.322 15.774a.23.23 0 0 1-.116.031zm.233-50.969v50.331l26.891-15.525 6.434-21.539a10.41 10.41 0 0 1 2.384-4.112c1.201-1.265 2.569-1.991 3.753-1.991 1.018 0 1.818.526 2.253 1.48l6.354 13.934 26.982-15.578v-50.331l-75.051 43.331z' fill='#607D8B'/><path d='M109.894 199.943c-1.774 0-3.241-.725-4.244-2.12a.224.224 0 0 1 .023-.294.233.233 0 0 1 .301-.023c.78.547 1.705.827 2.75.827 1.323 0 2.754-.439 4.256-1.306 5.311-3.067 9.631-10.518 9.631-16.611 0-1.927-.442-3.56-1.278-4.724a.232.232 0 0 1 .323-.327c1.671 1.172 2.591 3.381 2.591 6.219 0 6.242-4.426 13.863-9.865 17.003-1.574.908-3.084 1.356-4.488 1.356zm-2.969-1.542c.813.651 1.82.877 2.968.877h.001c1.321 0 2.753-.327 4.254-1.194 5.311-3.067 9.632-10.463 9.632-16.556 0-1.979-.463-3.599-1.326-4.761.411 1.035.625 2.275.625 3.635 0 6.243-4.426 13.883-9.865 17.023-1.574.909-3.084 1.317-4.49 1.317-.641 0-1.243-.149-1.799-.341z' fill='#607D8B'/><path d='M113.097 197.23c5.384-3.108 9.748-10.636 9.748-16.814 0-2.051-.483-3.692-1.323-4.86-1.784-1.252-4.374-1.194-7.257.47-5.384 3.108-9.748 10.636-9.748 16.814 0 2.051.483 3.692 1.323 4.86 1.784 1.252 4.374 1.194 7.257-.47' fill='#FAFAFA'/><path d='M108.724 198.614c-1.142 0-2.158-.213-3.019-.817-.021-.014-.04.014-.055-.007-.894-1.244-1.367-2.948-1.367-4.973 0-6.242 4.426-13.864 9.865-17.005 1.574-.908 3.084-1.363 4.49-1.363 1.142 0 2.158.309 3.018.913a.23.23 0 0 1 .056.056c.894 1.244 1.367 2.972 1.367 4.997 0 6.243-4.426 13.783-9.865 16.923-1.574.909-3.084 1.276-4.49 1.276zm-2.718-1.109c.774.532 1.688.776 2.718.776 1.323 0 2.754-.413 4.256-1.28 5.311-3.066 9.631-10.505 9.631-16.598 0-1.909-.434-3.523-1.255-4.685-.774-.533-1.688-.799-2.718-.799-1.323 0-2.755.441-4.256 1.308-5.311 3.066-9.631 10.506-9.631 16.599 0 1.909.434 3.517 1.255 4.679z' fill='#607D8B'/><path d='M149.318 114.262l-9.984 8.878 15.893 11.031 5.589-6.112-11.498-13.797' fill='#FAFAFA'/><path d='M169.676 120.84l-9.748 5.627c-3.642 2.103-9.528 2.113-13.147.024-3.62-2.089-3.601-5.488.041-7.591l9.495-5.608-6.729-3.885-81.836 47.071 45.923 26.514 3.081-1.779c.631-.365.869-.898.618-1.39-2.357-4.632-2.593-9.546-.683-14.262 5.638-13.92 24.509-24.815 48.618-28.07 8.169-1.103 16.68-.967 24.704.394.852.145 1.776.008 2.407-.357l3.081-1.778-25.825-14.91' fill='#FAFAFA'/><path d='M113.675 183.459a.47.47 0 0 1-.233-.062l-45.924-26.515a.468.468 0 0 1 .001-.809l81.836-47.071a.467.467 0 0 1 .466 0l6.729 3.885a.467.467 0 0 1-.467.809l-6.496-3.75-80.9 46.533 44.988 25.973 2.848-1.644c.192-.111.62-.409.435-.773-2.416-4.748-2.658-9.814-.7-14.65 2.806-6.927 8.885-13.242 17.582-18.263 8.657-4.998 19.518-8.489 31.407-10.094 8.198-1.107 16.79-.97 24.844.397.739.125 1.561.007 2.095-.301l2.381-1.374-25.125-14.506a.467.467 0 0 1 .467-.809l25.825 14.91a.467.467 0 0 1 0 .809l-3.081 1.779c-.721.417-1.763.575-2.718.413-7.963-1.351-16.457-1.486-24.563-.392-11.77 1.589-22.512 5.039-31.065 9.977-8.514 4.916-14.456 11.073-17.183 17.805-1.854 4.578-1.623 9.376.666 13.875.37.725.055 1.513-.8 2.006l-3.081 1.78a.476.476 0 0 1-.234.062' fill='#455A64'/><path d='M153.316 128.279c-2.413 0-4.821-.528-6.652-1.586-1.818-1.049-2.82-2.461-2.82-3.975 0-1.527 1.016-2.955 2.861-4.02l9.493-5.607a.233.233 0 1 1 .238.402l-9.496 5.609c-1.696.979-2.628 2.263-2.628 3.616 0 1.34.918 2.608 2.585 3.571 3.549 2.049 9.343 2.038 12.914-.024l9.748-5.628a.234.234 0 0 1 .234.405l-9.748 5.628c-1.858 1.072-4.296 1.609-6.729 1.609' fill='#607D8B'/><path d='M113.675 182.992l-45.913-26.508M113.675 183.342a.346.346 0 0 1-.175-.047l-45.913-26.508a.35.35 0 1 1 .35-.607l45.913 26.508a.35.35 0 0 1-.175.654' fill='#455A64'/><path d='M67.762 156.484v54.001c0 1.09.77 2.418 1.72 2.967l42.473 24.521c.95.549 1.72.11 1.72-.98v-54.001' fill='#FAFAFA'/><path d='M112.727 238.561c-.297 0-.62-.095-.947-.285l-42.473-24.521c-1.063-.613-1.895-2.05-1.895-3.27v-54.001a.35.35 0 1 1 .701 0v54.001c0 .96.707 2.18 1.544 2.663l42.473 24.522c.344.198.661.243.87.122.206-.119.325-.411.325-.799v-54.001a.35.35 0 1 1 .7 0v54.001c0 .655-.239 1.154-.675 1.406a1.235 1.235 0 0 1-.623.162' fill='#455A64'/><path d='M112.86 147.512h-.001c-2.318 0-4.499-.522-6.142-1.471-1.705-.984-2.643-2.315-2.643-3.749 0-1.445.952-2.791 2.68-3.788l12.041-6.953c1.668-.962 3.874-1.493 6.212-1.493 2.318 0 4.499.523 6.143 1.472 1.704.984 2.643 2.315 2.643 3.748 0 1.446-.952 2.791-2.68 3.789l-12.042 6.952c-1.668.963-3.874 1.493-6.211 1.493zm12.147-16.753c-2.217 0-4.298.497-5.861 1.399l-12.042 6.952c-1.502.868-2.33 1.998-2.33 3.182 0 1.173.815 2.289 2.293 3.142 1.538.889 3.596 1.378 5.792 1.378h.001c2.216 0 4.298-.497 5.861-1.399l12.041-6.953c1.502-.867 2.33-1.997 2.33-3.182 0-1.172-.814-2.288-2.292-3.142-1.539-.888-3.596-1.377-5.793-1.377z' fill='#607D8B'/><path d='M165.63 123.219l-5.734 3.311c-3.167 1.828-8.286 1.837-11.433.02-3.147-1.817-3.131-4.772.036-6.601l5.734-3.31 11.397 6.58' fill='#FAFAFA'/><path d='M154.233 117.448l9.995 5.771-4.682 2.704c-1.434.827-3.352 1.283-5.399 1.283-2.029 0-3.923-.449-5.333-1.263-1.29-.744-2-1.694-2-2.674 0-.991.723-1.955 2.036-2.713l5.383-3.108m0-.809l-5.734 3.31c-3.167 1.829-3.183 4.784-.036 6.601 1.568.905 3.623 1.357 5.684 1.357 2.077 0 4.159-.46 5.749-1.377l5.734-3.311-11.397-6.58M145.445 179.667c-1.773 0-3.241-.85-4.243-2.245-.067-.092-.057-.275.023-.356.08-.081.207-.12.3-.055.781.548 1.706.812 2.751.811 1.322 0 2.754-.446 4.256-1.313 5.31-3.066 9.631-10.522 9.631-16.615 0-1.927-.442-3.562-1.279-4.726a.235.235 0 0 1 .024-.301.232.232 0 0 1 .3-.027c1.67 1.172 2.59 3.38 2.59 6.219 0 6.242-4.425 13.987-9.865 17.127-1.573.908-3.083 1.481-4.488 1.481zM142.476 178c.814.651 1.82 1.002 2.969 1.002 1.322 0 2.753-.452 4.255-1.32 5.31-3.065 9.631-10.523 9.631-16.617 0-1.98-.463-3.63-1.325-4.793.411 1.035.624 2.26.624 3.62 0 6.242-4.425 13.875-9.865 17.015-1.573.909-3.084 1.376-4.489 1.376a5.49 5.49 0 0 1-1.8-.283z' fill='#607D8B'/><path d='M148.648 176.704c5.384-3.108 9.748-10.636 9.748-16.813 0-2.052-.483-3.693-1.322-4.861-1.785-1.252-4.375-1.194-7.258.471-5.383 3.108-9.748 10.636-9.748 16.813 0 2.051.484 3.692 1.323 4.86 1.785 1.253 4.374 1.195 7.257-.47' fill='#FAFAFA'/><path d='M144.276 178.276c-1.143 0-2.158-.307-3.019-.911a.217.217 0 0 1-.055-.054c-.895-1.244-1.367-2.972-1.367-4.997 0-6.241 4.425-13.875 9.865-17.016 1.573-.908 3.084-1.369 4.489-1.369 1.143 0 2.158.307 3.019.91a.24.24 0 0 1 .055.055c.894 1.244 1.367 2.971 1.367 4.997 0 6.241-4.425 13.875-9.865 17.016-1.573.908-3.084 1.369-4.489 1.369zm-2.718-1.172c.773.533 1.687.901 2.718.901 1.322 0 2.754-.538 4.256-1.405 5.31-3.066 9.631-10.567 9.631-16.661 0-1.908-.434-3.554-1.256-4.716-.774-.532-1.688-.814-2.718-.814-1.322 0-2.754.433-4.256 1.3-5.31 3.066-9.631 10.564-9.631 16.657 0 1.91.434 3.576 1.256 4.738z' fill='#607D8B'/><path d='M150.72 172.361l-.363-.295a24.105 24.105 0 0 0 2.148-3.128 24.05 24.05 0 0 0 1.977-4.375l.443.149a24.54 24.54 0 0 1-2.015 4.46 24.61 24.61 0 0 1-2.19 3.189M115.917 191.514l-.363-.294a24.174 24.174 0 0 0 2.148-3.128 24.038 24.038 0 0 0 1.976-4.375l.443.148a24.48 24.48 0 0 1-2.015 4.461 24.662 24.662 0 0 1-2.189 3.188M114 237.476V182.584 237.476' fill='#607D8B'/><g><path d='M81.822 37.474c.017-.135-.075-.28-.267-.392-.327-.188-.826-.21-1.109-.045l-6.012 3.471c-.131.076-.194.178-.191.285.002.132.002.461.002.578v.043l-.007.128-6.591 3.779c-.001 0-2.077 1.046-2.787 5.192 0 0-.912 6.961-.898 19.745.015 12.57.606 17.07 1.167 21.351.22 1.684 3.001 2.125 3.001 2.125.331.04.698-.027 1.08-.248l75.273-43.551c1.808-1.069 2.667-3.719 3.056-6.284 1.213-7.99 1.675-32.978-.275-39.878-.196-.693-.51-1.083-.868-1.282l-2.086-.79c-.727.028-1.416.467-1.534.535L82.032 37.072l-.21.402' fill='#FFF'/><path d='M144.311 1.701l2.085.79c.358.199.672.589.868 1.282 1.949 6.9 1.487 31.887.275 39.878-.39 2.565-1.249 5.215-3.056 6.284L69.21 93.486a1.78 1.78 0 0 1-.896.258l-.183-.011c0 .001-2.782-.44-3.003-2.124-.56-4.282-1.151-8.781-1.165-21.351-.015-12.784.897-19.745.897-19.745.71-4.146 2.787-5.192 2.787-5.192l6.591-3.779.007-.128v-.043c0-.117 0-.446-.002-.578-.003-.107.059-.21.191-.285l6.012-3.472a.98.98 0 0 1 .481-.11c.218 0 .449.053.627.156.193.112.285.258.268.392l.211-.402 60.744-34.836c.117-.068.806-.507 1.534-.535m0-.997l-.039.001c-.618.023-1.283.244-1.974.656l-.021.012-60.519 34.706a2.358 2.358 0 0 0-.831-.15c-.365 0-.704.084-.98.244l-6.012 3.471c-.442.255-.699.69-.689 1.166l.001.15-6.08 3.487c-.373.199-2.542 1.531-3.29 5.898l-.006.039c-.009.07-.92 7.173-.906 19.875.014 12.62.603 17.116 1.172 21.465l.002.015c.308 2.355 3.475 2.923 3.836 2.98l.034.004c.101.013.204.019.305.019a2.77 2.77 0 0 0 1.396-.392l75.273-43.552c1.811-1.071 2.999-3.423 3.542-6.997 1.186-7.814 1.734-33.096-.301-40.299-.253-.893-.704-1.527-1.343-1.882l-.132-.062-2.085-.789a.973.973 0 0 0-.353-.065' fill='#455A64'/><path d='M128.267 11.565l1.495.434-56.339 32.326' fill='#FFF'/><path d='M74.202 90.545a.5.5 0 0 1-.25-.931l18.437-10.645a.499.499 0 1 1 .499.864L74.451 90.478l-.249.067M75.764 42.654l-.108-.062.046-.171 5.135-2.964.17.045-.045.171-5.135 2.964-.063.017M70.52 90.375V46.421l.063-.036L137.84 7.554v43.954l-.062.036L70.52 90.375zm.25-43.811v43.38l66.821-38.579V7.985L70.77 46.564z' fill='#607D8B'/><path d='M86.986 83.182c-.23.149-.612.384-.849.523l-11.505 6.701c-.237.139-.206.252.068.252h.565c.275 0 .693-.113.93-.252L87.7 83.705c.237-.139.428-.253.425-.256a11.29 11.29 0 0 1-.006-.503c0-.274-.188-.377-.418-.227l-.715.463' fill='#607D8B'/><path d='M75.266 90.782H74.7c-.2 0-.316-.056-.346-.166-.03-.11.043-.217.215-.317l11.505-6.702c.236-.138.615-.371.844-.519l.715-.464a.488.488 0 0 1 .266-.089c.172 0 .345.13.345.421 0 .214.001.363.003.437l.006.004-.004.069c-.003.075-.003.075-.486.356l-11.505 6.702a2.282 2.282 0 0 1-.992.268zm-.6-.25l.034.001h.566c.252 0 .649-.108.866-.234l11.505-6.702c.168-.098.294-.173.361-.214-.004-.084-.004-.218-.004-.437l-.095-.171-.131.049-.714.463c-.232.15-.616.386-.854.525l-11.505 6.702-.029.018z' fill='#607D8B'/><path d='M75.266 89.871H74.7c-.2 0-.316-.056-.346-.166-.03-.11.043-.217.215-.317l11.505-6.702c.258-.151.694-.268.993-.268h.565c.2 0 .316.056.346.166.03.11-.043.217-.215.317l-11.505 6.702a2.282 2.282 0 0 1-.992.268zm-.6-.25l.034.001h.566c.252 0 .649-.107.866-.234l11.505-6.702.03-.018-.035-.001h-.565c-.252 0-.649.108-.867.234l-11.505 6.702-.029.018zM74.37 90.801v-1.247 1.247' fill='#607D8B'/><path d='M68.13 93.901c-.751-.093-1.314-.737-1.439-1.376-.831-4.238-1.151-8.782-1.165-21.352-.015-12.784.897-19.745.897-19.745.711-4.146 2.787-5.192 2.787-5.192l74.859-43.219c.223-.129 2.487-1.584 3.195.923 1.95 6.9 1.488 31.887.275 39.878-.389 2.565-1.248 5.215-3.056 6.283L69.21 93.653c-.382.221-.749.288-1.08.248 0 0-2.781-.441-3.001-2.125-.561-4.281-1.152-8.781-1.167-21.351-.014-12.784.898-19.745.898-19.745.71-4.146 2.787-5.191 2.787-5.191l6.598-3.81.871-.119 6.599-3.83.046-.461L68.13 93.901' fill='#FAFAFA'/><path d='M68.317 94.161l-.215-.013h-.001l-.244-.047c-.719-.156-2.772-.736-2.976-2.292-.568-4.34-1.154-8.813-1.168-21.384-.014-12.654.891-19.707.9-19.777.725-4.231 2.832-5.338 2.922-5.382l6.628-3.827.87-.119 6.446-3.742.034-.334a.248.248 0 0 1 .273-.223.248.248 0 0 1 .223.272l-.059.589-6.752 3.919-.87.118-6.556 3.785c-.031.016-1.99 1.068-2.666 5.018-.007.06-.908 7.086-.894 19.702.014 12.539.597 16.996 1.161 21.305.091.691.689 1.154 1.309 1.452a1.95 1.95 0 0 1-.236-.609c-.781-3.984-1.155-8.202-1.17-21.399-.014-12.653.891-19.707.9-19.777.725-4.231 2.832-5.337 2.922-5.382-.004.001 74.444-42.98 74.846-43.212l.028-.017c.904-.538 1.72-.688 2.36-.433.555.221.949.733 1.172 1.52 2.014 7.128 1.46 32.219.281 39.983-.507 3.341-1.575 5.515-3.175 6.462L69.335 93.869a2.023 2.023 0 0 1-1.018.292zm-.147-.507c.293.036.604-.037.915-.217l75.273-43.551c1.823-1.078 2.602-3.915 2.934-6.106 1.174-7.731 1.731-32.695-.268-39.772-.178-.631-.473-1.032-.876-1.192-.484-.193-1.166-.052-1.921.397l-.034.021-74.858 43.218c-.031.017-1.989 1.069-2.666 5.019-.007.059-.908 7.085-.894 19.702.015 13.155.386 17.351 1.161 21.303.09.461.476.983 1.037 1.139.114.025.185.037.196.039h.001z' fill='#455A64'/><path d='M69.317 68.982c.489-.281.885-.056.885.505 0 .56-.396 1.243-.885 1.525-.488.282-.884.057-.884-.504 0-.56.396-1.243.884-1.526' fill='#FFF'/><path d='M68.92 71.133c-.289 0-.487-.228-.487-.625 0-.56.396-1.243.884-1.526a.812.812 0 0 1 .397-.121c.289 0 .488.229.488.626 0 .56-.396 1.243-.885 1.525a.812.812 0 0 1-.397.121m.794-2.459a.976.976 0 0 0-.49.147c-.548.317-.978 1.058-.978 1.687 0 .486.271.812.674.812a.985.985 0 0 0 .491-.146c.548-.317.978-1.057.978-1.687 0-.486-.272-.813-.675-.813' fill='#8097A2'/><path d='M68.92 70.947c-.271 0-.299-.307-.299-.439 0-.491.361-1.116.79-1.363a.632.632 0 0 1 .303-.096c.272 0 .301.306.301.438 0 .491-.363 1.116-.791 1.364a.629.629 0 0 1-.304.096m.794-2.086a.812.812 0 0 0-.397.121c-.488.283-.884.966-.884 1.526 0 .397.198.625.487.625a.812.812 0 0 0 .397-.121c.489-.282.885-.965.885-1.525 0-.397-.199-.626-.488-.626' fill='#8097A2'/><path d='M69.444 85.35c.264-.152.477-.031.477.272 0 .303-.213.67-.477.822-.263.153-.477.031-.477-.271 0-.302.214-.671.477-.823' fill='#FFF'/><path d='M69.23 86.51c-.156 0-.263-.123-.263-.337 0-.302.214-.671.477-.823a.431.431 0 0 1 .214-.066c.156 0 .263.124.263.338 0 .303-.213.67-.477.822a.431.431 0 0 1-.214.066m.428-1.412c-.1 0-.203.029-.307.09-.32.185-.57.618-.57.985 0 .309.185.524.449.524a.63.63 0 0 0 .308-.09c.32-.185.57-.618.57-.985 0-.309-.185-.524-.45-.524' fill='#8097A2'/><path d='M69.23 86.322l-.076-.149c0-.235.179-.544.384-.661l.12-.041.076.151c0 .234-.179.542-.383.66l-.121.04m.428-1.038a.431.431 0 0 0-.214.066c-.263.152-.477.521-.477.823 0 .214.107.337.263.337a.431.431 0 0 0 .214-.066c.264-.152.477-.519.477-.822 0-.214-.107-.338-.263-.338' fill='#8097A2'/><path d='M139.278 7.769v43.667L72.208 90.16V46.493l67.07-38.724' fill='#455A64'/><path d='M72.083 90.375V46.421l.063-.036 67.257-38.831v43.954l-.062.036-67.258 38.831zm.25-43.811v43.38l66.821-38.579V7.985L72.333 46.564z' fill='#607D8B'/></g><path d='M125.737 88.647l-7.639 3.334V84l-11.459 4.713v8.269L99 100.315l13.369 3.646 13.368-15.314' fill='#455A64'/></g></svg>";
    function RotateInstructions() {
      this.loadIcon_();
      var overlay = document.createElement('div');
      var s = overlay.style;
      s.position = 'fixed';
      s.top = 0;
      s.right = 0;
      s.bottom = 0;
      s.left = 0;
      s.backgroundColor = 'gray';
      s.fontFamily = 'sans-serif';
      s.zIndex = 1000000;
      var img = document.createElement('img');
      img.src = this.icon;
      var s = img.style;
      s.marginLeft = '25%';
      s.marginTop = '25%';
      s.width = '50%';
      overlay.appendChild(img);
      var text = document.createElement('div');
      var s = text.style;
      s.textAlign = 'center';
      s.fontSize = '16px';
      s.lineHeight = '24px';
      s.margin = '24px 25%';
      s.width = '50%';
      text.innerHTML = 'Place your phone into your Cardboard viewer.';
      overlay.appendChild(text);
      var snackbar = document.createElement('div');
      var s = snackbar.style;
      s.backgroundColor = '#CFD8DC';
      s.position = 'fixed';
      s.bottom = 0;
      s.width = '100%';
      s.height = '48px';
      s.padding = '14px 24px';
      s.boxSizing = 'border-box';
      s.color = '#656A6B';
      overlay.appendChild(snackbar);
      var snackbarText = document.createElement('div');
      snackbarText.style.float = 'left';
      snackbarText.innerHTML = 'No Cardboard viewer?';
      var snackbarButton = document.createElement('a');
      snackbarButton.href = 'https://www.google.com/get/cardboard/get-cardboard/';
      snackbarButton.innerHTML = 'get one';
      snackbarButton.target = '_blank';
      var s = snackbarButton.style;
      s.float = 'right';
      s.fontWeight = 600;
      s.textTransform = 'uppercase';
      s.borderLeft = '1px solid gray';
      s.paddingLeft = '24px';
      s.textDecoration = 'none';
      s.color = '#656A6B';
      snackbar.appendChild(snackbarText);
      snackbar.appendChild(snackbarButton);
      this.overlay = overlay;
      this.text = text;
      this.hide();
    }
    RotateInstructions.prototype.show = function (parent) {
      if (!parent && !this.overlay.parentElement) {
        document.body.appendChild(this.overlay);
      } else if (parent) {
        if (this.overlay.parentElement && this.overlay.parentElement != parent) this.overlay.parentElement.removeChild(this.overlay);
        parent.appendChild(this.overlay);
      }
      this.overlay.style.display = 'block';
      var img = this.overlay.querySelector('img');
      var s = img.style;
      if (isLandscapeMode()) {
        s.width = '20%';
        s.marginLeft = '40%';
        s.marginTop = '3%';
      } else {
        s.width = '50%';
        s.marginLeft = '25%';
        s.marginTop = '25%';
      }
    };
    RotateInstructions.prototype.hide = function () {
      this.overlay.style.display = 'none';
    };
    RotateInstructions.prototype.showTemporarily = function (ms, parent) {
      this.show(parent);
      this.timer = setTimeout(this.hide.bind(this), ms);
    };
    RotateInstructions.prototype.disableShowTemporarily = function () {
      clearTimeout(this.timer);
    };
    RotateInstructions.prototype.update = function () {
      this.disableShowTemporarily();
      if (!isLandscapeMode() && isMobile()) {
        this.show();
      } else {
        this.hide();
      }
    };
    RotateInstructions.prototype.loadIcon_ = function () {
      this.icon = dataUri('image/svg+xml', rotateInstructionsAsset);
    };
    var DEFAULT_VIEWER = 'CardboardV1';
    var VIEWER_KEY = 'WEBVR_CARDBOARD_VIEWER';
    var CLASS_NAME = 'webvr-polyfill-viewer-selector';
    function ViewerSelector(defaultViewer) {
      try {
        this.selectedKey = localStorage.getItem(VIEWER_KEY);
      } catch (error) {
        console.error('Failed to load viewer profile: %s', error);
      }
      if (!this.selectedKey) {
        this.selectedKey = defaultViewer || DEFAULT_VIEWER;
      }
      this.dialog = this.createDialog_(DeviceInfo.Viewers);
      this.root = null;
      this.onChangeCallbacks_ = [];
    }
    ViewerSelector.prototype.show = function (root) {
      this.root = root;
      root.appendChild(this.dialog);
      var selected = this.dialog.querySelector('#' + this.selectedKey);
      selected.checked = true;
      this.dialog.style.display = 'block';
    };
    ViewerSelector.prototype.hide = function () {
      if (this.root && this.root.contains(this.dialog)) {
        this.root.removeChild(this.dialog);
      }
      this.dialog.style.display = 'none';
    };
    ViewerSelector.prototype.getCurrentViewer = function () {
      return DeviceInfo.Viewers[this.selectedKey];
    };
    ViewerSelector.prototype.getSelectedKey_ = function () {
      var input = this.dialog.querySelector('input[name=field]:checked');
      if (input) {
        return input.id;
      }
      return null;
    };
    ViewerSelector.prototype.onChange = function (cb) {
      this.onChangeCallbacks_.push(cb);
    };
    ViewerSelector.prototype.fireOnChange_ = function (viewer) {
      for (var i = 0; i < this.onChangeCallbacks_.length; i++) {
        this.onChangeCallbacks_[i](viewer);
      }
    };
    ViewerSelector.prototype.onSave_ = function () {
      this.selectedKey = this.getSelectedKey_();
      if (!this.selectedKey || !DeviceInfo.Viewers[this.selectedKey]) {
        console.error('ViewerSelector.onSave_: this should never happen!');
        return;
      }
      this.fireOnChange_(DeviceInfo.Viewers[this.selectedKey]);
      try {
        localStorage.setItem(VIEWER_KEY, this.selectedKey);
      } catch (error) {
        console.error('Failed to save viewer profile: %s', error);
      }
      this.hide();
    };
    ViewerSelector.prototype.createDialog_ = function (options) {
      var container = document.createElement('div');
      container.classList.add(CLASS_NAME);
      container.style.display = 'none';
      var overlay = document.createElement('div');
      var s = overlay.style;
      s.position = 'fixed';
      s.left = 0;
      s.top = 0;
      s.width = '100%';
      s.height = '100%';
      s.background = 'rgba(0, 0, 0, 0.3)';
      overlay.addEventListener('click', this.hide.bind(this));
      var width = 280;
      var dialog = document.createElement('div');
      var s = dialog.style;
      s.boxSizing = 'border-box';
      s.position = 'fixed';
      s.top = '24px';
      s.left = '50%';
      s.marginLeft = -width / 2 + 'px';
      s.width = width + 'px';
      s.padding = '24px';
      s.overflow = 'hidden';
      s.background = '#fafafa';
      s.fontFamily = "'Roboto', sans-serif";
      s.boxShadow = '0px 5px 20px #666';
      dialog.appendChild(this.createH1_('Select your viewer'));
      for (var id in options) {
        dialog.appendChild(this.createChoice_(id, options[id].label));
      }
      dialog.appendChild(this.createButton_('Save', this.onSave_.bind(this)));
      container.appendChild(overlay);
      container.appendChild(dialog);
      return container;
    };
    ViewerSelector.prototype.createH1_ = function (name) {
      var h1 = document.createElement('h1');
      var s = h1.style;
      s.color = 'black';
      s.fontSize = '20px';
      s.fontWeight = 'bold';
      s.marginTop = 0;
      s.marginBottom = '24px';
      h1.innerHTML = name;
      return h1;
    };
    ViewerSelector.prototype.createChoice_ = function (id, name) {
      var div = document.createElement('div');
      div.style.marginTop = '8px';
      div.style.color = 'black';
      var input = document.createElement('input');
      input.style.fontSize = '30px';
      input.setAttribute('id', id);
      input.setAttribute('type', 'radio');
      input.setAttribute('value', id);
      input.setAttribute('name', 'field');
      var label = document.createElement('label');
      label.style.marginLeft = '4px';
      label.setAttribute('for', id);
      label.innerHTML = name;
      div.appendChild(input);
      div.appendChild(label);
      return div;
    };
    ViewerSelector.prototype.createButton_ = function (label, onclick) {
      var button = document.createElement('button');
      button.innerHTML = label;
      var s = button.style;
      s.float = 'right';
      s.textTransform = 'uppercase';
      s.color = '#1094f7';
      s.fontSize = '14px';
      s.letterSpacing = 0;
      s.border = 0;
      s.background = 'none';
      s.marginTop = '16px';
      button.addEventListener('click', onclick);
      return button;
    };
    var commonjsGlobal$$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};
    function unwrapExports$$1 (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }
    function createCommonjsModule$$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    var NoSleep = createCommonjsModule$$1(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(commonjsGlobal$$1, function() {
    return          (function(modules) {
             	var installedModules = {};
             	function __webpack_require__(moduleId) {
             		if(installedModules[moduleId]) {
             			return installedModules[moduleId].exports;
             		}
             		var module = installedModules[moduleId] = {
             			i: moduleId,
             			l: false,
             			exports: {}
             		};
             		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
             		module.l = true;
             		return module.exports;
             	}
             	__webpack_require__.m = modules;
             	__webpack_require__.c = installedModules;
             	__webpack_require__.d = function(exports, name, getter) {
             		if(!__webpack_require__.o(exports, name)) {
             			Object.defineProperty(exports, name, {
             				configurable: false,
             				enumerable: true,
             				get: getter
             			});
             		}
             	};
             	__webpack_require__.n = function(module) {
             		var getter = module && module.__esModule ?
             			function getDefault() { return module['default']; } :
             			function getModuleExports() { return module; };
             		__webpack_require__.d(getter, 'a', getter);
             		return getter;
             	};
             	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
             	__webpack_require__.p = "";
             	return __webpack_require__(__webpack_require__.s = 0);
             })
             ([
          (function(module, exports, __webpack_require__) {
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var mediaFile = __webpack_require__(1);
    var oldIOS = typeof navigator !== 'undefined' && parseFloat(('' + (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) < 10 && !window.MSStream;
    var NoSleep = function () {
      function NoSleep() {
        _classCallCheck(this, NoSleep);
        if (oldIOS) {
          this.noSleepTimer = null;
        } else {
          this.noSleepVideo = document.createElement('video');
          this.noSleepVideo.setAttribute('playsinline', '');
          this.noSleepVideo.setAttribute('src', mediaFile);
          this.noSleepVideo.addEventListener('timeupdate', function (e) {
            if (this.noSleepVideo.currentTime > 0.5) {
              this.noSleepVideo.currentTime = Math.random();
            }
          }.bind(this));
        }
      }
      _createClass(NoSleep, [{
        key: 'enable',
        value: function enable() {
          if (oldIOS) {
            this.disable();
            this.noSleepTimer = window.setInterval(function () {
              window.location.href = '/';
              window.setTimeout(window.stop, 0);
            }, 15000);
          } else {
            this.noSleepVideo.play();
          }
        }
      }, {
        key: 'disable',
        value: function disable() {
          if (oldIOS) {
            if (this.noSleepTimer) {
              window.clearInterval(this.noSleepTimer);
              this.noSleepTimer = null;
            }
          } else {
            this.noSleepVideo.pause();
          }
        }
      }]);
      return NoSleep;
    }();
    module.exports = NoSleep;
          }),
          (function(module, exports, __webpack_require__) {
    module.exports = 'data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQADQGgcIQADQGgcAAAACQGeYUQn/wALKCEAA0BoHAAAAAkBnmNEJ/8ACykhAANAaBwhAANAaBwAAAANQZpoNExDP/6plgAMuSEAA0BoHAAAAAtBnoZFESwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBnqVEJ/8ACykhAANAaBwAAAAJAZ6nRCf/AAsoIQADQGgcIQADQGgcAAAADUGarDRMQz/+qZYADLghAANAaBwAAAALQZ7KRRUsK/8ACPkhAANAaBwAAAAJAZ7pRCf/AAsoIQADQGgcIQADQGgcAAAACQGe60Qn/wALKCEAA0BoHAAAAA1BmvA0TEM//qmWAAy5IQADQGgcIQADQGgcAAAAC0GfDkUVLCv/AAj5IQADQGgcAAAACQGfLUQn/wALKSEAA0BoHCEAA0BoHAAAAAkBny9EJ/8ACyghAANAaBwAAAANQZs0NExDP/6plgAMuCEAA0BoHAAAAAtBn1JFFSwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBn3FEJ/8ACyghAANAaBwAAAAJAZ9zRCf/AAsoIQADQGgcIQADQGgcAAAADUGbeDRMQz/+qZYADLkhAANAaBwAAAALQZ+WRRUsK/8ACPghAANAaBwhAANAaBwAAAAJAZ+1RCf/AAspIQADQGgcAAAACQGft0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bm7w0TEM//qmWAAy4IQADQGgcAAAAC0Gf2kUVLCv/AAj5IQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHAAAAAkBn/tEJ/8ACykhAANAaBwAAAANQZvgNExDP/6plgAMuSEAA0BoHCEAA0BoHAAAAAtBnh5FFSwr/wAI+CEAA0BoHAAAAAkBnj1EJ/8ACyghAANAaBwhAANAaBwAAAAJAZ4/RCf/AAspIQADQGgcAAAADUGaJDRMQz/+qZYADLghAANAaBwAAAALQZ5CRRUsK/8ACPkhAANAaBwhAANAaBwAAAAJAZ5hRCf/AAsoIQADQGgcAAAACQGeY0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bmmg0TEM//qmWAAy5IQADQGgcAAAAC0GehkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGepUQn/wALKSEAA0BoHAAAAAkBnqdEJ/8ACyghAANAaBwAAAANQZqsNExDP/6plgAMuCEAA0BoHCEAA0BoHAAAAAtBnspFFSwr/wAI+SEAA0BoHAAAAAkBnulEJ/8ACyghAANAaBwhAANAaBwAAAAJAZ7rRCf/AAsoIQADQGgcAAAADUGa8DRMQz/+qZYADLkhAANAaBwhAANAaBwAAAALQZ8ORRUsK/8ACPkhAANAaBwAAAAJAZ8tRCf/AAspIQADQGgcIQADQGgcAAAACQGfL0Qn/wALKCEAA0BoHAAAAA1BmzQ0TEM//qmWAAy4IQADQGgcAAAAC0GfUkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGfcUQn/wALKCEAA0BoHAAAAAkBn3NEJ/8ACyghAANAaBwhAANAaBwAAAANQZt4NExC//6plgAMuSEAA0BoHAAAAAtBn5ZFFSwr/wAI+CEAA0BoHCEAA0BoHAAAAAkBn7VEJ/8ACykhAANAaBwAAAAJAZ+3RCf/AAspIQADQGgcAAAADUGbuzRMQn/+nhAAYsAhAANAaBwhAANAaBwAAAAJQZ/aQhP/AAspIQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHAAACiFtb292AAAAbG12aGQAAAAA1YCCX9WAgl8AAAPoAAAH/AABAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAGGlvZHMAAAAAEICAgAcAT////v7/AAAF+XRyYWsAAABcdGtoZAAAAAPVgIJf1YCCXwAAAAEAAAAAAAAH0AAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAygAAAMoAAAAAACRlZHRzAAAAHGVsc3QAAAAAAAAAAQAAB9AAABdwAAEAAAAABXFtZGlhAAAAIG1kaGQAAAAA1YCCX9WAgl8AAV+QAAK/IFXEAAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAAAAUcbWluZgAAABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAE3HN0YmwAAACYc3RzZAAAAAAAAAABAAAAiGF2YzEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAygDKAEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY//8AAAAyYXZjQwFNQCj/4QAbZ01AKOyho3ySTUBAQFAAAAMAEAAr8gDxgxlgAQAEaO+G8gAAABhzdHRzAAAAAAAAAAEAAAA8AAALuAAAABRzdHNzAAAAAAAAAAEAAAABAAAB8GN0dHMAAAAAAAAAPAAAAAEAABdwAAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAAC7gAAAAAQAAF3AAAAABAAAAAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAEEc3RzegAAAAAAAAAAAAAAPAAAAzQAAAAQAAAADQAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAANAAAADQAAAQBzdGNvAAAAAAAAADwAAAAwAAADZAAAA3QAAAONAAADoAAAA7kAAAPQAAAD6wAAA/4AAAQXAAAELgAABEMAAARcAAAEbwAABIwAAAShAAAEugAABM0AAATkAAAE/wAABRIAAAUrAAAFQgAABV0AAAVwAAAFiQAABaAAAAW1AAAFzgAABeEAAAX+AAAGEwAABiwAAAY/AAAGVgAABnEAAAaEAAAGnQAABrQAAAbPAAAG4gAABvUAAAcSAAAHJwAAB0AAAAdTAAAHcAAAB4UAAAeeAAAHsQAAB8gAAAfjAAAH9gAACA8AAAgmAAAIQQAACFQAAAhnAAAIhAAACJcAAAMsdHJhawAAAFx0a2hkAAAAA9WAgl/VgIJfAAAAAgAAAAAAAAf8AAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACsm1kaWEAAAAgbWRoZAAAAADVgIJf1YCCXwAArEQAAWAAVcQAAAAAACdoZGxyAAAAAAAAAABzb3VuAAAAAAAAAAAAAAAAU3RlcmVvAAAAAmNtaW5mAAAAEHNtaGQAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAidzdGJsAAAAZ3N0c2QAAAAAAAAAAQAAAFdtcDRhAAAAAAAAAAEAAAAAAAAAAAACABAAAAAArEQAAAAAADNlc2RzAAAAAAOAgIAiAAIABICAgBRAFQAAAAADDUAAAAAABYCAgAISEAaAgIABAgAAABhzdHRzAAAAAAAAAAEAAABYAAAEAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAUc3RzegAAAAAAAAAGAAAAWAAAAXBzdGNvAAAAAAAAAFgAAAOBAAADhwAAA5oAAAOtAAADswAAA8oAAAPfAAAD5QAAA/gAAAQLAAAEEQAABCgAAAQ9AAAEUAAABFYAAARpAAAEgAAABIYAAASbAAAErgAABLQAAATHAAAE3gAABPMAAAT5AAAFDAAABR8AAAUlAAAFPAAABVEAAAVXAAAFagAABX0AAAWDAAAFmgAABa8AAAXCAAAFyAAABdsAAAXyAAAF+AAABg0AAAYgAAAGJgAABjkAAAZQAAAGZQAABmsAAAZ+AAAGkQAABpcAAAauAAAGwwAABskAAAbcAAAG7wAABwYAAAcMAAAHIQAABzQAAAc6AAAHTQAAB2QAAAdqAAAHfwAAB5IAAAeYAAAHqwAAB8IAAAfXAAAH3QAAB/AAAAgDAAAICQAACCAAAAg1AAAIOwAACE4AAAhhAAAIeAAACH4AAAiRAAAIpAAACKoAAAiwAAAItgAACLwAAAjCAAAAFnVkdGEAAAAObmFtZVN0ZXJlbwAAAHB1ZHRhAAAAaG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAO2lsc3QAAAAzqXRvbwAAACtkYXRhAAAAAQAAAABIYW5kQnJha2UgMC4xMC4yIDIwMTUwNjExMDA=';
          })
             ]);
    });
    });
    var NoSleep$1 = unwrapExports$$1(NoSleep);
    var nextDisplayId = 1000;
    var defaultLeftBounds = [0, 0, 0.5, 1];
    var defaultRightBounds = [0.5, 0, 0.5, 1];
    var raf = window.requestAnimationFrame;
    var caf = window.cancelAnimationFrame;
    function VRFrameData() {
      this.leftProjectionMatrix = new Float32Array(16);
      this.leftViewMatrix = new Float32Array(16);
      this.rightProjectionMatrix = new Float32Array(16);
      this.rightViewMatrix = new Float32Array(16);
      this.pose = null;
    }
    function VRDisplayCapabilities(config) {
      Object.defineProperties(this, {
        hasPosition: {
          writable: false, enumerable: true, value: config.hasPosition
        },
        hasExternalDisplay: {
          writable: false, enumerable: true, value: config.hasExternalDisplay
        },
        canPresent: {
          writable: false, enumerable: true, value: config.canPresent
        },
        maxLayers: {
          writable: false, enumerable: true, value: config.maxLayers
        },
        hasOrientation: {
          enumerable: true, get: function get() {
            deprecateWarning('VRDisplayCapabilities.prototype.hasOrientation', 'VRDisplay.prototype.getFrameData');
            return config.hasOrientation;
          }
        }
      });
    }
    function VRDisplay(config) {
      config = config || {};
      var USE_WAKELOCK = 'wakelock' in config ? config.wakelock : true;
      this.isPolyfilled = true;
      this.displayId = nextDisplayId++;
      this.displayName = '';
      this.depthNear = 0.01;
      this.depthFar = 10000.0;
      this.isPresenting = false;
      Object.defineProperty(this, 'isConnected', {
        get: function get() {
          deprecateWarning('VRDisplay.prototype.isConnected', 'VRDisplayCapabilities.prototype.hasExternalDisplay');
          return false;
        }
      });
      this.capabilities = new VRDisplayCapabilities({
        hasPosition: false,
        hasOrientation: false,
        hasExternalDisplay: false,
        canPresent: false,
        maxLayers: 1
      });
      this.stageParameters = null;
      this.waitingForPresent_ = false;
      this.layer_ = null;
      this.originalParent_ = null;
      this.fullscreenElement_ = null;
      this.fullscreenWrapper_ = null;
      this.fullscreenElementCachedStyle_ = null;
      this.fullscreenEventTarget_ = null;
      this.fullscreenChangeHandler_ = null;
      this.fullscreenErrorHandler_ = null;
      if (USE_WAKELOCK && isMobile()) {
        this.wakelock_ = new NoSleep$1();
      }
    }
    VRDisplay.prototype.getFrameData = function (frameData) {
      return frameDataFromPose(frameData, this._getPose(), this);
    };
    VRDisplay.prototype.getPose = function () {
      deprecateWarning('VRDisplay.prototype.getPose', 'VRDisplay.prototype.getFrameData');
      return this._getPose();
    };
    VRDisplay.prototype.resetPose = function () {
      deprecateWarning('VRDisplay.prototype.resetPose');
      return this._resetPose();
    };
    VRDisplay.prototype.getImmediatePose = function () {
      deprecateWarning('VRDisplay.prototype.getImmediatePose', 'VRDisplay.prototype.getFrameData');
      return this._getPose();
    };
    VRDisplay.prototype.requestAnimationFrame = function (callback) {
      return raf(callback);
    };
    VRDisplay.prototype.cancelAnimationFrame = function (id) {
      return caf(id);
    };
    VRDisplay.prototype.wrapForFullscreen = function (element) {
      if (isIOS()) {
        return element;
      }
      if (!this.fullscreenWrapper_) {
        this.fullscreenWrapper_ = document.createElement('div');
        var cssProperties = ['height: ' + Math.min(screen.height, screen.width) + 'px !important', 'top: 0 !important', 'left: 0 !important', 'right: 0 !important', 'border: 0', 'margin: 0', 'padding: 0', 'z-index: 999999 !important', 'position: fixed'];
        this.fullscreenWrapper_.setAttribute('style', cssProperties.join('; ') + ';');
        this.fullscreenWrapper_.classList.add('webvr-polyfill-fullscreen-wrapper');
      }
      if (this.fullscreenElement_ == element) {
        return this.fullscreenWrapper_;
      }
      if (this.fullscreenElement_) {
        if (this.originalParent_) {
          this.originalParent_.appendChild(this.fullscreenElement_);
        } else {
          this.fullscreenElement_.parentElement.removeChild(this.fullscreenElement_);
        }
      }
      this.fullscreenElement_ = element;
      this.originalParent_ = element.parentElement;
      if (!this.originalParent_) {
        document.body.appendChild(element);
      }
      if (!this.fullscreenWrapper_.parentElement) {
        var parent = this.fullscreenElement_.parentElement;
        parent.insertBefore(this.fullscreenWrapper_, this.fullscreenElement_);
        parent.removeChild(this.fullscreenElement_);
      }
      this.fullscreenWrapper_.insertBefore(this.fullscreenElement_, this.fullscreenWrapper_.firstChild);
      this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute('style');
      var self = this;
      function applyFullscreenElementStyle() {
        if (!self.fullscreenElement_) {
          return;
        }
        var cssProperties = ['position: absolute', 'top: 0', 'left: 0', 'width: ' + Math.max(screen.width, screen.height) + 'px', 'height: ' + Math.min(screen.height, screen.width) + 'px', 'border: 0', 'margin: 0', 'padding: 0'];
        self.fullscreenElement_.setAttribute('style', cssProperties.join('; ') + ';');
      }
      applyFullscreenElementStyle();
      return this.fullscreenWrapper_;
    };
    VRDisplay.prototype.removeFullscreenWrapper = function () {
      if (!this.fullscreenElement_) {
        return;
      }
      var element = this.fullscreenElement_;
      if (this.fullscreenElementCachedStyle_) {
        element.setAttribute('style', this.fullscreenElementCachedStyle_);
      } else {
        element.removeAttribute('style');
      }
      this.fullscreenElement_ = null;
      this.fullscreenElementCachedStyle_ = null;
      var parent = this.fullscreenWrapper_.parentElement;
      this.fullscreenWrapper_.removeChild(element);
      if (this.originalParent_ === parent) {
        parent.insertBefore(element, this.fullscreenWrapper_);
      }
      else if (this.originalParent_) {
          this.originalParent_.appendChild(element);
        }
      parent.removeChild(this.fullscreenWrapper_);
      return element;
    };
    VRDisplay.prototype.requestPresent = function (layers) {
      var wasPresenting = this.isPresenting;
      var self = this;
      if (!(layers instanceof Array)) {
        deprecateWarning('VRDisplay.prototype.requestPresent with non-array argument', 'an array of VRLayers as the first argument');
        layers = [layers];
      }
      return new Promise(function (resolve, reject) {
        if (!self.capabilities.canPresent) {
          reject(new Error('VRDisplay is not capable of presenting.'));
          return;
        }
        if (layers.length == 0 || layers.length > self.capabilities.maxLayers) {
          reject(new Error('Invalid number of layers.'));
          return;
        }
        var incomingLayer = layers[0];
        if (!incomingLayer.source) {
          resolve();
          return;
        }
        var leftBounds = incomingLayer.leftBounds || defaultLeftBounds;
        var rightBounds = incomingLayer.rightBounds || defaultRightBounds;
        if (wasPresenting) {
          var layer = self.layer_;
          if (layer.source !== incomingLayer.source) {
            layer.source = incomingLayer.source;
          }
          for (var i = 0; i < 4; i++) {
            layer.leftBounds[i] = leftBounds[i];
            layer.rightBounds[i] = rightBounds[i];
          }
          self.wrapForFullscreen(self.layer_.source);
          self.updatePresent_();
          resolve();
          return;
        }
        self.layer_ = {
          predistorted: incomingLayer.predistorted,
          source: incomingLayer.source,
          leftBounds: leftBounds.slice(0),
          rightBounds: rightBounds.slice(0)
        };
        self.waitingForPresent_ = false;
        if (self.layer_ && self.layer_.source) {
          var fullscreenElement = self.wrapForFullscreen(self.layer_.source);
          var onFullscreenChange = function onFullscreenChange() {
            var actualFullscreenElement = getFullscreenElement();
            self.isPresenting = fullscreenElement === actualFullscreenElement;
            if (self.isPresenting) {
              if (screen.orientation && screen.orientation.lock) {
                screen.orientation.lock('landscape-primary').catch(function (error) {
                  console.error('screen.orientation.lock() failed due to', error.message);
                });
              }
              self.waitingForPresent_ = false;
              self.beginPresent_();
              resolve();
            } else {
              if (screen.orientation && screen.orientation.unlock) {
                screen.orientation.unlock();
              }
              self.removeFullscreenWrapper();
              self.disableWakeLock();
              self.endPresent_();
              self.removeFullscreenListeners_();
            }
            self.fireVRDisplayPresentChange_();
          };
          var onFullscreenError = function onFullscreenError() {
            if (!self.waitingForPresent_) {
              return;
            }
            self.removeFullscreenWrapper();
            self.removeFullscreenListeners_();
            self.disableWakeLock();
            self.waitingForPresent_ = false;
            self.isPresenting = false;
            reject(new Error('Unable to present.'));
          };
          self.addFullscreenListeners_(fullscreenElement, onFullscreenChange, onFullscreenError);
          if (requestFullscreen(fullscreenElement)) {
            self.enableWakeLock();
            self.waitingForPresent_ = true;
          } else if (isIOS() || isWebViewAndroid()) {
            self.enableWakeLock();
            self.isPresenting = true;
            self.beginPresent_();
            self.fireVRDisplayPresentChange_();
            resolve();
          }
        }
        if (!self.waitingForPresent_ && !isIOS()) {
          exitFullscreen();
          reject(new Error('Unable to present.'));
        }
      });
    };
    VRDisplay.prototype.exitPresent = function () {
      var wasPresenting = this.isPresenting;
      var self = this;
      this.isPresenting = false;
      this.layer_ = null;
      this.disableWakeLock();
      return new Promise(function (resolve, reject) {
        if (wasPresenting) {
          if (!exitFullscreen() && isIOS()) {
            self.endPresent_();
            self.fireVRDisplayPresentChange_();
          }
          if (isWebViewAndroid()) {
            self.removeFullscreenWrapper();
            self.removeFullscreenListeners_();
            self.endPresent_();
            self.fireVRDisplayPresentChange_();
          }
          resolve();
        } else {
          reject(new Error('Was not presenting to VRDisplay.'));
        }
      });
    };
    VRDisplay.prototype.getLayers = function () {
      if (this.layer_) {
        return [this.layer_];
      }
      return [];
    };
    VRDisplay.prototype.fireVRDisplayPresentChange_ = function () {
      var event = new CustomEvent('vrdisplaypresentchange', { detail: { display: this } });
      window.dispatchEvent(event);
    };
    VRDisplay.prototype.fireVRDisplayConnect_ = function () {
      var event = new CustomEvent('vrdisplayconnect', { detail: { display: this } });
      window.dispatchEvent(event);
    };
    VRDisplay.prototype.addFullscreenListeners_ = function (element, changeHandler, errorHandler) {
      this.removeFullscreenListeners_();
      this.fullscreenEventTarget_ = element;
      this.fullscreenChangeHandler_ = changeHandler;
      this.fullscreenErrorHandler_ = errorHandler;
      if (changeHandler) {
        if (document.fullscreenEnabled) {
          element.addEventListener('fullscreenchange', changeHandler, false);
        } else if (document.webkitFullscreenEnabled) {
          element.addEventListener('webkitfullscreenchange', changeHandler, false);
        } else if (document.mozFullScreenEnabled) {
          document.addEventListener('mozfullscreenchange', changeHandler, false);
        } else if (document.msFullscreenEnabled) {
          element.addEventListener('msfullscreenchange', changeHandler, false);
        }
      }
      if (errorHandler) {
        if (document.fullscreenEnabled) {
          element.addEventListener('fullscreenerror', errorHandler, false);
        } else if (document.webkitFullscreenEnabled) {
          element.addEventListener('webkitfullscreenerror', errorHandler, false);
        } else if (document.mozFullScreenEnabled) {
          document.addEventListener('mozfullscreenerror', errorHandler, false);
        } else if (document.msFullscreenEnabled) {
          element.addEventListener('msfullscreenerror', errorHandler, false);
        }
      }
    };
    VRDisplay.prototype.removeFullscreenListeners_ = function () {
      if (!this.fullscreenEventTarget_) return;
      var element = this.fullscreenEventTarget_;
      if (this.fullscreenChangeHandler_) {
        var changeHandler = this.fullscreenChangeHandler_;
        element.removeEventListener('fullscreenchange', changeHandler, false);
        element.removeEventListener('webkitfullscreenchange', changeHandler, false);
        document.removeEventListener('mozfullscreenchange', changeHandler, false);
        element.removeEventListener('msfullscreenchange', changeHandler, false);
      }
      if (this.fullscreenErrorHandler_) {
        var errorHandler = this.fullscreenErrorHandler_;
        element.removeEventListener('fullscreenerror', errorHandler, false);
        element.removeEventListener('webkitfullscreenerror', errorHandler, false);
        document.removeEventListener('mozfullscreenerror', errorHandler, false);
        element.removeEventListener('msfullscreenerror', errorHandler, false);
      }
      this.fullscreenEventTarget_ = null;
      this.fullscreenChangeHandler_ = null;
      this.fullscreenErrorHandler_ = null;
    };
    VRDisplay.prototype.enableWakeLock = function () {
      if (this.wakelock_) {
        this.wakelock_.enable();
      }
    };
    VRDisplay.prototype.disableWakeLock = function () {
      if (this.wakelock_) {
        this.wakelock_.disable();
      }
    };
    VRDisplay.prototype.beginPresent_ = function () {
    };
    VRDisplay.prototype.endPresent_ = function () {
    };
    VRDisplay.prototype.submitFrame = function (pose) {
    };
    VRDisplay.prototype.getEyeParameters = function (whichEye) {
      return null;
    };
    var config = {
      ADDITIONAL_VIEWERS: [],
      DEFAULT_VIEWER: '',
      MOBILE_WAKE_LOCK: true,
      DEBUG: false,
      DPDB_URL: 'https://dpdb.webvr.rocks/dpdb.json',
      K_FILTER: 0.98,
      PREDICTION_TIME_S: 0.040,
      CARDBOARD_UI_DISABLED: false,
      ROTATE_INSTRUCTIONS_DISABLED: false,
      YAW_ONLY: false,
      BUFFER_SCALE: 0.5,
      DIRTY_SUBMIT_FRAME_BINDINGS: false
    };
    var Eye = {
      LEFT: 'left',
      RIGHT: 'right'
    };
    function CardboardVRDisplay(config$$1) {
      var defaults = extend({}, config);
      config$$1 = extend(defaults, config$$1 || {});
      VRDisplay.call(this, {
        wakelock: config$$1.MOBILE_WAKE_LOCK
      });
      this.config = config$$1;
      this.displayName = 'Cardboard VRDisplay';
      this.capabilities = new VRDisplayCapabilities({
        hasPosition: false,
        hasOrientation: true,
        hasExternalDisplay: false,
        canPresent: true,
        maxLayers: 1
      });
      this.stageParameters = null;
      this.bufferScale_ = this.config.BUFFER_SCALE;
      this.poseSensor_ = new PoseSensor(this.config);
      this.distorter_ = null;
      this.cardboardUI_ = null;
      this.dpdb_ = new Dpdb(this.config.DPDB_URL, this.onDeviceParamsUpdated_.bind(this));
      this.deviceInfo_ = new DeviceInfo(this.dpdb_.getDeviceParams(), config$$1.ADDITIONAL_VIEWERS);
      this.viewerSelector_ = new ViewerSelector(config$$1.DEFAULT_VIEWER);
      this.viewerSelector_.onChange(this.onViewerChanged_.bind(this));
      this.deviceInfo_.setViewer(this.viewerSelector_.getCurrentViewer());
      if (!this.config.ROTATE_INSTRUCTIONS_DISABLED) {
        this.rotateInstructions_ = new RotateInstructions();
      }
      if (isIOS()) {
        window.addEventListener('resize', this.onResize_.bind(this));
      }
    }
    CardboardVRDisplay.prototype = Object.create(VRDisplay.prototype);
    CardboardVRDisplay.prototype._getPose = function () {
      return {
        position: null,
        orientation: this.poseSensor_.getOrientation(),
        linearVelocity: null,
        linearAcceleration: null,
        angularVelocity: null,
        angularAcceleration: null
      };
    };
    CardboardVRDisplay.prototype._resetPose = function () {
      if (this.poseSensor_.resetPose) {
        this.poseSensor_.resetPose();
      }
    };
    CardboardVRDisplay.prototype._getFieldOfView = function (whichEye) {
      var fieldOfView;
      if (whichEye == Eye.LEFT) {
        fieldOfView = this.deviceInfo_.getFieldOfViewLeftEye();
      } else if (whichEye == Eye.RIGHT) {
        fieldOfView = this.deviceInfo_.getFieldOfViewRightEye();
      } else {
        console.error('Invalid eye provided: %s', whichEye);
        return null;
      }
      return fieldOfView;
    };
    CardboardVRDisplay.prototype._getEyeOffset = function (whichEye) {
      var offset;
      if (whichEye == Eye.LEFT) {
        offset = [-this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
      } else if (whichEye == Eye.RIGHT) {
        offset = [this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
      } else {
        console.error('Invalid eye provided: %s', whichEye);
        return null;
      }
      return offset;
    };
    CardboardVRDisplay.prototype.getEyeParameters = function (whichEye) {
      var offset = this._getEyeOffset(whichEye);
      var fieldOfView = this._getFieldOfView(whichEye);
      var eyeParams = {
        offset: offset,
        renderWidth: this.deviceInfo_.device.width * 0.5 * this.bufferScale_,
        renderHeight: this.deviceInfo_.device.height * this.bufferScale_
      };
      Object.defineProperty(eyeParams, 'fieldOfView', {
        enumerable: true,
        get: function get() {
          deprecateWarning('VRFieldOfView', 'VRFrameData\'s projection matrices');
          return fieldOfView;
        }
      });
      return eyeParams;
    };
    CardboardVRDisplay.prototype.onDeviceParamsUpdated_ = function (newParams) {
      if (this.config.DEBUG) {
        console.log('DPDB reported that device params were updated.');
      }
      this.deviceInfo_.updateDeviceParams(newParams);
      if (this.distorter_) {
        this.distorter_.updateDeviceInfo(this.deviceInfo_);
      }
    };
    CardboardVRDisplay.prototype.updateBounds_ = function () {
      if (this.layer_ && this.distorter_ && (this.layer_.leftBounds || this.layer_.rightBounds)) {
        this.distorter_.setTextureBounds(this.layer_.leftBounds, this.layer_.rightBounds);
      }
    };
    CardboardVRDisplay.prototype.beginPresent_ = function () {
      var gl = this.layer_.source.getContext('webgl');
      if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
      if (!gl) gl = this.layer_.source.getContext('webgl2');
      if (!gl) return;
      if (this.layer_.predistorted) {
        if (!this.config.CARDBOARD_UI_DISABLED) {
          gl.canvas.width = getScreenWidth() * this.bufferScale_;
          gl.canvas.height = getScreenHeight() * this.bufferScale_;
          this.cardboardUI_ = new CardboardUI(gl);
        }
      } else {
        if (!this.config.CARDBOARD_UI_DISABLED) {
          this.cardboardUI_ = new CardboardUI(gl);
        }
        this.distorter_ = new CardboardDistorter(gl, this.cardboardUI_, this.config.BUFFER_SCALE, this.config.DIRTY_SUBMIT_FRAME_BINDINGS);
        this.distorter_.updateDeviceInfo(this.deviceInfo_);
      }
      if (this.cardboardUI_) {
        this.cardboardUI_.listen(function (e) {
          this.viewerSelector_.show(this.layer_.source.parentElement);
          e.stopPropagation();
          e.preventDefault();
        }.bind(this), function (e) {
          this.exitPresent();
          e.stopPropagation();
          e.preventDefault();
        }.bind(this));
      }
      if (this.rotateInstructions_) {
        if (isLandscapeMode() && isMobile()) {
          this.rotateInstructions_.showTemporarily(3000, this.layer_.source.parentElement);
        } else {
          this.rotateInstructions_.update();
        }
      }
      this.orientationHandler = this.onOrientationChange_.bind(this);
      window.addEventListener('orientationchange', this.orientationHandler);
      this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(this);
      window.addEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);
      this.fireVRDisplayDeviceParamsChange_();
    };
    CardboardVRDisplay.prototype.endPresent_ = function () {
      if (this.distorter_) {
        this.distorter_.destroy();
        this.distorter_ = null;
      }
      if (this.cardboardUI_) {
        this.cardboardUI_.destroy();
        this.cardboardUI_ = null;
      }
      if (this.rotateInstructions_) {
        this.rotateInstructions_.hide();
      }
      this.viewerSelector_.hide();
      window.removeEventListener('orientationchange', this.orientationHandler);
      window.removeEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);
    };
    CardboardVRDisplay.prototype.updatePresent_ = function () {
      this.endPresent_();
      this.beginPresent_();
    };
    CardboardVRDisplay.prototype.submitFrame = function (pose) {
      if (this.distorter_) {
        this.updateBounds_();
        this.distorter_.submitFrame();
      } else if (this.cardboardUI_ && this.layer_) {
        var gl = this.layer_.source.getContext('webgl');
        if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
        if (!gl) gl = this.layer_.source.getContext('webgl2');
        var canvas = gl.canvas;
        if (canvas.width != this.lastWidth || canvas.height != this.lastHeight) {
          this.cardboardUI_.onResize();
        }
        this.lastWidth = canvas.width;
        this.lastHeight = canvas.height;
        this.cardboardUI_.render();
      }
    };
    CardboardVRDisplay.prototype.onOrientationChange_ = function (e) {
      this.viewerSelector_.hide();
      if (this.rotateInstructions_) {
        this.rotateInstructions_.update();
      }
      this.onResize_();
    };
    CardboardVRDisplay.prototype.onResize_ = function (e) {
      if (this.layer_) {
        var gl = this.layer_.source.getContext('webgl');
        if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
        if (!gl) gl = this.layer_.source.getContext('webgl2');
        var cssProperties = ['position: absolute', 'top: 0', 'left: 0',
        'width: 100vw', 'height: 100vh', 'border: 0', 'margin: 0',
        'padding: 0px', 'box-sizing: content-box'];
        gl.canvas.setAttribute('style', cssProperties.join('; ') + ';');
        safariCssSizeWorkaround(gl.canvas);
      }
    };
    CardboardVRDisplay.prototype.onViewerChanged_ = function (viewer) {
      this.deviceInfo_.setViewer(viewer);
      if (this.distorter_) {
        this.distorter_.updateDeviceInfo(this.deviceInfo_);
      }
      this.fireVRDisplayDeviceParamsChange_();
    };
    CardboardVRDisplay.prototype.fireVRDisplayDeviceParamsChange_ = function () {
      var event = new CustomEvent('vrdisplaydeviceparamschange', {
        detail: {
          vrdisplay: this,
          deviceInfo: this.deviceInfo_
        }
      });
      window.dispatchEvent(event);
    };
    CardboardVRDisplay.VRFrameData = VRFrameData;
    CardboardVRDisplay.VRDisplay = VRDisplay;
    return CardboardVRDisplay;
    })));
    });
    var CardboardVRDisplay = unwrapExports(cardboardVrDisplay);

    class XRDevice extends EventTarget {
      constructor(global) {
        super();
        this.global = global;
        this.onWindowResize = this.onWindowResize.bind(this);
        this.global.window.addEventListener('resize', this.onWindowResize);
        this.environmentBlendMode = 'opaque';
      }
      onBaseLayerSet(sessionId, layer) { throw new Error('Not implemented'); }
      isSessionSupported(mode) { throw new Error('Not implemented'); }
      isFeatureSupported(featureDescriptor) { throw new Error('Not implemented'); }
      async requestSession(mode, enabledFeatures) { throw new Error('Not implemented'); }
      requestAnimationFrame(callback) { throw new Error('Not implemented'); }
      onFrameStart(sessionId) { throw new Error('Not implemented'); }
      onFrameEnd(sessionId) { throw new Error('Not implemented'); }
      doesSessionSupportReferenceSpace(sessionId, type) { throw new Error('Not implemented'); }
      requestStageBounds() { throw new Error('Not implemented'); }
      async requestFrameOfReferenceTransform(type, options) {
        return undefined;
      }
      cancelAnimationFrame(handle) { throw new Error('Not implemented'); }
      endSession(sessionId) { throw new Error('Not implemented'); }
      getViewport(sessionId, eye, layer, target) { throw new Error('Not implemented'); }
      getProjectionMatrix(eye) { throw new Error('Not implemented'); }
      getBasePoseMatrix() { throw new Error('Not implemented'); }
      getBaseViewMatrix(eye) { throw new Error('Not implemented'); }
      getInputSources() { throw new Error('Not implemented'); }
      getInputPose(inputSource, coordinateSystem, poseType) { throw new Error('Not implemented'); }
      onWindowResize() {
        this.onWindowResize();
      }
    }

    let daydream = {
      mapping: '',
      profiles: ['google-daydream', 'generic-trigger-touchpad'],
      buttons: {
        length: 3,
        0: null,
        1: null,
        2: 0
      },
    };
    let viveFocus = {
      mapping: 'xr-standard',
      profiles: ['htc-vive-focus', 'generic-trigger-touchpad'],
      buttons: {
        length: 3,
        0: 1,
        1: null,
        2: 0
      },
    };
    let oculusGo = {
      mapping: 'xr-standard',
      profiles: ['oculus-go', 'generic-trigger-touchpad'],
      buttons: {
        length: 3,
        0: 1,
        1: null,
        2: 0
      },
      gripTransform: {
        orientation: [Math.PI * 0.11, 0, 0, 1]
      }
    };
    let oculusTouch = {
      mapping: 'xr-standard',
      displayProfiles: {
        'Oculus Quest': ['oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick']
      },
      profiles: ['oculus-touch', 'generic-trigger-squeeze-thumbstick'],
      axes: {
        length: 4,
        0: null,
        1: null,
        2: 0,
        3: 1
      },
      buttons: {
        length: 7,
        0: 1,
        1: 2,
        2: null,
        3: 0,
        4: 3,
        5: 4,
        6: null
      },
      gripTransform: {
        position: [0, -0.02, 0.04, 1],
        orientation: [Math.PI * 0.11, 0, 0, 1]
      }
    };
    let openVr = {
      mapping: 'xr-standard',
      profiles: ['htc-vive', 'generic-trigger-squeeze-touchpad'],
      displayProfiles: {
        'HTC Vive': ['htc-vive', 'generic-trigger-squeeze-touchpad'],
        'HTC Vive DVT': ['htc-vive', 'generic-trigger-squeeze-touchpad'],
        'Valve Index': ['valve-index', 'generic-trigger-squeeze-touchpad-thumbstick']
      },
      buttons: {
        length: 3,
        0: 1,
        1: 2,
        2: 0
      },
      gripTransform: {
        position: [0, 0, 0.05, 1],
      },
      targetRayTransform: {
        orientation: [Math.PI * -0.08, 0, 0, 1]
      },
      userAgentOverrides: {
        "Firefox": {
          axes: {
            invert: [1, 3]
          }
        }
      }
    };
    let samsungGearVR = {
      mapping: 'xr-standard',
      profiles: ['samsung-gearvr', 'generic-trigger-touchpad'],
      buttons: {
        length: 3,
        0: 1,
        1: null,
        2: 0
      },
      gripTransform: {
        orientation: [Math.PI * 0.11, 0, 0, 1]
      }
    };
    let samsungOdyssey = {
      mapping: 'xr-standard',
      profiles: ['samsung-odyssey', 'microsoft-mixed-reality', 'generic-trigger-squeeze-touchpad-thumbstick'],
      buttons: {
        length: 4,
        0: 1,
        1: 0,
        2: 2,
        3: 4,
      },
      gripTransform: {
        position: [0, -0.02, 0.04, 1],
        orientation: [Math.PI * 0.11, 0, 0, 1]
      }
    };
    let windowsMixedReality = {
      mapping: 'xr-standard',
      profiles: ['microsoft-mixed-reality', 'generic-trigger-squeeze-touchpad-thumbstick'],
      buttons: {
        length: 4,
        0: 1,
        1: 0,
        2: 2,
        3: 4,
      },
      gripTransform: {
        position: [0, -0.02, 0.04, 1],
        orientation: [Math.PI * 0.11, 0, 0, 1]
      }
    };
    let GamepadMappings = {
      'Daydream Controller': daydream,
      'Gear VR Controller': samsungGearVR,
      'HTC Vive Focus Controller': viveFocus,
      'Oculus Go Controller': oculusGo,
      'Oculus Touch (Right)': oculusTouch,
      'Oculus Touch (Left)': oculusTouch,
      'OpenVR Gamepad': openVr,
      'Spatial Controller (Spatial Interaction Source) 045E-065A': windowsMixedReality,
      'Spatial Controller (Spatial Interaction Source) 045E-065D': samsungOdyssey,
      'Windows Mixed Reality (Right)': windowsMixedReality,
      'Windows Mixed Reality (Left)': windowsMixedReality,
    };

    const HEAD_ELBOW_OFFSET_RIGHTHANDED = fromValues$1(0.155, -0.465, -0.15);
    const HEAD_ELBOW_OFFSET_LEFTHANDED = fromValues$1(-0.155, -0.465, -0.15);
    const ELBOW_WRIST_OFFSET = fromValues$1(0, 0, -0.25);
    const WRIST_CONTROLLER_OFFSET = fromValues$1(0, 0, 0.05);
    const ARM_EXTENSION_OFFSET = fromValues$1(-0.08, 0.14, 0.08);
    const ELBOW_BEND_RATIO = 0.4;
    const EXTENSION_RATIO_WEIGHT = 0.4;
    const MIN_ANGULAR_SPEED = 0.61;
    const MIN_ANGLE_DELTA = 0.175;
    const MIN_EXTENSION_COS = 0.12;
    const MAX_EXTENSION_COS = 0.87;
    const RAD_TO_DEG = 180 / Math.PI;
    function eulerFromQuaternion(out, q, order) {
      function clamp(value, min$$1, max$$1) {
        return (value < min$$1 ? min$$1 : (value > max$$1 ? max$$1 : value));
      }
      var sqx = q[0] * q[0];
      var sqy = q[1] * q[1];
      var sqz = q[2] * q[2];
      var sqw = q[3] * q[3];
      {
        out[0] = Math.asin(  clamp( 2 * ( q[0] * q[3] - q[1] * q[2] ), -1, 1 ) );
        out[1] = Math.atan2( 2 * ( q[0] * q[2] + q[1] * q[3] ), ( sqw - sqx - sqy + sqz ) );
        out[2] = Math.atan2( 2 * ( q[0] * q[1] + q[2] * q[3] ), ( sqw - sqx + sqy - sqz ) );
      }
    }
    class OrientationArmModel {
      constructor() {
        this.hand = 'right';
        this.headElbowOffset = HEAD_ELBOW_OFFSET_RIGHTHANDED;
        this.controllerQ = create$4();
        this.lastControllerQ = create$4();
        this.headQ = create$4();
        this.headPos = create$1();
        this.elbowPos = create$1();
        this.wristPos = create$1();
        this.time = null;
        this.lastTime = null;
        this.rootQ = create$4();
        this.position = create$1();
      }
      setHandedness(hand) {
        if (this.hand != hand) {
          this.hand = hand;
          if (this.hand == 'left') {
            this.headElbowOffset = HEAD_ELBOW_OFFSET_LEFTHANDED;
          } else {
            this.headElbowOffset = HEAD_ELBOW_OFFSET_RIGHTHANDED;
          }
        }
      }
      update(controllerOrientation, headPoseMatrix) {
        this.time = now$1();
        if (controllerOrientation) {
          copy$4(this.lastControllerQ, this.controllerQ);
          copy$4(this.controllerQ, controllerOrientation);
        }
        if (headPoseMatrix) {
          getTranslation(this.headPos, headPoseMatrix);
          getRotation(this.headQ, headPoseMatrix);
        }
        let headYawQ = this.getHeadYawOrientation_();
        let angleDelta = this.quatAngle_(this.lastControllerQ, this.controllerQ);
        let timeDelta = (this.time - this.lastTime) / 1000;
        let controllerAngularSpeed = angleDelta / timeDelta;
        if (controllerAngularSpeed > MIN_ANGULAR_SPEED) {
          slerp(this.rootQ, this.rootQ, headYawQ,
                     Math.min(angleDelta / MIN_ANGLE_DELTA, 1.0));
        } else {
          copy$4(this.rootQ, headYawQ);
        }
        let controllerForward = fromValues$1(0, 0, -1);
        transformQuat(controllerForward, controllerForward, this.controllerQ);
        let controllerDotY = dot(controllerForward, [0, 1, 0]);
        let extensionRatio = this.clamp_(
            (controllerDotY - MIN_EXTENSION_COS) / MAX_EXTENSION_COS, 0.0, 1.0);
        let controllerCameraQ = clone$4(this.rootQ);
        invert$2(controllerCameraQ, controllerCameraQ);
        multiply$4(controllerCameraQ, controllerCameraQ, this.controllerQ);
        let elbowPos = this.elbowPos;
        copy$1(elbowPos, this.headPos);
        add$1(elbowPos, elbowPos, this.headElbowOffset);
        let elbowOffset = clone$1(ARM_EXTENSION_OFFSET);
        scale$1(elbowOffset, elbowOffset, extensionRatio);
        add$1(elbowPos, elbowPos, elbowOffset);
        let totalAngle = this.quatAngle_(controllerCameraQ, create$4());
        let totalAngleDeg = totalAngle * RAD_TO_DEG;
        let lerpSuppression = 1 - Math.pow(totalAngleDeg / 180, 4);let elbowRatio = ELBOW_BEND_RATIO;
        let wristRatio = 1 - ELBOW_BEND_RATIO;
        let lerpValue = lerpSuppression *
            (elbowRatio + wristRatio * extensionRatio * EXTENSION_RATIO_WEIGHT);
        let wristQ = create$4();
        slerp(wristQ, wristQ, controllerCameraQ, lerpValue);
        let invWristQ = invert$2(create$4(), wristQ);
        let elbowQ = clone$4(controllerCameraQ);
        multiply$4(elbowQ, elbowQ, invWristQ);
        let wristPos = this.wristPos;
        copy$1(wristPos, WRIST_CONTROLLER_OFFSET);
        transformQuat(wristPos, wristPos, wristQ);
        add$1(wristPos, wristPos, ELBOW_WRIST_OFFSET);
        transformQuat(wristPos, wristPos, elbowQ);
        add$1(wristPos, wristPos, elbowPos);
        let offset = clone$1(ARM_EXTENSION_OFFSET);
        scale$1(offset, offset, extensionRatio);
        add$1(this.position, this.wristPos, offset);
        transformQuat(this.position, this.position, this.rootQ);
        this.lastTime = this.time;
      }
      getPosition() {
        return this.position;
      }
      getHeadYawOrientation_() {
        let headEuler = create$1();
        eulerFromQuaternion(headEuler, this.headQ);
        let destinationQ = fromEuler(create$4(), 0, headEuler[1] * RAD_TO_DEG, 0);
        return destinationQ;
      }
      clamp_(value, min$$1, max$$1) {
        return Math.min(Math.max(value, min$$1), max$$1);
      }
      quatAngle_(q1, q2) {
        let vec1 = [0, 0, -1];
        let vec2 = [0, 0, -1];
        transformQuat(vec1, vec1, q1);
        transformQuat(vec2, vec2, q2);
        return angle(vec1, vec2);
      }
    }

    const PRIVATE$18 = Symbol('@@webxr-polyfill/XRRemappedGamepad');
    const PLACEHOLDER_BUTTON = { pressed: false, touched: false, value: 0.0 };
    Object.freeze(PLACEHOLDER_BUTTON);
    class XRRemappedGamepad {
      constructor(gamepad, display, map) {
        if (!map) {
          map = {};
        }
        if (map.userAgentOverrides) {
          for (let agent in map.userAgentOverrides) {
            if (navigator.userAgent.includes(agent)) {
              let override = map.userAgentOverrides[agent];
              for (let key in override) {
                if (key in map) {
                  Object.assign(map[key], override[key]);
                } else {
                  map[key] = override[key];
                }
              }
              break;
            }
          }
        }
        let axes = new Array(map.axes && map.axes.length ? map.axes.length : gamepad.axes.length);
        let buttons = new Array(map.buttons && map.buttons.length ? map.buttons.length : gamepad.buttons.length);
        let gripTransform = null;
        if (map.gripTransform) {
          let orientation = map.gripTransform.orientation || [0, 0, 0, 1];
          gripTransform = create();
          fromRotationTranslation(
            gripTransform,
            normalize$2(orientation, orientation),
            map.gripTransform.position || [0, 0, 0]
          );
        }
        let targetRayTransform = null;
        if (map.targetRayTransform) {
          let orientation =  map.targetRayTransform.orientation || [0, 0, 0, 1];
          targetRayTransform = create();
          fromRotationTranslation(
            targetRayTransform,
            normalize$2(orientation, orientation),
            map.targetRayTransform.position || [0, 0, 0]
          );
        }
        let profiles = map.profiles;
        if (map.displayProfiles) {
          if (display.displayName in map.displayProfiles) {
            profiles = map.displayProfiles[display.displayName];
          }
        }
        this[PRIVATE$18] = {
          gamepad,
          map,
          profiles: profiles || [gamepad.id],
          mapping: map.mapping || gamepad.mapping,
          axes,
          buttons,
          gripTransform,
          targetRayTransform,
        };
        this._update();
      }
      _update() {
        let gamepad = this[PRIVATE$18].gamepad;
        let map = this[PRIVATE$18].map;
        let axes = this[PRIVATE$18].axes;
        for (let i = 0; i < axes.length; ++i) {
          if (map.axes && i in map.axes) {
            if (map.axes[i] === null) {
              axes[i] = 0;
            } else {
              axes[i] = gamepad.axes[map.axes[i]];
            }
          } else {
            axes[i] = gamepad.axes[i];
          }
        }
        if (map.axes && map.axes.invert) {
          for (let axis of map.axes.invert) {
            if (axis < axes.length) {
              axes[axis] *= -1;
            }
          }
        }
        let buttons = this[PRIVATE$18].buttons;
        for (let i = 0; i < buttons.length; ++i) {
          if (map.buttons && i in map.buttons) {
            if (map.buttons[i] === null) {
              buttons[i] = PLACEHOLDER_BUTTON;
            } else {
              buttons[i] = gamepad.buttons[map.buttons[i]];
            }
          } else {
            buttons[i] = gamepad.buttons[i];
          }
        }
      }
      get id() {
        return '';
      }
      get _profiles() {
        return this[PRIVATE$18].profiles;
      }
      get index() {
        return -1;
      }
      get connected() {
        return this[PRIVATE$18].gamepad.connected;
      }
      get timestamp() {
        return this[PRIVATE$18].gamepad.timestamp;
      }
      get mapping() {
        return this[PRIVATE$18].mapping;
      }
      get axes() {
        return this[PRIVATE$18].axes;
      }
      get buttons() {
        return this[PRIVATE$18].buttons;
      }
      get hapticActuators() {
        return this[PRIVATE$18].gamepad.hapticActuators;
      }
    }
    class GamepadXRInputSource {
      constructor(polyfill, display, primaryButtonIndex = 0, primarySqueezeButtonIndex = -1) {
        this.polyfill = polyfill;
        this.display = display;
        this.nativeGamepad = null;
        this.gamepad = null;
        this.inputSource = new XRInputSource(this);
        this.lastPosition = create$1();
        this.emulatedPosition = false;
        this.basePoseMatrix = create();
        this.outputMatrix = create();
        this.primaryButtonIndex = primaryButtonIndex;
        this.primaryActionPressed = false;
        this.primarySqueezeButtonIndex = primarySqueezeButtonIndex;
        this.primarySqueezeActionPressed = false;
        this.handedness = '';
        this.targetRayMode = 'gaze';
        this.armModel = null;
      }
      get profiles() {
        return this.gamepad ? this.gamepad._profiles : [];
      }
      updateFromGamepad(gamepad) {
        if (this.nativeGamepad !== gamepad) {
          this.nativeGamepad = gamepad;
          if (gamepad) {
            this.gamepad = new XRRemappedGamepad(gamepad, this.display, GamepadMappings[gamepad.id]);
          } else {
            this.gamepad = null;
          }
        }
        this.handedness = gamepad.hand === '' ? 'none' : gamepad.hand;
        if (this.gamepad) {
          this.gamepad._update();
        }
        if (gamepad.pose) {
          this.targetRayMode = 'tracked-pointer';
          this.emulatedPosition = !gamepad.pose.hasPosition;
        } else if (gamepad.hand === '') {
          this.targetRayMode = 'gaze';
          this.emulatedPosition = false;
        }
      }
      updateBasePoseMatrix() {
        if (this.nativeGamepad && this.nativeGamepad.pose) {
          let pose = this.nativeGamepad.pose;
          let position = pose.position;
          let orientation = pose.orientation;
          if (!position && !orientation) {
            return;
          }
          if (!position) {
            if (!pose.hasPosition) {
              if (!this.armModel) {
                this.armModel = new OrientationArmModel();
              }
              this.armModel.setHandedness(this.nativeGamepad.hand);
              this.armModel.update(orientation, this.polyfill.getBasePoseMatrix());
              position = this.armModel.getPosition();
            } else {
              position = this.lastPosition;
            }
          } else {
            this.lastPosition[0] = position[0];
            this.lastPosition[1] = position[1];
            this.lastPosition[2] = position[2];
          }
          fromRotationTranslation(this.basePoseMatrix, orientation, position);
        } else {
          copy(this.basePoseMatrix, this.polyfill.getBasePoseMatrix());
        }
        return this.basePoseMatrix;
      }
      getXRPose(coordinateSystem, poseType) {
        this.updateBasePoseMatrix();
        switch(poseType) {
          case "target-ray":
            coordinateSystem._transformBasePoseMatrix(this.outputMatrix, this.basePoseMatrix);
            if (this.gamepad && this.gamepad[PRIVATE$18].targetRayTransform) {
              multiply(this.outputMatrix, this.outputMatrix, this.gamepad[PRIVATE$18].targetRayTransform);
            }
            break;
          case "grip":
            if (!this.nativeGamepad || !this.nativeGamepad.pose) {
              return null;
            }
            coordinateSystem._transformBasePoseMatrix(this.outputMatrix, this.basePoseMatrix);
            if (this.gamepad && this.gamepad[PRIVATE$18].gripTransform) {
              multiply(this.outputMatrix, this.outputMatrix, this.gamepad[PRIVATE$18].gripTransform);
            }
            break;
          default:
            return null;
        }
        coordinateSystem._adjustForOriginOffset(this.outputMatrix);
        return new XRPose(new XRRigidTransform(this.outputMatrix), this.emulatedPosition);
      }
    }
    const EXTRA_PRESENTATION_ATTRIBUTES = {
      highRefreshRate: true,
    };
    const PRIMARY_BUTTON_MAP = {
      oculus: 1,
      openvr: 1,
      'spatial controller (spatial interaction source)': 1
    };
    let SESSION_ID = 0;
    class Session {
      constructor(mode, enabledFeatures, polyfillOptions={}) {
        this.mode = mode;
        this.enabledFeatures = enabledFeatures;
        this.outputContext = null;
        this.immersive = mode == 'immersive-vr' || mode == 'immersive-ar';
        this.ended = null;
        this.baseLayer = null;
        this.id = ++SESSION_ID;
        this.modifiedCanvasLayer = false;
        if (this.outputContext && true) {
          const renderContextType = polyfillOptions.renderContextType || '2d';
          this.renderContext = this.outputContext.canvas.getContext(renderContextType);
        }
      }
    }
    class WebVRDevice extends XRDevice {
      constructor(global, display) {
        const { canPresent } = display.capabilities;
        super(global);
        this.display = display;
        this.frame = new global.VRFrameData();
        this.sessions = new Map();
        this.immersiveSession = null;
        this.canPresent = canPresent;
        this.baseModelMatrix = create();
        this.gamepadInputSources = {};
        this.tempVec3 = new Float32Array(3);
        this.onVRDisplayPresentChange = this.onVRDisplayPresentChange.bind(this);
        global.window.addEventListener('vrdisplaypresentchange', this.onVRDisplayPresentChange);
        this.CAN_USE_GAMEPAD = global.navigator && ('getGamepads' in global.navigator);
        this.HAS_BITMAP_SUPPORT = isImageBitmapSupported(global);
      }
      get depthNear() { return this.display.depthNear; }
      set depthNear(val) { this.display.depthNear = val; }
      get depthFar() { return this.display.depthFar; }
      set depthFar(val) { this.display.depthFar = val; }
      onBaseLayerSet(sessionId, layer) {
        const session = this.sessions.get(sessionId);
        const canvas = layer.context.canvas;
        if (session.immersive) {
          const left = this.display.getEyeParameters('left');
          const right = this.display.getEyeParameters('right');
          canvas.width = Math.max(left.renderWidth, right.renderWidth) * 2;
          canvas.height = Math.max(left.renderHeight, right.renderHeight);
          this.display.requestPresent([{
              source: canvas, attributes: EXTRA_PRESENTATION_ATTRIBUTES
            }]).then(() => {
            if (!this.global.document.body.contains(canvas)) {
              session.modifiedCanvasLayer = true;
              this.global.document.body.appendChild(canvas);
              applyCanvasStylesForMinimalRendering(canvas);
            }
            session.baseLayer = layer;
          });
        }
        else {
          session.baseLayer = layer;
        }
      }
      isSessionSupported(mode) {
        if (mode == 'immersive-ar') {
          return false;
        }
        if (mode == 'immersive-vr' && this.canPresent === false) {
          return false;
        }
        return true;
      }
      isFeatureSupported(featureDescriptor) {
        switch(featureDescriptor) {
          case 'viewer': return true;
          case 'local': return true;
          case 'local-floor': return true;
          case 'bounded': return false;
          case 'unbounded': return false;
          default: return false;
        }
      }
      async requestSession(mode, enabledFeatures) {
        if (!this.isSessionSupported(mode)) {
          return Promise.reject();
        }
        let immersive = mode == 'immersive-vr';
        if (immersive) {
          const canvas = this.global.document.createElement('canvas');
          {
            canvas.getContext('webgl');
          }
          await this.display.requestPresent([{
              source: canvas, attributes: EXTRA_PRESENTATION_ATTRIBUTES }]);
        }
        const session = new Session(mode, enabledFeatures, {
          renderContextType: this.HAS_BITMAP_SUPPORT ? 'bitmaprenderer' : '2d'
        });
        this.sessions.set(session.id, session);
        if (immersive) {
          this.immersiveSession = session;
          this.dispatchEvent('@@webxr-polyfill/vr-present-start', session.id);
        }
        return Promise.resolve(session.id);
      }
      requestAnimationFrame(callback) {
        return this.display.requestAnimationFrame(callback);
      }
      getPrimaryButtonIndex(gamepad) {
        let primaryButton = 0;
        let name = gamepad.id.toLowerCase();
        for (let key in PRIMARY_BUTTON_MAP) {
          if (name.includes(key)) {
            primaryButton = PRIMARY_BUTTON_MAP[key];
            break;
          }
        }
        return Math.min(primaryButton, gamepad.buttons.length - 1);
      }
      onFrameStart(sessionId, renderState) {
        this.display.depthNear = renderState.depthNear;
        this.display.depthFar = renderState.depthFar;
        this.display.getFrameData(this.frame);
        const session = this.sessions.get(sessionId);
        if (session.immersive && this.CAN_USE_GAMEPAD) {
          let prevInputSources = this.gamepadInputSources;
          this.gamepadInputSources = {};
          let gamepads = this.global.navigator.getGamepads();
          for (let i = 0; i < gamepads.length; ++i) {
            let gamepad = gamepads[i];
            if (gamepad && gamepad.displayId > 0) {
              let inputSourceImpl = prevInputSources[i];
              if (!inputSourceImpl) {
                inputSourceImpl = new GamepadXRInputSource(this, this.display, this.getPrimaryButtonIndex(gamepad));
              }
              inputSourceImpl.updateFromGamepad(gamepad);
              this.gamepadInputSources[i] = inputSourceImpl;
              if (inputSourceImpl.primaryButtonIndex != -1) {
                let primaryActionPressed = gamepad.buttons[inputSourceImpl.primaryButtonIndex].pressed;
                if (primaryActionPressed && !inputSourceImpl.primaryActionPressed) {
                  this.dispatchEvent('@@webxr-polyfill/input-select-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                } else if (!primaryActionPressed && inputSourceImpl.primaryActionPressed) {
                  this.dispatchEvent('@@webxr-polyfill/input-select-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                }
                inputSourceImpl.primaryActionPressed = primaryActionPressed;
              }
              if (inputSourceImpl.primarySqueezeButtonIndex != -1) {
                let primarySqueezeActionPressed = gamepad.buttons[inputSourceImpl.primarySqueezeButtonIndex].pressed;
                if (primarySqueezeActionPressed && !inputSourceImpl.primarySqueezeActionPressed) {
                  this.dispatchEvent('@@webxr-polyfill/input-squeeze-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                } else if (!primarySqueezeActionPressed && inputSourceImpl.primarySqueezeActionPressed) {
                  this.dispatchEvent('@@webxr-polyfill/input-squeeze-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                }
                inputSourceImpl.primarySqueezeActionPressed = primarySqueezeActionPressed;
              }
            }
          }
        }
        if (!session.immersive && session.baseLayer) {
          const canvas = session.baseLayer.context.canvas;
          perspective(this.frame.leftProjectionMatrix, renderState.inlineVerticalFieldOfView,
              canvas.width/canvas.height, renderState.depthNear, renderState.depthFar);
        }
      }
      onFrameEnd(sessionId) {
        const session = this.sessions.get(sessionId);
        if (session.ended || !session.baseLayer) {
          return;
        }
        if (session.outputContext &&
            !(session.immersive && !this.display.capabilities.hasExternalDisplay)) {
          const mirroring =
            session.immersive && this.display.capabilities.hasExternalDisplay;
          const iCanvas = session.baseLayer.context.canvas;
          const iWidth = mirroring ? iCanvas.width / 2 : iCanvas.width;
          const iHeight = iCanvas.height;
          {
            const oCanvas = session.outputContext.canvas;
            const oWidth = oCanvas.width;
            const oHeight = oCanvas.height;
            const renderContext = session.renderContext;
            if (this.HAS_BITMAP_SUPPORT) {
              if (iCanvas.transferToImageBitmap) {
                renderContext.transferFromImageBitmap(iCanvas.transferToImageBitmap());
              }
              else {
                this.global.createImageBitmap(iCanvas, 0, 0, iWidth, iHeight, {
                  resizeWidth: oWidth,
                  resizeHeight: oHeight,
                }).then(bitmap => renderContext.transferFromImageBitmap(bitmap));
              }
            } else {
              renderContext.drawImage(iCanvas, 0, 0, iWidth, iHeight,
                                               0, 0, oWidth, oHeight);
            }
          }
        }
        if (session.immersive && session.baseLayer) {
          this.display.submitFrame();
        }
      }
      cancelAnimationFrame(handle) {
        this.display.cancelAnimationFrame(handle);
      }
      async endSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (session.ended) {
          return;
        }
        if (session.immersive) {
          return this.display.exitPresent();
        } else {
          session.ended = true;
        }
      }
      doesSessionSupportReferenceSpace(sessionId, type) {
        const session = this.sessions.get(sessionId);
        if (session.ended) {
          return false;
        }
        return session.enabledFeatures.has(type);
      }
      requestStageBounds() {
        if (this.display.stageParameters) {
          const width = this.display.stageParameters.sizeX;
          const depth = this.display.stageParameters.sizeZ;
          const data = [];
          data.push(-width / 2);
          data.push(-depth / 2);
          data.push(width / 2);
          data.push(-depth / 2);
          data.push(width / 2);
          data.push(depth / 2);
          data.push(-width / 2);
          data.push(depth / 2);
          return data;
        }
        return null;
      }
      async requestFrameOfReferenceTransform(type, options) {
        if ((type === 'local-floor' || type === 'bounded-floor') &&
            this.display.stageParameters &&
            this.display.stageParameters.sittingToStandingTransform) {
          return this.display.stageParameters.sittingToStandingTransform;
        }
        return null;
      }
      getProjectionMatrix(eye) {
        if (eye === 'left') {
          return this.frame.leftProjectionMatrix;
        } else if (eye === 'right') {
          return this.frame.rightProjectionMatrix;
        } else if (eye === 'none') {
          return this.frame.leftProjectionMatrix;
        } else {
          throw new Error(`eye must be of type 'left' or 'right'`);
        }
      }
      getViewport(sessionId, eye, layer, target) {
        const session = this.sessions.get(sessionId);
        const { width, height } = layer.context.canvas;
        if (!session.immersive) {
          target.x = target.y = 0;
          target.width = width;
          target.height = height;
          return true;
        }
        if (eye === 'left' || eye === 'none') {
          target.x = 0;
        } else if (eye === 'right') {
          target.x = width / 2;
        } else {
          return false;
        }
        target.y = 0;
        target.width = width / 2;
        target.height = height;
        return true;
      }
      getBasePoseMatrix() {
        let { position, orientation } = this.frame.pose;
        if (!position && !orientation) {
          return this.baseModelMatrix;
        }
        if (!position) {
          position = this.tempVec3;
          position[0] = position[1] = position[2] = 0;
        }
        fromRotationTranslation(this.baseModelMatrix, orientation, position);
        return this.baseModelMatrix;
      }
      getBaseViewMatrix(eye) {
        if (eye === 'left' || eye === 'none') {
          return this.frame.leftViewMatrix;
        } else if (eye === 'right') {
          return this.frame.rightViewMatrix;
        } else {
          throw new Error(`eye must be of type 'left' or 'right'`);
        }
      }
      getInputSources() {
        let inputSources = [];
        for (let i in this.gamepadInputSources) {
          inputSources.push(this.gamepadInputSources[i].inputSource);
        }
        return inputSources;
      }
      getInputPose(inputSource, coordinateSystem, poseType) {
        if (!coordinateSystem) {
          return null;
        }
        for (let i in this.gamepadInputSources) {
          let inputSourceImpl = this.gamepadInputSources[i];
          if (inputSourceImpl.inputSource === inputSource) {
            return inputSourceImpl.getXRPose(coordinateSystem, poseType);
          }
        }
        return null;
      }
      onWindowResize() {
      }
      onVRDisplayPresentChange(e) {
        if (!this.display.isPresenting) {
          this.sessions.forEach(session => {
            if (session.immersive && !session.ended) {
              if (session.modifiedCanvasLayer) {
                const canvas = session.baseLayer.context.canvas;
                document.body.removeChild(canvas);
                canvas.setAttribute('style', '');
              }
              if (this.immersiveSession === session) {
                this.immersiveSession = null;
              }
              this.dispatchEvent('@@webxr-polyfill/vr-present-end', session.id);
            }
          });
        }
      }
    }

    class CardboardXRDevice extends WebVRDevice {
      constructor(global, cardboardConfig) {
        const display = new CardboardVRDisplay(cardboardConfig || {});
        super(global, display);
        this.display = display;
        this.frame = {
          rightViewMatrix: new Float32Array(16),
          leftViewMatrix: new Float32Array(16),
          rightProjectionMatrix: new Float32Array(16),
          leftProjectionMatrix: new Float32Array(16),
          pose: null,
          timestamp: null,
        };
      }
    }
    let SESSION_ID$1 = 0;
    class Session$1 {
      constructor(mode, enabledFeatures) {
        this.mode = mode;
        this.enabledFeatures = enabledFeatures;
        this.ended = null;
        this.baseLayer = null;
        this.id = ++SESSION_ID$1;
      }
    }
    class InlineDevice extends XRDevice {
      constructor(global) {
        super(global);
        this.sessions = new Map();
        this.projectionMatrix = create();
        this.identityMatrix = create();
      }
      onBaseLayerSet(sessionId, layer) {
        const session = this.sessions.get(sessionId);
        session.baseLayer = layer;
      }
      isSessionSupported(mode) {
        return mode == 'inline';
      }
      isFeatureSupported(featureDescriptor) {
        switch(featureDescriptor) {
          case 'viewer': return true;
          default: return false;
        }
      }
      async requestSession(mode, enabledFeatures) {
        if (!this.isSessionSupported(mode)) {
          return Promise.reject();
        }
        const session = new Session$1(mode, enabledFeatures);
        this.sessions.set(session.id, session);
        return Promise.resolve(session.id);
      }
      requestAnimationFrame(callback) {
        return window.requestAnimationFrame(callback);
      }
      cancelAnimationFrame(handle) {
        window.cancelAnimationFrame(handle);
      }
      onFrameStart(sessionId, renderState) {
        const session = this.sessions.get(sessionId);
        if (session.baseLayer) {
          const canvas = session.baseLayer.context.canvas;
          perspective(this.projectionMatrix, renderState.inlineVerticalFieldOfView,
              canvas.width/canvas.height, renderState.depthNear, renderState.depthFar);
        }
      }
      onFrameEnd(sessionId) {
      }
      async endSession(sessionId) {
        const session = this.sessions.get(sessionId);
        session.ended = true;
      }
      doesSessionSupportReferenceSpace(sessionId, type) {
        const session = this.sessions.get(sessionId);
        if (session.ended) {
          return false;
        }
        return session.enabledFeatures.has(type);
      }
      requestStageBounds() {
        return null;
      }
      async requestFrameOfReferenceTransform(type, options) {
        return null;
      }
      getProjectionMatrix(eye) {
        return this.projectionMatrix;
      }
      getViewport(sessionId, eye, layer, target) {
        this.sessions.get(sessionId);
        const { width, height } = layer.context.canvas;
        target.x = target.y = 0;
        target.width = width;
        target.height = height;
        return true;
      }
      getBasePoseMatrix() {
        return this.identityMatrix;
      }
      getBaseViewMatrix(eye) {
        return this.identityMatrix;
      }
      getInputSources() {
        return [];
      }
      getInputPose(inputSource, coordinateSystem, poseType) {
        return null;
      }
      onWindowResize() {
      }
    }

    const getWebVRDevice = async function (global) {
      let device = null;
      if ('getVRDisplays' in global.navigator) {
        try {
          const displays = await global.navigator.getVRDisplays();
          if (displays && displays.length) {
            device = new WebVRDevice(global, displays[0]);
          }
        } catch (e) {}
      }
      return device;
    };
    const requestXRDevice = async function (global, config) {
      if (config.webvr) {
        let xr = await getWebVRDevice(global);
        if (xr) {
          return xr;
        }
      }
      let mobile = isMobile(global);
      if ((mobile && config.cardboard) ||
          (!mobile && config.allowCardboardOnDesktop)) {
        if (!global.VRFrameData) {
          global.VRFrameData = function () {
            this.rightViewMatrix = new Float32Array(16);
            this.leftViewMatrix = new Float32Array(16);
            this.rightProjectionMatrix = new Float32Array(16);
            this.leftProjectionMatrix = new Float32Array(16);
            this.pose = null;
          };
        }
        return new CardboardXRDevice(global, config.cardboardConfig);
      }
      return new InlineDevice(global);
    };

    const CONFIG_DEFAULTS = {
      global: _global,
      webvr: true,
      cardboard: true,
      cardboardConfig: null,
      allowCardboardOnDesktop: false,
    };
    const partials = ['navigator', 'HTMLCanvasElement', 'WebGLRenderingContext'];
    class WebXRPolyfill {
      constructor(config={}) {
        this.config = Object.freeze(Object.assign({}, CONFIG_DEFAULTS, config));
        this.global = this.config.global;
        this.nativeWebXR = 'xr' in this.global.navigator;
        this.injected = false;
        if (!this.nativeWebXR) {
          this._injectPolyfill(this.global);
        } else {
          this._injectCompatibilityShims(this.global);
        }
      }
      _injectPolyfill(global) {
        if (!partials.every(iface => !!global[iface])) {
          throw new Error(`Global must have the following attributes : ${partials}`);
        }
        for (const className of Object.keys(API)) {
          if (global[className] !== undefined) {
            console.warn(`${className} already defined on global.`);
          } else {
            global[className] = API[className];
          }
        }
        {
          const polyfilledCtx = polyfillMakeXRCompatible(global.WebGLRenderingContext);
          if (polyfilledCtx) {
            polyfillGetContext(global.HTMLCanvasElement);
            if (global.OffscreenCanvas) {
              polyfillGetContext(global.OffscreenCanvas);
            }
            if (global.WebGL2RenderingContext){
              polyfillMakeXRCompatible(global.WebGL2RenderingContext);
            }
            if (!window.isSecureContext) {
              console.warn(`WebXR Polyfill Warning:
This page is not running in a secure context (https:// or localhost)!
This means that although the page may be able to use the WebXR Polyfill it will
not be able to use native WebXR implementations, and as such will not be able to
access dedicated VR or AR hardware, and will not be able to take advantage of
any performance improvements a native WebXR implementation may offer. Please
host this content on a secure origin for the best user experience.
`);
            }
          }
        }
        this.injected = true;
        this._patchNavigatorXR();
      }
      _patchNavigatorXR() {
        let devicePromise = requestXRDevice(this.global, this.config);
        this.xr = new API.XRSystem(devicePromise);
        Object.defineProperty(this.global.navigator, 'xr', {
          value: this.xr,
          configurable: true,
        });
      }
      _injectCompatibilityShims(global) {
        if (!partials.every(iface => !!global[iface])) {
          throw new Error(`Global must have the following attributes : ${partials}`);
        }
        if (global.navigator.xr &&
            'supportsSession' in global.navigator.xr &&
            !('isSessionSupported' in global.navigator.xr)) {
          let originalSupportsSession = global.navigator.xr.supportsSession;
          global.navigator.xr.isSessionSupported = function(mode) {
            return originalSupportsSession.call(this, mode).then(() => {
              return true;
            }).catch(() => {
              return false;
            });
          };
          global.navigator.xr.supportsSession = function(mode) {
            console.warn("navigator.xr.supportsSession() is deprecated. Please " +
            "call navigator.xr.isSessionSupported() instead and check the boolean " +
            "value returned when the promise resolves.");
            return originalSupportsSession.call(this, mode);
          };
        }
      }
    }

    var video = document.getElementsByTagName("video")[0];

    var polyfill = null;

    let camera, scene, renderer;
    let videoPlane, videoTexture;
    let progressBar, barMaterial;

    if(!video){
        console.log(init);
        console.log(animate);
        log("No video, skipping injection.");
    }else {

        const style = document.createElement('style');
        style.textContent = styles;
        document.head.appendChild(style);
        log("Injected styles", null, style);

        polyfill = new WebXRPolyfill({
            global: window, //!!!!!!!!!!!!
            webvr: true,
            cardboard: true,
            allowCardboardOnDesktop: true,
            cardboardConfig: {
                ADDITIONAL_VIEWERS: [
                    {
                        id: 'Custom01',
                        label: 'Custom01',
                        fov: 60,
                        interLensDistance: 0.045,
                        baselineLensDistance: 0.035,
                        screenLensDistance: 0.039,
                        distortionCoefficients: [0.34, 0.55],
                        inverseCoefficients: [
                            -0.33836704, -0.18162185, 0.862655, -1.2462051,
                            1.0560602, -0.58208317, 0.21609078, -0.05444823, 0.009177956,
                            -9904169e-10, 6.183535E-5, -16981803e-13]
                    }
                ],

                DEFAULT_VIEWER: 'Custom01',
                PROVIDE_MOBILE_VRDISPLAY: true,

                //---Options passed into the underlying CardboardVRDisplay
                MOBILE_WAKE_LOCK: true,
                DEBUG: false,
                DPDB_URL: 'https://storage.googleapis.com/cardboard-dpdb/dpdb.json',
                K_FILTER: 0.98,
                PREDICTION_TIME_S: 0.040,
                CARDBOARD_UI_DISABLED: false, // Default: false
                ROTATE_INSTRUCTIONS_DISABLED: true, // Default: false.
                YAW_ONLY: false ,
                BUFFER_SCALE: 1.5,
                DIRTY_SUBMIT_FRAME_BINDINGS: false,
            }
        });

        log("WebXRPolyfill instantiated." , "pre-init", polyfill);
        log("Video found: ", null, video);

        init();
        animate();
    }


    // Hello

    function init() {
        log("Starting", "init");

        // Start video
        video.play();
        videoTexture = new VideoTexture(video);

        // Setup scene
        scene = new Scene();
        camera = new PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 1;

        // Create renderer
        renderer = new WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.xr.enabled = true;
        renderer.domElement.classList.add("webgl");

        // Create modal overlay container
        const modal = document.createElement('div');
        modal.id = 'vr-overlay-modal';

        const canvasContainer = document.createElement('div');
        canvasContainer.id = 'vr-canvas-container';

        canvasContainer.appendChild(renderer.domElement);
        modal.appendChild(canvasContainer);

        // Add Start button
        const startButton = document.createElement('button');
        startButton.id = 'vr-start-button';
        startButton.textContent = 'Enter VR';
        startButton.onclick = () => {
            modal.removeChild(startButton); // Remove button after click
            document.body.appendChild(VRButton.createButton(renderer));
        };
        modal.appendChild(startButton);

        // Add Close button
        const closeButton = document.createElement('button');
        closeButton.id = 'vr-close-button';
        closeButton.textContent = 'Close';
        startButton.onclick = async () => {
            modal.removeChild(startButton);

            try {
                // 1. Request an immersive VR session (must be inside user gesture handler)
                const session = await navigator.xr.requestSession("immersive-vr");

                // 2. Attach session to renderer
                await renderer.xr.setSession(session);

                // 3. Optionally append the standard VRButton to allow exiting later
                document.body.appendChild(VRButton.createButton(renderer));

                // 4. (Optional) Resize renderer to full-window before session begins
                renderer.setSize(window.innerWidth, window.innerHeight);
            } catch (err) {
                console.error("Failed to start XR session:", err);
            }
        };

        modal.appendChild(closeButton);

        document.body.appendChild(modal);

        // Background
        const loader = new TextureLoader();
        const texture = loader.load('box.png');
        scene.background = texture;

        // Video Plane
        const geometry = new PlaneGeometry(1.6, 0.9);
        const material = new MeshBasicMaterial({ map: videoTexture });
        videoPlane = new Mesh(geometry, material);
        videoPlane.position.set(0, 0, -1.5);
        scene.add(videoPlane);

        // Controls
        createButton('▶', -0.6, -1.5, () => video.play());
        createButton('⏪', -0.9, -1.5, () => { video.currentTime = Math.max(0, video.currentTime - 5); });
        createButton('⏩', -0.3, -1.5, () => { video.currentTime = Math.min(video.duration, video.currentTime + 5); });

        // Progress Bar
        const barGeometry = new PlaneGeometry(1.2, 0.05);
        barMaterial = new MeshBasicMaterial({ color: 0x00ff00 });
        progressBar = new Mesh(barGeometry, barMaterial);
        progressBar.position.set(0, -0.9, -1.5);
        scene.add(progressBar);

        window.addEventListener('resize', onWindowResize);
    }


    function createButton(label, x, y, onClick) {
        const canvas = document.createElement('canvas');
        canvas.width = 128;
        canvas.height = 128;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#000';
        ctx.fillRect(0, 0, 128, 128);
        ctx.fillStyle = '#fff';
        ctx.font = 'bold 64px sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(label, 64, 64);

        const texture = new CanvasTexture(canvas);
        const mat = new MeshBasicMaterial({ map: texture, transparent: true });
        const geo = new PlaneGeometry(0.3, 0.3);
        const mesh = new Mesh(geo, mat);
        mesh.position.set(x, y, -1.5);
        scene.add(mesh);
        // For future interactivity (e.g., raycasting): store click handler
        mesh.userData.onClick = onClick;
    }

    function updateProgressBar() {
        if (!video.duration) return;
        const ratio = video.currentTime / video.duration;
        progressBar.scale.x = ratio;
        progressBar.position.x = -0.6 + ratio * 0.6;
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
        renderer.setAnimationLoop(render);
    }

    function render() {
        updateProgressBar();
        renderer.render(scene, camera);
    }

})();
';
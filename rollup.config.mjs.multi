import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import css from 'rollup-plugin-import-css';
import { Buffer } from 'node:buffer';

export default {
    input: {
        webxr: 'src/webxr/inject.js',
        webvr: 'src/webvr/inject.js'
    },
    output: {
        dir: 'extension',
        format: 'esm', // allow code-splitting
        entryFileNames: '[name].js' // helps track names
    },
    plugins: [
        css(),
        resolve(),
        commonjs(),
        {
            // Bypass "WebExtension limitations" by bundling as base64 data uri script tag
            // so that WebVR/WebXR runs in the real page context.
            name: 'bundle-base64-multi',
            generateBundle(_, bundle) {
                const vars = [];

                for (const [fileName, chunk] of Object.entries(bundle)) {
                    if (chunk.type === 'chunk' && chunk.isEntry) {
                        const varName = fileName.toUpperCase().replace(/\.JS$/, '_B64');

                        // Wrap in IIFE before base64 encoding
                        const wrappedCode = `(function(){\n${chunk.code}\n})();`;

                        const b64 = Buffer.from(wrappedCode).toString('base64');
                        vars.push(`const ${varName} = '${b64}';`);
                    }
                }

                const backgroundScript = `
${vars.join('\n')}

chrome.runtime.onMessage.addListener((msg, sender) => {
  console.log("msg received: ", msg);
  
  console.log(sender)
  
  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      console.log("finding current tab...")
      const tab = tabs[0];
      if (!tab) return;
      let B64 = "";
      console.log("found tab", tab)
      
      B64 = msg.type === 'webxr'
      ? WEBXR_B64
      : msg.type === 'webvr'
      ? WEBVR_B64
      : null;
    
      if (!B64) return;
    
      const code = \`(function() {
        console.log("injecting code...")
        const s = document.createElement('script');
        s.type = "module";
        s.src = "data:text/javascript;base64,\${B64}";
        (document.head || document.documentElement).appendChild(s);
      })();\`;
    
      chrome.tabs.executeScript(tab.id, { code: code, runAt: 'document_idle' });
  });
});
`;

                this.emitFile({
                    type: 'asset',
                    fileName: 'background_script.js',
                    source: backgroundScript.trim()
                });

                // Remove generated chunks so only background_script.js is emitted
                for (const key of Object.keys(bundle)) {
                    if (bundle[key].type === 'chunk') delete bundle[key];
                }
            }
        }
    ]
};
